// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.6.1
// source: dota_gcmessages_common.proto

package dota

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ESpecialPingValue int32

const (
	ESpecialPingValue_k_ESpecialPingValue_NoData ESpecialPingValue = 16382
	ESpecialPingValue_k_ESpecialPingValue_Failed ESpecialPingValue = 16383
)

// Enum value maps for ESpecialPingValue.
var (
	ESpecialPingValue_name = map[int32]string{
		16382: "k_ESpecialPingValue_NoData",
		16383: "k_ESpecialPingValue_Failed",
	}
	ESpecialPingValue_value = map[string]int32{
		"k_ESpecialPingValue_NoData": 16382,
		"k_ESpecialPingValue_Failed": 16383,
	}
)

func (x ESpecialPingValue) Enum() *ESpecialPingValue {
	p := new(ESpecialPingValue)
	*p = x
	return p
}

func (x ESpecialPingValue) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESpecialPingValue) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_common_proto_enumTypes[0].Descriptor()
}

func (ESpecialPingValue) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_common_proto_enumTypes[0]
}

func (x ESpecialPingValue) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ESpecialPingValue) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ESpecialPingValue(num)
	return nil
}

// Deprecated: Use ESpecialPingValue.Descriptor instead.
func (ESpecialPingValue) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{0}
}

type EDOTAGCSessionNeed int32

const (
	EDOTAGCSessionNeed_k_EDOTAGCSessionNeed_Unknown                    EDOTAGCSessionNeed = 0
	EDOTAGCSessionNeed_k_EDOTAGCSessionNeed_UserNoSessionNeeded        EDOTAGCSessionNeed = 100
	EDOTAGCSessionNeed_k_EDOTAGCSessionNeed_UserInOnlineGame           EDOTAGCSessionNeed = 101
	EDOTAGCSessionNeed_k_EDOTAGCSessionNeed_UserInLocalGame            EDOTAGCSessionNeed = 102
	EDOTAGCSessionNeed_k_EDOTAGCSessionNeed_UserInUIWasConnected       EDOTAGCSessionNeed = 103
	EDOTAGCSessionNeed_k_EDOTAGCSessionNeed_UserInUINeverConnected     EDOTAGCSessionNeed = 104
	EDOTAGCSessionNeed_k_EDOTAGCSessionNeed_UserTutorials              EDOTAGCSessionNeed = 105
	EDOTAGCSessionNeed_k_EDOTAGCSessionNeed_UserInUIWasConnectedIdle   EDOTAGCSessionNeed = 106
	EDOTAGCSessionNeed_k_EDOTAGCSessionNeed_UserInUINeverConnectedIdle EDOTAGCSessionNeed = 107
	EDOTAGCSessionNeed_k_EDOTAGCSessionNeed_GameServerOnline           EDOTAGCSessionNeed = 200
	EDOTAGCSessionNeed_k_EDOTAGCSessionNeed_GameServerLocal            EDOTAGCSessionNeed = 201
	EDOTAGCSessionNeed_k_EDOTAGCSessionNeed_GameServerIdle             EDOTAGCSessionNeed = 202
	EDOTAGCSessionNeed_k_EDOTAGCSessionNeed_GameServerRelay            EDOTAGCSessionNeed = 203
	EDOTAGCSessionNeed_k_EDOTAGCSessionNeed_GameServerLocalUpload      EDOTAGCSessionNeed = 204
)

// Enum value maps for EDOTAGCSessionNeed.
var (
	EDOTAGCSessionNeed_name = map[int32]string{
		0:   "k_EDOTAGCSessionNeed_Unknown",
		100: "k_EDOTAGCSessionNeed_UserNoSessionNeeded",
		101: "k_EDOTAGCSessionNeed_UserInOnlineGame",
		102: "k_EDOTAGCSessionNeed_UserInLocalGame",
		103: "k_EDOTAGCSessionNeed_UserInUIWasConnected",
		104: "k_EDOTAGCSessionNeed_UserInUINeverConnected",
		105: "k_EDOTAGCSessionNeed_UserTutorials",
		106: "k_EDOTAGCSessionNeed_UserInUIWasConnectedIdle",
		107: "k_EDOTAGCSessionNeed_UserInUINeverConnectedIdle",
		200: "k_EDOTAGCSessionNeed_GameServerOnline",
		201: "k_EDOTAGCSessionNeed_GameServerLocal",
		202: "k_EDOTAGCSessionNeed_GameServerIdle",
		203: "k_EDOTAGCSessionNeed_GameServerRelay",
		204: "k_EDOTAGCSessionNeed_GameServerLocalUpload",
	}
	EDOTAGCSessionNeed_value = map[string]int32{
		"k_EDOTAGCSessionNeed_Unknown":                    0,
		"k_EDOTAGCSessionNeed_UserNoSessionNeeded":        100,
		"k_EDOTAGCSessionNeed_UserInOnlineGame":           101,
		"k_EDOTAGCSessionNeed_UserInLocalGame":            102,
		"k_EDOTAGCSessionNeed_UserInUIWasConnected":       103,
		"k_EDOTAGCSessionNeed_UserInUINeverConnected":     104,
		"k_EDOTAGCSessionNeed_UserTutorials":              105,
		"k_EDOTAGCSessionNeed_UserInUIWasConnectedIdle":   106,
		"k_EDOTAGCSessionNeed_UserInUINeverConnectedIdle": 107,
		"k_EDOTAGCSessionNeed_GameServerOnline":           200,
		"k_EDOTAGCSessionNeed_GameServerLocal":            201,
		"k_EDOTAGCSessionNeed_GameServerIdle":             202,
		"k_EDOTAGCSessionNeed_GameServerRelay":            203,
		"k_EDOTAGCSessionNeed_GameServerLocalUpload":      204,
	}
)

func (x EDOTAGCSessionNeed) Enum() *EDOTAGCSessionNeed {
	p := new(EDOTAGCSessionNeed)
	*p = x
	return p
}

func (x EDOTAGCSessionNeed) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EDOTAGCSessionNeed) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_common_proto_enumTypes[1].Descriptor()
}

func (EDOTAGCSessionNeed) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_common_proto_enumTypes[1]
}

func (x EDOTAGCSessionNeed) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EDOTAGCSessionNeed) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EDOTAGCSessionNeed(num)
	return nil
}

// Deprecated: Use EDOTAGCSessionNeed.Descriptor instead.
func (EDOTAGCSessionNeed) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{1}
}

type DOTA_TournamentEvents int32

const (
	DOTA_TournamentEvents_TE_FIRST_BLOOD  DOTA_TournamentEvents = 0
	DOTA_TournamentEvents_TE_GAME_END     DOTA_TournamentEvents = 1
	DOTA_TournamentEvents_TE_MULTI_KILL   DOTA_TournamentEvents = 2
	DOTA_TournamentEvents_TE_HERO_DENY    DOTA_TournamentEvents = 3
	DOTA_TournamentEvents_TE_AEGIS_DENY   DOTA_TournamentEvents = 4
	DOTA_TournamentEvents_TE_AEGIS_STOLEN DOTA_TournamentEvents = 5
	DOTA_TournamentEvents_TE_GODLIKE      DOTA_TournamentEvents = 6
	DOTA_TournamentEvents_TE_COURIER_KILL DOTA_TournamentEvents = 7
	DOTA_TournamentEvents_TE_ECHOSLAM     DOTA_TournamentEvents = 8
	DOTA_TournamentEvents_TE_RAPIER       DOTA_TournamentEvents = 9
	DOTA_TournamentEvents_TE_EARLY_ROSHAN DOTA_TournamentEvents = 10
	DOTA_TournamentEvents_TE_BLACK_HOLE   DOTA_TournamentEvents = 11
)

// Enum value maps for DOTA_TournamentEvents.
var (
	DOTA_TournamentEvents_name = map[int32]string{
		0:  "TE_FIRST_BLOOD",
		1:  "TE_GAME_END",
		2:  "TE_MULTI_KILL",
		3:  "TE_HERO_DENY",
		4:  "TE_AEGIS_DENY",
		5:  "TE_AEGIS_STOLEN",
		6:  "TE_GODLIKE",
		7:  "TE_COURIER_KILL",
		8:  "TE_ECHOSLAM",
		9:  "TE_RAPIER",
		10: "TE_EARLY_ROSHAN",
		11: "TE_BLACK_HOLE",
	}
	DOTA_TournamentEvents_value = map[string]int32{
		"TE_FIRST_BLOOD":  0,
		"TE_GAME_END":     1,
		"TE_MULTI_KILL":   2,
		"TE_HERO_DENY":    3,
		"TE_AEGIS_DENY":   4,
		"TE_AEGIS_STOLEN": 5,
		"TE_GODLIKE":      6,
		"TE_COURIER_KILL": 7,
		"TE_ECHOSLAM":     8,
		"TE_RAPIER":       9,
		"TE_EARLY_ROSHAN": 10,
		"TE_BLACK_HOLE":   11,
	}
)

func (x DOTA_TournamentEvents) Enum() *DOTA_TournamentEvents {
	p := new(DOTA_TournamentEvents)
	*p = x
	return p
}

func (x DOTA_TournamentEvents) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DOTA_TournamentEvents) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_common_proto_enumTypes[2].Descriptor()
}

func (DOTA_TournamentEvents) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_common_proto_enumTypes[2]
}

func (x DOTA_TournamentEvents) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DOTA_TournamentEvents) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DOTA_TournamentEvents(num)
	return nil
}

// Deprecated: Use DOTA_TournamentEvents.Descriptor instead.
func (DOTA_TournamentEvents) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{2}
}

type EBroadcastTimelineEvent int32

const (
	EBroadcastTimelineEvent_EBroadcastTimelineEvent_MatchStarted     EBroadcastTimelineEvent = 1
	EBroadcastTimelineEvent_EBroadcastTimelineEvent_GameStateChanged EBroadcastTimelineEvent = 2
	EBroadcastTimelineEvent_EBroadcastTimelineEvent_TowerDeath       EBroadcastTimelineEvent = 3
	EBroadcastTimelineEvent_EBroadcastTimelineEvent_BarracksDeath    EBroadcastTimelineEvent = 4
	EBroadcastTimelineEvent_EBroadcastTimelineEvent_AncientDeath     EBroadcastTimelineEvent = 5
	EBroadcastTimelineEvent_EBroadcastTimelineEvent_RoshanDeath      EBroadcastTimelineEvent = 6
	EBroadcastTimelineEvent_EBroadcastTimelineEvent_HeroDeath        EBroadcastTimelineEvent = 7
	EBroadcastTimelineEvent_EBroadcastTimelineEvent_TeamFight        EBroadcastTimelineEvent = 8
	EBroadcastTimelineEvent_EBroadcastTimelineEvent_FirstBlood       EBroadcastTimelineEvent = 9
)

// Enum value maps for EBroadcastTimelineEvent.
var (
	EBroadcastTimelineEvent_name = map[int32]string{
		1: "EBroadcastTimelineEvent_MatchStarted",
		2: "EBroadcastTimelineEvent_GameStateChanged",
		3: "EBroadcastTimelineEvent_TowerDeath",
		4: "EBroadcastTimelineEvent_BarracksDeath",
		5: "EBroadcastTimelineEvent_AncientDeath",
		6: "EBroadcastTimelineEvent_RoshanDeath",
		7: "EBroadcastTimelineEvent_HeroDeath",
		8: "EBroadcastTimelineEvent_TeamFight",
		9: "EBroadcastTimelineEvent_FirstBlood",
	}
	EBroadcastTimelineEvent_value = map[string]int32{
		"EBroadcastTimelineEvent_MatchStarted":     1,
		"EBroadcastTimelineEvent_GameStateChanged": 2,
		"EBroadcastTimelineEvent_TowerDeath":       3,
		"EBroadcastTimelineEvent_BarracksDeath":    4,
		"EBroadcastTimelineEvent_AncientDeath":     5,
		"EBroadcastTimelineEvent_RoshanDeath":      6,
		"EBroadcastTimelineEvent_HeroDeath":        7,
		"EBroadcastTimelineEvent_TeamFight":        8,
		"EBroadcastTimelineEvent_FirstBlood":       9,
	}
)

func (x EBroadcastTimelineEvent) Enum() *EBroadcastTimelineEvent {
	p := new(EBroadcastTimelineEvent)
	*p = x
	return p
}

func (x EBroadcastTimelineEvent) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EBroadcastTimelineEvent) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_common_proto_enumTypes[3].Descriptor()
}

func (EBroadcastTimelineEvent) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_common_proto_enumTypes[3]
}

func (x EBroadcastTimelineEvent) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EBroadcastTimelineEvent) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EBroadcastTimelineEvent(num)
	return nil
}

// Deprecated: Use EBroadcastTimelineEvent.Descriptor instead.
func (EBroadcastTimelineEvent) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{3}
}

type ECustomGameWhitelistState int32

const (
	ECustomGameWhitelistState_CUSTOM_GAME_WHITELIST_STATE_UNKNOWN  ECustomGameWhitelistState = 0
	ECustomGameWhitelistState_CUSTOM_GAME_WHITELIST_STATE_APPROVED ECustomGameWhitelistState = 1
	ECustomGameWhitelistState_CUSTOM_GAME_WHITELIST_STATE_REJECTED ECustomGameWhitelistState = 2
)

// Enum value maps for ECustomGameWhitelistState.
var (
	ECustomGameWhitelistState_name = map[int32]string{
		0: "CUSTOM_GAME_WHITELIST_STATE_UNKNOWN",
		1: "CUSTOM_GAME_WHITELIST_STATE_APPROVED",
		2: "CUSTOM_GAME_WHITELIST_STATE_REJECTED",
	}
	ECustomGameWhitelistState_value = map[string]int32{
		"CUSTOM_GAME_WHITELIST_STATE_UNKNOWN":  0,
		"CUSTOM_GAME_WHITELIST_STATE_APPROVED": 1,
		"CUSTOM_GAME_WHITELIST_STATE_REJECTED": 2,
	}
)

func (x ECustomGameWhitelistState) Enum() *ECustomGameWhitelistState {
	p := new(ECustomGameWhitelistState)
	*p = x
	return p
}

func (x ECustomGameWhitelistState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ECustomGameWhitelistState) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_common_proto_enumTypes[4].Descriptor()
}

func (ECustomGameWhitelistState) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_common_proto_enumTypes[4]
}

func (x ECustomGameWhitelistState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ECustomGameWhitelistState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ECustomGameWhitelistState(num)
	return nil
}

// Deprecated: Use ECustomGameWhitelistState.Descriptor instead.
func (ECustomGameWhitelistState) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{4}
}

type EDOTATriviaQuestionCategory int32

const (
	EDOTATriviaQuestionCategory_k_EDOTATriviaQuestionCategory_AbilityIcon       EDOTATriviaQuestionCategory = 0
	EDOTATriviaQuestionCategory_k_EDOTATriviaQuestionCategory_AbilityCooldown   EDOTATriviaQuestionCategory = 1
	EDOTATriviaQuestionCategory_k_EDOTATriviaQuestionCategory_HeroAttributes    EDOTATriviaQuestionCategory = 2
	EDOTATriviaQuestionCategory_k_EDOTATriviaQuestionCategory_HeroMovementSpeed EDOTATriviaQuestionCategory = 3
	EDOTATriviaQuestionCategory_k_EDOTATriviaQuestionCategory_TalentTree        EDOTATriviaQuestionCategory = 4
	EDOTATriviaQuestionCategory_k_EDOTATriviaQuestionCategory_HeroStats         EDOTATriviaQuestionCategory = 5
	EDOTATriviaQuestionCategory_k_EDOTATriviaQuestionCategory_ItemPrice         EDOTATriviaQuestionCategory = 6
	EDOTATriviaQuestionCategory_k_EDOTATriviaQuestionCategory_AbilitySound      EDOTATriviaQuestionCategory = 7
	EDOTATriviaQuestionCategory_k_EDOTATriviaQuestionCategory_InvokerSpells     EDOTATriviaQuestionCategory = 8
	EDOTATriviaQuestionCategory_k_EDOTATriviaQuestionCategory_AbilityManaCost   EDOTATriviaQuestionCategory = 9
	EDOTATriviaQuestionCategory_k_EDOTATriviaQuestionCategory_HeroAttackSound   EDOTATriviaQuestionCategory = 10
	EDOTATriviaQuestionCategory_k_EDOTATriviaQuestionCategory_AbilityName       EDOTATriviaQuestionCategory = 11
	EDOTATriviaQuestionCategory_k_EDOTATriviaQuestionCategory_ItemComponents    EDOTATriviaQuestionCategory = 12
	EDOTATriviaQuestionCategory_k_EDOTATriviaQuestionCategory_ItemLore          EDOTATriviaQuestionCategory = 13
	EDOTATriviaQuestionCategory_k_EDOTATriviaQuestionCategory_ItemPassives      EDOTATriviaQuestionCategory = 14
)

// Enum value maps for EDOTATriviaQuestionCategory.
var (
	EDOTATriviaQuestionCategory_name = map[int32]string{
		0:  "k_EDOTATriviaQuestionCategory_AbilityIcon",
		1:  "k_EDOTATriviaQuestionCategory_AbilityCooldown",
		2:  "k_EDOTATriviaQuestionCategory_HeroAttributes",
		3:  "k_EDOTATriviaQuestionCategory_HeroMovementSpeed",
		4:  "k_EDOTATriviaQuestionCategory_TalentTree",
		5:  "k_EDOTATriviaQuestionCategory_HeroStats",
		6:  "k_EDOTATriviaQuestionCategory_ItemPrice",
		7:  "k_EDOTATriviaQuestionCategory_AbilitySound",
		8:  "k_EDOTATriviaQuestionCategory_InvokerSpells",
		9:  "k_EDOTATriviaQuestionCategory_AbilityManaCost",
		10: "k_EDOTATriviaQuestionCategory_HeroAttackSound",
		11: "k_EDOTATriviaQuestionCategory_AbilityName",
		12: "k_EDOTATriviaQuestionCategory_ItemComponents",
		13: "k_EDOTATriviaQuestionCategory_ItemLore",
		14: "k_EDOTATriviaQuestionCategory_ItemPassives",
	}
	EDOTATriviaQuestionCategory_value = map[string]int32{
		"k_EDOTATriviaQuestionCategory_AbilityIcon":       0,
		"k_EDOTATriviaQuestionCategory_AbilityCooldown":   1,
		"k_EDOTATriviaQuestionCategory_HeroAttributes":    2,
		"k_EDOTATriviaQuestionCategory_HeroMovementSpeed": 3,
		"k_EDOTATriviaQuestionCategory_TalentTree":        4,
		"k_EDOTATriviaQuestionCategory_HeroStats":         5,
		"k_EDOTATriviaQuestionCategory_ItemPrice":         6,
		"k_EDOTATriviaQuestionCategory_AbilitySound":      7,
		"k_EDOTATriviaQuestionCategory_InvokerSpells":     8,
		"k_EDOTATriviaQuestionCategory_AbilityManaCost":   9,
		"k_EDOTATriviaQuestionCategory_HeroAttackSound":   10,
		"k_EDOTATriviaQuestionCategory_AbilityName":       11,
		"k_EDOTATriviaQuestionCategory_ItemComponents":    12,
		"k_EDOTATriviaQuestionCategory_ItemLore":          13,
		"k_EDOTATriviaQuestionCategory_ItemPassives":      14,
	}
)

func (x EDOTATriviaQuestionCategory) Enum() *EDOTATriviaQuestionCategory {
	p := new(EDOTATriviaQuestionCategory)
	*p = x
	return p
}

func (x EDOTATriviaQuestionCategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EDOTATriviaQuestionCategory) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_common_proto_enumTypes[5].Descriptor()
}

func (EDOTATriviaQuestionCategory) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_common_proto_enumTypes[5]
}

func (x EDOTATriviaQuestionCategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EDOTATriviaQuestionCategory) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EDOTATriviaQuestionCategory(num)
	return nil
}

// Deprecated: Use EDOTATriviaQuestionCategory.Descriptor instead.
func (EDOTATriviaQuestionCategory) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{5}
}

type CMsgDOTAProfileCard_EStatID int32

const (
	CMsgDOTAProfileCard_k_eStat_CoreRank           CMsgDOTAProfileCard_EStatID = 1
	CMsgDOTAProfileCard_k_eStat_SupportRank        CMsgDOTAProfileCard_EStatID = 2
	CMsgDOTAProfileCard_k_eStat_Wins               CMsgDOTAProfileCard_EStatID = 3
	CMsgDOTAProfileCard_k_eStat_Commends           CMsgDOTAProfileCard_EStatID = 4
	CMsgDOTAProfileCard_k_eStat_GamesPlayed        CMsgDOTAProfileCard_EStatID = 5
	CMsgDOTAProfileCard_k_eStat_FirstMatchDate     CMsgDOTAProfileCard_EStatID = 6
	CMsgDOTAProfileCard_k_eStat_PreviousSeasonRank CMsgDOTAProfileCard_EStatID = 7
	CMsgDOTAProfileCard_k_eStat_GamesMVP           CMsgDOTAProfileCard_EStatID = 8
)

// Enum value maps for CMsgDOTAProfileCard_EStatID.
var (
	CMsgDOTAProfileCard_EStatID_name = map[int32]string{
		1: "k_eStat_CoreRank",
		2: "k_eStat_SupportRank",
		3: "k_eStat_Wins",
		4: "k_eStat_Commends",
		5: "k_eStat_GamesPlayed",
		6: "k_eStat_FirstMatchDate",
		7: "k_eStat_PreviousSeasonRank",
		8: "k_eStat_GamesMVP",
	}
	CMsgDOTAProfileCard_EStatID_value = map[string]int32{
		"k_eStat_CoreRank":           1,
		"k_eStat_SupportRank":        2,
		"k_eStat_Wins":               3,
		"k_eStat_Commends":           4,
		"k_eStat_GamesPlayed":        5,
		"k_eStat_FirstMatchDate":     6,
		"k_eStat_PreviousSeasonRank": 7,
		"k_eStat_GamesMVP":           8,
	}
)

func (x CMsgDOTAProfileCard_EStatID) Enum() *CMsgDOTAProfileCard_EStatID {
	p := new(CMsgDOTAProfileCard_EStatID)
	*p = x
	return p
}

func (x CMsgDOTAProfileCard_EStatID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgDOTAProfileCard_EStatID) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_common_proto_enumTypes[6].Descriptor()
}

func (CMsgDOTAProfileCard_EStatID) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_common_proto_enumTypes[6]
}

func (x CMsgDOTAProfileCard_EStatID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgDOTAProfileCard_EStatID) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgDOTAProfileCard_EStatID(num)
	return nil
}

// Deprecated: Use CMsgDOTAProfileCard_EStatID.Descriptor instead.
func (CMsgDOTAProfileCard_EStatID) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{36, 0}
}

type CMsgGCRerollPlayerChallengeResponse_EResult int32

const (
	CMsgGCRerollPlayerChallengeResponse_eResult_Success     CMsgGCRerollPlayerChallengeResponse_EResult = 0
	CMsgGCRerollPlayerChallengeResponse_eResult_Dropped     CMsgGCRerollPlayerChallengeResponse_EResult = 1
	CMsgGCRerollPlayerChallengeResponse_eResult_NotFound    CMsgGCRerollPlayerChallengeResponse_EResult = 2
	CMsgGCRerollPlayerChallengeResponse_eResult_CantReroll  CMsgGCRerollPlayerChallengeResponse_EResult = 3
	CMsgGCRerollPlayerChallengeResponse_eResult_ServerError CMsgGCRerollPlayerChallengeResponse_EResult = 4
)

// Enum value maps for CMsgGCRerollPlayerChallengeResponse_EResult.
var (
	CMsgGCRerollPlayerChallengeResponse_EResult_name = map[int32]string{
		0: "eResult_Success",
		1: "eResult_Dropped",
		2: "eResult_NotFound",
		3: "eResult_CantReroll",
		4: "eResult_ServerError",
	}
	CMsgGCRerollPlayerChallengeResponse_EResult_value = map[string]int32{
		"eResult_Success":     0,
		"eResult_Dropped":     1,
		"eResult_NotFound":    2,
		"eResult_CantReroll":  3,
		"eResult_ServerError": 4,
	}
)

func (x CMsgGCRerollPlayerChallengeResponse_EResult) Enum() *CMsgGCRerollPlayerChallengeResponse_EResult {
	p := new(CMsgGCRerollPlayerChallengeResponse_EResult)
	*p = x
	return p
}

func (x CMsgGCRerollPlayerChallengeResponse_EResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgGCRerollPlayerChallengeResponse_EResult) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_common_proto_enumTypes[7].Descriptor()
}

func (CMsgGCRerollPlayerChallengeResponse_EResult) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_common_proto_enumTypes[7]
}

func (x CMsgGCRerollPlayerChallengeResponse_EResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgGCRerollPlayerChallengeResponse_EResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgGCRerollPlayerChallengeResponse_EResult(num)
	return nil
}

// Deprecated: Use CMsgGCRerollPlayerChallengeResponse_EResult.Descriptor instead.
func (CMsgGCRerollPlayerChallengeResponse_EResult) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{39, 0}
}

type CMsgDOTARealtimeGameStats_GraphDataEStat int32

const (
	CMsgDOTARealtimeGameStats_GraphData_CreepGoldEarned         CMsgDOTARealtimeGameStats_GraphDataEStat = 0
	CMsgDOTARealtimeGameStats_GraphData_KillGoldEarned          CMsgDOTARealtimeGameStats_GraphDataEStat = 1
	CMsgDOTARealtimeGameStats_GraphData_DeathAndBuybackGoldLost CMsgDOTARealtimeGameStats_GraphDataEStat = 2
	CMsgDOTARealtimeGameStats_GraphData_XPEarned                CMsgDOTARealtimeGameStats_GraphDataEStat = 3
)

// Enum value maps for CMsgDOTARealtimeGameStats_GraphDataEStat.
var (
	CMsgDOTARealtimeGameStats_GraphDataEStat_name = map[int32]string{
		0: "CreepGoldEarned",
		1: "KillGoldEarned",
		2: "DeathAndBuybackGoldLost",
		3: "XPEarned",
	}
	CMsgDOTARealtimeGameStats_GraphDataEStat_value = map[string]int32{
		"CreepGoldEarned":         0,
		"KillGoldEarned":          1,
		"DeathAndBuybackGoldLost": 2,
		"XPEarned":                3,
	}
)

func (x CMsgDOTARealtimeGameStats_GraphDataEStat) Enum() *CMsgDOTARealtimeGameStats_GraphDataEStat {
	p := new(CMsgDOTARealtimeGameStats_GraphDataEStat)
	*p = x
	return p
}

func (x CMsgDOTARealtimeGameStats_GraphDataEStat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgDOTARealtimeGameStats_GraphDataEStat) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_common_proto_enumTypes[8].Descriptor()
}

func (CMsgDOTARealtimeGameStats_GraphDataEStat) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_common_proto_enumTypes[8]
}

func (x CMsgDOTARealtimeGameStats_GraphDataEStat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgDOTARealtimeGameStats_GraphDataEStat) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgDOTARealtimeGameStats_GraphDataEStat(num)
	return nil
}

// Deprecated: Use CMsgDOTARealtimeGameStats_GraphDataEStat.Descriptor instead.
func (CMsgDOTARealtimeGameStats_GraphDataEStat) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{41, 11, 0}
}

type CMsgDOTARealtimeGameStats_GraphDataELocation int32

const (
	CMsgDOTARealtimeGameStats_GraphData_BotLane  CMsgDOTARealtimeGameStats_GraphDataELocation = 0
	CMsgDOTARealtimeGameStats_GraphData_MidLane  CMsgDOTARealtimeGameStats_GraphDataELocation = 1
	CMsgDOTARealtimeGameStats_GraphData_TopLane  CMsgDOTARealtimeGameStats_GraphDataELocation = 2
	CMsgDOTARealtimeGameStats_GraphData_Jungle   CMsgDOTARealtimeGameStats_GraphDataELocation = 3
	CMsgDOTARealtimeGameStats_GraphData_Ancients CMsgDOTARealtimeGameStats_GraphDataELocation = 4
	CMsgDOTARealtimeGameStats_GraphData_Other    CMsgDOTARealtimeGameStats_GraphDataELocation = 5
)

// Enum value maps for CMsgDOTARealtimeGameStats_GraphDataELocation.
var (
	CMsgDOTARealtimeGameStats_GraphDataELocation_name = map[int32]string{
		0: "BotLane",
		1: "MidLane",
		2: "TopLane",
		3: "Jungle",
		4: "Ancients",
		5: "Other",
	}
	CMsgDOTARealtimeGameStats_GraphDataELocation_value = map[string]int32{
		"BotLane":  0,
		"MidLane":  1,
		"TopLane":  2,
		"Jungle":   3,
		"Ancients": 4,
		"Other":    5,
	}
)

func (x CMsgDOTARealtimeGameStats_GraphDataELocation) Enum() *CMsgDOTARealtimeGameStats_GraphDataELocation {
	p := new(CMsgDOTARealtimeGameStats_GraphDataELocation)
	*p = x
	return p
}

func (x CMsgDOTARealtimeGameStats_GraphDataELocation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgDOTARealtimeGameStats_GraphDataELocation) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_common_proto_enumTypes[9].Descriptor()
}

func (CMsgDOTARealtimeGameStats_GraphDataELocation) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_common_proto_enumTypes[9]
}

func (x CMsgDOTARealtimeGameStats_GraphDataELocation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgDOTARealtimeGameStats_GraphDataELocation) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgDOTARealtimeGameStats_GraphDataELocation(num)
	return nil
}

// Deprecated: Use CMsgDOTARealtimeGameStats_GraphDataELocation.Descriptor instead.
func (CMsgDOTARealtimeGameStats_GraphDataELocation) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{41, 11, 1}
}

type CMsgDOTASeasonRewards_ERewardType int32

const (
	CMsgDOTASeasonRewards_EconItem                CMsgDOTASeasonRewards_ERewardType = 0
	CMsgDOTASeasonRewards_MysteryWheel            CMsgDOTASeasonRewards_ERewardType = 1
	CMsgDOTASeasonRewards_AbilityEffect           CMsgDOTASeasonRewards_ERewardType = 2
	CMsgDOTASeasonRewards_Other                   CMsgDOTASeasonRewards_ERewardType = 3
	CMsgDOTASeasonRewards_MysteryWheelPointsBased CMsgDOTASeasonRewards_ERewardType = 4
)

// Enum value maps for CMsgDOTASeasonRewards_ERewardType.
var (
	CMsgDOTASeasonRewards_ERewardType_name = map[int32]string{
		0: "EconItem",
		1: "MysteryWheel",
		2: "AbilityEffect",
		3: "Other",
		4: "MysteryWheelPointsBased",
	}
	CMsgDOTASeasonRewards_ERewardType_value = map[string]int32{
		"EconItem":                0,
		"MysteryWheel":            1,
		"AbilityEffect":           2,
		"Other":                   3,
		"MysteryWheelPointsBased": 4,
	}
)

func (x CMsgDOTASeasonRewards_ERewardType) Enum() *CMsgDOTASeasonRewards_ERewardType {
	p := new(CMsgDOTASeasonRewards_ERewardType)
	*p = x
	return p
}

func (x CMsgDOTASeasonRewards_ERewardType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgDOTASeasonRewards_ERewardType) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_common_proto_enumTypes[10].Descriptor()
}

func (CMsgDOTASeasonRewards_ERewardType) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_common_proto_enumTypes[10]
}

func (x CMsgDOTASeasonRewards_ERewardType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgDOTASeasonRewards_ERewardType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgDOTASeasonRewards_ERewardType(num)
	return nil
}

// Deprecated: Use CMsgDOTASeasonRewards_ERewardType.Descriptor instead.
func (CMsgDOTASeasonRewards_ERewardType) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{46, 0}
}

type CMsgDOTASeasonPredictionsEPredictionType int32

const (
	CMsgDOTASeasonPredictions_Generic        CMsgDOTASeasonPredictionsEPredictionType = 0
	CMsgDOTASeasonPredictions_Hero           CMsgDOTASeasonPredictionsEPredictionType = 1
	CMsgDOTASeasonPredictions_Team           CMsgDOTASeasonPredictionsEPredictionType = 2
	CMsgDOTASeasonPredictions_Player         CMsgDOTASeasonPredictionsEPredictionType = 3
	CMsgDOTASeasonPredictions_Special        CMsgDOTASeasonPredictionsEPredictionType = 4
	CMsgDOTASeasonPredictions_YesNo          CMsgDOTASeasonPredictionsEPredictionType = 5
	CMsgDOTASeasonPredictions_QualifiersTeam CMsgDOTASeasonPredictionsEPredictionType = 6
)

// Enum value maps for CMsgDOTASeasonPredictionsEPredictionType.
var (
	CMsgDOTASeasonPredictionsEPredictionType_name = map[int32]string{
		0: "Generic",
		1: "Hero",
		2: "Team",
		3: "Player",
		4: "Special",
		5: "YesNo",
		6: "QualifiersTeam",
	}
	CMsgDOTASeasonPredictionsEPredictionType_value = map[string]int32{
		"Generic":        0,
		"Hero":           1,
		"Team":           2,
		"Player":         3,
		"Special":        4,
		"YesNo":          5,
		"QualifiersTeam": 6,
	}
)

func (x CMsgDOTASeasonPredictionsEPredictionType) Enum() *CMsgDOTASeasonPredictionsEPredictionType {
	p := new(CMsgDOTASeasonPredictionsEPredictionType)
	*p = x
	return p
}

func (x CMsgDOTASeasonPredictionsEPredictionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgDOTASeasonPredictionsEPredictionType) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_common_proto_enumTypes[11].Descriptor()
}

func (CMsgDOTASeasonPredictionsEPredictionType) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_common_proto_enumTypes[11]
}

func (x CMsgDOTASeasonPredictionsEPredictionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgDOTASeasonPredictionsEPredictionType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgDOTASeasonPredictionsEPredictionType(num)
	return nil
}

// Deprecated: Use CMsgDOTASeasonPredictionsEPredictionType.Descriptor instead.
func (CMsgDOTASeasonPredictionsEPredictionType) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{48, 0}
}

type CMsgDOTASeasonPredictionsEAnswerType int32

const (
	CMsgDOTASeasonPredictions_SingleInt     CMsgDOTASeasonPredictionsEAnswerType = 0
	CMsgDOTASeasonPredictions_SingleFloat   CMsgDOTASeasonPredictionsEAnswerType = 1
	CMsgDOTASeasonPredictions_MultipleInt   CMsgDOTASeasonPredictionsEAnswerType = 2
	CMsgDOTASeasonPredictions_MultipleFloat CMsgDOTASeasonPredictionsEAnswerType = 3
	CMsgDOTASeasonPredictions_AnswerTeam    CMsgDOTASeasonPredictionsEAnswerType = 4
	CMsgDOTASeasonPredictions_SingleTime    CMsgDOTASeasonPredictionsEAnswerType = 5
	CMsgDOTASeasonPredictions_MultipleTime  CMsgDOTASeasonPredictionsEAnswerType = 6
	CMsgDOTASeasonPredictions_NoAnswer      CMsgDOTASeasonPredictionsEAnswerType = 7
)

// Enum value maps for CMsgDOTASeasonPredictionsEAnswerType.
var (
	CMsgDOTASeasonPredictionsEAnswerType_name = map[int32]string{
		0: "SingleInt",
		1: "SingleFloat",
		2: "MultipleInt",
		3: "MultipleFloat",
		4: "AnswerTeam",
		5: "SingleTime",
		6: "MultipleTime",
		7: "NoAnswer",
	}
	CMsgDOTASeasonPredictionsEAnswerType_value = map[string]int32{
		"SingleInt":     0,
		"SingleFloat":   1,
		"MultipleInt":   2,
		"MultipleFloat": 3,
		"AnswerTeam":    4,
		"SingleTime":    5,
		"MultipleTime":  6,
		"NoAnswer":      7,
	}
)

func (x CMsgDOTASeasonPredictionsEAnswerType) Enum() *CMsgDOTASeasonPredictionsEAnswerType {
	p := new(CMsgDOTASeasonPredictionsEAnswerType)
	*p = x
	return p
}

func (x CMsgDOTASeasonPredictionsEAnswerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgDOTASeasonPredictionsEAnswerType) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_common_proto_enumTypes[12].Descriptor()
}

func (CMsgDOTASeasonPredictionsEAnswerType) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_common_proto_enumTypes[12]
}

func (x CMsgDOTASeasonPredictionsEAnswerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgDOTASeasonPredictionsEAnswerType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgDOTASeasonPredictionsEAnswerType(num)
	return nil
}

// Deprecated: Use CMsgDOTASeasonPredictionsEAnswerType.Descriptor instead.
func (CMsgDOTASeasonPredictionsEAnswerType) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{48, 1}
}

type CMsgDOTASeasonPredictionsEResolutionTypeT int32

const (
	CMsgDOTASeasonPredictions_InvalidQuery          CMsgDOTASeasonPredictionsEResolutionTypeT = 0
	CMsgDOTASeasonPredictions_FirstToPassQuery      CMsgDOTASeasonPredictionsEResolutionTypeT = 1
	CMsgDOTASeasonPredictions_LastToPassQuery       CMsgDOTASeasonPredictionsEResolutionTypeT = 2
	CMsgDOTASeasonPredictions_LastRemainingQuery    CMsgDOTASeasonPredictionsEResolutionTypeT = 3
	CMsgDOTASeasonPredictions_MaxToPassQuery        CMsgDOTASeasonPredictionsEResolutionTypeT = 4
	CMsgDOTASeasonPredictions_MinToPassQuery        CMsgDOTASeasonPredictionsEResolutionTypeT = 5
	CMsgDOTASeasonPredictions_SumQuery              CMsgDOTASeasonPredictionsEResolutionTypeT = 6
	CMsgDOTASeasonPredictions_MaxTeamSumToPassQuery CMsgDOTASeasonPredictionsEResolutionTypeT = 7
	CMsgDOTASeasonPredictions_MinTeamSumToPassQuery CMsgDOTASeasonPredictionsEResolutionTypeT = 8
)

// Enum value maps for CMsgDOTASeasonPredictionsEResolutionTypeT.
var (
	CMsgDOTASeasonPredictionsEResolutionTypeT_name = map[int32]string{
		0: "InvalidQuery",
		1: "FirstToPassQuery",
		2: "LastToPassQuery",
		3: "LastRemainingQuery",
		4: "MaxToPassQuery",
		5: "MinToPassQuery",
		6: "SumQuery",
		7: "MaxTeamSumToPassQuery",
		8: "MinTeamSumToPassQuery",
	}
	CMsgDOTASeasonPredictionsEResolutionTypeT_value = map[string]int32{
		"InvalidQuery":          0,
		"FirstToPassQuery":      1,
		"LastToPassQuery":       2,
		"LastRemainingQuery":    3,
		"MaxToPassQuery":        4,
		"MinToPassQuery":        5,
		"SumQuery":              6,
		"MaxTeamSumToPassQuery": 7,
		"MinTeamSumToPassQuery": 8,
	}
)

func (x CMsgDOTASeasonPredictionsEResolutionTypeT) Enum() *CMsgDOTASeasonPredictionsEResolutionTypeT {
	p := new(CMsgDOTASeasonPredictionsEResolutionTypeT)
	*p = x
	return p
}

func (x CMsgDOTASeasonPredictionsEResolutionTypeT) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgDOTASeasonPredictionsEResolutionTypeT) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_common_proto_enumTypes[13].Descriptor()
}

func (CMsgDOTASeasonPredictionsEResolutionTypeT) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_common_proto_enumTypes[13]
}

func (x CMsgDOTASeasonPredictionsEResolutionTypeT) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgDOTASeasonPredictionsEResolutionTypeT) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgDOTASeasonPredictionsEResolutionTypeT(num)
	return nil
}

// Deprecated: Use CMsgDOTASeasonPredictionsEResolutionTypeT.Descriptor instead.
func (CMsgDOTASeasonPredictionsEResolutionTypeT) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{48, 2}
}

type CMsgDOTASeasonPredictionsERandomSelectionGroupT int32

const (
	CMsgDOTASeasonPredictions_EarlyGame CMsgDOTASeasonPredictionsERandomSelectionGroupT = 0
	CMsgDOTASeasonPredictions_MidGame   CMsgDOTASeasonPredictionsERandomSelectionGroupT = 1
	CMsgDOTASeasonPredictions_LateGame  CMsgDOTASeasonPredictionsERandomSelectionGroupT = 2
	CMsgDOTASeasonPredictions_Count     CMsgDOTASeasonPredictionsERandomSelectionGroupT = 3
)

// Enum value maps for CMsgDOTASeasonPredictionsERandomSelectionGroupT.
var (
	CMsgDOTASeasonPredictionsERandomSelectionGroupT_name = map[int32]string{
		0: "EarlyGame",
		1: "MidGame",
		2: "LateGame",
		3: "Count",
	}
	CMsgDOTASeasonPredictionsERandomSelectionGroupT_value = map[string]int32{
		"EarlyGame": 0,
		"MidGame":   1,
		"LateGame":  2,
		"Count":     3,
	}
)

func (x CMsgDOTASeasonPredictionsERandomSelectionGroupT) Enum() *CMsgDOTASeasonPredictionsERandomSelectionGroupT {
	p := new(CMsgDOTASeasonPredictionsERandomSelectionGroupT)
	*p = x
	return p
}

func (x CMsgDOTASeasonPredictionsERandomSelectionGroupT) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgDOTASeasonPredictionsERandomSelectionGroupT) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_common_proto_enumTypes[14].Descriptor()
}

func (CMsgDOTASeasonPredictionsERandomSelectionGroupT) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_common_proto_enumTypes[14]
}

func (x CMsgDOTASeasonPredictionsERandomSelectionGroupT) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgDOTASeasonPredictionsERandomSelectionGroupT) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgDOTASeasonPredictionsERandomSelectionGroupT(num)
	return nil
}

// Deprecated: Use CMsgDOTASeasonPredictionsERandomSelectionGroupT.Descriptor instead.
func (CMsgDOTASeasonPredictionsERandomSelectionGroupT) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{48, 3}
}

type CMsgDOTASeasonPredictionsERawValueTypeT int32

const (
	CMsgDOTASeasonPredictions_Number CMsgDOTASeasonPredictionsERawValueTypeT = 0
	CMsgDOTASeasonPredictions_Time   CMsgDOTASeasonPredictionsERawValueTypeT = 1
)

// Enum value maps for CMsgDOTASeasonPredictionsERawValueTypeT.
var (
	CMsgDOTASeasonPredictionsERawValueTypeT_name = map[int32]string{
		0: "Number",
		1: "Time",
	}
	CMsgDOTASeasonPredictionsERawValueTypeT_value = map[string]int32{
		"Number": 0,
		"Time":   1,
	}
)

func (x CMsgDOTASeasonPredictionsERawValueTypeT) Enum() *CMsgDOTASeasonPredictionsERawValueTypeT {
	p := new(CMsgDOTASeasonPredictionsERawValueTypeT)
	*p = x
	return p
}

func (x CMsgDOTASeasonPredictionsERawValueTypeT) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgDOTASeasonPredictionsERawValueTypeT) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_common_proto_enumTypes[15].Descriptor()
}

func (CMsgDOTASeasonPredictionsERawValueTypeT) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_common_proto_enumTypes[15]
}

func (x CMsgDOTASeasonPredictionsERawValueTypeT) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgDOTASeasonPredictionsERawValueTypeT) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgDOTASeasonPredictionsERawValueTypeT(num)
	return nil
}

// Deprecated: Use CMsgDOTASeasonPredictionsERawValueTypeT.Descriptor instead.
func (CMsgDOTASeasonPredictionsERawValueTypeT) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{48, 4}
}

type CMsgDOTAMatch_ReplayState int32

const (
	CMsgDOTAMatch_REPLAY_AVAILABLE    CMsgDOTAMatch_ReplayState = 0
	CMsgDOTAMatch_REPLAY_NOT_RECORDED CMsgDOTAMatch_ReplayState = 1
	CMsgDOTAMatch_REPLAY_EXPIRED      CMsgDOTAMatch_ReplayState = 2
)

// Enum value maps for CMsgDOTAMatch_ReplayState.
var (
	CMsgDOTAMatch_ReplayState_name = map[int32]string{
		0: "REPLAY_AVAILABLE",
		1: "REPLAY_NOT_RECORDED",
		2: "REPLAY_EXPIRED",
	}
	CMsgDOTAMatch_ReplayState_value = map[string]int32{
		"REPLAY_AVAILABLE":    0,
		"REPLAY_NOT_RECORDED": 1,
		"REPLAY_EXPIRED":      2,
	}
)

func (x CMsgDOTAMatch_ReplayState) Enum() *CMsgDOTAMatch_ReplayState {
	p := new(CMsgDOTAMatch_ReplayState)
	*p = x
	return p
}

func (x CMsgDOTAMatch_ReplayState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgDOTAMatch_ReplayState) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_common_proto_enumTypes[16].Descriptor()
}

func (CMsgDOTAMatch_ReplayState) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_common_proto_enumTypes[16]
}

func (x CMsgDOTAMatch_ReplayState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgDOTAMatch_ReplayState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgDOTAMatch_ReplayState(num)
	return nil
}

// Deprecated: Use CMsgDOTAMatch_ReplayState.Descriptor instead.
func (CMsgDOTAMatch_ReplayState) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{49, 0}
}

type CMsgDOTAMatch_Player_HeroDamageType int32

const (
	CMsgDOTAMatch_Player_HERO_DAMAGE_PHYSICAL CMsgDOTAMatch_Player_HeroDamageType = 0
	CMsgDOTAMatch_Player_HERO_DAMAGE_MAGICAL  CMsgDOTAMatch_Player_HeroDamageType = 1
	CMsgDOTAMatch_Player_HERO_DAMAGE_PURE     CMsgDOTAMatch_Player_HeroDamageType = 2
)

// Enum value maps for CMsgDOTAMatch_Player_HeroDamageType.
var (
	CMsgDOTAMatch_Player_HeroDamageType_name = map[int32]string{
		0: "HERO_DAMAGE_PHYSICAL",
		1: "HERO_DAMAGE_MAGICAL",
		2: "HERO_DAMAGE_PURE",
	}
	CMsgDOTAMatch_Player_HeroDamageType_value = map[string]int32{
		"HERO_DAMAGE_PHYSICAL": 0,
		"HERO_DAMAGE_MAGICAL":  1,
		"HERO_DAMAGE_PURE":     2,
	}
)

func (x CMsgDOTAMatch_Player_HeroDamageType) Enum() *CMsgDOTAMatch_Player_HeroDamageType {
	p := new(CMsgDOTAMatch_Player_HeroDamageType)
	*p = x
	return p
}

func (x CMsgDOTAMatch_Player_HeroDamageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgDOTAMatch_Player_HeroDamageType) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_common_proto_enumTypes[17].Descriptor()
}

func (CMsgDOTAMatch_Player_HeroDamageType) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_common_proto_enumTypes[17]
}

func (x CMsgDOTAMatch_Player_HeroDamageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgDOTAMatch_Player_HeroDamageType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgDOTAMatch_Player_HeroDamageType(num)
	return nil
}

// Deprecated: Use CMsgDOTAMatch_Player_HeroDamageType.Descriptor instead.
func (CMsgDOTAMatch_Player_HeroDamageType) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{49, 0, 0}
}

type CMsgRequestPlayerRecentAccomplishmentsResponse_EResponse int32

const (
	CMsgRequestPlayerRecentAccomplishmentsResponse_k_eInternalError CMsgRequestPlayerRecentAccomplishmentsResponse_EResponse = 0
	CMsgRequestPlayerRecentAccomplishmentsResponse_k_eSuccess       CMsgRequestPlayerRecentAccomplishmentsResponse_EResponse = 1
	CMsgRequestPlayerRecentAccomplishmentsResponse_k_eTooBusy       CMsgRequestPlayerRecentAccomplishmentsResponse_EResponse = 2
	CMsgRequestPlayerRecentAccomplishmentsResponse_k_eDisabled      CMsgRequestPlayerRecentAccomplishmentsResponse_EResponse = 3
)

// Enum value maps for CMsgRequestPlayerRecentAccomplishmentsResponse_EResponse.
var (
	CMsgRequestPlayerRecentAccomplishmentsResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eTooBusy",
		3: "k_eDisabled",
	}
	CMsgRequestPlayerRecentAccomplishmentsResponse_EResponse_value = map[string]int32{
		"k_eInternalError": 0,
		"k_eSuccess":       1,
		"k_eTooBusy":       2,
		"k_eDisabled":      3,
	}
)

func (x CMsgRequestPlayerRecentAccomplishmentsResponse_EResponse) Enum() *CMsgRequestPlayerRecentAccomplishmentsResponse_EResponse {
	p := new(CMsgRequestPlayerRecentAccomplishmentsResponse_EResponse)
	*p = x
	return p
}

func (x CMsgRequestPlayerRecentAccomplishmentsResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgRequestPlayerRecentAccomplishmentsResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_common_proto_enumTypes[18].Descriptor()
}

func (CMsgRequestPlayerRecentAccomplishmentsResponse_EResponse) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_common_proto_enumTypes[18]
}

func (x CMsgRequestPlayerRecentAccomplishmentsResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgRequestPlayerRecentAccomplishmentsResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgRequestPlayerRecentAccomplishmentsResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgRequestPlayerRecentAccomplishmentsResponse_EResponse.Descriptor instead.
func (CMsgRequestPlayerRecentAccomplishmentsResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{71, 0}
}

type CSODOTAGameAccountClient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId                                      *uint32                                  `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Wins                                           *uint32                                  `protobuf:"varint,3,opt,name=wins" json:"wins,omitempty"`
	Losses                                         *uint32                                  `protobuf:"varint,4,opt,name=losses" json:"losses,omitempty"`
	Xp                                             *uint32                                  `protobuf:"varint,12,opt,name=xp" json:"xp,omitempty"`
	Level                                          *uint32                                  `protobuf:"varint,13,opt,name=level" json:"level,omitempty"`
	InitialSkill                                   *uint32                                  `protobuf:"varint,14,opt,name=initial_skill,json=initialSkill" json:"initial_skill,omitempty"`
	LeaverCount                                    *uint32                                  `protobuf:"varint,15,opt,name=leaver_count,json=leaverCount" json:"leaver_count,omitempty"`
	SecondaryLeaverCount                           *uint32                                  `protobuf:"varint,58,opt,name=secondary_leaver_count,json=secondaryLeaverCount" json:"secondary_leaver_count,omitempty"`
	LowPriorityUntilDate                           *uint32                                  `protobuf:"varint,18,opt,name=low_priority_until_date,json=lowPriorityUntilDate" json:"low_priority_until_date,omitempty"`
	PreventTextChatUntilDate                       *uint32                                  `protobuf:"varint,20,opt,name=prevent_text_chat_until_date,json=preventTextChatUntilDate" json:"prevent_text_chat_until_date,omitempty"`
	PreventVoiceUntilDate                          *uint32                                  `protobuf:"varint,21,opt,name=prevent_voice_until_date,json=preventVoiceUntilDate" json:"prevent_voice_until_date,omitempty"`
	PreventPublicTextChatUntilDate                 *uint32                                  `protobuf:"varint,86,opt,name=prevent_public_text_chat_until_date,json=preventPublicTextChatUntilDate" json:"prevent_public_text_chat_until_date,omitempty"`
	LastAbandonedGameDate                          *uint32                                  `protobuf:"varint,22,opt,name=last_abandoned_game_date,json=lastAbandonedGameDate" json:"last_abandoned_game_date,omitempty"`
	LastSecondaryAbandonedGameDate                 *uint32                                  `protobuf:"varint,59,opt,name=last_secondary_abandoned_game_date,json=lastSecondaryAbandonedGameDate" json:"last_secondary_abandoned_game_date,omitempty"`
	LeaverPenaltyCount                             *uint32                                  `protobuf:"varint,23,opt,name=leaver_penalty_count,json=leaverPenaltyCount" json:"leaver_penalty_count,omitempty"`
	CompletedGameStreak                            *uint32                                  `protobuf:"varint,24,opt,name=completed_game_streak,json=completedGameStreak" json:"completed_game_streak,omitempty"`
	AccountDisabledUntilDate                       *uint32                                  `protobuf:"varint,38,opt,name=account_disabled_until_date,json=accountDisabledUntilDate" json:"account_disabled_until_date,omitempty"`
	AccountDisabledCount                           *uint32                                  `protobuf:"varint,39,opt,name=account_disabled_count,json=accountDisabledCount" json:"account_disabled_count,omitempty"`
	MatchDisabledUntilDate                         *uint32                                  `protobuf:"varint,41,opt,name=match_disabled_until_date,json=matchDisabledUntilDate" json:"match_disabled_until_date,omitempty"`
	MatchDisabledCount                             *uint32                                  `protobuf:"varint,42,opt,name=match_disabled_count,json=matchDisabledCount" json:"match_disabled_count,omitempty"`
	PartnerAccountType                             *PartnerAccountType                      `protobuf:"varint,44,opt,name=partner_account_type,json=partnerAccountType,enum=dota.PartnerAccountType,def=0" json:"partner_account_type,omitempty"`
	PartnerAccountState                            *uint32                                  `protobuf:"varint,45,opt,name=partner_account_state,json=partnerAccountState" json:"partner_account_state,omitempty"`
	Shutdownlawterminatetimestamp                  *uint32                                  `protobuf:"varint,47,opt,name=shutdownlawterminatetimestamp" json:"shutdownlawterminatetimestamp,omitempty"`
	LowPriorityGamesRemaining                      *uint32                                  `protobuf:"varint,48,opt,name=low_priority_games_remaining,json=lowPriorityGamesRemaining" json:"low_priority_games_remaining,omitempty"`
	CompetitiveRank                                *uint32                                  `protobuf:"varint,49,opt,name=competitive_rank,json=competitiveRank" json:"competitive_rank,omitempty"`
	CompetitiveCalibrationGamesRemaining           *uint32                                  `protobuf:"varint,51,opt,name=competitive_calibration_games_remaining,json=competitiveCalibrationGamesRemaining" json:"competitive_calibration_games_remaining,omitempty"`
	SoloCompetitive_2019Rank                       *uint32                                  `protobuf:"varint,52,opt,name=solo_competitive_2019_rank,json=soloCompetitive2019Rank" json:"solo_competitive_2019_rank,omitempty"`
	SoloCompetitive_2019CalibrationGamesRemaining  *uint32                                  `protobuf:"varint,54,opt,name=solo_competitive_2019_calibration_games_remaining,json=soloCompetitive2019CalibrationGamesRemaining" json:"solo_competitive_2019_calibration_games_remaining,omitempty"`
	RecruitmentLevel                               *uint32                                  `protobuf:"varint,55,opt,name=recruitment_level,json=recruitmentLevel" json:"recruitment_level,omitempty"`
	HasNewNotifications                            *bool                                    `protobuf:"varint,56,opt,name=has_new_notifications,json=hasNewNotifications" json:"has_new_notifications,omitempty"`
	IsLeagueAdmin                                  *bool                                    `protobuf:"varint,57,opt,name=is_league_admin,json=isLeagueAdmin" json:"is_league_admin,omitempty"`
	CasualGamesPlayed                              *uint32                                  `protobuf:"varint,60,opt,name=casual_games_played,json=casualGamesPlayed" json:"casual_games_played,omitempty"`
	SoloCompetitiveGamesPlayed                     *uint32                                  `protobuf:"varint,61,opt,name=solo_competitive_games_played,json=soloCompetitiveGamesPlayed" json:"solo_competitive_games_played,omitempty"`
	PartyCompetitiveGamesPlayed                    *uint32                                  `protobuf:"varint,62,opt,name=party_competitive_games_played,json=partyCompetitiveGamesPlayed" json:"party_competitive_games_played,omitempty"`
	Casual_1V1GamesPlayed                          *uint32                                  `protobuf:"varint,65,opt,name=casual_1v1_games_played,json=casual1v1GamesPlayed" json:"casual_1v1_games_played,omitempty"`
	CurrAllHeroChallengeId                         *uint32                                  `protobuf:"varint,67,opt,name=curr_all_hero_challenge_id,json=currAllHeroChallengeId" json:"curr_all_hero_challenge_id,omitempty"`
	PlayTimePoints                                 *uint32                                  `protobuf:"varint,68,opt,name=play_time_points,json=playTimePoints" json:"play_time_points,omitempty"`
	AccountFlags                                   *uint32                                  `protobuf:"varint,69,opt,name=account_flags,json=accountFlags" json:"account_flags,omitempty"`
	PlayTimeLevel                                  *uint32                                  `protobuf:"varint,70,opt,name=play_time_level,json=playTimeLevel" json:"play_time_level,omitempty"`
	PlayerBehaviorSeqNumLastReport                 *uint32                                  `protobuf:"varint,71,opt,name=player_behavior_seq_num_last_report,json=playerBehaviorSeqNumLastReport" json:"player_behavior_seq_num_last_report,omitempty"`
	PlayerBehaviorScoreLastReport                  *uint32                                  `protobuf:"varint,72,opt,name=player_behavior_score_last_report,json=playerBehaviorScoreLastReport" json:"player_behavior_score_last_report,omitempty"`
	PlayerBehaviorReportOldData                    *bool                                    `protobuf:"varint,73,opt,name=player_behavior_report_old_data,json=playerBehaviorReportOldData" json:"player_behavior_report_old_data,omitempty"`
	TourneySkillLevel                              *uint32                                  `protobuf:"varint,74,opt,name=tourney_skill_level,json=tourneySkillLevel" json:"tourney_skill_level,omitempty"`
	TourneyRecentParticipationDate                 *uint32                                  `protobuf:"varint,85,opt,name=tourney_recent_participation_date,json=tourneyRecentParticipationDate" json:"tourney_recent_participation_date,omitempty"`
	FavoriteTeam                                   *uint32                                  `protobuf:"varint,87,opt,name=favorite_team,json=favoriteTeam" json:"favorite_team,omitempty"`
	AnchoredPhoneNumberId                          *uint64                                  `protobuf:"varint,88,opt,name=anchored_phone_number_id,json=anchoredPhoneNumberId" json:"anchored_phone_number_id,omitempty"`
	RankedMatchmakingBanUntilDate                  *uint32                                  `protobuf:"varint,89,opt,name=ranked_matchmaking_ban_until_date,json=rankedMatchmakingBanUntilDate" json:"ranked_matchmaking_ban_until_date,omitempty"`
	RecentGameTime_1                               *uint32                                  `protobuf:"varint,90,opt,name=recent_game_time_1,json=recentGameTime1" json:"recent_game_time_1,omitempty"`
	RecentGameTime_2                               *uint32                                  `protobuf:"varint,91,opt,name=recent_game_time_2,json=recentGameTime2" json:"recent_game_time_2,omitempty"`
	RecentGameTime_3                               *uint32                                  `protobuf:"varint,92,opt,name=recent_game_time_3,json=recentGameTime3" json:"recent_game_time_3,omitempty"`
	GeneralSeasonalRankedRank                      *uint32                                  `protobuf:"varint,93,opt,name=general_seasonal_ranked_rank,json=generalSeasonalRankedRank" json:"general_seasonal_ranked_rank,omitempty"`
	GeneralSeasonalRankedCalibrationGamesRemaining *uint32                                  `protobuf:"varint,94,opt,name=general_seasonal_ranked_calibration_games_remaining,json=generalSeasonalRankedCalibrationGamesRemaining" json:"general_seasonal_ranked_calibration_games_remaining,omitempty"`
	GeneralSeasonalRankedGamesPlayed               *uint32                                  `protobuf:"varint,95,opt,name=general_seasonal_ranked_games_played,json=generalSeasonalRankedGamesPlayed" json:"general_seasonal_ranked_games_played,omitempty"`
	GeneralSeasonalRankedRankPeak                  *uint32                                  `protobuf:"varint,96,opt,name=general_seasonal_ranked_rank_peak,json=generalSeasonalRankedRankPeak" json:"general_seasonal_ranked_rank_peak,omitempty"`
	GeneralSeasonalRankTransferred                 *bool                                    `protobuf:"varint,97,opt,name=general_seasonal_rank_transferred,json=generalSeasonalRankTransferred" json:"general_seasonal_rank_transferred,omitempty"`
	SoloSeasonalRankedRank                         *uint32                                  `protobuf:"varint,98,opt,name=solo_seasonal_ranked_rank,json=soloSeasonalRankedRank" json:"solo_seasonal_ranked_rank,omitempty"`
	SoloSeasonalRankedCalibrationGamesRemaining    *uint32                                  `protobuf:"varint,99,opt,name=solo_seasonal_ranked_calibration_games_remaining,json=soloSeasonalRankedCalibrationGamesRemaining" json:"solo_seasonal_ranked_calibration_games_remaining,omitempty"`
	SoloSeasonalRankedGamesPlayed                  *uint32                                  `protobuf:"varint,100,opt,name=solo_seasonal_ranked_games_played,json=soloSeasonalRankedGamesPlayed" json:"solo_seasonal_ranked_games_played,omitempty"`
	SoloSeasonalRankedRankPeak                     *uint32                                  `protobuf:"varint,101,opt,name=solo_seasonal_ranked_rank_peak,json=soloSeasonalRankedRankPeak" json:"solo_seasonal_ranked_rank_peak,omitempty"`
	SoloSeasonalRankTransferred                    *bool                                    `protobuf:"varint,102,opt,name=solo_seasonal_rank_transferred,json=soloSeasonalRankTransferred" json:"solo_seasonal_rank_transferred,omitempty"`
	FavoriteTeamPacked                             *uint64                                  `protobuf:"varint,103,opt,name=favorite_team_packed,json=favoriteTeamPacked" json:"favorite_team_packed,omitempty"`
	RecentReportTime                               *uint32                                  `protobuf:"varint,104,opt,name=recent_report_time,json=recentReportTime" json:"recent_report_time,omitempty"`
	CustomGameDisabledUntilDate                    *uint32                                  `protobuf:"varint,105,opt,name=custom_game_disabled_until_date,json=customGameDisabledUntilDate" json:"custom_game_disabled_until_date,omitempty"`
	RecentWinTime_1                                *uint32                                  `protobuf:"varint,106,opt,name=recent_win_time_1,json=recentWinTime1" json:"recent_win_time_1,omitempty"`
	RecentWinTime_2                                *uint32                                  `protobuf:"varint,107,opt,name=recent_win_time_2,json=recentWinTime2" json:"recent_win_time_2,omitempty"`
	RecentWinTime_3                                *uint32                                  `protobuf:"varint,108,opt,name=recent_win_time_3,json=recentWinTime3" json:"recent_win_time_3,omitempty"`
	CoachRating                                    *uint32                                  `protobuf:"varint,109,opt,name=coach_rating,json=coachRating" json:"coach_rating,omitempty"`
	CompetitiveCoreRank                            *uint32                                  `protobuf:"varint,110,opt,name=competitive_core_rank,json=competitiveCoreRank" json:"competitive_core_rank,omitempty"`
	CompetitiveCoreCalibrationGamesRemaining       *uint32                                  `protobuf:"varint,111,opt,name=competitive_core_calibration_games_remaining,json=competitiveCoreCalibrationGamesRemaining" json:"competitive_core_calibration_games_remaining,omitempty"`
	CompetitiveSupportRank                         *uint32                                  `protobuf:"varint,112,opt,name=competitive_support_rank,json=competitiveSupportRank" json:"competitive_support_rank,omitempty"`
	CompetitiveSupportCalibrationGamesRemaining    *uint32                                  `protobuf:"varint,113,opt,name=competitive_support_calibration_games_remaining,json=competitiveSupportCalibrationGamesRemaining" json:"competitive_support_calibration_games_remaining,omitempty"`
	QueuePoints                                    *uint32                                  `protobuf:"varint,114,opt,name=queue_points,json=queuePoints" json:"queue_points,omitempty"`
	RoleHandicaps                                  []*CSODOTAGameAccountClient_RoleHandicap `protobuf:"bytes,115,rep,name=role_handicaps,json=roleHandicaps" json:"role_handicaps,omitempty"`
	GauntletTier                                   *uint32                                  `protobuf:"varint,116,opt,name=gauntlet_tier,json=gauntletTier" json:"gauntlet_tier,omitempty"`
	GauntletWins                                   *uint32                                  `protobuf:"varint,117,opt,name=gauntlet_wins,json=gauntletWins" json:"gauntlet_wins,omitempty"`
	GauntletLosses                                 *uint32                                  `protobuf:"varint,118,opt,name=gauntlet_losses,json=gauntletLosses" json:"gauntlet_losses,omitempty"`
	GauntletRecentTime                             *uint32                                  `protobuf:"varint,119,opt,name=gauntlet_recent_time,json=gauntletRecentTime" json:"gauntlet_recent_time,omitempty"`
	EventModeRecentTime                            *uint32                                  `protobuf:"varint,120,opt,name=event_mode_recent_time,json=eventModeRecentTime" json:"event_mode_recent_time,omitempty"`
}

// Default values for CSODOTAGameAccountClient fields.
const (
	Default_CSODOTAGameAccountClient_PartnerAccountType = PartnerAccountType_PARTNER_NONE
)

func (x *CSODOTAGameAccountClient) Reset() {
	*x = CSODOTAGameAccountClient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSODOTAGameAccountClient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSODOTAGameAccountClient) ProtoMessage() {}

func (x *CSODOTAGameAccountClient) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSODOTAGameAccountClient.ProtoReflect.Descriptor instead.
func (*CSODOTAGameAccountClient) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{0}
}

func (x *CSODOTAGameAccountClient) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CSODOTAGameAccountClient) GetWins() uint32 {
	if x != nil && x.Wins != nil {
		return *x.Wins
	}
	return 0
}

func (x *CSODOTAGameAccountClient) GetLosses() uint32 {
	if x != nil && x.Losses != nil {
		return *x.Losses
	}
	return 0
}

func (x *CSODOTAGameAccountClient) GetXp() uint32 {
	if x != nil && x.Xp != nil {
		return *x.Xp
	}
	return 0
}

func (x *CSODOTAGameAccountClient) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *CSODOTAGameAccountClient) GetInitialSkill() uint32 {
	if x != nil && x.InitialSkill != nil {
		return *x.InitialSkill
	}
	return 0
}

func (x *CSODOTAGameAccountClient) GetLeaverCount() uint32 {
	if x != nil && x.LeaverCount != nil {
		return *x.LeaverCount
	}
	return 0
}

func (x *CSODOTAGameAccountClient) GetSecondaryLeaverCount() uint32 {
	if x != nil && x.SecondaryLeaverCount != nil {
		return *x.SecondaryLeaverCount
	}
	return 0
}

func (x *CSODOTAGameAccountClient) GetLowPriorityUntilDate() uint32 {
	if x != nil && x.LowPriorityUntilDate != nil {
		return *x.LowPriorityUntilDate
	}
	return 0
}

func (x *CSODOTAGameAccountClient) GetPreventTextChatUntilDate() uint32 {
	if x != nil && x.PreventTextChatUntilDate != nil {
		return *x.PreventTextChatUntilDate
	}
	return 0
}

func (x *CSODOTAGameAccountClient) GetPreventVoiceUntilDate() uint32 {
	if x != nil && x.PreventVoiceUntilDate != nil {
		return *x.PreventVoiceUntilDate
	}
	return 0
}

func (x *CSODOTAGameAccountClient) GetPreventPublicTextChatUntilDate() uint32 {
	if x != nil && x.PreventPublicTextChatUntilDate != nil {
		return *x.PreventPublicTextChatUntilDate
	}
	return 0
}

func (x *CSODOTAGameAccountClient) GetLastAbandonedGameDate() uint32 {
	if x != nil && x.LastAbandonedGameDate != nil {
		return *x.LastAbandonedGameDate
	}
	return 0
}

func (x *CSODOTAGameAccountClient) GetLastSecondaryAbandonedGameDate() uint32 {
	if x != nil && x.LastSecondaryAbandonedGameDate != nil {
		return *x.LastSecondaryAbandonedGameDate
	}
	return 0
}

func (x *CSODOTAGameAccountClient) GetLeaverPenaltyCount() uint32 {
	if x != nil && x.LeaverPenaltyCount != nil {
		return *x.LeaverPenaltyCount
	}
	return 0
}

func (x *CSODOTAGameAccountClient) GetCompletedGameStreak() uint32 {
	if x != nil && x.CompletedGameStreak != nil {
		return *x.CompletedGameStreak
	}
	return 0
}

func (x *CSODOTAGameAccountClient) GetAccountDisabledUntilDate() uint32 {
	if x != nil && x.AccountDisabledUntilDate != nil {
		return *x.AccountDisabledUntilDate
	}
	return 0
}

func (x *CSODOTAGameAccountClient) GetAccountDisabledCount() uint32 {
	if x != nil && x.AccountDisabledCount != nil {
		return *x.AccountDisabledCount
	}
	return 0
}

func (x *CSODOTAGameAccountClient) GetMatchDisabledUntilDate() uint32 {
	if x != nil && x.MatchDisabledUntilDate != nil {
		return *x.MatchDisabledUntilDate
	}
	return 0
}

func (x *CSODOTAGameAccountClient) GetMatchDisabledCount() uint32 {
	if x != nil && x.MatchDisabledCount != nil {
		return *x.MatchDisabledCount
	}
	return 0
}

func (x *CSODOTAGameAccountClient) GetPartnerAccountType() PartnerAccountType {
	if x != nil && x.PartnerAccountType != nil {
		return *x.PartnerAccountType
	}
	return Default_CSODOTAGameAccountClient_PartnerAccountType
}

func (x *CSODOTAGameAccountClient) GetPartnerAccountState() uint32 {
	if x != nil && x.PartnerAccountState != nil {
		return *x.PartnerAccountState
	}
	return 0
}

func (x *CSODOTAGameAccountClient) GetShutdownlawterminatetimestamp() uint32 {
	if x != nil && x.Shutdownlawterminatetimestamp != nil {
		return *x.Shutdownlawterminatetimestamp
	}
	return 0
}

func (x *CSODOTAGameAccountClient) GetLowPriorityGamesRemaining() uint32 {
	if x != nil && x.LowPriorityGamesRemaining != nil {
		return *x.LowPriorityGamesRemaining
	}
	return 0
}

func (x *CSODOTAGameAccountClient) GetCompetitiveRank() uint32 {
	if x != nil && x.CompetitiveRank != nil {
		return *x.CompetitiveRank
	}
	return 0
}

func (x *CSODOTAGameAccountClient) GetCompetitiveCalibrationGamesRemaining() uint32 {
	if x != nil && x.CompetitiveCalibrationGamesRemaining != nil {
		return *x.CompetitiveCalibrationGamesRemaining
	}
	return 0
}

func (x *CSODOTAGameAccountClient) GetSoloCompetitive_2019Rank() uint32 {
	if x != nil && x.SoloCompetitive_2019Rank != nil {
		return *x.SoloCompetitive_2019Rank
	}
	return 0
}

func (x *CSODOTAGameAccountClient) GetSoloCompetitive_2019CalibrationGamesRemaining() uint32 {
	if x != nil && x.SoloCompetitive_2019CalibrationGamesRemaining != nil {
		return *x.SoloCompetitive_2019CalibrationGamesRemaining
	}
	return 0
}

func (x *CSODOTAGameAccountClient) GetRecruitmentLevel() uint32 {
	if x != nil && x.RecruitmentLevel != nil {
		return *x.RecruitmentLevel
	}
	return 0
}

func (x *CSODOTAGameAccountClient) GetHasNewNotifications() bool {
	if x != nil && x.HasNewNotifications != nil {
		return *x.HasNewNotifications
	}
	return false
}

func (x *CSODOTAGameAccountClient) GetIsLeagueAdmin() bool {
	if x != nil && x.IsLeagueAdmin != nil {
		return *x.IsLeagueAdmin
	}
	return false
}

func (x *CSODOTAGameAccountClient) GetCasualGamesPlayed() uint32 {
	if x != nil && x.CasualGamesPlayed != nil {
		return *x.CasualGamesPlayed
	}
	return 0
}

func (x *CSODOTAGameAccountClient) GetSoloCompetitiveGamesPlayed() uint32 {
	if x != nil && x.SoloCompetitiveGamesPlayed != nil {
		return *x.SoloCompetitiveGamesPlayed
	}
	return 0
}

func (x *CSODOTAGameAccountClient) GetPartyCompetitiveGamesPlayed() uint32 {
	if x != nil && x.PartyCompetitiveGamesPlayed != nil {
		return *x.PartyCompetitiveGamesPlayed
	}
	return 0
}

func (x *CSODOTAGameAccountClient) GetCasual_1V1GamesPlayed() uint32 {
	if x != nil && x.Casual_1V1GamesPlayed != nil {
		return *x.Casual_1V1GamesPlayed
	}
	return 0
}

func (x *CSODOTAGameAccountClient) GetCurrAllHeroChallengeId() uint32 {
	if x != nil && x.CurrAllHeroChallengeId != nil {
		return *x.CurrAllHeroChallengeId
	}
	return 0
}

func (x *CSODOTAGameAccountClient) GetPlayTimePoints() uint32 {
	if x != nil && x.PlayTimePoints != nil {
		return *x.PlayTimePoints
	}
	return 0
}

func (x *CSODOTAGameAccountClient) GetAccountFlags() uint32 {
	if x != nil && x.AccountFlags != nil {
		return *x.AccountFlags
	}
	return 0
}

func (x *CSODOTAGameAccountClient) GetPlayTimeLevel() uint32 {
	if x != nil && x.PlayTimeLevel != nil {
		return *x.PlayTimeLevel
	}
	return 0
}

func (x *CSODOTAGameAccountClient) GetPlayerBehaviorSeqNumLastReport() uint32 {
	if x != nil && x.PlayerBehaviorSeqNumLastReport != nil {
		return *x.PlayerBehaviorSeqNumLastReport
	}
	return 0
}

func (x *CSODOTAGameAccountClient) GetPlayerBehaviorScoreLastReport() uint32 {
	if x != nil && x.PlayerBehaviorScoreLastReport != nil {
		return *x.PlayerBehaviorScoreLastReport
	}
	return 0
}

func (x *CSODOTAGameAccountClient) GetPlayerBehaviorReportOldData() bool {
	if x != nil && x.PlayerBehaviorReportOldData != nil {
		return *x.PlayerBehaviorReportOldData
	}
	return false
}

func (x *CSODOTAGameAccountClient) GetTourneySkillLevel() uint32 {
	if x != nil && x.TourneySkillLevel != nil {
		return *x.TourneySkillLevel
	}
	return 0
}

func (x *CSODOTAGameAccountClient) GetTourneyRecentParticipationDate() uint32 {
	if x != nil && x.TourneyRecentParticipationDate != nil {
		return *x.TourneyRecentParticipationDate
	}
	return 0
}

func (x *CSODOTAGameAccountClient) GetFavoriteTeam() uint32 {
	if x != nil && x.FavoriteTeam != nil {
		return *x.FavoriteTeam
	}
	return 0
}

func (x *CSODOTAGameAccountClient) GetAnchoredPhoneNumberId() uint64 {
	if x != nil && x.AnchoredPhoneNumberId != nil {
		return *x.AnchoredPhoneNumberId
	}
	return 0
}

func (x *CSODOTAGameAccountClient) GetRankedMatchmakingBanUntilDate() uint32 {
	if x != nil && x.RankedMatchmakingBanUntilDate != nil {
		return *x.RankedMatchmakingBanUntilDate
	}
	return 0
}

func (x *CSODOTAGameAccountClient) GetRecentGameTime_1() uint32 {
	if x != nil && x.RecentGameTime_1 != nil {
		return *x.RecentGameTime_1
	}
	return 0
}

func (x *CSODOTAGameAccountClient) GetRecentGameTime_2() uint32 {
	if x != nil && x.RecentGameTime_2 != nil {
		return *x.RecentGameTime_2
	}
	return 0
}

func (x *CSODOTAGameAccountClient) GetRecentGameTime_3() uint32 {
	if x != nil && x.RecentGameTime_3 != nil {
		return *x.RecentGameTime_3
	}
	return 0
}

func (x *CSODOTAGameAccountClient) GetGeneralSeasonalRankedRank() uint32 {
	if x != nil && x.GeneralSeasonalRankedRank != nil {
		return *x.GeneralSeasonalRankedRank
	}
	return 0
}

func (x *CSODOTAGameAccountClient) GetGeneralSeasonalRankedCalibrationGamesRemaining() uint32 {
	if x != nil && x.GeneralSeasonalRankedCalibrationGamesRemaining != nil {
		return *x.GeneralSeasonalRankedCalibrationGamesRemaining
	}
	return 0
}

func (x *CSODOTAGameAccountClient) GetGeneralSeasonalRankedGamesPlayed() uint32 {
	if x != nil && x.GeneralSeasonalRankedGamesPlayed != nil {
		return *x.GeneralSeasonalRankedGamesPlayed
	}
	return 0
}

func (x *CSODOTAGameAccountClient) GetGeneralSeasonalRankedRankPeak() uint32 {
	if x != nil && x.GeneralSeasonalRankedRankPeak != nil {
		return *x.GeneralSeasonalRankedRankPeak
	}
	return 0
}

func (x *CSODOTAGameAccountClient) GetGeneralSeasonalRankTransferred() bool {
	if x != nil && x.GeneralSeasonalRankTransferred != nil {
		return *x.GeneralSeasonalRankTransferred
	}
	return false
}

func (x *CSODOTAGameAccountClient) GetSoloSeasonalRankedRank() uint32 {
	if x != nil && x.SoloSeasonalRankedRank != nil {
		return *x.SoloSeasonalRankedRank
	}
	return 0
}

func (x *CSODOTAGameAccountClient) GetSoloSeasonalRankedCalibrationGamesRemaining() uint32 {
	if x != nil && x.SoloSeasonalRankedCalibrationGamesRemaining != nil {
		return *x.SoloSeasonalRankedCalibrationGamesRemaining
	}
	return 0
}

func (x *CSODOTAGameAccountClient) GetSoloSeasonalRankedGamesPlayed() uint32 {
	if x != nil && x.SoloSeasonalRankedGamesPlayed != nil {
		return *x.SoloSeasonalRankedGamesPlayed
	}
	return 0
}

func (x *CSODOTAGameAccountClient) GetSoloSeasonalRankedRankPeak() uint32 {
	if x != nil && x.SoloSeasonalRankedRankPeak != nil {
		return *x.SoloSeasonalRankedRankPeak
	}
	return 0
}

func (x *CSODOTAGameAccountClient) GetSoloSeasonalRankTransferred() bool {
	if x != nil && x.SoloSeasonalRankTransferred != nil {
		return *x.SoloSeasonalRankTransferred
	}
	return false
}

func (x *CSODOTAGameAccountClient) GetFavoriteTeamPacked() uint64 {
	if x != nil && x.FavoriteTeamPacked != nil {
		return *x.FavoriteTeamPacked
	}
	return 0
}

func (x *CSODOTAGameAccountClient) GetRecentReportTime() uint32 {
	if x != nil && x.RecentReportTime != nil {
		return *x.RecentReportTime
	}
	return 0
}

func (x *CSODOTAGameAccountClient) GetCustomGameDisabledUntilDate() uint32 {
	if x != nil && x.CustomGameDisabledUntilDate != nil {
		return *x.CustomGameDisabledUntilDate
	}
	return 0
}

func (x *CSODOTAGameAccountClient) GetRecentWinTime_1() uint32 {
	if x != nil && x.RecentWinTime_1 != nil {
		return *x.RecentWinTime_1
	}
	return 0
}

func (x *CSODOTAGameAccountClient) GetRecentWinTime_2() uint32 {
	if x != nil && x.RecentWinTime_2 != nil {
		return *x.RecentWinTime_2
	}
	return 0
}

func (x *CSODOTAGameAccountClient) GetRecentWinTime_3() uint32 {
	if x != nil && x.RecentWinTime_3 != nil {
		return *x.RecentWinTime_3
	}
	return 0
}

func (x *CSODOTAGameAccountClient) GetCoachRating() uint32 {
	if x != nil && x.CoachRating != nil {
		return *x.CoachRating
	}
	return 0
}

func (x *CSODOTAGameAccountClient) GetCompetitiveCoreRank() uint32 {
	if x != nil && x.CompetitiveCoreRank != nil {
		return *x.CompetitiveCoreRank
	}
	return 0
}

func (x *CSODOTAGameAccountClient) GetCompetitiveCoreCalibrationGamesRemaining() uint32 {
	if x != nil && x.CompetitiveCoreCalibrationGamesRemaining != nil {
		return *x.CompetitiveCoreCalibrationGamesRemaining
	}
	return 0
}

func (x *CSODOTAGameAccountClient) GetCompetitiveSupportRank() uint32 {
	if x != nil && x.CompetitiveSupportRank != nil {
		return *x.CompetitiveSupportRank
	}
	return 0
}

func (x *CSODOTAGameAccountClient) GetCompetitiveSupportCalibrationGamesRemaining() uint32 {
	if x != nil && x.CompetitiveSupportCalibrationGamesRemaining != nil {
		return *x.CompetitiveSupportCalibrationGamesRemaining
	}
	return 0
}

func (x *CSODOTAGameAccountClient) GetQueuePoints() uint32 {
	if x != nil && x.QueuePoints != nil {
		return *x.QueuePoints
	}
	return 0
}

func (x *CSODOTAGameAccountClient) GetRoleHandicaps() []*CSODOTAGameAccountClient_RoleHandicap {
	if x != nil {
		return x.RoleHandicaps
	}
	return nil
}

func (x *CSODOTAGameAccountClient) GetGauntletTier() uint32 {
	if x != nil && x.GauntletTier != nil {
		return *x.GauntletTier
	}
	return 0
}

func (x *CSODOTAGameAccountClient) GetGauntletWins() uint32 {
	if x != nil && x.GauntletWins != nil {
		return *x.GauntletWins
	}
	return 0
}

func (x *CSODOTAGameAccountClient) GetGauntletLosses() uint32 {
	if x != nil && x.GauntletLosses != nil {
		return *x.GauntletLosses
	}
	return 0
}

func (x *CSODOTAGameAccountClient) GetGauntletRecentTime() uint32 {
	if x != nil && x.GauntletRecentTime != nil {
		return *x.GauntletRecentTime
	}
	return 0
}

func (x *CSODOTAGameAccountClient) GetEventModeRecentTime() uint32 {
	if x != nil && x.EventModeRecentTime != nil {
		return *x.EventModeRecentTime
	}
	return 0
}

type CSODOTAGameAccountPlus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId          *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	OriginalStartDate  *uint32 `protobuf:"varint,2,opt,name=original_start_date,json=originalStartDate" json:"original_start_date,omitempty"`
	PlusFlags          *uint32 `protobuf:"varint,3,opt,name=plus_flags,json=plusFlags" json:"plus_flags,omitempty"`
	PlusStatus         *uint32 `protobuf:"varint,4,opt,name=plus_status,json=plusStatus" json:"plus_status,omitempty"`
	PrepaidTimeStart   *uint32 `protobuf:"varint,5,opt,name=prepaid_time_start,json=prepaidTimeStart" json:"prepaid_time_start,omitempty"`
	PrepaidTimeBalance *uint32 `protobuf:"varint,6,opt,name=prepaid_time_balance,json=prepaidTimeBalance" json:"prepaid_time_balance,omitempty"`
	NextPaymentDate    *uint32 `protobuf:"fixed32,7,opt,name=next_payment_date,json=nextPaymentDate" json:"next_payment_date,omitempty"`
	SteamAgreementId   *uint64 `protobuf:"fixed64,8,opt,name=steam_agreement_id,json=steamAgreementId" json:"steam_agreement_id,omitempty"`
}

func (x *CSODOTAGameAccountPlus) Reset() {
	*x = CSODOTAGameAccountPlus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSODOTAGameAccountPlus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSODOTAGameAccountPlus) ProtoMessage() {}

func (x *CSODOTAGameAccountPlus) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSODOTAGameAccountPlus.ProtoReflect.Descriptor instead.
func (*CSODOTAGameAccountPlus) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{1}
}

func (x *CSODOTAGameAccountPlus) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CSODOTAGameAccountPlus) GetOriginalStartDate() uint32 {
	if x != nil && x.OriginalStartDate != nil {
		return *x.OriginalStartDate
	}
	return 0
}

func (x *CSODOTAGameAccountPlus) GetPlusFlags() uint32 {
	if x != nil && x.PlusFlags != nil {
		return *x.PlusFlags
	}
	return 0
}

func (x *CSODOTAGameAccountPlus) GetPlusStatus() uint32 {
	if x != nil && x.PlusStatus != nil {
		return *x.PlusStatus
	}
	return 0
}

func (x *CSODOTAGameAccountPlus) GetPrepaidTimeStart() uint32 {
	if x != nil && x.PrepaidTimeStart != nil {
		return *x.PrepaidTimeStart
	}
	return 0
}

func (x *CSODOTAGameAccountPlus) GetPrepaidTimeBalance() uint32 {
	if x != nil && x.PrepaidTimeBalance != nil {
		return *x.PrepaidTimeBalance
	}
	return 0
}

func (x *CSODOTAGameAccountPlus) GetNextPaymentDate() uint32 {
	if x != nil && x.NextPaymentDate != nil {
		return *x.NextPaymentDate
	}
	return 0
}

func (x *CSODOTAGameAccountPlus) GetSteamAgreementId() uint64 {
	if x != nil && x.SteamAgreementId != nil {
		return *x.SteamAgreementId
	}
	return 0
}

type CMsgLobbyPlayerPlusSubscriptionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeroBadges []*CMsgLobbyPlayerPlusSubscriptionData_HeroBadge `protobuf:"bytes,1,rep,name=hero_badges,json=heroBadges" json:"hero_badges,omitempty"`
}

func (x *CMsgLobbyPlayerPlusSubscriptionData) Reset() {
	*x = CMsgLobbyPlayerPlusSubscriptionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgLobbyPlayerPlusSubscriptionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgLobbyPlayerPlusSubscriptionData) ProtoMessage() {}

func (x *CMsgLobbyPlayerPlusSubscriptionData) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgLobbyPlayerPlusSubscriptionData.ProtoReflect.Descriptor instead.
func (*CMsgLobbyPlayerPlusSubscriptionData) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{2}
}

func (x *CMsgLobbyPlayerPlusSubscriptionData) GetHeroBadges() []*CMsgLobbyPlayerPlusSubscriptionData_HeroBadge {
	if x != nil {
		return x.HeroBadges
	}
	return nil
}

type CMsgLobbyEventPoints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId       *uint32                               `protobuf:"varint,1,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	AccountPoints []*CMsgLobbyEventPoints_AccountPoints `protobuf:"bytes,2,rep,name=account_points,json=accountPoints" json:"account_points,omitempty"`
}

func (x *CMsgLobbyEventPoints) Reset() {
	*x = CMsgLobbyEventPoints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgLobbyEventPoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgLobbyEventPoints) ProtoMessage() {}

func (x *CMsgLobbyEventPoints) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgLobbyEventPoints.ProtoReflect.Descriptor instead.
func (*CMsgLobbyEventPoints) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{3}
}

func (x *CMsgLobbyEventPoints) GetEventId() uint32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

func (x *CMsgLobbyEventPoints) GetAccountPoints() []*CMsgLobbyEventPoints_AccountPoints {
	if x != nil {
		return x.AccountPoints
	}
	return nil
}

type CMsgLobbyEventGameData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameSeed             *uint32 `protobuf:"varint,1,opt,name=game_seed,json=gameSeed" json:"game_seed,omitempty"`
	EventWindowStartTime *uint32 `protobuf:"varint,2,opt,name=event_window_start_time,json=eventWindowStartTime" json:"event_window_start_time,omitempty"`
}

func (x *CMsgLobbyEventGameData) Reset() {
	*x = CMsgLobbyEventGameData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgLobbyEventGameData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgLobbyEventGameData) ProtoMessage() {}

func (x *CMsgLobbyEventGameData) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgLobbyEventGameData.ProtoReflect.Descriptor instead.
func (*CMsgLobbyEventGameData) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{4}
}

func (x *CMsgLobbyEventGameData) GetGameSeed() uint32 {
	if x != nil && x.GameSeed != nil {
		return *x.GameSeed
	}
	return 0
}

func (x *CMsgLobbyEventGameData) GetEventWindowStartTime() uint32 {
	if x != nil && x.EventWindowStartTime != nil {
		return *x.EventWindowStartTime
	}
	return 0
}

type CMsgLobbyGauntletProgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accounts []*CMsgLobbyGauntletProgress_AccountProgress `protobuf:"bytes,1,rep,name=accounts" json:"accounts,omitempty"`
}

func (x *CMsgLobbyGauntletProgress) Reset() {
	*x = CMsgLobbyGauntletProgress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgLobbyGauntletProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgLobbyGauntletProgress) ProtoMessage() {}

func (x *CMsgLobbyGauntletProgress) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgLobbyGauntletProgress.ProtoReflect.Descriptor instead.
func (*CMsgLobbyGauntletProgress) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{5}
}

func (x *CMsgLobbyGauntletProgress) GetAccounts() []*CMsgLobbyGauntletProgress_AccountProgress {
	if x != nil {
		return x.Accounts
	}
	return nil
}

type CMsgLocalServerGuildData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildId             *uint32 `protobuf:"varint,1,opt,name=guild_id,json=guildId" json:"guild_id,omitempty"`
	EventId             *EEvent `protobuf:"varint,2,opt,name=event_id,json=eventId,enum=dota.EEvent,def=0" json:"event_id,omitempty"`
	GuildPoints         *uint32 `protobuf:"varint,3,opt,name=guild_points,json=guildPoints" json:"guild_points,omitempty"`
	GuildLogo           *uint64 `protobuf:"varint,4,opt,name=guild_logo,json=guildLogo" json:"guild_logo,omitempty"`
	GuildPrimaryColor   *uint32 `protobuf:"varint,5,opt,name=guild_primary_color,json=guildPrimaryColor" json:"guild_primary_color,omitempty"`
	GuildSecondaryColor *uint32 `protobuf:"varint,6,opt,name=guild_secondary_color,json=guildSecondaryColor" json:"guild_secondary_color,omitempty"`
	GuildPattern        *uint32 `protobuf:"varint,7,opt,name=guild_pattern,json=guildPattern" json:"guild_pattern,omitempty"`
	GuildFlags          *uint32 `protobuf:"varint,8,opt,name=guild_flags,json=guildFlags" json:"guild_flags,omitempty"`
}

// Default values for CMsgLocalServerGuildData fields.
const (
	Default_CMsgLocalServerGuildData_EventId = EEvent_EVENT_ID_NONE
)

func (x *CMsgLocalServerGuildData) Reset() {
	*x = CMsgLocalServerGuildData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgLocalServerGuildData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgLocalServerGuildData) ProtoMessage() {}

func (x *CMsgLocalServerGuildData) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgLocalServerGuildData.ProtoReflect.Descriptor instead.
func (*CMsgLocalServerGuildData) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{6}
}

func (x *CMsgLocalServerGuildData) GetGuildId() uint32 {
	if x != nil && x.GuildId != nil {
		return *x.GuildId
	}
	return 0
}

func (x *CMsgLocalServerGuildData) GetEventId() EEvent {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return Default_CMsgLocalServerGuildData_EventId
}

func (x *CMsgLocalServerGuildData) GetGuildPoints() uint32 {
	if x != nil && x.GuildPoints != nil {
		return *x.GuildPoints
	}
	return 0
}

func (x *CMsgLocalServerGuildData) GetGuildLogo() uint64 {
	if x != nil && x.GuildLogo != nil {
		return *x.GuildLogo
	}
	return 0
}

func (x *CMsgLocalServerGuildData) GetGuildPrimaryColor() uint32 {
	if x != nil && x.GuildPrimaryColor != nil {
		return *x.GuildPrimaryColor
	}
	return 0
}

func (x *CMsgLocalServerGuildData) GetGuildSecondaryColor() uint32 {
	if x != nil && x.GuildSecondaryColor != nil {
		return *x.GuildSecondaryColor
	}
	return 0
}

func (x *CMsgLocalServerGuildData) GetGuildPattern() uint32 {
	if x != nil && x.GuildPattern != nil {
		return *x.GuildPattern
	}
	return 0
}

func (x *CMsgLocalServerGuildData) GetGuildFlags() uint32 {
	if x != nil && x.GuildFlags != nil {
		return *x.GuildFlags
	}
	return 0
}

type CMsgLocalServerFakeLobbyData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId           *uint32                   `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	EventPoints         []*CMsgLobbyEventPoints   `protobuf:"bytes,2,rep,name=event_points,json=eventPoints" json:"event_points,omitempty"`
	IsPlusSubscriber    *bool                     `protobuf:"varint,3,opt,name=is_plus_subscriber,json=isPlusSubscriber" json:"is_plus_subscriber,omitempty"`
	PrimaryEventId      *uint32                   `protobuf:"varint,4,opt,name=primary_event_id,json=primaryEventId" json:"primary_event_id,omitempty"`
	FavoriteTeam        *uint32                   `protobuf:"varint,5,opt,name=favorite_team,json=favoriteTeam" json:"favorite_team,omitempty"`
	FavoriteTeamQuality *uint32                   `protobuf:"varint,6,opt,name=favorite_team_quality,json=favoriteTeamQuality" json:"favorite_team_quality,omitempty"`
	GuildInfo           *CMsgLocalServerGuildData `protobuf:"bytes,7,opt,name=guild_info,json=guildInfo" json:"guild_info,omitempty"`
}

func (x *CMsgLocalServerFakeLobbyData) Reset() {
	*x = CMsgLocalServerFakeLobbyData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgLocalServerFakeLobbyData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgLocalServerFakeLobbyData) ProtoMessage() {}

func (x *CMsgLocalServerFakeLobbyData) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgLocalServerFakeLobbyData.ProtoReflect.Descriptor instead.
func (*CMsgLocalServerFakeLobbyData) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{7}
}

func (x *CMsgLocalServerFakeLobbyData) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgLocalServerFakeLobbyData) GetEventPoints() []*CMsgLobbyEventPoints {
	if x != nil {
		return x.EventPoints
	}
	return nil
}

func (x *CMsgLocalServerFakeLobbyData) GetIsPlusSubscriber() bool {
	if x != nil && x.IsPlusSubscriber != nil {
		return *x.IsPlusSubscriber
	}
	return false
}

func (x *CMsgLocalServerFakeLobbyData) GetPrimaryEventId() uint32 {
	if x != nil && x.PrimaryEventId != nil {
		return *x.PrimaryEventId
	}
	return 0
}

func (x *CMsgLocalServerFakeLobbyData) GetFavoriteTeam() uint32 {
	if x != nil && x.FavoriteTeam != nil {
		return *x.FavoriteTeam
	}
	return 0
}

func (x *CMsgLocalServerFakeLobbyData) GetFavoriteTeamQuality() uint32 {
	if x != nil && x.FavoriteTeamQuality != nil {
		return *x.FavoriteTeamQuality
	}
	return 0
}

func (x *CMsgLocalServerFakeLobbyData) GetGuildInfo() *CMsgLocalServerGuildData {
	if x != nil {
		return x.GuildInfo
	}
	return nil
}

type CMsgBattleCupVictory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId    *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	WinDate      *uint32 `protobuf:"varint,2,opt,name=win_date,json=winDate" json:"win_date,omitempty"`
	ValidUntil   *uint32 `protobuf:"varint,3,opt,name=valid_until,json=validUntil" json:"valid_until,omitempty"`
	SkillLevel   *uint32 `protobuf:"varint,4,opt,name=skill_level,json=skillLevel" json:"skill_level,omitempty"`
	TournamentId *uint32 `protobuf:"varint,5,opt,name=tournament_id,json=tournamentId" json:"tournament_id,omitempty"`
	DivisionId   *uint32 `protobuf:"varint,6,opt,name=division_id,json=divisionId" json:"division_id,omitempty"`
	TeamId       *uint32 `protobuf:"varint,7,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	Streak       *uint32 `protobuf:"varint,8,opt,name=streak" json:"streak,omitempty"`
	TrophyId     *uint32 `protobuf:"varint,9,opt,name=trophy_id,json=trophyId" json:"trophy_id,omitempty"`
}

func (x *CMsgBattleCupVictory) Reset() {
	*x = CMsgBattleCupVictory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgBattleCupVictory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBattleCupVictory) ProtoMessage() {}

func (x *CMsgBattleCupVictory) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBattleCupVictory.ProtoReflect.Descriptor instead.
func (*CMsgBattleCupVictory) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{8}
}

func (x *CMsgBattleCupVictory) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgBattleCupVictory) GetWinDate() uint32 {
	if x != nil && x.WinDate != nil {
		return *x.WinDate
	}
	return 0
}

func (x *CMsgBattleCupVictory) GetValidUntil() uint32 {
	if x != nil && x.ValidUntil != nil {
		return *x.ValidUntil
	}
	return 0
}

func (x *CMsgBattleCupVictory) GetSkillLevel() uint32 {
	if x != nil && x.SkillLevel != nil {
		return *x.SkillLevel
	}
	return 0
}

func (x *CMsgBattleCupVictory) GetTournamentId() uint32 {
	if x != nil && x.TournamentId != nil {
		return *x.TournamentId
	}
	return 0
}

func (x *CMsgBattleCupVictory) GetDivisionId() uint32 {
	if x != nil && x.DivisionId != nil {
		return *x.DivisionId
	}
	return 0
}

func (x *CMsgBattleCupVictory) GetTeamId() uint32 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

func (x *CMsgBattleCupVictory) GetStreak() uint32 {
	if x != nil && x.Streak != nil {
		return *x.Streak
	}
	return 0
}

func (x *CMsgBattleCupVictory) GetTrophyId() uint32 {
	if x != nil && x.TrophyId != nil {
		return *x.TrophyId
	}
	return 0
}

type CMsgLobbyBattleCupVictoryList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Winners []*CMsgBattleCupVictory `protobuf:"bytes,1,rep,name=winners" json:"winners,omitempty"`
}

func (x *CMsgLobbyBattleCupVictoryList) Reset() {
	*x = CMsgLobbyBattleCupVictoryList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgLobbyBattleCupVictoryList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgLobbyBattleCupVictoryList) ProtoMessage() {}

func (x *CMsgLobbyBattleCupVictoryList) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgLobbyBattleCupVictoryList.ProtoReflect.Descriptor instead.
func (*CMsgLobbyBattleCupVictoryList) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{9}
}

func (x *CMsgLobbyBattleCupVictoryList) GetWinners() []*CMsgBattleCupVictory {
	if x != nil {
		return x.Winners
	}
	return nil
}

type CMsgDOTABroadcastNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message *string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (x *CMsgDOTABroadcastNotification) Reset() {
	*x = CMsgDOTABroadcastNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTABroadcastNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTABroadcastNotification) ProtoMessage() {}

func (x *CMsgDOTABroadcastNotification) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTABroadcastNotification.ProtoReflect.Descriptor instead.
func (*CMsgDOTABroadcastNotification) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{10}
}

func (x *CMsgDOTABroadcastNotification) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type CProtoItemHeroStatue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeroId            *uint32  `protobuf:"varint,1,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	StatusEffectIndex *uint32  `protobuf:"varint,2,opt,name=status_effect_index,json=statusEffectIndex" json:"status_effect_index,omitempty"`
	SequenceName      *string  `protobuf:"bytes,3,opt,name=sequence_name,json=sequenceName" json:"sequence_name,omitempty"`
	Cycle             *float32 `protobuf:"fixed32,4,opt,name=cycle" json:"cycle,omitempty"`
	Wearable          []uint32 `protobuf:"varint,5,rep,name=wearable" json:"wearable,omitempty"`
	Inscription       *string  `protobuf:"bytes,6,opt,name=inscription" json:"inscription,omitempty"`
	Style             []uint32 `protobuf:"varint,7,rep,name=style" json:"style,omitempty"`
	TournamentDrop    *bool    `protobuf:"varint,8,opt,name=tournament_drop,json=tournamentDrop" json:"tournament_drop,omitempty"`
}

func (x *CProtoItemHeroStatue) Reset() {
	*x = CProtoItemHeroStatue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CProtoItemHeroStatue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CProtoItemHeroStatue) ProtoMessage() {}

func (x *CProtoItemHeroStatue) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CProtoItemHeroStatue.ProtoReflect.Descriptor instead.
func (*CProtoItemHeroStatue) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{11}
}

func (x *CProtoItemHeroStatue) GetHeroId() uint32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CProtoItemHeroStatue) GetStatusEffectIndex() uint32 {
	if x != nil && x.StatusEffectIndex != nil {
		return *x.StatusEffectIndex
	}
	return 0
}

func (x *CProtoItemHeroStatue) GetSequenceName() string {
	if x != nil && x.SequenceName != nil {
		return *x.SequenceName
	}
	return ""
}

func (x *CProtoItemHeroStatue) GetCycle() float32 {
	if x != nil && x.Cycle != nil {
		return *x.Cycle
	}
	return 0
}

func (x *CProtoItemHeroStatue) GetWearable() []uint32 {
	if x != nil {
		return x.Wearable
	}
	return nil
}

func (x *CProtoItemHeroStatue) GetInscription() string {
	if x != nil && x.Inscription != nil {
		return *x.Inscription
	}
	return ""
}

func (x *CProtoItemHeroStatue) GetStyle() []uint32 {
	if x != nil {
		return x.Style
	}
	return nil
}

func (x *CProtoItemHeroStatue) GetTournamentDrop() bool {
	if x != nil && x.TournamentDrop != nil {
		return *x.TournamentDrop
	}
	return false
}

type CProtoItemTeamShowcase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeroId            *uint32  `protobuf:"varint,1,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	StatusEffectIndex *uint32  `protobuf:"varint,2,opt,name=status_effect_index,json=statusEffectIndex" json:"status_effect_index,omitempty"`
	SequenceName      *string  `protobuf:"bytes,3,opt,name=sequence_name,json=sequenceName" json:"sequence_name,omitempty"`
	Cycle             *float32 `protobuf:"fixed32,4,opt,name=cycle" json:"cycle,omitempty"`
	Wearable          []uint32 `protobuf:"varint,5,rep,name=wearable" json:"wearable,omitempty"`
	Inscription       *string  `protobuf:"bytes,6,opt,name=inscription" json:"inscription,omitempty"`
	Style             []uint32 `protobuf:"varint,7,rep,name=style" json:"style,omitempty"`
}

func (x *CProtoItemTeamShowcase) Reset() {
	*x = CProtoItemTeamShowcase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CProtoItemTeamShowcase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CProtoItemTeamShowcase) ProtoMessage() {}

func (x *CProtoItemTeamShowcase) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CProtoItemTeamShowcase.ProtoReflect.Descriptor instead.
func (*CProtoItemTeamShowcase) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{12}
}

func (x *CProtoItemTeamShowcase) GetHeroId() uint32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CProtoItemTeamShowcase) GetStatusEffectIndex() uint32 {
	if x != nil && x.StatusEffectIndex != nil {
		return *x.StatusEffectIndex
	}
	return 0
}

func (x *CProtoItemTeamShowcase) GetSequenceName() string {
	if x != nil && x.SequenceName != nil {
		return *x.SequenceName
	}
	return ""
}

func (x *CProtoItemTeamShowcase) GetCycle() float32 {
	if x != nil && x.Cycle != nil {
		return *x.Cycle
	}
	return 0
}

func (x *CProtoItemTeamShowcase) GetWearable() []uint32 {
	if x != nil {
		return x.Wearable
	}
	return nil
}

func (x *CProtoItemTeamShowcase) GetInscription() string {
	if x != nil && x.Inscription != nil {
		return *x.Inscription
	}
	return ""
}

func (x *CProtoItemTeamShowcase) GetStyle() []uint32 {
	if x != nil {
		return x.Style
	}
	return nil
}

type CMatchPlayerAbilityUpgrade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ability *uint32 `protobuf:"varint,1,opt,name=ability" json:"ability,omitempty"`
	Time    *uint32 `protobuf:"varint,2,opt,name=time" json:"time,omitempty"`
}

func (x *CMatchPlayerAbilityUpgrade) Reset() {
	*x = CMatchPlayerAbilityUpgrade{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMatchPlayerAbilityUpgrade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMatchPlayerAbilityUpgrade) ProtoMessage() {}

func (x *CMatchPlayerAbilityUpgrade) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMatchPlayerAbilityUpgrade.ProtoReflect.Descriptor instead.
func (*CMatchPlayerAbilityUpgrade) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{13}
}

func (x *CMatchPlayerAbilityUpgrade) GetAbility() uint32 {
	if x != nil && x.Ability != nil {
		return *x.Ability
	}
	return 0
}

func (x *CMatchPlayerAbilityUpgrade) GetTime() uint32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

type CMatchPlayerTimedStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time                  *uint32 `protobuf:"varint,1,opt,name=time" json:"time,omitempty"`
	Kills                 *uint32 `protobuf:"varint,2,opt,name=kills" json:"kills,omitempty"`
	Deaths                *uint32 `protobuf:"varint,3,opt,name=deaths" json:"deaths,omitempty"`
	Assists               *uint32 `protobuf:"varint,4,opt,name=assists" json:"assists,omitempty"`
	NetWorth              *uint32 `protobuf:"varint,5,opt,name=net_worth,json=netWorth" json:"net_worth,omitempty"`
	Xp                    *uint32 `protobuf:"varint,6,opt,name=xp" json:"xp,omitempty"`
	LastHits              *uint32 `protobuf:"varint,7,opt,name=last_hits,json=lastHits" json:"last_hits,omitempty"`
	Denies                *uint32 `protobuf:"varint,8,opt,name=denies" json:"denies,omitempty"`
	BountyRuneGold        *uint32 `protobuf:"varint,9,opt,name=bounty_rune_gold,json=bountyRuneGold" json:"bounty_rune_gold,omitempty"`
	RangeCreepUpgradeGold *uint32 `protobuf:"varint,10,opt,name=range_creep_upgrade_gold,json=rangeCreepUpgradeGold" json:"range_creep_upgrade_gold,omitempty"`
	ObserverWardsDewarded *uint32 `protobuf:"varint,11,opt,name=observer_wards_dewarded,json=observerWardsDewarded" json:"observer_wards_dewarded,omitempty"`
	ReliableGoldEarned    *uint32 `protobuf:"varint,12,opt,name=reliable_gold_earned,json=reliableGoldEarned" json:"reliable_gold_earned,omitempty"`
	GoldLossPrevented     *uint32 `protobuf:"varint,13,opt,name=gold_loss_prevented,json=goldLossPrevented" json:"gold_loss_prevented,omitempty"`
	HeroKillGold          *uint32 `protobuf:"varint,14,opt,name=hero_kill_gold,json=heroKillGold" json:"hero_kill_gold,omitempty"`
	CreepKillGold         *uint32 `protobuf:"varint,15,opt,name=creep_kill_gold,json=creepKillGold" json:"creep_kill_gold,omitempty"`
	BuildingGold          *uint32 `protobuf:"varint,16,opt,name=building_gold,json=buildingGold" json:"building_gold,omitempty"`
	OtherGold             *uint32 `protobuf:"varint,17,opt,name=other_gold,json=otherGold" json:"other_gold,omitempty"`
	ComebackGold          *uint32 `protobuf:"varint,18,opt,name=comeback_gold,json=comebackGold" json:"comeback_gold,omitempty"`
	ExperimentalGold      *uint32 `protobuf:"varint,19,opt,name=experimental_gold,json=experimentalGold" json:"experimental_gold,omitempty"`
	Experimental2Gold     *uint32 `protobuf:"varint,20,opt,name=experimental2_gold,json=experimental2Gold" json:"experimental2_gold,omitempty"`
	CreepDenyGold         *uint32 `protobuf:"varint,21,opt,name=creep_deny_gold,json=creepDenyGold" json:"creep_deny_gold,omitempty"`
	TpScrollsPurchased_1  *uint32 `protobuf:"varint,22,opt,name=tp_scrolls_purchased_1,json=tpScrollsPurchased1" json:"tp_scrolls_purchased_1,omitempty"`
	TpScrollsPurchased_2  *uint32 `protobuf:"varint,23,opt,name=tp_scrolls_purchased_2,json=tpScrollsPurchased2" json:"tp_scrolls_purchased_2,omitempty"`
	TpScrollsPurchased_3  *uint32 `protobuf:"varint,24,opt,name=tp_scrolls_purchased_3,json=tpScrollsPurchased3" json:"tp_scrolls_purchased_3,omitempty"`
	TpScrollsPurchased_4  *uint32 `protobuf:"varint,25,opt,name=tp_scrolls_purchased_4,json=tpScrollsPurchased4" json:"tp_scrolls_purchased_4,omitempty"`
	TpScrollsPurchased_5  *uint32 `protobuf:"varint,26,opt,name=tp_scrolls_purchased_5,json=tpScrollsPurchased5" json:"tp_scrolls_purchased_5,omitempty"`
	NeutralGold           *uint32 `protobuf:"varint,27,opt,name=neutral_gold,json=neutralGold" json:"neutral_gold,omitempty"`
	CourierGold           *uint32 `protobuf:"varint,28,opt,name=courier_gold,json=courierGold" json:"courier_gold,omitempty"`
	RoshanGold            *uint32 `protobuf:"varint,29,opt,name=roshan_gold,json=roshanGold" json:"roshan_gold,omitempty"`
	IncomeGold            *uint32 `protobuf:"varint,30,opt,name=income_gold,json=incomeGold" json:"income_gold,omitempty"`
	CustomStats_1         *uint32 `protobuf:"varint,31,opt,name=custom_stats_1,json=customStats1" json:"custom_stats_1,omitempty"`
	CustomStats_2         *uint32 `protobuf:"varint,32,opt,name=custom_stats_2,json=customStats2" json:"custom_stats_2,omitempty"`
	CustomStats_3         *uint32 `protobuf:"varint,33,opt,name=custom_stats_3,json=customStats3" json:"custom_stats_3,omitempty"`
	CustomStats_4         *uint32 `protobuf:"varint,34,opt,name=custom_stats_4,json=customStats4" json:"custom_stats_4,omitempty"`
	CustomStats_5         *uint32 `protobuf:"varint,35,opt,name=custom_stats_5,json=customStats5" json:"custom_stats_5,omitempty"`
	ItemValue             *uint32 `protobuf:"varint,36,opt,name=item_value,json=itemValue" json:"item_value,omitempty"`
	SupportGoldSpent      *uint32 `protobuf:"varint,37,opt,name=support_gold_spent,json=supportGoldSpent" json:"support_gold_spent,omitempty"`
	CampsStacked          *uint32 `protobuf:"varint,38,opt,name=camps_stacked,json=campsStacked" json:"camps_stacked,omitempty"`
	WardsPlaced           *uint32 `protobuf:"varint,39,opt,name=wards_placed,json=wardsPlaced" json:"wards_placed,omitempty"`
	TripleKills           *uint32 `protobuf:"varint,40,opt,name=triple_kills,json=tripleKills" json:"triple_kills,omitempty"`
	Rampages              *uint32 `protobuf:"varint,41,opt,name=rampages" json:"rampages,omitempty"`
}

func (x *CMatchPlayerTimedStats) Reset() {
	*x = CMatchPlayerTimedStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMatchPlayerTimedStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMatchPlayerTimedStats) ProtoMessage() {}

func (x *CMatchPlayerTimedStats) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMatchPlayerTimedStats.ProtoReflect.Descriptor instead.
func (*CMatchPlayerTimedStats) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{14}
}

func (x *CMatchPlayerTimedStats) GetTime() uint32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

func (x *CMatchPlayerTimedStats) GetKills() uint32 {
	if x != nil && x.Kills != nil {
		return *x.Kills
	}
	return 0
}

func (x *CMatchPlayerTimedStats) GetDeaths() uint32 {
	if x != nil && x.Deaths != nil {
		return *x.Deaths
	}
	return 0
}

func (x *CMatchPlayerTimedStats) GetAssists() uint32 {
	if x != nil && x.Assists != nil {
		return *x.Assists
	}
	return 0
}

func (x *CMatchPlayerTimedStats) GetNetWorth() uint32 {
	if x != nil && x.NetWorth != nil {
		return *x.NetWorth
	}
	return 0
}

func (x *CMatchPlayerTimedStats) GetXp() uint32 {
	if x != nil && x.Xp != nil {
		return *x.Xp
	}
	return 0
}

func (x *CMatchPlayerTimedStats) GetLastHits() uint32 {
	if x != nil && x.LastHits != nil {
		return *x.LastHits
	}
	return 0
}

func (x *CMatchPlayerTimedStats) GetDenies() uint32 {
	if x != nil && x.Denies != nil {
		return *x.Denies
	}
	return 0
}

func (x *CMatchPlayerTimedStats) GetBountyRuneGold() uint32 {
	if x != nil && x.BountyRuneGold != nil {
		return *x.BountyRuneGold
	}
	return 0
}

func (x *CMatchPlayerTimedStats) GetRangeCreepUpgradeGold() uint32 {
	if x != nil && x.RangeCreepUpgradeGold != nil {
		return *x.RangeCreepUpgradeGold
	}
	return 0
}

func (x *CMatchPlayerTimedStats) GetObserverWardsDewarded() uint32 {
	if x != nil && x.ObserverWardsDewarded != nil {
		return *x.ObserverWardsDewarded
	}
	return 0
}

func (x *CMatchPlayerTimedStats) GetReliableGoldEarned() uint32 {
	if x != nil && x.ReliableGoldEarned != nil {
		return *x.ReliableGoldEarned
	}
	return 0
}

func (x *CMatchPlayerTimedStats) GetGoldLossPrevented() uint32 {
	if x != nil && x.GoldLossPrevented != nil {
		return *x.GoldLossPrevented
	}
	return 0
}

func (x *CMatchPlayerTimedStats) GetHeroKillGold() uint32 {
	if x != nil && x.HeroKillGold != nil {
		return *x.HeroKillGold
	}
	return 0
}

func (x *CMatchPlayerTimedStats) GetCreepKillGold() uint32 {
	if x != nil && x.CreepKillGold != nil {
		return *x.CreepKillGold
	}
	return 0
}

func (x *CMatchPlayerTimedStats) GetBuildingGold() uint32 {
	if x != nil && x.BuildingGold != nil {
		return *x.BuildingGold
	}
	return 0
}

func (x *CMatchPlayerTimedStats) GetOtherGold() uint32 {
	if x != nil && x.OtherGold != nil {
		return *x.OtherGold
	}
	return 0
}

func (x *CMatchPlayerTimedStats) GetComebackGold() uint32 {
	if x != nil && x.ComebackGold != nil {
		return *x.ComebackGold
	}
	return 0
}

func (x *CMatchPlayerTimedStats) GetExperimentalGold() uint32 {
	if x != nil && x.ExperimentalGold != nil {
		return *x.ExperimentalGold
	}
	return 0
}

func (x *CMatchPlayerTimedStats) GetExperimental2Gold() uint32 {
	if x != nil && x.Experimental2Gold != nil {
		return *x.Experimental2Gold
	}
	return 0
}

func (x *CMatchPlayerTimedStats) GetCreepDenyGold() uint32 {
	if x != nil && x.CreepDenyGold != nil {
		return *x.CreepDenyGold
	}
	return 0
}

func (x *CMatchPlayerTimedStats) GetTpScrollsPurchased_1() uint32 {
	if x != nil && x.TpScrollsPurchased_1 != nil {
		return *x.TpScrollsPurchased_1
	}
	return 0
}

func (x *CMatchPlayerTimedStats) GetTpScrollsPurchased_2() uint32 {
	if x != nil && x.TpScrollsPurchased_2 != nil {
		return *x.TpScrollsPurchased_2
	}
	return 0
}

func (x *CMatchPlayerTimedStats) GetTpScrollsPurchased_3() uint32 {
	if x != nil && x.TpScrollsPurchased_3 != nil {
		return *x.TpScrollsPurchased_3
	}
	return 0
}

func (x *CMatchPlayerTimedStats) GetTpScrollsPurchased_4() uint32 {
	if x != nil && x.TpScrollsPurchased_4 != nil {
		return *x.TpScrollsPurchased_4
	}
	return 0
}

func (x *CMatchPlayerTimedStats) GetTpScrollsPurchased_5() uint32 {
	if x != nil && x.TpScrollsPurchased_5 != nil {
		return *x.TpScrollsPurchased_5
	}
	return 0
}

func (x *CMatchPlayerTimedStats) GetNeutralGold() uint32 {
	if x != nil && x.NeutralGold != nil {
		return *x.NeutralGold
	}
	return 0
}

func (x *CMatchPlayerTimedStats) GetCourierGold() uint32 {
	if x != nil && x.CourierGold != nil {
		return *x.CourierGold
	}
	return 0
}

func (x *CMatchPlayerTimedStats) GetRoshanGold() uint32 {
	if x != nil && x.RoshanGold != nil {
		return *x.RoshanGold
	}
	return 0
}

func (x *CMatchPlayerTimedStats) GetIncomeGold() uint32 {
	if x != nil && x.IncomeGold != nil {
		return *x.IncomeGold
	}
	return 0
}

func (x *CMatchPlayerTimedStats) GetCustomStats_1() uint32 {
	if x != nil && x.CustomStats_1 != nil {
		return *x.CustomStats_1
	}
	return 0
}

func (x *CMatchPlayerTimedStats) GetCustomStats_2() uint32 {
	if x != nil && x.CustomStats_2 != nil {
		return *x.CustomStats_2
	}
	return 0
}

func (x *CMatchPlayerTimedStats) GetCustomStats_3() uint32 {
	if x != nil && x.CustomStats_3 != nil {
		return *x.CustomStats_3
	}
	return 0
}

func (x *CMatchPlayerTimedStats) GetCustomStats_4() uint32 {
	if x != nil && x.CustomStats_4 != nil {
		return *x.CustomStats_4
	}
	return 0
}

func (x *CMatchPlayerTimedStats) GetCustomStats_5() uint32 {
	if x != nil && x.CustomStats_5 != nil {
		return *x.CustomStats_5
	}
	return 0
}

func (x *CMatchPlayerTimedStats) GetItemValue() uint32 {
	if x != nil && x.ItemValue != nil {
		return *x.ItemValue
	}
	return 0
}

func (x *CMatchPlayerTimedStats) GetSupportGoldSpent() uint32 {
	if x != nil && x.SupportGoldSpent != nil {
		return *x.SupportGoldSpent
	}
	return 0
}

func (x *CMatchPlayerTimedStats) GetCampsStacked() uint32 {
	if x != nil && x.CampsStacked != nil {
		return *x.CampsStacked
	}
	return 0
}

func (x *CMatchPlayerTimedStats) GetWardsPlaced() uint32 {
	if x != nil && x.WardsPlaced != nil {
		return *x.WardsPlaced
	}
	return 0
}

func (x *CMatchPlayerTimedStats) GetTripleKills() uint32 {
	if x != nil && x.TripleKills != nil {
		return *x.TripleKills
	}
	return 0
}

func (x *CMatchPlayerTimedStats) GetRampages() uint32 {
	if x != nil && x.Rampages != nil {
		return *x.Rampages
	}
	return 0
}

type CMatchTeamTimedStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time                *uint32 `protobuf:"varint,1,opt,name=time" json:"time,omitempty"`
	EnemyTowersKilled   *uint32 `protobuf:"varint,2,opt,name=enemy_towers_killed,json=enemyTowersKilled" json:"enemy_towers_killed,omitempty"`
	EnemyBarracksKilled *uint32 `protobuf:"varint,3,opt,name=enemy_barracks_killed,json=enemyBarracksKilled" json:"enemy_barracks_killed,omitempty"`
}

func (x *CMatchTeamTimedStats) Reset() {
	*x = CMatchTeamTimedStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMatchTeamTimedStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMatchTeamTimedStats) ProtoMessage() {}

func (x *CMatchTeamTimedStats) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMatchTeamTimedStats.ProtoReflect.Descriptor instead.
func (*CMatchTeamTimedStats) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{15}
}

func (x *CMatchTeamTimedStats) GetTime() uint32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

func (x *CMatchTeamTimedStats) GetEnemyTowersKilled() uint32 {
	if x != nil && x.EnemyTowersKilled != nil {
		return *x.EnemyTowersKilled
	}
	return 0
}

func (x *CMatchTeamTimedStats) GetEnemyBarracksKilled() uint32 {
	if x != nil && x.EnemyBarracksKilled != nil {
		return *x.EnemyBarracksKilled
	}
	return 0
}

type CMatchAdditionalUnitInventory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnitName *string  `protobuf:"bytes,1,opt,name=unit_name,json=unitName" json:"unit_name,omitempty"`
	Items    []uint32 `protobuf:"varint,2,rep,name=items" json:"items,omitempty"`
}

func (x *CMatchAdditionalUnitInventory) Reset() {
	*x = CMatchAdditionalUnitInventory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMatchAdditionalUnitInventory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMatchAdditionalUnitInventory) ProtoMessage() {}

func (x *CMatchAdditionalUnitInventory) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMatchAdditionalUnitInventory.ProtoReflect.Descriptor instead.
func (*CMatchAdditionalUnitInventory) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{16}
}

func (x *CMatchAdditionalUnitInventory) GetUnitName() string {
	if x != nil && x.UnitName != nil {
		return *x.UnitName
	}
	return ""
}

func (x *CMatchAdditionalUnitInventory) GetItems() []uint32 {
	if x != nil {
		return x.Items
	}
	return nil
}

type CMatchPlayerPermanentBuff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PermanentBuff *uint32 `protobuf:"varint,1,opt,name=permanent_buff,json=permanentBuff" json:"permanent_buff,omitempty"`
	StackCount    *uint32 `protobuf:"varint,2,opt,name=stack_count,json=stackCount" json:"stack_count,omitempty"`
}

func (x *CMatchPlayerPermanentBuff) Reset() {
	*x = CMatchPlayerPermanentBuff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMatchPlayerPermanentBuff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMatchPlayerPermanentBuff) ProtoMessage() {}

func (x *CMatchPlayerPermanentBuff) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMatchPlayerPermanentBuff.ProtoReflect.Descriptor instead.
func (*CMatchPlayerPermanentBuff) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{17}
}

func (x *CMatchPlayerPermanentBuff) GetPermanentBuff() uint32 {
	if x != nil && x.PermanentBuff != nil {
		return *x.PermanentBuff
	}
	return 0
}

func (x *CMatchPlayerPermanentBuff) GetStackCount() uint32 {
	if x != nil && x.StackCount != nil {
		return *x.StackCount
	}
	return 0
}

type CMatchHeroSelectEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsPick *bool   `protobuf:"varint,1,opt,name=is_pick,json=isPick" json:"is_pick,omitempty"`
	Team   *uint32 `protobuf:"varint,2,opt,name=team" json:"team,omitempty"`
	HeroId *uint32 `protobuf:"varint,3,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
}

func (x *CMatchHeroSelectEvent) Reset() {
	*x = CMatchHeroSelectEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMatchHeroSelectEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMatchHeroSelectEvent) ProtoMessage() {}

func (x *CMatchHeroSelectEvent) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMatchHeroSelectEvent.ProtoReflect.Descriptor instead.
func (*CMatchHeroSelectEvent) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{18}
}

func (x *CMatchHeroSelectEvent) GetIsPick() bool {
	if x != nil && x.IsPick != nil {
		return *x.IsPick
	}
	return false
}

func (x *CMatchHeroSelectEvent) GetTeam() uint32 {
	if x != nil && x.Team != nil {
		return *x.Team
	}
	return 0
}

func (x *CMatchHeroSelectEvent) GetHeroId() uint32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

type CPartySearchClientParty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartyId      *uint64  `protobuf:"fixed64,1,opt,name=party_id,json=partyId" json:"party_id,omitempty"`
	BeaconType   *int32   `protobuf:"varint,2,opt,name=beacon_type,json=beaconType" json:"beacon_type,omitempty"`
	PartyMembers []uint32 `protobuf:"fixed32,3,rep,name=party_members,json=partyMembers" json:"party_members,omitempty"`
}

func (x *CPartySearchClientParty) Reset() {
	*x = CPartySearchClientParty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPartySearchClientParty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPartySearchClientParty) ProtoMessage() {}

func (x *CPartySearchClientParty) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPartySearchClientParty.ProtoReflect.Descriptor instead.
func (*CPartySearchClientParty) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{19}
}

func (x *CPartySearchClientParty) GetPartyId() uint64 {
	if x != nil && x.PartyId != nil {
		return *x.PartyId
	}
	return 0
}

func (x *CPartySearchClientParty) GetBeaconType() int32 {
	if x != nil && x.BeaconType != nil {
		return *x.BeaconType
	}
	return 0
}

func (x *CPartySearchClientParty) GetPartyMembers() []uint32 {
	if x != nil {
		return x.PartyMembers
	}
	return nil
}

type CMsgDOTAProcessFantasyScheduledEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Event           *uint32 `protobuf:"varint,1,opt,name=event" json:"event,omitempty"`
	Timestamp       *uint32 `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	FantasyLeagueId *uint32 `protobuf:"varint,3,opt,name=fantasy_league_id,json=fantasyLeagueId" json:"fantasy_league_id,omitempty"`
	Season          *uint32 `protobuf:"varint,4,opt,name=season" json:"season,omitempty"`
	ReferenceData   *uint32 `protobuf:"varint,5,opt,name=reference_data,json=referenceData" json:"reference_data,omitempty"`
}

func (x *CMsgDOTAProcessFantasyScheduledEvent) Reset() {
	*x = CMsgDOTAProcessFantasyScheduledEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAProcessFantasyScheduledEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAProcessFantasyScheduledEvent) ProtoMessage() {}

func (x *CMsgDOTAProcessFantasyScheduledEvent) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAProcessFantasyScheduledEvent.ProtoReflect.Descriptor instead.
func (*CMsgDOTAProcessFantasyScheduledEvent) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{20}
}

func (x *CMsgDOTAProcessFantasyScheduledEvent) GetEvent() uint32 {
	if x != nil && x.Event != nil {
		return *x.Event
	}
	return 0
}

func (x *CMsgDOTAProcessFantasyScheduledEvent) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *CMsgDOTAProcessFantasyScheduledEvent) GetFantasyLeagueId() uint32 {
	if x != nil && x.FantasyLeagueId != nil {
		return *x.FantasyLeagueId
	}
	return 0
}

func (x *CMsgDOTAProcessFantasyScheduledEvent) GetSeason() uint32 {
	if x != nil && x.Season != nil {
		return *x.Season
	}
	return 0
}

func (x *CMsgDOTAProcessFantasyScheduledEvent) GetReferenceData() uint32 {
	if x != nil && x.ReferenceData != nil {
		return *x.ReferenceData
	}
	return 0
}

type CMsgDOTAHasItemQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	ItemId    *uint64 `protobuf:"varint,2,opt,name=item_id,json=itemId" json:"item_id,omitempty"`
}

func (x *CMsgDOTAHasItemQuery) Reset() {
	*x = CMsgDOTAHasItemQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAHasItemQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAHasItemQuery) ProtoMessage() {}

func (x *CMsgDOTAHasItemQuery) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAHasItemQuery.ProtoReflect.Descriptor instead.
func (*CMsgDOTAHasItemQuery) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{21}
}

func (x *CMsgDOTAHasItemQuery) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgDOTAHasItemQuery) GetItemId() uint64 {
	if x != nil && x.ItemId != nil {
		return *x.ItemId
	}
	return 0
}

type CMsgDOTAHasItemResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HasItem *bool `protobuf:"varint,1,opt,name=has_item,json=hasItem" json:"has_item,omitempty"`
}

func (x *CMsgDOTAHasItemResponse) Reset() {
	*x = CMsgDOTAHasItemResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAHasItemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAHasItemResponse) ProtoMessage() {}

func (x *CMsgDOTAHasItemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAHasItemResponse.ProtoReflect.Descriptor instead.
func (*CMsgDOTAHasItemResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{22}
}

func (x *CMsgDOTAHasItemResponse) GetHasItem() bool {
	if x != nil && x.HasItem != nil {
		return *x.HasItem
	}
	return false
}

type CMsgGCIsProQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
}

func (x *CMsgGCIsProQuery) Reset() {
	*x = CMsgGCIsProQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCIsProQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCIsProQuery) ProtoMessage() {}

func (x *CMsgGCIsProQuery) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCIsProQuery.ProtoReflect.Descriptor instead.
func (*CMsgGCIsProQuery) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{23}
}

func (x *CMsgGCIsProQuery) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

type CMsgGCIsProResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsPro *bool `protobuf:"varint,1,opt,name=is_pro,json=isPro" json:"is_pro,omitempty"`
}

func (x *CMsgGCIsProResponse) Reset() {
	*x = CMsgGCIsProResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCIsProResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCIsProResponse) ProtoMessage() {}

func (x *CMsgGCIsProResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCIsProResponse.ProtoReflect.Descriptor instead.
func (*CMsgGCIsProResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{24}
}

func (x *CMsgGCIsProResponse) GetIsPro() bool {
	if x != nil && x.IsPro != nil {
		return *x.IsPro
	}
	return false
}

type CMsgDOTAHasItemDefsQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId  *uint32  `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	ItemdefIds []uint32 `protobuf:"varint,2,rep,name=itemdef_ids,json=itemdefIds" json:"itemdef_ids,omitempty"`
}

func (x *CMsgDOTAHasItemDefsQuery) Reset() {
	*x = CMsgDOTAHasItemDefsQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAHasItemDefsQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAHasItemDefsQuery) ProtoMessage() {}

func (x *CMsgDOTAHasItemDefsQuery) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAHasItemDefsQuery.ProtoReflect.Descriptor instead.
func (*CMsgDOTAHasItemDefsQuery) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{25}
}

func (x *CMsgDOTAHasItemDefsQuery) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgDOTAHasItemDefsQuery) GetItemdefIds() []uint32 {
	if x != nil {
		return x.ItemdefIds
	}
	return nil
}

type CMsgDOTAHasItemDefsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HasItems *bool `protobuf:"varint,1,opt,name=has_items,json=hasItems" json:"has_items,omitempty"`
}

func (x *CMsgDOTAHasItemDefsResponse) Reset() {
	*x = CMsgDOTAHasItemDefsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAHasItemDefsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAHasItemDefsResponse) ProtoMessage() {}

func (x *CMsgDOTAHasItemDefsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAHasItemDefsResponse.ProtoReflect.Descriptor instead.
func (*CMsgDOTAHasItemDefsResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{26}
}

func (x *CMsgDOTAHasItemDefsResponse) GetHasItems() bool {
	if x != nil && x.HasItems != nil {
		return *x.HasItems
	}
	return false
}

type CMsgGCGetPlayerCardItemInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId         *uint32  `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	PlayerCardItemIds []uint64 `protobuf:"varint,2,rep,name=player_card_item_ids,json=playerCardItemIds" json:"player_card_item_ids,omitempty"`
	AllForEvent       *uint32  `protobuf:"varint,3,opt,name=all_for_event,json=allForEvent" json:"all_for_event,omitempty"`
}

func (x *CMsgGCGetPlayerCardItemInfo) Reset() {
	*x = CMsgGCGetPlayerCardItemInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCGetPlayerCardItemInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCGetPlayerCardItemInfo) ProtoMessage() {}

func (x *CMsgGCGetPlayerCardItemInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCGetPlayerCardItemInfo.ProtoReflect.Descriptor instead.
func (*CMsgGCGetPlayerCardItemInfo) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{27}
}

func (x *CMsgGCGetPlayerCardItemInfo) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgGCGetPlayerCardItemInfo) GetPlayerCardItemIds() []uint64 {
	if x != nil {
		return x.PlayerCardItemIds
	}
	return nil
}

func (x *CMsgGCGetPlayerCardItemInfo) GetAllForEvent() uint32 {
	if x != nil && x.AllForEvent != nil {
		return *x.AllForEvent
	}
	return 0
}

type CMsgGCGetPlayerCardItemInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerCardInfos []*CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo `protobuf:"bytes,1,rep,name=player_card_infos,json=playerCardInfos" json:"player_card_infos,omitempty"`
}

func (x *CMsgGCGetPlayerCardItemInfoResponse) Reset() {
	*x = CMsgGCGetPlayerCardItemInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCGetPlayerCardItemInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCGetPlayerCardItemInfoResponse) ProtoMessage() {}

func (x *CMsgGCGetPlayerCardItemInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCGetPlayerCardItemInfoResponse.ProtoReflect.Descriptor instead.
func (*CMsgGCGetPlayerCardItemInfoResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{28}
}

func (x *CMsgGCGetPlayerCardItemInfoResponse) GetPlayerCardInfos() []*CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo {
	if x != nil {
		return x.PlayerCardInfos
	}
	return nil
}

type CMsgGCToGCFantasySetMatchLeague struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId  *uint64 `protobuf:"varint,1,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	LeagueId *uint32 `protobuf:"varint,2,opt,name=league_id,json=leagueId" json:"league_id,omitempty"`
}

func (x *CMsgGCToGCFantasySetMatchLeague) Reset() {
	*x = CMsgGCToGCFantasySetMatchLeague{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCToGCFantasySetMatchLeague) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToGCFantasySetMatchLeague) ProtoMessage() {}

func (x *CMsgGCToGCFantasySetMatchLeague) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToGCFantasySetMatchLeague.ProtoReflect.Descriptor instead.
func (*CMsgGCToGCFantasySetMatchLeague) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{29}
}

func (x *CMsgGCToGCFantasySetMatchLeague) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgGCToGCFantasySetMatchLeague) GetLeagueId() uint32 {
	if x != nil && x.LeagueId != nil {
		return *x.LeagueId
	}
	return 0
}

type CSODOTAMapLocationState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId  *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	LocationId *int32  `protobuf:"varint,2,opt,name=location_id,json=locationId" json:"location_id,omitempty"`
	Completed  *bool   `protobuf:"varint,3,opt,name=completed" json:"completed,omitempty"`
}

func (x *CSODOTAMapLocationState) Reset() {
	*x = CSODOTAMapLocationState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSODOTAMapLocationState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSODOTAMapLocationState) ProtoMessage() {}

func (x *CSODOTAMapLocationState) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSODOTAMapLocationState.ProtoReflect.Descriptor instead.
func (*CSODOTAMapLocationState) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{30}
}

func (x *CSODOTAMapLocationState) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CSODOTAMapLocationState) GetLocationId() int32 {
	if x != nil && x.LocationId != nil {
		return *x.LocationId
	}
	return 0
}

func (x *CSODOTAMapLocationState) GetCompleted() bool {
	if x != nil && x.Completed != nil {
		return *x.Completed
	}
	return false
}

type CMsgLeagueAdminList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountIds []uint32 `protobuf:"varint,1,rep,name=account_ids,json=accountIds" json:"account_ids,omitempty"`
}

func (x *CMsgLeagueAdminList) Reset() {
	*x = CMsgLeagueAdminList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgLeagueAdminList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgLeagueAdminList) ProtoMessage() {}

func (x *CMsgLeagueAdminList) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgLeagueAdminList.ProtoReflect.Descriptor instead.
func (*CMsgLeagueAdminList) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{31}
}

func (x *CMsgLeagueAdminList) GetAccountIds() []uint32 {
	if x != nil {
		return x.AccountIds
	}
	return nil
}

type CCompendiumTimestampedData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameTime      *uint32  `protobuf:"varint,1,opt,name=game_time,json=gameTime" json:"game_time,omitempty"`
	Gpm           *uint32  `protobuf:"varint,2,opt,name=gpm" json:"gpm,omitempty"`
	Xpm           *uint32  `protobuf:"varint,3,opt,name=xpm" json:"xpm,omitempty"`
	Kills         *uint32  `protobuf:"varint,4,opt,name=kills" json:"kills,omitempty"`
	Deaths        *uint32  `protobuf:"varint,5,opt,name=deaths" json:"deaths,omitempty"`
	ItemPurchases []uint32 `protobuf:"varint,6,rep,name=item_purchases,json=itemPurchases" json:"item_purchases,omitempty"`
}

func (x *CCompendiumTimestampedData) Reset() {
	*x = CCompendiumTimestampedData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCompendiumTimestampedData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCompendiumTimestampedData) ProtoMessage() {}

func (x *CCompendiumTimestampedData) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCompendiumTimestampedData.ProtoReflect.Descriptor instead.
func (*CCompendiumTimestampedData) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{32}
}

func (x *CCompendiumTimestampedData) GetGameTime() uint32 {
	if x != nil && x.GameTime != nil {
		return *x.GameTime
	}
	return 0
}

func (x *CCompendiumTimestampedData) GetGpm() uint32 {
	if x != nil && x.Gpm != nil {
		return *x.Gpm
	}
	return 0
}

func (x *CCompendiumTimestampedData) GetXpm() uint32 {
	if x != nil && x.Xpm != nil {
		return *x.Xpm
	}
	return 0
}

func (x *CCompendiumTimestampedData) GetKills() uint32 {
	if x != nil && x.Kills != nil {
		return *x.Kills
	}
	return 0
}

func (x *CCompendiumTimestampedData) GetDeaths() uint32 {
	if x != nil && x.Deaths != nil {
		return *x.Deaths
	}
	return 0
}

func (x *CCompendiumTimestampedData) GetItemPurchases() []uint32 {
	if x != nil {
		return x.ItemPurchases
	}
	return nil
}

type CCompendiumGameTimeline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*CCompendiumTimestampedData `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
	Tags []string                      `protobuf:"bytes,2,rep,name=tags" json:"tags,omitempty"`
}

func (x *CCompendiumGameTimeline) Reset() {
	*x = CCompendiumGameTimeline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCompendiumGameTimeline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCompendiumGameTimeline) ProtoMessage() {}

func (x *CCompendiumGameTimeline) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCompendiumGameTimeline.ProtoReflect.Descriptor instead.
func (*CCompendiumGameTimeline) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{33}
}

func (x *CCompendiumGameTimeline) GetData() []*CCompendiumTimestampedData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CCompendiumGameTimeline) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type CCompendiumGameList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Games []*CCompendiumGameTimeline `protobuf:"bytes,1,rep,name=games" json:"games,omitempty"`
}

func (x *CCompendiumGameList) Reset() {
	*x = CCompendiumGameList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCompendiumGameList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCompendiumGameList) ProtoMessage() {}

func (x *CCompendiumGameList) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCompendiumGameList.ProtoReflect.Descriptor instead.
func (*CCompendiumGameList) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{34}
}

func (x *CCompendiumGameList) GetGames() []*CCompendiumGameTimeline {
	if x != nil {
		return x.Games
	}
	return nil
}

type CAdditionalEquipSlot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClassId  *uint32 `protobuf:"varint,1,opt,name=class_id,json=classId" json:"class_id,omitempty"`
	SlotId   *uint32 `protobuf:"varint,2,opt,name=slot_id,json=slotId" json:"slot_id,omitempty"`
	DefIndex *uint32 `protobuf:"varint,3,opt,name=def_index,json=defIndex" json:"def_index,omitempty"`
}

func (x *CAdditionalEquipSlot) Reset() {
	*x = CAdditionalEquipSlot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAdditionalEquipSlot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAdditionalEquipSlot) ProtoMessage() {}

func (x *CAdditionalEquipSlot) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAdditionalEquipSlot.ProtoReflect.Descriptor instead.
func (*CAdditionalEquipSlot) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{35}
}

func (x *CAdditionalEquipSlot) GetClassId() uint32 {
	if x != nil && x.ClassId != nil {
		return *x.ClassId
	}
	return 0
}

func (x *CAdditionalEquipSlot) GetSlotId() uint32 {
	if x != nil && x.SlotId != nil {
		return *x.SlotId
	}
	return 0
}

func (x *CAdditionalEquipSlot) GetDefIndex() uint32 {
	if x != nil && x.DefIndex != nil {
		return *x.DefIndex
	}
	return 0
}

type CMsgDOTAProfileCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId              *uint32                     `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	BackgroundDefIndex     *uint32                     `protobuf:"varint,2,opt,name=background_def_index,json=backgroundDefIndex" json:"background_def_index,omitempty"`
	Slots                  []*CMsgDOTAProfileCard_Slot `protobuf:"bytes,3,rep,name=slots" json:"slots,omitempty"`
	BadgePoints            *uint32                     `protobuf:"varint,4,opt,name=badge_points,json=badgePoints" json:"badge_points,omitempty"`
	EventPoints            *uint32                     `protobuf:"varint,5,opt,name=event_points,json=eventPoints" json:"event_points,omitempty"`
	EventId                *uint32                     `protobuf:"varint,6,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	RecentBattleCupVictory *CMsgBattleCupVictory       `protobuf:"bytes,7,opt,name=recent_battle_cup_victory,json=recentBattleCupVictory" json:"recent_battle_cup_victory,omitempty"`
	RankTier               *uint32                     `protobuf:"varint,8,opt,name=rank_tier,json=rankTier" json:"rank_tier,omitempty"`
	LeaderboardRank        *uint32                     `protobuf:"varint,9,opt,name=leaderboard_rank,json=leaderboardRank" json:"leaderboard_rank,omitempty"`
	IsPlusSubscriber       *bool                       `protobuf:"varint,10,opt,name=is_plus_subscriber,json=isPlusSubscriber" json:"is_plus_subscriber,omitempty"`
	PlusOriginalStartDate  *uint32                     `protobuf:"varint,11,opt,name=plus_original_start_date,json=plusOriginalStartDate" json:"plus_original_start_date,omitempty"`
	RankTierScore          *uint32                     `protobuf:"varint,12,opt,name=rank_tier_score,json=rankTierScore" json:"rank_tier_score,omitempty"`
	PreviousRankTier       *uint32                     `protobuf:"varint,13,opt,name=previous_rank_tier,json=previousRankTier" json:"previous_rank_tier,omitempty"`
	RankTierMmrType        *uint32                     `protobuf:"varint,14,opt,name=rank_tier_mmr_type,json=rankTierMmrType" json:"rank_tier_mmr_type,omitempty"`
	LeaderboardRankCore    *uint32                     `protobuf:"varint,17,opt,name=leaderboard_rank_core,json=leaderboardRankCore" json:"leaderboard_rank_core,omitempty"`
	RankTierPeak           *uint32                     `protobuf:"varint,21,opt,name=rank_tier_peak,json=rankTierPeak" json:"rank_tier_peak,omitempty"`
	Title                  *uint32                     `protobuf:"varint,23,opt,name=title" json:"title,omitempty"`
}

func (x *CMsgDOTAProfileCard) Reset() {
	*x = CMsgDOTAProfileCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAProfileCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAProfileCard) ProtoMessage() {}

func (x *CMsgDOTAProfileCard) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAProfileCard.ProtoReflect.Descriptor instead.
func (*CMsgDOTAProfileCard) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{36}
}

func (x *CMsgDOTAProfileCard) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgDOTAProfileCard) GetBackgroundDefIndex() uint32 {
	if x != nil && x.BackgroundDefIndex != nil {
		return *x.BackgroundDefIndex
	}
	return 0
}

func (x *CMsgDOTAProfileCard) GetSlots() []*CMsgDOTAProfileCard_Slot {
	if x != nil {
		return x.Slots
	}
	return nil
}

func (x *CMsgDOTAProfileCard) GetBadgePoints() uint32 {
	if x != nil && x.BadgePoints != nil {
		return *x.BadgePoints
	}
	return 0
}

func (x *CMsgDOTAProfileCard) GetEventPoints() uint32 {
	if x != nil && x.EventPoints != nil {
		return *x.EventPoints
	}
	return 0
}

func (x *CMsgDOTAProfileCard) GetEventId() uint32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

func (x *CMsgDOTAProfileCard) GetRecentBattleCupVictory() *CMsgBattleCupVictory {
	if x != nil {
		return x.RecentBattleCupVictory
	}
	return nil
}

func (x *CMsgDOTAProfileCard) GetRankTier() uint32 {
	if x != nil && x.RankTier != nil {
		return *x.RankTier
	}
	return 0
}

func (x *CMsgDOTAProfileCard) GetLeaderboardRank() uint32 {
	if x != nil && x.LeaderboardRank != nil {
		return *x.LeaderboardRank
	}
	return 0
}

func (x *CMsgDOTAProfileCard) GetIsPlusSubscriber() bool {
	if x != nil && x.IsPlusSubscriber != nil {
		return *x.IsPlusSubscriber
	}
	return false
}

func (x *CMsgDOTAProfileCard) GetPlusOriginalStartDate() uint32 {
	if x != nil && x.PlusOriginalStartDate != nil {
		return *x.PlusOriginalStartDate
	}
	return 0
}

func (x *CMsgDOTAProfileCard) GetRankTierScore() uint32 {
	if x != nil && x.RankTierScore != nil {
		return *x.RankTierScore
	}
	return 0
}

func (x *CMsgDOTAProfileCard) GetPreviousRankTier() uint32 {
	if x != nil && x.PreviousRankTier != nil {
		return *x.PreviousRankTier
	}
	return 0
}

func (x *CMsgDOTAProfileCard) GetRankTierMmrType() uint32 {
	if x != nil && x.RankTierMmrType != nil {
		return *x.RankTierMmrType
	}
	return 0
}

func (x *CMsgDOTAProfileCard) GetLeaderboardRankCore() uint32 {
	if x != nil && x.LeaderboardRankCore != nil {
		return *x.LeaderboardRankCore
	}
	return 0
}

func (x *CMsgDOTAProfileCard) GetRankTierPeak() uint32 {
	if x != nil && x.RankTierPeak != nil {
		return *x.RankTierPeak
	}
	return 0
}

func (x *CMsgDOTAProfileCard) GetTitle() uint32 {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return 0
}

type CSODOTAPlayerChallenge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId     *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	EventId       *uint32 `protobuf:"varint,2,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	SlotId        *uint32 `protobuf:"varint,3,opt,name=slot_id,json=slotId" json:"slot_id,omitempty"`
	IntParam_0    *uint32 `protobuf:"varint,5,opt,name=int_param_0,json=intParam0" json:"int_param_0,omitempty"`
	IntParam_1    *uint32 `protobuf:"varint,6,opt,name=int_param_1,json=intParam1" json:"int_param_1,omitempty"`
	CreatedTime   *uint32 `protobuf:"varint,7,opt,name=created_time,json=createdTime" json:"created_time,omitempty"`
	Completed     *uint32 `protobuf:"varint,8,opt,name=completed" json:"completed,omitempty"`
	SequenceId    *uint32 `protobuf:"varint,9,opt,name=sequence_id,json=sequenceId" json:"sequence_id,omitempty"`
	ChallengeTier *uint32 `protobuf:"varint,10,opt,name=challenge_tier,json=challengeTier" json:"challenge_tier,omitempty"`
	Flags         *uint32 `protobuf:"varint,11,opt,name=flags" json:"flags,omitempty"`
	Attempts      *uint32 `protobuf:"varint,12,opt,name=attempts" json:"attempts,omitempty"`
	CompleteLimit *uint32 `protobuf:"varint,13,opt,name=complete_limit,json=completeLimit" json:"complete_limit,omitempty"`
	QuestRank     *uint32 `protobuf:"varint,14,opt,name=quest_rank,json=questRank" json:"quest_rank,omitempty"`
	MaxQuestRank  *uint32 `protobuf:"varint,15,opt,name=max_quest_rank,json=maxQuestRank" json:"max_quest_rank,omitempty"`
	InstanceId    *uint32 `protobuf:"varint,16,opt,name=instance_id,json=instanceId" json:"instance_id,omitempty"`
	HeroId        *uint32 `protobuf:"varint,17,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	TemplateId    *uint32 `protobuf:"varint,18,opt,name=template_id,json=templateId" json:"template_id,omitempty"`
}

func (x *CSODOTAPlayerChallenge) Reset() {
	*x = CSODOTAPlayerChallenge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSODOTAPlayerChallenge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSODOTAPlayerChallenge) ProtoMessage() {}

func (x *CSODOTAPlayerChallenge) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSODOTAPlayerChallenge.ProtoReflect.Descriptor instead.
func (*CSODOTAPlayerChallenge) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{37}
}

func (x *CSODOTAPlayerChallenge) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CSODOTAPlayerChallenge) GetEventId() uint32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

func (x *CSODOTAPlayerChallenge) GetSlotId() uint32 {
	if x != nil && x.SlotId != nil {
		return *x.SlotId
	}
	return 0
}

func (x *CSODOTAPlayerChallenge) GetIntParam_0() uint32 {
	if x != nil && x.IntParam_0 != nil {
		return *x.IntParam_0
	}
	return 0
}

func (x *CSODOTAPlayerChallenge) GetIntParam_1() uint32 {
	if x != nil && x.IntParam_1 != nil {
		return *x.IntParam_1
	}
	return 0
}

func (x *CSODOTAPlayerChallenge) GetCreatedTime() uint32 {
	if x != nil && x.CreatedTime != nil {
		return *x.CreatedTime
	}
	return 0
}

func (x *CSODOTAPlayerChallenge) GetCompleted() uint32 {
	if x != nil && x.Completed != nil {
		return *x.Completed
	}
	return 0
}

func (x *CSODOTAPlayerChallenge) GetSequenceId() uint32 {
	if x != nil && x.SequenceId != nil {
		return *x.SequenceId
	}
	return 0
}

func (x *CSODOTAPlayerChallenge) GetChallengeTier() uint32 {
	if x != nil && x.ChallengeTier != nil {
		return *x.ChallengeTier
	}
	return 0
}

func (x *CSODOTAPlayerChallenge) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *CSODOTAPlayerChallenge) GetAttempts() uint32 {
	if x != nil && x.Attempts != nil {
		return *x.Attempts
	}
	return 0
}

func (x *CSODOTAPlayerChallenge) GetCompleteLimit() uint32 {
	if x != nil && x.CompleteLimit != nil {
		return *x.CompleteLimit
	}
	return 0
}

func (x *CSODOTAPlayerChallenge) GetQuestRank() uint32 {
	if x != nil && x.QuestRank != nil {
		return *x.QuestRank
	}
	return 0
}

func (x *CSODOTAPlayerChallenge) GetMaxQuestRank() uint32 {
	if x != nil && x.MaxQuestRank != nil {
		return *x.MaxQuestRank
	}
	return 0
}

func (x *CSODOTAPlayerChallenge) GetInstanceId() uint32 {
	if x != nil && x.InstanceId != nil {
		return *x.InstanceId
	}
	return 0
}

func (x *CSODOTAPlayerChallenge) GetHeroId() uint32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CSODOTAPlayerChallenge) GetTemplateId() uint32 {
	if x != nil && x.TemplateId != nil {
		return *x.TemplateId
	}
	return 0
}

type CMsgClientToGCRerollPlayerChallenge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId    *EEvent `protobuf:"varint,1,opt,name=event_id,json=eventId,enum=dota.EEvent,def=0" json:"event_id,omitempty"`
	SequenceId *uint32 `protobuf:"varint,3,opt,name=sequence_id,json=sequenceId" json:"sequence_id,omitempty"`
	HeroId     *uint32 `protobuf:"varint,4,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
}

// Default values for CMsgClientToGCRerollPlayerChallenge fields.
const (
	Default_CMsgClientToGCRerollPlayerChallenge_EventId = EEvent_EVENT_ID_NONE
)

func (x *CMsgClientToGCRerollPlayerChallenge) Reset() {
	*x = CMsgClientToGCRerollPlayerChallenge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCRerollPlayerChallenge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCRerollPlayerChallenge) ProtoMessage() {}

func (x *CMsgClientToGCRerollPlayerChallenge) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCRerollPlayerChallenge.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCRerollPlayerChallenge) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{38}
}

func (x *CMsgClientToGCRerollPlayerChallenge) GetEventId() EEvent {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return Default_CMsgClientToGCRerollPlayerChallenge_EventId
}

func (x *CMsgClientToGCRerollPlayerChallenge) GetSequenceId() uint32 {
	if x != nil && x.SequenceId != nil {
		return *x.SequenceId
	}
	return 0
}

func (x *CMsgClientToGCRerollPlayerChallenge) GetHeroId() uint32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

type CMsgGCRerollPlayerChallengeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *CMsgGCRerollPlayerChallengeResponse_EResult `protobuf:"varint,1,opt,name=result,enum=dota.CMsgGCRerollPlayerChallengeResponse_EResult,def=0" json:"result,omitempty"`
}

// Default values for CMsgGCRerollPlayerChallengeResponse fields.
const (
	Default_CMsgGCRerollPlayerChallengeResponse_Result = CMsgGCRerollPlayerChallengeResponse_eResult_Success
)

func (x *CMsgGCRerollPlayerChallengeResponse) Reset() {
	*x = CMsgGCRerollPlayerChallengeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCRerollPlayerChallengeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCRerollPlayerChallengeResponse) ProtoMessage() {}

func (x *CMsgGCRerollPlayerChallengeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCRerollPlayerChallengeResponse.ProtoReflect.Descriptor instead.
func (*CMsgGCRerollPlayerChallengeResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{39}
}

func (x *CMsgGCRerollPlayerChallengeResponse) GetResult() CMsgGCRerollPlayerChallengeResponse_EResult {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgGCRerollPlayerChallengeResponse_Result
}

type CMsgGCTopCustomGamesList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopCustomGames []uint64 `protobuf:"varint,1,rep,name=top_custom_games,json=topCustomGames" json:"top_custom_games,omitempty"`
	GameOfTheDay   *uint64  `protobuf:"varint,2,opt,name=game_of_the_day,json=gameOfTheDay" json:"game_of_the_day,omitempty"`
}

func (x *CMsgGCTopCustomGamesList) Reset() {
	*x = CMsgGCTopCustomGamesList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCTopCustomGamesList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCTopCustomGamesList) ProtoMessage() {}

func (x *CMsgGCTopCustomGamesList) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCTopCustomGamesList.ProtoReflect.Descriptor instead.
func (*CMsgGCTopCustomGamesList) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{40}
}

func (x *CMsgGCTopCustomGamesList) GetTopCustomGames() []uint64 {
	if x != nil {
		return x.TopCustomGames
	}
	return nil
}

func (x *CMsgGCTopCustomGamesList) GetGameOfTheDay() uint64 {
	if x != nil && x.GameOfTheDay != nil {
		return *x.GameOfTheDay
	}
	return 0
}

type CMsgDOTARealtimeGameStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Match      *CMsgDOTARealtimeGameStats_MatchDetails      `protobuf:"bytes,1,opt,name=match" json:"match,omitempty"`
	Teams      []*CMsgDOTARealtimeGameStats_TeamDetails     `protobuf:"bytes,2,rep,name=teams" json:"teams,omitempty"`
	Buildings  []*CMsgDOTARealtimeGameStats_BuildingDetails `protobuf:"bytes,3,rep,name=buildings" json:"buildings,omitempty"`
	GraphData  *CMsgDOTARealtimeGameStats_GraphData         `protobuf:"bytes,4,opt,name=graph_data,json=graphData" json:"graph_data,omitempty"`
	DeltaFrame *bool                                        `protobuf:"varint,5,opt,name=delta_frame,json=deltaFrame" json:"delta_frame,omitempty"`
}

func (x *CMsgDOTARealtimeGameStats) Reset() {
	*x = CMsgDOTARealtimeGameStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTARealtimeGameStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTARealtimeGameStats) ProtoMessage() {}

func (x *CMsgDOTARealtimeGameStats) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTARealtimeGameStats.ProtoReflect.Descriptor instead.
func (*CMsgDOTARealtimeGameStats) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{41}
}

func (x *CMsgDOTARealtimeGameStats) GetMatch() *CMsgDOTARealtimeGameStats_MatchDetails {
	if x != nil {
		return x.Match
	}
	return nil
}

func (x *CMsgDOTARealtimeGameStats) GetTeams() []*CMsgDOTARealtimeGameStats_TeamDetails {
	if x != nil {
		return x.Teams
	}
	return nil
}

func (x *CMsgDOTARealtimeGameStats) GetBuildings() []*CMsgDOTARealtimeGameStats_BuildingDetails {
	if x != nil {
		return x.Buildings
	}
	return nil
}

func (x *CMsgDOTARealtimeGameStats) GetGraphData() *CMsgDOTARealtimeGameStats_GraphData {
	if x != nil {
		return x.GraphData
	}
	return nil
}

func (x *CMsgDOTARealtimeGameStats) GetDeltaFrame() bool {
	if x != nil && x.DeltaFrame != nil {
		return *x.DeltaFrame
	}
	return false
}

type CMsgDOTARealtimeGameStatsTerse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Match      *CMsgDOTARealtimeGameStatsTerse_MatchDetails      `protobuf:"bytes,1,opt,name=match" json:"match,omitempty"`
	Teams      []*CMsgDOTARealtimeGameStatsTerse_TeamDetails     `protobuf:"bytes,2,rep,name=teams" json:"teams,omitempty"`
	Buildings  []*CMsgDOTARealtimeGameStatsTerse_BuildingDetails `protobuf:"bytes,3,rep,name=buildings" json:"buildings,omitempty"`
	GraphData  *CMsgDOTARealtimeGameStatsTerse_GraphData         `protobuf:"bytes,4,opt,name=graph_data,json=graphData" json:"graph_data,omitempty"`
	DeltaFrame *bool                                             `protobuf:"varint,5,opt,name=delta_frame,json=deltaFrame" json:"delta_frame,omitempty"`
}

func (x *CMsgDOTARealtimeGameStatsTerse) Reset() {
	*x = CMsgDOTARealtimeGameStatsTerse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTARealtimeGameStatsTerse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTARealtimeGameStatsTerse) ProtoMessage() {}

func (x *CMsgDOTARealtimeGameStatsTerse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTARealtimeGameStatsTerse.ProtoReflect.Descriptor instead.
func (*CMsgDOTARealtimeGameStatsTerse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{42}
}

func (x *CMsgDOTARealtimeGameStatsTerse) GetMatch() *CMsgDOTARealtimeGameStatsTerse_MatchDetails {
	if x != nil {
		return x.Match
	}
	return nil
}

func (x *CMsgDOTARealtimeGameStatsTerse) GetTeams() []*CMsgDOTARealtimeGameStatsTerse_TeamDetails {
	if x != nil {
		return x.Teams
	}
	return nil
}

func (x *CMsgDOTARealtimeGameStatsTerse) GetBuildings() []*CMsgDOTARealtimeGameStatsTerse_BuildingDetails {
	if x != nil {
		return x.Buildings
	}
	return nil
}

func (x *CMsgDOTARealtimeGameStatsTerse) GetGraphData() *CMsgDOTARealtimeGameStatsTerse_GraphData {
	if x != nil {
		return x.GraphData
	}
	return nil
}

func (x *CMsgDOTARealtimeGameStatsTerse) GetDeltaFrame() bool {
	if x != nil && x.DeltaFrame != nil {
		return *x.DeltaFrame
	}
	return false
}

type CMsgDOTABroadcastTimelineEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Event      *EBroadcastTimelineEvent `protobuf:"varint,1,opt,name=event,enum=dota.EBroadcastTimelineEvent,def=1" json:"event,omitempty"`
	Timestamp  *uint32                  `protobuf:"fixed32,2,opt,name=timestamp" json:"timestamp,omitempty"`
	Data       *uint32                  `protobuf:"varint,3,opt,name=data" json:"data,omitempty"`
	StringData *string                  `protobuf:"bytes,4,opt,name=string_data,json=stringData" json:"string_data,omitempty"`
}

// Default values for CMsgDOTABroadcastTimelineEvent fields.
const (
	Default_CMsgDOTABroadcastTimelineEvent_Event = EBroadcastTimelineEvent_EBroadcastTimelineEvent_MatchStarted
)

func (x *CMsgDOTABroadcastTimelineEvent) Reset() {
	*x = CMsgDOTABroadcastTimelineEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTABroadcastTimelineEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTABroadcastTimelineEvent) ProtoMessage() {}

func (x *CMsgDOTABroadcastTimelineEvent) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTABroadcastTimelineEvent.ProtoReflect.Descriptor instead.
func (*CMsgDOTABroadcastTimelineEvent) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{43}
}

func (x *CMsgDOTABroadcastTimelineEvent) GetEvent() EBroadcastTimelineEvent {
	if x != nil && x.Event != nil {
		return *x.Event
	}
	return Default_CMsgDOTABroadcastTimelineEvent_Event
}

func (x *CMsgDOTABroadcastTimelineEvent) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *CMsgDOTABroadcastTimelineEvent) GetData() uint32 {
	if x != nil && x.Data != nil {
		return *x.Data
	}
	return 0
}

func (x *CMsgDOTABroadcastTimelineEvent) GetStringData() string {
	if x != nil && x.StringData != nil {
		return *x.StringData
	}
	return ""
}

type CMsgGCToClientMatchGroupsVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchgroupsVersion *uint32 `protobuf:"varint,1,opt,name=matchgroups_version,json=matchgroupsVersion" json:"matchgroups_version,omitempty"`
}

func (x *CMsgGCToClientMatchGroupsVersion) Reset() {
	*x = CMsgGCToClientMatchGroupsVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCToClientMatchGroupsVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientMatchGroupsVersion) ProtoMessage() {}

func (x *CMsgGCToClientMatchGroupsVersion) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientMatchGroupsVersion.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientMatchGroupsVersion) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{44}
}

func (x *CMsgGCToClientMatchGroupsVersion) GetMatchgroupsVersion() uint32 {
	if x != nil && x.MatchgroupsVersion != nil {
		return *x.MatchgroupsVersion
	}
	return 0
}

type CMsgDOTASDOHeroStatsHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId   *uint64 `protobuf:"varint,1,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	GameMode  *uint32 `protobuf:"varint,2,opt,name=game_mode,json=gameMode" json:"game_mode,omitempty"`
	LobbyType *uint32 `protobuf:"varint,3,opt,name=lobby_type,json=lobbyType" json:"lobby_type,omitempty"`
	StartTime *uint32 `protobuf:"varint,4,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	Won       *bool   `protobuf:"varint,5,opt,name=won" json:"won,omitempty"`
	Gpm       *uint32 `protobuf:"varint,6,opt,name=gpm" json:"gpm,omitempty"`
	Xpm       *uint32 `protobuf:"varint,7,opt,name=xpm" json:"xpm,omitempty"`
	Kills     *uint32 `protobuf:"varint,8,opt,name=kills" json:"kills,omitempty"`
	Deaths    *uint32 `protobuf:"varint,9,opt,name=deaths" json:"deaths,omitempty"`
	Assists   *uint32 `protobuf:"varint,10,opt,name=assists" json:"assists,omitempty"`
}

func (x *CMsgDOTASDOHeroStatsHistory) Reset() {
	*x = CMsgDOTASDOHeroStatsHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTASDOHeroStatsHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTASDOHeroStatsHistory) ProtoMessage() {}

func (x *CMsgDOTASDOHeroStatsHistory) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTASDOHeroStatsHistory.ProtoReflect.Descriptor instead.
func (*CMsgDOTASDOHeroStatsHistory) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{45}
}

func (x *CMsgDOTASDOHeroStatsHistory) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgDOTASDOHeroStatsHistory) GetGameMode() uint32 {
	if x != nil && x.GameMode != nil {
		return *x.GameMode
	}
	return 0
}

func (x *CMsgDOTASDOHeroStatsHistory) GetLobbyType() uint32 {
	if x != nil && x.LobbyType != nil {
		return *x.LobbyType
	}
	return 0
}

func (x *CMsgDOTASDOHeroStatsHistory) GetStartTime() uint32 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *CMsgDOTASDOHeroStatsHistory) GetWon() bool {
	if x != nil && x.Won != nil {
		return *x.Won
	}
	return false
}

func (x *CMsgDOTASDOHeroStatsHistory) GetGpm() uint32 {
	if x != nil && x.Gpm != nil {
		return *x.Gpm
	}
	return 0
}

func (x *CMsgDOTASDOHeroStatsHistory) GetXpm() uint32 {
	if x != nil && x.Xpm != nil {
		return *x.Xpm
	}
	return 0
}

func (x *CMsgDOTASDOHeroStatsHistory) GetKills() uint32 {
	if x != nil && x.Kills != nil {
		return *x.Kills
	}
	return 0
}

func (x *CMsgDOTASDOHeroStatsHistory) GetDeaths() uint32 {
	if x != nil && x.Deaths != nil {
		return *x.Deaths
	}
	return 0
}

func (x *CMsgDOTASDOHeroStatsHistory) GetAssists() uint32 {
	if x != nil && x.Assists != nil {
		return *x.Assists
	}
	return 0
}

type CMsgDOTASeasonRewards struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rewards []*CMsgDOTASeasonRewards_Reward `protobuf:"bytes,1,rep,name=rewards" json:"rewards,omitempty"`
}

func (x *CMsgDOTASeasonRewards) Reset() {
	*x = CMsgDOTASeasonRewards{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTASeasonRewards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTASeasonRewards) ProtoMessage() {}

func (x *CMsgDOTASeasonRewards) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTASeasonRewards.ProtoReflect.Descriptor instead.
func (*CMsgDOTASeasonRewards) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{46}
}

func (x *CMsgDOTASeasonRewards) GetRewards() []*CMsgDOTASeasonRewards_Reward {
	if x != nil {
		return x.Rewards
	}
	return nil
}

type CMsgDOTASeasonAchievements struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Achievements []*CMsgDOTASeasonAchievements_Achievement `protobuf:"bytes,1,rep,name=achievements" json:"achievements,omitempty"`
}

func (x *CMsgDOTASeasonAchievements) Reset() {
	*x = CMsgDOTASeasonAchievements{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTASeasonAchievements) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTASeasonAchievements) ProtoMessage() {}

func (x *CMsgDOTASeasonAchievements) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTASeasonAchievements.ProtoReflect.Descriptor instead.
func (*CMsgDOTASeasonAchievements) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{47}
}

func (x *CMsgDOTASeasonAchievements) GetAchievements() []*CMsgDOTASeasonAchievements_Achievement {
	if x != nil {
		return x.Achievements
	}
	return nil
}

type CMsgDOTASeasonPredictions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Predictions                         []*CMsgDOTASeasonPredictions_Prediction       `protobuf:"bytes,1,rep,name=predictions" json:"predictions,omitempty"`
	InGamePredictions                   []*CMsgDOTASeasonPredictions_InGamePrediction `protobuf:"bytes,2,rep,name=in_game_predictions,json=inGamePredictions" json:"in_game_predictions,omitempty"`
	InGamePredictionCountPerGame        *uint32                                       `protobuf:"varint,3,opt,name=in_game_prediction_count_per_game,json=inGamePredictionCountPerGame" json:"in_game_prediction_count_per_game,omitempty"`
	InGamePredictionVotingPeriodMinutes *uint32                                       `protobuf:"varint,4,opt,name=in_game_prediction_voting_period_minutes,json=inGamePredictionVotingPeriodMinutes" json:"in_game_prediction_voting_period_minutes,omitempty"`
}

func (x *CMsgDOTASeasonPredictions) Reset() {
	*x = CMsgDOTASeasonPredictions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTASeasonPredictions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTASeasonPredictions) ProtoMessage() {}

func (x *CMsgDOTASeasonPredictions) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTASeasonPredictions.ProtoReflect.Descriptor instead.
func (*CMsgDOTASeasonPredictions) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{48}
}

func (x *CMsgDOTASeasonPredictions) GetPredictions() []*CMsgDOTASeasonPredictions_Prediction {
	if x != nil {
		return x.Predictions
	}
	return nil
}

func (x *CMsgDOTASeasonPredictions) GetInGamePredictions() []*CMsgDOTASeasonPredictions_InGamePrediction {
	if x != nil {
		return x.InGamePredictions
	}
	return nil
}

func (x *CMsgDOTASeasonPredictions) GetInGamePredictionCountPerGame() uint32 {
	if x != nil && x.InGamePredictionCountPerGame != nil {
		return *x.InGamePredictionCountPerGame
	}
	return 0
}

func (x *CMsgDOTASeasonPredictions) GetInGamePredictionVotingPeriodMinutes() uint32 {
	if x != nil && x.InGamePredictionVotingPeriodMinutes != nil {
		return *x.InGamePredictionVotingPeriodMinutes
	}
	return 0
}

type CMsgDOTAMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Duration            *uint32                             `protobuf:"varint,3,opt,name=duration" json:"duration,omitempty"`
	StartTime           *uint32                             `protobuf:"fixed32,4,opt,name=startTime" json:"startTime,omitempty"`
	Players             []*CMsgDOTAMatch_Player             `protobuf:"bytes,5,rep,name=players" json:"players,omitempty"`
	MatchId             *uint64                             `protobuf:"varint,6,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	TowerStatus         []uint32                            `protobuf:"varint,8,rep,name=tower_status,json=towerStatus" json:"tower_status,omitempty"`
	BarracksStatus      []uint32                            `protobuf:"varint,9,rep,name=barracks_status,json=barracksStatus" json:"barracks_status,omitempty"`
	Cluster             *uint32                             `protobuf:"varint,10,opt,name=cluster" json:"cluster,omitempty"`
	FirstBloodTime      *uint32                             `protobuf:"varint,12,opt,name=first_blood_time,json=firstBloodTime" json:"first_blood_time,omitempty"`
	ReplaySalt          *uint32                             `protobuf:"fixed32,13,opt,name=replay_salt,json=replaySalt" json:"replay_salt,omitempty"`
	ServerIp            *uint32                             `protobuf:"fixed32,14,opt,name=server_ip,json=serverIp" json:"server_ip,omitempty"`
	ServerPort          *uint32                             `protobuf:"varint,15,opt,name=server_port,json=serverPort" json:"server_port,omitempty"`
	LobbyType           *uint32                             `protobuf:"varint,16,opt,name=lobby_type,json=lobbyType" json:"lobby_type,omitempty"`
	HumanPlayers        *uint32                             `protobuf:"varint,17,opt,name=human_players,json=humanPlayers" json:"human_players,omitempty"`
	AverageSkill        *uint32                             `protobuf:"varint,18,opt,name=average_skill,json=averageSkill" json:"average_skill,omitempty"`
	GameBalance         *float32                            `protobuf:"fixed32,19,opt,name=game_balance,json=gameBalance" json:"game_balance,omitempty"`
	RadiantTeamId       *uint32                             `protobuf:"varint,20,opt,name=radiant_team_id,json=radiantTeamId" json:"radiant_team_id,omitempty"`
	DireTeamId          *uint32                             `protobuf:"varint,21,opt,name=dire_team_id,json=direTeamId" json:"dire_team_id,omitempty"`
	Leagueid            *uint32                             `protobuf:"varint,22,opt,name=leagueid" json:"leagueid,omitempty"`
	RadiantTeamName     *string                             `protobuf:"bytes,23,opt,name=radiant_team_name,json=radiantTeamName" json:"radiant_team_name,omitempty"`
	DireTeamName        *string                             `protobuf:"bytes,24,opt,name=dire_team_name,json=direTeamName" json:"dire_team_name,omitempty"`
	RadiantTeamLogo     *uint64                             `protobuf:"varint,25,opt,name=radiant_team_logo,json=radiantTeamLogo" json:"radiant_team_logo,omitempty"`
	DireTeamLogo        *uint64                             `protobuf:"varint,26,opt,name=dire_team_logo,json=direTeamLogo" json:"dire_team_logo,omitempty"`
	RadiantTeamLogoUrl  *string                             `protobuf:"bytes,54,opt,name=radiant_team_logo_url,json=radiantTeamLogoUrl" json:"radiant_team_logo_url,omitempty"`
	DireTeamLogoUrl     *string                             `protobuf:"bytes,55,opt,name=dire_team_logo_url,json=direTeamLogoUrl" json:"dire_team_logo_url,omitempty"`
	RadiantTeamComplete *uint32                             `protobuf:"varint,27,opt,name=radiant_team_complete,json=radiantTeamComplete" json:"radiant_team_complete,omitempty"`
	DireTeamComplete    *uint32                             `protobuf:"varint,28,opt,name=dire_team_complete,json=direTeamComplete" json:"dire_team_complete,omitempty"`
	PositiveVotes       *uint32                             `protobuf:"varint,29,opt,name=positive_votes,json=positiveVotes" json:"positive_votes,omitempty"`
	NegativeVotes       *uint32                             `protobuf:"varint,30,opt,name=negative_votes,json=negativeVotes" json:"negative_votes,omitempty"`
	GameMode            *DOTA_GameMode                      `protobuf:"varint,31,opt,name=game_mode,json=gameMode,enum=dota.DOTA_GameMode,def=0" json:"game_mode,omitempty"`
	PicksBans           []*CMatchHeroSelectEvent            `protobuf:"bytes,32,rep,name=picks_bans,json=picksBans" json:"picks_bans,omitempty"`
	MatchSeqNum         *uint64                             `protobuf:"varint,33,opt,name=match_seq_num,json=matchSeqNum" json:"match_seq_num,omitempty"`
	ReplayState         *CMsgDOTAMatch_ReplayState          `protobuf:"varint,34,opt,name=replay_state,json=replayState,enum=dota.CMsgDOTAMatch_ReplayState,def=0" json:"replay_state,omitempty"`
	RadiantGuildId      *uint32                             `protobuf:"varint,35,opt,name=radiant_guild_id,json=radiantGuildId" json:"radiant_guild_id,omitempty"`
	DireGuildId         *uint32                             `protobuf:"varint,36,opt,name=dire_guild_id,json=direGuildId" json:"dire_guild_id,omitempty"`
	RadiantTeamTag      *string                             `protobuf:"bytes,37,opt,name=radiant_team_tag,json=radiantTeamTag" json:"radiant_team_tag,omitempty"`
	DireTeamTag         *string                             `protobuf:"bytes,38,opt,name=dire_team_tag,json=direTeamTag" json:"dire_team_tag,omitempty"`
	SeriesId            *uint32                             `protobuf:"varint,39,opt,name=series_id,json=seriesId" json:"series_id,omitempty"`
	SeriesType          *uint32                             `protobuf:"varint,40,opt,name=series_type,json=seriesType" json:"series_type,omitempty"`
	BroadcasterChannels []*CMsgDOTAMatch_BroadcasterChannel `protobuf:"bytes,43,rep,name=broadcaster_channels,json=broadcasterChannels" json:"broadcaster_channels,omitempty"`
	Engine              *uint32                             `protobuf:"varint,44,opt,name=engine" json:"engine,omitempty"`
	CustomGameData      *CMsgDOTAMatch_CustomGameData       `protobuf:"bytes,45,opt,name=custom_game_data,json=customGameData" json:"custom_game_data,omitempty"`
	MatchFlags          *uint32                             `protobuf:"varint,46,opt,name=match_flags,json=matchFlags" json:"match_flags,omitempty"`
	PrivateMetadataKey  *uint32                             `protobuf:"fixed32,47,opt,name=private_metadata_key,json=privateMetadataKey" json:"private_metadata_key,omitempty"`
	RadiantTeamScore    *uint32                             `protobuf:"varint,48,opt,name=radiant_team_score,json=radiantTeamScore" json:"radiant_team_score,omitempty"`
	DireTeamScore       *uint32                             `protobuf:"varint,49,opt,name=dire_team_score,json=direTeamScore" json:"dire_team_score,omitempty"`
	MatchOutcome        *EMatchOutcome                      `protobuf:"varint,50,opt,name=match_outcome,json=matchOutcome,enum=dota.EMatchOutcome,def=0" json:"match_outcome,omitempty"`
	TournamentId        *uint32                             `protobuf:"varint,51,opt,name=tournament_id,json=tournamentId" json:"tournament_id,omitempty"`
	TournamentRound     *uint32                             `protobuf:"varint,52,opt,name=tournament_round,json=tournamentRound" json:"tournament_round,omitempty"`
	PreGameDuration     *uint32                             `protobuf:"varint,53,opt,name=pre_game_duration,json=preGameDuration" json:"pre_game_duration,omitempty"`
	MvpAccountId        []uint32                            `protobuf:"varint,56,rep,name=mvp_account_id,json=mvpAccountId" json:"mvp_account_id,omitempty"`
	Coaches             []*CMsgDOTAMatch_Coach              `protobuf:"bytes,57,rep,name=coaches" json:"coaches,omitempty"`
}

// Default values for CMsgDOTAMatch fields.
const (
	Default_CMsgDOTAMatch_GameMode     = DOTA_GameMode_DOTA_GAMEMODE_NONE
	Default_CMsgDOTAMatch_ReplayState  = CMsgDOTAMatch_REPLAY_AVAILABLE
	Default_CMsgDOTAMatch_MatchOutcome = EMatchOutcome_k_EMatchOutcome_Unknown
)

func (x *CMsgDOTAMatch) Reset() {
	*x = CMsgDOTAMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAMatch) ProtoMessage() {}

func (x *CMsgDOTAMatch) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAMatch.ProtoReflect.Descriptor instead.
func (*CMsgDOTAMatch) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{49}
}

func (x *CMsgDOTAMatch) GetDuration() uint32 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

func (x *CMsgDOTAMatch) GetStartTime() uint32 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *CMsgDOTAMatch) GetPlayers() []*CMsgDOTAMatch_Player {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *CMsgDOTAMatch) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgDOTAMatch) GetTowerStatus() []uint32 {
	if x != nil {
		return x.TowerStatus
	}
	return nil
}

func (x *CMsgDOTAMatch) GetBarracksStatus() []uint32 {
	if x != nil {
		return x.BarracksStatus
	}
	return nil
}

func (x *CMsgDOTAMatch) GetCluster() uint32 {
	if x != nil && x.Cluster != nil {
		return *x.Cluster
	}
	return 0
}

func (x *CMsgDOTAMatch) GetFirstBloodTime() uint32 {
	if x != nil && x.FirstBloodTime != nil {
		return *x.FirstBloodTime
	}
	return 0
}

func (x *CMsgDOTAMatch) GetReplaySalt() uint32 {
	if x != nil && x.ReplaySalt != nil {
		return *x.ReplaySalt
	}
	return 0
}

func (x *CMsgDOTAMatch) GetServerIp() uint32 {
	if x != nil && x.ServerIp != nil {
		return *x.ServerIp
	}
	return 0
}

func (x *CMsgDOTAMatch) GetServerPort() uint32 {
	if x != nil && x.ServerPort != nil {
		return *x.ServerPort
	}
	return 0
}

func (x *CMsgDOTAMatch) GetLobbyType() uint32 {
	if x != nil && x.LobbyType != nil {
		return *x.LobbyType
	}
	return 0
}

func (x *CMsgDOTAMatch) GetHumanPlayers() uint32 {
	if x != nil && x.HumanPlayers != nil {
		return *x.HumanPlayers
	}
	return 0
}

func (x *CMsgDOTAMatch) GetAverageSkill() uint32 {
	if x != nil && x.AverageSkill != nil {
		return *x.AverageSkill
	}
	return 0
}

func (x *CMsgDOTAMatch) GetGameBalance() float32 {
	if x != nil && x.GameBalance != nil {
		return *x.GameBalance
	}
	return 0
}

func (x *CMsgDOTAMatch) GetRadiantTeamId() uint32 {
	if x != nil && x.RadiantTeamId != nil {
		return *x.RadiantTeamId
	}
	return 0
}

func (x *CMsgDOTAMatch) GetDireTeamId() uint32 {
	if x != nil && x.DireTeamId != nil {
		return *x.DireTeamId
	}
	return 0
}

func (x *CMsgDOTAMatch) GetLeagueid() uint32 {
	if x != nil && x.Leagueid != nil {
		return *x.Leagueid
	}
	return 0
}

func (x *CMsgDOTAMatch) GetRadiantTeamName() string {
	if x != nil && x.RadiantTeamName != nil {
		return *x.RadiantTeamName
	}
	return ""
}

func (x *CMsgDOTAMatch) GetDireTeamName() string {
	if x != nil && x.DireTeamName != nil {
		return *x.DireTeamName
	}
	return ""
}

func (x *CMsgDOTAMatch) GetRadiantTeamLogo() uint64 {
	if x != nil && x.RadiantTeamLogo != nil {
		return *x.RadiantTeamLogo
	}
	return 0
}

func (x *CMsgDOTAMatch) GetDireTeamLogo() uint64 {
	if x != nil && x.DireTeamLogo != nil {
		return *x.DireTeamLogo
	}
	return 0
}

func (x *CMsgDOTAMatch) GetRadiantTeamLogoUrl() string {
	if x != nil && x.RadiantTeamLogoUrl != nil {
		return *x.RadiantTeamLogoUrl
	}
	return ""
}

func (x *CMsgDOTAMatch) GetDireTeamLogoUrl() string {
	if x != nil && x.DireTeamLogoUrl != nil {
		return *x.DireTeamLogoUrl
	}
	return ""
}

func (x *CMsgDOTAMatch) GetRadiantTeamComplete() uint32 {
	if x != nil && x.RadiantTeamComplete != nil {
		return *x.RadiantTeamComplete
	}
	return 0
}

func (x *CMsgDOTAMatch) GetDireTeamComplete() uint32 {
	if x != nil && x.DireTeamComplete != nil {
		return *x.DireTeamComplete
	}
	return 0
}

func (x *CMsgDOTAMatch) GetPositiveVotes() uint32 {
	if x != nil && x.PositiveVotes != nil {
		return *x.PositiveVotes
	}
	return 0
}

func (x *CMsgDOTAMatch) GetNegativeVotes() uint32 {
	if x != nil && x.NegativeVotes != nil {
		return *x.NegativeVotes
	}
	return 0
}

func (x *CMsgDOTAMatch) GetGameMode() DOTA_GameMode {
	if x != nil && x.GameMode != nil {
		return *x.GameMode
	}
	return Default_CMsgDOTAMatch_GameMode
}

func (x *CMsgDOTAMatch) GetPicksBans() []*CMatchHeroSelectEvent {
	if x != nil {
		return x.PicksBans
	}
	return nil
}

func (x *CMsgDOTAMatch) GetMatchSeqNum() uint64 {
	if x != nil && x.MatchSeqNum != nil {
		return *x.MatchSeqNum
	}
	return 0
}

func (x *CMsgDOTAMatch) GetReplayState() CMsgDOTAMatch_ReplayState {
	if x != nil && x.ReplayState != nil {
		return *x.ReplayState
	}
	return Default_CMsgDOTAMatch_ReplayState
}

func (x *CMsgDOTAMatch) GetRadiantGuildId() uint32 {
	if x != nil && x.RadiantGuildId != nil {
		return *x.RadiantGuildId
	}
	return 0
}

func (x *CMsgDOTAMatch) GetDireGuildId() uint32 {
	if x != nil && x.DireGuildId != nil {
		return *x.DireGuildId
	}
	return 0
}

func (x *CMsgDOTAMatch) GetRadiantTeamTag() string {
	if x != nil && x.RadiantTeamTag != nil {
		return *x.RadiantTeamTag
	}
	return ""
}

func (x *CMsgDOTAMatch) GetDireTeamTag() string {
	if x != nil && x.DireTeamTag != nil {
		return *x.DireTeamTag
	}
	return ""
}

func (x *CMsgDOTAMatch) GetSeriesId() uint32 {
	if x != nil && x.SeriesId != nil {
		return *x.SeriesId
	}
	return 0
}

func (x *CMsgDOTAMatch) GetSeriesType() uint32 {
	if x != nil && x.SeriesType != nil {
		return *x.SeriesType
	}
	return 0
}

func (x *CMsgDOTAMatch) GetBroadcasterChannels() []*CMsgDOTAMatch_BroadcasterChannel {
	if x != nil {
		return x.BroadcasterChannels
	}
	return nil
}

func (x *CMsgDOTAMatch) GetEngine() uint32 {
	if x != nil && x.Engine != nil {
		return *x.Engine
	}
	return 0
}

func (x *CMsgDOTAMatch) GetCustomGameData() *CMsgDOTAMatch_CustomGameData {
	if x != nil {
		return x.CustomGameData
	}
	return nil
}

func (x *CMsgDOTAMatch) GetMatchFlags() uint32 {
	if x != nil && x.MatchFlags != nil {
		return *x.MatchFlags
	}
	return 0
}

func (x *CMsgDOTAMatch) GetPrivateMetadataKey() uint32 {
	if x != nil && x.PrivateMetadataKey != nil {
		return *x.PrivateMetadataKey
	}
	return 0
}

func (x *CMsgDOTAMatch) GetRadiantTeamScore() uint32 {
	if x != nil && x.RadiantTeamScore != nil {
		return *x.RadiantTeamScore
	}
	return 0
}

func (x *CMsgDOTAMatch) GetDireTeamScore() uint32 {
	if x != nil && x.DireTeamScore != nil {
		return *x.DireTeamScore
	}
	return 0
}

func (x *CMsgDOTAMatch) GetMatchOutcome() EMatchOutcome {
	if x != nil && x.MatchOutcome != nil {
		return *x.MatchOutcome
	}
	return Default_CMsgDOTAMatch_MatchOutcome
}

func (x *CMsgDOTAMatch) GetTournamentId() uint32 {
	if x != nil && x.TournamentId != nil {
		return *x.TournamentId
	}
	return 0
}

func (x *CMsgDOTAMatch) GetTournamentRound() uint32 {
	if x != nil && x.TournamentRound != nil {
		return *x.TournamentRound
	}
	return 0
}

func (x *CMsgDOTAMatch) GetPreGameDuration() uint32 {
	if x != nil && x.PreGameDuration != nil {
		return *x.PreGameDuration
	}
	return 0
}

func (x *CMsgDOTAMatch) GetMvpAccountId() []uint32 {
	if x != nil {
		return x.MvpAccountId
	}
	return nil
}

func (x *CMsgDOTAMatch) GetCoaches() []*CMsgDOTAMatch_Coach {
	if x != nil {
		return x.Coaches
	}
	return nil
}

type CMsgPlayerCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId    *uint32                        `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	StatModifier []*CMsgPlayerCard_StatModifier `protobuf:"bytes,2,rep,name=stat_modifier,json=statModifier" json:"stat_modifier,omitempty"`
}

func (x *CMsgPlayerCard) Reset() {
	*x = CMsgPlayerCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPlayerCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPlayerCard) ProtoMessage() {}

func (x *CMsgPlayerCard) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPlayerCard.ProtoReflect.Descriptor instead.
func (*CMsgPlayerCard) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{50}
}

func (x *CMsgPlayerCard) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgPlayerCard) GetStatModifier() []*CMsgPlayerCard_StatModifier {
	if x != nil {
		return x.StatModifier
	}
	return nil
}

type CMsgDOTAFantasyPlayerStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerAccountId        *uint32  `protobuf:"varint,1,opt,name=player_account_id,json=playerAccountId" json:"player_account_id,omitempty"`
	MatchId                *uint64  `protobuf:"varint,2,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	MatchCompleted         *bool    `protobuf:"varint,3,opt,name=match_completed,json=matchCompleted" json:"match_completed,omitempty"`
	TeamId                 *uint32  `protobuf:"varint,4,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	LeagueId               *uint32  `protobuf:"varint,5,opt,name=league_id,json=leagueId" json:"league_id,omitempty"`
	Delay                  *uint32  `protobuf:"varint,6,opt,name=delay" json:"delay,omitempty"`
	SeriesId               *uint32  `protobuf:"varint,7,opt,name=series_id,json=seriesId" json:"series_id,omitempty"`
	SeriesType             *uint32  `protobuf:"varint,8,opt,name=series_type,json=seriesType" json:"series_type,omitempty"`
	Kills                  *uint32  `protobuf:"varint,10,opt,name=kills" json:"kills,omitempty"`
	Deaths                 *uint32  `protobuf:"varint,11,opt,name=deaths" json:"deaths,omitempty"`
	Cs                     *uint32  `protobuf:"varint,12,opt,name=cs" json:"cs,omitempty"`
	Gpm                    *float32 `protobuf:"fixed32,13,opt,name=gpm" json:"gpm,omitempty"`
	TowerKills             *uint32  `protobuf:"varint,14,opt,name=tower_kills,json=towerKills" json:"tower_kills,omitempty"`
	RoshanKills            *uint32  `protobuf:"varint,15,opt,name=roshan_kills,json=roshanKills" json:"roshan_kills,omitempty"`
	TeamfightParticipation *float32 `protobuf:"fixed32,16,opt,name=teamfight_participation,json=teamfightParticipation" json:"teamfight_participation,omitempty"`
	WardsPlaced            *uint32  `protobuf:"varint,17,opt,name=wards_placed,json=wardsPlaced" json:"wards_placed,omitempty"`
	CampsStacked           *uint32  `protobuf:"varint,18,opt,name=camps_stacked,json=campsStacked" json:"camps_stacked,omitempty"`
	RunesGrabbed           *uint32  `protobuf:"varint,19,opt,name=runes_grabbed,json=runesGrabbed" json:"runes_grabbed,omitempty"`
	FirstBlood             *uint32  `protobuf:"varint,20,opt,name=first_blood,json=firstBlood" json:"first_blood,omitempty"`
	Stuns                  *float32 `protobuf:"fixed32,21,opt,name=stuns" json:"stuns,omitempty"`
}

func (x *CMsgDOTAFantasyPlayerStats) Reset() {
	*x = CMsgDOTAFantasyPlayerStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAFantasyPlayerStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAFantasyPlayerStats) ProtoMessage() {}

func (x *CMsgDOTAFantasyPlayerStats) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAFantasyPlayerStats.ProtoReflect.Descriptor instead.
func (*CMsgDOTAFantasyPlayerStats) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{51}
}

func (x *CMsgDOTAFantasyPlayerStats) GetPlayerAccountId() uint32 {
	if x != nil && x.PlayerAccountId != nil {
		return *x.PlayerAccountId
	}
	return 0
}

func (x *CMsgDOTAFantasyPlayerStats) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgDOTAFantasyPlayerStats) GetMatchCompleted() bool {
	if x != nil && x.MatchCompleted != nil {
		return *x.MatchCompleted
	}
	return false
}

func (x *CMsgDOTAFantasyPlayerStats) GetTeamId() uint32 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

func (x *CMsgDOTAFantasyPlayerStats) GetLeagueId() uint32 {
	if x != nil && x.LeagueId != nil {
		return *x.LeagueId
	}
	return 0
}

func (x *CMsgDOTAFantasyPlayerStats) GetDelay() uint32 {
	if x != nil && x.Delay != nil {
		return *x.Delay
	}
	return 0
}

func (x *CMsgDOTAFantasyPlayerStats) GetSeriesId() uint32 {
	if x != nil && x.SeriesId != nil {
		return *x.SeriesId
	}
	return 0
}

func (x *CMsgDOTAFantasyPlayerStats) GetSeriesType() uint32 {
	if x != nil && x.SeriesType != nil {
		return *x.SeriesType
	}
	return 0
}

func (x *CMsgDOTAFantasyPlayerStats) GetKills() uint32 {
	if x != nil && x.Kills != nil {
		return *x.Kills
	}
	return 0
}

func (x *CMsgDOTAFantasyPlayerStats) GetDeaths() uint32 {
	if x != nil && x.Deaths != nil {
		return *x.Deaths
	}
	return 0
}

func (x *CMsgDOTAFantasyPlayerStats) GetCs() uint32 {
	if x != nil && x.Cs != nil {
		return *x.Cs
	}
	return 0
}

func (x *CMsgDOTAFantasyPlayerStats) GetGpm() float32 {
	if x != nil && x.Gpm != nil {
		return *x.Gpm
	}
	return 0
}

func (x *CMsgDOTAFantasyPlayerStats) GetTowerKills() uint32 {
	if x != nil && x.TowerKills != nil {
		return *x.TowerKills
	}
	return 0
}

func (x *CMsgDOTAFantasyPlayerStats) GetRoshanKills() uint32 {
	if x != nil && x.RoshanKills != nil {
		return *x.RoshanKills
	}
	return 0
}

func (x *CMsgDOTAFantasyPlayerStats) GetTeamfightParticipation() float32 {
	if x != nil && x.TeamfightParticipation != nil {
		return *x.TeamfightParticipation
	}
	return 0
}

func (x *CMsgDOTAFantasyPlayerStats) GetWardsPlaced() uint32 {
	if x != nil && x.WardsPlaced != nil {
		return *x.WardsPlaced
	}
	return 0
}

func (x *CMsgDOTAFantasyPlayerStats) GetCampsStacked() uint32 {
	if x != nil && x.CampsStacked != nil {
		return *x.CampsStacked
	}
	return 0
}

func (x *CMsgDOTAFantasyPlayerStats) GetRunesGrabbed() uint32 {
	if x != nil && x.RunesGrabbed != nil {
		return *x.RunesGrabbed
	}
	return 0
}

func (x *CMsgDOTAFantasyPlayerStats) GetFirstBlood() uint32 {
	if x != nil && x.FirstBlood != nil {
		return *x.FirstBlood
	}
	return 0
}

func (x *CMsgDOTAFantasyPlayerStats) GetStuns() float32 {
	if x != nil && x.Stuns != nil {
		return *x.Stuns
	}
	return 0
}

type CMsgDOTAFantasyPlayerMatchStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Matches []*CMsgDOTAFantasyPlayerStats `protobuf:"bytes,1,rep,name=matches" json:"matches,omitempty"`
}

func (x *CMsgDOTAFantasyPlayerMatchStats) Reset() {
	*x = CMsgDOTAFantasyPlayerMatchStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAFantasyPlayerMatchStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAFantasyPlayerMatchStats) ProtoMessage() {}

func (x *CMsgDOTAFantasyPlayerMatchStats) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAFantasyPlayerMatchStats.ProtoReflect.Descriptor instead.
func (*CMsgDOTAFantasyPlayerMatchStats) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{52}
}

func (x *CMsgDOTAFantasyPlayerMatchStats) GetMatches() []*CMsgDOTAFantasyPlayerStats {
	if x != nil {
		return x.Matches
	}
	return nil
}

type CMsgDOTABotDebugInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bots                []*CMsgDOTABotDebugInfo_Bot `protobuf:"bytes,1,rep,name=bots" json:"bots,omitempty"`
	DesirePushLaneTop   *float32                    `protobuf:"fixed32,2,opt,name=desire_push_lane_top,json=desirePushLaneTop" json:"desire_push_lane_top,omitempty"`
	DesirePushLaneMid   *float32                    `protobuf:"fixed32,3,opt,name=desire_push_lane_mid,json=desirePushLaneMid" json:"desire_push_lane_mid,omitempty"`
	DesirePushLaneBot   *float32                    `protobuf:"fixed32,4,opt,name=desire_push_lane_bot,json=desirePushLaneBot" json:"desire_push_lane_bot,omitempty"`
	DesireDefendLaneTop *float32                    `protobuf:"fixed32,5,opt,name=desire_defend_lane_top,json=desireDefendLaneTop" json:"desire_defend_lane_top,omitempty"`
	DesireDefendLaneMid *float32                    `protobuf:"fixed32,6,opt,name=desire_defend_lane_mid,json=desireDefendLaneMid" json:"desire_defend_lane_mid,omitempty"`
	DesireDefendLaneBot *float32                    `protobuf:"fixed32,7,opt,name=desire_defend_lane_bot,json=desireDefendLaneBot" json:"desire_defend_lane_bot,omitempty"`
	DesireFarmLaneTop   *float32                    `protobuf:"fixed32,8,opt,name=desire_farm_lane_top,json=desireFarmLaneTop" json:"desire_farm_lane_top,omitempty"`
	DesireFarmLaneMid   *float32                    `protobuf:"fixed32,9,opt,name=desire_farm_lane_mid,json=desireFarmLaneMid" json:"desire_farm_lane_mid,omitempty"`
	DesireFarmLaneBot   *float32                    `protobuf:"fixed32,10,opt,name=desire_farm_lane_bot,json=desireFarmLaneBot" json:"desire_farm_lane_bot,omitempty"`
	DesireFarmRoshan    *float32                    `protobuf:"fixed32,11,opt,name=desire_farm_roshan,json=desireFarmRoshan" json:"desire_farm_roshan,omitempty"`
	ExecutionTime       *float32                    `protobuf:"fixed32,12,opt,name=execution_time,json=executionTime" json:"execution_time,omitempty"`
	RuneStatus          []uint32                    `protobuf:"varint,13,rep,name=rune_status,json=runeStatus" json:"rune_status,omitempty"`
}

func (x *CMsgDOTABotDebugInfo) Reset() {
	*x = CMsgDOTABotDebugInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTABotDebugInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTABotDebugInfo) ProtoMessage() {}

func (x *CMsgDOTABotDebugInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTABotDebugInfo.ProtoReflect.Descriptor instead.
func (*CMsgDOTABotDebugInfo) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{53}
}

func (x *CMsgDOTABotDebugInfo) GetBots() []*CMsgDOTABotDebugInfo_Bot {
	if x != nil {
		return x.Bots
	}
	return nil
}

func (x *CMsgDOTABotDebugInfo) GetDesirePushLaneTop() float32 {
	if x != nil && x.DesirePushLaneTop != nil {
		return *x.DesirePushLaneTop
	}
	return 0
}

func (x *CMsgDOTABotDebugInfo) GetDesirePushLaneMid() float32 {
	if x != nil && x.DesirePushLaneMid != nil {
		return *x.DesirePushLaneMid
	}
	return 0
}

func (x *CMsgDOTABotDebugInfo) GetDesirePushLaneBot() float32 {
	if x != nil && x.DesirePushLaneBot != nil {
		return *x.DesirePushLaneBot
	}
	return 0
}

func (x *CMsgDOTABotDebugInfo) GetDesireDefendLaneTop() float32 {
	if x != nil && x.DesireDefendLaneTop != nil {
		return *x.DesireDefendLaneTop
	}
	return 0
}

func (x *CMsgDOTABotDebugInfo) GetDesireDefendLaneMid() float32 {
	if x != nil && x.DesireDefendLaneMid != nil {
		return *x.DesireDefendLaneMid
	}
	return 0
}

func (x *CMsgDOTABotDebugInfo) GetDesireDefendLaneBot() float32 {
	if x != nil && x.DesireDefendLaneBot != nil {
		return *x.DesireDefendLaneBot
	}
	return 0
}

func (x *CMsgDOTABotDebugInfo) GetDesireFarmLaneTop() float32 {
	if x != nil && x.DesireFarmLaneTop != nil {
		return *x.DesireFarmLaneTop
	}
	return 0
}

func (x *CMsgDOTABotDebugInfo) GetDesireFarmLaneMid() float32 {
	if x != nil && x.DesireFarmLaneMid != nil {
		return *x.DesireFarmLaneMid
	}
	return 0
}

func (x *CMsgDOTABotDebugInfo) GetDesireFarmLaneBot() float32 {
	if x != nil && x.DesireFarmLaneBot != nil {
		return *x.DesireFarmLaneBot
	}
	return 0
}

func (x *CMsgDOTABotDebugInfo) GetDesireFarmRoshan() float32 {
	if x != nil && x.DesireFarmRoshan != nil {
		return *x.DesireFarmRoshan
	}
	return 0
}

func (x *CMsgDOTABotDebugInfo) GetExecutionTime() float32 {
	if x != nil && x.ExecutionTime != nil {
		return *x.ExecutionTime
	}
	return 0
}

func (x *CMsgDOTABotDebugInfo) GetRuneStatus() []uint32 {
	if x != nil {
		return x.RuneStatus
	}
	return nil
}

type CMsgSuccessfulHero struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeroId        *uint32  `protobuf:"varint,1,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	WinPercent    *float32 `protobuf:"fixed32,2,opt,name=win_percent,json=winPercent" json:"win_percent,omitempty"`
	LongestStreak *uint32  `protobuf:"varint,3,opt,name=longest_streak,json=longestStreak" json:"longest_streak,omitempty"`
}

func (x *CMsgSuccessfulHero) Reset() {
	*x = CMsgSuccessfulHero{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSuccessfulHero) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSuccessfulHero) ProtoMessage() {}

func (x *CMsgSuccessfulHero) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSuccessfulHero.ProtoReflect.Descriptor instead.
func (*CMsgSuccessfulHero) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{54}
}

func (x *CMsgSuccessfulHero) GetHeroId() uint32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CMsgSuccessfulHero) GetWinPercent() float32 {
	if x != nil && x.WinPercent != nil {
		return *x.WinPercent
	}
	return 0
}

func (x *CMsgSuccessfulHero) GetLongestStreak() uint32 {
	if x != nil && x.LongestStreak != nil {
		return *x.LongestStreak
	}
	return 0
}

type CMsgRecentMatchInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId      *uint64        `protobuf:"varint,1,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	GameMode     *DOTA_GameMode `protobuf:"varint,2,opt,name=game_mode,json=gameMode,enum=dota.DOTA_GameMode,def=0" json:"game_mode,omitempty"`
	Kills        *uint32        `protobuf:"varint,3,opt,name=kills" json:"kills,omitempty"`
	Deaths       *uint32        `protobuf:"varint,4,opt,name=deaths" json:"deaths,omitempty"`
	Assists      *uint32        `protobuf:"varint,5,opt,name=assists" json:"assists,omitempty"`
	Duration     *uint32        `protobuf:"varint,6,opt,name=duration" json:"duration,omitempty"`
	PlayerSlot   *uint32        `protobuf:"varint,7,opt,name=player_slot,json=playerSlot" json:"player_slot,omitempty"`
	MatchOutcome *EMatchOutcome `protobuf:"varint,8,opt,name=match_outcome,json=matchOutcome,enum=dota.EMatchOutcome,def=0" json:"match_outcome,omitempty"`
	Timestamp    *uint32        `protobuf:"varint,9,opt,name=timestamp" json:"timestamp,omitempty"`
}

// Default values for CMsgRecentMatchInfo fields.
const (
	Default_CMsgRecentMatchInfo_GameMode     = DOTA_GameMode_DOTA_GAMEMODE_NONE
	Default_CMsgRecentMatchInfo_MatchOutcome = EMatchOutcome_k_EMatchOutcome_Unknown
)

func (x *CMsgRecentMatchInfo) Reset() {
	*x = CMsgRecentMatchInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgRecentMatchInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgRecentMatchInfo) ProtoMessage() {}

func (x *CMsgRecentMatchInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgRecentMatchInfo.ProtoReflect.Descriptor instead.
func (*CMsgRecentMatchInfo) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{55}
}

func (x *CMsgRecentMatchInfo) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgRecentMatchInfo) GetGameMode() DOTA_GameMode {
	if x != nil && x.GameMode != nil {
		return *x.GameMode
	}
	return Default_CMsgRecentMatchInfo_GameMode
}

func (x *CMsgRecentMatchInfo) GetKills() uint32 {
	if x != nil && x.Kills != nil {
		return *x.Kills
	}
	return 0
}

func (x *CMsgRecentMatchInfo) GetDeaths() uint32 {
	if x != nil && x.Deaths != nil {
		return *x.Deaths
	}
	return 0
}

func (x *CMsgRecentMatchInfo) GetAssists() uint32 {
	if x != nil && x.Assists != nil {
		return *x.Assists
	}
	return 0
}

func (x *CMsgRecentMatchInfo) GetDuration() uint32 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

func (x *CMsgRecentMatchInfo) GetPlayerSlot() uint32 {
	if x != nil && x.PlayerSlot != nil {
		return *x.PlayerSlot
	}
	return 0
}

func (x *CMsgRecentMatchInfo) GetMatchOutcome() EMatchOutcome {
	if x != nil && x.MatchOutcome != nil {
		return *x.MatchOutcome
	}
	return Default_CMsgRecentMatchInfo_MatchOutcome
}

func (x *CMsgRecentMatchInfo) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

type CMsgMatchTips struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tips []*CMsgMatchTips_SingleTip `protobuf:"bytes,2,rep,name=tips" json:"tips,omitempty"`
}

func (x *CMsgMatchTips) Reset() {
	*x = CMsgMatchTips{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgMatchTips) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgMatchTips) ProtoMessage() {}

func (x *CMsgMatchTips) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgMatchTips.ProtoReflect.Descriptor instead.
func (*CMsgMatchTips) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{56}
}

func (x *CMsgMatchTips) GetTips() []*CMsgMatchTips_SingleTip {
	if x != nil {
		return x.Tips
	}
	return nil
}

type CMsgDOTAMatchMinimal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId      *uint64                        `protobuf:"varint,1,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	StartTime    *uint32                        `protobuf:"fixed32,2,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	Duration     *uint32                        `protobuf:"varint,3,opt,name=duration" json:"duration,omitempty"`
	GameMode     *DOTA_GameMode                 `protobuf:"varint,4,opt,name=game_mode,json=gameMode,enum=dota.DOTA_GameMode,def=0" json:"game_mode,omitempty"`
	Players      []*CMsgDOTAMatchMinimal_Player `protobuf:"bytes,6,rep,name=players" json:"players,omitempty"`
	Tourney      *CMsgDOTAMatchMinimal_Tourney  `protobuf:"bytes,7,opt,name=tourney" json:"tourney,omitempty"`
	MatchOutcome *EMatchOutcome                 `protobuf:"varint,8,opt,name=match_outcome,json=matchOutcome,enum=dota.EMatchOutcome,def=0" json:"match_outcome,omitempty"`
	RadiantScore *uint32                        `protobuf:"varint,9,opt,name=radiant_score,json=radiantScore" json:"radiant_score,omitempty"`
	DireScore    *uint32                        `protobuf:"varint,10,opt,name=dire_score,json=direScore" json:"dire_score,omitempty"`
}

// Default values for CMsgDOTAMatchMinimal fields.
const (
	Default_CMsgDOTAMatchMinimal_GameMode     = DOTA_GameMode_DOTA_GAMEMODE_NONE
	Default_CMsgDOTAMatchMinimal_MatchOutcome = EMatchOutcome_k_EMatchOutcome_Unknown
)

func (x *CMsgDOTAMatchMinimal) Reset() {
	*x = CMsgDOTAMatchMinimal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAMatchMinimal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAMatchMinimal) ProtoMessage() {}

func (x *CMsgDOTAMatchMinimal) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAMatchMinimal.ProtoReflect.Descriptor instead.
func (*CMsgDOTAMatchMinimal) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{57}
}

func (x *CMsgDOTAMatchMinimal) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgDOTAMatchMinimal) GetStartTime() uint32 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *CMsgDOTAMatchMinimal) GetDuration() uint32 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

func (x *CMsgDOTAMatchMinimal) GetGameMode() DOTA_GameMode {
	if x != nil && x.GameMode != nil {
		return *x.GameMode
	}
	return Default_CMsgDOTAMatchMinimal_GameMode
}

func (x *CMsgDOTAMatchMinimal) GetPlayers() []*CMsgDOTAMatchMinimal_Player {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *CMsgDOTAMatchMinimal) GetTourney() *CMsgDOTAMatchMinimal_Tourney {
	if x != nil {
		return x.Tourney
	}
	return nil
}

func (x *CMsgDOTAMatchMinimal) GetMatchOutcome() EMatchOutcome {
	if x != nil && x.MatchOutcome != nil {
		return *x.MatchOutcome
	}
	return Default_CMsgDOTAMatchMinimal_MatchOutcome
}

func (x *CMsgDOTAMatchMinimal) GetRadiantScore() uint32 {
	if x != nil && x.RadiantScore != nil {
		return *x.RadiantScore
	}
	return 0
}

func (x *CMsgDOTAMatchMinimal) GetDireScore() uint32 {
	if x != nil && x.DireScore != nil {
		return *x.DireScore
	}
	return 0
}

type CMsgConsumableUsage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemDef        *uint32 `protobuf:"varint,1,opt,name=item_def,json=itemDef" json:"item_def,omitempty"`
	QuantityChange *int32  `protobuf:"varint,2,opt,name=quantity_change,json=quantityChange" json:"quantity_change,omitempty"`
}

func (x *CMsgConsumableUsage) Reset() {
	*x = CMsgConsumableUsage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgConsumableUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgConsumableUsage) ProtoMessage() {}

func (x *CMsgConsumableUsage) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgConsumableUsage.ProtoReflect.Descriptor instead.
func (*CMsgConsumableUsage) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{58}
}

func (x *CMsgConsumableUsage) GetItemDef() uint32 {
	if x != nil && x.ItemDef != nil {
		return *x.ItemDef
	}
	return 0
}

func (x *CMsgConsumableUsage) GetQuantityChange() int32 {
	if x != nil && x.QuantityChange != nil {
		return *x.QuantityChange
	}
	return 0
}

type CMsgMatchConsumableUsage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerConsumablesUsed []*CMsgMatchConsumableUsage_PlayerUsage `protobuf:"bytes,1,rep,name=player_consumables_used,json=playerConsumablesUsed" json:"player_consumables_used,omitempty"`
}

func (x *CMsgMatchConsumableUsage) Reset() {
	*x = CMsgMatchConsumableUsage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgMatchConsumableUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgMatchConsumableUsage) ProtoMessage() {}

func (x *CMsgMatchConsumableUsage) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgMatchConsumableUsage.ProtoReflect.Descriptor instead.
func (*CMsgMatchConsumableUsage) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{59}
}

func (x *CMsgMatchConsumableUsage) GetPlayerConsumablesUsed() []*CMsgMatchConsumableUsage_PlayerUsage {
	if x != nil {
		return x.PlayerConsumablesUsed
	}
	return nil
}

type CMsgMatchEventActionGrants struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerGrants []*CMsgMatchEventActionGrants_PlayerGrants `protobuf:"bytes,1,rep,name=player_grants,json=playerGrants" json:"player_grants,omitempty"`
}

func (x *CMsgMatchEventActionGrants) Reset() {
	*x = CMsgMatchEventActionGrants{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgMatchEventActionGrants) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgMatchEventActionGrants) ProtoMessage() {}

func (x *CMsgMatchEventActionGrants) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgMatchEventActionGrants.ProtoReflect.Descriptor instead.
func (*CMsgMatchEventActionGrants) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{60}
}

func (x *CMsgMatchEventActionGrants) GetPlayerGrants() []*CMsgMatchEventActionGrants_PlayerGrants {
	if x != nil {
		return x.PlayerGrants
	}
	return nil
}

type CMsgCustomGameWhitelist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version              *uint32  `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	CustomGamesWhitelist []uint64 `protobuf:"varint,2,rep,name=custom_games_whitelist,json=customGamesWhitelist" json:"custom_games_whitelist,omitempty"`
	DisableWhitelist     *bool    `protobuf:"varint,3,opt,name=disable_whitelist,json=disableWhitelist" json:"disable_whitelist,omitempty"`
}

func (x *CMsgCustomGameWhitelist) Reset() {
	*x = CMsgCustomGameWhitelist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgCustomGameWhitelist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgCustomGameWhitelist) ProtoMessage() {}

func (x *CMsgCustomGameWhitelist) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgCustomGameWhitelist.ProtoReflect.Descriptor instead.
func (*CMsgCustomGameWhitelist) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{61}
}

func (x *CMsgCustomGameWhitelist) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *CMsgCustomGameWhitelist) GetCustomGamesWhitelist() []uint64 {
	if x != nil {
		return x.CustomGamesWhitelist
	}
	return nil
}

func (x *CMsgCustomGameWhitelist) GetDisableWhitelist() bool {
	if x != nil && x.DisableWhitelist != nil {
		return *x.DisableWhitelist
	}
	return false
}

type CMsgCustomGameWhitelistForEdit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WhitelistEntries []*CMsgCustomGameWhitelistForEdit_WhitelistEntry `protobuf:"bytes,1,rep,name=whitelist_entries,json=whitelistEntries" json:"whitelist_entries,omitempty"`
}

func (x *CMsgCustomGameWhitelistForEdit) Reset() {
	*x = CMsgCustomGameWhitelistForEdit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgCustomGameWhitelistForEdit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgCustomGameWhitelistForEdit) ProtoMessage() {}

func (x *CMsgCustomGameWhitelistForEdit) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgCustomGameWhitelistForEdit.ProtoReflect.Descriptor instead.
func (*CMsgCustomGameWhitelistForEdit) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{62}
}

func (x *CMsgCustomGameWhitelistForEdit) GetWhitelistEntries() []*CMsgCustomGameWhitelistForEdit_WhitelistEntry {
	if x != nil {
		return x.WhitelistEntries
	}
	return nil
}

type CMsgPlayerRecentMatchInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId   *uint64 `protobuf:"varint,1,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	Timestamp *uint32 `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	Duration  *uint32 `protobuf:"varint,3,opt,name=duration" json:"duration,omitempty"`
	Win       *bool   `protobuf:"varint,4,opt,name=win" json:"win,omitempty"`
	HeroId    *uint32 `protobuf:"varint,5,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	Kills     *uint32 `protobuf:"varint,6,opt,name=kills" json:"kills,omitempty"`
	Deaths    *uint32 `protobuf:"varint,7,opt,name=deaths" json:"deaths,omitempty"`
	Assists   *uint32 `protobuf:"varint,8,opt,name=assists" json:"assists,omitempty"`
}

func (x *CMsgPlayerRecentMatchInfo) Reset() {
	*x = CMsgPlayerRecentMatchInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPlayerRecentMatchInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPlayerRecentMatchInfo) ProtoMessage() {}

func (x *CMsgPlayerRecentMatchInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPlayerRecentMatchInfo.ProtoReflect.Descriptor instead.
func (*CMsgPlayerRecentMatchInfo) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{63}
}

func (x *CMsgPlayerRecentMatchInfo) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgPlayerRecentMatchInfo) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *CMsgPlayerRecentMatchInfo) GetDuration() uint32 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

func (x *CMsgPlayerRecentMatchInfo) GetWin() bool {
	if x != nil && x.Win != nil {
		return *x.Win
	}
	return false
}

func (x *CMsgPlayerRecentMatchInfo) GetHeroId() uint32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CMsgPlayerRecentMatchInfo) GetKills() uint32 {
	if x != nil && x.Kills != nil {
		return *x.Kills
	}
	return 0
}

func (x *CMsgPlayerRecentMatchInfo) GetDeaths() uint32 {
	if x != nil && x.Deaths != nil {
		return *x.Deaths
	}
	return 0
}

func (x *CMsgPlayerRecentMatchInfo) GetAssists() uint32 {
	if x != nil && x.Assists != nil {
		return *x.Assists
	}
	return 0
}

type CMsgPlayerMatchRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Wins   *uint32 `protobuf:"varint,1,opt,name=wins" json:"wins,omitempty"`
	Losses *uint32 `protobuf:"varint,2,opt,name=losses" json:"losses,omitempty"`
}

func (x *CMsgPlayerMatchRecord) Reset() {
	*x = CMsgPlayerMatchRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPlayerMatchRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPlayerMatchRecord) ProtoMessage() {}

func (x *CMsgPlayerMatchRecord) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPlayerMatchRecord.ProtoReflect.Descriptor instead.
func (*CMsgPlayerMatchRecord) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{64}
}

func (x *CMsgPlayerMatchRecord) GetWins() uint32 {
	if x != nil && x.Wins != nil {
		return *x.Wins
	}
	return 0
}

func (x *CMsgPlayerMatchRecord) GetLosses() uint32 {
	if x != nil && x.Losses != nil {
		return *x.Losses
	}
	return 0
}

type CMsgPlayerRecentMatchOutcomes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Outcomes   *uint32 `protobuf:"varint,1,opt,name=outcomes" json:"outcomes,omitempty"`
	MatchCount *uint32 `protobuf:"varint,2,opt,name=match_count,json=matchCount" json:"match_count,omitempty"`
}

func (x *CMsgPlayerRecentMatchOutcomes) Reset() {
	*x = CMsgPlayerRecentMatchOutcomes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPlayerRecentMatchOutcomes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPlayerRecentMatchOutcomes) ProtoMessage() {}

func (x *CMsgPlayerRecentMatchOutcomes) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPlayerRecentMatchOutcomes.ProtoReflect.Descriptor instead.
func (*CMsgPlayerRecentMatchOutcomes) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{65}
}

func (x *CMsgPlayerRecentMatchOutcomes) GetOutcomes() uint32 {
	if x != nil && x.Outcomes != nil {
		return *x.Outcomes
	}
	return 0
}

func (x *CMsgPlayerRecentMatchOutcomes) GetMatchCount() uint32 {
	if x != nil && x.MatchCount != nil {
		return *x.MatchCount
	}
	return 0
}

type CMsgPlayerRecentCommends struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commends   *uint32 `protobuf:"varint,1,opt,name=commends" json:"commends,omitempty"`
	MatchCount *uint32 `protobuf:"varint,2,opt,name=match_count,json=matchCount" json:"match_count,omitempty"`
}

func (x *CMsgPlayerRecentCommends) Reset() {
	*x = CMsgPlayerRecentCommends{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPlayerRecentCommends) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPlayerRecentCommends) ProtoMessage() {}

func (x *CMsgPlayerRecentCommends) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPlayerRecentCommends.ProtoReflect.Descriptor instead.
func (*CMsgPlayerRecentCommends) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{66}
}

func (x *CMsgPlayerRecentCommends) GetCommends() uint32 {
	if x != nil && x.Commends != nil {
		return *x.Commends
	}
	return 0
}

func (x *CMsgPlayerRecentCommends) GetMatchCount() uint32 {
	if x != nil && x.MatchCount != nil {
		return *x.MatchCount
	}
	return 0
}

type CMsgPlayerRecentAccomplishments struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecentOutcomes       *CMsgPlayerRecentMatchOutcomes `protobuf:"bytes,1,opt,name=recent_outcomes,json=recentOutcomes" json:"recent_outcomes,omitempty"`
	TotalRecord          *CMsgPlayerMatchRecord         `protobuf:"bytes,2,opt,name=total_record,json=totalRecord" json:"total_record,omitempty"`
	PredictionStreak     *uint32                        `protobuf:"varint,3,opt,name=prediction_streak,json=predictionStreak" json:"prediction_streak,omitempty"`
	PlusPredictionStreak *uint32                        `protobuf:"varint,4,opt,name=plus_prediction_streak,json=plusPredictionStreak" json:"plus_prediction_streak,omitempty"`
	RecentCommends       *CMsgPlayerRecentCommends      `protobuf:"bytes,5,opt,name=recent_commends,json=recentCommends" json:"recent_commends,omitempty"`
	FirstMatchTimestamp  *uint32                        `protobuf:"varint,6,opt,name=first_match_timestamp,json=firstMatchTimestamp" json:"first_match_timestamp,omitempty"`
	LastMatch            *CMsgPlayerRecentMatchInfo     `protobuf:"bytes,7,opt,name=last_match,json=lastMatch" json:"last_match,omitempty"`
	RecentMvps           *CMsgPlayerRecentMatchOutcomes `protobuf:"bytes,8,opt,name=recent_mvps,json=recentMvps" json:"recent_mvps,omitempty"`
}

func (x *CMsgPlayerRecentAccomplishments) Reset() {
	*x = CMsgPlayerRecentAccomplishments{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPlayerRecentAccomplishments) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPlayerRecentAccomplishments) ProtoMessage() {}

func (x *CMsgPlayerRecentAccomplishments) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPlayerRecentAccomplishments.ProtoReflect.Descriptor instead.
func (*CMsgPlayerRecentAccomplishments) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{67}
}

func (x *CMsgPlayerRecentAccomplishments) GetRecentOutcomes() *CMsgPlayerRecentMatchOutcomes {
	if x != nil {
		return x.RecentOutcomes
	}
	return nil
}

func (x *CMsgPlayerRecentAccomplishments) GetTotalRecord() *CMsgPlayerMatchRecord {
	if x != nil {
		return x.TotalRecord
	}
	return nil
}

func (x *CMsgPlayerRecentAccomplishments) GetPredictionStreak() uint32 {
	if x != nil && x.PredictionStreak != nil {
		return *x.PredictionStreak
	}
	return 0
}

func (x *CMsgPlayerRecentAccomplishments) GetPlusPredictionStreak() uint32 {
	if x != nil && x.PlusPredictionStreak != nil {
		return *x.PlusPredictionStreak
	}
	return 0
}

func (x *CMsgPlayerRecentAccomplishments) GetRecentCommends() *CMsgPlayerRecentCommends {
	if x != nil {
		return x.RecentCommends
	}
	return nil
}

func (x *CMsgPlayerRecentAccomplishments) GetFirstMatchTimestamp() uint32 {
	if x != nil && x.FirstMatchTimestamp != nil {
		return *x.FirstMatchTimestamp
	}
	return 0
}

func (x *CMsgPlayerRecentAccomplishments) GetLastMatch() *CMsgPlayerRecentMatchInfo {
	if x != nil {
		return x.LastMatch
	}
	return nil
}

func (x *CMsgPlayerRecentAccomplishments) GetRecentMvps() *CMsgPlayerRecentMatchOutcomes {
	if x != nil {
		return x.RecentMvps
	}
	return nil
}

type CMsgPlayerHeroRecentAccomplishments struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecentOutcomes *CMsgPlayerRecentMatchOutcomes `protobuf:"bytes,1,opt,name=recent_outcomes,json=recentOutcomes" json:"recent_outcomes,omitempty"`
	TotalRecord    *CMsgPlayerMatchRecord         `protobuf:"bytes,2,opt,name=total_record,json=totalRecord" json:"total_record,omitempty"`
	LastMatch      *CMsgPlayerRecentMatchInfo     `protobuf:"bytes,3,opt,name=last_match,json=lastMatch" json:"last_match,omitempty"`
}

func (x *CMsgPlayerHeroRecentAccomplishments) Reset() {
	*x = CMsgPlayerHeroRecentAccomplishments{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPlayerHeroRecentAccomplishments) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPlayerHeroRecentAccomplishments) ProtoMessage() {}

func (x *CMsgPlayerHeroRecentAccomplishments) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPlayerHeroRecentAccomplishments.ProtoReflect.Descriptor instead.
func (*CMsgPlayerHeroRecentAccomplishments) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{68}
}

func (x *CMsgPlayerHeroRecentAccomplishments) GetRecentOutcomes() *CMsgPlayerRecentMatchOutcomes {
	if x != nil {
		return x.RecentOutcomes
	}
	return nil
}

func (x *CMsgPlayerHeroRecentAccomplishments) GetTotalRecord() *CMsgPlayerMatchRecord {
	if x != nil {
		return x.TotalRecord
	}
	return nil
}

func (x *CMsgPlayerHeroRecentAccomplishments) GetLastMatch() *CMsgPlayerRecentMatchInfo {
	if x != nil {
		return x.LastMatch
	}
	return nil
}

type CMsgRecentAccomplishments struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerAccomplishments *CMsgPlayerRecentAccomplishments     `protobuf:"bytes,1,opt,name=player_accomplishments,json=playerAccomplishments" json:"player_accomplishments,omitempty"`
	HeroAccomplishments   *CMsgPlayerHeroRecentAccomplishments `protobuf:"bytes,2,opt,name=hero_accomplishments,json=heroAccomplishments" json:"hero_accomplishments,omitempty"`
}

func (x *CMsgRecentAccomplishments) Reset() {
	*x = CMsgRecentAccomplishments{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgRecentAccomplishments) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgRecentAccomplishments) ProtoMessage() {}

func (x *CMsgRecentAccomplishments) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgRecentAccomplishments.ProtoReflect.Descriptor instead.
func (*CMsgRecentAccomplishments) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{69}
}

func (x *CMsgRecentAccomplishments) GetPlayerAccomplishments() *CMsgPlayerRecentAccomplishments {
	if x != nil {
		return x.PlayerAccomplishments
	}
	return nil
}

func (x *CMsgRecentAccomplishments) GetHeroAccomplishments() *CMsgPlayerHeroRecentAccomplishments {
	if x != nil {
		return x.HeroAccomplishments
	}
	return nil
}

type CMsgRequestPlayerRecentAccomplishments struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	HeroId    *uint32 `protobuf:"varint,2,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
}

func (x *CMsgRequestPlayerRecentAccomplishments) Reset() {
	*x = CMsgRequestPlayerRecentAccomplishments{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgRequestPlayerRecentAccomplishments) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgRequestPlayerRecentAccomplishments) ProtoMessage() {}

func (x *CMsgRequestPlayerRecentAccomplishments) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgRequestPlayerRecentAccomplishments.ProtoReflect.Descriptor instead.
func (*CMsgRequestPlayerRecentAccomplishments) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{70}
}

func (x *CMsgRequestPlayerRecentAccomplishments) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgRequestPlayerRecentAccomplishments) GetHeroId() uint32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

type CMsgRequestPlayerRecentAccomplishmentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result                *CMsgRequestPlayerRecentAccomplishmentsResponse_EResponse `protobuf:"varint,1,opt,name=result,enum=dota.CMsgRequestPlayerRecentAccomplishmentsResponse_EResponse,def=0" json:"result,omitempty"`
	PlayerAccomplishments *CMsgRecentAccomplishments                                `protobuf:"bytes,2,opt,name=player_accomplishments,json=playerAccomplishments" json:"player_accomplishments,omitempty"`
}

// Default values for CMsgRequestPlayerRecentAccomplishmentsResponse fields.
const (
	Default_CMsgRequestPlayerRecentAccomplishmentsResponse_Result = CMsgRequestPlayerRecentAccomplishmentsResponse_k_eInternalError
)

func (x *CMsgRequestPlayerRecentAccomplishmentsResponse) Reset() {
	*x = CMsgRequestPlayerRecentAccomplishmentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgRequestPlayerRecentAccomplishmentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgRequestPlayerRecentAccomplishmentsResponse) ProtoMessage() {}

func (x *CMsgRequestPlayerRecentAccomplishmentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgRequestPlayerRecentAccomplishmentsResponse.ProtoReflect.Descriptor instead.
func (*CMsgRequestPlayerRecentAccomplishmentsResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{71}
}

func (x *CMsgRequestPlayerRecentAccomplishmentsResponse) GetResult() CMsgRequestPlayerRecentAccomplishmentsResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgRequestPlayerRecentAccomplishmentsResponse_Result
}

func (x *CMsgRequestPlayerRecentAccomplishmentsResponse) GetPlayerAccomplishments() *CMsgRecentAccomplishments {
	if x != nil {
		return x.PlayerAccomplishments
	}
	return nil
}

type CMsgArcanaVoteMatchVotes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId   *uint32 `protobuf:"varint,1,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	HeroId    *uint32 `protobuf:"varint,2,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	VoteCount *uint32 `protobuf:"varint,3,opt,name=vote_count,json=voteCount" json:"vote_count,omitempty"`
}

func (x *CMsgArcanaVoteMatchVotes) Reset() {
	*x = CMsgArcanaVoteMatchVotes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgArcanaVoteMatchVotes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgArcanaVoteMatchVotes) ProtoMessage() {}

func (x *CMsgArcanaVoteMatchVotes) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgArcanaVoteMatchVotes.ProtoReflect.Descriptor instead.
func (*CMsgArcanaVoteMatchVotes) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{72}
}

func (x *CMsgArcanaVoteMatchVotes) GetMatchId() uint32 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgArcanaVoteMatchVotes) GetHeroId() uint32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CMsgArcanaVoteMatchVotes) GetVoteCount() uint32 {
	if x != nil && x.VoteCount != nil {
		return *x.VoteCount
	}
	return 0
}

type CMsgGCtoGCAssociatedExploiterAccountInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId            *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	NumMatchesToSearch   *uint32 `protobuf:"varint,2,opt,name=num_matches_to_search,json=numMatchesToSearch" json:"num_matches_to_search,omitempty"`
	MinSharedMatchCount  *uint32 `protobuf:"varint,3,opt,name=min_shared_match_count,json=minSharedMatchCount" json:"min_shared_match_count,omitempty"`
	NumAdditionalPlayers *uint32 `protobuf:"varint,4,opt,name=num_additional_players,json=numAdditionalPlayers" json:"num_additional_players,omitempty"`
}

func (x *CMsgGCtoGCAssociatedExploiterAccountInfo) Reset() {
	*x = CMsgGCtoGCAssociatedExploiterAccountInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCtoGCAssociatedExploiterAccountInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCtoGCAssociatedExploiterAccountInfo) ProtoMessage() {}

func (x *CMsgGCtoGCAssociatedExploiterAccountInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCtoGCAssociatedExploiterAccountInfo.ProtoReflect.Descriptor instead.
func (*CMsgGCtoGCAssociatedExploiterAccountInfo) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{73}
}

func (x *CMsgGCtoGCAssociatedExploiterAccountInfo) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgGCtoGCAssociatedExploiterAccountInfo) GetNumMatchesToSearch() uint32 {
	if x != nil && x.NumMatchesToSearch != nil {
		return *x.NumMatchesToSearch
	}
	return 0
}

func (x *CMsgGCtoGCAssociatedExploiterAccountInfo) GetMinSharedMatchCount() uint32 {
	if x != nil && x.MinSharedMatchCount != nil {
		return *x.MinSharedMatchCount
	}
	return 0
}

func (x *CMsgGCtoGCAssociatedExploiterAccountInfo) GetNumAdditionalPlayers() uint32 {
	if x != nil && x.NumAdditionalPlayers != nil {
		return *x.NumAdditionalPlayers
	}
	return 0
}

type CMsgGCtoGCAssociatedExploiterAccountInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accounts []*CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account `protobuf:"bytes,1,rep,name=accounts" json:"accounts,omitempty"`
}

func (x *CMsgGCtoGCAssociatedExploiterAccountInfoResponse) Reset() {
	*x = CMsgGCtoGCAssociatedExploiterAccountInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCtoGCAssociatedExploiterAccountInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCtoGCAssociatedExploiterAccountInfoResponse) ProtoMessage() {}

func (x *CMsgGCtoGCAssociatedExploiterAccountInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCtoGCAssociatedExploiterAccountInfoResponse.ProtoReflect.Descriptor instead.
func (*CMsgGCtoGCAssociatedExploiterAccountInfoResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{74}
}

func (x *CMsgGCtoGCAssociatedExploiterAccountInfoResponse) GetAccounts() []*CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account {
	if x != nil {
		return x.Accounts
	}
	return nil
}

type CMsgPullTabsData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slots     []*CMsgPullTabsData_Slot    `protobuf:"bytes,1,rep,name=slots" json:"slots,omitempty"`
	Jackpots  []*CMsgPullTabsData_Jackpot `protobuf:"bytes,2,rep,name=jackpots" json:"jackpots,omitempty"`
	LastBoard *uint32                     `protobuf:"varint,3,opt,name=last_board,json=lastBoard" json:"last_board,omitempty"`
}

func (x *CMsgPullTabsData) Reset() {
	*x = CMsgPullTabsData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPullTabsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPullTabsData) ProtoMessage() {}

func (x *CMsgPullTabsData) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPullTabsData.ProtoReflect.Descriptor instead.
func (*CMsgPullTabsData) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{75}
}

func (x *CMsgPullTabsData) GetSlots() []*CMsgPullTabsData_Slot {
	if x != nil {
		return x.Slots
	}
	return nil
}

func (x *CMsgPullTabsData) GetJackpots() []*CMsgPullTabsData_Jackpot {
	if x != nil {
		return x.Jackpots
	}
	return nil
}

func (x *CMsgPullTabsData) GetLastBoard() uint32 {
	if x != nil && x.LastBoard != nil {
		return *x.LastBoard
	}
	return 0
}

type CMsgUnderDraftData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BenchSlots    []*CMsgUnderDraftData_BenchSlot `protobuf:"bytes,1,rep,name=bench_slots,json=benchSlots" json:"bench_slots,omitempty"`
	ShopSlots     []*CMsgUnderDraftData_ShopSlot  `protobuf:"bytes,2,rep,name=shop_slots,json=shopSlots" json:"shop_slots,omitempty"`
	Gold          *uint32                         `protobuf:"varint,3,opt,name=gold" json:"gold,omitempty"`
	TotalGold     *uint32                         `protobuf:"varint,4,opt,name=total_gold,json=totalGold" json:"total_gold,omitempty"`
	NotRestorable *bool                           `protobuf:"varint,5,opt,name=not_restorable,json=notRestorable" json:"not_restorable,omitempty"`
}

func (x *CMsgUnderDraftData) Reset() {
	*x = CMsgUnderDraftData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgUnderDraftData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgUnderDraftData) ProtoMessage() {}

func (x *CMsgUnderDraftData) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgUnderDraftData.ProtoReflect.Descriptor instead.
func (*CMsgUnderDraftData) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{76}
}

func (x *CMsgUnderDraftData) GetBenchSlots() []*CMsgUnderDraftData_BenchSlot {
	if x != nil {
		return x.BenchSlots
	}
	return nil
}

func (x *CMsgUnderDraftData) GetShopSlots() []*CMsgUnderDraftData_ShopSlot {
	if x != nil {
		return x.ShopSlots
	}
	return nil
}

func (x *CMsgUnderDraftData) GetGold() uint32 {
	if x != nil && x.Gold != nil {
		return *x.Gold
	}
	return 0
}

func (x *CMsgUnderDraftData) GetTotalGold() uint32 {
	if x != nil && x.TotalGold != nil {
		return *x.TotalGold
	}
	return 0
}

func (x *CMsgUnderDraftData) GetNotRestorable() bool {
	if x != nil && x.NotRestorable != nil {
		return *x.NotRestorable
	}
	return false
}

type CMsgPlayerTitleData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title   []uint32 `protobuf:"varint,1,rep,name=title" json:"title,omitempty"`
	EventId []uint32 `protobuf:"varint,2,rep,name=event_id,json=eventId" json:"event_id,omitempty"`
	Active  *uint32  `protobuf:"varint,3,opt,name=active" json:"active,omitempty"`
}

func (x *CMsgPlayerTitleData) Reset() {
	*x = CMsgPlayerTitleData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPlayerTitleData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPlayerTitleData) ProtoMessage() {}

func (x *CMsgPlayerTitleData) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPlayerTitleData.ProtoReflect.Descriptor instead.
func (*CMsgPlayerTitleData) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{77}
}

func (x *CMsgPlayerTitleData) GetTitle() []uint32 {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *CMsgPlayerTitleData) GetEventId() []uint32 {
	if x != nil {
		return x.EventId
	}
	return nil
}

func (x *CMsgPlayerTitleData) GetActive() uint32 {
	if x != nil && x.Active != nil {
		return *x.Active
	}
	return 0
}

type CMsgDOTATriviaQuestion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestionId         *uint32                      `protobuf:"varint,1,opt,name=question_id,json=questionId" json:"question_id,omitempty"`
	Category           *EDOTATriviaQuestionCategory `protobuf:"varint,2,opt,name=category,enum=dota.EDOTATriviaQuestionCategory,def=0" json:"category,omitempty"`
	Timestamp          *uint32                      `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	QuestionValue      *string                      `protobuf:"bytes,4,opt,name=question_value,json=questionValue" json:"question_value,omitempty"`
	AnswerValues       []string                     `protobuf:"bytes,5,rep,name=answer_values,json=answerValues" json:"answer_values,omitempty"`
	CorrectAnswerIndex *uint32                      `protobuf:"varint,6,opt,name=correct_answer_index,json=correctAnswerIndex" json:"correct_answer_index,omitempty"`
}

// Default values for CMsgDOTATriviaQuestion fields.
const (
	Default_CMsgDOTATriviaQuestion_Category = EDOTATriviaQuestionCategory_k_EDOTATriviaQuestionCategory_AbilityIcon
)

func (x *CMsgDOTATriviaQuestion) Reset() {
	*x = CMsgDOTATriviaQuestion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTATriviaQuestion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTATriviaQuestion) ProtoMessage() {}

func (x *CMsgDOTATriviaQuestion) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTATriviaQuestion.ProtoReflect.Descriptor instead.
func (*CMsgDOTATriviaQuestion) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{78}
}

func (x *CMsgDOTATriviaQuestion) GetQuestionId() uint32 {
	if x != nil && x.QuestionId != nil {
		return *x.QuestionId
	}
	return 0
}

func (x *CMsgDOTATriviaQuestion) GetCategory() EDOTATriviaQuestionCategory {
	if x != nil && x.Category != nil {
		return *x.Category
	}
	return Default_CMsgDOTATriviaQuestion_Category
}

func (x *CMsgDOTATriviaQuestion) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *CMsgDOTATriviaQuestion) GetQuestionValue() string {
	if x != nil && x.QuestionValue != nil {
		return *x.QuestionValue
	}
	return ""
}

func (x *CMsgDOTATriviaQuestion) GetAnswerValues() []string {
	if x != nil {
		return x.AnswerValues
	}
	return nil
}

func (x *CMsgDOTATriviaQuestion) GetCorrectAnswerIndex() uint32 {
	if x != nil && x.CorrectAnswerIndex != nil {
		return *x.CorrectAnswerIndex
	}
	return 0
}

type CMsgDOTATriviaQuestionAnswersSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SummaryAvailable *bool    `protobuf:"varint,1,opt,name=summary_available,json=summaryAvailable" json:"summary_available,omitempty"`
	PickedCount      []uint32 `protobuf:"varint,2,rep,name=picked_count,json=pickedCount" json:"picked_count,omitempty"`
}

func (x *CMsgDOTATriviaQuestionAnswersSummary) Reset() {
	*x = CMsgDOTATriviaQuestionAnswersSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTATriviaQuestionAnswersSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTATriviaQuestionAnswersSummary) ProtoMessage() {}

func (x *CMsgDOTATriviaQuestionAnswersSummary) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTATriviaQuestionAnswersSummary.ProtoReflect.Descriptor instead.
func (*CMsgDOTATriviaQuestionAnswersSummary) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{79}
}

func (x *CMsgDOTATriviaQuestionAnswersSummary) GetSummaryAvailable() bool {
	if x != nil && x.SummaryAvailable != nil {
		return *x.SummaryAvailable
	}
	return false
}

func (x *CMsgDOTATriviaQuestionAnswersSummary) GetPickedCount() []uint32 {
	if x != nil {
		return x.PickedCount
	}
	return nil
}

type CSODOTAGameAccountClient_RoleHandicap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Role     *uint32  `protobuf:"varint,1,opt,name=role" json:"role,omitempty"`
	Handicap *float32 `protobuf:"fixed32,2,opt,name=handicap" json:"handicap,omitempty"`
}

func (x *CSODOTAGameAccountClient_RoleHandicap) Reset() {
	*x = CSODOTAGameAccountClient_RoleHandicap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSODOTAGameAccountClient_RoleHandicap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSODOTAGameAccountClient_RoleHandicap) ProtoMessage() {}

func (x *CSODOTAGameAccountClient_RoleHandicap) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSODOTAGameAccountClient_RoleHandicap.ProtoReflect.Descriptor instead.
func (*CSODOTAGameAccountClient_RoleHandicap) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{0, 0}
}

func (x *CSODOTAGameAccountClient_RoleHandicap) GetRole() uint32 {
	if x != nil && x.Role != nil {
		return *x.Role
	}
	return 0
}

func (x *CSODOTAGameAccountClient_RoleHandicap) GetHandicap() float32 {
	if x != nil && x.Handicap != nil {
		return *x.Handicap
	}
	return 0
}

type CMsgLobbyPlayerPlusSubscriptionData_HeroBadge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeroId      *uint32 `protobuf:"varint,1,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	HeroBadgeXp *uint32 `protobuf:"varint,2,opt,name=hero_badge_xp,json=heroBadgeXp" json:"hero_badge_xp,omitempty"`
}

func (x *CMsgLobbyPlayerPlusSubscriptionData_HeroBadge) Reset() {
	*x = CMsgLobbyPlayerPlusSubscriptionData_HeroBadge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgLobbyPlayerPlusSubscriptionData_HeroBadge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgLobbyPlayerPlusSubscriptionData_HeroBadge) ProtoMessage() {}

func (x *CMsgLobbyPlayerPlusSubscriptionData_HeroBadge) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgLobbyPlayerPlusSubscriptionData_HeroBadge.ProtoReflect.Descriptor instead.
func (*CMsgLobbyPlayerPlusSubscriptionData_HeroBadge) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{2, 0}
}

func (x *CMsgLobbyPlayerPlusSubscriptionData_HeroBadge) GetHeroId() uint32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CMsgLobbyPlayerPlusSubscriptionData_HeroBadge) GetHeroBadgeXp() uint32 {
	if x != nil && x.HeroBadgeXp != nil {
		return *x.HeroBadgeXp
	}
	return 0
}

type CMsgLobbyEventPoints_ChatWheelMessageRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageIdStart *uint32 `protobuf:"varint,1,opt,name=message_id_start,json=messageIdStart" json:"message_id_start,omitempty"`
	MessageIdEnd   *uint32 `protobuf:"varint,2,opt,name=message_id_end,json=messageIdEnd" json:"message_id_end,omitempty"`
}

func (x *CMsgLobbyEventPoints_ChatWheelMessageRange) Reset() {
	*x = CMsgLobbyEventPoints_ChatWheelMessageRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgLobbyEventPoints_ChatWheelMessageRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgLobbyEventPoints_ChatWheelMessageRange) ProtoMessage() {}

func (x *CMsgLobbyEventPoints_ChatWheelMessageRange) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgLobbyEventPoints_ChatWheelMessageRange.ProtoReflect.Descriptor instead.
func (*CMsgLobbyEventPoints_ChatWheelMessageRange) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{3, 0}
}

func (x *CMsgLobbyEventPoints_ChatWheelMessageRange) GetMessageIdStart() uint32 {
	if x != nil && x.MessageIdStart != nil {
		return *x.MessageIdStart
	}
	return 0
}

func (x *CMsgLobbyEventPoints_ChatWheelMessageRange) GetMessageIdEnd() uint32 {
	if x != nil && x.MessageIdEnd != nil {
		return *x.MessageIdEnd
	}
	return 0
}

type CMsgLobbyEventPoints_PingWheelMessageRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageIdStart *uint32 `protobuf:"varint,1,opt,name=message_id_start,json=messageIdStart" json:"message_id_start,omitempty"`
	MessageIdEnd   *uint32 `protobuf:"varint,2,opt,name=message_id_end,json=messageIdEnd" json:"message_id_end,omitempty"`
}

func (x *CMsgLobbyEventPoints_PingWheelMessageRange) Reset() {
	*x = CMsgLobbyEventPoints_PingWheelMessageRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgLobbyEventPoints_PingWheelMessageRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgLobbyEventPoints_PingWheelMessageRange) ProtoMessage() {}

func (x *CMsgLobbyEventPoints_PingWheelMessageRange) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgLobbyEventPoints_PingWheelMessageRange.ProtoReflect.Descriptor instead.
func (*CMsgLobbyEventPoints_PingWheelMessageRange) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{3, 1}
}

func (x *CMsgLobbyEventPoints_PingWheelMessageRange) GetMessageIdStart() uint32 {
	if x != nil && x.MessageIdStart != nil {
		return *x.MessageIdStart
	}
	return 0
}

func (x *CMsgLobbyEventPoints_PingWheelMessageRange) GetMessageIdEnd() uint32 {
	if x != nil && x.MessageIdEnd != nil {
		return *x.MessageIdEnd
	}
	return 0
}

type CMsgLobbyEventPoints_PeriodicResourceValues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Remaining *uint32 `protobuf:"varint,1,opt,name=remaining" json:"remaining,omitempty"`
	Max       *uint32 `protobuf:"varint,2,opt,name=max" json:"max,omitempty"`
}

func (x *CMsgLobbyEventPoints_PeriodicResourceValues) Reset() {
	*x = CMsgLobbyEventPoints_PeriodicResourceValues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgLobbyEventPoints_PeriodicResourceValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgLobbyEventPoints_PeriodicResourceValues) ProtoMessage() {}

func (x *CMsgLobbyEventPoints_PeriodicResourceValues) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgLobbyEventPoints_PeriodicResourceValues.ProtoReflect.Descriptor instead.
func (*CMsgLobbyEventPoints_PeriodicResourceValues) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{3, 2}
}

func (x *CMsgLobbyEventPoints_PeriodicResourceValues) GetRemaining() uint32 {
	if x != nil && x.Remaining != nil {
		return *x.Remaining
	}
	return 0
}

func (x *CMsgLobbyEventPoints_PeriodicResourceValues) GetMax() uint32 {
	if x != nil && x.Max != nil {
		return *x.Max
	}
	return 0
}

type CMsgLobbyEventPoints_EventGameCustomActions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionId     *uint32 `protobuf:"varint,1,opt,name=action_id,json=actionId" json:"action_id,omitempty"`
	TimesGranted *uint32 `protobuf:"varint,2,opt,name=times_granted,json=timesGranted" json:"times_granted,omitempty"`
}

func (x *CMsgLobbyEventPoints_EventGameCustomActions) Reset() {
	*x = CMsgLobbyEventPoints_EventGameCustomActions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgLobbyEventPoints_EventGameCustomActions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgLobbyEventPoints_EventGameCustomActions) ProtoMessage() {}

func (x *CMsgLobbyEventPoints_EventGameCustomActions) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgLobbyEventPoints_EventGameCustomActions.ProtoReflect.Descriptor instead.
func (*CMsgLobbyEventPoints_EventGameCustomActions) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{3, 3}
}

func (x *CMsgLobbyEventPoints_EventGameCustomActions) GetActionId() uint32 {
	if x != nil && x.ActionId != nil {
		return *x.ActionId
	}
	return 0
}

func (x *CMsgLobbyEventPoints_EventGameCustomActions) GetTimesGranted() uint32 {
	if x != nil && x.TimesGranted != nil {
		return *x.TimesGranted
	}
	return 0
}

type CMsgLobbyEventPoints_AccountPoints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId                      *uint32                                        `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	NormalPoints                   *uint32                                        `protobuf:"varint,2,opt,name=normal_points,json=normalPoints" json:"normal_points,omitempty"`
	PremiumPoints                  *uint32                                        `protobuf:"varint,3,opt,name=premium_points,json=premiumPoints" json:"premium_points,omitempty"`
	Owned                          *bool                                          `protobuf:"varint,4,opt,name=owned" json:"owned,omitempty"`
	FavoriteTeam                   *uint32                                        `protobuf:"varint,5,opt,name=favorite_team,json=favoriteTeam" json:"favorite_team,omitempty"`
	FavoriteTeamLevel              *uint32                                        `protobuf:"varint,6,opt,name=favorite_team_level,json=favoriteTeamLevel" json:"favorite_team_level,omitempty"`
	FavoriteTeamFoilLevel          *uint32                                        `protobuf:"varint,9,opt,name=favorite_team_foil_level,json=favoriteTeamFoilLevel" json:"favorite_team_foil_level,omitempty"`
	ActiveEffectsMask              *uint64                                        `protobuf:"varint,12,opt,name=active_effects_mask,json=activeEffectsMask" json:"active_effects_mask,omitempty"`
	UnlockedChatWheelMessageRanges []*CMsgLobbyEventPoints_ChatWheelMessageRange  `protobuf:"bytes,13,rep,name=unlocked_chat_wheel_message_ranges,json=unlockedChatWheelMessageRanges" json:"unlocked_chat_wheel_message_ranges,omitempty"`
	PlusSubscriptionData           *CMsgLobbyPlayerPlusSubscriptionData           `protobuf:"bytes,16,opt,name=plus_subscription_data,json=plusSubscriptionData" json:"plus_subscription_data,omitempty"`
	WagerTokens                    *CMsgLobbyEventPoints_PeriodicResourceValues   `protobuf:"bytes,17,opt,name=wager_tokens,json=wagerTokens" json:"wager_tokens,omitempty"`
	RankWagerTokens                *CMsgLobbyEventPoints_PeriodicResourceValues   `protobuf:"bytes,18,opt,name=rank_wager_tokens,json=rankWagerTokens" json:"rank_wager_tokens,omitempty"`
	TipTokens                      *CMsgLobbyEventPoints_PeriodicResourceValues   `protobuf:"bytes,19,opt,name=tip_tokens,json=tipTokens" json:"tip_tokens,omitempty"`
	TipAmount                      *uint32                                        `protobuf:"varint,20,opt,name=tip_amount,json=tipAmount" json:"tip_amount,omitempty"`
	PeriodicPointAdjustments       *CMsgLobbyEventPoints_PeriodicResourceValues   `protobuf:"bytes,21,opt,name=periodic_point_adjustments,json=periodicPointAdjustments" json:"periodic_point_adjustments,omitempty"`
	UnlockedPingWheelMessageRanges []*CMsgLobbyEventPoints_PingWheelMessageRange  `protobuf:"bytes,22,rep,name=unlocked_ping_wheel_message_ranges,json=unlockedPingWheelMessageRanges" json:"unlocked_ping_wheel_message_ranges,omitempty"`
	WagerStreak                    *uint32                                        `protobuf:"varint,23,opt,name=wager_streak,json=wagerStreak" json:"wager_streak,omitempty"`
	Bounties                       *CMsgLobbyEventPoints_PeriodicResourceValues   `protobuf:"bytes,24,opt,name=bounties" json:"bounties,omitempty"`
	EventGameCustomActions         []*CMsgLobbyEventPoints_EventGameCustomActions `protobuf:"bytes,25,rep,name=event_game_custom_actions,json=eventGameCustomActions" json:"event_game_custom_actions,omitempty"`
}

func (x *CMsgLobbyEventPoints_AccountPoints) Reset() {
	*x = CMsgLobbyEventPoints_AccountPoints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgLobbyEventPoints_AccountPoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgLobbyEventPoints_AccountPoints) ProtoMessage() {}

func (x *CMsgLobbyEventPoints_AccountPoints) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgLobbyEventPoints_AccountPoints.ProtoReflect.Descriptor instead.
func (*CMsgLobbyEventPoints_AccountPoints) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{3, 4}
}

func (x *CMsgLobbyEventPoints_AccountPoints) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgLobbyEventPoints_AccountPoints) GetNormalPoints() uint32 {
	if x != nil && x.NormalPoints != nil {
		return *x.NormalPoints
	}
	return 0
}

func (x *CMsgLobbyEventPoints_AccountPoints) GetPremiumPoints() uint32 {
	if x != nil && x.PremiumPoints != nil {
		return *x.PremiumPoints
	}
	return 0
}

func (x *CMsgLobbyEventPoints_AccountPoints) GetOwned() bool {
	if x != nil && x.Owned != nil {
		return *x.Owned
	}
	return false
}

func (x *CMsgLobbyEventPoints_AccountPoints) GetFavoriteTeam() uint32 {
	if x != nil && x.FavoriteTeam != nil {
		return *x.FavoriteTeam
	}
	return 0
}

func (x *CMsgLobbyEventPoints_AccountPoints) GetFavoriteTeamLevel() uint32 {
	if x != nil && x.FavoriteTeamLevel != nil {
		return *x.FavoriteTeamLevel
	}
	return 0
}

func (x *CMsgLobbyEventPoints_AccountPoints) GetFavoriteTeamFoilLevel() uint32 {
	if x != nil && x.FavoriteTeamFoilLevel != nil {
		return *x.FavoriteTeamFoilLevel
	}
	return 0
}

func (x *CMsgLobbyEventPoints_AccountPoints) GetActiveEffectsMask() uint64 {
	if x != nil && x.ActiveEffectsMask != nil {
		return *x.ActiveEffectsMask
	}
	return 0
}

func (x *CMsgLobbyEventPoints_AccountPoints) GetUnlockedChatWheelMessageRanges() []*CMsgLobbyEventPoints_ChatWheelMessageRange {
	if x != nil {
		return x.UnlockedChatWheelMessageRanges
	}
	return nil
}

func (x *CMsgLobbyEventPoints_AccountPoints) GetPlusSubscriptionData() *CMsgLobbyPlayerPlusSubscriptionData {
	if x != nil {
		return x.PlusSubscriptionData
	}
	return nil
}

func (x *CMsgLobbyEventPoints_AccountPoints) GetWagerTokens() *CMsgLobbyEventPoints_PeriodicResourceValues {
	if x != nil {
		return x.WagerTokens
	}
	return nil
}

func (x *CMsgLobbyEventPoints_AccountPoints) GetRankWagerTokens() *CMsgLobbyEventPoints_PeriodicResourceValues {
	if x != nil {
		return x.RankWagerTokens
	}
	return nil
}

func (x *CMsgLobbyEventPoints_AccountPoints) GetTipTokens() *CMsgLobbyEventPoints_PeriodicResourceValues {
	if x != nil {
		return x.TipTokens
	}
	return nil
}

func (x *CMsgLobbyEventPoints_AccountPoints) GetTipAmount() uint32 {
	if x != nil && x.TipAmount != nil {
		return *x.TipAmount
	}
	return 0
}

func (x *CMsgLobbyEventPoints_AccountPoints) GetPeriodicPointAdjustments() *CMsgLobbyEventPoints_PeriodicResourceValues {
	if x != nil {
		return x.PeriodicPointAdjustments
	}
	return nil
}

func (x *CMsgLobbyEventPoints_AccountPoints) GetUnlockedPingWheelMessageRanges() []*CMsgLobbyEventPoints_PingWheelMessageRange {
	if x != nil {
		return x.UnlockedPingWheelMessageRanges
	}
	return nil
}

func (x *CMsgLobbyEventPoints_AccountPoints) GetWagerStreak() uint32 {
	if x != nil && x.WagerStreak != nil {
		return *x.WagerStreak
	}
	return 0
}

func (x *CMsgLobbyEventPoints_AccountPoints) GetBounties() *CMsgLobbyEventPoints_PeriodicResourceValues {
	if x != nil {
		return x.Bounties
	}
	return nil
}

func (x *CMsgLobbyEventPoints_AccountPoints) GetEventGameCustomActions() []*CMsgLobbyEventPoints_EventGameCustomActions {
	if x != nil {
		return x.EventGameCustomActions
	}
	return nil
}

type CMsgLobbyGauntletProgress_AccountProgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId      *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	GauntletTier   *uint32 `protobuf:"varint,3,opt,name=gauntlet_tier,json=gauntletTier" json:"gauntlet_tier,omitempty"`
	GauntletWins   *uint32 `protobuf:"varint,4,opt,name=gauntlet_wins,json=gauntletWins" json:"gauntlet_wins,omitempty"`
	GauntletLosses *uint32 `protobuf:"varint,5,opt,name=gauntlet_losses,json=gauntletLosses" json:"gauntlet_losses,omitempty"`
}

func (x *CMsgLobbyGauntletProgress_AccountProgress) Reset() {
	*x = CMsgLobbyGauntletProgress_AccountProgress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgLobbyGauntletProgress_AccountProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgLobbyGauntletProgress_AccountProgress) ProtoMessage() {}

func (x *CMsgLobbyGauntletProgress_AccountProgress) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgLobbyGauntletProgress_AccountProgress.ProtoReflect.Descriptor instead.
func (*CMsgLobbyGauntletProgress_AccountProgress) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{5, 0}
}

func (x *CMsgLobbyGauntletProgress_AccountProgress) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgLobbyGauntletProgress_AccountProgress) GetGauntletTier() uint32 {
	if x != nil && x.GauntletTier != nil {
		return *x.GauntletTier
	}
	return 0
}

func (x *CMsgLobbyGauntletProgress_AccountProgress) GetGauntletWins() uint32 {
	if x != nil && x.GauntletWins != nil {
		return *x.GauntletWins
	}
	return 0
}

func (x *CMsgLobbyGauntletProgress_AccountProgress) GetGauntletLosses() uint32 {
	if x != nil && x.GauntletLosses != nil {
		return *x.GauntletLosses
	}
	return 0
}

type CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerCardItemId *uint64 `protobuf:"varint,1,opt,name=player_card_item_id,json=playerCardItemId" json:"player_card_item_id,omitempty"`
	AccountId        *uint32 `protobuf:"varint,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	PackedBonuses    *uint64 `protobuf:"varint,3,opt,name=packed_bonuses,json=packedBonuses" json:"packed_bonuses,omitempty"`
}

func (x *CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo) Reset() {
	*x = CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo) ProtoMessage() {}

func (x *CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo.ProtoReflect.Descriptor instead.
func (*CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{28, 0}
}

func (x *CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo) GetPlayerCardItemId() uint64 {
	if x != nil && x.PlayerCardItemId != nil {
		return *x.PlayerCardItemId
	}
	return 0
}

func (x *CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo) GetPackedBonuses() uint64 {
	if x != nil && x.PackedBonuses != nil {
		return *x.PackedBonuses
	}
	return 0
}

type CMsgDOTAProfileCard_Slot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlotId   *uint32                            `protobuf:"varint,1,opt,name=slot_id,json=slotId" json:"slot_id,omitempty"`
	Trophy   *CMsgDOTAProfileCard_Slot_Trophy   `protobuf:"bytes,2,opt,name=trophy" json:"trophy,omitempty"`
	Stat     *CMsgDOTAProfileCard_Slot_Stat     `protobuf:"bytes,3,opt,name=stat" json:"stat,omitempty"`
	Item     *CMsgDOTAProfileCard_Slot_Item     `protobuf:"bytes,4,opt,name=item" json:"item,omitempty"`
	Hero     *CMsgDOTAProfileCard_Slot_Hero     `protobuf:"bytes,5,opt,name=hero" json:"hero,omitempty"`
	Emoticon *CMsgDOTAProfileCard_Slot_Emoticon `protobuf:"bytes,6,opt,name=emoticon" json:"emoticon,omitempty"`
	Team     *CMsgDOTAProfileCard_Slot_Team     `protobuf:"bytes,7,opt,name=team" json:"team,omitempty"`
}

func (x *CMsgDOTAProfileCard_Slot) Reset() {
	*x = CMsgDOTAProfileCard_Slot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAProfileCard_Slot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAProfileCard_Slot) ProtoMessage() {}

func (x *CMsgDOTAProfileCard_Slot) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAProfileCard_Slot.ProtoReflect.Descriptor instead.
func (*CMsgDOTAProfileCard_Slot) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{36, 0}
}

func (x *CMsgDOTAProfileCard_Slot) GetSlotId() uint32 {
	if x != nil && x.SlotId != nil {
		return *x.SlotId
	}
	return 0
}

func (x *CMsgDOTAProfileCard_Slot) GetTrophy() *CMsgDOTAProfileCard_Slot_Trophy {
	if x != nil {
		return x.Trophy
	}
	return nil
}

func (x *CMsgDOTAProfileCard_Slot) GetStat() *CMsgDOTAProfileCard_Slot_Stat {
	if x != nil {
		return x.Stat
	}
	return nil
}

func (x *CMsgDOTAProfileCard_Slot) GetItem() *CMsgDOTAProfileCard_Slot_Item {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *CMsgDOTAProfileCard_Slot) GetHero() *CMsgDOTAProfileCard_Slot_Hero {
	if x != nil {
		return x.Hero
	}
	return nil
}

func (x *CMsgDOTAProfileCard_Slot) GetEmoticon() *CMsgDOTAProfileCard_Slot_Emoticon {
	if x != nil {
		return x.Emoticon
	}
	return nil
}

func (x *CMsgDOTAProfileCard_Slot) GetTeam() *CMsgDOTAProfileCard_Slot_Team {
	if x != nil {
		return x.Team
	}
	return nil
}

type CMsgDOTAProfileCard_Slot_Trophy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrophyId    *uint32 `protobuf:"varint,1,opt,name=trophy_id,json=trophyId" json:"trophy_id,omitempty"`
	TrophyScore *uint32 `protobuf:"varint,2,opt,name=trophy_score,json=trophyScore" json:"trophy_score,omitempty"`
}

func (x *CMsgDOTAProfileCard_Slot_Trophy) Reset() {
	*x = CMsgDOTAProfileCard_Slot_Trophy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAProfileCard_Slot_Trophy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAProfileCard_Slot_Trophy) ProtoMessage() {}

func (x *CMsgDOTAProfileCard_Slot_Trophy) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAProfileCard_Slot_Trophy.ProtoReflect.Descriptor instead.
func (*CMsgDOTAProfileCard_Slot_Trophy) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{36, 0, 0}
}

func (x *CMsgDOTAProfileCard_Slot_Trophy) GetTrophyId() uint32 {
	if x != nil && x.TrophyId != nil {
		return *x.TrophyId
	}
	return 0
}

func (x *CMsgDOTAProfileCard_Slot_Trophy) GetTrophyScore() uint32 {
	if x != nil && x.TrophyScore != nil {
		return *x.TrophyScore
	}
	return 0
}

type CMsgDOTAProfileCard_Slot_Stat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatId    *CMsgDOTAProfileCard_EStatID `protobuf:"varint,1,opt,name=stat_id,json=statId,enum=dota.CMsgDOTAProfileCard_EStatID,def=1" json:"stat_id,omitempty"`
	StatScore *uint32                      `protobuf:"varint,2,opt,name=stat_score,json=statScore" json:"stat_score,omitempty"`
}

// Default values for CMsgDOTAProfileCard_Slot_Stat fields.
const (
	Default_CMsgDOTAProfileCard_Slot_Stat_StatId = CMsgDOTAProfileCard_k_eStat_CoreRank
)

func (x *CMsgDOTAProfileCard_Slot_Stat) Reset() {
	*x = CMsgDOTAProfileCard_Slot_Stat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAProfileCard_Slot_Stat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAProfileCard_Slot_Stat) ProtoMessage() {}

func (x *CMsgDOTAProfileCard_Slot_Stat) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAProfileCard_Slot_Stat.ProtoReflect.Descriptor instead.
func (*CMsgDOTAProfileCard_Slot_Stat) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{36, 0, 1}
}

func (x *CMsgDOTAProfileCard_Slot_Stat) GetStatId() CMsgDOTAProfileCard_EStatID {
	if x != nil && x.StatId != nil {
		return *x.StatId
	}
	return Default_CMsgDOTAProfileCard_Slot_Stat_StatId
}

func (x *CMsgDOTAProfileCard_Slot_Stat) GetStatScore() uint32 {
	if x != nil && x.StatScore != nil {
		return *x.StatScore
	}
	return 0
}

type CMsgDOTAProfileCard_Slot_Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SerializedItem []byte  `protobuf:"bytes,1,opt,name=serialized_item,json=serializedItem" json:"serialized_item,omitempty"`
	ItemId         *uint64 `protobuf:"varint,2,opt,name=item_id,json=itemId" json:"item_id,omitempty"`
}

func (x *CMsgDOTAProfileCard_Slot_Item) Reset() {
	*x = CMsgDOTAProfileCard_Slot_Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAProfileCard_Slot_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAProfileCard_Slot_Item) ProtoMessage() {}

func (x *CMsgDOTAProfileCard_Slot_Item) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAProfileCard_Slot_Item.ProtoReflect.Descriptor instead.
func (*CMsgDOTAProfileCard_Slot_Item) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{36, 0, 2}
}

func (x *CMsgDOTAProfileCard_Slot_Item) GetSerializedItem() []byte {
	if x != nil {
		return x.SerializedItem
	}
	return nil
}

func (x *CMsgDOTAProfileCard_Slot_Item) GetItemId() uint64 {
	if x != nil && x.ItemId != nil {
		return *x.ItemId
	}
	return 0
}

type CMsgDOTAProfileCard_Slot_Hero struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeroId     *uint32 `protobuf:"varint,1,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	HeroWins   *uint32 `protobuf:"varint,2,opt,name=hero_wins,json=heroWins" json:"hero_wins,omitempty"`
	HeroLosses *uint32 `protobuf:"varint,3,opt,name=hero_losses,json=heroLosses" json:"hero_losses,omitempty"`
}

func (x *CMsgDOTAProfileCard_Slot_Hero) Reset() {
	*x = CMsgDOTAProfileCard_Slot_Hero{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAProfileCard_Slot_Hero) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAProfileCard_Slot_Hero) ProtoMessage() {}

func (x *CMsgDOTAProfileCard_Slot_Hero) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAProfileCard_Slot_Hero.ProtoReflect.Descriptor instead.
func (*CMsgDOTAProfileCard_Slot_Hero) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{36, 0, 3}
}

func (x *CMsgDOTAProfileCard_Slot_Hero) GetHeroId() uint32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CMsgDOTAProfileCard_Slot_Hero) GetHeroWins() uint32 {
	if x != nil && x.HeroWins != nil {
		return *x.HeroWins
	}
	return 0
}

func (x *CMsgDOTAProfileCard_Slot_Hero) GetHeroLosses() uint32 {
	if x != nil && x.HeroLosses != nil {
		return *x.HeroLosses
	}
	return 0
}

type CMsgDOTAProfileCard_Slot_Emoticon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EmoticonId *uint32 `protobuf:"varint,1,opt,name=emoticon_id,json=emoticonId" json:"emoticon_id,omitempty"`
}

func (x *CMsgDOTAProfileCard_Slot_Emoticon) Reset() {
	*x = CMsgDOTAProfileCard_Slot_Emoticon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAProfileCard_Slot_Emoticon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAProfileCard_Slot_Emoticon) ProtoMessage() {}

func (x *CMsgDOTAProfileCard_Slot_Emoticon) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAProfileCard_Slot_Emoticon.ProtoReflect.Descriptor instead.
func (*CMsgDOTAProfileCard_Slot_Emoticon) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{36, 0, 4}
}

func (x *CMsgDOTAProfileCard_Slot_Emoticon) GetEmoticonId() uint32 {
	if x != nil && x.EmoticonId != nil {
		return *x.EmoticonId
	}
	return 0
}

type CMsgDOTAProfileCard_Slot_Team struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamId *uint32 `protobuf:"varint,1,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
}

func (x *CMsgDOTAProfileCard_Slot_Team) Reset() {
	*x = CMsgDOTAProfileCard_Slot_Team{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAProfileCard_Slot_Team) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAProfileCard_Slot_Team) ProtoMessage() {}

func (x *CMsgDOTAProfileCard_Slot_Team) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAProfileCard_Slot_Team.ProtoReflect.Descriptor instead.
func (*CMsgDOTAProfileCard_Slot_Team) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{36, 0, 5}
}

func (x *CMsgDOTAProfileCard_Slot_Team) GetTeamId() uint32 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

type CMsgDOTARealtimeGameStats_TeamDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamNumber  *uint32                                    `protobuf:"varint,1,opt,name=team_number,json=teamNumber" json:"team_number,omitempty"`
	TeamId      *uint32                                    `protobuf:"varint,2,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	TeamName    *string                                    `protobuf:"bytes,3,opt,name=team_name,json=teamName" json:"team_name,omitempty"`
	TeamLogo    *uint64                                    `protobuf:"fixed64,4,opt,name=team_logo,json=teamLogo" json:"team_logo,omitempty"`
	TeamTag     *string                                    `protobuf:"bytes,10,opt,name=team_tag,json=teamTag" json:"team_tag,omitempty"`
	Score       *uint32                                    `protobuf:"varint,5,opt,name=score" json:"score,omitempty"`
	NetWorth    *uint32                                    `protobuf:"varint,9,opt,name=net_worth,json=netWorth" json:"net_worth,omitempty"`
	Players     []*CMsgDOTARealtimeGameStats_PlayerDetails `protobuf:"bytes,6,rep,name=players" json:"players,omitempty"`
	OnlyTeam    *bool                                      `protobuf:"varint,7,opt,name=only_team,json=onlyTeam" json:"only_team,omitempty"`
	Cheers      *uint32                                    `protobuf:"varint,8,opt,name=cheers" json:"cheers,omitempty"`
	TeamLogoUrl *string                                    `protobuf:"bytes,11,opt,name=team_logo_url,json=teamLogoUrl" json:"team_logo_url,omitempty"`
}

func (x *CMsgDOTARealtimeGameStats_TeamDetails) Reset() {
	*x = CMsgDOTARealtimeGameStats_TeamDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTARealtimeGameStats_TeamDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTARealtimeGameStats_TeamDetails) ProtoMessage() {}

func (x *CMsgDOTARealtimeGameStats_TeamDetails) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTARealtimeGameStats_TeamDetails.ProtoReflect.Descriptor instead.
func (*CMsgDOTARealtimeGameStats_TeamDetails) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{41, 0}
}

func (x *CMsgDOTARealtimeGameStats_TeamDetails) GetTeamNumber() uint32 {
	if x != nil && x.TeamNumber != nil {
		return *x.TeamNumber
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStats_TeamDetails) GetTeamId() uint32 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStats_TeamDetails) GetTeamName() string {
	if x != nil && x.TeamName != nil {
		return *x.TeamName
	}
	return ""
}

func (x *CMsgDOTARealtimeGameStats_TeamDetails) GetTeamLogo() uint64 {
	if x != nil && x.TeamLogo != nil {
		return *x.TeamLogo
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStats_TeamDetails) GetTeamTag() string {
	if x != nil && x.TeamTag != nil {
		return *x.TeamTag
	}
	return ""
}

func (x *CMsgDOTARealtimeGameStats_TeamDetails) GetScore() uint32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStats_TeamDetails) GetNetWorth() uint32 {
	if x != nil && x.NetWorth != nil {
		return *x.NetWorth
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStats_TeamDetails) GetPlayers() []*CMsgDOTARealtimeGameStats_PlayerDetails {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *CMsgDOTARealtimeGameStats_TeamDetails) GetOnlyTeam() bool {
	if x != nil && x.OnlyTeam != nil {
		return *x.OnlyTeam
	}
	return false
}

func (x *CMsgDOTARealtimeGameStats_TeamDetails) GetCheers() uint32 {
	if x != nil && x.Cheers != nil {
		return *x.Cheers
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStats_TeamDetails) GetTeamLogoUrl() string {
	if x != nil && x.TeamLogoUrl != nil {
		return *x.TeamLogoUrl
	}
	return ""
}

type CMsgDOTARealtimeGameStats_ItemDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemAbilityId *uint32 `protobuf:"varint,1,opt,name=item_ability_id,json=itemAbilityId" json:"item_ability_id,omitempty"`
	Name          *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Time          *int32  `protobuf:"varint,3,opt,name=time" json:"time,omitempty"`
	Sold          *bool   `protobuf:"varint,4,opt,name=sold" json:"sold,omitempty"`
	Stackcount    *uint32 `protobuf:"varint,5,opt,name=stackcount" json:"stackcount,omitempty"`
}

func (x *CMsgDOTARealtimeGameStats_ItemDetails) Reset() {
	*x = CMsgDOTARealtimeGameStats_ItemDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTARealtimeGameStats_ItemDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTARealtimeGameStats_ItemDetails) ProtoMessage() {}

func (x *CMsgDOTARealtimeGameStats_ItemDetails) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTARealtimeGameStats_ItemDetails.ProtoReflect.Descriptor instead.
func (*CMsgDOTARealtimeGameStats_ItemDetails) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{41, 1}
}

func (x *CMsgDOTARealtimeGameStats_ItemDetails) GetItemAbilityId() uint32 {
	if x != nil && x.ItemAbilityId != nil {
		return *x.ItemAbilityId
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStats_ItemDetails) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CMsgDOTARealtimeGameStats_ItemDetails) GetTime() int32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStats_ItemDetails) GetSold() bool {
	if x != nil && x.Sold != nil {
		return *x.Sold
	}
	return false
}

func (x *CMsgDOTARealtimeGameStats_ItemDetails) GetStackcount() uint32 {
	if x != nil && x.Stackcount != nil {
		return *x.Stackcount
	}
	return 0
}

type CMsgDOTARealtimeGameStats_AbilityDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          *uint32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name        *string  `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Level       *uint32  `protobuf:"varint,3,opt,name=level" json:"level,omitempty"`
	Cooldown    *float32 `protobuf:"fixed32,4,opt,name=cooldown" json:"cooldown,omitempty"`
	CooldownMax *float32 `protobuf:"fixed32,5,opt,name=cooldown_max,json=cooldownMax" json:"cooldown_max,omitempty"`
}

func (x *CMsgDOTARealtimeGameStats_AbilityDetails) Reset() {
	*x = CMsgDOTARealtimeGameStats_AbilityDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTARealtimeGameStats_AbilityDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTARealtimeGameStats_AbilityDetails) ProtoMessage() {}

func (x *CMsgDOTARealtimeGameStats_AbilityDetails) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTARealtimeGameStats_AbilityDetails.ProtoReflect.Descriptor instead.
func (*CMsgDOTARealtimeGameStats_AbilityDetails) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{41, 2}
}

func (x *CMsgDOTARealtimeGameStats_AbilityDetails) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStats_AbilityDetails) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CMsgDOTARealtimeGameStats_AbilityDetails) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStats_AbilityDetails) GetCooldown() float32 {
	if x != nil && x.Cooldown != nil {
		return *x.Cooldown
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStats_AbilityDetails) GetCooldownMax() float32 {
	if x != nil && x.CooldownMax != nil {
		return *x.CooldownMax
	}
	return 0
}

type CMsgDOTARealtimeGameStats_HeroToHeroStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Victimid *uint32 `protobuf:"varint,1,opt,name=victimid" json:"victimid,omitempty"`
	Kills    *uint32 `protobuf:"varint,2,opt,name=kills" json:"kills,omitempty"`
	Assists  *uint32 `protobuf:"varint,3,opt,name=assists" json:"assists,omitempty"`
}

func (x *CMsgDOTARealtimeGameStats_HeroToHeroStats) Reset() {
	*x = CMsgDOTARealtimeGameStats_HeroToHeroStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTARealtimeGameStats_HeroToHeroStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTARealtimeGameStats_HeroToHeroStats) ProtoMessage() {}

func (x *CMsgDOTARealtimeGameStats_HeroToHeroStats) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTARealtimeGameStats_HeroToHeroStats.ProtoReflect.Descriptor instead.
func (*CMsgDOTARealtimeGameStats_HeroToHeroStats) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{41, 3}
}

func (x *CMsgDOTARealtimeGameStats_HeroToHeroStats) GetVictimid() uint32 {
	if x != nil && x.Victimid != nil {
		return *x.Victimid
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStats_HeroToHeroStats) GetKills() uint32 {
	if x != nil && x.Kills != nil {
		return *x.Kills
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStats_HeroToHeroStats) GetAssists() uint32 {
	if x != nil && x.Assists != nil {
		return *x.Assists
	}
	return 0
}

type CMsgDOTARealtimeGameStats_AbilityList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id []uint32 `protobuf:"varint,1,rep,name=id" json:"id,omitempty"`
}

func (x *CMsgDOTARealtimeGameStats_AbilityList) Reset() {
	*x = CMsgDOTARealtimeGameStats_AbilityList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTARealtimeGameStats_AbilityList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTARealtimeGameStats_AbilityList) ProtoMessage() {}

func (x *CMsgDOTARealtimeGameStats_AbilityList) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTARealtimeGameStats_AbilityList.ProtoReflect.Descriptor instead.
func (*CMsgDOTARealtimeGameStats_AbilityList) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{41, 4}
}

func (x *CMsgDOTARealtimeGameStats_AbilityList) GetId() []uint32 {
	if x != nil {
		return x.Id
	}
	return nil
}

type CMsgDOTARealtimeGameStats_PlayerDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accountid        *uint32                                      `protobuf:"varint,1,opt,name=accountid" json:"accountid,omitempty"`
	Playerid         *uint32                                      `protobuf:"varint,2,opt,name=playerid" json:"playerid,omitempty"`
	Name             *string                                      `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Team             *uint32                                      `protobuf:"varint,4,opt,name=team" json:"team,omitempty"`
	Heroid           *uint32                                      `protobuf:"varint,5,opt,name=heroid" json:"heroid,omitempty"`
	Healthpoints     *uint32                                      `protobuf:"varint,6,opt,name=healthpoints" json:"healthpoints,omitempty"`
	Maxhealthpoints  *uint32                                      `protobuf:"varint,7,opt,name=maxhealthpoints" json:"maxhealthpoints,omitempty"`
	Healthregenrate  *float32                                     `protobuf:"fixed32,8,opt,name=healthregenrate" json:"healthregenrate,omitempty"`
	Manapoints       *uint32                                      `protobuf:"varint,9,opt,name=manapoints" json:"manapoints,omitempty"`
	Maxmanapoints    *uint32                                      `protobuf:"varint,10,opt,name=maxmanapoints" json:"maxmanapoints,omitempty"`
	Manaregenrate    *float32                                     `protobuf:"fixed32,11,opt,name=manaregenrate" json:"manaregenrate,omitempty"`
	BaseStrength     *uint32                                      `protobuf:"varint,12,opt,name=base_strength,json=baseStrength" json:"base_strength,omitempty"`
	BaseAgility      *uint32                                      `protobuf:"varint,13,opt,name=base_agility,json=baseAgility" json:"base_agility,omitempty"`
	BaseIntelligence *uint32                                      `protobuf:"varint,14,opt,name=base_intelligence,json=baseIntelligence" json:"base_intelligence,omitempty"`
	BaseArmor        *int32                                       `protobuf:"varint,15,opt,name=base_armor,json=baseArmor" json:"base_armor,omitempty"`
	BaseMovespeed    *uint32                                      `protobuf:"varint,16,opt,name=base_movespeed,json=baseMovespeed" json:"base_movespeed,omitempty"`
	BaseDamage       *uint32                                      `protobuf:"varint,17,opt,name=base_damage,json=baseDamage" json:"base_damage,omitempty"`
	Strength         *uint32                                      `protobuf:"varint,18,opt,name=strength" json:"strength,omitempty"`
	Agility          *uint32                                      `protobuf:"varint,19,opt,name=agility" json:"agility,omitempty"`
	Intelligence     *uint32                                      `protobuf:"varint,20,opt,name=intelligence" json:"intelligence,omitempty"`
	Armor            *int32                                       `protobuf:"varint,21,opt,name=armor" json:"armor,omitempty"`
	Movespeed        *uint32                                      `protobuf:"varint,22,opt,name=movespeed" json:"movespeed,omitempty"`
	Damage           *uint32                                      `protobuf:"varint,23,opt,name=damage" json:"damage,omitempty"`
	HeroDamage       *uint32                                      `protobuf:"varint,24,opt,name=hero_damage,json=heroDamage" json:"hero_damage,omitempty"`
	TowerDamage      *uint32                                      `protobuf:"varint,25,opt,name=tower_damage,json=towerDamage" json:"tower_damage,omitempty"`
	Abilities        []*CMsgDOTARealtimeGameStats_AbilityDetails  `protobuf:"bytes,26,rep,name=abilities" json:"abilities,omitempty"`
	Level            *uint32                                      `protobuf:"varint,27,opt,name=level" json:"level,omitempty"`
	KillCount        *uint32                                      `protobuf:"varint,28,opt,name=kill_count,json=killCount" json:"kill_count,omitempty"`
	DeathCount       *uint32                                      `protobuf:"varint,29,opt,name=death_count,json=deathCount" json:"death_count,omitempty"`
	AssistsCount     *uint32                                      `protobuf:"varint,30,opt,name=assists_count,json=assistsCount" json:"assists_count,omitempty"`
	DeniesCount      *uint32                                      `protobuf:"varint,31,opt,name=denies_count,json=deniesCount" json:"denies_count,omitempty"`
	LhCount          *uint32                                      `protobuf:"varint,32,opt,name=lh_count,json=lhCount" json:"lh_count,omitempty"`
	HeroHealing      *uint32                                      `protobuf:"varint,33,opt,name=hero_healing,json=heroHealing" json:"hero_healing,omitempty"`
	GoldPerMin       *uint32                                      `protobuf:"varint,34,opt,name=gold_per_min,json=goldPerMin" json:"gold_per_min,omitempty"`
	XpPerMin         *uint32                                      `protobuf:"varint,35,opt,name=xp_per_min,json=xpPerMin" json:"xp_per_min,omitempty"`
	NetGold          *uint32                                      `protobuf:"varint,36,opt,name=net_gold,json=netGold" json:"net_gold,omitempty"`
	Gold             *uint32                                      `protobuf:"varint,37,opt,name=gold" json:"gold,omitempty"`
	X                *float32                                     `protobuf:"fixed32,38,opt,name=x" json:"x,omitempty"`
	Y                *float32                                     `protobuf:"fixed32,39,opt,name=y" json:"y,omitempty"`
	RespawnTime      *int32                                       `protobuf:"varint,40,opt,name=respawn_time,json=respawnTime" json:"respawn_time,omitempty"`
	UltimateCooldown *uint32                                      `protobuf:"varint,41,opt,name=ultimate_cooldown,json=ultimateCooldown" json:"ultimate_cooldown,omitempty"`
	HasBuyback       *bool                                        `protobuf:"varint,42,opt,name=has_buyback,json=hasBuyback" json:"has_buyback,omitempty"`
	Items            []*CMsgDOTARealtimeGameStats_ItemDetails     `protobuf:"bytes,43,rep,name=items" json:"items,omitempty"`
	Stashitems       []*CMsgDOTARealtimeGameStats_ItemDetails     `protobuf:"bytes,44,rep,name=stashitems" json:"stashitems,omitempty"`
	Itemshoppinglist []*CMsgDOTARealtimeGameStats_ItemDetails     `protobuf:"bytes,45,rep,name=itemshoppinglist" json:"itemshoppinglist,omitempty"`
	Levelpoints      []*CMsgDOTARealtimeGameStats_AbilityList     `protobuf:"bytes,46,rep,name=levelpoints" json:"levelpoints,omitempty"`
	HeroToHeroStats  []*CMsgDOTARealtimeGameStats_HeroToHeroStats `protobuf:"bytes,47,rep,name=hero_to_hero_stats,json=heroToHeroStats" json:"hero_to_hero_stats,omitempty"`
	HasUltimate      *bool                                        `protobuf:"varint,48,opt,name=has_ultimate,json=hasUltimate" json:"has_ultimate,omitempty"`
	HasUltimateMana  *bool                                        `protobuf:"varint,49,opt,name=has_ultimate_mana,json=hasUltimateMana" json:"has_ultimate_mana,omitempty"`
}

func (x *CMsgDOTARealtimeGameStats_PlayerDetails) Reset() {
	*x = CMsgDOTARealtimeGameStats_PlayerDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTARealtimeGameStats_PlayerDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTARealtimeGameStats_PlayerDetails) ProtoMessage() {}

func (x *CMsgDOTARealtimeGameStats_PlayerDetails) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTARealtimeGameStats_PlayerDetails.ProtoReflect.Descriptor instead.
func (*CMsgDOTARealtimeGameStats_PlayerDetails) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{41, 5}
}

func (x *CMsgDOTARealtimeGameStats_PlayerDetails) GetAccountid() uint32 {
	if x != nil && x.Accountid != nil {
		return *x.Accountid
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStats_PlayerDetails) GetPlayerid() uint32 {
	if x != nil && x.Playerid != nil {
		return *x.Playerid
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStats_PlayerDetails) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CMsgDOTARealtimeGameStats_PlayerDetails) GetTeam() uint32 {
	if x != nil && x.Team != nil {
		return *x.Team
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStats_PlayerDetails) GetHeroid() uint32 {
	if x != nil && x.Heroid != nil {
		return *x.Heroid
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStats_PlayerDetails) GetHealthpoints() uint32 {
	if x != nil && x.Healthpoints != nil {
		return *x.Healthpoints
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStats_PlayerDetails) GetMaxhealthpoints() uint32 {
	if x != nil && x.Maxhealthpoints != nil {
		return *x.Maxhealthpoints
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStats_PlayerDetails) GetHealthregenrate() float32 {
	if x != nil && x.Healthregenrate != nil {
		return *x.Healthregenrate
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStats_PlayerDetails) GetManapoints() uint32 {
	if x != nil && x.Manapoints != nil {
		return *x.Manapoints
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStats_PlayerDetails) GetMaxmanapoints() uint32 {
	if x != nil && x.Maxmanapoints != nil {
		return *x.Maxmanapoints
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStats_PlayerDetails) GetManaregenrate() float32 {
	if x != nil && x.Manaregenrate != nil {
		return *x.Manaregenrate
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStats_PlayerDetails) GetBaseStrength() uint32 {
	if x != nil && x.BaseStrength != nil {
		return *x.BaseStrength
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStats_PlayerDetails) GetBaseAgility() uint32 {
	if x != nil && x.BaseAgility != nil {
		return *x.BaseAgility
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStats_PlayerDetails) GetBaseIntelligence() uint32 {
	if x != nil && x.BaseIntelligence != nil {
		return *x.BaseIntelligence
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStats_PlayerDetails) GetBaseArmor() int32 {
	if x != nil && x.BaseArmor != nil {
		return *x.BaseArmor
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStats_PlayerDetails) GetBaseMovespeed() uint32 {
	if x != nil && x.BaseMovespeed != nil {
		return *x.BaseMovespeed
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStats_PlayerDetails) GetBaseDamage() uint32 {
	if x != nil && x.BaseDamage != nil {
		return *x.BaseDamage
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStats_PlayerDetails) GetStrength() uint32 {
	if x != nil && x.Strength != nil {
		return *x.Strength
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStats_PlayerDetails) GetAgility() uint32 {
	if x != nil && x.Agility != nil {
		return *x.Agility
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStats_PlayerDetails) GetIntelligence() uint32 {
	if x != nil && x.Intelligence != nil {
		return *x.Intelligence
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStats_PlayerDetails) GetArmor() int32 {
	if x != nil && x.Armor != nil {
		return *x.Armor
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStats_PlayerDetails) GetMovespeed() uint32 {
	if x != nil && x.Movespeed != nil {
		return *x.Movespeed
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStats_PlayerDetails) GetDamage() uint32 {
	if x != nil && x.Damage != nil {
		return *x.Damage
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStats_PlayerDetails) GetHeroDamage() uint32 {
	if x != nil && x.HeroDamage != nil {
		return *x.HeroDamage
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStats_PlayerDetails) GetTowerDamage() uint32 {
	if x != nil && x.TowerDamage != nil {
		return *x.TowerDamage
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStats_PlayerDetails) GetAbilities() []*CMsgDOTARealtimeGameStats_AbilityDetails {
	if x != nil {
		return x.Abilities
	}
	return nil
}

func (x *CMsgDOTARealtimeGameStats_PlayerDetails) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStats_PlayerDetails) GetKillCount() uint32 {
	if x != nil && x.KillCount != nil {
		return *x.KillCount
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStats_PlayerDetails) GetDeathCount() uint32 {
	if x != nil && x.DeathCount != nil {
		return *x.DeathCount
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStats_PlayerDetails) GetAssistsCount() uint32 {
	if x != nil && x.AssistsCount != nil {
		return *x.AssistsCount
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStats_PlayerDetails) GetDeniesCount() uint32 {
	if x != nil && x.DeniesCount != nil {
		return *x.DeniesCount
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStats_PlayerDetails) GetLhCount() uint32 {
	if x != nil && x.LhCount != nil {
		return *x.LhCount
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStats_PlayerDetails) GetHeroHealing() uint32 {
	if x != nil && x.HeroHealing != nil {
		return *x.HeroHealing
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStats_PlayerDetails) GetGoldPerMin() uint32 {
	if x != nil && x.GoldPerMin != nil {
		return *x.GoldPerMin
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStats_PlayerDetails) GetXpPerMin() uint32 {
	if x != nil && x.XpPerMin != nil {
		return *x.XpPerMin
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStats_PlayerDetails) GetNetGold() uint32 {
	if x != nil && x.NetGold != nil {
		return *x.NetGold
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStats_PlayerDetails) GetGold() uint32 {
	if x != nil && x.Gold != nil {
		return *x.Gold
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStats_PlayerDetails) GetX() float32 {
	if x != nil && x.X != nil {
		return *x.X
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStats_PlayerDetails) GetY() float32 {
	if x != nil && x.Y != nil {
		return *x.Y
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStats_PlayerDetails) GetRespawnTime() int32 {
	if x != nil && x.RespawnTime != nil {
		return *x.RespawnTime
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStats_PlayerDetails) GetUltimateCooldown() uint32 {
	if x != nil && x.UltimateCooldown != nil {
		return *x.UltimateCooldown
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStats_PlayerDetails) GetHasBuyback() bool {
	if x != nil && x.HasBuyback != nil {
		return *x.HasBuyback
	}
	return false
}

func (x *CMsgDOTARealtimeGameStats_PlayerDetails) GetItems() []*CMsgDOTARealtimeGameStats_ItemDetails {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *CMsgDOTARealtimeGameStats_PlayerDetails) GetStashitems() []*CMsgDOTARealtimeGameStats_ItemDetails {
	if x != nil {
		return x.Stashitems
	}
	return nil
}

func (x *CMsgDOTARealtimeGameStats_PlayerDetails) GetItemshoppinglist() []*CMsgDOTARealtimeGameStats_ItemDetails {
	if x != nil {
		return x.Itemshoppinglist
	}
	return nil
}

func (x *CMsgDOTARealtimeGameStats_PlayerDetails) GetLevelpoints() []*CMsgDOTARealtimeGameStats_AbilityList {
	if x != nil {
		return x.Levelpoints
	}
	return nil
}

func (x *CMsgDOTARealtimeGameStats_PlayerDetails) GetHeroToHeroStats() []*CMsgDOTARealtimeGameStats_HeroToHeroStats {
	if x != nil {
		return x.HeroToHeroStats
	}
	return nil
}

func (x *CMsgDOTARealtimeGameStats_PlayerDetails) GetHasUltimate() bool {
	if x != nil && x.HasUltimate != nil {
		return *x.HasUltimate
	}
	return false
}

func (x *CMsgDOTARealtimeGameStats_PlayerDetails) GetHasUltimateMana() bool {
	if x != nil && x.HasUltimateMana != nil {
		return *x.HasUltimateMana
	}
	return false
}

type CMsgDOTARealtimeGameStats_BuildingDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Team      *uint32  `protobuf:"varint,2,opt,name=team" json:"team,omitempty"`
	Heading   *float32 `protobuf:"fixed32,3,opt,name=heading" json:"heading,omitempty"`
	Lane      *uint32  `protobuf:"varint,4,opt,name=lane" json:"lane,omitempty"`
	Tier      *uint32  `protobuf:"varint,5,opt,name=tier" json:"tier,omitempty"`
	Type      *uint32  `protobuf:"varint,6,opt,name=type" json:"type,omitempty"`
	X         *float32 `protobuf:"fixed32,7,opt,name=x" json:"x,omitempty"`
	Y         *float32 `protobuf:"fixed32,8,opt,name=y" json:"y,omitempty"`
	Destroyed *bool    `protobuf:"varint,9,opt,name=destroyed" json:"destroyed,omitempty"`
}

func (x *CMsgDOTARealtimeGameStats_BuildingDetails) Reset() {
	*x = CMsgDOTARealtimeGameStats_BuildingDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTARealtimeGameStats_BuildingDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTARealtimeGameStats_BuildingDetails) ProtoMessage() {}

func (x *CMsgDOTARealtimeGameStats_BuildingDetails) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTARealtimeGameStats_BuildingDetails.ProtoReflect.Descriptor instead.
func (*CMsgDOTARealtimeGameStats_BuildingDetails) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{41, 6}
}

func (x *CMsgDOTARealtimeGameStats_BuildingDetails) GetTeam() uint32 {
	if x != nil && x.Team != nil {
		return *x.Team
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStats_BuildingDetails) GetHeading() float32 {
	if x != nil && x.Heading != nil {
		return *x.Heading
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStats_BuildingDetails) GetLane() uint32 {
	if x != nil && x.Lane != nil {
		return *x.Lane
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStats_BuildingDetails) GetTier() uint32 {
	if x != nil && x.Tier != nil {
		return *x.Tier
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStats_BuildingDetails) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStats_BuildingDetails) GetX() float32 {
	if x != nil && x.X != nil {
		return *x.X
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStats_BuildingDetails) GetY() float32 {
	if x != nil && x.Y != nil {
		return *x.Y
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStats_BuildingDetails) GetDestroyed() bool {
	if x != nil && x.Destroyed != nil {
		return *x.Destroyed
	}
	return false
}

type CMsgDOTARealtimeGameStats_KillDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId       *uint32 `protobuf:"varint,1,opt,name=player_id,json=playerId" json:"player_id,omitempty"`
	DeathTime      *int32  `protobuf:"varint,2,opt,name=death_time,json=deathTime" json:"death_time,omitempty"`
	KillerPlayerId *uint32 `protobuf:"varint,3,opt,name=killer_player_id,json=killerPlayerId" json:"killer_player_id,omitempty"`
}

func (x *CMsgDOTARealtimeGameStats_KillDetails) Reset() {
	*x = CMsgDOTARealtimeGameStats_KillDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTARealtimeGameStats_KillDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTARealtimeGameStats_KillDetails) ProtoMessage() {}

func (x *CMsgDOTARealtimeGameStats_KillDetails) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTARealtimeGameStats_KillDetails.ProtoReflect.Descriptor instead.
func (*CMsgDOTARealtimeGameStats_KillDetails) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{41, 7}
}

func (x *CMsgDOTARealtimeGameStats_KillDetails) GetPlayerId() uint32 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStats_KillDetails) GetDeathTime() int32 {
	if x != nil && x.DeathTime != nil {
		return *x.DeathTime
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStats_KillDetails) GetKillerPlayerId() uint32 {
	if x != nil && x.KillerPlayerId != nil {
		return *x.KillerPlayerId
	}
	return 0
}

type CMsgDOTARealtimeGameStats_BroadcasterDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId      *uint32 `protobuf:"varint,1,opt,name=player_id,json=playerId" json:"player_id,omitempty"`
	SelectedHero  *uint32 `protobuf:"varint,2,opt,name=selected_hero,json=selectedHero" json:"selected_hero,omitempty"`
	SelectedGraph *uint32 `protobuf:"varint,3,opt,name=selected_graph,json=selectedGraph" json:"selected_graph,omitempty"`
}

func (x *CMsgDOTARealtimeGameStats_BroadcasterDetails) Reset() {
	*x = CMsgDOTARealtimeGameStats_BroadcasterDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTARealtimeGameStats_BroadcasterDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTARealtimeGameStats_BroadcasterDetails) ProtoMessage() {}

func (x *CMsgDOTARealtimeGameStats_BroadcasterDetails) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTARealtimeGameStats_BroadcasterDetails.ProtoReflect.Descriptor instead.
func (*CMsgDOTARealtimeGameStats_BroadcasterDetails) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{41, 8}
}

func (x *CMsgDOTARealtimeGameStats_BroadcasterDetails) GetPlayerId() uint32 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStats_BroadcasterDetails) GetSelectedHero() uint32 {
	if x != nil && x.SelectedHero != nil {
		return *x.SelectedHero
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStats_BroadcasterDetails) GetSelectedGraph() uint32 {
	if x != nil && x.SelectedGraph != nil {
		return *x.SelectedGraph
	}
	return 0
}

type CMsgDOTARealtimeGameStats_PickBanDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hero *uint32 `protobuf:"varint,1,opt,name=hero" json:"hero,omitempty"`
	Team *uint32 `protobuf:"varint,2,opt,name=team" json:"team,omitempty"`
}

func (x *CMsgDOTARealtimeGameStats_PickBanDetails) Reset() {
	*x = CMsgDOTARealtimeGameStats_PickBanDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTARealtimeGameStats_PickBanDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTARealtimeGameStats_PickBanDetails) ProtoMessage() {}

func (x *CMsgDOTARealtimeGameStats_PickBanDetails) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTARealtimeGameStats_PickBanDetails.ProtoReflect.Descriptor instead.
func (*CMsgDOTARealtimeGameStats_PickBanDetails) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{41, 9}
}

func (x *CMsgDOTARealtimeGameStats_PickBanDetails) GetHero() uint32 {
	if x != nil && x.Hero != nil {
		return *x.Hero
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStats_PickBanDetails) GetTeam() uint32 {
	if x != nil && x.Team != nil {
		return *x.Team
	}
	return 0
}

type CMsgDOTARealtimeGameStats_MatchDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerSteamId       *uint64                                         `protobuf:"fixed64,1,opt,name=server_steam_id,json=serverSteamId" json:"server_steam_id,omitempty"`
	Matchid             *uint64                                         `protobuf:"varint,2,opt,name=matchid" json:"matchid,omitempty"`
	Timestamp           *uint32                                         `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	TimeOfDay           *float32                                        `protobuf:"fixed32,4,opt,name=time_of_day,json=timeOfDay" json:"time_of_day,omitempty"`
	IsNightstalkerNight *bool                                           `protobuf:"varint,5,opt,name=is_nightstalker_night,json=isNightstalkerNight" json:"is_nightstalker_night,omitempty"`
	GameTime            *int32                                          `protobuf:"varint,6,opt,name=game_time,json=gameTime" json:"game_time,omitempty"`
	GameState           *uint32                                         `protobuf:"varint,19,opt,name=game_state,json=gameState" json:"game_state,omitempty"`
	TeamidRadiant       *uint32                                         `protobuf:"varint,8,opt,name=teamid_radiant,json=teamidRadiant" json:"teamid_radiant,omitempty"`
	TeamidDire          *uint32                                         `protobuf:"varint,9,opt,name=teamid_dire,json=teamidDire" json:"teamid_dire,omitempty"`
	Picks               []*CMsgDOTARealtimeGameStats_PickBanDetails     `protobuf:"bytes,10,rep,name=picks" json:"picks,omitempty"`
	Bans                []*CMsgDOTARealtimeGameStats_PickBanDetails     `protobuf:"bytes,11,rep,name=bans" json:"bans,omitempty"`
	Kills               []*CMsgDOTARealtimeGameStats_KillDetails        `protobuf:"bytes,12,rep,name=kills" json:"kills,omitempty"`
	Broadcasters        []*CMsgDOTARealtimeGameStats_BroadcasterDetails `protobuf:"bytes,13,rep,name=broadcasters" json:"broadcasters,omitempty"`
	GameMode            *uint32                                         `protobuf:"varint,14,opt,name=game_mode,json=gameMode" json:"game_mode,omitempty"`
	LeagueId            *uint32                                         `protobuf:"varint,15,opt,name=league_id,json=leagueId" json:"league_id,omitempty"`
	LeagueNodeId        *uint32                                         `protobuf:"varint,18,opt,name=league_node_id,json=leagueNodeId" json:"league_node_id,omitempty"`
	SingleTeam          *bool                                           `protobuf:"varint,16,opt,name=single_team,json=singleTeam" json:"single_team,omitempty"`
	CheersPeak          *uint32                                         `protobuf:"varint,17,opt,name=cheers_peak,json=cheersPeak" json:"cheers_peak,omitempty"`
}

func (x *CMsgDOTARealtimeGameStats_MatchDetails) Reset() {
	*x = CMsgDOTARealtimeGameStats_MatchDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTARealtimeGameStats_MatchDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTARealtimeGameStats_MatchDetails) ProtoMessage() {}

func (x *CMsgDOTARealtimeGameStats_MatchDetails) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTARealtimeGameStats_MatchDetails.ProtoReflect.Descriptor instead.
func (*CMsgDOTARealtimeGameStats_MatchDetails) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{41, 10}
}

func (x *CMsgDOTARealtimeGameStats_MatchDetails) GetServerSteamId() uint64 {
	if x != nil && x.ServerSteamId != nil {
		return *x.ServerSteamId
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStats_MatchDetails) GetMatchid() uint64 {
	if x != nil && x.Matchid != nil {
		return *x.Matchid
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStats_MatchDetails) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStats_MatchDetails) GetTimeOfDay() float32 {
	if x != nil && x.TimeOfDay != nil {
		return *x.TimeOfDay
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStats_MatchDetails) GetIsNightstalkerNight() bool {
	if x != nil && x.IsNightstalkerNight != nil {
		return *x.IsNightstalkerNight
	}
	return false
}

func (x *CMsgDOTARealtimeGameStats_MatchDetails) GetGameTime() int32 {
	if x != nil && x.GameTime != nil {
		return *x.GameTime
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStats_MatchDetails) GetGameState() uint32 {
	if x != nil && x.GameState != nil {
		return *x.GameState
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStats_MatchDetails) GetTeamidRadiant() uint32 {
	if x != nil && x.TeamidRadiant != nil {
		return *x.TeamidRadiant
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStats_MatchDetails) GetTeamidDire() uint32 {
	if x != nil && x.TeamidDire != nil {
		return *x.TeamidDire
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStats_MatchDetails) GetPicks() []*CMsgDOTARealtimeGameStats_PickBanDetails {
	if x != nil {
		return x.Picks
	}
	return nil
}

func (x *CMsgDOTARealtimeGameStats_MatchDetails) GetBans() []*CMsgDOTARealtimeGameStats_PickBanDetails {
	if x != nil {
		return x.Bans
	}
	return nil
}

func (x *CMsgDOTARealtimeGameStats_MatchDetails) GetKills() []*CMsgDOTARealtimeGameStats_KillDetails {
	if x != nil {
		return x.Kills
	}
	return nil
}

func (x *CMsgDOTARealtimeGameStats_MatchDetails) GetBroadcasters() []*CMsgDOTARealtimeGameStats_BroadcasterDetails {
	if x != nil {
		return x.Broadcasters
	}
	return nil
}

func (x *CMsgDOTARealtimeGameStats_MatchDetails) GetGameMode() uint32 {
	if x != nil && x.GameMode != nil {
		return *x.GameMode
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStats_MatchDetails) GetLeagueId() uint32 {
	if x != nil && x.LeagueId != nil {
		return *x.LeagueId
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStats_MatchDetails) GetLeagueNodeId() uint32 {
	if x != nil && x.LeagueNodeId != nil {
		return *x.LeagueNodeId
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStats_MatchDetails) GetSingleTeam() bool {
	if x != nil && x.SingleTeam != nil {
		return *x.SingleTeam
	}
	return false
}

func (x *CMsgDOTARealtimeGameStats_MatchDetails) GetCheersPeak() uint32 {
	if x != nil && x.CheersPeak != nil {
		return *x.CheersPeak
	}
	return 0
}

type CMsgDOTARealtimeGameStats_GraphData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GraphGold    []int32                                                  `protobuf:"varint,1,rep,name=graph_gold,json=graphGold" json:"graph_gold,omitempty"`
	GraphXp      []int32                                                  `protobuf:"varint,2,rep,name=graph_xp,json=graphXp" json:"graph_xp,omitempty"`
	GraphKill    []int32                                                  `protobuf:"varint,3,rep,name=graph_kill,json=graphKill" json:"graph_kill,omitempty"`
	GraphTower   []int32                                                  `protobuf:"varint,4,rep,name=graph_tower,json=graphTower" json:"graph_tower,omitempty"`
	GraphRax     []int32                                                  `protobuf:"varint,5,rep,name=graph_rax,json=graphRax" json:"graph_rax,omitempty"`
	TeamLocStats []*CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats `protobuf:"bytes,6,rep,name=team_loc_stats,json=teamLocStats" json:"team_loc_stats,omitempty"`
}

func (x *CMsgDOTARealtimeGameStats_GraphData) Reset() {
	*x = CMsgDOTARealtimeGameStats_GraphData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTARealtimeGameStats_GraphData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTARealtimeGameStats_GraphData) ProtoMessage() {}

func (x *CMsgDOTARealtimeGameStats_GraphData) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTARealtimeGameStats_GraphData.ProtoReflect.Descriptor instead.
func (*CMsgDOTARealtimeGameStats_GraphData) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{41, 11}
}

func (x *CMsgDOTARealtimeGameStats_GraphData) GetGraphGold() []int32 {
	if x != nil {
		return x.GraphGold
	}
	return nil
}

func (x *CMsgDOTARealtimeGameStats_GraphData) GetGraphXp() []int32 {
	if x != nil {
		return x.GraphXp
	}
	return nil
}

func (x *CMsgDOTARealtimeGameStats_GraphData) GetGraphKill() []int32 {
	if x != nil {
		return x.GraphKill
	}
	return nil
}

func (x *CMsgDOTARealtimeGameStats_GraphData) GetGraphTower() []int32 {
	if x != nil {
		return x.GraphTower
	}
	return nil
}

func (x *CMsgDOTARealtimeGameStats_GraphData) GetGraphRax() []int32 {
	if x != nil {
		return x.GraphRax
	}
	return nil
}

func (x *CMsgDOTARealtimeGameStats_GraphData) GetTeamLocStats() []*CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats {
	if x != nil {
		return x.TeamLocStats
	}
	return nil
}

type CMsgDOTARealtimeGameStats_GraphData_LocationStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stats []int32 `protobuf:"varint,1,rep,name=stats" json:"stats,omitempty"`
}

func (x *CMsgDOTARealtimeGameStats_GraphData_LocationStats) Reset() {
	*x = CMsgDOTARealtimeGameStats_GraphData_LocationStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTARealtimeGameStats_GraphData_LocationStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTARealtimeGameStats_GraphData_LocationStats) ProtoMessage() {}

func (x *CMsgDOTARealtimeGameStats_GraphData_LocationStats) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTARealtimeGameStats_GraphData_LocationStats.ProtoReflect.Descriptor instead.
func (*CMsgDOTARealtimeGameStats_GraphData_LocationStats) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{41, 11, 0}
}

func (x *CMsgDOTARealtimeGameStats_GraphData_LocationStats) GetStats() []int32 {
	if x != nil {
		return x.Stats
	}
	return nil
}

type CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocStats []*CMsgDOTARealtimeGameStats_GraphData_LocationStats `protobuf:"bytes,1,rep,name=loc_stats,json=locStats" json:"loc_stats,omitempty"`
}

func (x *CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats) Reset() {
	*x = CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats) ProtoMessage() {}

func (x *CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats.ProtoReflect.Descriptor instead.
func (*CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{41, 11, 1}
}

func (x *CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats) GetLocStats() []*CMsgDOTARealtimeGameStats_GraphData_LocationStats {
	if x != nil {
		return x.LocStats
	}
	return nil
}

type CMsgDOTARealtimeGameStatsTerse_TeamDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamNumber  *uint32                                         `protobuf:"varint,1,opt,name=team_number,json=teamNumber" json:"team_number,omitempty"`
	TeamId      *uint32                                         `protobuf:"varint,2,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	TeamName    *string                                         `protobuf:"bytes,3,opt,name=team_name,json=teamName" json:"team_name,omitempty"`
	TeamTag     *string                                         `protobuf:"bytes,8,opt,name=team_tag,json=teamTag" json:"team_tag,omitempty"`
	TeamLogo    *uint64                                         `protobuf:"fixed64,4,opt,name=team_logo,json=teamLogo" json:"team_logo,omitempty"`
	Score       *uint32                                         `protobuf:"varint,5,opt,name=score" json:"score,omitempty"`
	NetWorth    *uint32                                         `protobuf:"varint,7,opt,name=net_worth,json=netWorth" json:"net_worth,omitempty"`
	TeamLogoUrl *string                                         `protobuf:"bytes,9,opt,name=team_logo_url,json=teamLogoUrl" json:"team_logo_url,omitempty"`
	Players     []*CMsgDOTARealtimeGameStatsTerse_PlayerDetails `protobuf:"bytes,6,rep,name=players" json:"players,omitempty"`
}

func (x *CMsgDOTARealtimeGameStatsTerse_TeamDetails) Reset() {
	*x = CMsgDOTARealtimeGameStatsTerse_TeamDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTARealtimeGameStatsTerse_TeamDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTARealtimeGameStatsTerse_TeamDetails) ProtoMessage() {}

func (x *CMsgDOTARealtimeGameStatsTerse_TeamDetails) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTARealtimeGameStatsTerse_TeamDetails.ProtoReflect.Descriptor instead.
func (*CMsgDOTARealtimeGameStatsTerse_TeamDetails) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{42, 0}
}

func (x *CMsgDOTARealtimeGameStatsTerse_TeamDetails) GetTeamNumber() uint32 {
	if x != nil && x.TeamNumber != nil {
		return *x.TeamNumber
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStatsTerse_TeamDetails) GetTeamId() uint32 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStatsTerse_TeamDetails) GetTeamName() string {
	if x != nil && x.TeamName != nil {
		return *x.TeamName
	}
	return ""
}

func (x *CMsgDOTARealtimeGameStatsTerse_TeamDetails) GetTeamTag() string {
	if x != nil && x.TeamTag != nil {
		return *x.TeamTag
	}
	return ""
}

func (x *CMsgDOTARealtimeGameStatsTerse_TeamDetails) GetTeamLogo() uint64 {
	if x != nil && x.TeamLogo != nil {
		return *x.TeamLogo
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStatsTerse_TeamDetails) GetScore() uint32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStatsTerse_TeamDetails) GetNetWorth() uint32 {
	if x != nil && x.NetWorth != nil {
		return *x.NetWorth
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStatsTerse_TeamDetails) GetTeamLogoUrl() string {
	if x != nil && x.TeamLogoUrl != nil {
		return *x.TeamLogoUrl
	}
	return ""
}

func (x *CMsgDOTARealtimeGameStatsTerse_TeamDetails) GetPlayers() []*CMsgDOTARealtimeGameStatsTerse_PlayerDetails {
	if x != nil {
		return x.Players
	}
	return nil
}

type CMsgDOTARealtimeGameStatsTerse_PlayerDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accountid    *uint32  `protobuf:"varint,1,opt,name=accountid" json:"accountid,omitempty"`
	Playerid     *uint32  `protobuf:"varint,2,opt,name=playerid" json:"playerid,omitempty"`
	Name         *string  `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Team         *uint32  `protobuf:"varint,4,opt,name=team" json:"team,omitempty"`
	Heroid       *uint32  `protobuf:"varint,5,opt,name=heroid" json:"heroid,omitempty"`
	Level        *uint32  `protobuf:"varint,6,opt,name=level" json:"level,omitempty"`
	KillCount    *uint32  `protobuf:"varint,7,opt,name=kill_count,json=killCount" json:"kill_count,omitempty"`
	DeathCount   *uint32  `protobuf:"varint,8,opt,name=death_count,json=deathCount" json:"death_count,omitempty"`
	AssistsCount *uint32  `protobuf:"varint,9,opt,name=assists_count,json=assistsCount" json:"assists_count,omitempty"`
	DeniesCount  *uint32  `protobuf:"varint,10,opt,name=denies_count,json=deniesCount" json:"denies_count,omitempty"`
	LhCount      *uint32  `protobuf:"varint,11,opt,name=lh_count,json=lhCount" json:"lh_count,omitempty"`
	Gold         *uint32  `protobuf:"varint,12,opt,name=gold" json:"gold,omitempty"`
	X            *float32 `protobuf:"fixed32,13,opt,name=x" json:"x,omitempty"`
	Y            *float32 `protobuf:"fixed32,14,opt,name=y" json:"y,omitempty"`
	NetWorth     *uint32  `protobuf:"varint,15,opt,name=net_worth,json=netWorth" json:"net_worth,omitempty"`
	Abilities    []uint32 `protobuf:"varint,16,rep,name=abilities" json:"abilities,omitempty"`
	Items        []uint32 `protobuf:"varint,17,rep,name=items" json:"items,omitempty"`
}

func (x *CMsgDOTARealtimeGameStatsTerse_PlayerDetails) Reset() {
	*x = CMsgDOTARealtimeGameStatsTerse_PlayerDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTARealtimeGameStatsTerse_PlayerDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTARealtimeGameStatsTerse_PlayerDetails) ProtoMessage() {}

func (x *CMsgDOTARealtimeGameStatsTerse_PlayerDetails) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTARealtimeGameStatsTerse_PlayerDetails.ProtoReflect.Descriptor instead.
func (*CMsgDOTARealtimeGameStatsTerse_PlayerDetails) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{42, 1}
}

func (x *CMsgDOTARealtimeGameStatsTerse_PlayerDetails) GetAccountid() uint32 {
	if x != nil && x.Accountid != nil {
		return *x.Accountid
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStatsTerse_PlayerDetails) GetPlayerid() uint32 {
	if x != nil && x.Playerid != nil {
		return *x.Playerid
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStatsTerse_PlayerDetails) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CMsgDOTARealtimeGameStatsTerse_PlayerDetails) GetTeam() uint32 {
	if x != nil && x.Team != nil {
		return *x.Team
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStatsTerse_PlayerDetails) GetHeroid() uint32 {
	if x != nil && x.Heroid != nil {
		return *x.Heroid
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStatsTerse_PlayerDetails) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStatsTerse_PlayerDetails) GetKillCount() uint32 {
	if x != nil && x.KillCount != nil {
		return *x.KillCount
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStatsTerse_PlayerDetails) GetDeathCount() uint32 {
	if x != nil && x.DeathCount != nil {
		return *x.DeathCount
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStatsTerse_PlayerDetails) GetAssistsCount() uint32 {
	if x != nil && x.AssistsCount != nil {
		return *x.AssistsCount
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStatsTerse_PlayerDetails) GetDeniesCount() uint32 {
	if x != nil && x.DeniesCount != nil {
		return *x.DeniesCount
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStatsTerse_PlayerDetails) GetLhCount() uint32 {
	if x != nil && x.LhCount != nil {
		return *x.LhCount
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStatsTerse_PlayerDetails) GetGold() uint32 {
	if x != nil && x.Gold != nil {
		return *x.Gold
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStatsTerse_PlayerDetails) GetX() float32 {
	if x != nil && x.X != nil {
		return *x.X
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStatsTerse_PlayerDetails) GetY() float32 {
	if x != nil && x.Y != nil {
		return *x.Y
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStatsTerse_PlayerDetails) GetNetWorth() uint32 {
	if x != nil && x.NetWorth != nil {
		return *x.NetWorth
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStatsTerse_PlayerDetails) GetAbilities() []uint32 {
	if x != nil {
		return x.Abilities
	}
	return nil
}

func (x *CMsgDOTARealtimeGameStatsTerse_PlayerDetails) GetItems() []uint32 {
	if x != nil {
		return x.Items
	}
	return nil
}

type CMsgDOTARealtimeGameStatsTerse_BuildingDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Team      *uint32  `protobuf:"varint,1,opt,name=team" json:"team,omitempty"`
	Heading   *float32 `protobuf:"fixed32,2,opt,name=heading" json:"heading,omitempty"`
	Type      *uint32  `protobuf:"varint,3,opt,name=type" json:"type,omitempty"`
	Lane      *uint32  `protobuf:"varint,4,opt,name=lane" json:"lane,omitempty"`
	Tier      *uint32  `protobuf:"varint,5,opt,name=tier" json:"tier,omitempty"`
	X         *float32 `protobuf:"fixed32,6,opt,name=x" json:"x,omitempty"`
	Y         *float32 `protobuf:"fixed32,7,opt,name=y" json:"y,omitempty"`
	Destroyed *bool    `protobuf:"varint,8,opt,name=destroyed" json:"destroyed,omitempty"`
}

func (x *CMsgDOTARealtimeGameStatsTerse_BuildingDetails) Reset() {
	*x = CMsgDOTARealtimeGameStatsTerse_BuildingDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTARealtimeGameStatsTerse_BuildingDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTARealtimeGameStatsTerse_BuildingDetails) ProtoMessage() {}

func (x *CMsgDOTARealtimeGameStatsTerse_BuildingDetails) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTARealtimeGameStatsTerse_BuildingDetails.ProtoReflect.Descriptor instead.
func (*CMsgDOTARealtimeGameStatsTerse_BuildingDetails) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{42, 2}
}

func (x *CMsgDOTARealtimeGameStatsTerse_BuildingDetails) GetTeam() uint32 {
	if x != nil && x.Team != nil {
		return *x.Team
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStatsTerse_BuildingDetails) GetHeading() float32 {
	if x != nil && x.Heading != nil {
		return *x.Heading
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStatsTerse_BuildingDetails) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStatsTerse_BuildingDetails) GetLane() uint32 {
	if x != nil && x.Lane != nil {
		return *x.Lane
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStatsTerse_BuildingDetails) GetTier() uint32 {
	if x != nil && x.Tier != nil {
		return *x.Tier
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStatsTerse_BuildingDetails) GetX() float32 {
	if x != nil && x.X != nil {
		return *x.X
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStatsTerse_BuildingDetails) GetY() float32 {
	if x != nil && x.Y != nil {
		return *x.Y
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStatsTerse_BuildingDetails) GetDestroyed() bool {
	if x != nil && x.Destroyed != nil {
		return *x.Destroyed
	}
	return false
}

type CMsgDOTARealtimeGameStatsTerse_PickBanDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hero *uint32 `protobuf:"varint,1,opt,name=hero" json:"hero,omitempty"`
	Team *uint32 `protobuf:"varint,2,opt,name=team" json:"team,omitempty"`
}

func (x *CMsgDOTARealtimeGameStatsTerse_PickBanDetails) Reset() {
	*x = CMsgDOTARealtimeGameStatsTerse_PickBanDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTARealtimeGameStatsTerse_PickBanDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTARealtimeGameStatsTerse_PickBanDetails) ProtoMessage() {}

func (x *CMsgDOTARealtimeGameStatsTerse_PickBanDetails) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTARealtimeGameStatsTerse_PickBanDetails.ProtoReflect.Descriptor instead.
func (*CMsgDOTARealtimeGameStatsTerse_PickBanDetails) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{42, 3}
}

func (x *CMsgDOTARealtimeGameStatsTerse_PickBanDetails) GetHero() uint32 {
	if x != nil && x.Hero != nil {
		return *x.Hero
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStatsTerse_PickBanDetails) GetTeam() uint32 {
	if x != nil && x.Team != nil {
		return *x.Team
	}
	return 0
}

type CMsgDOTARealtimeGameStatsTerse_MatchDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerSteamId              *uint64                                          `protobuf:"fixed64,1,opt,name=server_steam_id,json=serverSteamId" json:"server_steam_id,omitempty"`
	Matchid                    *uint64                                          `protobuf:"varint,2,opt,name=matchid" json:"matchid,omitempty"`
	Timestamp                  *uint32                                          `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	GameTime                   *int32                                           `protobuf:"varint,4,opt,name=game_time,json=gameTime" json:"game_time,omitempty"`
	SteamBroadcasterAccountIds []uint32                                         `protobuf:"varint,6,rep,name=steam_broadcaster_account_ids,json=steamBroadcasterAccountIds" json:"steam_broadcaster_account_ids,omitempty"`
	GameMode                   *uint32                                          `protobuf:"varint,7,opt,name=game_mode,json=gameMode" json:"game_mode,omitempty"`
	LeagueId                   *uint32                                          `protobuf:"varint,8,opt,name=league_id,json=leagueId" json:"league_id,omitempty"`
	LeagueNodeId               *uint32                                          `protobuf:"varint,9,opt,name=league_node_id,json=leagueNodeId" json:"league_node_id,omitempty"`
	GameState                  *uint32                                          `protobuf:"varint,10,opt,name=game_state,json=gameState" json:"game_state,omitempty"`
	Picks                      []*CMsgDOTARealtimeGameStatsTerse_PickBanDetails `protobuf:"bytes,11,rep,name=picks" json:"picks,omitempty"`
	Bans                       []*CMsgDOTARealtimeGameStatsTerse_PickBanDetails `protobuf:"bytes,12,rep,name=bans" json:"bans,omitempty"`
}

func (x *CMsgDOTARealtimeGameStatsTerse_MatchDetails) Reset() {
	*x = CMsgDOTARealtimeGameStatsTerse_MatchDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTARealtimeGameStatsTerse_MatchDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTARealtimeGameStatsTerse_MatchDetails) ProtoMessage() {}

func (x *CMsgDOTARealtimeGameStatsTerse_MatchDetails) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTARealtimeGameStatsTerse_MatchDetails.ProtoReflect.Descriptor instead.
func (*CMsgDOTARealtimeGameStatsTerse_MatchDetails) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{42, 4}
}

func (x *CMsgDOTARealtimeGameStatsTerse_MatchDetails) GetServerSteamId() uint64 {
	if x != nil && x.ServerSteamId != nil {
		return *x.ServerSteamId
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStatsTerse_MatchDetails) GetMatchid() uint64 {
	if x != nil && x.Matchid != nil {
		return *x.Matchid
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStatsTerse_MatchDetails) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStatsTerse_MatchDetails) GetGameTime() int32 {
	if x != nil && x.GameTime != nil {
		return *x.GameTime
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStatsTerse_MatchDetails) GetSteamBroadcasterAccountIds() []uint32 {
	if x != nil {
		return x.SteamBroadcasterAccountIds
	}
	return nil
}

func (x *CMsgDOTARealtimeGameStatsTerse_MatchDetails) GetGameMode() uint32 {
	if x != nil && x.GameMode != nil {
		return *x.GameMode
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStatsTerse_MatchDetails) GetLeagueId() uint32 {
	if x != nil && x.LeagueId != nil {
		return *x.LeagueId
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStatsTerse_MatchDetails) GetLeagueNodeId() uint32 {
	if x != nil && x.LeagueNodeId != nil {
		return *x.LeagueNodeId
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStatsTerse_MatchDetails) GetGameState() uint32 {
	if x != nil && x.GameState != nil {
		return *x.GameState
	}
	return 0
}

func (x *CMsgDOTARealtimeGameStatsTerse_MatchDetails) GetPicks() []*CMsgDOTARealtimeGameStatsTerse_PickBanDetails {
	if x != nil {
		return x.Picks
	}
	return nil
}

func (x *CMsgDOTARealtimeGameStatsTerse_MatchDetails) GetBans() []*CMsgDOTARealtimeGameStatsTerse_PickBanDetails {
	if x != nil {
		return x.Bans
	}
	return nil
}

type CMsgDOTARealtimeGameStatsTerse_GraphData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GraphGold []int32 `protobuf:"varint,1,rep,name=graph_gold,json=graphGold" json:"graph_gold,omitempty"`
}

func (x *CMsgDOTARealtimeGameStatsTerse_GraphData) Reset() {
	*x = CMsgDOTARealtimeGameStatsTerse_GraphData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTARealtimeGameStatsTerse_GraphData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTARealtimeGameStatsTerse_GraphData) ProtoMessage() {}

func (x *CMsgDOTARealtimeGameStatsTerse_GraphData) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTARealtimeGameStatsTerse_GraphData.ProtoReflect.Descriptor instead.
func (*CMsgDOTARealtimeGameStatsTerse_GraphData) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{42, 5}
}

func (x *CMsgDOTARealtimeGameStatsTerse_GraphData) GetGraphGold() []int32 {
	if x != nil {
		return x.GraphGold
	}
	return nil
}

type CMsgDOTASeasonRewards_Reward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        *string                            `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Itemdef     *uint32                            `protobuf:"varint,2,opt,name=itemdef" json:"itemdef,omitempty"`
	Importance  *uint32                            `protobuf:"varint,3,opt,name=importance" json:"importance,omitempty"`
	BaseLevel   *uint32                            `protobuf:"varint,4,opt,name=base_level,json=baseLevel" json:"base_level,omitempty"`
	RepeatLevel *uint32                            `protobuf:"varint,5,opt,name=repeat_level,json=repeatLevel" json:"repeat_level,omitempty"`
	RewardType  *CMsgDOTASeasonRewards_ERewardType `protobuf:"varint,6,opt,name=reward_type,json=rewardType,enum=dota.CMsgDOTASeasonRewards_ERewardType,def=0" json:"reward_type,omitempty"`
	Image       *string                            `protobuf:"bytes,7,opt,name=image" json:"image,omitempty"`
	ActionId    *uint32                            `protobuf:"varint,8,opt,name=action_id,json=actionId" json:"action_id,omitempty"`
	EffectIndex *uint32                            `protobuf:"varint,9,opt,name=effect_index,json=effectIndex" json:"effect_index,omitempty"`
}

// Default values for CMsgDOTASeasonRewards_Reward fields.
const (
	Default_CMsgDOTASeasonRewards_Reward_RewardType = CMsgDOTASeasonRewards_EconItem
)

func (x *CMsgDOTASeasonRewards_Reward) Reset() {
	*x = CMsgDOTASeasonRewards_Reward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTASeasonRewards_Reward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTASeasonRewards_Reward) ProtoMessage() {}

func (x *CMsgDOTASeasonRewards_Reward) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTASeasonRewards_Reward.ProtoReflect.Descriptor instead.
func (*CMsgDOTASeasonRewards_Reward) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{46, 0}
}

func (x *CMsgDOTASeasonRewards_Reward) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CMsgDOTASeasonRewards_Reward) GetItemdef() uint32 {
	if x != nil && x.Itemdef != nil {
		return *x.Itemdef
	}
	return 0
}

func (x *CMsgDOTASeasonRewards_Reward) GetImportance() uint32 {
	if x != nil && x.Importance != nil {
		return *x.Importance
	}
	return 0
}

func (x *CMsgDOTASeasonRewards_Reward) GetBaseLevel() uint32 {
	if x != nil && x.BaseLevel != nil {
		return *x.BaseLevel
	}
	return 0
}

func (x *CMsgDOTASeasonRewards_Reward) GetRepeatLevel() uint32 {
	if x != nil && x.RepeatLevel != nil {
		return *x.RepeatLevel
	}
	return 0
}

func (x *CMsgDOTASeasonRewards_Reward) GetRewardType() CMsgDOTASeasonRewards_ERewardType {
	if x != nil && x.RewardType != nil {
		return *x.RewardType
	}
	return Default_CMsgDOTASeasonRewards_Reward_RewardType
}

func (x *CMsgDOTASeasonRewards_Reward) GetImage() string {
	if x != nil && x.Image != nil {
		return *x.Image
	}
	return ""
}

func (x *CMsgDOTASeasonRewards_Reward) GetActionId() uint32 {
	if x != nil && x.ActionId != nil {
		return *x.ActionId
	}
	return 0
}

func (x *CMsgDOTASeasonRewards_Reward) GetEffectIndex() uint32 {
	if x != nil && x.EffectIndex != nil {
		return *x.EffectIndex
	}
	return 0
}

type CMsgDOTASeasonAchievements_Achievement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Description         *string `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	Image               *string `protobuf:"bytes,3,opt,name=image" json:"image,omitempty"`
	ActionId            *uint32 `protobuf:"varint,4,opt,name=action_id,json=actionId" json:"action_id,omitempty"`
	MaxGrants           *uint32 `protobuf:"varint,5,opt,name=max_grants,json=maxGrants" json:"max_grants,omitempty"`
	NormalPoints        *uint32 `protobuf:"varint,6,opt,name=normal_points,json=normalPoints" json:"normal_points,omitempty"`
	TrackingAchievement *uint32 `protobuf:"varint,7,opt,name=tracking_achievement,json=trackingAchievement" json:"tracking_achievement,omitempty"`
	AchievementGoal     *uint32 `protobuf:"varint,8,opt,name=achievement_goal,json=achievementGoal" json:"achievement_goal,omitempty"`
	AchievementLevel    *uint32 `protobuf:"varint,9,opt,name=achievement_level,json=achievementLevel" json:"achievement_level,omitempty"`
}

func (x *CMsgDOTASeasonAchievements_Achievement) Reset() {
	*x = CMsgDOTASeasonAchievements_Achievement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTASeasonAchievements_Achievement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTASeasonAchievements_Achievement) ProtoMessage() {}

func (x *CMsgDOTASeasonAchievements_Achievement) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTASeasonAchievements_Achievement.ProtoReflect.Descriptor instead.
func (*CMsgDOTASeasonAchievements_Achievement) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{47, 0}
}

func (x *CMsgDOTASeasonAchievements_Achievement) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CMsgDOTASeasonAchievements_Achievement) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *CMsgDOTASeasonAchievements_Achievement) GetImage() string {
	if x != nil && x.Image != nil {
		return *x.Image
	}
	return ""
}

func (x *CMsgDOTASeasonAchievements_Achievement) GetActionId() uint32 {
	if x != nil && x.ActionId != nil {
		return *x.ActionId
	}
	return 0
}

func (x *CMsgDOTASeasonAchievements_Achievement) GetMaxGrants() uint32 {
	if x != nil && x.MaxGrants != nil {
		return *x.MaxGrants
	}
	return 0
}

func (x *CMsgDOTASeasonAchievements_Achievement) GetNormalPoints() uint32 {
	if x != nil && x.NormalPoints != nil {
		return *x.NormalPoints
	}
	return 0
}

func (x *CMsgDOTASeasonAchievements_Achievement) GetTrackingAchievement() uint32 {
	if x != nil && x.TrackingAchievement != nil {
		return *x.TrackingAchievement
	}
	return 0
}

func (x *CMsgDOTASeasonAchievements_Achievement) GetAchievementGoal() uint32 {
	if x != nil && x.AchievementGoal != nil {
		return *x.AchievementGoal
	}
	return 0
}

func (x *CMsgDOTASeasonAchievements_Achievement) GetAchievementLevel() uint32 {
	if x != nil && x.AchievementLevel != nil {
		return *x.AchievementLevel
	}
	return 0
}

type CMsgDOTASeasonPredictions_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value       *uint32 `protobuf:"varint,1,opt,name=value" json:"value,omitempty"`
	Name        *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	MinRawValue *uint32 `protobuf:"varint,3,opt,name=min_raw_value,json=minRawValue" json:"min_raw_value,omitempty"`
	MaxRawValue *uint32 `protobuf:"varint,4,opt,name=max_raw_value,json=maxRawValue" json:"max_raw_value,omitempty"`
}

func (x *CMsgDOTASeasonPredictions_Choice) Reset() {
	*x = CMsgDOTASeasonPredictions_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTASeasonPredictions_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTASeasonPredictions_Choice) ProtoMessage() {}

func (x *CMsgDOTASeasonPredictions_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTASeasonPredictions_Choice.ProtoReflect.Descriptor instead.
func (*CMsgDOTASeasonPredictions_Choice) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{48, 0}
}

func (x *CMsgDOTASeasonPredictions_Choice) GetValue() uint32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *CMsgDOTASeasonPredictions_Choice) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CMsgDOTASeasonPredictions_Choice) GetMinRawValue() uint32 {
	if x != nil && x.MinRawValue != nil {
		return *x.MinRawValue
	}
	return 0
}

func (x *CMsgDOTASeasonPredictions_Choice) GetMaxRawValue() uint32 {
	if x != nil && x.MaxRawValue != nil {
		return *x.MaxRawValue
	}
	return 0
}

type CMsgDOTASeasonPredictions_Answers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnswerId *uint32 `protobuf:"varint,1,opt,name=answer_id,json=answerId" json:"answer_id,omitempty"`
}

func (x *CMsgDOTASeasonPredictions_Answers) Reset() {
	*x = CMsgDOTASeasonPredictions_Answers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTASeasonPredictions_Answers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTASeasonPredictions_Answers) ProtoMessage() {}

func (x *CMsgDOTASeasonPredictions_Answers) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTASeasonPredictions_Answers.ProtoReflect.Descriptor instead.
func (*CMsgDOTASeasonPredictions_Answers) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{48, 1}
}

func (x *CMsgDOTASeasonPredictions_Answers) GetAnswerId() uint32 {
	if x != nil && x.AnswerId != nil {
		return *x.AnswerId
	}
	return 0
}

type CMsgDOTASeasonPredictions_QueryKeyValues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (x *CMsgDOTASeasonPredictions_QueryKeyValues) Reset() {
	*x = CMsgDOTASeasonPredictions_QueryKeyValues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTASeasonPredictions_QueryKeyValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTASeasonPredictions_QueryKeyValues) ProtoMessage() {}

func (x *CMsgDOTASeasonPredictions_QueryKeyValues) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTASeasonPredictions_QueryKeyValues.ProtoReflect.Descriptor instead.
func (*CMsgDOTASeasonPredictions_QueryKeyValues) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{48, 2}
}

func (x *CMsgDOTASeasonPredictions_QueryKeyValues) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CMsgDOTASeasonPredictions_QueryKeyValues) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type CMsgDOTASeasonPredictions_Prediction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                 *CMsgDOTASeasonPredictionsEPredictionType `protobuf:"varint,1,opt,name=type,enum=dota.CMsgDOTASeasonPredictionsEPredictionType,def=0" json:"type,omitempty"`
	Question             *string                                   `protobuf:"bytes,2,opt,name=question" json:"question,omitempty"`
	Choices              []*CMsgDOTASeasonPredictions_Choice       `protobuf:"bytes,3,rep,name=choices" json:"choices,omitempty"`
	SelectionId          *uint32                                   `protobuf:"varint,4,opt,name=selection_id,json=selectionId" json:"selection_id,omitempty"`
	StartDate            *uint32                                   `protobuf:"varint,5,opt,name=start_date,json=startDate" json:"start_date,omitempty"`
	LockDate             *uint32                                   `protobuf:"varint,6,opt,name=lock_date,json=lockDate" json:"lock_date,omitempty"`
	Reward               *uint32                                   `protobuf:"varint,7,opt,name=reward" json:"reward,omitempty"`
	AnswerType           *CMsgDOTASeasonPredictionsEAnswerType     `protobuf:"varint,8,opt,name=answer_type,json=answerType,enum=dota.CMsgDOTASeasonPredictionsEAnswerType,def=0" json:"answer_type,omitempty"`
	AnswerId             *uint32                                   `protobuf:"varint,9,opt,name=answer_id,json=answerId" json:"answer_id,omitempty"`
	Answers              []*CMsgDOTASeasonPredictions_Answers      `protobuf:"bytes,10,rep,name=answers" json:"answers,omitempty"`
	QueryName            *string                                   `protobuf:"bytes,11,opt,name=query_name,json=queryName" json:"query_name,omitempty"`
	LockOnSelectionId    *uint32                                   `protobuf:"varint,13,opt,name=lock_on_selection_id,json=lockOnSelectionId" json:"lock_on_selection_id,omitempty"`
	LockOnSelectionValue *uint32                                   `protobuf:"varint,14,opt,name=lock_on_selection_value,json=lockOnSelectionValue" json:"lock_on_selection_value,omitempty"`
	LockOnSelectionSet   *bool                                     `protobuf:"varint,15,opt,name=lock_on_selection_set,json=lockOnSelectionSet" json:"lock_on_selection_set,omitempty"`
	UseAnswerValueRanges *bool                                     `protobuf:"varint,16,opt,name=use_answer_value_ranges,json=useAnswerValueRanges" json:"use_answer_value_ranges,omitempty"`
	Region               *ELeagueRegion                            `protobuf:"varint,17,opt,name=region,enum=dota.ELeagueRegion,def=0" json:"region,omitempty"`
	Phases               []ELeaguePhase                            `protobuf:"varint,18,rep,name=phases,enum=dota.ELeaguePhase" json:"phases,omitempty"`
}

// Default values for CMsgDOTASeasonPredictions_Prediction fields.
const (
	Default_CMsgDOTASeasonPredictions_Prediction_Type       = CMsgDOTASeasonPredictions_Generic
	Default_CMsgDOTASeasonPredictions_Prediction_AnswerType = CMsgDOTASeasonPredictions_SingleInt
	Default_CMsgDOTASeasonPredictions_Prediction_Region     = ELeagueRegion_LEAGUE_REGION_UNSET
)

func (x *CMsgDOTASeasonPredictions_Prediction) Reset() {
	*x = CMsgDOTASeasonPredictions_Prediction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTASeasonPredictions_Prediction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTASeasonPredictions_Prediction) ProtoMessage() {}

func (x *CMsgDOTASeasonPredictions_Prediction) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTASeasonPredictions_Prediction.ProtoReflect.Descriptor instead.
func (*CMsgDOTASeasonPredictions_Prediction) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{48, 3}
}

func (x *CMsgDOTASeasonPredictions_Prediction) GetType() CMsgDOTASeasonPredictionsEPredictionType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_CMsgDOTASeasonPredictions_Prediction_Type
}

func (x *CMsgDOTASeasonPredictions_Prediction) GetQuestion() string {
	if x != nil && x.Question != nil {
		return *x.Question
	}
	return ""
}

func (x *CMsgDOTASeasonPredictions_Prediction) GetChoices() []*CMsgDOTASeasonPredictions_Choice {
	if x != nil {
		return x.Choices
	}
	return nil
}

func (x *CMsgDOTASeasonPredictions_Prediction) GetSelectionId() uint32 {
	if x != nil && x.SelectionId != nil {
		return *x.SelectionId
	}
	return 0
}

func (x *CMsgDOTASeasonPredictions_Prediction) GetStartDate() uint32 {
	if x != nil && x.StartDate != nil {
		return *x.StartDate
	}
	return 0
}

func (x *CMsgDOTASeasonPredictions_Prediction) GetLockDate() uint32 {
	if x != nil && x.LockDate != nil {
		return *x.LockDate
	}
	return 0
}

func (x *CMsgDOTASeasonPredictions_Prediction) GetReward() uint32 {
	if x != nil && x.Reward != nil {
		return *x.Reward
	}
	return 0
}

func (x *CMsgDOTASeasonPredictions_Prediction) GetAnswerType() CMsgDOTASeasonPredictionsEAnswerType {
	if x != nil && x.AnswerType != nil {
		return *x.AnswerType
	}
	return Default_CMsgDOTASeasonPredictions_Prediction_AnswerType
}

func (x *CMsgDOTASeasonPredictions_Prediction) GetAnswerId() uint32 {
	if x != nil && x.AnswerId != nil {
		return *x.AnswerId
	}
	return 0
}

func (x *CMsgDOTASeasonPredictions_Prediction) GetAnswers() []*CMsgDOTASeasonPredictions_Answers {
	if x != nil {
		return x.Answers
	}
	return nil
}

func (x *CMsgDOTASeasonPredictions_Prediction) GetQueryName() string {
	if x != nil && x.QueryName != nil {
		return *x.QueryName
	}
	return ""
}

func (x *CMsgDOTASeasonPredictions_Prediction) GetLockOnSelectionId() uint32 {
	if x != nil && x.LockOnSelectionId != nil {
		return *x.LockOnSelectionId
	}
	return 0
}

func (x *CMsgDOTASeasonPredictions_Prediction) GetLockOnSelectionValue() uint32 {
	if x != nil && x.LockOnSelectionValue != nil {
		return *x.LockOnSelectionValue
	}
	return 0
}

func (x *CMsgDOTASeasonPredictions_Prediction) GetLockOnSelectionSet() bool {
	if x != nil && x.LockOnSelectionSet != nil {
		return *x.LockOnSelectionSet
	}
	return false
}

func (x *CMsgDOTASeasonPredictions_Prediction) GetUseAnswerValueRanges() bool {
	if x != nil && x.UseAnswerValueRanges != nil {
		return *x.UseAnswerValueRanges
	}
	return false
}

func (x *CMsgDOTASeasonPredictions_Prediction) GetRegion() ELeagueRegion {
	if x != nil && x.Region != nil {
		return *x.Region
	}
	return Default_CMsgDOTASeasonPredictions_Prediction_Region
}

func (x *CMsgDOTASeasonPredictions_Prediction) GetPhases() []ELeaguePhase {
	if x != nil {
		return x.Phases
	}
	return nil
}

type CMsgDOTASeasonPredictions_InGamePrediction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   *uint32                                          `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name                 *string                                          `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Type                 *CMsgDOTASeasonPredictionsEPredictionType        `protobuf:"varint,3,opt,name=type,enum=dota.CMsgDOTASeasonPredictionsEPredictionType,def=0" json:"type,omitempty"`
	Group                *CMsgDOTASeasonPredictionsERandomSelectionGroupT `protobuf:"varint,4,opt,name=group,enum=dota.CMsgDOTASeasonPredictionsERandomSelectionGroupT,def=0" json:"group,omitempty"`
	Question             *string                                          `protobuf:"bytes,5,opt,name=question" json:"question,omitempty"`
	Choices              []*CMsgDOTASeasonPredictions_Choice              `protobuf:"bytes,6,rep,name=choices" json:"choices,omitempty"`
	RequiredHeroes       []string                                         `protobuf:"bytes,7,rep,name=required_heroes,json=requiredHeroes" json:"required_heroes,omitempty"`
	QueryName            *string                                          `protobuf:"bytes,8,opt,name=query_name,json=queryName" json:"query_name,omitempty"`
	QueryValues          []*CMsgDOTASeasonPredictions_QueryKeyValues      `protobuf:"bytes,9,rep,name=query_values,json=queryValues" json:"query_values,omitempty"`
	AnswerResolutionType *CMsgDOTASeasonPredictionsEResolutionTypeT       `protobuf:"varint,10,opt,name=answer_resolution_type,json=answerResolutionType,enum=dota.CMsgDOTASeasonPredictionsEResolutionTypeT,def=0" json:"answer_resolution_type,omitempty"`
	PointsToGrant        *uint32                                          `protobuf:"varint,11,opt,name=points_to_grant,json=pointsToGrant" json:"points_to_grant,omitempty"`
	RewardAction         *uint32                                          `protobuf:"varint,12,opt,name=reward_action,json=rewardAction" json:"reward_action,omitempty"`
	DebugForceSelection  *uint32                                          `protobuf:"varint,13,opt,name=debug_force_selection,json=debugForceSelection" json:"debug_force_selection,omitempty"`
	RawValueType         *CMsgDOTASeasonPredictionsERawValueTypeT         `protobuf:"varint,14,opt,name=raw_value_type,json=rawValueType,enum=dota.CMsgDOTASeasonPredictionsERawValueTypeT,def=0" json:"raw_value_type,omitempty"`
}

// Default values for CMsgDOTASeasonPredictions_InGamePrediction fields.
const (
	Default_CMsgDOTASeasonPredictions_InGamePrediction_Type                 = CMsgDOTASeasonPredictions_Generic
	Default_CMsgDOTASeasonPredictions_InGamePrediction_Group                = CMsgDOTASeasonPredictions_EarlyGame
	Default_CMsgDOTASeasonPredictions_InGamePrediction_AnswerResolutionType = CMsgDOTASeasonPredictions_InvalidQuery
	Default_CMsgDOTASeasonPredictions_InGamePrediction_RawValueType         = CMsgDOTASeasonPredictions_Number
)

func (x *CMsgDOTASeasonPredictions_InGamePrediction) Reset() {
	*x = CMsgDOTASeasonPredictions_InGamePrediction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTASeasonPredictions_InGamePrediction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTASeasonPredictions_InGamePrediction) ProtoMessage() {}

func (x *CMsgDOTASeasonPredictions_InGamePrediction) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTASeasonPredictions_InGamePrediction.ProtoReflect.Descriptor instead.
func (*CMsgDOTASeasonPredictions_InGamePrediction) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{48, 4}
}

func (x *CMsgDOTASeasonPredictions_InGamePrediction) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *CMsgDOTASeasonPredictions_InGamePrediction) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CMsgDOTASeasonPredictions_InGamePrediction) GetType() CMsgDOTASeasonPredictionsEPredictionType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_CMsgDOTASeasonPredictions_InGamePrediction_Type
}

func (x *CMsgDOTASeasonPredictions_InGamePrediction) GetGroup() CMsgDOTASeasonPredictionsERandomSelectionGroupT {
	if x != nil && x.Group != nil {
		return *x.Group
	}
	return Default_CMsgDOTASeasonPredictions_InGamePrediction_Group
}

func (x *CMsgDOTASeasonPredictions_InGamePrediction) GetQuestion() string {
	if x != nil && x.Question != nil {
		return *x.Question
	}
	return ""
}

func (x *CMsgDOTASeasonPredictions_InGamePrediction) GetChoices() []*CMsgDOTASeasonPredictions_Choice {
	if x != nil {
		return x.Choices
	}
	return nil
}

func (x *CMsgDOTASeasonPredictions_InGamePrediction) GetRequiredHeroes() []string {
	if x != nil {
		return x.RequiredHeroes
	}
	return nil
}

func (x *CMsgDOTASeasonPredictions_InGamePrediction) GetQueryName() string {
	if x != nil && x.QueryName != nil {
		return *x.QueryName
	}
	return ""
}

func (x *CMsgDOTASeasonPredictions_InGamePrediction) GetQueryValues() []*CMsgDOTASeasonPredictions_QueryKeyValues {
	if x != nil {
		return x.QueryValues
	}
	return nil
}

func (x *CMsgDOTASeasonPredictions_InGamePrediction) GetAnswerResolutionType() CMsgDOTASeasonPredictionsEResolutionTypeT {
	if x != nil && x.AnswerResolutionType != nil {
		return *x.AnswerResolutionType
	}
	return Default_CMsgDOTASeasonPredictions_InGamePrediction_AnswerResolutionType
}

func (x *CMsgDOTASeasonPredictions_InGamePrediction) GetPointsToGrant() uint32 {
	if x != nil && x.PointsToGrant != nil {
		return *x.PointsToGrant
	}
	return 0
}

func (x *CMsgDOTASeasonPredictions_InGamePrediction) GetRewardAction() uint32 {
	if x != nil && x.RewardAction != nil {
		return *x.RewardAction
	}
	return 0
}

func (x *CMsgDOTASeasonPredictions_InGamePrediction) GetDebugForceSelection() uint32 {
	if x != nil && x.DebugForceSelection != nil {
		return *x.DebugForceSelection
	}
	return 0
}

func (x *CMsgDOTASeasonPredictions_InGamePrediction) GetRawValueType() CMsgDOTASeasonPredictionsERawValueTypeT {
	if x != nil && x.RawValueType != nil {
		return *x.RawValueType
	}
	return Default_CMsgDOTASeasonPredictions_InGamePrediction_RawValueType
}

type CMsgDOTAMatch_Player struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId                 *uint32                                    `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	PlayerSlot                *uint32                                    `protobuf:"varint,2,opt,name=player_slot,json=playerSlot" json:"player_slot,omitempty"`
	HeroId                    *uint32                                    `protobuf:"varint,3,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	Item_0                    *uint32                                    `protobuf:"varint,4,opt,name=item_0,json=item0" json:"item_0,omitempty"`
	Item_1                    *uint32                                    `protobuf:"varint,5,opt,name=item_1,json=item1" json:"item_1,omitempty"`
	Item_2                    *uint32                                    `protobuf:"varint,6,opt,name=item_2,json=item2" json:"item_2,omitempty"`
	Item_3                    *uint32                                    `protobuf:"varint,7,opt,name=item_3,json=item3" json:"item_3,omitempty"`
	Item_4                    *uint32                                    `protobuf:"varint,8,opt,name=item_4,json=item4" json:"item_4,omitempty"`
	Item_5                    *uint32                                    `protobuf:"varint,9,opt,name=item_5,json=item5" json:"item_5,omitempty"`
	Item_6                    *uint32                                    `protobuf:"varint,59,opt,name=item_6,json=item6" json:"item_6,omitempty"`
	Item_7                    *uint32                                    `protobuf:"varint,60,opt,name=item_7,json=item7" json:"item_7,omitempty"`
	Item_8                    *uint32                                    `protobuf:"varint,61,opt,name=item_8,json=item8" json:"item_8,omitempty"`
	Item_9                    *uint32                                    `protobuf:"varint,76,opt,name=item_9,json=item9" json:"item_9,omitempty"`
	ExpectedTeamContribution  *float32                                   `protobuf:"fixed32,10,opt,name=expected_team_contribution,json=expectedTeamContribution" json:"expected_team_contribution,omitempty"`
	ScaledMetric              *float32                                   `protobuf:"fixed32,11,opt,name=scaled_metric,json=scaledMetric" json:"scaled_metric,omitempty"`
	PreviousRank              *uint32                                    `protobuf:"varint,12,opt,name=previous_rank,json=previousRank" json:"previous_rank,omitempty"`
	RankChange                *int32                                     `protobuf:"zigzag32,13,opt,name=rank_change,json=rankChange" json:"rank_change,omitempty"`
	MmrType                   *uint32                                    `protobuf:"varint,74,opt,name=mmr_type,json=mmrType" json:"mmr_type,omitempty"`
	RankTierUpdated           *bool                                      `protobuf:"varint,66,opt,name=rank_tier_updated,json=rankTierUpdated" json:"rank_tier_updated,omitempty"`
	Kills                     *uint32                                    `protobuf:"varint,14,opt,name=kills" json:"kills,omitempty"`
	Deaths                    *uint32                                    `protobuf:"varint,15,opt,name=deaths" json:"deaths,omitempty"`
	Assists                   *uint32                                    `protobuf:"varint,16,opt,name=assists" json:"assists,omitempty"`
	LeaverStatus              *uint32                                    `protobuf:"varint,17,opt,name=leaver_status,json=leaverStatus" json:"leaver_status,omitempty"`
	Gold                      *uint32                                    `protobuf:"varint,18,opt,name=gold" json:"gold,omitempty"`
	LastHits                  *uint32                                    `protobuf:"varint,19,opt,name=last_hits,json=lastHits" json:"last_hits,omitempty"`
	Denies                    *uint32                                    `protobuf:"varint,20,opt,name=denies" json:"denies,omitempty"`
	GoldPerMin                *uint32                                    `protobuf:"varint,21,opt,name=gold_per_min,json=goldPerMin" json:"gold_per_min,omitempty"`
	XPPerMin                  *uint32                                    `protobuf:"varint,22,opt,name=XP_per_min,json=XPPerMin" json:"XP_per_min,omitempty"`
	GoldSpent                 *uint32                                    `protobuf:"varint,23,opt,name=gold_spent,json=goldSpent" json:"gold_spent,omitempty"`
	HeroDamage                *uint32                                    `protobuf:"varint,24,opt,name=hero_damage,json=heroDamage" json:"hero_damage,omitempty"`
	TowerDamage               *uint32                                    `protobuf:"varint,25,opt,name=tower_damage,json=towerDamage" json:"tower_damage,omitempty"`
	HeroHealing               *uint32                                    `protobuf:"varint,26,opt,name=hero_healing,json=heroHealing" json:"hero_healing,omitempty"`
	Level                     *uint32                                    `protobuf:"varint,27,opt,name=level" json:"level,omitempty"`
	TimeLastSeen              *uint32                                    `protobuf:"varint,28,opt,name=time_last_seen,json=timeLastSeen" json:"time_last_seen,omitempty"`
	PlayerName                *string                                    `protobuf:"bytes,29,opt,name=player_name,json=playerName" json:"player_name,omitempty"`
	SupportAbilityValue       *uint32                                    `protobuf:"varint,30,opt,name=support_ability_value,json=supportAbilityValue" json:"support_ability_value,omitempty"`
	FeedingDetected           *bool                                      `protobuf:"varint,32,opt,name=feeding_detected,json=feedingDetected" json:"feeding_detected,omitempty"`
	SearchRank                *uint32                                    `protobuf:"varint,34,opt,name=search_rank,json=searchRank" json:"search_rank,omitempty"`
	SearchRankUncertainty     *uint32                                    `protobuf:"varint,35,opt,name=search_rank_uncertainty,json=searchRankUncertainty" json:"search_rank_uncertainty,omitempty"`
	RankUncertaintyChange     *int32                                     `protobuf:"varint,36,opt,name=rank_uncertainty_change,json=rankUncertaintyChange" json:"rank_uncertainty_change,omitempty"`
	HeroPlayCount             *uint32                                    `protobuf:"varint,37,opt,name=hero_play_count,json=heroPlayCount" json:"hero_play_count,omitempty"`
	PartyId                   *uint64                                    `protobuf:"fixed64,38,opt,name=party_id,json=partyId" json:"party_id,omitempty"`
	ScaledHeroDamage          *uint32                                    `protobuf:"varint,54,opt,name=scaled_hero_damage,json=scaledHeroDamage" json:"scaled_hero_damage,omitempty"`
	ScaledTowerDamage         *uint32                                    `protobuf:"varint,55,opt,name=scaled_tower_damage,json=scaledTowerDamage" json:"scaled_tower_damage,omitempty"`
	ScaledHeroHealing         *uint32                                    `protobuf:"varint,56,opt,name=scaled_hero_healing,json=scaledHeroHealing" json:"scaled_hero_healing,omitempty"`
	ScaledKills               *float32                                   `protobuf:"fixed32,39,opt,name=scaled_kills,json=scaledKills" json:"scaled_kills,omitempty"`
	ScaledDeaths              *float32                                   `protobuf:"fixed32,40,opt,name=scaled_deaths,json=scaledDeaths" json:"scaled_deaths,omitempty"`
	ScaledAssists             *float32                                   `protobuf:"fixed32,41,opt,name=scaled_assists,json=scaledAssists" json:"scaled_assists,omitempty"`
	ClaimedFarmGold           *uint32                                    `protobuf:"varint,42,opt,name=claimed_farm_gold,json=claimedFarmGold" json:"claimed_farm_gold,omitempty"`
	SupportGold               *uint32                                    `protobuf:"varint,43,opt,name=support_gold,json=supportGold" json:"support_gold,omitempty"`
	ClaimedDenies             *uint32                                    `protobuf:"varint,44,opt,name=claimed_denies,json=claimedDenies" json:"claimed_denies,omitempty"`
	ClaimedMisses             *uint32                                    `protobuf:"varint,45,opt,name=claimed_misses,json=claimedMisses" json:"claimed_misses,omitempty"`
	Misses                    *uint32                                    `protobuf:"varint,46,opt,name=misses" json:"misses,omitempty"`
	AbilityUpgrades           []*CMatchPlayerAbilityUpgrade              `protobuf:"bytes,47,rep,name=ability_upgrades,json=abilityUpgrades" json:"ability_upgrades,omitempty"`
	AdditionalUnitsInventory  []*CMatchAdditionalUnitInventory           `protobuf:"bytes,48,rep,name=additional_units_inventory,json=additionalUnitsInventory" json:"additional_units_inventory,omitempty"`
	PermanentBuffs            []*CMatchPlayerPermanentBuff               `protobuf:"bytes,57,rep,name=permanent_buffs,json=permanentBuffs" json:"permanent_buffs,omitempty"`
	ProName                   *string                                    `protobuf:"bytes,72,opt,name=pro_name,json=proName" json:"pro_name,omitempty"`
	RealName                  *string                                    `protobuf:"bytes,73,opt,name=real_name,json=realName" json:"real_name,omitempty"`
	CustomGameData            *CMsgDOTAMatch_Player_CustomGameData       `protobuf:"bytes,50,opt,name=custom_game_data,json=customGameData" json:"custom_game_data,omitempty"`
	ActivePlusSubscription    *bool                                      `protobuf:"varint,51,opt,name=active_plus_subscription,json=activePlusSubscription" json:"active_plus_subscription,omitempty"`
	NetWorth                  *uint32                                    `protobuf:"varint,52,opt,name=net_worth,json=netWorth" json:"net_worth,omitempty"`
	BotDifficulty             *uint32                                    `protobuf:"varint,58,opt,name=bot_difficulty,json=botDifficulty" json:"bot_difficulty,omitempty"`
	HeroPickOrder             *uint32                                    `protobuf:"varint,63,opt,name=hero_pick_order,json=heroPickOrder" json:"hero_pick_order,omitempty"`
	HeroWasRandomed           *bool                                      `protobuf:"varint,64,opt,name=hero_was_randomed,json=heroWasRandomed" json:"hero_was_randomed,omitempty"`
	HeroWasDotaPlusSuggestion *bool                                      `protobuf:"varint,69,opt,name=hero_was_dota_plus_suggestion,json=heroWasDotaPlusSuggestion" json:"hero_was_dota_plus_suggestion,omitempty"`
	HeroDamageReceived        []*CMsgDOTAMatch_Player_HeroDamageReceived `protobuf:"bytes,67,rep,name=hero_damage_received,json=heroDamageReceived" json:"hero_damage_received,omitempty"`
	SecondsDead               *uint32                                    `protobuf:"varint,70,opt,name=seconds_dead,json=secondsDead" json:"seconds_dead,omitempty"`
	GoldLostToDeath           *uint32                                    `protobuf:"varint,71,opt,name=gold_lost_to_death,json=goldLostToDeath" json:"gold_lost_to_death,omitempty"`
	LaneSelectionFlags        *uint32                                    `protobuf:"varint,75,opt,name=lane_selection_flags,json=laneSelectionFlags" json:"lane_selection_flags,omitempty"`
	BountyRunes               *uint32                                    `protobuf:"varint,77,opt,name=bounty_runes,json=bountyRunes" json:"bounty_runes,omitempty"`
	OutpostsCaptured          *uint32                                    `protobuf:"varint,78,opt,name=outposts_captured,json=outpostsCaptured" json:"outposts_captured,omitempty"`
}

func (x *CMsgDOTAMatch_Player) Reset() {
	*x = CMsgDOTAMatch_Player{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAMatch_Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAMatch_Player) ProtoMessage() {}

func (x *CMsgDOTAMatch_Player) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAMatch_Player.ProtoReflect.Descriptor instead.
func (*CMsgDOTAMatch_Player) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{49, 0}
}

func (x *CMsgDOTAMatch_Player) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetPlayerSlot() uint32 {
	if x != nil && x.PlayerSlot != nil {
		return *x.PlayerSlot
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetHeroId() uint32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetItem_0() uint32 {
	if x != nil && x.Item_0 != nil {
		return *x.Item_0
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetItem_1() uint32 {
	if x != nil && x.Item_1 != nil {
		return *x.Item_1
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetItem_2() uint32 {
	if x != nil && x.Item_2 != nil {
		return *x.Item_2
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetItem_3() uint32 {
	if x != nil && x.Item_3 != nil {
		return *x.Item_3
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetItem_4() uint32 {
	if x != nil && x.Item_4 != nil {
		return *x.Item_4
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetItem_5() uint32 {
	if x != nil && x.Item_5 != nil {
		return *x.Item_5
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetItem_6() uint32 {
	if x != nil && x.Item_6 != nil {
		return *x.Item_6
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetItem_7() uint32 {
	if x != nil && x.Item_7 != nil {
		return *x.Item_7
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetItem_8() uint32 {
	if x != nil && x.Item_8 != nil {
		return *x.Item_8
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetItem_9() uint32 {
	if x != nil && x.Item_9 != nil {
		return *x.Item_9
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetExpectedTeamContribution() float32 {
	if x != nil && x.ExpectedTeamContribution != nil {
		return *x.ExpectedTeamContribution
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetScaledMetric() float32 {
	if x != nil && x.ScaledMetric != nil {
		return *x.ScaledMetric
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetPreviousRank() uint32 {
	if x != nil && x.PreviousRank != nil {
		return *x.PreviousRank
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetRankChange() int32 {
	if x != nil && x.RankChange != nil {
		return *x.RankChange
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetMmrType() uint32 {
	if x != nil && x.MmrType != nil {
		return *x.MmrType
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetRankTierUpdated() bool {
	if x != nil && x.RankTierUpdated != nil {
		return *x.RankTierUpdated
	}
	return false
}

func (x *CMsgDOTAMatch_Player) GetKills() uint32 {
	if x != nil && x.Kills != nil {
		return *x.Kills
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetDeaths() uint32 {
	if x != nil && x.Deaths != nil {
		return *x.Deaths
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetAssists() uint32 {
	if x != nil && x.Assists != nil {
		return *x.Assists
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetLeaverStatus() uint32 {
	if x != nil && x.LeaverStatus != nil {
		return *x.LeaverStatus
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetGold() uint32 {
	if x != nil && x.Gold != nil {
		return *x.Gold
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetLastHits() uint32 {
	if x != nil && x.LastHits != nil {
		return *x.LastHits
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetDenies() uint32 {
	if x != nil && x.Denies != nil {
		return *x.Denies
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetGoldPerMin() uint32 {
	if x != nil && x.GoldPerMin != nil {
		return *x.GoldPerMin
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetXPPerMin() uint32 {
	if x != nil && x.XPPerMin != nil {
		return *x.XPPerMin
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetGoldSpent() uint32 {
	if x != nil && x.GoldSpent != nil {
		return *x.GoldSpent
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetHeroDamage() uint32 {
	if x != nil && x.HeroDamage != nil {
		return *x.HeroDamage
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetTowerDamage() uint32 {
	if x != nil && x.TowerDamage != nil {
		return *x.TowerDamage
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetHeroHealing() uint32 {
	if x != nil && x.HeroHealing != nil {
		return *x.HeroHealing
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetTimeLastSeen() uint32 {
	if x != nil && x.TimeLastSeen != nil {
		return *x.TimeLastSeen
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetPlayerName() string {
	if x != nil && x.PlayerName != nil {
		return *x.PlayerName
	}
	return ""
}

func (x *CMsgDOTAMatch_Player) GetSupportAbilityValue() uint32 {
	if x != nil && x.SupportAbilityValue != nil {
		return *x.SupportAbilityValue
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetFeedingDetected() bool {
	if x != nil && x.FeedingDetected != nil {
		return *x.FeedingDetected
	}
	return false
}

func (x *CMsgDOTAMatch_Player) GetSearchRank() uint32 {
	if x != nil && x.SearchRank != nil {
		return *x.SearchRank
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetSearchRankUncertainty() uint32 {
	if x != nil && x.SearchRankUncertainty != nil {
		return *x.SearchRankUncertainty
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetRankUncertaintyChange() int32 {
	if x != nil && x.RankUncertaintyChange != nil {
		return *x.RankUncertaintyChange
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetHeroPlayCount() uint32 {
	if x != nil && x.HeroPlayCount != nil {
		return *x.HeroPlayCount
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetPartyId() uint64 {
	if x != nil && x.PartyId != nil {
		return *x.PartyId
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetScaledHeroDamage() uint32 {
	if x != nil && x.ScaledHeroDamage != nil {
		return *x.ScaledHeroDamage
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetScaledTowerDamage() uint32 {
	if x != nil && x.ScaledTowerDamage != nil {
		return *x.ScaledTowerDamage
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetScaledHeroHealing() uint32 {
	if x != nil && x.ScaledHeroHealing != nil {
		return *x.ScaledHeroHealing
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetScaledKills() float32 {
	if x != nil && x.ScaledKills != nil {
		return *x.ScaledKills
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetScaledDeaths() float32 {
	if x != nil && x.ScaledDeaths != nil {
		return *x.ScaledDeaths
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetScaledAssists() float32 {
	if x != nil && x.ScaledAssists != nil {
		return *x.ScaledAssists
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetClaimedFarmGold() uint32 {
	if x != nil && x.ClaimedFarmGold != nil {
		return *x.ClaimedFarmGold
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetSupportGold() uint32 {
	if x != nil && x.SupportGold != nil {
		return *x.SupportGold
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetClaimedDenies() uint32 {
	if x != nil && x.ClaimedDenies != nil {
		return *x.ClaimedDenies
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetClaimedMisses() uint32 {
	if x != nil && x.ClaimedMisses != nil {
		return *x.ClaimedMisses
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetMisses() uint32 {
	if x != nil && x.Misses != nil {
		return *x.Misses
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetAbilityUpgrades() []*CMatchPlayerAbilityUpgrade {
	if x != nil {
		return x.AbilityUpgrades
	}
	return nil
}

func (x *CMsgDOTAMatch_Player) GetAdditionalUnitsInventory() []*CMatchAdditionalUnitInventory {
	if x != nil {
		return x.AdditionalUnitsInventory
	}
	return nil
}

func (x *CMsgDOTAMatch_Player) GetPermanentBuffs() []*CMatchPlayerPermanentBuff {
	if x != nil {
		return x.PermanentBuffs
	}
	return nil
}

func (x *CMsgDOTAMatch_Player) GetProName() string {
	if x != nil && x.ProName != nil {
		return *x.ProName
	}
	return ""
}

func (x *CMsgDOTAMatch_Player) GetRealName() string {
	if x != nil && x.RealName != nil {
		return *x.RealName
	}
	return ""
}

func (x *CMsgDOTAMatch_Player) GetCustomGameData() *CMsgDOTAMatch_Player_CustomGameData {
	if x != nil {
		return x.CustomGameData
	}
	return nil
}

func (x *CMsgDOTAMatch_Player) GetActivePlusSubscription() bool {
	if x != nil && x.ActivePlusSubscription != nil {
		return *x.ActivePlusSubscription
	}
	return false
}

func (x *CMsgDOTAMatch_Player) GetNetWorth() uint32 {
	if x != nil && x.NetWorth != nil {
		return *x.NetWorth
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetBotDifficulty() uint32 {
	if x != nil && x.BotDifficulty != nil {
		return *x.BotDifficulty
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetHeroPickOrder() uint32 {
	if x != nil && x.HeroPickOrder != nil {
		return *x.HeroPickOrder
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetHeroWasRandomed() bool {
	if x != nil && x.HeroWasRandomed != nil {
		return *x.HeroWasRandomed
	}
	return false
}

func (x *CMsgDOTAMatch_Player) GetHeroWasDotaPlusSuggestion() bool {
	if x != nil && x.HeroWasDotaPlusSuggestion != nil {
		return *x.HeroWasDotaPlusSuggestion
	}
	return false
}

func (x *CMsgDOTAMatch_Player) GetHeroDamageReceived() []*CMsgDOTAMatch_Player_HeroDamageReceived {
	if x != nil {
		return x.HeroDamageReceived
	}
	return nil
}

func (x *CMsgDOTAMatch_Player) GetSecondsDead() uint32 {
	if x != nil && x.SecondsDead != nil {
		return *x.SecondsDead
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetGoldLostToDeath() uint32 {
	if x != nil && x.GoldLostToDeath != nil {
		return *x.GoldLostToDeath
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetLaneSelectionFlags() uint32 {
	if x != nil && x.LaneSelectionFlags != nil {
		return *x.LaneSelectionFlags
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetBountyRunes() uint32 {
	if x != nil && x.BountyRunes != nil {
		return *x.BountyRunes
	}
	return 0
}

func (x *CMsgDOTAMatch_Player) GetOutpostsCaptured() uint32 {
	if x != nil && x.OutpostsCaptured != nil {
		return *x.OutpostsCaptured
	}
	return 0
}

type CMsgDOTAMatch_BroadcasterInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Name      *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (x *CMsgDOTAMatch_BroadcasterInfo) Reset() {
	*x = CMsgDOTAMatch_BroadcasterInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAMatch_BroadcasterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAMatch_BroadcasterInfo) ProtoMessage() {}

func (x *CMsgDOTAMatch_BroadcasterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAMatch_BroadcasterInfo.ProtoReflect.Descriptor instead.
func (*CMsgDOTAMatch_BroadcasterInfo) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{49, 1}
}

func (x *CMsgDOTAMatch_BroadcasterInfo) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgDOTAMatch_BroadcasterInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type CMsgDOTAMatch_BroadcasterChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CountryCode      *string                          `protobuf:"bytes,1,opt,name=country_code,json=countryCode" json:"country_code,omitempty"`
	Description      *string                          `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	BroadcasterInfos []*CMsgDOTAMatch_BroadcasterInfo `protobuf:"bytes,3,rep,name=broadcaster_infos,json=broadcasterInfos" json:"broadcaster_infos,omitempty"`
	LanguageCode     *string                          `protobuf:"bytes,4,opt,name=language_code,json=languageCode" json:"language_code,omitempty"`
}

func (x *CMsgDOTAMatch_BroadcasterChannel) Reset() {
	*x = CMsgDOTAMatch_BroadcasterChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAMatch_BroadcasterChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAMatch_BroadcasterChannel) ProtoMessage() {}

func (x *CMsgDOTAMatch_BroadcasterChannel) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAMatch_BroadcasterChannel.ProtoReflect.Descriptor instead.
func (*CMsgDOTAMatch_BroadcasterChannel) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{49, 2}
}

func (x *CMsgDOTAMatch_BroadcasterChannel) GetCountryCode() string {
	if x != nil && x.CountryCode != nil {
		return *x.CountryCode
	}
	return ""
}

func (x *CMsgDOTAMatch_BroadcasterChannel) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *CMsgDOTAMatch_BroadcasterChannel) GetBroadcasterInfos() []*CMsgDOTAMatch_BroadcasterInfo {
	if x != nil {
		return x.BroadcasterInfos
	}
	return nil
}

func (x *CMsgDOTAMatch_BroadcasterChannel) GetLanguageCode() string {
	if x != nil && x.LanguageCode != nil {
		return *x.LanguageCode
	}
	return ""
}

type CMsgDOTAMatch_Coach struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId    *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	CoachName    *string `protobuf:"bytes,2,opt,name=coach_name,json=coachName" json:"coach_name,omitempty"`
	CoachRating  *uint32 `protobuf:"varint,3,opt,name=coach_rating,json=coachRating" json:"coach_rating,omitempty"`
	CoachTeam    *uint32 `protobuf:"varint,4,opt,name=coach_team,json=coachTeam" json:"coach_team,omitempty"`
	CoachPartyId *uint64 `protobuf:"varint,5,opt,name=coach_party_id,json=coachPartyId" json:"coach_party_id,omitempty"`
}

func (x *CMsgDOTAMatch_Coach) Reset() {
	*x = CMsgDOTAMatch_Coach{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAMatch_Coach) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAMatch_Coach) ProtoMessage() {}

func (x *CMsgDOTAMatch_Coach) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAMatch_Coach.ProtoReflect.Descriptor instead.
func (*CMsgDOTAMatch_Coach) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{49, 3}
}

func (x *CMsgDOTAMatch_Coach) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgDOTAMatch_Coach) GetCoachName() string {
	if x != nil && x.CoachName != nil {
		return *x.CoachName
	}
	return ""
}

func (x *CMsgDOTAMatch_Coach) GetCoachRating() uint32 {
	if x != nil && x.CoachRating != nil {
		return *x.CoachRating
	}
	return 0
}

func (x *CMsgDOTAMatch_Coach) GetCoachTeam() uint32 {
	if x != nil && x.CoachTeam != nil {
		return *x.CoachTeam
	}
	return 0
}

func (x *CMsgDOTAMatch_Coach) GetCoachPartyId() uint64 {
	if x != nil && x.CoachPartyId != nil {
		return *x.CoachPartyId
	}
	return 0
}

type CMsgDOTAMatch_CustomGameData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomGameId *uint64 `protobuf:"varint,1,opt,name=custom_game_id,json=customGameId" json:"custom_game_id,omitempty"`
	MapName      *string `protobuf:"bytes,2,opt,name=map_name,json=mapName" json:"map_name,omitempty"`
}

func (x *CMsgDOTAMatch_CustomGameData) Reset() {
	*x = CMsgDOTAMatch_CustomGameData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAMatch_CustomGameData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAMatch_CustomGameData) ProtoMessage() {}

func (x *CMsgDOTAMatch_CustomGameData) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAMatch_CustomGameData.ProtoReflect.Descriptor instead.
func (*CMsgDOTAMatch_CustomGameData) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{49, 4}
}

func (x *CMsgDOTAMatch_CustomGameData) GetCustomGameId() uint64 {
	if x != nil && x.CustomGameId != nil {
		return *x.CustomGameId
	}
	return 0
}

func (x *CMsgDOTAMatch_CustomGameData) GetMapName() string {
	if x != nil && x.MapName != nil {
		return *x.MapName
	}
	return ""
}

type CMsgDOTAMatch_Player_CustomGameData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DotaTeam *uint32 `protobuf:"varint,1,opt,name=dota_team,json=dotaTeam" json:"dota_team,omitempty"`
	Winner   *bool   `protobuf:"varint,2,opt,name=winner" json:"winner,omitempty"`
}

func (x *CMsgDOTAMatch_Player_CustomGameData) Reset() {
	*x = CMsgDOTAMatch_Player_CustomGameData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAMatch_Player_CustomGameData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAMatch_Player_CustomGameData) ProtoMessage() {}

func (x *CMsgDOTAMatch_Player_CustomGameData) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAMatch_Player_CustomGameData.ProtoReflect.Descriptor instead.
func (*CMsgDOTAMatch_Player_CustomGameData) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{49, 0, 0}
}

func (x *CMsgDOTAMatch_Player_CustomGameData) GetDotaTeam() uint32 {
	if x != nil && x.DotaTeam != nil {
		return *x.DotaTeam
	}
	return 0
}

func (x *CMsgDOTAMatch_Player_CustomGameData) GetWinner() bool {
	if x != nil && x.Winner != nil {
		return *x.Winner
	}
	return false
}

type CMsgDOTAMatch_Player_HeroDamageReceived struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PreReduction  *uint32                              `protobuf:"varint,1,opt,name=pre_reduction,json=preReduction" json:"pre_reduction,omitempty"`
	PostReduction *uint32                              `protobuf:"varint,2,opt,name=post_reduction,json=postReduction" json:"post_reduction,omitempty"`
	DamageType    *CMsgDOTAMatch_Player_HeroDamageType `protobuf:"varint,3,opt,name=damage_type,json=damageType,enum=dota.CMsgDOTAMatch_Player_HeroDamageType,def=0" json:"damage_type,omitempty"`
}

// Default values for CMsgDOTAMatch_Player_HeroDamageReceived fields.
const (
	Default_CMsgDOTAMatch_Player_HeroDamageReceived_DamageType = CMsgDOTAMatch_Player_HERO_DAMAGE_PHYSICAL
)

func (x *CMsgDOTAMatch_Player_HeroDamageReceived) Reset() {
	*x = CMsgDOTAMatch_Player_HeroDamageReceived{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAMatch_Player_HeroDamageReceived) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAMatch_Player_HeroDamageReceived) ProtoMessage() {}

func (x *CMsgDOTAMatch_Player_HeroDamageReceived) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAMatch_Player_HeroDamageReceived.ProtoReflect.Descriptor instead.
func (*CMsgDOTAMatch_Player_HeroDamageReceived) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{49, 0, 1}
}

func (x *CMsgDOTAMatch_Player_HeroDamageReceived) GetPreReduction() uint32 {
	if x != nil && x.PreReduction != nil {
		return *x.PreReduction
	}
	return 0
}

func (x *CMsgDOTAMatch_Player_HeroDamageReceived) GetPostReduction() uint32 {
	if x != nil && x.PostReduction != nil {
		return *x.PostReduction
	}
	return 0
}

func (x *CMsgDOTAMatch_Player_HeroDamageReceived) GetDamageType() CMsgDOTAMatch_Player_HeroDamageType {
	if x != nil && x.DamageType != nil {
		return *x.DamageType
	}
	return Default_CMsgDOTAMatch_Player_HeroDamageReceived_DamageType
}

type CMsgPlayerCard_StatModifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stat  *uint32 `protobuf:"varint,1,opt,name=stat" json:"stat,omitempty"`
	Value *uint32 `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`
}

func (x *CMsgPlayerCard_StatModifier) Reset() {
	*x = CMsgPlayerCard_StatModifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPlayerCard_StatModifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPlayerCard_StatModifier) ProtoMessage() {}

func (x *CMsgPlayerCard_StatModifier) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPlayerCard_StatModifier.ProtoReflect.Descriptor instead.
func (*CMsgPlayerCard_StatModifier) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{50, 0}
}

func (x *CMsgPlayerCard_StatModifier) GetStat() uint32 {
	if x != nil && x.Stat != nil {
		return *x.Stat
	}
	return 0
}

func (x *CMsgPlayerCard_StatModifier) GetValue() uint32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

type CMsgDOTABotDebugInfo_Bot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerOwnerId *uint32                          `protobuf:"varint,1,opt,name=player_owner_id,json=playerOwnerId" json:"player_owner_id,omitempty"`
	HeroId        *uint32                          `protobuf:"varint,2,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	Difficulty    *uint32                          `protobuf:"varint,3,opt,name=difficulty" json:"difficulty,omitempty"`
	PowerCurrent  *uint32                          `protobuf:"varint,4,opt,name=power_current,json=powerCurrent" json:"power_current,omitempty"`
	PowerMax      *uint32                          `protobuf:"varint,5,opt,name=power_max,json=powerMax" json:"power_max,omitempty"`
	MoveTargetX   *uint32                          `protobuf:"varint,6,opt,name=move_target_x,json=moveTargetX" json:"move_target_x,omitempty"`
	MoveTargetY   *uint32                          `protobuf:"varint,7,opt,name=move_target_y,json=moveTargetY" json:"move_target_y,omitempty"`
	MoveTargetZ   *uint32                          `protobuf:"varint,8,opt,name=move_target_z,json=moveTargetZ" json:"move_target_z,omitempty"`
	ActiveModeId  *uint32                          `protobuf:"varint,9,opt,name=active_mode_id,json=activeModeId" json:"active_mode_id,omitempty"`
	ExecutionTime *float32                         `protobuf:"fixed32,10,opt,name=execution_time,json=executionTime" json:"execution_time,omitempty"`
	Modes         []*CMsgDOTABotDebugInfo_Bot_Mode `protobuf:"bytes,11,rep,name=modes" json:"modes,omitempty"`
	Action        *CMsgDOTABotDebugInfo_Bot_Action `protobuf:"bytes,12,opt,name=action" json:"action,omitempty"`
}

func (x *CMsgDOTABotDebugInfo_Bot) Reset() {
	*x = CMsgDOTABotDebugInfo_Bot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTABotDebugInfo_Bot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTABotDebugInfo_Bot) ProtoMessage() {}

func (x *CMsgDOTABotDebugInfo_Bot) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTABotDebugInfo_Bot.ProtoReflect.Descriptor instead.
func (*CMsgDOTABotDebugInfo_Bot) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{53, 0}
}

func (x *CMsgDOTABotDebugInfo_Bot) GetPlayerOwnerId() uint32 {
	if x != nil && x.PlayerOwnerId != nil {
		return *x.PlayerOwnerId
	}
	return 0
}

func (x *CMsgDOTABotDebugInfo_Bot) GetHeroId() uint32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CMsgDOTABotDebugInfo_Bot) GetDifficulty() uint32 {
	if x != nil && x.Difficulty != nil {
		return *x.Difficulty
	}
	return 0
}

func (x *CMsgDOTABotDebugInfo_Bot) GetPowerCurrent() uint32 {
	if x != nil && x.PowerCurrent != nil {
		return *x.PowerCurrent
	}
	return 0
}

func (x *CMsgDOTABotDebugInfo_Bot) GetPowerMax() uint32 {
	if x != nil && x.PowerMax != nil {
		return *x.PowerMax
	}
	return 0
}

func (x *CMsgDOTABotDebugInfo_Bot) GetMoveTargetX() uint32 {
	if x != nil && x.MoveTargetX != nil {
		return *x.MoveTargetX
	}
	return 0
}

func (x *CMsgDOTABotDebugInfo_Bot) GetMoveTargetY() uint32 {
	if x != nil && x.MoveTargetY != nil {
		return *x.MoveTargetY
	}
	return 0
}

func (x *CMsgDOTABotDebugInfo_Bot) GetMoveTargetZ() uint32 {
	if x != nil && x.MoveTargetZ != nil {
		return *x.MoveTargetZ
	}
	return 0
}

func (x *CMsgDOTABotDebugInfo_Bot) GetActiveModeId() uint32 {
	if x != nil && x.ActiveModeId != nil {
		return *x.ActiveModeId
	}
	return 0
}

func (x *CMsgDOTABotDebugInfo_Bot) GetExecutionTime() float32 {
	if x != nil && x.ExecutionTime != nil {
		return *x.ExecutionTime
	}
	return 0
}

func (x *CMsgDOTABotDebugInfo_Bot) GetModes() []*CMsgDOTABotDebugInfo_Bot_Mode {
	if x != nil {
		return x.Modes
	}
	return nil
}

func (x *CMsgDOTABotDebugInfo_Bot) GetAction() *CMsgDOTABotDebugInfo_Bot_Action {
	if x != nil {
		return x.Action
	}
	return nil
}

type CMsgDOTABotDebugInfo_Bot_Mode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModeId       *uint32  `protobuf:"varint,1,opt,name=mode_id,json=modeId" json:"mode_id,omitempty"`
	Desire       *float32 `protobuf:"fixed32,2,opt,name=desire" json:"desire,omitempty"`
	TargetEntity *uint32  `protobuf:"varint,3,opt,name=target_entity,json=targetEntity" json:"target_entity,omitempty"`
	TargetX      *uint32  `protobuf:"varint,4,opt,name=target_x,json=targetX" json:"target_x,omitempty"`
	TargetY      *uint32  `protobuf:"varint,5,opt,name=target_y,json=targetY" json:"target_y,omitempty"`
	TargetZ      *uint32  `protobuf:"varint,6,opt,name=target_z,json=targetZ" json:"target_z,omitempty"`
}

func (x *CMsgDOTABotDebugInfo_Bot_Mode) Reset() {
	*x = CMsgDOTABotDebugInfo_Bot_Mode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTABotDebugInfo_Bot_Mode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTABotDebugInfo_Bot_Mode) ProtoMessage() {}

func (x *CMsgDOTABotDebugInfo_Bot_Mode) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTABotDebugInfo_Bot_Mode.ProtoReflect.Descriptor instead.
func (*CMsgDOTABotDebugInfo_Bot_Mode) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{53, 0, 0}
}

func (x *CMsgDOTABotDebugInfo_Bot_Mode) GetModeId() uint32 {
	if x != nil && x.ModeId != nil {
		return *x.ModeId
	}
	return 0
}

func (x *CMsgDOTABotDebugInfo_Bot_Mode) GetDesire() float32 {
	if x != nil && x.Desire != nil {
		return *x.Desire
	}
	return 0
}

func (x *CMsgDOTABotDebugInfo_Bot_Mode) GetTargetEntity() uint32 {
	if x != nil && x.TargetEntity != nil {
		return *x.TargetEntity
	}
	return 0
}

func (x *CMsgDOTABotDebugInfo_Bot_Mode) GetTargetX() uint32 {
	if x != nil && x.TargetX != nil {
		return *x.TargetX
	}
	return 0
}

func (x *CMsgDOTABotDebugInfo_Bot_Mode) GetTargetY() uint32 {
	if x != nil && x.TargetY != nil {
		return *x.TargetY
	}
	return 0
}

func (x *CMsgDOTABotDebugInfo_Bot_Mode) GetTargetZ() uint32 {
	if x != nil && x.TargetZ != nil {
		return *x.TargetZ
	}
	return 0
}

type CMsgDOTABotDebugInfo_Bot_Action struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionId     *uint32 `protobuf:"varint,1,opt,name=action_id,json=actionId" json:"action_id,omitempty"`
	ActionTarget *string `protobuf:"bytes,2,opt,name=action_target,json=actionTarget" json:"action_target,omitempty"`
}

func (x *CMsgDOTABotDebugInfo_Bot_Action) Reset() {
	*x = CMsgDOTABotDebugInfo_Bot_Action{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTABotDebugInfo_Bot_Action) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTABotDebugInfo_Bot_Action) ProtoMessage() {}

func (x *CMsgDOTABotDebugInfo_Bot_Action) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTABotDebugInfo_Bot_Action.ProtoReflect.Descriptor instead.
func (*CMsgDOTABotDebugInfo_Bot_Action) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{53, 0, 1}
}

func (x *CMsgDOTABotDebugInfo_Bot_Action) GetActionId() uint32 {
	if x != nil && x.ActionId != nil {
		return *x.ActionId
	}
	return 0
}

func (x *CMsgDOTABotDebugInfo_Bot_Action) GetActionTarget() string {
	if x != nil && x.ActionTarget != nil {
		return *x.ActionTarget
	}
	return ""
}

type CMsgMatchTips_SingleTip struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceAccountId *uint32 `protobuf:"varint,1,opt,name=source_account_id,json=sourceAccountId" json:"source_account_id,omitempty"`
	TargetAccountId *uint32 `protobuf:"varint,2,opt,name=target_account_id,json=targetAccountId" json:"target_account_id,omitempty"`
	TipAmount       *uint32 `protobuf:"varint,3,opt,name=tip_amount,json=tipAmount" json:"tip_amount,omitempty"`
	EventId         *EEvent `protobuf:"varint,4,opt,name=event_id,json=eventId,enum=dota.EEvent,def=0" json:"event_id,omitempty"`
}

// Default values for CMsgMatchTips_SingleTip fields.
const (
	Default_CMsgMatchTips_SingleTip_EventId = EEvent_EVENT_ID_NONE
)

func (x *CMsgMatchTips_SingleTip) Reset() {
	*x = CMsgMatchTips_SingleTip{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgMatchTips_SingleTip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgMatchTips_SingleTip) ProtoMessage() {}

func (x *CMsgMatchTips_SingleTip) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgMatchTips_SingleTip.ProtoReflect.Descriptor instead.
func (*CMsgMatchTips_SingleTip) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{56, 0}
}

func (x *CMsgMatchTips_SingleTip) GetSourceAccountId() uint32 {
	if x != nil && x.SourceAccountId != nil {
		return *x.SourceAccountId
	}
	return 0
}

func (x *CMsgMatchTips_SingleTip) GetTargetAccountId() uint32 {
	if x != nil && x.TargetAccountId != nil {
		return *x.TargetAccountId
	}
	return 0
}

func (x *CMsgMatchTips_SingleTip) GetTipAmount() uint32 {
	if x != nil && x.TipAmount != nil {
		return *x.TipAmount
	}
	return 0
}

func (x *CMsgMatchTips_SingleTip) GetEventId() EEvent {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return Default_CMsgMatchTips_SingleTip_EventId
}

type CMsgDOTAMatchMinimal_Player struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId  *uint32  `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	HeroId     *uint32  `protobuf:"varint,2,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	Kills      *uint32  `protobuf:"varint,3,opt,name=kills" json:"kills,omitempty"`
	Deaths     *uint32  `protobuf:"varint,4,opt,name=deaths" json:"deaths,omitempty"`
	Assists    *uint32  `protobuf:"varint,5,opt,name=assists" json:"assists,omitempty"`
	Items      []uint32 `protobuf:"varint,6,rep,name=items" json:"items,omitempty"`
	PlayerSlot *uint32  `protobuf:"varint,7,opt,name=player_slot,json=playerSlot" json:"player_slot,omitempty"`
	ProName    *string  `protobuf:"bytes,8,opt,name=pro_name,json=proName" json:"pro_name,omitempty"`
}

func (x *CMsgDOTAMatchMinimal_Player) Reset() {
	*x = CMsgDOTAMatchMinimal_Player{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAMatchMinimal_Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAMatchMinimal_Player) ProtoMessage() {}

func (x *CMsgDOTAMatchMinimal_Player) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAMatchMinimal_Player.ProtoReflect.Descriptor instead.
func (*CMsgDOTAMatchMinimal_Player) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{57, 0}
}

func (x *CMsgDOTAMatchMinimal_Player) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgDOTAMatchMinimal_Player) GetHeroId() uint32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CMsgDOTAMatchMinimal_Player) GetKills() uint32 {
	if x != nil && x.Kills != nil {
		return *x.Kills
	}
	return 0
}

func (x *CMsgDOTAMatchMinimal_Player) GetDeaths() uint32 {
	if x != nil && x.Deaths != nil {
		return *x.Deaths
	}
	return 0
}

func (x *CMsgDOTAMatchMinimal_Player) GetAssists() uint32 {
	if x != nil && x.Assists != nil {
		return *x.Assists
	}
	return 0
}

func (x *CMsgDOTAMatchMinimal_Player) GetItems() []uint32 {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *CMsgDOTAMatchMinimal_Player) GetPlayerSlot() uint32 {
	if x != nil && x.PlayerSlot != nil {
		return *x.PlayerSlot
	}
	return 0
}

func (x *CMsgDOTAMatchMinimal_Player) GetProName() string {
	if x != nil && x.ProName != nil {
		return *x.ProName
	}
	return ""
}

type CMsgDOTAMatchMinimal_Tourney struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeagueId                     *uint32 `protobuf:"varint,1,opt,name=league_id,json=leagueId" json:"league_id,omitempty"`
	SeriesType                   *uint32 `protobuf:"varint,8,opt,name=series_type,json=seriesType" json:"series_type,omitempty"`
	SeriesGame                   *uint32 `protobuf:"varint,9,opt,name=series_game,json=seriesGame" json:"series_game,omitempty"`
	WeekendTourneyTournamentId   *uint32 `protobuf:"varint,10,opt,name=weekend_tourney_tournament_id,json=weekendTourneyTournamentId" json:"weekend_tourney_tournament_id,omitempty"`
	WeekendTourneySeasonTrophyId *uint32 `protobuf:"varint,11,opt,name=weekend_tourney_season_trophy_id,json=weekendTourneySeasonTrophyId" json:"weekend_tourney_season_trophy_id,omitempty"`
	WeekendTourneyDivision       *uint32 `protobuf:"varint,12,opt,name=weekend_tourney_division,json=weekendTourneyDivision" json:"weekend_tourney_division,omitempty"`
	WeekendTourneySkillLevel     *uint32 `protobuf:"varint,13,opt,name=weekend_tourney_skill_level,json=weekendTourneySkillLevel" json:"weekend_tourney_skill_level,omitempty"`
	RadiantTeamId                *uint32 `protobuf:"varint,2,opt,name=radiant_team_id,json=radiantTeamId" json:"radiant_team_id,omitempty"`
	RadiantTeamName              *string `protobuf:"bytes,3,opt,name=radiant_team_name,json=radiantTeamName" json:"radiant_team_name,omitempty"`
	RadiantTeamLogo              *uint64 `protobuf:"fixed64,4,opt,name=radiant_team_logo,json=radiantTeamLogo" json:"radiant_team_logo,omitempty"`
	RadiantTeamLogoUrl           *string `protobuf:"bytes,14,opt,name=radiant_team_logo_url,json=radiantTeamLogoUrl" json:"radiant_team_logo_url,omitempty"`
	DireTeamId                   *uint32 `protobuf:"varint,5,opt,name=dire_team_id,json=direTeamId" json:"dire_team_id,omitempty"`
	DireTeamName                 *string `protobuf:"bytes,6,opt,name=dire_team_name,json=direTeamName" json:"dire_team_name,omitempty"`
	DireTeamLogo                 *uint64 `protobuf:"fixed64,7,opt,name=dire_team_logo,json=direTeamLogo" json:"dire_team_logo,omitempty"`
	DireTeamLogoUrl              *string `protobuf:"bytes,15,opt,name=dire_team_logo_url,json=direTeamLogoUrl" json:"dire_team_logo_url,omitempty"`
}

func (x *CMsgDOTAMatchMinimal_Tourney) Reset() {
	*x = CMsgDOTAMatchMinimal_Tourney{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAMatchMinimal_Tourney) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAMatchMinimal_Tourney) ProtoMessage() {}

func (x *CMsgDOTAMatchMinimal_Tourney) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAMatchMinimal_Tourney.ProtoReflect.Descriptor instead.
func (*CMsgDOTAMatchMinimal_Tourney) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{57, 1}
}

func (x *CMsgDOTAMatchMinimal_Tourney) GetLeagueId() uint32 {
	if x != nil && x.LeagueId != nil {
		return *x.LeagueId
	}
	return 0
}

func (x *CMsgDOTAMatchMinimal_Tourney) GetSeriesType() uint32 {
	if x != nil && x.SeriesType != nil {
		return *x.SeriesType
	}
	return 0
}

func (x *CMsgDOTAMatchMinimal_Tourney) GetSeriesGame() uint32 {
	if x != nil && x.SeriesGame != nil {
		return *x.SeriesGame
	}
	return 0
}

func (x *CMsgDOTAMatchMinimal_Tourney) GetWeekendTourneyTournamentId() uint32 {
	if x != nil && x.WeekendTourneyTournamentId != nil {
		return *x.WeekendTourneyTournamentId
	}
	return 0
}

func (x *CMsgDOTAMatchMinimal_Tourney) GetWeekendTourneySeasonTrophyId() uint32 {
	if x != nil && x.WeekendTourneySeasonTrophyId != nil {
		return *x.WeekendTourneySeasonTrophyId
	}
	return 0
}

func (x *CMsgDOTAMatchMinimal_Tourney) GetWeekendTourneyDivision() uint32 {
	if x != nil && x.WeekendTourneyDivision != nil {
		return *x.WeekendTourneyDivision
	}
	return 0
}

func (x *CMsgDOTAMatchMinimal_Tourney) GetWeekendTourneySkillLevel() uint32 {
	if x != nil && x.WeekendTourneySkillLevel != nil {
		return *x.WeekendTourneySkillLevel
	}
	return 0
}

func (x *CMsgDOTAMatchMinimal_Tourney) GetRadiantTeamId() uint32 {
	if x != nil && x.RadiantTeamId != nil {
		return *x.RadiantTeamId
	}
	return 0
}

func (x *CMsgDOTAMatchMinimal_Tourney) GetRadiantTeamName() string {
	if x != nil && x.RadiantTeamName != nil {
		return *x.RadiantTeamName
	}
	return ""
}

func (x *CMsgDOTAMatchMinimal_Tourney) GetRadiantTeamLogo() uint64 {
	if x != nil && x.RadiantTeamLogo != nil {
		return *x.RadiantTeamLogo
	}
	return 0
}

func (x *CMsgDOTAMatchMinimal_Tourney) GetRadiantTeamLogoUrl() string {
	if x != nil && x.RadiantTeamLogoUrl != nil {
		return *x.RadiantTeamLogoUrl
	}
	return ""
}

func (x *CMsgDOTAMatchMinimal_Tourney) GetDireTeamId() uint32 {
	if x != nil && x.DireTeamId != nil {
		return *x.DireTeamId
	}
	return 0
}

func (x *CMsgDOTAMatchMinimal_Tourney) GetDireTeamName() string {
	if x != nil && x.DireTeamName != nil {
		return *x.DireTeamName
	}
	return ""
}

func (x *CMsgDOTAMatchMinimal_Tourney) GetDireTeamLogo() uint64 {
	if x != nil && x.DireTeamLogo != nil {
		return *x.DireTeamLogo
	}
	return 0
}

func (x *CMsgDOTAMatchMinimal_Tourney) GetDireTeamLogoUrl() string {
	if x != nil && x.DireTeamLogoUrl != nil {
		return *x.DireTeamLogoUrl
	}
	return ""
}

type CMsgMatchConsumableUsage_PlayerUsage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId       *uint32                `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	ConsumablesUsed []*CMsgConsumableUsage `protobuf:"bytes,2,rep,name=consumables_used,json=consumablesUsed" json:"consumables_used,omitempty"`
}

func (x *CMsgMatchConsumableUsage_PlayerUsage) Reset() {
	*x = CMsgMatchConsumableUsage_PlayerUsage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgMatchConsumableUsage_PlayerUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgMatchConsumableUsage_PlayerUsage) ProtoMessage() {}

func (x *CMsgMatchConsumableUsage_PlayerUsage) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgMatchConsumableUsage_PlayerUsage.ProtoReflect.Descriptor instead.
func (*CMsgMatchConsumableUsage_PlayerUsage) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{59, 0}
}

func (x *CMsgMatchConsumableUsage_PlayerUsage) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgMatchConsumableUsage_PlayerUsage) GetConsumablesUsed() []*CMsgConsumableUsage {
	if x != nil {
		return x.ConsumablesUsed
	}
	return nil
}

type CMsgMatchEventActionGrants_Grant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId  *uint32 `protobuf:"varint,1,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	ActionId *uint32 `protobuf:"varint,2,opt,name=action_id,json=actionId" json:"action_id,omitempty"`
	Audit    *uint32 `protobuf:"varint,3,opt,name=audit" json:"audit,omitempty"`
	Quantity *uint32 `protobuf:"varint,4,opt,name=quantity" json:"quantity,omitempty"`
}

func (x *CMsgMatchEventActionGrants_Grant) Reset() {
	*x = CMsgMatchEventActionGrants_Grant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgMatchEventActionGrants_Grant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgMatchEventActionGrants_Grant) ProtoMessage() {}

func (x *CMsgMatchEventActionGrants_Grant) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgMatchEventActionGrants_Grant.ProtoReflect.Descriptor instead.
func (*CMsgMatchEventActionGrants_Grant) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{60, 0}
}

func (x *CMsgMatchEventActionGrants_Grant) GetEventId() uint32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

func (x *CMsgMatchEventActionGrants_Grant) GetActionId() uint32 {
	if x != nil && x.ActionId != nil {
		return *x.ActionId
	}
	return 0
}

func (x *CMsgMatchEventActionGrants_Grant) GetAudit() uint32 {
	if x != nil && x.Audit != nil {
		return *x.Audit
	}
	return 0
}

func (x *CMsgMatchEventActionGrants_Grant) GetQuantity() uint32 {
	if x != nil && x.Quantity != nil {
		return *x.Quantity
	}
	return 0
}

type CMsgMatchEventActionGrants_PlayerGrants struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId         *uint32                             `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	ActionsGrantedOld []*CMsgMatchEventActionGrants_Grant `protobuf:"bytes,2,rep,name=actions_granted_old,json=actionsGrantedOld" json:"actions_granted_old,omitempty"`
	ActionsGranted    []*CMsgPendingEventAward            `protobuf:"bytes,3,rep,name=actions_granted,json=actionsGranted" json:"actions_granted,omitempty"`
}

func (x *CMsgMatchEventActionGrants_PlayerGrants) Reset() {
	*x = CMsgMatchEventActionGrants_PlayerGrants{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgMatchEventActionGrants_PlayerGrants) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgMatchEventActionGrants_PlayerGrants) ProtoMessage() {}

func (x *CMsgMatchEventActionGrants_PlayerGrants) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgMatchEventActionGrants_PlayerGrants.ProtoReflect.Descriptor instead.
func (*CMsgMatchEventActionGrants_PlayerGrants) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{60, 1}
}

func (x *CMsgMatchEventActionGrants_PlayerGrants) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgMatchEventActionGrants_PlayerGrants) GetActionsGrantedOld() []*CMsgMatchEventActionGrants_Grant {
	if x != nil {
		return x.ActionsGrantedOld
	}
	return nil
}

func (x *CMsgMatchEventActionGrants_PlayerGrants) GetActionsGranted() []*CMsgPendingEventAward {
	if x != nil {
		return x.ActionsGranted
	}
	return nil
}

type CMsgCustomGameWhitelistForEdit_WhitelistEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomGameId   *uint64                    `protobuf:"varint,1,opt,name=custom_game_id,json=customGameId" json:"custom_game_id,omitempty"`
	WhitelistState *ECustomGameWhitelistState `protobuf:"varint,2,opt,name=whitelist_state,json=whitelistState,enum=dota.ECustomGameWhitelistState,def=0" json:"whitelist_state,omitempty"`
}

// Default values for CMsgCustomGameWhitelistForEdit_WhitelistEntry fields.
const (
	Default_CMsgCustomGameWhitelistForEdit_WhitelistEntry_WhitelistState = ECustomGameWhitelistState_CUSTOM_GAME_WHITELIST_STATE_UNKNOWN
)

func (x *CMsgCustomGameWhitelistForEdit_WhitelistEntry) Reset() {
	*x = CMsgCustomGameWhitelistForEdit_WhitelistEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgCustomGameWhitelistForEdit_WhitelistEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgCustomGameWhitelistForEdit_WhitelistEntry) ProtoMessage() {}

func (x *CMsgCustomGameWhitelistForEdit_WhitelistEntry) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgCustomGameWhitelistForEdit_WhitelistEntry.ProtoReflect.Descriptor instead.
func (*CMsgCustomGameWhitelistForEdit_WhitelistEntry) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{62, 0}
}

func (x *CMsgCustomGameWhitelistForEdit_WhitelistEntry) GetCustomGameId() uint64 {
	if x != nil && x.CustomGameId != nil {
		return *x.CustomGameId
	}
	return 0
}

func (x *CMsgCustomGameWhitelistForEdit_WhitelistEntry) GetWhitelistState() ECustomGameWhitelistState {
	if x != nil && x.WhitelistState != nil {
		return *x.WhitelistState
	}
	return Default_CMsgCustomGameWhitelistForEdit_WhitelistEntry_WhitelistState
}

type CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId           *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	NumCommonMatches    *uint32 `protobuf:"varint,2,opt,name=num_common_matches,json=numCommonMatches" json:"num_common_matches,omitempty"`
	EarliestCommonMatch *uint32 `protobuf:"varint,3,opt,name=earliest_common_match,json=earliestCommonMatch" json:"earliest_common_match,omitempty"`
	LatestCommonMatch   *uint32 `protobuf:"varint,4,opt,name=latest_common_match,json=latestCommonMatch" json:"latest_common_match,omitempty"`
	Generation          *uint32 `protobuf:"varint,5,opt,name=generation" json:"generation,omitempty"`
	Persona             *string `protobuf:"bytes,6,opt,name=persona" json:"persona,omitempty"`
	AlreadyBanned       *bool   `protobuf:"varint,7,opt,name=already_banned,json=alreadyBanned" json:"already_banned,omitempty"`
}

func (x *CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account) Reset() {
	*x = CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account) ProtoMessage() {}

func (x *CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account.ProtoReflect.Descriptor instead.
func (*CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{74, 0}
}

func (x *CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account) GetNumCommonMatches() uint32 {
	if x != nil && x.NumCommonMatches != nil {
		return *x.NumCommonMatches
	}
	return 0
}

func (x *CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account) GetEarliestCommonMatch() uint32 {
	if x != nil && x.EarliestCommonMatch != nil {
		return *x.EarliestCommonMatch
	}
	return 0
}

func (x *CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account) GetLatestCommonMatch() uint32 {
	if x != nil && x.LatestCommonMatch != nil {
		return *x.LatestCommonMatch
	}
	return 0
}

func (x *CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account) GetGeneration() uint32 {
	if x != nil && x.Generation != nil {
		return *x.Generation
	}
	return 0
}

func (x *CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account) GetPersona() string {
	if x != nil && x.Persona != nil {
		return *x.Persona
	}
	return ""
}

func (x *CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account) GetAlreadyBanned() bool {
	if x != nil && x.AlreadyBanned != nil {
		return *x.AlreadyBanned
	}
	return false
}

type CMsgPullTabsData_Slot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId  *uint32 `protobuf:"varint,1,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	BoardId  *uint32 `protobuf:"varint,2,opt,name=board_id,json=boardId" json:"board_id,omitempty"`
	HeroId   *uint32 `protobuf:"varint,3,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	ActionId *uint32 `protobuf:"varint,4,opt,name=action_id,json=actionId" json:"action_id,omitempty"`
	Redeemed *bool   `protobuf:"varint,5,opt,name=redeemed" json:"redeemed,omitempty"`
}

func (x *CMsgPullTabsData_Slot) Reset() {
	*x = CMsgPullTabsData_Slot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPullTabsData_Slot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPullTabsData_Slot) ProtoMessage() {}

func (x *CMsgPullTabsData_Slot) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPullTabsData_Slot.ProtoReflect.Descriptor instead.
func (*CMsgPullTabsData_Slot) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{75, 0}
}

func (x *CMsgPullTabsData_Slot) GetEventId() uint32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

func (x *CMsgPullTabsData_Slot) GetBoardId() uint32 {
	if x != nil && x.BoardId != nil {
		return *x.BoardId
	}
	return 0
}

func (x *CMsgPullTabsData_Slot) GetHeroId() uint32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CMsgPullTabsData_Slot) GetActionId() uint32 {
	if x != nil && x.ActionId != nil {
		return *x.ActionId
	}
	return 0
}

func (x *CMsgPullTabsData_Slot) GetRedeemed() bool {
	if x != nil && x.Redeemed != nil {
		return *x.Redeemed
	}
	return false
}

type CMsgPullTabsData_Jackpot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BoardId  *uint32 `protobuf:"varint,1,opt,name=board_id,json=boardId" json:"board_id,omitempty"`
	ActionId *uint32 `protobuf:"varint,2,opt,name=action_id,json=actionId" json:"action_id,omitempty"`
	HeroId   *uint32 `protobuf:"varint,3,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
}

func (x *CMsgPullTabsData_Jackpot) Reset() {
	*x = CMsgPullTabsData_Jackpot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPullTabsData_Jackpot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPullTabsData_Jackpot) ProtoMessage() {}

func (x *CMsgPullTabsData_Jackpot) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPullTabsData_Jackpot.ProtoReflect.Descriptor instead.
func (*CMsgPullTabsData_Jackpot) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{75, 1}
}

func (x *CMsgPullTabsData_Jackpot) GetBoardId() uint32 {
	if x != nil && x.BoardId != nil {
		return *x.BoardId
	}
	return 0
}

func (x *CMsgPullTabsData_Jackpot) GetActionId() uint32 {
	if x != nil && x.ActionId != nil {
		return *x.ActionId
	}
	return 0
}

func (x *CMsgPullTabsData_Jackpot) GetHeroId() uint32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

type CMsgUnderDraftData_BenchSlot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlotId *uint32 `protobuf:"varint,1,opt,name=slot_id,json=slotId" json:"slot_id,omitempty"`
	HeroId *uint32 `protobuf:"varint,2,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	Stars  *uint32 `protobuf:"varint,3,opt,name=stars" json:"stars,omitempty"`
}

func (x *CMsgUnderDraftData_BenchSlot) Reset() {
	*x = CMsgUnderDraftData_BenchSlot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgUnderDraftData_BenchSlot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgUnderDraftData_BenchSlot) ProtoMessage() {}

func (x *CMsgUnderDraftData_BenchSlot) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgUnderDraftData_BenchSlot.ProtoReflect.Descriptor instead.
func (*CMsgUnderDraftData_BenchSlot) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{76, 0}
}

func (x *CMsgUnderDraftData_BenchSlot) GetSlotId() uint32 {
	if x != nil && x.SlotId != nil {
		return *x.SlotId
	}
	return 0
}

func (x *CMsgUnderDraftData_BenchSlot) GetHeroId() uint32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CMsgUnderDraftData_BenchSlot) GetStars() uint32 {
	if x != nil && x.Stars != nil {
		return *x.Stars
	}
	return 0
}

type CMsgUnderDraftData_ShopSlot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlotId          *uint32 `protobuf:"varint,1,opt,name=slot_id,json=slotId" json:"slot_id,omitempty"`
	HeroId          *uint32 `protobuf:"varint,2,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	IsSpecialReward *bool   `protobuf:"varint,3,opt,name=is_special_reward,json=isSpecialReward" json:"is_special_reward,omitempty"`
}

func (x *CMsgUnderDraftData_ShopSlot) Reset() {
	*x = CMsgUnderDraftData_ShopSlot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgUnderDraftData_ShopSlot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgUnderDraftData_ShopSlot) ProtoMessage() {}

func (x *CMsgUnderDraftData_ShopSlot) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgUnderDraftData_ShopSlot.ProtoReflect.Descriptor instead.
func (*CMsgUnderDraftData_ShopSlot) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_proto_rawDescGZIP(), []int{76, 1}
}

func (x *CMsgUnderDraftData_ShopSlot) GetSlotId() uint32 {
	if x != nil && x.SlotId != nil {
		return *x.SlotId
	}
	return 0
}

func (x *CMsgUnderDraftData_ShopSlot) GetHeroId() uint32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CMsgUnderDraftData_ShopSlot) GetIsSpecialReward() bool {
	if x != nil && x.IsSpecialReward != nil {
		return *x.IsSpecialReward
	}
	return false
}

var File_dota_gcmessages_common_proto protoreflect.FileDescriptor

var file_dota_gcmessages_common_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x64, 0x6f, 0x74, 0x61, 0x5f, 0x67, 0x63, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04,
	0x64, 0x6f, 0x74, 0x61, 0x1a, 0x13, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x67, 0x63, 0x73, 0x64, 0x6b,
	0x5f, 0x67, 0x63, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x17, 0x64, 0x6f, 0x74, 0x61, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdf, 0x23, 0x0a, 0x18, 0x43,
	0x53, 0x4f, 0x44, 0x4f, 0x54, 0x41, 0x47, 0x61, 0x6d, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xa6, 0x1d,
	0x01, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x77, 0x69, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x77, 0x69, 0x6e, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x73, 0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x6c, 0x6f, 0x73, 0x73, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x78, 0x70, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x78, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x23,
	0x0a, 0x0d, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6c, 0x65, 0x61, 0x76, 0x65,
	0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x61, 0x72, 0x79, 0x5f, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x3a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72,
	0x79, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x17,
	0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x75, 0x6e, 0x74,
	0x69, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6c,
	0x6f, 0x77, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x1c, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x65, 0x78, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x70, 0x72, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x65, 0x78, 0x74, 0x43, 0x68, 0x61, 0x74, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x56, 0x6f,
	0x69, 0x63, 0x65, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x12, 0x4b, 0x0a, 0x23,
	0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x74,
	0x65, 0x78, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x56, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1e, 0x70, 0x72, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x54, 0x65, 0x78, 0x74, 0x43, 0x68, 0x61, 0x74,
	0x55, 0x6e, 0x74, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x61, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x65, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x6c, 0x61, 0x73,
	0x74, 0x41, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x65, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x4a, 0x0a, 0x22, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x61, 0x72, 0x79, 0x5f, 0x61, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x65, 0x64, 0x5f, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1e,
	0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x41, 0x62, 0x61,
	0x6e, 0x64, 0x6f, 0x6e, 0x65, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x30,
	0x0a, 0x14, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6c, 0x65,
	0x61, 0x76, 0x65, 0x72, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x67, 0x61,
	0x6d, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x13, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6b, 0x12, 0x3d, 0x0a, 0x1b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x27, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x14, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x19, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x75, 0x6e, 0x74, 0x69,
	0x6c, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x55, 0x6e, 0x74, 0x69, 0x6c,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x2a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x12, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x58, 0x0a, 0x14, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x2c,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x50, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x0c,
	0x50, 0x41, 0x52, 0x54, 0x4e, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x52, 0x12, 0x70, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x32, 0x0a, 0x15, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x13, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x44, 0x0a, 0x1d, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e,
	0x6c, 0x61, 0x77, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d, 0x73, 0x68, 0x75,
	0x74, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x61, 0x77, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3f, 0x0a, 0x1c, 0x6c, 0x6f,
	0x77, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x73,
	0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x19, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x47, 0x61, 0x6d,
	0x65, 0x73, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x29, 0x0a, 0x10, 0x63,
	0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18,
	0x31, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69,
	0x76, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x55, 0x0a, 0x27, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74,
	0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x24, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69,
	0x74, 0x69, 0x76, 0x65, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47,
	0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x3b, 0x0a,
	0x1a, 0x73, 0x6f, 0x6c, 0x6f, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x32, 0x30, 0x31, 0x39, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x34, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x17, 0x73, 0x6f, 0x6c, 0x6f, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69,
	0x76, 0x65, 0x32, 0x30, 0x31, 0x39, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x67, 0x0a, 0x31, 0x73, 0x6f,
	0x6c, 0x6f, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x32,
	0x30, 0x31, 0x39, 0x5f, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x67, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18,
	0x36, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x2c, 0x73, 0x6f, 0x6c, 0x6f, 0x43, 0x6f, 0x6d, 0x70, 0x65,
	0x74, 0x69, 0x74, 0x69, 0x76, 0x65, 0x32, 0x30, 0x31, 0x39, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x72, 0x75, 0x69, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10,
	0x72, 0x65, 0x63, 0x72, 0x75, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x32, 0x0a, 0x15, 0x68, 0x61, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x38, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x13, 0x68, 0x61, 0x73, 0x4e, 0x65, 0x77, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x6c, 0x65, 0x61, 0x67, 0x75,
	0x65, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x39, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69,
	0x73, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x2e, 0x0a, 0x13,
	0x63, 0x61, 0x73, 0x75, 0x61, 0x6c, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x64, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x63, 0x61, 0x73, 0x75, 0x61,
	0x6c, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x12, 0x41, 0x0a, 0x1d,
	0x73, 0x6f, 0x6c, 0x6f, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x18, 0x3d, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x1a, 0x73, 0x6f, 0x6c, 0x6f, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69,
	0x74, 0x69, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x12,
	0x43, 0x0a, 0x1e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x64, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x70, 0x61, 0x72, 0x74, 0x79, 0x43, 0x6f,
	0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x63, 0x61, 0x73, 0x75, 0x61, 0x6c, 0x5f, 0x31,
	0x76, 0x31, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x18,
	0x41, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x63, 0x61, 0x73, 0x75, 0x61, 0x6c, 0x31, 0x76, 0x31,
	0x47, 0x61, 0x6d, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x1a, 0x63,
	0x75, 0x72, 0x72, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x63, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x43, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x16, 0x63, 0x75, 0x72, 0x72, 0x41, 0x6c, 0x6c, 0x48, 0x65, 0x72, 0x6f, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x44, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x18, 0x45, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x4b,
	0x0a, 0x23, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x72, 0x5f, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x47, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1e, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x53, 0x65, 0x71, 0x4e, 0x75,
	0x6d, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x48, 0x0a, 0x21, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x5f, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x48, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x65,
	0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x44, 0x0a, 0x1f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x6f, 0x6c, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x49, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x4f, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x13, 0x74,
	0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65,
	0x79, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x49, 0x0a, 0x21, 0x74,
	0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x55, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x52,
	0x65, 0x63, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69,
	0x74, 0x65, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x57, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x66,
	0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x37, 0x0a, 0x18, 0x61,
	0x6e, 0x63, 0x68, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x58, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x61,
	0x6e, 0x63, 0x68, 0x6f, 0x72, 0x65, 0x64, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x21, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x61, 0x6e, 0x5f, 0x75,
	0x6e, 0x74, 0x69, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x59, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x1d, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x42, 0x61, 0x6e, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2b,
	0x0a, 0x12, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x31, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65,
	0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x31, 0x12, 0x2b, 0x0a, 0x12, 0x72,
	0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x32, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x47,
	0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x12, 0x2b, 0x0a, 0x12, 0x72, 0x65, 0x63, 0x65,
	0x6e, 0x74, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x33, 0x18, 0x5c,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x33, 0x12, 0x3f, 0x0a, 0x1c, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c,
	0x5f, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x64,
	0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x5d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x6c, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x61, 0x6e, 0x6b,
	0x65, 0x64, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x6b, 0x0a, 0x33, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x6c, 0x5f, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x65,
	0x64, 0x5f, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x61,
	0x6d, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x5e, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x53, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x12, 0x4e, 0x0a, 0x24, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x73,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x67,
	0x61, 0x6d, 0x65, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x18, 0x5f, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x61, 0x6c, 0x52, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x64, 0x12, 0x48, 0x0a, 0x21, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x73,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x72,
	0x61, 0x6e, 0x6b, 0x5f, 0x70, 0x65, 0x61, 0x6b, 0x18, 0x60, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x52,
	0x61, 0x6e, 0x6b, 0x65, 0x64, 0x52, 0x61, 0x6e, 0x6b, 0x50, 0x65, 0x61, 0x6b, 0x12, 0x49, 0x0a,
	0x21, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x61,
	0x6c, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x72,
	0x65, 0x64, 0x18, 0x61, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x6c, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x61, 0x6e, 0x6b, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x19, 0x73, 0x6f, 0x6c, 0x6f,
	0x5f, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x64,
	0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x62, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x73, 0x6f, 0x6c,
	0x6f, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x52,
	0x61, 0x6e, 0x6b, 0x12, 0x65, 0x0a, 0x30, 0x73, 0x6f, 0x6c, 0x6f, 0x5f, 0x73, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x69,
	0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x72, 0x65,
	0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x63, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x2b, 0x73,
	0x6f, 0x6c, 0x6f, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x61, 0x6e, 0x6b, 0x65,
	0x64, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x61, 0x6d, 0x65,
	0x73, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x48, 0x0a, 0x21, 0x73, 0x6f,
	0x6c, 0x6f, 0x5f, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x61, 0x6e, 0x6b,
	0x65, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x18,
	0x64, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d, 0x73, 0x6f, 0x6c, 0x6f, 0x53, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x61, 0x6c, 0x52, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x64, 0x12, 0x42, 0x0a, 0x1e, 0x73, 0x6f, 0x6c, 0x6f, 0x5f, 0x73, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x72, 0x61, 0x6e,
	0x6b, 0x5f, 0x70, 0x65, 0x61, 0x6b, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x73, 0x6f,
	0x6c, 0x6f, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x61, 0x6e, 0x6b, 0x65, 0x64,
	0x52, 0x61, 0x6e, 0x6b, 0x50, 0x65, 0x61, 0x6b, 0x12, 0x43, 0x0a, 0x1e, 0x73, 0x6f, 0x6c, 0x6f,
	0x5f, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x18, 0x66, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x1b, 0x73, 0x6f, 0x6c, 0x6f, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x61,
	0x6e, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x12, 0x30, 0x0a,
	0x14, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x67, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x66, 0x61, 0x76,
	0x6f, 0x72, 0x69, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x12,
	0x2c, 0x0a, 0x12, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x72, 0x65, 0x63,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x44, 0x0a,
	0x1f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x69, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x47, 0x61,
	0x6d, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x77, 0x69,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x31, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x57, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x31, 0x12, 0x29,
	0x0a, 0x11, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x77, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x32, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x6e,
	0x74, 0x57, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x12, 0x29, 0x0a, 0x11, 0x72, 0x65, 0x63,
	0x65, 0x6e, 0x74, 0x5f, 0x77, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x33, 0x18, 0x6c,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x57, 0x69, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x33, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x61, 0x63, 0x68, 0x5f, 0x72, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x6f, 0x61, 0x63,
	0x68, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x70, 0x65,
	0x74, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x6b,
	0x18, 0x6e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74,
	0x69, 0x76, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x5e, 0x0a, 0x2c, 0x63,
	0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x5f,
	0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x6d, 0x65,
	0x73, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x6f, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x28, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f,
	0x72, 0x65, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x61, 0x6d,
	0x65, 0x73, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x38, 0x0a, 0x18, 0x63,
	0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x70, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x63,
	0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x76, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x64, 0x0a, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x61, 0x6c,
	0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x72,
	0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x71, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x2b,
	0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x76, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x61, 0x6d,
	0x65, 0x73, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x72, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x75, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x52,
	0x0a, 0x0e, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x70, 0x73,
	0x18, 0x73, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x53,
	0x4f, 0x44, 0x4f, 0x54, 0x41, 0x47, 0x61, 0x6d, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x70, 0x52, 0x0d, 0x72, 0x6f, 0x6c, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x69, 0x63, 0x61,
	0x70, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x67, 0x61, 0x75, 0x6e, 0x74, 0x6c, 0x65, 0x74, 0x5f, 0x74,
	0x69, 0x65, 0x72, 0x18, 0x74, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x67, 0x61, 0x75, 0x6e, 0x74,
	0x6c, 0x65, 0x74, 0x54, 0x69, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x67, 0x61, 0x75, 0x6e, 0x74,
	0x6c, 0x65, 0x74, 0x5f, 0x77, 0x69, 0x6e, 0x73, 0x18, 0x75, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x67, 0x61, 0x75, 0x6e, 0x74, 0x6c, 0x65, 0x74, 0x57, 0x69, 0x6e, 0x73, 0x12, 0x27, 0x0a, 0x0f,
	0x67, 0x61, 0x75, 0x6e, 0x74, 0x6c, 0x65, 0x74, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x65, 0x73, 0x18,
	0x76, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x67, 0x61, 0x75, 0x6e, 0x74, 0x6c, 0x65, 0x74, 0x4c,
	0x6f, 0x73, 0x73, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x67, 0x61, 0x75, 0x6e, 0x74, 0x6c, 0x65,
	0x74, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x77, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x12, 0x67, 0x61, 0x75, 0x6e, 0x74, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x63,
	0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x78, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x3e, 0x0a, 0x0c,
	0x52, 0x6f, 0x6c, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x70, 0x12, 0x12, 0x0a, 0x04,
	0x72, 0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x68, 0x61, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x08, 0x68, 0x61, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x70, 0x22, 0xe7, 0x02, 0x0a,
	0x16, 0x43, 0x53, 0x4f, 0x44, 0x4f, 0x54, 0x41, 0x47, 0x61, 0x6d, 0x65, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x50, 0x6c, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xa6, 0x1d,
	0x01, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x6c, 0x75, 0x73, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x70, 0x6c, 0x75, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x70,
	0x6c, 0x75, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x70, 0x6c, 0x75, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x12,
	0x70, 0x72, 0x65, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x70, 0x72, 0x65, 0x70, 0x61, 0x69,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x72,
	0x65, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x70, 0x72, 0x65, 0x70, 0x61, 0x69,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x11,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x5f, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x10, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x41, 0x67, 0x72, 0x65, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xc5, 0x01, 0x0a, 0x23, 0x43, 0x4d, 0x73, 0x67, 0x4c,
	0x6f, 0x62, 0x62, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x6c, 0x75, 0x73, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x54,
	0x0a, 0x0b, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x62, 0x61, 0x64, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4c,
	0x6f, 0x62, 0x62, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x6c, 0x75, 0x73, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x48,
	0x65, 0x72, 0x6f, 0x42, 0x61, 0x64, 0x67, 0x65, 0x52, 0x0a, 0x68, 0x65, 0x72, 0x6f, 0x42, 0x61,
	0x64, 0x67, 0x65, 0x73, 0x1a, 0x48, 0x0a, 0x09, 0x48, 0x65, 0x72, 0x6f, 0x42, 0x61, 0x64, 0x67,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x68, 0x65,
	0x72, 0x6f, 0x5f, 0x62, 0x61, 0x64, 0x67, 0x65, 0x5f, 0x78, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x68, 0x65, 0x72, 0x6f, 0x42, 0x61, 0x64, 0x67, 0x65, 0x58, 0x70, 0x22, 0x9f,
	0x0e, 0x0a, 0x14, 0x43, 0x4d, 0x73, 0x67, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x4f, 0x0a, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x64, 0x6f, 0x74,
	0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x1a, 0x67, 0x0a, 0x15, 0x43, 0x68, 0x61, 0x74, 0x57, 0x68, 0x65, 0x65, 0x6c,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x10,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x45, 0x6e, 0x64, 0x1a, 0x67, 0x0a, 0x15,
	0x50, 0x69, 0x6e, 0x67, 0x57, 0x68, 0x65, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x24, 0x0a, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x65, 0x6e,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x45, 0x6e, 0x64, 0x1a, 0x48, 0x0a, 0x16, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69,
	0x63, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x1a,
	0x5a, 0x0a, 0x16, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x5f,
	0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x1a, 0xa2, 0x0a, 0x0a, 0x0d,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x5f, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x6d, 0x69,
	0x75, 0x6d, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x54,
	0x65, 0x61, 0x6d, 0x12, 0x2e, 0x0a, 0x13, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f,
	0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x11, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x37, 0x0a, 0x18, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f,
	0x74, 0x65, 0x61, 0x6d, 0x5f, 0x66, 0x6f, 0x69, 0x6c, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x54,
	0x65, 0x61, 0x6d, 0x46, 0x6f, 0x69, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2e, 0x0a, 0x13,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x6d,
	0x61, 0x73, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x7c, 0x0a, 0x22,
	0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x77, 0x68,
	0x65, 0x65, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x57, 0x68, 0x65, 0x65, 0x6c, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x1e, 0x75, 0x6e, 0x6c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x43, 0x68, 0x61, 0x74, 0x57, 0x68, 0x65, 0x65, 0x6c, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x5f, 0x0a, 0x16, 0x70, 0x6c,
	0x75, 0x73, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x64, 0x6f, 0x74,
	0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x50, 0x6c, 0x75, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x14, 0x70, 0x6c, 0x75, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x54, 0x0a, 0x0c, 0x77,
	0x61, 0x67, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4c, 0x6f, 0x62,
	0x62, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x52, 0x0b, 0x77, 0x61, 0x67, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x73, 0x12, 0x5d, 0x0a, 0x11, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x77, 0x61, 0x67, 0x65, 0x72, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x64,
	0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69,
	0x63, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52,
	0x0f, 0x72, 0x61, 0x6e, 0x6b, 0x57, 0x61, 0x67, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73,
	0x12, 0x50, 0x0a, 0x0a, 0x74, 0x69, 0x70, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x4c, 0x6f, 0x62, 0x62, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x09, 0x74, 0x69, 0x70, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x70, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x70, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x6f, 0x0a, 0x1a, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x5f, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x18, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x69, 0x63, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x7c, 0x0a, 0x22, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x70,
	0x69, 0x6e, 0x67, 0x5f, 0x77, 0x68, 0x65, 0x65, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x57,
	0x68, 0x65, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x1e, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x50, 0x69, 0x6e, 0x67, 0x57, 0x68,
	0x65, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6b,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x77, 0x61, 0x67, 0x65, 0x72, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6b, 0x12, 0x4d, 0x0a, 0x08, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x08, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x69,
	0x65, 0x73, 0x12, 0x6c, 0x0a, 0x19, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x16, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x47,
	0x61, 0x6d, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x6c, 0x0a, 0x16, 0x43, 0x4d, 0x73, 0x67, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61,
	0x6d, 0x65, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x67,
	0x61, 0x6d, 0x65, 0x53, 0x65, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x57,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x8e,
	0x02, 0x0a, 0x19, 0x43, 0x4d, 0x73, 0x67, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x47, 0x61, 0x75, 0x6e,
	0x74, 0x6c, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x4b, 0x0a, 0x08,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x47,
	0x61, 0x75, 0x6e, 0x74, 0x6c, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x1a, 0xa3, 0x01, 0x0a, 0x0f, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x67, 0x61, 0x75, 0x6e, 0x74, 0x6c, 0x65, 0x74, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x67, 0x61, 0x75, 0x6e, 0x74, 0x6c, 0x65, 0x74, 0x54, 0x69, 0x65,
	0x72, 0x12, 0x23, 0x0a, 0x0d, 0x67, 0x61, 0x75, 0x6e, 0x74, 0x6c, 0x65, 0x74, 0x5f, 0x77, 0x69,
	0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x67, 0x61, 0x75, 0x6e, 0x74, 0x6c,
	0x65, 0x74, 0x57, 0x69, 0x6e, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x67, 0x61, 0x75, 0x6e, 0x74, 0x6c,
	0x65, 0x74, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x67, 0x61, 0x75, 0x6e, 0x74, 0x6c, 0x65, 0x74, 0x4c, 0x6f, 0x73, 0x73, 0x65, 0x73, 0x22,
	0xd9, 0x02, 0x0a, 0x18, 0x43, 0x4d, 0x73, 0x67, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08,
	0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x64, 0x6f, 0x74, 0x61,
	0x2e, 0x45, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x3a, 0x0d, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x49,
	0x44, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x6c, 0x6f, 0x67, 0x6f,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x4c, 0x6f, 0x67,
	0x6f, 0x12, 0x2e, 0x0a, 0x13, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11,
	0x67, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x12, 0x32, 0x0a, 0x15, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x13, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x70,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x67, 0x75,
	0x69, 0x6c, 0x64, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x75,
	0x69, 0x6c, 0x64, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x22, 0xec, 0x02, 0x0a, 0x1c,
	0x43, 0x4d, 0x73, 0x67, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x46,
	0x61, 0x6b, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0c, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4c, 0x6f, 0x62,
	0x62, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x0b, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x73,
	0x5f, 0x70, 0x6c, 0x75, 0x73, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x50, 0x6c, 0x75, 0x73, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x74,
	0x65, 0x61, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x66, 0x61, 0x76, 0x6f, 0x72,
	0x69, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x32, 0x0a, 0x15, 0x66, 0x61, 0x76, 0x6f, 0x72,
	0x69, 0x74, 0x65, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65,
	0x54, 0x65, 0x61, 0x6d, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x3d, 0x0a, 0x0a, 0x67,
	0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x09, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xa6, 0x02, 0x0a, 0x14, 0x43,
	0x4d, 0x73, 0x67, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x43, 0x75, 0x70, 0x56, 0x69, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x77, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x77, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x69, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x72, 0x6f, 0x70, 0x68, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x72, 0x6f, 0x70, 0x68,
	0x79, 0x49, 0x64, 0x22, 0x55, 0x0a, 0x1d, 0x43, 0x4d, 0x73, 0x67, 0x4c, 0x6f, 0x62, 0x62, 0x79,
	0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x43, 0x75, 0x70, 0x56, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x07, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x43, 0x75, 0x70, 0x56, 0x69, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x07, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x22, 0x39, 0x0a, 0x1d, 0x43, 0x4d,
	0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x97, 0x02, 0x0a, 0x14, 0x43, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x49, 0x74, 0x65, 0x6d, 0x48, 0x65, 0x72, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x68, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x79, 0x63, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x63, 0x79, 0x63,
	0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x77, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x72, 0x6f, 0x70, 0x22,
	0xf0, 0x01, 0x0a, 0x16, 0x43, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x65,
	0x61, 0x6d, 0x53, 0x68, 0x6f, 0x77, 0x63, 0x61, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x65,
	0x72, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x72,
	0x6f, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x11, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x79, 0x63, 0x6c,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x77, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x08, 0x77, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x69, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x74, 0x79,
	0x6c, 0x65, 0x22, 0x4a, 0x0a, 0x1a, 0x43, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xb1,
	0x0c, 0x0a, 0x16, 0x43, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54,
	0x69, 0x6d, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6b, 0x69,
	0x6c, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x61, 0x74, 0x68, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x65, 0x61, 0x74, 0x68, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x61, 0x73,
	0x73, 0x69, 0x73, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x74, 0x5f, 0x77, 0x6f, 0x72,
	0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6e, 0x65, 0x74, 0x57, 0x6f, 0x72,
	0x74, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x78, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02,
	0x78, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x68, 0x69, 0x74, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x48, 0x69, 0x74, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x6f, 0x75, 0x6e, 0x74,
	0x79, 0x5f, 0x72, 0x75, 0x6e, 0x65, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x52, 0x75, 0x6e, 0x65, 0x47, 0x6f, 0x6c,
	0x64, 0x12, 0x37, 0x0a, 0x18, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x65, 0x70,
	0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x15, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x72, 0x65, 0x65, 0x70, 0x55,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x6f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x64, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x6f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x57, 0x61, 0x72, 0x64, 0x73, 0x44, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x65, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x67,
	0x6f, 0x6c, 0x64, 0x5f, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x12, 0x72, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x6f, 0x6c, 0x64, 0x45, 0x61,
	0x72, 0x6e, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x67, 0x6f, 0x6c, 0x64, 0x5f, 0x6c, 0x6f, 0x73,
	0x73, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x11, 0x67, 0x6f, 0x6c, 0x64, 0x4c, 0x6f, 0x73, 0x73, 0x50, 0x72, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x6b, 0x69, 0x6c,
	0x6c, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x68, 0x65,
	0x72, 0x6f, 0x4b, 0x69, 0x6c, 0x6c, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x72,
	0x65, 0x65, 0x70, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x65, 0x70, 0x4b, 0x69, 0x6c, 0x6c, 0x47, 0x6f,
	0x6c, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x67,
	0x6f, 0x6c, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x69, 0x6e, 0x67, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6f, 0x74, 0x68,
	0x65, 0x72, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x65, 0x62, 0x61,
	0x63, 0x6b, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63,
	0x6f, 0x6d, 0x65, 0x62, 0x61, 0x63, 0x6b, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x65,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x67, 0x6f, 0x6c, 0x64,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x32, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x6c, 0x32, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x65, 0x70,
	0x5f, 0x64, 0x65, 0x6e, 0x79, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x63, 0x72, 0x65, 0x65, 0x70, 0x44, 0x65, 0x6e, 0x79, 0x47, 0x6f, 0x6c, 0x64, 0x12,
	0x33, 0x0a, 0x16, 0x74, 0x70, 0x5f, 0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x5f, 0x70, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x31, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x13, 0x74, 0x70, 0x53, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x64, 0x31, 0x12, 0x33, 0x0a, 0x16, 0x74, 0x70, 0x5f, 0x73, 0x63, 0x72, 0x6f, 0x6c,
	0x6c, 0x73, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x32, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x74, 0x70, 0x53, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x50,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x32, 0x12, 0x33, 0x0a, 0x16, 0x74, 0x70, 0x5f,
	0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x64, 0x5f, 0x33, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x74, 0x70, 0x53, 0x63, 0x72,
	0x6f, 0x6c, 0x6c, 0x73, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x33, 0x12, 0x33,
	0x0a, 0x16, 0x74, 0x70, 0x5f, 0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x5f, 0x70, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x34, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13,
	0x74, 0x70, 0x53, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x64, 0x34, 0x12, 0x33, 0x0a, 0x16, 0x74, 0x70, 0x5f, 0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c,
	0x73, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x35, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x13, 0x74, 0x70, 0x53, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x35, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x65, 0x75, 0x74,
	0x72, 0x61, 0x6c, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x6e, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x72, 0x6f, 0x73, 0x68, 0x61, 0x6e, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x6f, 0x73, 0x68, 0x61, 0x6e, 0x47, 0x6f, 0x6c, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x47, 0x6f, 0x6c, 0x64,
	0x12, 0x24, 0x0a, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x5f, 0x31, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x31, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x32, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x32, 0x12, 0x24, 0x0a, 0x0e,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x33, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x33, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x5f, 0x34, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x34, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x35, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x35, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x24, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2c, 0x0a,
	0x12, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x5f, 0x73, 0x70,
	0x65, 0x6e, 0x74, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x47, 0x6f, 0x6c, 0x64, 0x53, 0x70, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63,
	0x61, 0x6d, 0x70, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x26, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x63, 0x61, 0x6d, 0x70, 0x73, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x64,
	0x18, 0x27, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x64, 0x73, 0x50, 0x6c, 0x61,
	0x63, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x69, 0x70, 0x6c, 0x65, 0x5f, 0x6b, 0x69,
	0x6c, 0x6c, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x72, 0x69, 0x70, 0x6c,
	0x65, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x61, 0x6d, 0x70, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x61, 0x6d, 0x70, 0x61, 0x67,
	0x65, 0x73, 0x22, 0x8e, 0x01, 0x0a, 0x14, 0x43, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x65, 0x61,
	0x6d, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x2e, 0x0a, 0x13, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x5f, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x5f,
	0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x65, 0x6e,
	0x65, 0x6d, 0x79, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x4b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x12,
	0x32, 0x0a, 0x15, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x5f, 0x62, 0x61, 0x72, 0x72, 0x61, 0x63, 0x6b,
	0x73, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13,
	0x65, 0x6e, 0x65, 0x6d, 0x79, 0x42, 0x61, 0x72, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x4b, 0x69, 0x6c,
	0x6c, 0x65, 0x64, 0x22, 0x52, 0x0a, 0x1d, 0x43, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x63, 0x0a, 0x19, 0x43, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74,
	0x42, 0x75, 0x66, 0x66, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e,
	0x74, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x65,
	0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x42, 0x75, 0x66, 0x66, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x74, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x5d, 0x0a, 0x15,
	0x43, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x48, 0x65, 0x72, 0x6f, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x70, 0x69, 0x63, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x50, 0x69, 0x63, 0x6b, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x65,
	0x61, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x22, 0x7a, 0x0a, 0x17, 0x43,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x50, 0x61, 0x72, 0x74, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x07, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x22, 0xc5, 0x01, 0x0a, 0x24, 0x43, 0x4d, 0x73, 0x67,
	0x44, 0x4f, 0x54, 0x41, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x46, 0x61, 0x6e, 0x74, 0x61,
	0x73, 0x79, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x5f,
	0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22,
	0x4e, 0x0a, 0x14, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x48, 0x61, 0x73, 0x49, 0x74,
	0x65, 0x6d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x22,
	0x34, 0x0a, 0x17, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x48, 0x61, 0x73, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x61,
	0x73, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x61,
	0x73, 0x49, 0x74, 0x65, 0x6d, 0x22, 0x31, 0x0a, 0x10, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x49,
	0x73, 0x50, 0x72, 0x6f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x2c, 0x0a, 0x13, 0x43, 0x4d, 0x73, 0x67,
	0x47, 0x43, 0x49, 0x73, 0x50, 0x72, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x22, 0x5a, 0x0a, 0x18, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f,
	0x54, 0x41, 0x48, 0x61, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x66, 0x73, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x74, 0x65, 0x6d, 0x64, 0x65, 0x66, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x69, 0x74, 0x65, 0x6d, 0x64, 0x65, 0x66, 0x49,
	0x64, 0x73, 0x22, 0x3a, 0x0a, 0x1b, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x48, 0x61,
	0x73, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x66, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x61, 0x73, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x68, 0x61, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x91,
	0x01, 0x0a, 0x1b, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2f, 0x0a,
	0x14, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x11, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x73, 0x12, 0x22,
	0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x61, 0x6c, 0x6c, 0x46, 0x6f, 0x72, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x22, 0x93, 0x02, 0x0a, 0x23, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x47, 0x65, 0x74,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x11, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x47, 0x43, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64,
	0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x73,
	0x1a, 0x85, 0x01, 0x0a, 0x0e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x2d, 0x0a, 0x13, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x10, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x62, 0x6f, 0x6e, 0x75,
	0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x64, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x65, 0x73, 0x22, 0x59, 0x0a, 0x1f, 0x43, 0x4d, 0x73, 0x67,
	0x47, 0x43, 0x54, 0x6f, 0x47, 0x43, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x53, 0x65, 0x74,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x65, 0x61, 0x67, 0x75,
	0x65, 0x49, 0x64, 0x22, 0x83, 0x01, 0x0a, 0x17, 0x43, 0x53, 0x4f, 0x44, 0x4f, 0x54, 0x41, 0x4d,
	0x61, 0x70, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x23, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xa6, 0x1d, 0x01, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x04, 0x80, 0xa6, 0x1d, 0x01, 0x52,
	0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x22, 0x36, 0x0a, 0x13, 0x43, 0x4d, 0x73,
	0x67, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x73, 0x22, 0xb2, 0x01, 0x0a, 0x1a, 0x43, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x75,
	0x6d, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x67, 0x70, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x67, 0x70, 0x6d, 0x12,
	0x10, 0x0a, 0x03, 0x78, 0x70, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x78, 0x70,
	0x6d, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x61, 0x74, 0x68,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x65, 0x61, 0x74, 0x68, 0x73, 0x12,
	0x25, 0x0a, 0x0e, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d, 0x69, 0x74, 0x65, 0x6d, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x73, 0x22, 0x63, 0x0a, 0x17, 0x43, 0x43, 0x6f, 0x6d, 0x70, 0x65,
	0x6e, 0x64, 0x69, 0x75, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x12, 0x34, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x64, 0x69,
	0x75, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0x4a, 0x0a, 0x13, 0x43,
	0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x75, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x33, 0x0a, 0x05, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e,
	0x64, 0x69, 0x75, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x52, 0x05, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x67, 0x0a, 0x14, 0x43, 0x41, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x71, 0x75, 0x69, 0x70, 0x53, 0x6c, 0x6f, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6c,
	0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x6c, 0x6f,
	0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x66, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x65, 0x66, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x22, 0x84, 0x0e, 0x0a, 0x13, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x62, 0x61, 0x63, 0x6b, 0x67,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x44, 0x65, 0x66, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x34, 0x0a, 0x05, 0x73, 0x6c, 0x6f,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43,
	0x61, 0x72, 0x64, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x05, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x62, 0x61, 0x64, 0x67, 0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x62, 0x61, 0x64, 0x67, 0x65, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x55, 0x0a, 0x19, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x5f, 0x63, 0x75, 0x70, 0x5f, 0x76, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x43, 0x75, 0x70, 0x56, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x16, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x43, 0x75, 0x70,
	0x56, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x6e, 0x6b, 0x5f,
	0x74, 0x69, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x6b,
	0x54, 0x69, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x61, 0x6e, 0x6b, 0x12,
	0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x70, 0x6c, 0x75, 0x73, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x50,
	0x6c, 0x75, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x12, 0x37, 0x0a,
	0x18, 0x70, 0x6c, 0x75, 0x73, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x15, 0x70, 0x6c, 0x75, 0x73, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x74,
	0x69, 0x65, 0x72, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x72, 0x61, 0x6e, 0x6b, 0x54, 0x69, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x2c,
	0x0a, 0x12, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x5f,
	0x74, 0x69, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x70, 0x72, 0x65, 0x76,
	0x69, 0x6f, 0x75, 0x73, 0x52, 0x61, 0x6e, 0x6b, 0x54, 0x69, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x12,
	0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x5f, 0x6d, 0x6d, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x61, 0x6e, 0x6b, 0x54, 0x69,
	0x65, 0x72, 0x4d, 0x6d, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x6c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x72, 0x65, 0x12, 0x24, 0x0a,
	0x0e, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x5f, 0x70, 0x65, 0x61, 0x6b, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x61, 0x6e, 0x6b, 0x54, 0x69, 0x65, 0x72, 0x50,
	0x65, 0x61, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x1a, 0xbd, 0x06, 0x0a, 0x04, 0x53, 0x6c,
	0x6f, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x06, 0x74,
	0x72, 0x6f, 0x70, 0x68, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x64, 0x6f,
	0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x43, 0x61, 0x72, 0x64, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x2e, 0x54, 0x72, 0x6f, 0x70,
	0x68, 0x79, 0x52, 0x06, 0x74, 0x72, 0x6f, 0x70, 0x68, 0x79, 0x12, 0x37, 0x0a, 0x04, 0x73, 0x74,
	0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43,
	0x61, 0x72, 0x64, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x52, 0x04, 0x73,
	0x74, 0x61, 0x74, 0x12, 0x37, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54,
	0x41, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x61, 0x72, 0x64, 0x2e, 0x53, 0x6c, 0x6f,
	0x74, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x37, 0x0a, 0x04,
	0x68, 0x65, 0x72, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x6f, 0x74,
	0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x43, 0x61, 0x72, 0x64, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x2e, 0x48, 0x65, 0x72, 0x6f, 0x52,
	0x04, 0x68, 0x65, 0x72, 0x6f, 0x12, 0x43, 0x0a, 0x08, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x63, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x61,
	0x72, 0x64, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x2e, 0x45, 0x6d, 0x6f, 0x74, 0x69, 0x63, 0x6f, 0x6e,
	0x52, 0x08, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x04, 0x74, 0x65,
	0x61, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43,
	0x61, 0x72, 0x64, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x04, 0x74,
	0x65, 0x61, 0x6d, 0x1a, 0x48, 0x0a, 0x06, 0x54, 0x72, 0x6f, 0x70, 0x68, 0x79, 0x12, 0x1b, 0x0a,
	0x09, 0x74, 0x72, 0x6f, 0x70, 0x68, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x74, 0x72, 0x6f, 0x70, 0x68, 0x79, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72,
	0x6f, 0x70, 0x68, 0x79, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x74, 0x72, 0x6f, 0x70, 0x68, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x1a, 0x73, 0x0a,
	0x04, 0x53, 0x74, 0x61, 0x74, 0x12, 0x4c, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x61, 0x72,
	0x64, 0x2e, 0x45, 0x53, 0x74, 0x61, 0x74, 0x49, 0x44, 0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x5f, 0x43, 0x6f, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x1a, 0x48, 0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x1a, 0x5d, 0x0a, 0x04,
	0x48, 0x65, 0x72, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x77, 0x69, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x68, 0x65, 0x72, 0x6f, 0x57, 0x69, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x65,
	0x72, 0x6f, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x68, 0x65, 0x72, 0x6f, 0x4c, 0x6f, 0x73, 0x73, 0x65, 0x73, 0x1a, 0x2b, 0x0a, 0x08, 0x45,
	0x6d, 0x6f, 0x74, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6d, 0x6f, 0x74, 0x69,
	0x63, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x65, 0x6d,
	0x6f, 0x74, 0x69, 0x63, 0x6f, 0x6e, 0x49, 0x64, 0x1a, 0x1f, 0x0a, 0x04, 0x54, 0x65, 0x61, 0x6d,
	0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x22, 0xcb, 0x01, 0x0a, 0x07, 0x45, 0x53,
	0x74, 0x61, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x5f, 0x43, 0x6f, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x6b,
	0x5f, 0x65, 0x53, 0x74, 0x61, 0x74, 0x5f, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x61,
	0x6e, 0x6b, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x6b, 0x5f, 0x65, 0x53, 0x74, 0x61, 0x74, 0x5f,
	0x57, 0x69, 0x6e, 0x73, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x5f, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x73, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13,
	0x6b, 0x5f, 0x65, 0x53, 0x74, 0x61, 0x74, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x64, 0x10, 0x05, 0x12, 0x1a, 0x0a, 0x16, 0x6b, 0x5f, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x5f, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x65, 0x10,
	0x06, 0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x5f, 0x65, 0x53, 0x74, 0x61, 0x74, 0x5f, 0x50, 0x72, 0x65,
	0x76, 0x69, 0x6f, 0x75, 0x73, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x10,
	0x07, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x53, 0x74, 0x61, 0x74, 0x5f, 0x47, 0x61, 0x6d,
	0x65, 0x73, 0x4d, 0x56, 0x50, 0x10, 0x08, 0x22, 0xbf, 0x04, 0x0a, 0x16, 0x43, 0x53, 0x4f, 0x44,
	0x4f, 0x54, 0x41, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x12, 0x23, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xa6, 0x1d, 0x01, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xa6, 0x1d, 0x01, 0x52,
	0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x07, 0x73, 0x6c, 0x6f, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xa6, 0x1d, 0x01, 0x52,
	0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x5f, 0x30, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x69, 0x6e,
	0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x30, 0x12, 0x1e, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x5f, 0x31, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x69, 0x6e,
	0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x31, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x65, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x6d, 0x61, 0x78, 0x51, 0x75, 0x65, 0x73, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x1f,
	0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x68, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x22, 0x97, 0x01, 0x0a, 0x23, 0x43, 0x4d,
	0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x52, 0x65, 0x72, 0x6f,
	0x6c, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x12, 0x36, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x45, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x3a, 0x0d, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x4e, 0x45,
	0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x65,
	0x72, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x72,
	0x6f, 0x49, 0x64, 0x22, 0xfd, 0x01, 0x0a, 0x23, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x52, 0x65,
	0x72, 0x6f, 0x6c, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x64, 0x6f,
	0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x52, 0x65, 0x72, 0x6f, 0x6c, 0x6c, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a, 0x0f,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x7a, 0x0a, 0x07, 0x45, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x13, 0x0a, 0x0f, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x5f, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64,
	0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x43, 0x61,
	0x6e, 0x74, 0x52, 0x65, 0x72, 0x6f, 0x6c, 0x6c, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x10, 0x04, 0x22, 0x6b, 0x0a, 0x18, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x70,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x28, 0x0a, 0x10, 0x74, 0x6f, 0x70, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x67, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0e, 0x74, 0x6f, 0x70, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0f, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x74, 0x68, 0x65, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x4f, 0x66, 0x54, 0x68, 0x65, 0x44, 0x61, 0x79,
	0x22, 0xf5, 0x25, 0x0a, 0x19, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x52, 0x65, 0x61,
	0x6c, 0x74, 0x69, 0x6d, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x42,
	0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x52, 0x65, 0x61,
	0x6c, 0x74, 0x69, 0x6d, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x05, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x12, 0x41, 0x0a, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54,
	0x41, 0x52, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x05,
	0x74, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x4d, 0x0a, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x52, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65,
	0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69,
	0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x48, 0x0a, 0x0a, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x52, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65,
	0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x09, 0x67, 0x72, 0x61, 0x70, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1f,
	0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x1a,
	0xf1, 0x02, 0x0a, 0x0b, 0x54, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x61,
	0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65,
	0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6c,
	0x6f, 0x67, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x06, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4c,
	0x6f, 0x67, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x74, 0x61, 0x67, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x61, 0x67, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x74, 0x5f, 0x77, 0x6f, 0x72, 0x74,
	0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6e, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x74,
	0x68, 0x12, 0x47, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f,
	0x54, 0x41, 0x52, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x6e,
	0x6c, 0x79, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6f,
	0x6e, 0x6c, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x65, 0x65, 0x72,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x68, 0x65, 0x65, 0x72, 0x73, 0x12,
	0x22, 0x0a, 0x0d, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x67, 0x6f,
	0x55, 0x72, 0x6c, 0x1a, 0x91, 0x01, 0x0a, 0x0b, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x69, 0x74,
	0x65, 0x6d, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x04, 0x73, 0x6f, 0x6c, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x63, 0x6b,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x89, 0x01, 0x0a, 0x0e, 0x41, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x63, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x6d, 0x61, 0x78,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x63, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e,
	0x4d, 0x61, 0x78, 0x1a, 0x5d, 0x0a, 0x0f, 0x48, 0x65, 0x72, 0x6f, 0x54, 0x6f, 0x48, 0x65, 0x72,
	0x6f, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6d,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6d,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x69,
	0x73, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x61, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x73, 0x1a, 0x1d, 0x0a, 0x0b, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x02, 0x69,
	0x64, 0x1a, 0xbe, 0x0e, 0x0a, 0x0d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x74, 0x65, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x72, 0x6f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x72, 0x6f, 0x69, 0x64, 0x12, 0x22, 0x0a,
	0x0c, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x72, 0x65, 0x67, 0x65, 0x6e, 0x72, 0x61, 0x74, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x72, 0x65, 0x67, 0x65,
	0x6e, 0x72, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x6e, 0x61, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x61, 0x6e, 0x61, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x6d, 0x61, 0x6e, 0x61,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x61,
	0x78, 0x6d, 0x61, 0x6e, 0x61, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x6d,
	0x61, 0x6e, 0x61, 0x72, 0x65, 0x67, 0x65, 0x6e, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0d, 0x6d, 0x61, 0x6e, 0x61, 0x72, 0x65, 0x67, 0x65, 0x6e, 0x72, 0x61, 0x74,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x53, 0x74,
	0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x61,
	0x67, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x62, 0x61,
	0x73, 0x65, 0x41, 0x67, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x6c, 0x6c,
	0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x61,
	0x72, 0x6d, 0x6f, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65,
	0x41, 0x72, 0x6d, 0x6f, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6d, 0x6f,
	0x76, 0x65, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x62,
	0x61, 0x73, 0x65, 0x4d, 0x6f, 0x76, 0x65, 0x73, 0x70, 0x65, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x67, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x61, 0x67, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x6c,
	0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x72, 0x6d, 0x6f, 0x72,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x61, 0x72, 0x6d, 0x6f, 0x72, 0x12, 0x1c, 0x0a,
	0x09, 0x6d, 0x6f, 0x76, 0x65, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x6d, 0x6f, 0x76, 0x65, 0x73, 0x70, 0x65, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x64,
	0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x61, 0x6d,
	0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x64, 0x61, 0x6d, 0x61,
	0x67, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x68, 0x65, 0x72, 0x6f, 0x44, 0x61,
	0x6d, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x64, 0x61,
	0x6d, 0x61, 0x67, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x6f, 0x77, 0x65,
	0x72, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x4c, 0x0a, 0x09, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x64, 0x6f, 0x74,
	0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x52, 0x65, 0x61, 0x6c, 0x74, 0x69,
	0x6d, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x41, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x09, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x6b,
	0x69, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65,
	0x61, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x64, 0x65, 0x61, 0x74, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x61,
	0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x68, 0x65, 0x72, 0x6f, 0x48, 0x65, 0x61, 0x6c, 0x69, 0x6e,
	0x67, 0x12, 0x20, 0x0a, 0x0c, 0x67, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x69,
	0x6e, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x67, 0x6f, 0x6c, 0x64, 0x50, 0x65, 0x72,
	0x4d, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x0a, 0x78, 0x70, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x69,
	0x6e, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x78, 0x70, 0x50, 0x65, 0x72, 0x4d, 0x69,
	0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x74, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x24, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x67, 0x6f, 0x6c, 0x64, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x67, 0x6f, 0x6c, 0x64,
	0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x26, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x78, 0x12, 0x0c,
	0x0a, 0x01, 0x79, 0x18, 0x27, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x79, 0x12, 0x21, 0x0a, 0x0c,
	0x72, 0x65, 0x73, 0x70, 0x61, 0x77, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x70, 0x61, 0x77, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x2b, 0x0a, 0x11, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6f, 0x6c,
	0x64, 0x6f, 0x77, 0x6e, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x75, 0x6c, 0x74, 0x69,
	0x6d, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x1f, 0x0a, 0x0b,
	0x68, 0x61, 0x73, 0x5f, 0x62, 0x75, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x2a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x68, 0x61, 0x73, 0x42, 0x75, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x41, 0x0a,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x2b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x64,
	0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x52, 0x65, 0x61, 0x6c,
	0x74, 0x69, 0x6d, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x49, 0x74,
	0x65, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x12, 0x4b, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x73, 0x68, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x2c,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x44, 0x4f, 0x54, 0x41, 0x52, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x47, 0x61, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x73, 0x68, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x57, 0x0a,
	0x10, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x2d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x52, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x47,
	0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x10, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x0b, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x2e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x64, 0x6f,
	0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x52, 0x65, 0x61, 0x6c, 0x74,
	0x69, 0x6d, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x41, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0b, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x5c, 0x0a, 0x12, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x74, 0x6f,
	0x5f, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x2f, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54,
	0x41, 0x52, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x2e, 0x48, 0x65, 0x72, 0x6f, 0x54, 0x6f, 0x48, 0x65, 0x72, 0x6f, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x0f, 0x68, 0x65, 0x72, 0x6f, 0x54, 0x6f, 0x48, 0x65, 0x72, 0x6f, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x61, 0x73, 0x5f, 0x75, 0x6c, 0x74, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x18, 0x30, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x68, 0x61, 0x73, 0x55, 0x6c,
	0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x68, 0x61, 0x73, 0x5f, 0x75, 0x6c,
	0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x18, 0x31, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x68, 0x61, 0x73, 0x55, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x4d, 0x61,
	0x6e, 0x61, 0x1a, 0xb5, 0x01, 0x0a, 0x0f, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x65,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x68, 0x65, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x78, 0x12, 0x0c,
	0x0a, 0x01, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x79, 0x12, 0x1c, 0x0a, 0x09,
	0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x65, 0x64, 0x1a, 0x73, 0x0a, 0x0b, 0x4b, 0x69,
	0x6c, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x61, 0x74, 0x68, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64, 0x65, 0x61, 0x74,
	0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x5f,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x1a,
	0x7d, 0x0a, 0x12, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x68,
	0x65, 0x72, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x48, 0x65, 0x72, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x5f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x47, 0x72, 0x61, 0x70, 0x68, 0x1a, 0x38,
	0x0a, 0x0e, 0x50, 0x69, 0x63, 0x6b, 0x42, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x65, 0x72, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x68, 0x65, 0x72, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x1a, 0x8d, 0x06, 0x0a, 0x0c, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1e, 0x0a, 0x0b, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x4f, 0x66, 0x44, 0x61, 0x79, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x73, 0x5f,
	0x6e, 0x69, 0x67, 0x68, 0x74, 0x73, 0x74, 0x61, 0x6c, 0x6b, 0x65, 0x72, 0x5f, 0x6e, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x73, 0x4e, 0x69, 0x67, 0x68,
	0x74, 0x73, 0x74, 0x61, 0x6c, 0x6b, 0x65, 0x72, 0x4e, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61,
	0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x67, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x65, 0x61,
	0x6d, 0x69, 0x64, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x52, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x44, 0x69, 0x72,
	0x65, 0x12, 0x44, 0x0a, 0x05, 0x70, 0x69, 0x63, 0x6b, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41,
	0x52, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x2e, 0x50, 0x69, 0x63, 0x6b, 0x42, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x52, 0x05, 0x70, 0x69, 0x63, 0x6b, 0x73, 0x12, 0x42, 0x0a, 0x04, 0x62, 0x61, 0x6e, 0x73, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x44, 0x4f, 0x54, 0x41, 0x52, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x47, 0x61, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x50, 0x69, 0x63, 0x6b, 0x42, 0x61, 0x6e, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x04, 0x62, 0x61, 0x6e, 0x73, 0x12, 0x41, 0x0a, 0x05, 0x6b,
	0x69, 0x6c, 0x6c, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x64, 0x6f, 0x74,
	0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x52, 0x65, 0x61, 0x6c, 0x74, 0x69,
	0x6d, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x4b, 0x69, 0x6c, 0x6c,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x56,
	0x0a, 0x0c, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0d,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x44, 0x4f, 0x54, 0x41, 0x52, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x47, 0x61, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0c, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x64,
	0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x65, 0x65, 0x72,
	0x73, 0x5f, 0x70, 0x65, 0x61, 0x6b, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x68,
	0x65, 0x65, 0x72, 0x73, 0x50, 0x65, 0x61, 0x6b, 0x1a, 0xcd, 0x04, 0x0a, 0x09, 0x47, 0x72, 0x61,
	0x70, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f,
	0x67, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x78,
	0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x67, 0x72, 0x61, 0x70, 0x68, 0x58, 0x70,
	0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x67, 0x72, 0x61, 0x70, 0x68, 0x4b, 0x69, 0x6c, 0x6c, 0x12,
	0x1f, 0x0a, 0x0b, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x67, 0x72, 0x61, 0x70, 0x68, 0x54, 0x6f, 0x77, 0x65, 0x72,
	0x12, 0x1b, 0x0a, 0x09, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x72, 0x61, 0x78, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x08, 0x67, 0x72, 0x61, 0x70, 0x68, 0x52, 0x61, 0x78, 0x12, 0x61, 0x0a,
	0x0e, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6c, 0x6f, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x44, 0x4f, 0x54, 0x41, 0x52, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x47, 0x61, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x54, 0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x0c, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x63, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x1a, 0x25, 0x0a, 0x0d, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x1a, 0x69, 0x0a, 0x11, 0x54, 0x65, 0x61, 0x6d, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x54, 0x0a, 0x09,
	0x6c, 0x6f, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x52,
	0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x22, 0x5b, 0x0a, 0x05, 0x65, 0x53, 0x74, 0x61, 0x74, 0x12, 0x13, 0x0a, 0x0f, 0x43,
	0x72, 0x65, 0x65, 0x70, 0x47, 0x6f, 0x6c, 0x64, 0x45, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x10, 0x00,
	0x12, 0x12, 0x0a, 0x0e, 0x4b, 0x69, 0x6c, 0x6c, 0x47, 0x6f, 0x6c, 0x64, 0x45, 0x61, 0x72, 0x6e,
	0x65, 0x64, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x65, 0x61, 0x74, 0x68, 0x41, 0x6e, 0x64,
	0x42, 0x75, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x47, 0x6f, 0x6c, 0x64, 0x4c, 0x6f, 0x73, 0x74, 0x10,
	0x02, 0x12, 0x0c, 0x0a, 0x08, 0x58, 0x50, 0x45, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x10, 0x03, 0x22,
	0x57, 0x0a, 0x09, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0b, 0x0a, 0x07,
	0x42, 0x6f, 0x74, 0x4c, 0x61, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x69, 0x64,
	0x4c, 0x61, 0x6e, 0x65, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x6f, 0x70, 0x4c, 0x61, 0x6e,
	0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x4a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x10, 0x03, 0x12,
	0x0c, 0x0a, 0x08, 0x41, 0x6e, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x10, 0x04, 0x12, 0x09, 0x0a,
	0x05, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x10, 0x05, 0x22, 0x81, 0x0f, 0x0a, 0x1e, 0x43, 0x4d, 0x73,
	0x67, 0x44, 0x4f, 0x54, 0x41, 0x52, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x47, 0x61, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x54, 0x65, 0x72, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x05, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x64, 0x6f, 0x74,
	0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x52, 0x65, 0x61, 0x6c, 0x74, 0x69,
	0x6d, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x54, 0x65, 0x72, 0x73, 0x65,
	0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x05, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x12, 0x46, 0x0a, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44,
	0x4f, 0x54, 0x41, 0x52, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x54, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x52, 0x0a, 0x09,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x52,
	0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x54, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x4d, 0x0a, 0x0a, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x44, 0x4f, 0x54, 0x41, 0x52, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x47, 0x61, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x54, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x67, 0x72, 0x61, 0x70, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x1a, 0xc1, 0x02, 0x0a, 0x0b, 0x54, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65,
	0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x5f,
	0x74, 0x61, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x54,
	0x61, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x06, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x67, 0x6f, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x74, 0x5f, 0x77, 0x6f, 0x72,
	0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6e, 0x65, 0x74, 0x57, 0x6f, 0x72,
	0x74, 0x68, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x65, 0x61, 0x6d, 0x4c,
	0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x4c, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x52, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x47,
	0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x54, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x73, 0x1a, 0xc3, 0x03, 0x0a, 0x0d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x72, 0x6f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x72, 0x6f, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6b, 0x69, 0x6c, 0x6c,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x61, 0x74, 0x68, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x65, 0x61, 0x74,
	0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x61,
	0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x64,
	0x65, 0x6e, 0x69, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x6c, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x6c, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x6f, 0x6c,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x67, 0x6f, 0x6c, 0x64, 0x12, 0x0c, 0x0a,
	0x01, 0x78, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x74,
	0x5f, 0x77, 0x6f, 0x72, 0x74, 0x68, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6e, 0x65,
	0x74, 0x57, 0x6f, 0x72, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x11, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x1a, 0xb5, 0x01, 0x0a, 0x0f, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x65,
	0x61, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x6c, 0x61, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x74, 0x69, 0x65, 0x72, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x01, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x65,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79,
	0x65, 0x64, 0x1a, 0x38, 0x0a, 0x0e, 0x50, 0x69, 0x63, 0x6b, 0x42, 0x61, 0x6e, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x65, 0x72, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x68, 0x65, 0x72, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x61, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x1a, 0xe1, 0x03, 0x0a,
	0x0c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x26, 0x0a,
	0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1b, 0x0a,
	0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x1d, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x1a, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65,
	0x61, 0x67, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c,
	0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x65, 0x61, 0x67, 0x75,
	0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x49, 0x0a, 0x05,
	0x70, 0x69, 0x63, 0x6b, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x64, 0x6f,
	0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x52, 0x65, 0x61, 0x6c, 0x74,
	0x69, 0x6d, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x54, 0x65, 0x72, 0x73,
	0x65, 0x2e, 0x50, 0x69, 0x63, 0x6b, 0x42, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x52, 0x05, 0x70, 0x69, 0x63, 0x6b, 0x73, 0x12, 0x47, 0x0a, 0x04, 0x62, 0x61, 0x6e, 0x73, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x44, 0x4f, 0x54, 0x41, 0x52, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x47, 0x61, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x54, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x63, 0x6b,
	0x42, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x04, 0x62, 0x61, 0x6e, 0x73,
	0x1a, 0x2a, 0x0a, 0x09, 0x47, 0x72, 0x61, 0x70, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a,
	0x0a, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x09, 0x67, 0x72, 0x61, 0x70, 0x68, 0x47, 0x6f, 0x6c, 0x64, 0x22, 0xce, 0x01, 0x0a,
	0x1e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x59, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d,
	0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x45, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x3a, 0x24, 0x45,
	0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x65, 0x64, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x22, 0x53, 0x0a,
	0x20, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x2f, 0x0a, 0x13, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x91, 0x02, 0x0a, 0x1b, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x53,
	0x44, 0x4f, 0x48, 0x65, 0x72, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f,
	0x62, 0x62, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x6c, 0x6f, 0x62, 0x62, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x77, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x77, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x70,
	0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x67, 0x70, 0x6d, 0x12, 0x10, 0x0a, 0x03,
	0x78, 0x70, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x78, 0x70, 0x6d, 0x12, 0x14,
	0x0a, 0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6b,
	0x69, 0x6c, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x61, 0x74, 0x68, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x65, 0x61, 0x74, 0x68, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x61,
	0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x22, 0x84, 0x04, 0x0a, 0x15, 0x43, 0x4d, 0x73, 0x67, 0x44,
	0x4f, 0x54, 0x41, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x12, 0x3c, 0x0a, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54,
	0x41, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x1a, 0xc2,
	0x02, 0x0a, 0x06, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x69, 0x74, 0x65, 0x6d, 0x64, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x69, 0x74, 0x65, 0x6d, 0x64, 0x65, 0x66, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x69, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x61, 0x73,
	0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x52, 0x0a, 0x0b, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27,
	0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x53, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x45, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x08, 0x45, 0x63, 0x6f, 0x6e, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x22, 0x68, 0x0a, 0x0b, 0x45, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x63, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x10, 0x00,
	0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x79, 0x73, 0x74, 0x65, 0x72, 0x79, 0x57, 0x68, 0x65, 0x65, 0x6c,
	0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x10, 0x03,
	0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x79, 0x73, 0x74, 0x65, 0x72, 0x79, 0x57, 0x68, 0x65, 0x65, 0x6c,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x42, 0x61, 0x73, 0x65, 0x64, 0x10, 0x04, 0x22, 0xb6, 0x03,
	0x0a, 0x1a, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x50, 0x0a, 0x0c,
	0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f,
	0x54, 0x41, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x0c, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0xc5,
	0x02, 0x0a, 0x0b, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x67,
	0x72, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x61, 0x78,
	0x47, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
	0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x14, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x69, 0x6e, 0x67, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x29,
	0x0a, 0x10, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x6f,
	0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x6f, 0x61, 0x6c, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x63, 0x68,
	0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x96, 0x16, 0x0a, 0x19, 0x43, 0x4d, 0x73, 0x67, 0x44,
	0x4f, 0x54, 0x41, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4c, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x64, 0x6f, 0x74, 0x61,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x50,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x60, 0x0a, 0x13, 0x69, 0x6e, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x53,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x49, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x11, 0x69, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x47, 0x0a, 0x21, 0x69, 0x6e, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f,
	0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x70, 0x65, 0x72, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x1c, 0x69, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x55, 0x0a,
	0x28, 0x69, 0x6e, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x23, 0x69, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x4d, 0x69, 0x6e,
	0x75, 0x74, 0x65, 0x73, 0x1a, 0x7a, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x5f,
	0x72, 0x61, 0x77, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x6d, 0x69, 0x6e, 0x52, 0x61, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x0d,
	0x6d, 0x61, 0x78, 0x5f, 0x72, 0x61, 0x77, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x52, 0x61, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x1a, 0x26, 0x0a, 0x07, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x61,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x49, 0x64, 0x1a, 0x3a, 0x0a, 0x0e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x1a, 0xc7, 0x06, 0x0a, 0x0a, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2f, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54,
	0x41, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x3a, 0x07, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a,
	0x07, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x53, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x07, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x57, 0x0a, 0x0b, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x64, 0x6f,
	0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x53, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x65, 0x41, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x09, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x49, 0x6e, 0x74, 0x52, 0x0a, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x07,
	0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x53, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x41,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x52, 0x07, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f,
	0x0a, 0x14, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6c, 0x6f,
	0x63, 0x6b, 0x4f, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x35, 0x0a, 0x17, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x14, 0x6c, 0x6f, 0x63, 0x6b, 0x4f, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6f,
	0x6e, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x6c, 0x6f, 0x63, 0x6b, 0x4f, 0x6e, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x12, 0x35, 0x0a, 0x17, 0x75, 0x73, 0x65,
	0x5f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x75, 0x73, 0x65, 0x41,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x12, 0x40, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x13, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x45, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x3a, 0x13, 0x4c, 0x45, 0x41, 0x47, 0x55, 0x45, 0x5f, 0x52, 0x45,
	0x47, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x06, 0x70, 0x68, 0x61, 0x73, 0x65, 0x73, 0x18, 0x12, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x12, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x45, 0x4c, 0x65, 0x61, 0x67, 0x75,
	0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x06, 0x70, 0x68, 0x61, 0x73, 0x65, 0x73, 0x1a, 0xae,
	0x06, 0x0a, 0x10, 0x49, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x44, 0x4f, 0x54, 0x41, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x07, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x58, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x44, 0x4f, 0x54, 0x41, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x65, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x74, 0x3a, 0x09, 0x45,
	0x61, 0x72, 0x6c, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x1a, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x07, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x64,
	0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x53, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x52, 0x07, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x12, 0x27, 0x0a,
	0x0f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x68, 0x65, 0x72, 0x6f, 0x65, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x48, 0x65, 0x72, 0x6f, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x51, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x64, 0x6f,
	0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x53, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x0b, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x75, 0x0a, 0x16, 0x61, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x50, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x74, 0x3a, 0x0c, 0x49, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x14, 0x61, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x26, 0x0a, 0x0f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x67, 0x72, 0x61,
	0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x54, 0x6f, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x15,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x5d, 0x0a, 0x0e, 0x72, 0x61, 0x77, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x50, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x65, 0x52, 0x61, 0x77, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x74, 0x3a, 0x06, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x52, 0x0c, 0x72, 0x61, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22,
	0x6a, 0x0a, 0x0f, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x10, 0x00, 0x12,
	0x08, 0x0a, 0x04, 0x48, 0x65, 0x72, 0x6f, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x65, 0x61,
	0x6d, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x10, 0x03, 0x12,
	0x0b, 0x0a, 0x07, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05,
	0x59, 0x65, 0x73, 0x4e, 0x6f, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x73, 0x54, 0x65, 0x61, 0x6d, 0x10, 0x06, 0x22, 0x91, 0x01, 0x0a, 0x0b,
	0x65, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x53,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x10, 0x03, 0x12,
	0x0e, 0x0a, 0x0a, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x10, 0x04, 0x12,
	0x0e, 0x0a, 0x0a, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x10, 0x05, 0x12,
	0x10, 0x0a, 0x0c, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x10,
	0x06, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x6f, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x10, 0x07, 0x22,
	0xd4, 0x01, 0x0a, 0x11, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x74, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x69, 0x72, 0x73, 0x74,
	0x54, 0x6f, 0x50, 0x61, 0x73, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x10, 0x01, 0x12, 0x13, 0x0a,
	0x0f, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x6f, 0x50, 0x61, 0x73, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x61,
	0x78, 0x54, 0x6f, 0x50, 0x61, 0x73, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x10, 0x04, 0x12, 0x12,
	0x0a, 0x0e, 0x4d, 0x69, 0x6e, 0x54, 0x6f, 0x50, 0x61, 0x73, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x75, 0x6d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x10, 0x06,
	0x12, 0x19, 0x0a, 0x15, 0x4d, 0x61, 0x78, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x75, 0x6d, 0x54, 0x6f,
	0x50, 0x61, 0x73, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x10, 0x07, 0x12, 0x19, 0x0a, 0x15, 0x4d,
	0x69, 0x6e, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x75, 0x6d, 0x54, 0x6f, 0x50, 0x61, 0x73, 0x73, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x10, 0x08, 0x22, 0x4e, 0x0a, 0x17, 0x65, 0x52, 0x61, 0x6e, 0x64, 0x6f,
	0x6d, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x74, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x61, 0x72, 0x6c, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x69, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x10, 0x01, 0x12, 0x0c, 0x0a,
	0x08, 0x4c, 0x61, 0x74, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x10, 0x03, 0x22, 0x27, 0x0a, 0x0f, 0x65, 0x52, 0x61, 0x77, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x74, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x10, 0x01, 0x22,
	0xb4, 0x2e, 0x0a, 0x0d, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x07,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64,
	0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x73, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x74, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x0b, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x27, 0x0a, 0x0f, 0x62, 0x61, 0x72, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0e, 0x62, 0x61, 0x72, 0x72, 0x61, 0x63,
	0x6b, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x6f,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x61, 0x6c, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x07, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x61, 0x6c, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x07,
	0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6c,
	0x6f, 0x62, 0x62, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x68, 0x75,
	0x6d, 0x61, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x67, 0x61, 0x6d, 0x65,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x61, 0x64, 0x69, 0x61,
	0x6e, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0c, 0x64, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x69, 0x72, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x69, 0x64, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x69, 0x64, 0x12, 0x2a, 0x0a,
	0x11, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e,
	0x74, 0x54, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x69, 0x72,
	0x65, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x64, 0x69, 0x72, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x2a, 0x0a, 0x11, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f,
	0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x19, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x72, 0x61, 0x64, 0x69,
	0x61, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x24, 0x0a, 0x0e, 0x64,
	0x69, 0x72, 0x65, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0c, 0x64, 0x69, 0x72, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x67,
	0x6f, 0x12, 0x31, 0x0a, 0x15, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x61,
	0x6d, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x67,
	0x6f, 0x55, 0x72, 0x6c, 0x12, 0x2b, 0x0a, 0x12, 0x64, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x65, 0x61,
	0x6d, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x37, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x64, 0x69, 0x72, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x67, 0x6f, 0x55, 0x72,
	0x6c, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x61,
	0x6d, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x13, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x65,
	0x61, 0x6d, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x64, 0x69, 0x72, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x76, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x76, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x56, 0x6f, 0x74, 0x65,
	0x73, 0x12, 0x44, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x44, 0x4f, 0x54, 0x41,
	0x5f, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x3a, 0x12, 0x44, 0x4f, 0x54, 0x41, 0x5f,
	0x47, 0x41, 0x4d, 0x45, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x52, 0x08, 0x67,
	0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x70, 0x69, 0x63, 0x6b, 0x73,
	0x5f, 0x62, 0x61, 0x6e, 0x73, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x6f,
	0x74, 0x61, 0x2e, 0x43, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x48, 0x65, 0x72, 0x6f, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x70, 0x69, 0x63, 0x6b, 0x73, 0x42,
	0x61, 0x6e, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x65, 0x71,
	0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x21, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x53, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x12, 0x54, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e,
	0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x10,
	0x52, 0x45, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45,
	0x52, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a,
	0x10, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74,
	0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x64, 0x69, 0x72, 0x65, 0x5f,
	0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x64, 0x69, 0x72, 0x65, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x72,
	0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x74, 0x61, 0x67, 0x18,
	0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x54, 0x65,
	0x61, 0x6d, 0x54, 0x61, 0x67, 0x12, 0x22, 0x0a, 0x0d, 0x64, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x65,
	0x61, 0x6d, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69,
	0x72, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x54, 0x61, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x59, 0x0a, 0x14, 0x62, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18,
	0x2b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x44, 0x4f, 0x54, 0x41, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x42, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x13, 0x62,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x18, 0x2c, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x12, 0x4c, 0x0a, 0x10, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x2d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x44, 0x4f, 0x54, 0x41, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x07, 0x52, 0x12, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x72,
	0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74,
	0x54, 0x65, 0x61, 0x6d, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x64, 0x69, 0x72,
	0x65, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x31, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x64, 0x69, 0x72, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x51, 0x0a, 0x0d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6f, 0x75, 0x74, 0x63, 0x6f,
	0x6d, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e,
	0x45, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x3a, 0x17, 0x6b,
	0x5f, 0x45, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x55,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x52, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x75, 0x74,
	0x63, 0x6f, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x34, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x5f, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x70, 0x72, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x76, 0x70, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x38, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x76, 0x70, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x07, 0x63, 0x6f, 0x61, 0x63, 0x68, 0x65,
	0x73, 0x18, 0x39, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x43, 0x6f, 0x61,
	0x63, 0x68, 0x52, 0x07, 0x63, 0x6f, 0x61, 0x63, 0x68, 0x65, 0x73, 0x1a, 0xaa, 0x18, 0x0a, 0x06,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x73, 0x6c, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x12,
	0x15, 0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x30, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x30, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x31,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x31, 0x12, 0x15, 0x0a,
	0x06, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x32, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x33, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x33, 0x12, 0x15, 0x0a, 0x06, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x34, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x34, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x35, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x35, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x36, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x36,
	0x12, 0x15, 0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x37, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x37, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x5f,
	0x38, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x38, 0x12, 0x15,
	0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x39, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x39, 0x12, 0x3c, 0x0a, 0x1a, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x18, 0x65, 0x78, 0x70, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x5f, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x76,
	0x69, 0x6f, 0x75, 0x73, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x1f, 0x0a,
	0x0b, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x11, 0x52, 0x0a, 0x72, 0x61, 0x6e, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x6d, 0x6d, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x6d, 0x6d, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x61, 0x6e,
	0x6b, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x42,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x72, 0x61, 0x6e, 0x6b, 0x54, 0x69, 0x65, 0x72, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64,
	0x65, 0x61, 0x74, 0x68, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x65, 0x61,
	0x74, 0x68, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x67, 0x6f, 0x6c, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x68,
	0x69, 0x74, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x48,
	0x69, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x73, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x67,
	0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x67, 0x6f, 0x6c, 0x64, 0x50, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x12, 0x1c, 0x0a,
	0x0a, 0x58, 0x50, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x58, 0x50, 0x50, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x67,
	0x6f, 0x6c, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x67, 0x6f, 0x6c, 0x64, 0x53, 0x70, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x65,
	0x72, 0x6f, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x68, 0x65, 0x72, 0x6f, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74,
	0x6f, 0x77, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x68, 0x65, 0x72, 0x6f, 0x48, 0x65, 0x61, 0x6c, 0x69, 0x6e,
	0x67, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x12, 0x1f, 0x0a,
	0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32,
	0x0a, 0x15, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x66, 0x65,
	0x65, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x22, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x36,
	0x0a, 0x17, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x75, 0x6e,
	0x63, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x79, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x15, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x61, 0x6e, 0x6b, 0x55, 0x6e, 0x63, 0x65, 0x72,
	0x74, 0x61, 0x69, 0x6e, 0x74, 0x79, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x75,
	0x6e, 0x63, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x72, 0x61, 0x6e, 0x6b, 0x55, 0x6e, 0x63,
	0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x26,
	0x0a, 0x0f, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x68, 0x65, 0x72, 0x6f, 0x50, 0x6c, 0x61,
	0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x26, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49,
	0x64, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x5f, 0x68, 0x65, 0x72, 0x6f,
	0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x64, 0x48, 0x65, 0x72, 0x6f, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12,
	0x2e, 0x0a, 0x13, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x5f,
	0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x64, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12,
	0x2e, 0x0a, 0x13, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x5f, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x68,
	0x65, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x64, 0x48, 0x65, 0x72, 0x6f, 0x48, 0x65, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x12,
	0x21, 0x0a, 0x0c, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18,
	0x27, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x4b, 0x69, 0x6c,
	0x6c, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x61,
	0x74, 0x68, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x64, 0x44, 0x65, 0x61, 0x74, 0x68, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x64, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x18, 0x29, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0d, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x12, 0x2a,
	0x0a, 0x11, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x5f, 0x66, 0x61, 0x72, 0x6d, 0x5f, 0x67,
	0x6f, 0x6c, 0x64, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x6c, 0x61, 0x69, 0x6d,
	0x65, 0x64, 0x46, 0x61, 0x72, 0x6d, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x25, 0x0a,
	0x0e, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x73, 0x18,
	0x2c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x44, 0x65,
	0x6e, 0x69, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x5f,
	0x6d, 0x69, 0x73, 0x73, 0x65, 0x73, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6c,
	0x61, 0x69, 0x6d, 0x65, 0x64, 0x4d, 0x69, 0x73, 0x73, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6d,
	0x69, 0x73, 0x73, 0x65, 0x73, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x69, 0x73,
	0x73, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x10, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x75,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x73, 0x18, 0x2f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52,
	0x0f, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x73,
	0x12, 0x61, 0x0a, 0x1a, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x75,
	0x6e, 0x69, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x30,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x74,
	0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x18, 0x61, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x48, 0x0a, 0x0f, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74,
	0x5f, 0x62, 0x75, 0x66, 0x66, 0x73, 0x18, 0x39, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64,
	0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x50, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x42, 0x75, 0x66, 0x66, 0x52, 0x0e, 0x70,
	0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x42, 0x75, 0x66, 0x66, 0x73, 0x12, 0x19, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x48, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x72, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x6c,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x49, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x61,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x53, 0x0a, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x18, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x6c, 0x75, 0x73, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x33, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x50, 0x6c, 0x75, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x74, 0x5f, 0x77, 0x6f, 0x72, 0x74,
	0x68, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6e, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x74,
	0x68, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x6f, 0x74, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75,
	0x6c, 0x74, 0x79, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x62, 0x6f, 0x74, 0x44, 0x69,
	0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x68, 0x65, 0x72, 0x6f,
	0x5f, 0x70, 0x69, 0x63, 0x6b, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x3f, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x68, 0x65, 0x72, 0x6f, 0x50, 0x69, 0x63, 0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x2a, 0x0a, 0x11, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x77, 0x61, 0x73, 0x5f, 0x72, 0x61, 0x6e,
	0x64, 0x6f, 0x6d, 0x65, 0x64, 0x18, 0x40, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x68, 0x65, 0x72,
	0x6f, 0x57, 0x61, 0x73, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x1d,
	0x68, 0x65, 0x72, 0x6f, 0x5f, 0x77, 0x61, 0x73, 0x5f, 0x64, 0x6f, 0x74, 0x61, 0x5f, 0x70, 0x6c,
	0x75, 0x73, 0x5f, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x45, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x19, 0x68, 0x65, 0x72, 0x6f, 0x57, 0x61, 0x73, 0x44, 0x6f, 0x74, 0x61,
	0x50, 0x6c, 0x75, 0x73, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5f,
	0x0a, 0x14, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x43, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x64,
	0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x48, 0x65, 0x72, 0x6f, 0x44, 0x61, 0x6d,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x52, 0x12, 0x68, 0x65, 0x72,
	0x6f, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x18,
	0x46, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x44, 0x65,
	0x61, 0x64, 0x12, 0x2b, 0x0a, 0x12, 0x67, 0x6f, 0x6c, 0x64, 0x5f, 0x6c, 0x6f, 0x73, 0x74, 0x5f,
	0x74, 0x6f, 0x5f, 0x64, 0x65, 0x61, 0x74, 0x68, 0x18, 0x47, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x67, 0x6f, 0x6c, 0x64, 0x4c, 0x6f, 0x73, 0x74, 0x54, 0x6f, 0x44, 0x65, 0x61, 0x74, 0x68, 0x12,
	0x30, 0x0a, 0x14, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6c,
	0x61, 0x6e, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x5f, 0x72, 0x75, 0x6e, 0x65,
	0x73, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x52,
	0x75, 0x6e, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x6f, 0x75, 0x74, 0x70, 0x6f, 0x73, 0x74, 0x73,
	0x5f, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x64, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x10, 0x6f, 0x75, 0x74, 0x70, 0x6f, 0x73, 0x74, 0x73, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65,
	0x64, 0x1a, 0x45, 0x0a, 0x0e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x74, 0x61, 0x5f, 0x74, 0x65, 0x61, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x6f, 0x74, 0x61, 0x54, 0x65, 0x61, 0x6d,
	0x12, 0x16, 0x0a, 0x06, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x1a, 0xc2, 0x01, 0x0a, 0x12, 0x48, 0x65, 0x72,
	0x6f, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x52, 0x65, 0x64, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x64,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x6f,
	0x73, 0x74, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x60, 0x0a, 0x0b, 0x64,
	0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x29, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x48, 0x65, 0x72,
	0x6f, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x14, 0x48, 0x45, 0x52,
	0x4f, 0x5f, 0x44, 0x41, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x50, 0x48, 0x59, 0x53, 0x49, 0x43, 0x41,
	0x4c, 0x52, 0x0a, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x59, 0x0a,
	0x0e, 0x48, 0x65, 0x72, 0x6f, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x18, 0x0a, 0x14, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x44, 0x41, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x50,
	0x48, 0x59, 0x53, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x48, 0x45, 0x52,
	0x4f, 0x5f, 0x44, 0x41, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x4d, 0x41, 0x47, 0x49, 0x43, 0x41, 0x4c,
	0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x44, 0x41, 0x4d, 0x41, 0x47,
	0x45, 0x5f, 0x50, 0x55, 0x52, 0x45, 0x10, 0x02, 0x1a, 0x44, 0x0a, 0x0f, 0x42, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0xd0,
	0x01, 0x0a, 0x12, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x11, 0x62, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x44, 0x4f, 0x54, 0x41, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x42, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x62, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x1a, 0xad, 0x01, 0x0a, 0x05, 0x43, 0x6f, 0x61, 0x63, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f,
	0x61, 0x63, 0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x6f, 0x61, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x61,
	0x63, 0x68, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x63, 0x6f, 0x61, 0x63, 0x68, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x6f, 0x61, 0x63, 0x68, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x63, 0x6f, 0x61, 0x63, 0x68, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x24, 0x0a, 0x0e, 0x63,
	0x6f, 0x61, 0x63, 0x68, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0c, 0x63, 0x6f, 0x61, 0x63, 0x68, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49,
	0x64, 0x1a, 0x51, 0x0a, 0x0e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x67, 0x61,
	0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x70,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x70,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x50, 0x0a, 0x0b, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x41, 0x56,
	0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x50,
	0x4c, 0x41, 0x59, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x45, 0x58, 0x50,
	0x49, 0x52, 0x45, 0x44, 0x10, 0x02, 0x22, 0xb1, 0x01, 0x0a, 0x0e, 0x43, 0x4d, 0x73, 0x67, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74,
	0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x43, 0x61, 0x72, 0x64, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x1a, 0x38, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x73, 0x74, 0x61, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x87, 0x05, 0x0a, 0x1a, 0x43,
	0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64,
	0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x64, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x61,
	0x74, 0x68, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x65, 0x61, 0x74, 0x68,
	0x73, 0x12, 0x0e, 0x0a, 0x02, 0x63, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x63,
	0x73, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x70, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03,
	0x67, 0x70, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6b, 0x69, 0x6c,
	0x6c, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x4b,
	0x69, 0x6c, 0x6c, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x6f, 0x73, 0x68, 0x61, 0x6e, 0x5f, 0x6b,
	0x69, 0x6c, 0x6c, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x6f, 0x73, 0x68,
	0x61, 0x6e, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x37, 0x0a, 0x17, 0x74, 0x65, 0x61, 0x6d, 0x66,
	0x69, 0x67, 0x68, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x02, 0x52, 0x16, 0x74, 0x65, 0x61, 0x6d, 0x66, 0x69,
	0x67, 0x68, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x64,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x64, 0x73, 0x50, 0x6c, 0x61,
	0x63, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x6d, 0x70, 0x73, 0x5f, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x61, 0x6d, 0x70,
	0x73, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x75, 0x6e, 0x65,
	0x73, 0x5f, 0x67, 0x72, 0x61, 0x62, 0x62, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x72, 0x75, 0x6e, 0x65, 0x73, 0x47, 0x72, 0x61, 0x62, 0x62, 0x65, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x75, 0x6e, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73,
	0x74, 0x75, 0x6e, 0x73, 0x22, 0x5d, 0x0a, 0x1f, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41,
	0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x73, 0x22, 0xdf, 0x0a, 0x0a, 0x14, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41,
	0x42, 0x6f, 0x74, 0x44, 0x65, 0x62, 0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x04,
	0x62, 0x6f, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x6f, 0x74,
	0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x42, 0x6f, 0x74, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x42, 0x6f, 0x74, 0x52, 0x04, 0x62, 0x6f, 0x74, 0x73,
	0x12, 0x2f, 0x0a, 0x14, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f,
	0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x74, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11,
	0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x50, 0x75, 0x73, 0x68, 0x4c, 0x61, 0x6e, 0x65, 0x54, 0x6f,
	0x70, 0x12, 0x2f, 0x0a, 0x14, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x5f, 0x70, 0x75, 0x73, 0x68,
	0x5f, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x6d, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x11, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x50, 0x75, 0x73, 0x68, 0x4c, 0x61, 0x6e, 0x65, 0x4d,
	0x69, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x5f, 0x70, 0x75, 0x73,
	0x68, 0x5f, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x62, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x11, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x50, 0x75, 0x73, 0x68, 0x4c, 0x61, 0x6e, 0x65,
	0x42, 0x6f, 0x74, 0x12, 0x33, 0x0a, 0x16, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x5f, 0x64, 0x65,
	0x66, 0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x74, 0x6f, 0x70, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x13, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x44, 0x65, 0x66, 0x65, 0x6e,
	0x64, 0x4c, 0x61, 0x6e, 0x65, 0x54, 0x6f, 0x70, 0x12, 0x33, 0x0a, 0x16, 0x64, 0x65, 0x73, 0x69,
	0x72, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x6d,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x4c, 0x61, 0x6e, 0x65, 0x4d, 0x69, 0x64, 0x12, 0x33, 0x0a,
	0x16, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x5f, 0x6c,
	0x61, 0x6e, 0x65, 0x5f, 0x62, 0x6f, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x64,
	0x65, 0x73, 0x69, 0x72, 0x65, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x4c, 0x61, 0x6e, 0x65, 0x42,
	0x6f, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x5f, 0x66, 0x61, 0x72,
	0x6d, 0x5f, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x74, 0x6f, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x11, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x46, 0x61, 0x72, 0x6d, 0x4c, 0x61, 0x6e, 0x65,
	0x54, 0x6f, 0x70, 0x12, 0x2f, 0x0a, 0x14, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x5f, 0x66, 0x61,
	0x72, 0x6d, 0x5f, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x6d, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x11, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x46, 0x61, 0x72, 0x6d, 0x4c, 0x61, 0x6e,
	0x65, 0x4d, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x5f, 0x66,
	0x61, 0x72, 0x6d, 0x5f, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x62, 0x6f, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x11, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x46, 0x61, 0x72, 0x6d, 0x4c, 0x61,
	0x6e, 0x65, 0x42, 0x6f, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x5f,
	0x66, 0x61, 0x72, 0x6d, 0x5f, 0x72, 0x6f, 0x73, 0x68, 0x61, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x10, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x46, 0x61, 0x72, 0x6d, 0x52, 0x6f, 0x73,
	0x68, 0x61, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x75,
	0x6e, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x0a, 0x72, 0x75, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0xd7, 0x05, 0x0a, 0x03,
	0x42, 0x6f, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x68,
	0x65, 0x72, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65,
	0x72, 0x6f, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c,
	0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63,
	0x75, 0x6c, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d,
	0x6f, 0x76, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x58, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x6f,
	0x76, 0x65, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x59, 0x12, 0x22,
	0x0a, 0x0d, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x7a, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5a, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x39, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x42, 0x6f,
	0x74, 0x44, 0x65, 0x62, 0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x42, 0x6f, 0x74, 0x2e, 0x4d,
	0x6f, 0x64, 0x65, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x64, 0x6f, 0x74,
	0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x42, 0x6f, 0x74, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x42, 0x6f, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xad, 0x01, 0x0a, 0x04, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x64,
	0x65, 0x73, 0x69, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x64, 0x65, 0x73,
	0x69, 0x72, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x58, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x59, 0x12, 0x19,
	0x0a, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x7a, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5a, 0x1a, 0x4a, 0x0a, 0x06, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x75, 0x0a, 0x12, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x48, 0x65, 0x72, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x68,
	0x65, 0x72, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65,
	0x72, 0x6f, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x69, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x77, 0x69, 0x6e, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74,
	0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6c,
	0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x22, 0xec, 0x02, 0x0a,
	0x13, 0x43, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12,
	0x44, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x47,
	0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x3a, 0x12, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x47, 0x41,
	0x4d, 0x45, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x52, 0x08, 0x67, 0x61, 0x6d,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64,
	0x65, 0x61, 0x74, 0x68, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x65, 0x61,
	0x74, 0x68, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x51, 0x0a, 0x0d, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x13, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x45, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4f,
	0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x3a, 0x17, 0x6b, 0x5f, 0x45, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x52,
	0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xff, 0x01, 0x0a, 0x0d,
	0x43, 0x4d, 0x73, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x70, 0x73, 0x12, 0x31, 0x0a,
	0x04, 0x74, 0x69, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x6f,
	0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x70, 0x73,
	0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x69, 0x70, 0x52, 0x04, 0x74, 0x69, 0x70, 0x73,
	0x1a, 0xba, 0x01, 0x0a, 0x09, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x69, 0x70, 0x12, 0x2a,
	0x0a, 0x11, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x70, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x70, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x45,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x3a, 0x0d, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x5f,
	0x4e, 0x4f, 0x4e, 0x45, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xde, 0x0a,
	0x0a, 0x14, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d,
	0x69, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x09,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x47, 0x61, 0x6d, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x3a, 0x12, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x3b, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44,
	0x4f, 0x54, 0x41, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12,
	0x3c, 0x0a, 0x07, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x2e, 0x54, 0x6f, 0x75,
	0x72, 0x6e, 0x65, 0x79, 0x52, 0x07, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x12, 0x51, 0x0a,
	0x0d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x45, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x3a, 0x17, 0x6b, 0x5f, 0x45, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x52, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x69, 0x72, 0x65, 0x5f, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x1a, 0xda, 0x01, 0x0a, 0x06, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x68, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x64, 0x65, 0x61, 0x74, 0x68, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64,
	0x65, 0x61, 0x74, 0x68, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x73, 0x6c, 0x6f, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x4e, 0x61, 0x6d,
	0x65, 0x1a, 0xba, 0x05, 0x0a, 0x07, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x12, 0x1b, 0x0a,
	0x09, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x1d,
	0x77, 0x65, 0x65, 0x6b, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x5f,
	0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x1a, 0x77, 0x65, 0x65, 0x6b, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x75, 0x72,
	0x6e, 0x65, 0x79, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x46, 0x0a, 0x20, 0x77, 0x65, 0x65, 0x6b, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x6f, 0x75, 0x72, 0x6e,
	0x65, 0x79, 0x5f, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x6f, 0x70, 0x68, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x77, 0x65, 0x65, 0x6b, 0x65,
	0x6e, 0x64, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x54,
	0x72, 0x6f, 0x70, 0x68, 0x79, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x77, 0x65, 0x65, 0x6b, 0x65,
	0x6e, 0x64, 0x5f, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x5f, 0x64, 0x69, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x77, 0x65, 0x65, 0x6b, 0x65,
	0x6e, 0x64, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x3d, 0x0a, 0x1b, 0x77, 0x65, 0x65, 0x6b, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x6f, 0x75,
	0x72, 0x6e, 0x65, 0x79, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x77, 0x65, 0x65, 0x6b, 0x65, 0x6e, 0x64, 0x54,
	0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x26, 0x0a, 0x0f, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x72, 0x61, 0x64, 0x69, 0x61,
	0x6e, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x61, 0x64, 0x69,
	0x61, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x6d,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x5f,
	0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x0f, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x67, 0x6f,
	0x12, 0x31, 0x0a, 0x15, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x67, 0x6f,
	0x55, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0c, 0x64, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x69, 0x72, 0x65, 0x54,
	0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x65,
	0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64,
	0x69, 0x72, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x64,
	0x69, 0x72, 0x65, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x0c, 0x64, 0x69, 0x72, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x67,
	0x6f, 0x12, 0x2b, 0x0a, 0x12, 0x64, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6c,
	0x6f, 0x67, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64,
	0x69, 0x72, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x22, 0x59,
	0x0a, 0x13, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x61, 0x62, 0x6c, 0x65,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x64, 0x65,
	0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x66,
	0x12, 0x27, 0x0a, 0x0f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0xf2, 0x01, 0x0a, 0x18, 0x43, 0x4d,
	0x73, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x61, 0x62, 0x6c,
	0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x62, 0x0a, 0x17, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x5f, 0x75, 0x73, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x61, 0x62,
	0x6c, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x15, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x55, 0x73, 0x65, 0x64, 0x1a, 0x72, 0x0a, 0x0b, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0f, 0x63,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x55, 0x73, 0x65, 0x64, 0x22, 0xb1,
	0x03, 0x0a, 0x1a, 0x43, 0x4d, 0x73, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x52, 0x0a,
	0x0d, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x47, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x72, 0x61,
	0x6e, 0x74, 0x73, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x72, 0x61, 0x6e, 0x74,
	0x73, 0x1a, 0x71, 0x0a, 0x05, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x75, 0x64, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x61, 0x75, 0x64, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x1a, 0xcb, 0x01, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47,
	0x72, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x56, 0x0a, 0x13, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x61,
	0x6e, 0x74, 0x73, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x11, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x4f, 0x6c, 0x64, 0x12, 0x44, 0x0a, 0x0f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x77, 0x61,
	0x72, 0x64, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x47, 0x72, 0x61, 0x6e, 0x74,
	0x65, 0x64, 0x22, 0x96, 0x01, 0x0a, 0x17, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x47, 0x61, 0x6d, 0x65, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x14, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x47, 0x61, 0x6d, 0x65, 0x73, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x2b,
	0x0a, 0x11, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xaa, 0x02, 0x0a, 0x1e,
	0x43, 0x4d, 0x73, 0x67, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x57, 0x68,
	0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x45, 0x64, 0x69, 0x74, 0x12, 0x60,
	0x0a, 0x11, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x64, 0x6f, 0x74, 0x61,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x57,
	0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x45, 0x64, 0x69, 0x74, 0x2e,
	0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10,
	0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x1a, 0xa5, 0x01, 0x0a, 0x0e, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x67, 0x61,
	0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x6d, 0x0a, 0x0f, 0x77, 0x68, 0x69,
	0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x45, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x47, 0x61, 0x6d, 0x65, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x3a, 0x23, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x47, 0x41, 0x4d, 0x45,
	0x5f, 0x57, 0x48, 0x49, 0x54, 0x45, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x52, 0x0e, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c,
	0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0xe3, 0x01, 0x0a, 0x19, 0x43, 0x4d, 0x73,
	0x67, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x77,
	0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x77, 0x69, 0x6e, 0x12, 0x17, 0x0a,
	0x07, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x68, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x64, 0x65, 0x61, 0x74, 0x68, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x65,
	0x61, 0x74, 0x68, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x22, 0x43,
	0x0a, 0x15, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x69, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x77, 0x69, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6c,
	0x6f, 0x73, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x6f, 0x73,
	0x73, 0x65, 0x73, 0x22, 0x5c, 0x0a, 0x1d, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x75, 0x74, 0x63,
	0x6f, 0x6d, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x57, 0x0a, 0x18, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52,
	0x65, 0x63, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x95, 0x04, 0x0a, 0x1f, 0x43,
	0x4d, 0x73, 0x67, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x41,
	0x63, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x4c,
	0x0a, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x73, 0x52, 0x0e, 0x72, 0x65,
	0x63, 0x65, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0c,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52,
	0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x2b, 0x0a, 0x11,
	0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x6c, 0x75,
	0x73, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x70, 0x6c, 0x75, 0x73, 0x50,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x12,
	0x47, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3e, 0x0a, 0x0a,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x44, 0x0a, 0x0b,
	0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x76, 0x70, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x75,
	0x74, 0x63, 0x6f, 0x6d, 0x65, 0x73, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x4d, 0x76,
	0x70, 0x73, 0x22, 0xf3, 0x01, 0x0a, 0x23, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x48, 0x65, 0x72, 0x6f, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x4c, 0x0a, 0x0f, 0x72, 0x65,
	0x63, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74,
	0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0b, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x3e, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64,
	0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65,
	0x63, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x6c,
	0x61, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x22, 0xd7, 0x01, 0x0a, 0x19, 0x43, 0x4d, 0x73,
	0x67, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x73,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x5c, 0x0a, 0x16, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x41, 0x63,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x15, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x73, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x5c, 0x0a, 0x14, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x48, 0x65, 0x72, 0x6f, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x41, 0x63,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x13, 0x68,
	0x65, 0x72, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x22, 0x60, 0x0a, 0x26, 0x43, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x68,
	0x65, 0x72, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65,
	0x72, 0x6f, 0x49, 0x64, 0x22, 0xc6, 0x02, 0x0a, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74,
	0x41, 0x63, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x73, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x56, 0x0a, 0x16, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x63,
	0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x15, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x52, 0x0a, 0x09, 0x45, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a,
	0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a,
	0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x6f, 0x42, 0x75, 0x73, 0x79, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b,
	0x6b, 0x5f, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x03, 0x22, 0x6d, 0x0a,
	0x18, 0x43, 0x4d, 0x73, 0x67, 0x41, 0x72, 0x63, 0x61, 0x6e, 0x61, 0x56, 0x6f, 0x74, 0x65, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x76, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xe7, 0x01, 0x0a,
	0x28, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x74, 0x6f, 0x47, 0x43, 0x41, 0x73, 0x73, 0x6f, 0x63,
	0x69, 0x61, 0x74, 0x65, 0x64, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x69, 0x74, 0x65, 0x72, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x6e, 0x75, 0x6d, 0x5f,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6e, 0x75, 0x6d, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x73, 0x54, 0x6f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x33, 0x0a, 0x16, 0x6d,
	0x69, 0x6e, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6d, 0x69, 0x6e,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x34, 0x0a, 0x16, 0x6e, 0x75, 0x6d, 0x5f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x14, 0x6e, 0x75, 0x6d, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x22, 0xac, 0x03, 0x0a, 0x30, 0x43, 0x4d, 0x73, 0x67, 0x47,
	0x43, 0x74, 0x6f, 0x47, 0x43, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x45,
	0x78, 0x70, 0x6c, 0x6f, 0x69, 0x74, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x08, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e,
	0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x74, 0x6f, 0x47, 0x43, 0x41,
	0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x69, 0x74,
	0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x08, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x1a, 0x9b, 0x02, 0x0a, 0x07, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10,
	0x6e, 0x75, 0x6d, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73,
	0x12, 0x32, 0x0a, 0x15, 0x65, 0x61, 0x72, 0x6c, 0x69, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x13, 0x65, 0x61, 0x72, 0x6c, 0x69, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x12, 0x2e, 0x0a, 0x13, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x11, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x12, 0x25,
	0x0a, 0x0e, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x42,
	0x61, 0x6e, 0x6e, 0x65, 0x64, 0x22, 0x8d, 0x03, 0x0a, 0x10, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x75,
	0x6c, 0x6c, 0x54, 0x61, 0x62, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x31, 0x0a, 0x05, 0x73, 0x6c,
	0x6f, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x6f, 0x74, 0x61,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x75, 0x6c, 0x6c, 0x54, 0x61, 0x62, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x05, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x3a, 0x0a,
	0x08, 0x6a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x75, 0x6c, 0x6c, 0x54,
	0x61, 0x62, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x52,
	0x08, 0x6a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6c,
	0x61, 0x73, 0x74, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x1a, 0x8e, 0x01, 0x0a, 0x04, 0x53, 0x6c, 0x6f,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x65, 0x72, 0x6f, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x72, 0x6f, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x72, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x65, 0x64, 0x1a, 0x5a, 0x0a, 0x07, 0x4a, 0x61, 0x63,
	0x6b, 0x70, 0x6f, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x68, 0x65, 0x72, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68,
	0x65, 0x72, 0x6f, 0x49, 0x64, 0x22, 0xb4, 0x03, 0x0a, 0x12, 0x43, 0x4d, 0x73, 0x67, 0x55, 0x6e,
	0x64, 0x65, 0x72, 0x44, 0x72, 0x61, 0x66, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x0b,
	0x62, 0x65, 0x6e, 0x63, 0x68, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x55, 0x6e, 0x64,
	0x65, 0x72, 0x44, 0x72, 0x61, 0x66, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x42, 0x65, 0x6e, 0x63,
	0x68, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x0a, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x53, 0x6c, 0x6f, 0x74,
	0x73, 0x12, 0x40, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x44, 0x72, 0x61, 0x66, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x53, 0x68, 0x6f, 0x70, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x70, 0x53, 0x6c,
	0x6f, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x67, 0x6f, 0x6c, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x6f, 0x74, 0x5f, 0x72, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x6e, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0x53, 0x0a,
	0x09, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6c,
	0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x6c, 0x6f,
	0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x73, 0x1a, 0x68, 0x0a, 0x08, 0x53, 0x68, 0x6f, 0x70, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x65, 0x72, 0x6f, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x72, 0x6f, 0x49, 0x64,
	0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x22, 0x5e, 0x0a, 0x13,
	0x43, 0x4d, 0x73, 0x67, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0xbf, 0x02, 0x0a,
	0x16, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x54, 0x72, 0x69, 0x76, 0x69, 0x61, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x68, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x64, 0x6f, 0x74,
	0x61, 0x2e, 0x45, 0x44, 0x4f, 0x54, 0x41, 0x54, 0x72, 0x69, 0x76, 0x69, 0x61, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x3a, 0x29, 0x6b,
	0x5f, 0x45, 0x44, 0x4f, 0x54, 0x41, 0x54, 0x72, 0x69, 0x76, 0x69, 0x61, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x41, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x49, 0x63, 0x6f, 0x6e, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x25, 0x0a, 0x0e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c,
	0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x14,
	0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x63, 0x6f, 0x72, 0x72,
	0x65, 0x63, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x76,
	0x0a, 0x24, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x54, 0x72, 0x69, 0x76, 0x69, 0x61,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x69, 0x63, 0x6b, 0x65,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x2a, 0x55, 0x0a, 0x11, 0x45, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x61, 0x6c, 0x50, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x1a, 0x6b,
	0x5f, 0x45, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x5f, 0x4e, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x10, 0xfe, 0x7f, 0x12, 0x1f, 0x0a, 0x1a,
	0x6b, 0x5f, 0x45, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x5f, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0xff, 0x7f, 0x2a, 0x86, 0x05,
	0x0a, 0x12, 0x45, 0x44, 0x4f, 0x54, 0x41, 0x47, 0x43, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x4e, 0x65, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x44, 0x4f, 0x54, 0x41, 0x47,
	0x43, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x65, 0x65, 0x64, 0x5f, 0x55, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x2c, 0x0a, 0x28, 0x6b, 0x5f, 0x45, 0x44, 0x4f, 0x54,
	0x41, 0x47, 0x43, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x65, 0x65, 0x64, 0x5f, 0x55,
	0x73, 0x65, 0x72, 0x4e, 0x6f, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x65, 0x65, 0x64,
	0x65, 0x64, 0x10, 0x64, 0x12, 0x29, 0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x44, 0x4f, 0x54, 0x41, 0x47,
	0x43, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x65, 0x65, 0x64, 0x5f, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x10, 0x65, 0x12,
	0x28, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x44, 0x4f, 0x54, 0x41, 0x47, 0x43, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x4e, 0x65, 0x65, 0x64, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x10, 0x66, 0x12, 0x2d, 0x0a, 0x29, 0x6b, 0x5f, 0x45,
	0x44, 0x4f, 0x54, 0x41, 0x47, 0x43, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x65, 0x65,
	0x64, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x55, 0x49, 0x57, 0x61, 0x73, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x67, 0x12, 0x2f, 0x0a, 0x2b, 0x6b, 0x5f, 0x45, 0x44,
	0x4f, 0x54, 0x41, 0x47, 0x43, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x65, 0x65, 0x64,
	0x5f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x55, 0x49, 0x4e, 0x65, 0x76, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x68, 0x12, 0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x45,
	0x44, 0x4f, 0x54, 0x41, 0x47, 0x43, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x65, 0x65,
	0x64, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x10,
	0x69, 0x12, 0x31, 0x0a, 0x2d, 0x6b, 0x5f, 0x45, 0x44, 0x4f, 0x54, 0x41, 0x47, 0x43, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x65, 0x65, 0x64, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x55, 0x49, 0x57, 0x61, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x64,
	0x6c, 0x65, 0x10, 0x6a, 0x12, 0x33, 0x0a, 0x2f, 0x6b, 0x5f, 0x45, 0x44, 0x4f, 0x54, 0x41, 0x47,
	0x43, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x65, 0x65, 0x64, 0x5f, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x55, 0x49, 0x4e, 0x65, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x49, 0x64, 0x6c, 0x65, 0x10, 0x6b, 0x12, 0x2a, 0x0a, 0x25, 0x6b, 0x5f, 0x45,
	0x44, 0x4f, 0x54, 0x41, 0x47, 0x43, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x65, 0x65,
	0x64, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x10, 0xc8, 0x01, 0x12, 0x29, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x44, 0x4f, 0x54, 0x41,
	0x47, 0x43, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x65, 0x65, 0x64, 0x5f, 0x47, 0x61,
	0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x10, 0xc9, 0x01,
	0x12, 0x28, 0x0a, 0x23, 0x6b, 0x5f, 0x45, 0x44, 0x4f, 0x54, 0x41, 0x47, 0x43, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x65, 0x65, 0x64, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x49, 0x64, 0x6c, 0x65, 0x10, 0xca, 0x01, 0x12, 0x29, 0x0a, 0x24, 0x6b, 0x5f,
	0x45, 0x44, 0x4f, 0x54, 0x41, 0x47, 0x43, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x65,
	0x65, 0x64, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x6c,
	0x61, 0x79, 0x10, 0xcb, 0x01, 0x12, 0x2f, 0x0a, 0x2a, 0x6b, 0x5f, 0x45, 0x44, 0x4f, 0x54, 0x41,
	0x47, 0x43, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x65, 0x65, 0x64, 0x5f, 0x47, 0x61,
	0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x10, 0xcc, 0x01, 0x2a, 0xf6, 0x01, 0x0a, 0x15, 0x44, 0x4f, 0x54, 0x41, 0x5f,
	0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x12, 0x0a, 0x0e, 0x54, 0x45, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x5f, 0x42, 0x4c, 0x4f,
	0x4f, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x45, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f,
	0x45, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x45, 0x5f, 0x4d, 0x55, 0x4c, 0x54,
	0x49, 0x5f, 0x4b, 0x49, 0x4c, 0x4c, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x45, 0x5f, 0x48,
	0x45, 0x52, 0x4f, 0x5f, 0x44, 0x45, 0x4e, 0x59, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x45,
	0x5f, 0x41, 0x45, 0x47, 0x49, 0x53, 0x5f, 0x44, 0x45, 0x4e, 0x59, 0x10, 0x04, 0x12, 0x13, 0x0a,
	0x0f, 0x54, 0x45, 0x5f, 0x41, 0x45, 0x47, 0x49, 0x53, 0x5f, 0x53, 0x54, 0x4f, 0x4c, 0x45, 0x4e,
	0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x45, 0x5f, 0x47, 0x4f, 0x44, 0x4c, 0x49, 0x4b, 0x45,
	0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x55, 0x52, 0x49, 0x45, 0x52,
	0x5f, 0x4b, 0x49, 0x4c, 0x4c, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x45, 0x5f, 0x45, 0x43,
	0x48, 0x4f, 0x53, 0x4c, 0x41, 0x4d, 0x10, 0x08, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x45, 0x5f, 0x52,
	0x41, 0x50, 0x49, 0x45, 0x52, 0x10, 0x09, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x45, 0x5f, 0x45, 0x41,
	0x52, 0x4c, 0x59, 0x5f, 0x52, 0x4f, 0x53, 0x48, 0x41, 0x4e, 0x10, 0x0a, 0x12, 0x11, 0x0a, 0x0d,
	0x54, 0x45, 0x5f, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x5f, 0x48, 0x4f, 0x4c, 0x45, 0x10, 0x0b, 0x2a,
	0x8d, 0x03, 0x0a, 0x17, 0x45, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x24, 0x45,
	0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x65, 0x64, 0x10, 0x01, 0x12, 0x2c, 0x0a, 0x28, 0x45, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x64, 0x10, 0x02, 0x12, 0x26, 0x0a, 0x22, 0x45, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x54,
	0x6f, 0x77, 0x65, 0x72, 0x44, 0x65, 0x61, 0x74, 0x68, 0x10, 0x03, 0x12, 0x29, 0x0a, 0x25, 0x45,
	0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x42, 0x61, 0x72, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x44,
	0x65, 0x61, 0x74, 0x68, 0x10, 0x04, 0x12, 0x28, 0x0a, 0x24, 0x45, 0x42, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x41, 0x6e, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x61, 0x74, 0x68, 0x10, 0x05,
	0x12, 0x27, 0x0a, 0x23, 0x45, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x52, 0x6f, 0x73, 0x68,
	0x61, 0x6e, 0x44, 0x65, 0x61, 0x74, 0x68, 0x10, 0x06, 0x12, 0x25, 0x0a, 0x21, 0x45, 0x42, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x48, 0x65, 0x72, 0x6f, 0x44, 0x65, 0x61, 0x74, 0x68, 0x10, 0x07,
	0x12, 0x25, 0x0a, 0x21, 0x45, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x54, 0x65, 0x61, 0x6d,
	0x46, 0x69, 0x67, 0x68, 0x74, 0x10, 0x08, 0x12, 0x26, 0x0a, 0x22, 0x45, 0x42, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x46, 0x69, 0x72, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x10, 0x09, 0x2a,
	0x98, 0x01, 0x0a, 0x19, 0x45, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x57,
	0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a,
	0x23, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x57, 0x48, 0x49,
	0x54, 0x45, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x24, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d,
	0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x57, 0x48, 0x49, 0x54, 0x45, 0x4c, 0x49, 0x53, 0x54, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x28, 0x0a, 0x24, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f,
	0x57, 0x48, 0x49, 0x54, 0x45, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x02, 0x2a, 0xf2, 0x05, 0x0a, 0x1b, 0x45,
	0x44, 0x4f, 0x54, 0x41, 0x54, 0x72, 0x69, 0x76, 0x69, 0x61, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x2d, 0x0a, 0x29, 0x6b, 0x5f,
	0x45, 0x44, 0x4f, 0x54, 0x41, 0x54, 0x72, 0x69, 0x76, 0x69, 0x61, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x41, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x49, 0x63, 0x6f, 0x6e, 0x10, 0x00, 0x12, 0x31, 0x0a, 0x2d, 0x6b, 0x5f, 0x45,
	0x44, 0x4f, 0x54, 0x41, 0x54, 0x72, 0x69, 0x76, 0x69, 0x61, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x41, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x43, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x10, 0x01, 0x12, 0x30, 0x0a, 0x2c,
	0x6b, 0x5f, 0x45, 0x44, 0x4f, 0x54, 0x41, 0x54, 0x72, 0x69, 0x76, 0x69, 0x61, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x48, 0x65,
	0x72, 0x6f, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x10, 0x02, 0x12, 0x33,
	0x0a, 0x2f, 0x6b, 0x5f, 0x45, 0x44, 0x4f, 0x54, 0x41, 0x54, 0x72, 0x69, 0x76, 0x69, 0x61, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f,
	0x48, 0x65, 0x72, 0x6f, 0x4d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x65,
	0x64, 0x10, 0x03, 0x12, 0x2c, 0x0a, 0x28, 0x6b, 0x5f, 0x45, 0x44, 0x4f, 0x54, 0x41, 0x54, 0x72,
	0x69, 0x76, 0x69, 0x61, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x5f, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x65, 0x65, 0x10,
	0x04, 0x12, 0x2b, 0x0a, 0x27, 0x6b, 0x5f, 0x45, 0x44, 0x4f, 0x54, 0x41, 0x54, 0x72, 0x69, 0x76,
	0x69, 0x61, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x5f, 0x48, 0x65, 0x72, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x73, 0x10, 0x05, 0x12, 0x2b,
	0x0a, 0x27, 0x6b, 0x5f, 0x45, 0x44, 0x4f, 0x54, 0x41, 0x54, 0x72, 0x69, 0x76, 0x69, 0x61, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f,
	0x49, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x69, 0x63, 0x65, 0x10, 0x06, 0x12, 0x2e, 0x0a, 0x2a, 0x6b,
	0x5f, 0x45, 0x44, 0x4f, 0x54, 0x41, 0x54, 0x72, 0x69, 0x76, 0x69, 0x61, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x41, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0x07, 0x12, 0x2f, 0x0a, 0x2b, 0x6b,
	0x5f, 0x45, 0x44, 0x4f, 0x54, 0x41, 0x54, 0x72, 0x69, 0x76, 0x69, 0x61, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x49, 0x6e, 0x76,
	0x6f, 0x6b, 0x65, 0x72, 0x53, 0x70, 0x65, 0x6c, 0x6c, 0x73, 0x10, 0x08, 0x12, 0x31, 0x0a, 0x2d,
	0x6b, 0x5f, 0x45, 0x44, 0x4f, 0x54, 0x41, 0x54, 0x72, 0x69, 0x76, 0x69, 0x61, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x41, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x6e, 0x61, 0x43, 0x6f, 0x73, 0x74, 0x10, 0x09, 0x12,
	0x31, 0x0a, 0x2d, 0x6b, 0x5f, 0x45, 0x44, 0x4f, 0x54, 0x41, 0x54, 0x72, 0x69, 0x76, 0x69, 0x61,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x5f, 0x48, 0x65, 0x72, 0x6f, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x53, 0x6f, 0x75, 0x6e, 0x64,
	0x10, 0x0a, 0x12, 0x2d, 0x0a, 0x29, 0x6b, 0x5f, 0x45, 0x44, 0x4f, 0x54, 0x41, 0x54, 0x72, 0x69,
	0x76, 0x69, 0x61, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x5f, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x10,
	0x0b, 0x12, 0x30, 0x0a, 0x2c, 0x6b, 0x5f, 0x45, 0x44, 0x4f, 0x54, 0x41, 0x54, 0x72, 0x69, 0x76,
	0x69, 0x61, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x5f, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x73, 0x10, 0x0c, 0x12, 0x2a, 0x0a, 0x26, 0x6b, 0x5f, 0x45, 0x44, 0x4f, 0x54, 0x41, 0x54, 0x72,
	0x69, 0x76, 0x69, 0x61, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x5f, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x6f, 0x72, 0x65, 0x10, 0x0d, 0x12,
	0x2e, 0x0a, 0x2a, 0x6b, 0x5f, 0x45, 0x44, 0x4f, 0x54, 0x41, 0x54, 0x72, 0x69, 0x76, 0x69, 0x61,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x5f, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x73, 0x10, 0x0e, 0x42,
	0x05, 0x48, 0x01, 0x80, 0x01, 0x00,
}

var (
	file_dota_gcmessages_common_proto_rawDescOnce sync.Once
	file_dota_gcmessages_common_proto_rawDescData = file_dota_gcmessages_common_proto_rawDesc
)

func file_dota_gcmessages_common_proto_rawDescGZIP() []byte {
	file_dota_gcmessages_common_proto_rawDescOnce.Do(func() {
		file_dota_gcmessages_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_dota_gcmessages_common_proto_rawDescData)
	})
	return file_dota_gcmessages_common_proto_rawDescData
}

var file_dota_gcmessages_common_proto_enumTypes = make([]protoimpl.EnumInfo, 19)
var file_dota_gcmessages_common_proto_msgTypes = make([]protoimpl.MessageInfo, 146)
var file_dota_gcmessages_common_proto_goTypes = []interface{}{
	(ESpecialPingValue)(0),                                           // 0: dota.ESpecialPingValue
	(EDOTAGCSessionNeed)(0),                                          // 1: dota.EDOTAGCSessionNeed
	(DOTA_TournamentEvents)(0),                                       // 2: dota.DOTA_TournamentEvents
	(EBroadcastTimelineEvent)(0),                                     // 3: dota.EBroadcastTimelineEvent
	(ECustomGameWhitelistState)(0),                                   // 4: dota.ECustomGameWhitelistState
	(EDOTATriviaQuestionCategory)(0),                                 // 5: dota.EDOTATriviaQuestionCategory
	(CMsgDOTAProfileCard_EStatID)(0),                                 // 6: dota.CMsgDOTAProfileCard.EStatID
	(CMsgGCRerollPlayerChallengeResponse_EResult)(0),                 // 7: dota.CMsgGCRerollPlayerChallengeResponse.EResult
	(CMsgDOTARealtimeGameStats_GraphDataEStat)(0),                    // 8: dota.CMsgDOTARealtimeGameStats.GraphData.eStat
	(CMsgDOTARealtimeGameStats_GraphDataELocation)(0),                // 9: dota.CMsgDOTARealtimeGameStats.GraphData.eLocation
	(CMsgDOTASeasonRewards_ERewardType)(0),                           // 10: dota.CMsgDOTASeasonRewards.ERewardType
	(CMsgDOTASeasonPredictionsEPredictionType)(0),                    // 11: dota.CMsgDOTASeasonPredictions.ePredictionType
	(CMsgDOTASeasonPredictionsEAnswerType)(0),                        // 12: dota.CMsgDOTASeasonPredictions.eAnswerType
	(CMsgDOTASeasonPredictionsEResolutionTypeT)(0),                   // 13: dota.CMsgDOTASeasonPredictions.eResolutionType_t
	(CMsgDOTASeasonPredictionsERandomSelectionGroupT)(0),             // 14: dota.CMsgDOTASeasonPredictions.eRandomSelectionGroup_t
	(CMsgDOTASeasonPredictionsERawValueTypeT)(0),                     // 15: dota.CMsgDOTASeasonPredictions.eRawValueType_t
	(CMsgDOTAMatch_ReplayState)(0),                                   // 16: dota.CMsgDOTAMatch.ReplayState
	(CMsgDOTAMatch_Player_HeroDamageType)(0),                         // 17: dota.CMsgDOTAMatch.Player.HeroDamageType
	(CMsgRequestPlayerRecentAccomplishmentsResponse_EResponse)(0),    // 18: dota.CMsgRequestPlayerRecentAccomplishmentsResponse.EResponse
	(*CSODOTAGameAccountClient)(nil),                                 // 19: dota.CSODOTAGameAccountClient
	(*CSODOTAGameAccountPlus)(nil),                                   // 20: dota.CSODOTAGameAccountPlus
	(*CMsgLobbyPlayerPlusSubscriptionData)(nil),                      // 21: dota.CMsgLobbyPlayerPlusSubscriptionData
	(*CMsgLobbyEventPoints)(nil),                                     // 22: dota.CMsgLobbyEventPoints
	(*CMsgLobbyEventGameData)(nil),                                   // 23: dota.CMsgLobbyEventGameData
	(*CMsgLobbyGauntletProgress)(nil),                                // 24: dota.CMsgLobbyGauntletProgress
	(*CMsgLocalServerGuildData)(nil),                                 // 25: dota.CMsgLocalServerGuildData
	(*CMsgLocalServerFakeLobbyData)(nil),                             // 26: dota.CMsgLocalServerFakeLobbyData
	(*CMsgBattleCupVictory)(nil),                                     // 27: dota.CMsgBattleCupVictory
	(*CMsgLobbyBattleCupVictoryList)(nil),                            // 28: dota.CMsgLobbyBattleCupVictoryList
	(*CMsgDOTABroadcastNotification)(nil),                            // 29: dota.CMsgDOTABroadcastNotification
	(*CProtoItemHeroStatue)(nil),                                     // 30: dota.CProtoItemHeroStatue
	(*CProtoItemTeamShowcase)(nil),                                   // 31: dota.CProtoItemTeamShowcase
	(*CMatchPlayerAbilityUpgrade)(nil),                               // 32: dota.CMatchPlayerAbilityUpgrade
	(*CMatchPlayerTimedStats)(nil),                                   // 33: dota.CMatchPlayerTimedStats
	(*CMatchTeamTimedStats)(nil),                                     // 34: dota.CMatchTeamTimedStats
	(*CMatchAdditionalUnitInventory)(nil),                            // 35: dota.CMatchAdditionalUnitInventory
	(*CMatchPlayerPermanentBuff)(nil),                                // 36: dota.CMatchPlayerPermanentBuff
	(*CMatchHeroSelectEvent)(nil),                                    // 37: dota.CMatchHeroSelectEvent
	(*CPartySearchClientParty)(nil),                                  // 38: dota.CPartySearchClientParty
	(*CMsgDOTAProcessFantasyScheduledEvent)(nil),                     // 39: dota.CMsgDOTAProcessFantasyScheduledEvent
	(*CMsgDOTAHasItemQuery)(nil),                                     // 40: dota.CMsgDOTAHasItemQuery
	(*CMsgDOTAHasItemResponse)(nil),                                  // 41: dota.CMsgDOTAHasItemResponse
	(*CMsgGCIsProQuery)(nil),                                         // 42: dota.CMsgGCIsProQuery
	(*CMsgGCIsProResponse)(nil),                                      // 43: dota.CMsgGCIsProResponse
	(*CMsgDOTAHasItemDefsQuery)(nil),                                 // 44: dota.CMsgDOTAHasItemDefsQuery
	(*CMsgDOTAHasItemDefsResponse)(nil),                              // 45: dota.CMsgDOTAHasItemDefsResponse
	(*CMsgGCGetPlayerCardItemInfo)(nil),                              // 46: dota.CMsgGCGetPlayerCardItemInfo
	(*CMsgGCGetPlayerCardItemInfoResponse)(nil),                      // 47: dota.CMsgGCGetPlayerCardItemInfoResponse
	(*CMsgGCToGCFantasySetMatchLeague)(nil),                          // 48: dota.CMsgGCToGCFantasySetMatchLeague
	(*CSODOTAMapLocationState)(nil),                                  // 49: dota.CSODOTAMapLocationState
	(*CMsgLeagueAdminList)(nil),                                      // 50: dota.CMsgLeagueAdminList
	(*CCompendiumTimestampedData)(nil),                               // 51: dota.CCompendiumTimestampedData
	(*CCompendiumGameTimeline)(nil),                                  // 52: dota.CCompendiumGameTimeline
	(*CCompendiumGameList)(nil),                                      // 53: dota.CCompendiumGameList
	(*CAdditionalEquipSlot)(nil),                                     // 54: dota.CAdditionalEquipSlot
	(*CMsgDOTAProfileCard)(nil),                                      // 55: dota.CMsgDOTAProfileCard
	(*CSODOTAPlayerChallenge)(nil),                                   // 56: dota.CSODOTAPlayerChallenge
	(*CMsgClientToGCRerollPlayerChallenge)(nil),                      // 57: dota.CMsgClientToGCRerollPlayerChallenge
	(*CMsgGCRerollPlayerChallengeResponse)(nil),                      // 58: dota.CMsgGCRerollPlayerChallengeResponse
	(*CMsgGCTopCustomGamesList)(nil),                                 // 59: dota.CMsgGCTopCustomGamesList
	(*CMsgDOTARealtimeGameStats)(nil),                                // 60: dota.CMsgDOTARealtimeGameStats
	(*CMsgDOTARealtimeGameStatsTerse)(nil),                           // 61: dota.CMsgDOTARealtimeGameStatsTerse
	(*CMsgDOTABroadcastTimelineEvent)(nil),                           // 62: dota.CMsgDOTABroadcastTimelineEvent
	(*CMsgGCToClientMatchGroupsVersion)(nil),                         // 63: dota.CMsgGCToClientMatchGroupsVersion
	(*CMsgDOTASDOHeroStatsHistory)(nil),                              // 64: dota.CMsgDOTASDOHeroStatsHistory
	(*CMsgDOTASeasonRewards)(nil),                                    // 65: dota.CMsgDOTASeasonRewards
	(*CMsgDOTASeasonAchievements)(nil),                               // 66: dota.CMsgDOTASeasonAchievements
	(*CMsgDOTASeasonPredictions)(nil),                                // 67: dota.CMsgDOTASeasonPredictions
	(*CMsgDOTAMatch)(nil),                                            // 68: dota.CMsgDOTAMatch
	(*CMsgPlayerCard)(nil),                                           // 69: dota.CMsgPlayerCard
	(*CMsgDOTAFantasyPlayerStats)(nil),                               // 70: dota.CMsgDOTAFantasyPlayerStats
	(*CMsgDOTAFantasyPlayerMatchStats)(nil),                          // 71: dota.CMsgDOTAFantasyPlayerMatchStats
	(*CMsgDOTABotDebugInfo)(nil),                                     // 72: dota.CMsgDOTABotDebugInfo
	(*CMsgSuccessfulHero)(nil),                                       // 73: dota.CMsgSuccessfulHero
	(*CMsgRecentMatchInfo)(nil),                                      // 74: dota.CMsgRecentMatchInfo
	(*CMsgMatchTips)(nil),                                            // 75: dota.CMsgMatchTips
	(*CMsgDOTAMatchMinimal)(nil),                                     // 76: dota.CMsgDOTAMatchMinimal
	(*CMsgConsumableUsage)(nil),                                      // 77: dota.CMsgConsumableUsage
	(*CMsgMatchConsumableUsage)(nil),                                 // 78: dota.CMsgMatchConsumableUsage
	(*CMsgMatchEventActionGrants)(nil),                               // 79: dota.CMsgMatchEventActionGrants
	(*CMsgCustomGameWhitelist)(nil),                                  // 80: dota.CMsgCustomGameWhitelist
	(*CMsgCustomGameWhitelistForEdit)(nil),                           // 81: dota.CMsgCustomGameWhitelistForEdit
	(*CMsgPlayerRecentMatchInfo)(nil),                                // 82: dota.CMsgPlayerRecentMatchInfo
	(*CMsgPlayerMatchRecord)(nil),                                    // 83: dota.CMsgPlayerMatchRecord
	(*CMsgPlayerRecentMatchOutcomes)(nil),                            // 84: dota.CMsgPlayerRecentMatchOutcomes
	(*CMsgPlayerRecentCommends)(nil),                                 // 85: dota.CMsgPlayerRecentCommends
	(*CMsgPlayerRecentAccomplishments)(nil),                          // 86: dota.CMsgPlayerRecentAccomplishments
	(*CMsgPlayerHeroRecentAccomplishments)(nil),                      // 87: dota.CMsgPlayerHeroRecentAccomplishments
	(*CMsgRecentAccomplishments)(nil),                                // 88: dota.CMsgRecentAccomplishments
	(*CMsgRequestPlayerRecentAccomplishments)(nil),                   // 89: dota.CMsgRequestPlayerRecentAccomplishments
	(*CMsgRequestPlayerRecentAccomplishmentsResponse)(nil),           // 90: dota.CMsgRequestPlayerRecentAccomplishmentsResponse
	(*CMsgArcanaVoteMatchVotes)(nil),                                 // 91: dota.CMsgArcanaVoteMatchVotes
	(*CMsgGCtoGCAssociatedExploiterAccountInfo)(nil),                 // 92: dota.CMsgGCtoGCAssociatedExploiterAccountInfo
	(*CMsgGCtoGCAssociatedExploiterAccountInfoResponse)(nil),         // 93: dota.CMsgGCtoGCAssociatedExploiterAccountInfoResponse
	(*CMsgPullTabsData)(nil),                                         // 94: dota.CMsgPullTabsData
	(*CMsgUnderDraftData)(nil),                                       // 95: dota.CMsgUnderDraftData
	(*CMsgPlayerTitleData)(nil),                                      // 96: dota.CMsgPlayerTitleData
	(*CMsgDOTATriviaQuestion)(nil),                                   // 97: dota.CMsgDOTATriviaQuestion
	(*CMsgDOTATriviaQuestionAnswersSummary)(nil),                     // 98: dota.CMsgDOTATriviaQuestionAnswersSummary
	(*CSODOTAGameAccountClient_RoleHandicap)(nil),                    // 99: dota.CSODOTAGameAccountClient.RoleHandicap
	(*CMsgLobbyPlayerPlusSubscriptionData_HeroBadge)(nil),            // 100: dota.CMsgLobbyPlayerPlusSubscriptionData.HeroBadge
	(*CMsgLobbyEventPoints_ChatWheelMessageRange)(nil),               // 101: dota.CMsgLobbyEventPoints.ChatWheelMessageRange
	(*CMsgLobbyEventPoints_PingWheelMessageRange)(nil),               // 102: dota.CMsgLobbyEventPoints.PingWheelMessageRange
	(*CMsgLobbyEventPoints_PeriodicResourceValues)(nil),              // 103: dota.CMsgLobbyEventPoints.PeriodicResourceValues
	(*CMsgLobbyEventPoints_EventGameCustomActions)(nil),              // 104: dota.CMsgLobbyEventPoints.EventGameCustomActions
	(*CMsgLobbyEventPoints_AccountPoints)(nil),                       // 105: dota.CMsgLobbyEventPoints.AccountPoints
	(*CMsgLobbyGauntletProgress_AccountProgress)(nil),                // 106: dota.CMsgLobbyGauntletProgress.AccountProgress
	(*CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo)(nil),       // 107: dota.CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo
	(*CMsgDOTAProfileCard_Slot)(nil),                                 // 108: dota.CMsgDOTAProfileCard.Slot
	(*CMsgDOTAProfileCard_Slot_Trophy)(nil),                          // 109: dota.CMsgDOTAProfileCard.Slot.Trophy
	(*CMsgDOTAProfileCard_Slot_Stat)(nil),                            // 110: dota.CMsgDOTAProfileCard.Slot.Stat
	(*CMsgDOTAProfileCard_Slot_Item)(nil),                            // 111: dota.CMsgDOTAProfileCard.Slot.Item
	(*CMsgDOTAProfileCard_Slot_Hero)(nil),                            // 112: dota.CMsgDOTAProfileCard.Slot.Hero
	(*CMsgDOTAProfileCard_Slot_Emoticon)(nil),                        // 113: dota.CMsgDOTAProfileCard.Slot.Emoticon
	(*CMsgDOTAProfileCard_Slot_Team)(nil),                            // 114: dota.CMsgDOTAProfileCard.Slot.Team
	(*CMsgDOTARealtimeGameStats_TeamDetails)(nil),                    // 115: dota.CMsgDOTARealtimeGameStats.TeamDetails
	(*CMsgDOTARealtimeGameStats_ItemDetails)(nil),                    // 116: dota.CMsgDOTARealtimeGameStats.ItemDetails
	(*CMsgDOTARealtimeGameStats_AbilityDetails)(nil),                 // 117: dota.CMsgDOTARealtimeGameStats.AbilityDetails
	(*CMsgDOTARealtimeGameStats_HeroToHeroStats)(nil),                // 118: dota.CMsgDOTARealtimeGameStats.HeroToHeroStats
	(*CMsgDOTARealtimeGameStats_AbilityList)(nil),                    // 119: dota.CMsgDOTARealtimeGameStats.AbilityList
	(*CMsgDOTARealtimeGameStats_PlayerDetails)(nil),                  // 120: dota.CMsgDOTARealtimeGameStats.PlayerDetails
	(*CMsgDOTARealtimeGameStats_BuildingDetails)(nil),                // 121: dota.CMsgDOTARealtimeGameStats.BuildingDetails
	(*CMsgDOTARealtimeGameStats_KillDetails)(nil),                    // 122: dota.CMsgDOTARealtimeGameStats.KillDetails
	(*CMsgDOTARealtimeGameStats_BroadcasterDetails)(nil),             // 123: dota.CMsgDOTARealtimeGameStats.BroadcasterDetails
	(*CMsgDOTARealtimeGameStats_PickBanDetails)(nil),                 // 124: dota.CMsgDOTARealtimeGameStats.PickBanDetails
	(*CMsgDOTARealtimeGameStats_MatchDetails)(nil),                   // 125: dota.CMsgDOTARealtimeGameStats.MatchDetails
	(*CMsgDOTARealtimeGameStats_GraphData)(nil),                      // 126: dota.CMsgDOTARealtimeGameStats.GraphData
	(*CMsgDOTARealtimeGameStats_GraphData_LocationStats)(nil),        // 127: dota.CMsgDOTARealtimeGameStats.GraphData.LocationStats
	(*CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats)(nil),    // 128: dota.CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats
	(*CMsgDOTARealtimeGameStatsTerse_TeamDetails)(nil),               // 129: dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails
	(*CMsgDOTARealtimeGameStatsTerse_PlayerDetails)(nil),             // 130: dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails
	(*CMsgDOTARealtimeGameStatsTerse_BuildingDetails)(nil),           // 131: dota.CMsgDOTARealtimeGameStatsTerse.BuildingDetails
	(*CMsgDOTARealtimeGameStatsTerse_PickBanDetails)(nil),            // 132: dota.CMsgDOTARealtimeGameStatsTerse.PickBanDetails
	(*CMsgDOTARealtimeGameStatsTerse_MatchDetails)(nil),              // 133: dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails
	(*CMsgDOTARealtimeGameStatsTerse_GraphData)(nil),                 // 134: dota.CMsgDOTARealtimeGameStatsTerse.GraphData
	(*CMsgDOTASeasonRewards_Reward)(nil),                             // 135: dota.CMsgDOTASeasonRewards.Reward
	(*CMsgDOTASeasonAchievements_Achievement)(nil),                   // 136: dota.CMsgDOTASeasonAchievements.Achievement
	(*CMsgDOTASeasonPredictions_Choice)(nil),                         // 137: dota.CMsgDOTASeasonPredictions.Choice
	(*CMsgDOTASeasonPredictions_Answers)(nil),                        // 138: dota.CMsgDOTASeasonPredictions.Answers
	(*CMsgDOTASeasonPredictions_QueryKeyValues)(nil),                 // 139: dota.CMsgDOTASeasonPredictions.QueryKeyValues
	(*CMsgDOTASeasonPredictions_Prediction)(nil),                     // 140: dota.CMsgDOTASeasonPredictions.Prediction
	(*CMsgDOTASeasonPredictions_InGamePrediction)(nil),               // 141: dota.CMsgDOTASeasonPredictions.InGamePrediction
	(*CMsgDOTAMatch_Player)(nil),                                     // 142: dota.CMsgDOTAMatch.Player
	(*CMsgDOTAMatch_BroadcasterInfo)(nil),                            // 143: dota.CMsgDOTAMatch.BroadcasterInfo
	(*CMsgDOTAMatch_BroadcasterChannel)(nil),                         // 144: dota.CMsgDOTAMatch.BroadcasterChannel
	(*CMsgDOTAMatch_Coach)(nil),                                      // 145: dota.CMsgDOTAMatch.Coach
	(*CMsgDOTAMatch_CustomGameData)(nil),                             // 146: dota.CMsgDOTAMatch.CustomGameData
	(*CMsgDOTAMatch_Player_CustomGameData)(nil),                      // 147: dota.CMsgDOTAMatch.Player.CustomGameData
	(*CMsgDOTAMatch_Player_HeroDamageReceived)(nil),                  // 148: dota.CMsgDOTAMatch.Player.HeroDamageReceived
	(*CMsgPlayerCard_StatModifier)(nil),                              // 149: dota.CMsgPlayerCard.StatModifier
	(*CMsgDOTABotDebugInfo_Bot)(nil),                                 // 150: dota.CMsgDOTABotDebugInfo.Bot
	(*CMsgDOTABotDebugInfo_Bot_Mode)(nil),                            // 151: dota.CMsgDOTABotDebugInfo.Bot.Mode
	(*CMsgDOTABotDebugInfo_Bot_Action)(nil),                          // 152: dota.CMsgDOTABotDebugInfo.Bot.Action
	(*CMsgMatchTips_SingleTip)(nil),                                  // 153: dota.CMsgMatchTips.SingleTip
	(*CMsgDOTAMatchMinimal_Player)(nil),                              // 154: dota.CMsgDOTAMatchMinimal.Player
	(*CMsgDOTAMatchMinimal_Tourney)(nil),                             // 155: dota.CMsgDOTAMatchMinimal.Tourney
	(*CMsgMatchConsumableUsage_PlayerUsage)(nil),                     // 156: dota.CMsgMatchConsumableUsage.PlayerUsage
	(*CMsgMatchEventActionGrants_Grant)(nil),                         // 157: dota.CMsgMatchEventActionGrants.Grant
	(*CMsgMatchEventActionGrants_PlayerGrants)(nil),                  // 158: dota.CMsgMatchEventActionGrants.PlayerGrants
	(*CMsgCustomGameWhitelistForEdit_WhitelistEntry)(nil),            // 159: dota.CMsgCustomGameWhitelistForEdit.WhitelistEntry
	(*CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account)(nil), // 160: dota.CMsgGCtoGCAssociatedExploiterAccountInfoResponse.Account
	(*CMsgPullTabsData_Slot)(nil),                                    // 161: dota.CMsgPullTabsData.Slot
	(*CMsgPullTabsData_Jackpot)(nil),                                 // 162: dota.CMsgPullTabsData.Jackpot
	(*CMsgUnderDraftData_BenchSlot)(nil),                             // 163: dota.CMsgUnderDraftData.BenchSlot
	(*CMsgUnderDraftData_ShopSlot)(nil),                              // 164: dota.CMsgUnderDraftData.ShopSlot
	(PartnerAccountType)(0),                                          // 165: dota.PartnerAccountType
	(EEvent)(0),                                                      // 166: dota.EEvent
	(DOTA_GameMode)(0),                                               // 167: dota.DOTA_GameMode
	(EMatchOutcome)(0),                                               // 168: dota.EMatchOutcome
	(ELeagueRegion)(0),                                               // 169: dota.ELeagueRegion
	(ELeaguePhase)(0),                                                // 170: dota.ELeaguePhase
	(*CMsgPendingEventAward)(nil),                                    // 171: dota.CMsgPendingEventAward
}
var file_dota_gcmessages_common_proto_depIdxs = []int32{
	165, // 0: dota.CSODOTAGameAccountClient.partner_account_type:type_name -> dota.PartnerAccountType
	99,  // 1: dota.CSODOTAGameAccountClient.role_handicaps:type_name -> dota.CSODOTAGameAccountClient.RoleHandicap
	100, // 2: dota.CMsgLobbyPlayerPlusSubscriptionData.hero_badges:type_name -> dota.CMsgLobbyPlayerPlusSubscriptionData.HeroBadge
	105, // 3: dota.CMsgLobbyEventPoints.account_points:type_name -> dota.CMsgLobbyEventPoints.AccountPoints
	106, // 4: dota.CMsgLobbyGauntletProgress.accounts:type_name -> dota.CMsgLobbyGauntletProgress.AccountProgress
	166, // 5: dota.CMsgLocalServerGuildData.event_id:type_name -> dota.EEvent
	22,  // 6: dota.CMsgLocalServerFakeLobbyData.event_points:type_name -> dota.CMsgLobbyEventPoints
	25,  // 7: dota.CMsgLocalServerFakeLobbyData.guild_info:type_name -> dota.CMsgLocalServerGuildData
	27,  // 8: dota.CMsgLobbyBattleCupVictoryList.winners:type_name -> dota.CMsgBattleCupVictory
	107, // 9: dota.CMsgGCGetPlayerCardItemInfoResponse.player_card_infos:type_name -> dota.CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo
	51,  // 10: dota.CCompendiumGameTimeline.data:type_name -> dota.CCompendiumTimestampedData
	52,  // 11: dota.CCompendiumGameList.games:type_name -> dota.CCompendiumGameTimeline
	108, // 12: dota.CMsgDOTAProfileCard.slots:type_name -> dota.CMsgDOTAProfileCard.Slot
	27,  // 13: dota.CMsgDOTAProfileCard.recent_battle_cup_victory:type_name -> dota.CMsgBattleCupVictory
	166, // 14: dota.CMsgClientToGCRerollPlayerChallenge.event_id:type_name -> dota.EEvent
	7,   // 15: dota.CMsgGCRerollPlayerChallengeResponse.result:type_name -> dota.CMsgGCRerollPlayerChallengeResponse.EResult
	125, // 16: dota.CMsgDOTARealtimeGameStats.match:type_name -> dota.CMsgDOTARealtimeGameStats.MatchDetails
	115, // 17: dota.CMsgDOTARealtimeGameStats.teams:type_name -> dota.CMsgDOTARealtimeGameStats.TeamDetails
	121, // 18: dota.CMsgDOTARealtimeGameStats.buildings:type_name -> dota.CMsgDOTARealtimeGameStats.BuildingDetails
	126, // 19: dota.CMsgDOTARealtimeGameStats.graph_data:type_name -> dota.CMsgDOTARealtimeGameStats.GraphData
	133, // 20: dota.CMsgDOTARealtimeGameStatsTerse.match:type_name -> dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails
	129, // 21: dota.CMsgDOTARealtimeGameStatsTerse.teams:type_name -> dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails
	131, // 22: dota.CMsgDOTARealtimeGameStatsTerse.buildings:type_name -> dota.CMsgDOTARealtimeGameStatsTerse.BuildingDetails
	134, // 23: dota.CMsgDOTARealtimeGameStatsTerse.graph_data:type_name -> dota.CMsgDOTARealtimeGameStatsTerse.GraphData
	3,   // 24: dota.CMsgDOTABroadcastTimelineEvent.event:type_name -> dota.EBroadcastTimelineEvent
	135, // 25: dota.CMsgDOTASeasonRewards.rewards:type_name -> dota.CMsgDOTASeasonRewards.Reward
	136, // 26: dota.CMsgDOTASeasonAchievements.achievements:type_name -> dota.CMsgDOTASeasonAchievements.Achievement
	140, // 27: dota.CMsgDOTASeasonPredictions.predictions:type_name -> dota.CMsgDOTASeasonPredictions.Prediction
	141, // 28: dota.CMsgDOTASeasonPredictions.in_game_predictions:type_name -> dota.CMsgDOTASeasonPredictions.InGamePrediction
	142, // 29: dota.CMsgDOTAMatch.players:type_name -> dota.CMsgDOTAMatch.Player
	167, // 30: dota.CMsgDOTAMatch.game_mode:type_name -> dota.DOTA_GameMode
	37,  // 31: dota.CMsgDOTAMatch.picks_bans:type_name -> dota.CMatchHeroSelectEvent
	16,  // 32: dota.CMsgDOTAMatch.replay_state:type_name -> dota.CMsgDOTAMatch.ReplayState
	144, // 33: dota.CMsgDOTAMatch.broadcaster_channels:type_name -> dota.CMsgDOTAMatch.BroadcasterChannel
	146, // 34: dota.CMsgDOTAMatch.custom_game_data:type_name -> dota.CMsgDOTAMatch.CustomGameData
	168, // 35: dota.CMsgDOTAMatch.match_outcome:type_name -> dota.EMatchOutcome
	145, // 36: dota.CMsgDOTAMatch.coaches:type_name -> dota.CMsgDOTAMatch.Coach
	149, // 37: dota.CMsgPlayerCard.stat_modifier:type_name -> dota.CMsgPlayerCard.StatModifier
	70,  // 38: dota.CMsgDOTAFantasyPlayerMatchStats.matches:type_name -> dota.CMsgDOTAFantasyPlayerStats
	150, // 39: dota.CMsgDOTABotDebugInfo.bots:type_name -> dota.CMsgDOTABotDebugInfo.Bot
	167, // 40: dota.CMsgRecentMatchInfo.game_mode:type_name -> dota.DOTA_GameMode
	168, // 41: dota.CMsgRecentMatchInfo.match_outcome:type_name -> dota.EMatchOutcome
	153, // 42: dota.CMsgMatchTips.tips:type_name -> dota.CMsgMatchTips.SingleTip
	167, // 43: dota.CMsgDOTAMatchMinimal.game_mode:type_name -> dota.DOTA_GameMode
	154, // 44: dota.CMsgDOTAMatchMinimal.players:type_name -> dota.CMsgDOTAMatchMinimal.Player
	155, // 45: dota.CMsgDOTAMatchMinimal.tourney:type_name -> dota.CMsgDOTAMatchMinimal.Tourney
	168, // 46: dota.CMsgDOTAMatchMinimal.match_outcome:type_name -> dota.EMatchOutcome
	156, // 47: dota.CMsgMatchConsumableUsage.player_consumables_used:type_name -> dota.CMsgMatchConsumableUsage.PlayerUsage
	158, // 48: dota.CMsgMatchEventActionGrants.player_grants:type_name -> dota.CMsgMatchEventActionGrants.PlayerGrants
	159, // 49: dota.CMsgCustomGameWhitelistForEdit.whitelist_entries:type_name -> dota.CMsgCustomGameWhitelistForEdit.WhitelistEntry
	84,  // 50: dota.CMsgPlayerRecentAccomplishments.recent_outcomes:type_name -> dota.CMsgPlayerRecentMatchOutcomes
	83,  // 51: dota.CMsgPlayerRecentAccomplishments.total_record:type_name -> dota.CMsgPlayerMatchRecord
	85,  // 52: dota.CMsgPlayerRecentAccomplishments.recent_commends:type_name -> dota.CMsgPlayerRecentCommends
	82,  // 53: dota.CMsgPlayerRecentAccomplishments.last_match:type_name -> dota.CMsgPlayerRecentMatchInfo
	84,  // 54: dota.CMsgPlayerRecentAccomplishments.recent_mvps:type_name -> dota.CMsgPlayerRecentMatchOutcomes
	84,  // 55: dota.CMsgPlayerHeroRecentAccomplishments.recent_outcomes:type_name -> dota.CMsgPlayerRecentMatchOutcomes
	83,  // 56: dota.CMsgPlayerHeroRecentAccomplishments.total_record:type_name -> dota.CMsgPlayerMatchRecord
	82,  // 57: dota.CMsgPlayerHeroRecentAccomplishments.last_match:type_name -> dota.CMsgPlayerRecentMatchInfo
	86,  // 58: dota.CMsgRecentAccomplishments.player_accomplishments:type_name -> dota.CMsgPlayerRecentAccomplishments
	87,  // 59: dota.CMsgRecentAccomplishments.hero_accomplishments:type_name -> dota.CMsgPlayerHeroRecentAccomplishments
	18,  // 60: dota.CMsgRequestPlayerRecentAccomplishmentsResponse.result:type_name -> dota.CMsgRequestPlayerRecentAccomplishmentsResponse.EResponse
	88,  // 61: dota.CMsgRequestPlayerRecentAccomplishmentsResponse.player_accomplishments:type_name -> dota.CMsgRecentAccomplishments
	160, // 62: dota.CMsgGCtoGCAssociatedExploiterAccountInfoResponse.accounts:type_name -> dota.CMsgGCtoGCAssociatedExploiterAccountInfoResponse.Account
	161, // 63: dota.CMsgPullTabsData.slots:type_name -> dota.CMsgPullTabsData.Slot
	162, // 64: dota.CMsgPullTabsData.jackpots:type_name -> dota.CMsgPullTabsData.Jackpot
	163, // 65: dota.CMsgUnderDraftData.bench_slots:type_name -> dota.CMsgUnderDraftData.BenchSlot
	164, // 66: dota.CMsgUnderDraftData.shop_slots:type_name -> dota.CMsgUnderDraftData.ShopSlot
	5,   // 67: dota.CMsgDOTATriviaQuestion.category:type_name -> dota.EDOTATriviaQuestionCategory
	101, // 68: dota.CMsgLobbyEventPoints.AccountPoints.unlocked_chat_wheel_message_ranges:type_name -> dota.CMsgLobbyEventPoints.ChatWheelMessageRange
	21,  // 69: dota.CMsgLobbyEventPoints.AccountPoints.plus_subscription_data:type_name -> dota.CMsgLobbyPlayerPlusSubscriptionData
	103, // 70: dota.CMsgLobbyEventPoints.AccountPoints.wager_tokens:type_name -> dota.CMsgLobbyEventPoints.PeriodicResourceValues
	103, // 71: dota.CMsgLobbyEventPoints.AccountPoints.rank_wager_tokens:type_name -> dota.CMsgLobbyEventPoints.PeriodicResourceValues
	103, // 72: dota.CMsgLobbyEventPoints.AccountPoints.tip_tokens:type_name -> dota.CMsgLobbyEventPoints.PeriodicResourceValues
	103, // 73: dota.CMsgLobbyEventPoints.AccountPoints.periodic_point_adjustments:type_name -> dota.CMsgLobbyEventPoints.PeriodicResourceValues
	102, // 74: dota.CMsgLobbyEventPoints.AccountPoints.unlocked_ping_wheel_message_ranges:type_name -> dota.CMsgLobbyEventPoints.PingWheelMessageRange
	103, // 75: dota.CMsgLobbyEventPoints.AccountPoints.bounties:type_name -> dota.CMsgLobbyEventPoints.PeriodicResourceValues
	104, // 76: dota.CMsgLobbyEventPoints.AccountPoints.event_game_custom_actions:type_name -> dota.CMsgLobbyEventPoints.EventGameCustomActions
	109, // 77: dota.CMsgDOTAProfileCard.Slot.trophy:type_name -> dota.CMsgDOTAProfileCard.Slot.Trophy
	110, // 78: dota.CMsgDOTAProfileCard.Slot.stat:type_name -> dota.CMsgDOTAProfileCard.Slot.Stat
	111, // 79: dota.CMsgDOTAProfileCard.Slot.item:type_name -> dota.CMsgDOTAProfileCard.Slot.Item
	112, // 80: dota.CMsgDOTAProfileCard.Slot.hero:type_name -> dota.CMsgDOTAProfileCard.Slot.Hero
	113, // 81: dota.CMsgDOTAProfileCard.Slot.emoticon:type_name -> dota.CMsgDOTAProfileCard.Slot.Emoticon
	114, // 82: dota.CMsgDOTAProfileCard.Slot.team:type_name -> dota.CMsgDOTAProfileCard.Slot.Team
	6,   // 83: dota.CMsgDOTAProfileCard.Slot.Stat.stat_id:type_name -> dota.CMsgDOTAProfileCard.EStatID
	120, // 84: dota.CMsgDOTARealtimeGameStats.TeamDetails.players:type_name -> dota.CMsgDOTARealtimeGameStats.PlayerDetails
	117, // 85: dota.CMsgDOTARealtimeGameStats.PlayerDetails.abilities:type_name -> dota.CMsgDOTARealtimeGameStats.AbilityDetails
	116, // 86: dota.CMsgDOTARealtimeGameStats.PlayerDetails.items:type_name -> dota.CMsgDOTARealtimeGameStats.ItemDetails
	116, // 87: dota.CMsgDOTARealtimeGameStats.PlayerDetails.stashitems:type_name -> dota.CMsgDOTARealtimeGameStats.ItemDetails
	116, // 88: dota.CMsgDOTARealtimeGameStats.PlayerDetails.itemshoppinglist:type_name -> dota.CMsgDOTARealtimeGameStats.ItemDetails
	119, // 89: dota.CMsgDOTARealtimeGameStats.PlayerDetails.levelpoints:type_name -> dota.CMsgDOTARealtimeGameStats.AbilityList
	118, // 90: dota.CMsgDOTARealtimeGameStats.PlayerDetails.hero_to_hero_stats:type_name -> dota.CMsgDOTARealtimeGameStats.HeroToHeroStats
	124, // 91: dota.CMsgDOTARealtimeGameStats.MatchDetails.picks:type_name -> dota.CMsgDOTARealtimeGameStats.PickBanDetails
	124, // 92: dota.CMsgDOTARealtimeGameStats.MatchDetails.bans:type_name -> dota.CMsgDOTARealtimeGameStats.PickBanDetails
	122, // 93: dota.CMsgDOTARealtimeGameStats.MatchDetails.kills:type_name -> dota.CMsgDOTARealtimeGameStats.KillDetails
	123, // 94: dota.CMsgDOTARealtimeGameStats.MatchDetails.broadcasters:type_name -> dota.CMsgDOTARealtimeGameStats.BroadcasterDetails
	128, // 95: dota.CMsgDOTARealtimeGameStats.GraphData.team_loc_stats:type_name -> dota.CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats
	127, // 96: dota.CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats.loc_stats:type_name -> dota.CMsgDOTARealtimeGameStats.GraphData.LocationStats
	130, // 97: dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails.players:type_name -> dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails
	132, // 98: dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails.picks:type_name -> dota.CMsgDOTARealtimeGameStatsTerse.PickBanDetails
	132, // 99: dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails.bans:type_name -> dota.CMsgDOTARealtimeGameStatsTerse.PickBanDetails
	10,  // 100: dota.CMsgDOTASeasonRewards.Reward.reward_type:type_name -> dota.CMsgDOTASeasonRewards.ERewardType
	11,  // 101: dota.CMsgDOTASeasonPredictions.Prediction.type:type_name -> dota.CMsgDOTASeasonPredictions.ePredictionType
	137, // 102: dota.CMsgDOTASeasonPredictions.Prediction.choices:type_name -> dota.CMsgDOTASeasonPredictions.Choice
	12,  // 103: dota.CMsgDOTASeasonPredictions.Prediction.answer_type:type_name -> dota.CMsgDOTASeasonPredictions.eAnswerType
	138, // 104: dota.CMsgDOTASeasonPredictions.Prediction.answers:type_name -> dota.CMsgDOTASeasonPredictions.Answers
	169, // 105: dota.CMsgDOTASeasonPredictions.Prediction.region:type_name -> dota.ELeagueRegion
	170, // 106: dota.CMsgDOTASeasonPredictions.Prediction.phases:type_name -> dota.ELeaguePhase
	11,  // 107: dota.CMsgDOTASeasonPredictions.InGamePrediction.type:type_name -> dota.CMsgDOTASeasonPredictions.ePredictionType
	14,  // 108: dota.CMsgDOTASeasonPredictions.InGamePrediction.group:type_name -> dota.CMsgDOTASeasonPredictions.eRandomSelectionGroup_t
	137, // 109: dota.CMsgDOTASeasonPredictions.InGamePrediction.choices:type_name -> dota.CMsgDOTASeasonPredictions.Choice
	139, // 110: dota.CMsgDOTASeasonPredictions.InGamePrediction.query_values:type_name -> dota.CMsgDOTASeasonPredictions.QueryKeyValues
	13,  // 111: dota.CMsgDOTASeasonPredictions.InGamePrediction.answer_resolution_type:type_name -> dota.CMsgDOTASeasonPredictions.eResolutionType_t
	15,  // 112: dota.CMsgDOTASeasonPredictions.InGamePrediction.raw_value_type:type_name -> dota.CMsgDOTASeasonPredictions.eRawValueType_t
	32,  // 113: dota.CMsgDOTAMatch.Player.ability_upgrades:type_name -> dota.CMatchPlayerAbilityUpgrade
	35,  // 114: dota.CMsgDOTAMatch.Player.additional_units_inventory:type_name -> dota.CMatchAdditionalUnitInventory
	36,  // 115: dota.CMsgDOTAMatch.Player.permanent_buffs:type_name -> dota.CMatchPlayerPermanentBuff
	147, // 116: dota.CMsgDOTAMatch.Player.custom_game_data:type_name -> dota.CMsgDOTAMatch.Player.CustomGameData
	148, // 117: dota.CMsgDOTAMatch.Player.hero_damage_received:type_name -> dota.CMsgDOTAMatch.Player.HeroDamageReceived
	143, // 118: dota.CMsgDOTAMatch.BroadcasterChannel.broadcaster_infos:type_name -> dota.CMsgDOTAMatch.BroadcasterInfo
	17,  // 119: dota.CMsgDOTAMatch.Player.HeroDamageReceived.damage_type:type_name -> dota.CMsgDOTAMatch.Player.HeroDamageType
	151, // 120: dota.CMsgDOTABotDebugInfo.Bot.modes:type_name -> dota.CMsgDOTABotDebugInfo.Bot.Mode
	152, // 121: dota.CMsgDOTABotDebugInfo.Bot.action:type_name -> dota.CMsgDOTABotDebugInfo.Bot.Action
	166, // 122: dota.CMsgMatchTips.SingleTip.event_id:type_name -> dota.EEvent
	77,  // 123: dota.CMsgMatchConsumableUsage.PlayerUsage.consumables_used:type_name -> dota.CMsgConsumableUsage
	157, // 124: dota.CMsgMatchEventActionGrants.PlayerGrants.actions_granted_old:type_name -> dota.CMsgMatchEventActionGrants.Grant
	171, // 125: dota.CMsgMatchEventActionGrants.PlayerGrants.actions_granted:type_name -> dota.CMsgPendingEventAward
	4,   // 126: dota.CMsgCustomGameWhitelistForEdit.WhitelistEntry.whitelist_state:type_name -> dota.ECustomGameWhitelistState
	127, // [127:127] is the sub-list for method output_type
	127, // [127:127] is the sub-list for method input_type
	127, // [127:127] is the sub-list for extension type_name
	127, // [127:127] is the sub-list for extension extendee
	0,   // [0:127] is the sub-list for field type_name
}

func init() { file_dota_gcmessages_common_proto_init() }
func file_dota_gcmessages_common_proto_init() {
	if File_dota_gcmessages_common_proto != nil {
		return
	}
	file_steammessages_proto_init()
	file_gcsdk_gcmessages_proto_init()
	file_dota_shared_enums_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_dota_gcmessages_common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSODOTAGameAccountClient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSODOTAGameAccountPlus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgLobbyPlayerPlusSubscriptionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgLobbyEventPoints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgLobbyEventGameData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgLobbyGauntletProgress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgLocalServerGuildData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgLocalServerFakeLobbyData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgBattleCupVictory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgLobbyBattleCupVictoryList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTABroadcastNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CProtoItemHeroStatue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CProtoItemTeamShowcase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMatchPlayerAbilityUpgrade); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMatchPlayerTimedStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMatchTeamTimedStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMatchAdditionalUnitInventory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMatchPlayerPermanentBuff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMatchHeroSelectEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPartySearchClientParty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAProcessFantasyScheduledEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAHasItemQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAHasItemResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCIsProQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCIsProResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAHasItemDefsQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAHasItemDefsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCGetPlayerCardItemInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCGetPlayerCardItemInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCToGCFantasySetMatchLeague); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSODOTAMapLocationState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgLeagueAdminList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCompendiumTimestampedData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCompendiumGameTimeline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCompendiumGameList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CAdditionalEquipSlot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAProfileCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSODOTAPlayerChallenge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCRerollPlayerChallenge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCRerollPlayerChallengeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCTopCustomGamesList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTARealtimeGameStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTARealtimeGameStatsTerse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTABroadcastTimelineEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCToClientMatchGroupsVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTASDOHeroStatsHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTASeasonRewards); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTASeasonAchievements); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTASeasonPredictions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPlayerCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAFantasyPlayerStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAFantasyPlayerMatchStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTABotDebugInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSuccessfulHero); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgRecentMatchInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgMatchTips); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAMatchMinimal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgConsumableUsage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgMatchConsumableUsage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgMatchEventActionGrants); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgCustomGameWhitelist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgCustomGameWhitelistForEdit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPlayerRecentMatchInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPlayerMatchRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPlayerRecentMatchOutcomes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPlayerRecentCommends); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPlayerRecentAccomplishments); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPlayerHeroRecentAccomplishments); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgRecentAccomplishments); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgRequestPlayerRecentAccomplishments); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgRequestPlayerRecentAccomplishmentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgArcanaVoteMatchVotes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCtoGCAssociatedExploiterAccountInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCtoGCAssociatedExploiterAccountInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPullTabsData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgUnderDraftData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPlayerTitleData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTATriviaQuestion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTATriviaQuestionAnswersSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSODOTAGameAccountClient_RoleHandicap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgLobbyPlayerPlusSubscriptionData_HeroBadge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgLobbyEventPoints_ChatWheelMessageRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgLobbyEventPoints_PingWheelMessageRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgLobbyEventPoints_PeriodicResourceValues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgLobbyEventPoints_EventGameCustomActions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgLobbyEventPoints_AccountPoints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgLobbyGauntletProgress_AccountProgress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAProfileCard_Slot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAProfileCard_Slot_Trophy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAProfileCard_Slot_Stat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAProfileCard_Slot_Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAProfileCard_Slot_Hero); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAProfileCard_Slot_Emoticon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAProfileCard_Slot_Team); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTARealtimeGameStats_TeamDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTARealtimeGameStats_ItemDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTARealtimeGameStats_AbilityDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTARealtimeGameStats_HeroToHeroStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTARealtimeGameStats_AbilityList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTARealtimeGameStats_PlayerDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTARealtimeGameStats_BuildingDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTARealtimeGameStats_KillDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTARealtimeGameStats_BroadcasterDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTARealtimeGameStats_PickBanDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTARealtimeGameStats_MatchDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTARealtimeGameStats_GraphData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTARealtimeGameStats_GraphData_LocationStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTARealtimeGameStatsTerse_TeamDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTARealtimeGameStatsTerse_PlayerDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTARealtimeGameStatsTerse_BuildingDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTARealtimeGameStatsTerse_PickBanDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTARealtimeGameStatsTerse_MatchDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTARealtimeGameStatsTerse_GraphData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTASeasonRewards_Reward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTASeasonAchievements_Achievement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTASeasonPredictions_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTASeasonPredictions_Answers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTASeasonPredictions_QueryKeyValues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTASeasonPredictions_Prediction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTASeasonPredictions_InGamePrediction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAMatch_Player); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAMatch_BroadcasterInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAMatch_BroadcasterChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAMatch_Coach); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAMatch_CustomGameData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAMatch_Player_CustomGameData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAMatch_Player_HeroDamageReceived); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPlayerCard_StatModifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTABotDebugInfo_Bot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTABotDebugInfo_Bot_Mode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTABotDebugInfo_Bot_Action); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgMatchTips_SingleTip); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAMatchMinimal_Player); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAMatchMinimal_Tourney); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgMatchConsumableUsage_PlayerUsage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgMatchEventActionGrants_Grant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgMatchEventActionGrants_PlayerGrants); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgCustomGameWhitelistForEdit_WhitelistEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPullTabsData_Slot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPullTabsData_Jackpot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgUnderDraftData_BenchSlot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgUnderDraftData_ShopSlot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dota_gcmessages_common_proto_rawDesc,
			NumEnums:      19,
			NumMessages:   146,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_dota_gcmessages_common_proto_goTypes,
		DependencyIndexes: file_dota_gcmessages_common_proto_depIdxs,
		EnumInfos:         file_dota_gcmessages_common_proto_enumTypes,
		MessageInfos:      file_dota_gcmessages_common_proto_msgTypes,
	}.Build()
	File_dota_gcmessages_common_proto = out.File
	file_dota_gcmessages_common_proto_rawDesc = nil
	file_dota_gcmessages_common_proto_goTypes = nil
	file_dota_gcmessages_common_proto_depIdxs = nil
}
