// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.5
// source: steammessages_publishedfile.steamworkssdk.proto

package dota

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CPublishedFile_Subscribe_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Publishedfileid *uint64 `protobuf:"varint,1,opt,name=publishedfileid" json:"publishedfileid,omitempty"`
	ListType        *uint32 `protobuf:"varint,2,opt,name=list_type,json=listType" json:"list_type,omitempty"`
	Appid           *int32  `protobuf:"varint,3,opt,name=appid" json:"appid,omitempty"`
	NotifyClient    *bool   `protobuf:"varint,4,opt,name=notify_client,json=notifyClient" json:"notify_client,omitempty"`
}

func (x *CPublishedFile_Subscribe_Request) Reset() {
	*x = CPublishedFile_Subscribe_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_Subscribe_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_Subscribe_Request) ProtoMessage() {}

func (x *CPublishedFile_Subscribe_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_Subscribe_Request.ProtoReflect.Descriptor instead.
func (*CPublishedFile_Subscribe_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamworkssdk_proto_rawDescGZIP(), []int{0}
}

func (x *CPublishedFile_Subscribe_Request) GetPublishedfileid() uint64 {
	if x != nil && x.Publishedfileid != nil {
		return *x.Publishedfileid
	}
	return 0
}

func (x *CPublishedFile_Subscribe_Request) GetListType() uint32 {
	if x != nil && x.ListType != nil {
		return *x.ListType
	}
	return 0
}

func (x *CPublishedFile_Subscribe_Request) GetAppid() int32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CPublishedFile_Subscribe_Request) GetNotifyClient() bool {
	if x != nil && x.NotifyClient != nil {
		return *x.NotifyClient
	}
	return false
}

type CPublishedFile_Subscribe_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CPublishedFile_Subscribe_Response) Reset() {
	*x = CPublishedFile_Subscribe_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_Subscribe_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_Subscribe_Response) ProtoMessage() {}

func (x *CPublishedFile_Subscribe_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_Subscribe_Response.ProtoReflect.Descriptor instead.
func (*CPublishedFile_Subscribe_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamworkssdk_proto_rawDescGZIP(), []int{1}
}

type CPublishedFile_Unsubscribe_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Publishedfileid *uint64 `protobuf:"varint,1,opt,name=publishedfileid" json:"publishedfileid,omitempty"`
	ListType        *uint32 `protobuf:"varint,2,opt,name=list_type,json=listType" json:"list_type,omitempty"`
	Appid           *int32  `protobuf:"varint,3,opt,name=appid" json:"appid,omitempty"`
	NotifyClient    *bool   `protobuf:"varint,4,opt,name=notify_client,json=notifyClient" json:"notify_client,omitempty"`
}

func (x *CPublishedFile_Unsubscribe_Request) Reset() {
	*x = CPublishedFile_Unsubscribe_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_Unsubscribe_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_Unsubscribe_Request) ProtoMessage() {}

func (x *CPublishedFile_Unsubscribe_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_Unsubscribe_Request.ProtoReflect.Descriptor instead.
func (*CPublishedFile_Unsubscribe_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamworkssdk_proto_rawDescGZIP(), []int{2}
}

func (x *CPublishedFile_Unsubscribe_Request) GetPublishedfileid() uint64 {
	if x != nil && x.Publishedfileid != nil {
		return *x.Publishedfileid
	}
	return 0
}

func (x *CPublishedFile_Unsubscribe_Request) GetListType() uint32 {
	if x != nil && x.ListType != nil {
		return *x.ListType
	}
	return 0
}

func (x *CPublishedFile_Unsubscribe_Request) GetAppid() int32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CPublishedFile_Unsubscribe_Request) GetNotifyClient() bool {
	if x != nil && x.NotifyClient != nil {
		return *x.NotifyClient
	}
	return false
}

type CPublishedFile_Unsubscribe_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CPublishedFile_Unsubscribe_Response) Reset() {
	*x = CPublishedFile_Unsubscribe_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_Unsubscribe_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_Unsubscribe_Response) ProtoMessage() {}

func (x *CPublishedFile_Unsubscribe_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_Unsubscribe_Response.ProtoReflect.Descriptor instead.
func (*CPublishedFile_Unsubscribe_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamworkssdk_proto_rawDescGZIP(), []int{3}
}

type CPublishedFile_Publish_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid                *uint32  `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	ConsumerAppid        *uint32  `protobuf:"varint,2,opt,name=consumer_appid,json=consumerAppid" json:"consumer_appid,omitempty"`
	Cloudfilename        *string  `protobuf:"bytes,3,opt,name=cloudfilename" json:"cloudfilename,omitempty"`
	PreviewCloudfilename *string  `protobuf:"bytes,4,opt,name=preview_cloudfilename,json=previewCloudfilename" json:"preview_cloudfilename,omitempty"`
	Title                *string  `protobuf:"bytes,5,opt,name=title" json:"title,omitempty"`
	FileDescription      *string  `protobuf:"bytes,6,opt,name=file_description,json=fileDescription" json:"file_description,omitempty"`
	FileType             *uint32  `protobuf:"varint,7,opt,name=file_type,json=fileType" json:"file_type,omitempty"`
	ConsumerShortcutName *string  `protobuf:"bytes,8,opt,name=consumer_shortcut_name,json=consumerShortcutName" json:"consumer_shortcut_name,omitempty"`
	YoutubeUsername      *string  `protobuf:"bytes,9,opt,name=youtube_username,json=youtubeUsername" json:"youtube_username,omitempty"`
	YoutubeVideoid       *string  `protobuf:"bytes,10,opt,name=youtube_videoid,json=youtubeVideoid" json:"youtube_videoid,omitempty"`
	Visibility           *uint32  `protobuf:"varint,11,opt,name=visibility" json:"visibility,omitempty"`
	RedirectUri          *string  `protobuf:"bytes,12,opt,name=redirect_uri,json=redirectUri" json:"redirect_uri,omitempty"`
	Tags                 []string `protobuf:"bytes,13,rep,name=tags" json:"tags,omitempty"`
	CollectionType       *string  `protobuf:"bytes,14,opt,name=collection_type,json=collectionType" json:"collection_type,omitempty"`
	GameType             *string  `protobuf:"bytes,15,opt,name=game_type,json=gameType" json:"game_type,omitempty"`
	Url                  *string  `protobuf:"bytes,16,opt,name=url" json:"url,omitempty"`
}

func (x *CPublishedFile_Publish_Request) Reset() {
	*x = CPublishedFile_Publish_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_Publish_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_Publish_Request) ProtoMessage() {}

func (x *CPublishedFile_Publish_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_Publish_Request.ProtoReflect.Descriptor instead.
func (*CPublishedFile_Publish_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamworkssdk_proto_rawDescGZIP(), []int{4}
}

func (x *CPublishedFile_Publish_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CPublishedFile_Publish_Request) GetConsumerAppid() uint32 {
	if x != nil && x.ConsumerAppid != nil {
		return *x.ConsumerAppid
	}
	return 0
}

func (x *CPublishedFile_Publish_Request) GetCloudfilename() string {
	if x != nil && x.Cloudfilename != nil {
		return *x.Cloudfilename
	}
	return ""
}

func (x *CPublishedFile_Publish_Request) GetPreviewCloudfilename() string {
	if x != nil && x.PreviewCloudfilename != nil {
		return *x.PreviewCloudfilename
	}
	return ""
}

func (x *CPublishedFile_Publish_Request) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *CPublishedFile_Publish_Request) GetFileDescription() string {
	if x != nil && x.FileDescription != nil {
		return *x.FileDescription
	}
	return ""
}

func (x *CPublishedFile_Publish_Request) GetFileType() uint32 {
	if x != nil && x.FileType != nil {
		return *x.FileType
	}
	return 0
}

func (x *CPublishedFile_Publish_Request) GetConsumerShortcutName() string {
	if x != nil && x.ConsumerShortcutName != nil {
		return *x.ConsumerShortcutName
	}
	return ""
}

func (x *CPublishedFile_Publish_Request) GetYoutubeUsername() string {
	if x != nil && x.YoutubeUsername != nil {
		return *x.YoutubeUsername
	}
	return ""
}

func (x *CPublishedFile_Publish_Request) GetYoutubeVideoid() string {
	if x != nil && x.YoutubeVideoid != nil {
		return *x.YoutubeVideoid
	}
	return ""
}

func (x *CPublishedFile_Publish_Request) GetVisibility() uint32 {
	if x != nil && x.Visibility != nil {
		return *x.Visibility
	}
	return 0
}

func (x *CPublishedFile_Publish_Request) GetRedirectUri() string {
	if x != nil && x.RedirectUri != nil {
		return *x.RedirectUri
	}
	return ""
}

func (x *CPublishedFile_Publish_Request) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CPublishedFile_Publish_Request) GetCollectionType() string {
	if x != nil && x.CollectionType != nil {
		return *x.CollectionType
	}
	return ""
}

func (x *CPublishedFile_Publish_Request) GetGameType() string {
	if x != nil && x.GameType != nil {
		return *x.GameType
	}
	return ""
}

func (x *CPublishedFile_Publish_Request) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

type CPublishedFile_Publish_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Publishedfileid *uint64 `protobuf:"varint,1,opt,name=publishedfileid" json:"publishedfileid,omitempty"`
	RedirectUri     *string `protobuf:"bytes,2,opt,name=redirect_uri,json=redirectUri" json:"redirect_uri,omitempty"`
}

func (x *CPublishedFile_Publish_Response) Reset() {
	*x = CPublishedFile_Publish_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_Publish_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_Publish_Response) ProtoMessage() {}

func (x *CPublishedFile_Publish_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_Publish_Response.ProtoReflect.Descriptor instead.
func (*CPublishedFile_Publish_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamworkssdk_proto_rawDescGZIP(), []int{5}
}

func (x *CPublishedFile_Publish_Response) GetPublishedfileid() uint64 {
	if x != nil && x.Publishedfileid != nil {
		return *x.Publishedfileid
	}
	return 0
}

func (x *CPublishedFile_Publish_Response) GetRedirectUri() string {
	if x != nil && x.RedirectUri != nil {
		return *x.RedirectUri
	}
	return ""
}

type CPublishedFile_GetDetails_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Publishedfileids          []uint64 `protobuf:"fixed64,1,rep,name=publishedfileids" json:"publishedfileids,omitempty"`
	Includetags               *bool    `protobuf:"varint,2,opt,name=includetags" json:"includetags,omitempty"`
	Includeadditionalpreviews *bool    `protobuf:"varint,3,opt,name=includeadditionalpreviews" json:"includeadditionalpreviews,omitempty"`
	Includechildren           *bool    `protobuf:"varint,4,opt,name=includechildren" json:"includechildren,omitempty"`
	Includekvtags             *bool    `protobuf:"varint,5,opt,name=includekvtags" json:"includekvtags,omitempty"`
	Includevotes              *bool    `protobuf:"varint,6,opt,name=includevotes" json:"includevotes,omitempty"`
	ShortDescription          *bool    `protobuf:"varint,8,opt,name=short_description,json=shortDescription" json:"short_description,omitempty"`
}

func (x *CPublishedFile_GetDetails_Request) Reset() {
	*x = CPublishedFile_GetDetails_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_GetDetails_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_GetDetails_Request) ProtoMessage() {}

func (x *CPublishedFile_GetDetails_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_GetDetails_Request.ProtoReflect.Descriptor instead.
func (*CPublishedFile_GetDetails_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamworkssdk_proto_rawDescGZIP(), []int{6}
}

func (x *CPublishedFile_GetDetails_Request) GetPublishedfileids() []uint64 {
	if x != nil {
		return x.Publishedfileids
	}
	return nil
}

func (x *CPublishedFile_GetDetails_Request) GetIncludetags() bool {
	if x != nil && x.Includetags != nil {
		return *x.Includetags
	}
	return false
}

func (x *CPublishedFile_GetDetails_Request) GetIncludeadditionalpreviews() bool {
	if x != nil && x.Includeadditionalpreviews != nil {
		return *x.Includeadditionalpreviews
	}
	return false
}

func (x *CPublishedFile_GetDetails_Request) GetIncludechildren() bool {
	if x != nil && x.Includechildren != nil {
		return *x.Includechildren
	}
	return false
}

func (x *CPublishedFile_GetDetails_Request) GetIncludekvtags() bool {
	if x != nil && x.Includekvtags != nil {
		return *x.Includekvtags
	}
	return false
}

func (x *CPublishedFile_GetDetails_Request) GetIncludevotes() bool {
	if x != nil && x.Includevotes != nil {
		return *x.Includevotes
	}
	return false
}

func (x *CPublishedFile_GetDetails_Request) GetShortDescription() bool {
	if x != nil && x.ShortDescription != nil {
		return *x.ShortDescription
	}
	return false
}

type PublishedFileDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result                *uint32                         `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Publishedfileid       *uint64                         `protobuf:"varint,2,opt,name=publishedfileid" json:"publishedfileid,omitempty"`
	Creator               *uint64                         `protobuf:"fixed64,3,opt,name=creator" json:"creator,omitempty"`
	CreatorAppid          *uint32                         `protobuf:"varint,4,opt,name=creator_appid,json=creatorAppid" json:"creator_appid,omitempty"`
	ConsumerAppid         *uint32                         `protobuf:"varint,5,opt,name=consumer_appid,json=consumerAppid" json:"consumer_appid,omitempty"`
	ConsumerShortcutid    *uint32                         `protobuf:"varint,6,opt,name=consumer_shortcutid,json=consumerShortcutid" json:"consumer_shortcutid,omitempty"`
	Filename              *string                         `protobuf:"bytes,7,opt,name=filename" json:"filename,omitempty"`
	FileSize              *uint64                         `protobuf:"varint,8,opt,name=file_size,json=fileSize" json:"file_size,omitempty"`
	PreviewFileSize       *uint64                         `protobuf:"varint,9,opt,name=preview_file_size,json=previewFileSize" json:"preview_file_size,omitempty"`
	FileUrl               *string                         `protobuf:"bytes,10,opt,name=file_url,json=fileUrl" json:"file_url,omitempty"`
	PreviewUrl            *string                         `protobuf:"bytes,11,opt,name=preview_url,json=previewUrl" json:"preview_url,omitempty"`
	Youtubevideoid        *string                         `protobuf:"bytes,12,opt,name=youtubevideoid" json:"youtubevideoid,omitempty"`
	Url                   *string                         `protobuf:"bytes,13,opt,name=url" json:"url,omitempty"`
	HcontentFile          *uint64                         `protobuf:"fixed64,14,opt,name=hcontent_file,json=hcontentFile" json:"hcontent_file,omitempty"`
	HcontentPreview       *uint64                         `protobuf:"fixed64,15,opt,name=hcontent_preview,json=hcontentPreview" json:"hcontent_preview,omitempty"`
	Title                 *string                         `protobuf:"bytes,16,opt,name=title" json:"title,omitempty"`
	FileDescription       *string                         `protobuf:"bytes,17,opt,name=file_description,json=fileDescription" json:"file_description,omitempty"`
	ShortDescription      *string                         `protobuf:"bytes,18,opt,name=short_description,json=shortDescription" json:"short_description,omitempty"`
	TimeCreated           *uint32                         `protobuf:"varint,19,opt,name=time_created,json=timeCreated" json:"time_created,omitempty"`
	TimeUpdated           *uint32                         `protobuf:"varint,20,opt,name=time_updated,json=timeUpdated" json:"time_updated,omitempty"`
	Visibility            *uint32                         `protobuf:"varint,21,opt,name=visibility" json:"visibility,omitempty"`
	Flags                 *uint32                         `protobuf:"varint,22,opt,name=flags" json:"flags,omitempty"`
	WorkshopFile          *bool                           `protobuf:"varint,23,opt,name=workshop_file,json=workshopFile" json:"workshop_file,omitempty"`
	WorkshopAccepted      *bool                           `protobuf:"varint,24,opt,name=workshop_accepted,json=workshopAccepted" json:"workshop_accepted,omitempty"`
	ShowSubscribeAll      *bool                           `protobuf:"varint,25,opt,name=show_subscribe_all,json=showSubscribeAll" json:"show_subscribe_all,omitempty"`
	NumCommentsDeveloper  *int32                          `protobuf:"varint,26,opt,name=num_comments_developer,json=numCommentsDeveloper" json:"num_comments_developer,omitempty"`
	NumCommentsPublic     *int32                          `protobuf:"varint,27,opt,name=num_comments_public,json=numCommentsPublic" json:"num_comments_public,omitempty"`
	Banned                *bool                           `protobuf:"varint,28,opt,name=banned" json:"banned,omitempty"`
	BanReason             *string                         `protobuf:"bytes,29,opt,name=ban_reason,json=banReason" json:"ban_reason,omitempty"`
	Banner                *uint64                         `protobuf:"fixed64,30,opt,name=banner" json:"banner,omitempty"`
	CanBeDeleted          *bool                           `protobuf:"varint,31,opt,name=can_be_deleted,json=canBeDeleted" json:"can_be_deleted,omitempty"`
	Incompatible          *bool                           `protobuf:"varint,32,opt,name=incompatible" json:"incompatible,omitempty"`
	AppName               *string                         `protobuf:"bytes,33,opt,name=app_name,json=appName" json:"app_name,omitempty"`
	FileType              *uint32                         `protobuf:"varint,34,opt,name=file_type,json=fileType" json:"file_type,omitempty"`
	CanSubscribe          *bool                           `protobuf:"varint,35,opt,name=can_subscribe,json=canSubscribe" json:"can_subscribe,omitempty"`
	Subscriptions         *uint32                         `protobuf:"varint,36,opt,name=subscriptions" json:"subscriptions,omitempty"`
	Favorited             *uint32                         `protobuf:"varint,37,opt,name=favorited" json:"favorited,omitempty"`
	Followers             *uint32                         `protobuf:"varint,38,opt,name=followers" json:"followers,omitempty"`
	LifetimeSubscriptions *uint32                         `protobuf:"varint,39,opt,name=lifetime_subscriptions,json=lifetimeSubscriptions" json:"lifetime_subscriptions,omitempty"`
	LifetimeFavorited     *uint32                         `protobuf:"varint,40,opt,name=lifetime_favorited,json=lifetimeFavorited" json:"lifetime_favorited,omitempty"`
	LifetimeFollowers     *uint32                         `protobuf:"varint,41,opt,name=lifetime_followers,json=lifetimeFollowers" json:"lifetime_followers,omitempty"`
	Views                 *uint32                         `protobuf:"varint,42,opt,name=views" json:"views,omitempty"`
	ImageWidth            *uint32                         `protobuf:"varint,43,opt,name=image_width,json=imageWidth" json:"image_width,omitempty"`
	ImageHeight           *uint32                         `protobuf:"varint,44,opt,name=image_height,json=imageHeight" json:"image_height,omitempty"`
	ImageUrl              *string                         `protobuf:"bytes,45,opt,name=image_url,json=imageUrl" json:"image_url,omitempty"`
	SpoilerTag            *bool                           `protobuf:"varint,46,opt,name=spoiler_tag,json=spoilerTag" json:"spoiler_tag,omitempty"`
	Shortcutid            *uint32                         `protobuf:"varint,47,opt,name=shortcutid" json:"shortcutid,omitempty"`
	Shortcutname          *string                         `protobuf:"bytes,48,opt,name=shortcutname" json:"shortcutname,omitempty"`
	NumChildren           *uint32                         `protobuf:"varint,49,opt,name=num_children,json=numChildren" json:"num_children,omitempty"`
	NumReports            *uint32                         `protobuf:"varint,50,opt,name=num_reports,json=numReports" json:"num_reports,omitempty"`
	Previews              []*PublishedFileDetails_Preview `protobuf:"bytes,51,rep,name=previews" json:"previews,omitempty"`
	Tags                  []*PublishedFileDetails_Tag     `protobuf:"bytes,52,rep,name=tags" json:"tags,omitempty"`
	Children              []*PublishedFileDetails_Child   `protobuf:"bytes,53,rep,name=children" json:"children,omitempty"`
	Kvtags                []*PublishedFileDetails_KVTag   `protobuf:"bytes,54,rep,name=kvtags" json:"kvtags,omitempty"`
	VoteData              *PublishedFileDetails_VoteData  `protobuf:"bytes,55,opt,name=vote_data,json=voteData" json:"vote_data,omitempty"`
	TimeSubscribed        *uint32                         `protobuf:"varint,56,opt,name=time_subscribed,json=timeSubscribed" json:"time_subscribed,omitempty"`
}

func (x *PublishedFileDetails) Reset() {
	*x = PublishedFileDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishedFileDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishedFileDetails) ProtoMessage() {}

func (x *PublishedFileDetails) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishedFileDetails.ProtoReflect.Descriptor instead.
func (*PublishedFileDetails) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamworkssdk_proto_rawDescGZIP(), []int{7}
}

func (x *PublishedFileDetails) GetResult() uint32 {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return 0
}

func (x *PublishedFileDetails) GetPublishedfileid() uint64 {
	if x != nil && x.Publishedfileid != nil {
		return *x.Publishedfileid
	}
	return 0
}

func (x *PublishedFileDetails) GetCreator() uint64 {
	if x != nil && x.Creator != nil {
		return *x.Creator
	}
	return 0
}

func (x *PublishedFileDetails) GetCreatorAppid() uint32 {
	if x != nil && x.CreatorAppid != nil {
		return *x.CreatorAppid
	}
	return 0
}

func (x *PublishedFileDetails) GetConsumerAppid() uint32 {
	if x != nil && x.ConsumerAppid != nil {
		return *x.ConsumerAppid
	}
	return 0
}

func (x *PublishedFileDetails) GetConsumerShortcutid() uint32 {
	if x != nil && x.ConsumerShortcutid != nil {
		return *x.ConsumerShortcutid
	}
	return 0
}

func (x *PublishedFileDetails) GetFilename() string {
	if x != nil && x.Filename != nil {
		return *x.Filename
	}
	return ""
}

func (x *PublishedFileDetails) GetFileSize() uint64 {
	if x != nil && x.FileSize != nil {
		return *x.FileSize
	}
	return 0
}

func (x *PublishedFileDetails) GetPreviewFileSize() uint64 {
	if x != nil && x.PreviewFileSize != nil {
		return *x.PreviewFileSize
	}
	return 0
}

func (x *PublishedFileDetails) GetFileUrl() string {
	if x != nil && x.FileUrl != nil {
		return *x.FileUrl
	}
	return ""
}

func (x *PublishedFileDetails) GetPreviewUrl() string {
	if x != nil && x.PreviewUrl != nil {
		return *x.PreviewUrl
	}
	return ""
}

func (x *PublishedFileDetails) GetYoutubevideoid() string {
	if x != nil && x.Youtubevideoid != nil {
		return *x.Youtubevideoid
	}
	return ""
}

func (x *PublishedFileDetails) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *PublishedFileDetails) GetHcontentFile() uint64 {
	if x != nil && x.HcontentFile != nil {
		return *x.HcontentFile
	}
	return 0
}

func (x *PublishedFileDetails) GetHcontentPreview() uint64 {
	if x != nil && x.HcontentPreview != nil {
		return *x.HcontentPreview
	}
	return 0
}

func (x *PublishedFileDetails) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *PublishedFileDetails) GetFileDescription() string {
	if x != nil && x.FileDescription != nil {
		return *x.FileDescription
	}
	return ""
}

func (x *PublishedFileDetails) GetShortDescription() string {
	if x != nil && x.ShortDescription != nil {
		return *x.ShortDescription
	}
	return ""
}

func (x *PublishedFileDetails) GetTimeCreated() uint32 {
	if x != nil && x.TimeCreated != nil {
		return *x.TimeCreated
	}
	return 0
}

func (x *PublishedFileDetails) GetTimeUpdated() uint32 {
	if x != nil && x.TimeUpdated != nil {
		return *x.TimeUpdated
	}
	return 0
}

func (x *PublishedFileDetails) GetVisibility() uint32 {
	if x != nil && x.Visibility != nil {
		return *x.Visibility
	}
	return 0
}

func (x *PublishedFileDetails) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *PublishedFileDetails) GetWorkshopFile() bool {
	if x != nil && x.WorkshopFile != nil {
		return *x.WorkshopFile
	}
	return false
}

func (x *PublishedFileDetails) GetWorkshopAccepted() bool {
	if x != nil && x.WorkshopAccepted != nil {
		return *x.WorkshopAccepted
	}
	return false
}

func (x *PublishedFileDetails) GetShowSubscribeAll() bool {
	if x != nil && x.ShowSubscribeAll != nil {
		return *x.ShowSubscribeAll
	}
	return false
}

func (x *PublishedFileDetails) GetNumCommentsDeveloper() int32 {
	if x != nil && x.NumCommentsDeveloper != nil {
		return *x.NumCommentsDeveloper
	}
	return 0
}

func (x *PublishedFileDetails) GetNumCommentsPublic() int32 {
	if x != nil && x.NumCommentsPublic != nil {
		return *x.NumCommentsPublic
	}
	return 0
}

func (x *PublishedFileDetails) GetBanned() bool {
	if x != nil && x.Banned != nil {
		return *x.Banned
	}
	return false
}

func (x *PublishedFileDetails) GetBanReason() string {
	if x != nil && x.BanReason != nil {
		return *x.BanReason
	}
	return ""
}

func (x *PublishedFileDetails) GetBanner() uint64 {
	if x != nil && x.Banner != nil {
		return *x.Banner
	}
	return 0
}

func (x *PublishedFileDetails) GetCanBeDeleted() bool {
	if x != nil && x.CanBeDeleted != nil {
		return *x.CanBeDeleted
	}
	return false
}

func (x *PublishedFileDetails) GetIncompatible() bool {
	if x != nil && x.Incompatible != nil {
		return *x.Incompatible
	}
	return false
}

func (x *PublishedFileDetails) GetAppName() string {
	if x != nil && x.AppName != nil {
		return *x.AppName
	}
	return ""
}

func (x *PublishedFileDetails) GetFileType() uint32 {
	if x != nil && x.FileType != nil {
		return *x.FileType
	}
	return 0
}

func (x *PublishedFileDetails) GetCanSubscribe() bool {
	if x != nil && x.CanSubscribe != nil {
		return *x.CanSubscribe
	}
	return false
}

func (x *PublishedFileDetails) GetSubscriptions() uint32 {
	if x != nil && x.Subscriptions != nil {
		return *x.Subscriptions
	}
	return 0
}

func (x *PublishedFileDetails) GetFavorited() uint32 {
	if x != nil && x.Favorited != nil {
		return *x.Favorited
	}
	return 0
}

func (x *PublishedFileDetails) GetFollowers() uint32 {
	if x != nil && x.Followers != nil {
		return *x.Followers
	}
	return 0
}

func (x *PublishedFileDetails) GetLifetimeSubscriptions() uint32 {
	if x != nil && x.LifetimeSubscriptions != nil {
		return *x.LifetimeSubscriptions
	}
	return 0
}

func (x *PublishedFileDetails) GetLifetimeFavorited() uint32 {
	if x != nil && x.LifetimeFavorited != nil {
		return *x.LifetimeFavorited
	}
	return 0
}

func (x *PublishedFileDetails) GetLifetimeFollowers() uint32 {
	if x != nil && x.LifetimeFollowers != nil {
		return *x.LifetimeFollowers
	}
	return 0
}

func (x *PublishedFileDetails) GetViews() uint32 {
	if x != nil && x.Views != nil {
		return *x.Views
	}
	return 0
}

func (x *PublishedFileDetails) GetImageWidth() uint32 {
	if x != nil && x.ImageWidth != nil {
		return *x.ImageWidth
	}
	return 0
}

func (x *PublishedFileDetails) GetImageHeight() uint32 {
	if x != nil && x.ImageHeight != nil {
		return *x.ImageHeight
	}
	return 0
}

func (x *PublishedFileDetails) GetImageUrl() string {
	if x != nil && x.ImageUrl != nil {
		return *x.ImageUrl
	}
	return ""
}

func (x *PublishedFileDetails) GetSpoilerTag() bool {
	if x != nil && x.SpoilerTag != nil {
		return *x.SpoilerTag
	}
	return false
}

func (x *PublishedFileDetails) GetShortcutid() uint32 {
	if x != nil && x.Shortcutid != nil {
		return *x.Shortcutid
	}
	return 0
}

func (x *PublishedFileDetails) GetShortcutname() string {
	if x != nil && x.Shortcutname != nil {
		return *x.Shortcutname
	}
	return ""
}

func (x *PublishedFileDetails) GetNumChildren() uint32 {
	if x != nil && x.NumChildren != nil {
		return *x.NumChildren
	}
	return 0
}

func (x *PublishedFileDetails) GetNumReports() uint32 {
	if x != nil && x.NumReports != nil {
		return *x.NumReports
	}
	return 0
}

func (x *PublishedFileDetails) GetPreviews() []*PublishedFileDetails_Preview {
	if x != nil {
		return x.Previews
	}
	return nil
}

func (x *PublishedFileDetails) GetTags() []*PublishedFileDetails_Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *PublishedFileDetails) GetChildren() []*PublishedFileDetails_Child {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *PublishedFileDetails) GetKvtags() []*PublishedFileDetails_KVTag {
	if x != nil {
		return x.Kvtags
	}
	return nil
}

func (x *PublishedFileDetails) GetVoteData() *PublishedFileDetails_VoteData {
	if x != nil {
		return x.VoteData
	}
	return nil
}

func (x *PublishedFileDetails) GetTimeSubscribed() uint32 {
	if x != nil && x.TimeSubscribed != nil {
		return *x.TimeSubscribed
	}
	return 0
}

type CPublishedFile_GetDetails_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Publishedfiledetails []*PublishedFileDetails `protobuf:"bytes,1,rep,name=publishedfiledetails" json:"publishedfiledetails,omitempty"`
}

func (x *CPublishedFile_GetDetails_Response) Reset() {
	*x = CPublishedFile_GetDetails_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_GetDetails_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_GetDetails_Response) ProtoMessage() {}

func (x *CPublishedFile_GetDetails_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_GetDetails_Response.ProtoReflect.Descriptor instead.
func (*CPublishedFile_GetDetails_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamworkssdk_proto_rawDescGZIP(), []int{8}
}

func (x *CPublishedFile_GetDetails_Response) GetPublishedfiledetails() []*PublishedFileDetails {
	if x != nil {
		return x.Publishedfiledetails
	}
	return nil
}

type CPublishedFile_GetUserFiles_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid        *uint32  `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Page         *uint32  `protobuf:"varint,3,opt,name=page" json:"page,omitempty"`
	Numperpage   *uint32  `protobuf:"varint,4,opt,name=numperpage" json:"numperpage,omitempty"`
	Sortmethod   *string  `protobuf:"bytes,6,opt,name=sortmethod" json:"sortmethod,omitempty"`
	Totalonly    *bool    `protobuf:"varint,7,opt,name=totalonly" json:"totalonly,omitempty"`
	Privacy      *uint32  `protobuf:"varint,9,opt,name=privacy" json:"privacy,omitempty"`
	IdsOnly      *bool    `protobuf:"varint,10,opt,name=ids_only,json=idsOnly" json:"ids_only,omitempty"`
	Requiredtags []string `protobuf:"bytes,11,rep,name=requiredtags" json:"requiredtags,omitempty"`
	Excludedtags []string `protobuf:"bytes,12,rep,name=excludedtags" json:"excludedtags,omitempty"`
}

func (x *CPublishedFile_GetUserFiles_Request) Reset() {
	*x = CPublishedFile_GetUserFiles_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_GetUserFiles_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_GetUserFiles_Request) ProtoMessage() {}

func (x *CPublishedFile_GetUserFiles_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_GetUserFiles_Request.ProtoReflect.Descriptor instead.
func (*CPublishedFile_GetUserFiles_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamworkssdk_proto_rawDescGZIP(), []int{9}
}

func (x *CPublishedFile_GetUserFiles_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CPublishedFile_GetUserFiles_Request) GetPage() uint32 {
	if x != nil && x.Page != nil {
		return *x.Page
	}
	return 0
}

func (x *CPublishedFile_GetUserFiles_Request) GetNumperpage() uint32 {
	if x != nil && x.Numperpage != nil {
		return *x.Numperpage
	}
	return 0
}

func (x *CPublishedFile_GetUserFiles_Request) GetSortmethod() string {
	if x != nil && x.Sortmethod != nil {
		return *x.Sortmethod
	}
	return ""
}

func (x *CPublishedFile_GetUserFiles_Request) GetTotalonly() bool {
	if x != nil && x.Totalonly != nil {
		return *x.Totalonly
	}
	return false
}

func (x *CPublishedFile_GetUserFiles_Request) GetPrivacy() uint32 {
	if x != nil && x.Privacy != nil {
		return *x.Privacy
	}
	return 0
}

func (x *CPublishedFile_GetUserFiles_Request) GetIdsOnly() bool {
	if x != nil && x.IdsOnly != nil {
		return *x.IdsOnly
	}
	return false
}

func (x *CPublishedFile_GetUserFiles_Request) GetRequiredtags() []string {
	if x != nil {
		return x.Requiredtags
	}
	return nil
}

func (x *CPublishedFile_GetUserFiles_Request) GetExcludedtags() []string {
	if x != nil {
		return x.Excludedtags
	}
	return nil
}

type CPublishedFile_GetUserFiles_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total                *uint32                                     `protobuf:"varint,1,opt,name=total" json:"total,omitempty"`
	Startindex           *uint32                                     `protobuf:"varint,2,opt,name=startindex" json:"startindex,omitempty"`
	Publishedfiledetails []*PublishedFileDetails                     `protobuf:"bytes,3,rep,name=publishedfiledetails" json:"publishedfiledetails,omitempty"`
	Apps                 []*CPublishedFile_GetUserFiles_Response_App `protobuf:"bytes,4,rep,name=apps" json:"apps,omitempty"`
}

func (x *CPublishedFile_GetUserFiles_Response) Reset() {
	*x = CPublishedFile_GetUserFiles_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_GetUserFiles_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_GetUserFiles_Response) ProtoMessage() {}

func (x *CPublishedFile_GetUserFiles_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_GetUserFiles_Response.ProtoReflect.Descriptor instead.
func (*CPublishedFile_GetUserFiles_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamworkssdk_proto_rawDescGZIP(), []int{10}
}

func (x *CPublishedFile_GetUserFiles_Response) GetTotal() uint32 {
	if x != nil && x.Total != nil {
		return *x.Total
	}
	return 0
}

func (x *CPublishedFile_GetUserFiles_Response) GetStartindex() uint32 {
	if x != nil && x.Startindex != nil {
		return *x.Startindex
	}
	return 0
}

func (x *CPublishedFile_GetUserFiles_Response) GetPublishedfiledetails() []*PublishedFileDetails {
	if x != nil {
		return x.Publishedfiledetails
	}
	return nil
}

func (x *CPublishedFile_GetUserFiles_Response) GetApps() []*CPublishedFile_GetUserFiles_Response_App {
	if x != nil {
		return x.Apps
	}
	return nil
}

type CPublishedFile_Update_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid           *uint32  `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Publishedfileid *uint64  `protobuf:"fixed64,2,opt,name=publishedfileid" json:"publishedfileid,omitempty"`
	Title           *string  `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	FileDescription *string  `protobuf:"bytes,4,opt,name=file_description,json=fileDescription" json:"file_description,omitempty"`
	Visibility      *uint32  `protobuf:"varint,5,opt,name=visibility" json:"visibility,omitempty"`
	Tags            []string `protobuf:"bytes,6,rep,name=tags" json:"tags,omitempty"`
	Filename        *string  `protobuf:"bytes,7,opt,name=filename" json:"filename,omitempty"`
	PreviewFilename *string  `protobuf:"bytes,8,opt,name=preview_filename,json=previewFilename" json:"preview_filename,omitempty"`
}

func (x *CPublishedFile_Update_Request) Reset() {
	*x = CPublishedFile_Update_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_Update_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_Update_Request) ProtoMessage() {}

func (x *CPublishedFile_Update_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_Update_Request.ProtoReflect.Descriptor instead.
func (*CPublishedFile_Update_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamworkssdk_proto_rawDescGZIP(), []int{11}
}

func (x *CPublishedFile_Update_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CPublishedFile_Update_Request) GetPublishedfileid() uint64 {
	if x != nil && x.Publishedfileid != nil {
		return *x.Publishedfileid
	}
	return 0
}

func (x *CPublishedFile_Update_Request) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *CPublishedFile_Update_Request) GetFileDescription() string {
	if x != nil && x.FileDescription != nil {
		return *x.FileDescription
	}
	return ""
}

func (x *CPublishedFile_Update_Request) GetVisibility() uint32 {
	if x != nil && x.Visibility != nil {
		return *x.Visibility
	}
	return 0
}

func (x *CPublishedFile_Update_Request) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CPublishedFile_Update_Request) GetFilename() string {
	if x != nil && x.Filename != nil {
		return *x.Filename
	}
	return ""
}

func (x *CPublishedFile_Update_Request) GetPreviewFilename() string {
	if x != nil && x.PreviewFilename != nil {
		return *x.PreviewFilename
	}
	return ""
}

type CPublishedFile_Update_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CPublishedFile_Update_Response) Reset() {
	*x = CPublishedFile_Update_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_Update_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_Update_Response) ProtoMessage() {}

func (x *CPublishedFile_Update_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_Update_Response.ProtoReflect.Descriptor instead.
func (*CPublishedFile_Update_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamworkssdk_proto_rawDescGZIP(), []int{12}
}

type CPublishedFile_RefreshVotingQueue_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid            *uint32  `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	MatchingFileType *uint32  `protobuf:"varint,2,opt,name=matching_file_type,json=matchingFileType" json:"matching_file_type,omitempty"`
	Tags             []string `protobuf:"bytes,3,rep,name=tags" json:"tags,omitempty"`
	MatchAllTags     *bool    `protobuf:"varint,4,opt,name=match_all_tags,json=matchAllTags" json:"match_all_tags,omitempty"`
	ExcludedTags     []string `protobuf:"bytes,5,rep,name=excluded_tags,json=excludedTags" json:"excluded_tags,omitempty"`
	DesiredQueueSize *uint32  `protobuf:"varint,6,opt,name=desired_queue_size,json=desiredQueueSize" json:"desired_queue_size,omitempty"`
}

func (x *CPublishedFile_RefreshVotingQueue_Request) Reset() {
	*x = CPublishedFile_RefreshVotingQueue_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_RefreshVotingQueue_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_RefreshVotingQueue_Request) ProtoMessage() {}

func (x *CPublishedFile_RefreshVotingQueue_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_RefreshVotingQueue_Request.ProtoReflect.Descriptor instead.
func (*CPublishedFile_RefreshVotingQueue_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamworkssdk_proto_rawDescGZIP(), []int{13}
}

func (x *CPublishedFile_RefreshVotingQueue_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CPublishedFile_RefreshVotingQueue_Request) GetMatchingFileType() uint32 {
	if x != nil && x.MatchingFileType != nil {
		return *x.MatchingFileType
	}
	return 0
}

func (x *CPublishedFile_RefreshVotingQueue_Request) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CPublishedFile_RefreshVotingQueue_Request) GetMatchAllTags() bool {
	if x != nil && x.MatchAllTags != nil {
		return *x.MatchAllTags
	}
	return false
}

func (x *CPublishedFile_RefreshVotingQueue_Request) GetExcludedTags() []string {
	if x != nil {
		return x.ExcludedTags
	}
	return nil
}

func (x *CPublishedFile_RefreshVotingQueue_Request) GetDesiredQueueSize() uint32 {
	if x != nil && x.DesiredQueueSize != nil {
		return *x.DesiredQueueSize
	}
	return 0
}

type CPublishedFile_RefreshVotingQueue_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CPublishedFile_RefreshVotingQueue_Response) Reset() {
	*x = CPublishedFile_RefreshVotingQueue_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_RefreshVotingQueue_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_RefreshVotingQueue_Response) ProtoMessage() {}

func (x *CPublishedFile_RefreshVotingQueue_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_RefreshVotingQueue_Response.ProtoReflect.Descriptor instead.
func (*CPublishedFile_RefreshVotingQueue_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamworkssdk_proto_rawDescGZIP(), []int{14}
}

type PublishedFileDetails_Tag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tag       *string `protobuf:"bytes,1,opt,name=tag" json:"tag,omitempty"`
	Adminonly *bool   `protobuf:"varint,2,opt,name=adminonly" json:"adminonly,omitempty"`
}

func (x *PublishedFileDetails_Tag) Reset() {
	*x = PublishedFileDetails_Tag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishedFileDetails_Tag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishedFileDetails_Tag) ProtoMessage() {}

func (x *PublishedFileDetails_Tag) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishedFileDetails_Tag.ProtoReflect.Descriptor instead.
func (*PublishedFileDetails_Tag) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamworkssdk_proto_rawDescGZIP(), []int{7, 0}
}

func (x *PublishedFileDetails_Tag) GetTag() string {
	if x != nil && x.Tag != nil {
		return *x.Tag
	}
	return ""
}

func (x *PublishedFileDetails_Tag) GetAdminonly() bool {
	if x != nil && x.Adminonly != nil {
		return *x.Adminonly
	}
	return false
}

type PublishedFileDetails_Preview struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Previewid      *uint64 `protobuf:"varint,1,opt,name=previewid" json:"previewid,omitempty"`
	Sortorder      *uint32 `protobuf:"varint,2,opt,name=sortorder" json:"sortorder,omitempty"`
	Url            *string `protobuf:"bytes,3,opt,name=url" json:"url,omitempty"`
	Size           *uint32 `protobuf:"varint,4,opt,name=size" json:"size,omitempty"`
	Filename       *string `protobuf:"bytes,5,opt,name=filename" json:"filename,omitempty"`
	Youtubevideoid *string `protobuf:"bytes,6,opt,name=youtubevideoid" json:"youtubevideoid,omitempty"`
}

func (x *PublishedFileDetails_Preview) Reset() {
	*x = PublishedFileDetails_Preview{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishedFileDetails_Preview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishedFileDetails_Preview) ProtoMessage() {}

func (x *PublishedFileDetails_Preview) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishedFileDetails_Preview.ProtoReflect.Descriptor instead.
func (*PublishedFileDetails_Preview) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamworkssdk_proto_rawDescGZIP(), []int{7, 1}
}

func (x *PublishedFileDetails_Preview) GetPreviewid() uint64 {
	if x != nil && x.Previewid != nil {
		return *x.Previewid
	}
	return 0
}

func (x *PublishedFileDetails_Preview) GetSortorder() uint32 {
	if x != nil && x.Sortorder != nil {
		return *x.Sortorder
	}
	return 0
}

func (x *PublishedFileDetails_Preview) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *PublishedFileDetails_Preview) GetSize() uint32 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

func (x *PublishedFileDetails_Preview) GetFilename() string {
	if x != nil && x.Filename != nil {
		return *x.Filename
	}
	return ""
}

func (x *PublishedFileDetails_Preview) GetYoutubevideoid() string {
	if x != nil && x.Youtubevideoid != nil {
		return *x.Youtubevideoid
	}
	return ""
}

type PublishedFileDetails_Child struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Publishedfileid *uint64 `protobuf:"varint,1,opt,name=publishedfileid" json:"publishedfileid,omitempty"`
	Sortorder       *uint32 `protobuf:"varint,2,opt,name=sortorder" json:"sortorder,omitempty"`
	FileType        *uint32 `protobuf:"varint,3,opt,name=file_type,json=fileType" json:"file_type,omitempty"`
}

func (x *PublishedFileDetails_Child) Reset() {
	*x = PublishedFileDetails_Child{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishedFileDetails_Child) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishedFileDetails_Child) ProtoMessage() {}

func (x *PublishedFileDetails_Child) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishedFileDetails_Child.ProtoReflect.Descriptor instead.
func (*PublishedFileDetails_Child) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamworkssdk_proto_rawDescGZIP(), []int{7, 2}
}

func (x *PublishedFileDetails_Child) GetPublishedfileid() uint64 {
	if x != nil && x.Publishedfileid != nil {
		return *x.Publishedfileid
	}
	return 0
}

func (x *PublishedFileDetails_Child) GetSortorder() uint32 {
	if x != nil && x.Sortorder != nil {
		return *x.Sortorder
	}
	return 0
}

func (x *PublishedFileDetails_Child) GetFileType() uint32 {
	if x != nil && x.FileType != nil {
		return *x.FileType
	}
	return 0
}

type PublishedFileDetails_KVTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (x *PublishedFileDetails_KVTag) Reset() {
	*x = PublishedFileDetails_KVTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishedFileDetails_KVTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishedFileDetails_KVTag) ProtoMessage() {}

func (x *PublishedFileDetails_KVTag) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishedFileDetails_KVTag.ProtoReflect.Descriptor instead.
func (*PublishedFileDetails_KVTag) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamworkssdk_proto_rawDescGZIP(), []int{7, 3}
}

func (x *PublishedFileDetails_KVTag) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *PublishedFileDetails_KVTag) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type PublishedFileDetails_VoteData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Score     *float32 `protobuf:"fixed32,1,opt,name=score" json:"score,omitempty"`
	VotesUp   *uint32  `protobuf:"varint,2,opt,name=votes_up,json=votesUp" json:"votes_up,omitempty"`
	VotesDown *uint32  `protobuf:"varint,3,opt,name=votes_down,json=votesDown" json:"votes_down,omitempty"`
}

func (x *PublishedFileDetails_VoteData) Reset() {
	*x = PublishedFileDetails_VoteData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishedFileDetails_VoteData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishedFileDetails_VoteData) ProtoMessage() {}

func (x *PublishedFileDetails_VoteData) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishedFileDetails_VoteData.ProtoReflect.Descriptor instead.
func (*PublishedFileDetails_VoteData) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamworkssdk_proto_rawDescGZIP(), []int{7, 4}
}

func (x *PublishedFileDetails_VoteData) GetScore() float32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

func (x *PublishedFileDetails_VoteData) GetVotesUp() uint32 {
	if x != nil && x.VotesUp != nil {
		return *x.VotesUp
	}
	return 0
}

func (x *PublishedFileDetails_VoteData) GetVotesDown() uint32 {
	if x != nil && x.VotesDown != nil {
		return *x.VotesDown
	}
	return 0
}

type CPublishedFile_GetUserFiles_Response_App struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid      *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Name       *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Shortcutid *uint32 `protobuf:"varint,3,opt,name=shortcutid" json:"shortcutid,omitempty"`
	Private    *bool   `protobuf:"varint,4,opt,name=private" json:"private,omitempty"`
}

func (x *CPublishedFile_GetUserFiles_Response_App) Reset() {
	*x = CPublishedFile_GetUserFiles_Response_App{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_GetUserFiles_Response_App) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_GetUserFiles_Response_App) ProtoMessage() {}

func (x *CPublishedFile_GetUserFiles_Response_App) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_GetUserFiles_Response_App.ProtoReflect.Descriptor instead.
func (*CPublishedFile_GetUserFiles_Response_App) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamworkssdk_proto_rawDescGZIP(), []int{10, 0}
}

func (x *CPublishedFile_GetUserFiles_Response_App) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CPublishedFile_GetUserFiles_Response_App) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CPublishedFile_GetUserFiles_Response_App) GetShortcutid() uint32 {
	if x != nil && x.Shortcutid != nil {
		return *x.Shortcutid
	}
	return 0
}

func (x *CPublishedFile_GetUserFiles_Response_App) GetPrivate() bool {
	if x != nil && x.Private != nil {
		return *x.Private
	}
	return false
}

var File_steammessages_publishedfile_steamworkssdk_proto protoreflect.FileDescriptor

var file_steammessages_publishedfile_steamworkssdk_proto_rawDesc = []byte{
	0x0a, 0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x04, 0x64, 0x6f, 0x74, 0x61, 0x1a, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x73, 0x64,
	0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa4, 0x01, 0x0a, 0x20, 0x43, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x66, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x66, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x22, 0x23,
	0x0a, 0x21, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65,
	0x5f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xa6, 0x01, 0x0a, 0x22, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x66, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x66, 0x69,
	0x6c, 0x65, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x22, 0x25, 0x0a, 0x23,
	0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x55,
	0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xcf, 0x04, 0x0a, 0x1e, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e,
	0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x66, 0x69, 0x6c, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x15, 0x70, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x66, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x16,
	0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x79, 0x6f,
	0x75, 0x74, 0x75, 0x62, 0x65, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a,
	0x0f, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x69, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x76, 0x69, 0x73, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x72, 0x69, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x27, 0x0a,
	0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x6e, 0x0a, 0x1f, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x66, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x66, 0x69, 0x6c, 0x65,
	0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x75,
	0x72, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x55, 0x72, 0x69, 0x22, 0xd0, 0x02, 0x0a, 0x21, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x66, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x06, 0x52, 0x10, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x66, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x74, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x74, 0x61, 0x67, 0x73, 0x12, 0x3c, 0x0a, 0x19, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x70, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65,
	0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x6b, 0x76, 0x74, 0x61,
	0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x6b, 0x76, 0x74, 0x61, 0x67, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x73,
	0x68, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb2, 0x14, 0x0a, 0x14, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x66, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x66, 0x69, 0x6c,
	0x65, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x70, 0x70,
	0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x72, 0x41, 0x70, 0x70, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72,
	0x53, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x55, 0x72, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x79,
	0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x69, 0x64, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x68, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0c, 0x68, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x68, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x0f, 0x68, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x69,
	0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x69, 0x73,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x76,
	0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70,
	0x46, 0x69, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70,
	0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65,
	0x64, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73,
	0x68, 0x6f, 0x77, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x6c, 0x6c, 0x12,
	0x34, 0x0a, 0x16, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f,
	0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x14, 0x6e, 0x75, 0x6d, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x44, 0x65, 0x76, 0x65,
	0x6c, 0x6f, 0x70, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x11, 0x6e, 0x75, 0x6d, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x62, 0x61, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x62, 0x61, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x06, 0x52, 0x06, 0x62, 0x61,
	0x6e, 0x6e, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x61, 0x6e, 0x5f, 0x62, 0x65, 0x5f, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x63, 0x61,
	0x6e, 0x42, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x63,
	0x61, 0x6e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x24, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x64, 0x18, 0x25,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x18, 0x26, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x12, 0x35, 0x0a,
	0x16, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x6c,
	0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x11, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69,
	0x74, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x11, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x69, 0x65, 0x77, 0x73, 0x18, 0x2a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x76, 0x69, 0x65, 0x77, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x70, 0x6f,
	0x69, 0x6c, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x73, 0x70, 0x6f, 0x69, 0x6c, 0x65, 0x72, 0x54, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x68,
	0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x69, 0x64, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x73, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x68,
	0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x31,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65,
	0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x18, 0x32, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x12, 0x3e, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x18, 0x33,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x2e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x08, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x73, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x34, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x54, 0x61, 0x67,
	0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x3c, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72,
	0x65, 0x6e, 0x18, 0x35, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x2e, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x72, 0x65, 0x6e, 0x12, 0x38, 0x0a, 0x06, 0x6b, 0x76, 0x74, 0x61, 0x67, 0x73, 0x18, 0x36,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x2e, 0x4b, 0x56, 0x54, 0x61, 0x67, 0x52, 0x06, 0x6b, 0x76, 0x74, 0x61, 0x67, 0x73, 0x12, 0x40,
	0x0a, 0x09, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x37, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x56, 0x6f,
	0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x76, 0x6f, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x64, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x1a, 0x35, 0x0a, 0x03, 0x54, 0x61, 0x67,
	0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74,
	0x61, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x6f, 0x6e, 0x6c, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x6f, 0x6e, 0x6c, 0x79,
	0x1a, 0xaf, 0x01, 0x0a, 0x07, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6f,
	0x72, 0x74, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73,
	0x6f, 0x72, 0x74, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x79, 0x6f,
	0x75, 0x74, 0x75, 0x62, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x69, 0x64, 0x1a, 0x6c, 0x0a, 0x05, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x66, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x66,
	0x69, 0x6c, 0x65, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x1a, 0x2f, 0x0a, 0x05, 0x4b, 0x56, 0x54, 0x61, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x1a, 0x5a, 0x0a, 0x08, 0x56, 0x6f, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x5f, 0x75, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x55, 0x70, 0x12, 0x1d,
	0x0a, 0x0a, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x44, 0x6f, 0x77, 0x6e, 0x22, 0x74, 0x0a,
	0x22, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f,
	0x47, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x14, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x66, 0x69, 0x6c, 0x65, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x14, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x66, 0x69, 0x6c, 0x65, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x22, 0xaa, 0x02, 0x0a, 0x23, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61,
	0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x75, 0x6d, 0x70, 0x65, 0x72, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x70, 0x65,
	0x72, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x6f, 0x6e,
	0x6c, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x6f,
	0x6e, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x12, 0x19, 0x0a,
	0x08, 0x69, 0x64, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x69, 0x64, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x74, 0x61, 0x67, 0x73, 0x12, 0x22, 0x0a, 0x0c,
	0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x74, 0x61, 0x67, 0x73,
	0x22, 0xdb, 0x02, 0x0a, 0x24, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46,
	0x69, 0x6c, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x4e, 0x0a, 0x14, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x66, 0x69, 0x6c, 0x65,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x64, 0x6f, 0x74, 0x61, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69,
	0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x14, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x66, 0x69, 0x6c, 0x65, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x42, 0x0a, 0x04, 0x61, 0x70, 0x70, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46,
	0x69, 0x6c, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x70, 0x70, 0x52, 0x04, 0x61,
	0x70, 0x70, 0x73, 0x1a, 0x69, 0x0a, 0x03, 0x41, 0x70, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70,
	0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x63,
	0x75, 0x74, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x22, 0x9b,
	0x02, 0x0a, 0x1d, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x66, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x66, 0x69, 0x6c, 0x65, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x20, 0x0a, 0x1e,
	0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xfc,
	0x01, 0x0a, 0x29, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x5f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70,
	0x69, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x61, 0x6c,
	0x6c, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x41, 0x6c, 0x6c, 0x54, 0x61, 0x67, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x12,
	0x2c, 0x0a, 0x12, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x64, 0x65, 0x73,
	0x69, 0x72, 0x65, 0x64, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x2c, 0x0a,
	0x2a, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f,
	0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xca, 0x08, 0x0a, 0x0d,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x8b, 0x01,
	0x0a, 0x09, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x26, 0x2e, 0x64, 0x6f,
	0x74, 0x61, 0x2e, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x5f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82, 0xb5,
	0x18, 0x29, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x95, 0x01, 0x0a, 0x0b,
	0x55, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x28, 0x2e, 0x64, 0x6f,
	0x74, 0x61, 0x2e, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x5f, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x55, 0x6e, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x31, 0x82, 0xb5, 0x18, 0x2d, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x66, 0x72, 0x6f, 0x6d,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x20, 0x66,
	0x69, 0x6c, 0x65, 0x12, 0x8a, 0x01, 0x0a, 0x07, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x12,
	0x24, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32, 0x82, 0xb5,
	0x18, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x73, 0x20, 0x61, 0x20, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x65, 0x64, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x20,
	0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x2e,
	0x12, 0x9a, 0x01, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x27, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e,
	0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x47,
	0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x39, 0x82, 0xb5, 0x18, 0x35, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65,
	0x73, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62,
	0x6f, 0x75, 0x74, 0x20, 0x61, 0x20, 0x73, 0x65, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x12, 0x8f, 0x01,
	0x0a, 0x0c, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x29,
	0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x64, 0x6f, 0x74, 0x61,
	0x2e, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xb5, 0x18, 0x24, 0x52, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x76, 0x65, 0x73, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x61, 0x20, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x12,
	0x84, 0x01, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x23, 0x2e, 0x64, 0x6f, 0x74,
	0x61, 0x2e, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65,
	0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x24, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0x82, 0xb5, 0x18, 0x2b, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x73, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61,
	0x62, 0x6f, 0x75, 0x74, 0x20, 0x61, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x20, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x12, 0xa2, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x2f, 0x2e,
	0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46,
	0x69, 0x6c, 0x65, 0x5f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x56, 0x6f, 0x74, 0x69, 0x6e,
	0x67, 0x51, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30,
	0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x5f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x56, 0x6f, 0x74, 0x69,
	0x6e, 0x67, 0x51, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x29, 0x82, 0xb5, 0x18, 0x25, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x71, 0x75, 0x65, 0x75, 0x65, 0x20, 0x66,
	0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x1a, 0x2b, 0x82, 0xb5, 0x18,
	0x27, 0x41, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x20, 0x66,
	0x69, 0x6c, 0x65, 0x20, 0x64, 0x61, 0x74, 0x61, 0x42, 0x25, 0x5a, 0x23, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x74, 0x61, 0x62, 0x75, 0x66, 0x66, 0x2f,
	0x6d, 0x61, 0x6e, 0x74, 0x61, 0x2f, 0x64, 0x6f, 0x74, 0x61, 0x3b, 0x64, 0x6f, 0x74, 0x61,
}

var (
	file_steammessages_publishedfile_steamworkssdk_proto_rawDescOnce sync.Once
	file_steammessages_publishedfile_steamworkssdk_proto_rawDescData = file_steammessages_publishedfile_steamworkssdk_proto_rawDesc
)

func file_steammessages_publishedfile_steamworkssdk_proto_rawDescGZIP() []byte {
	file_steammessages_publishedfile_steamworkssdk_proto_rawDescOnce.Do(func() {
		file_steammessages_publishedfile_steamworkssdk_proto_rawDescData = protoimpl.X.CompressGZIP(file_steammessages_publishedfile_steamworkssdk_proto_rawDescData)
	})
	return file_steammessages_publishedfile_steamworkssdk_proto_rawDescData
}

var file_steammessages_publishedfile_steamworkssdk_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_steammessages_publishedfile_steamworkssdk_proto_goTypes = []interface{}{
	(*CPublishedFile_Subscribe_Request)(nil),           // 0: dota.CPublishedFile_Subscribe_Request
	(*CPublishedFile_Subscribe_Response)(nil),          // 1: dota.CPublishedFile_Subscribe_Response
	(*CPublishedFile_Unsubscribe_Request)(nil),         // 2: dota.CPublishedFile_Unsubscribe_Request
	(*CPublishedFile_Unsubscribe_Response)(nil),        // 3: dota.CPublishedFile_Unsubscribe_Response
	(*CPublishedFile_Publish_Request)(nil),             // 4: dota.CPublishedFile_Publish_Request
	(*CPublishedFile_Publish_Response)(nil),            // 5: dota.CPublishedFile_Publish_Response
	(*CPublishedFile_GetDetails_Request)(nil),          // 6: dota.CPublishedFile_GetDetails_Request
	(*PublishedFileDetails)(nil),                       // 7: dota.PublishedFileDetails
	(*CPublishedFile_GetDetails_Response)(nil),         // 8: dota.CPublishedFile_GetDetails_Response
	(*CPublishedFile_GetUserFiles_Request)(nil),        // 9: dota.CPublishedFile_GetUserFiles_Request
	(*CPublishedFile_GetUserFiles_Response)(nil),       // 10: dota.CPublishedFile_GetUserFiles_Response
	(*CPublishedFile_Update_Request)(nil),              // 11: dota.CPublishedFile_Update_Request
	(*CPublishedFile_Update_Response)(nil),             // 12: dota.CPublishedFile_Update_Response
	(*CPublishedFile_RefreshVotingQueue_Request)(nil),  // 13: dota.CPublishedFile_RefreshVotingQueue_Request
	(*CPublishedFile_RefreshVotingQueue_Response)(nil), // 14: dota.CPublishedFile_RefreshVotingQueue_Response
	(*PublishedFileDetails_Tag)(nil),                   // 15: dota.PublishedFileDetails.Tag
	(*PublishedFileDetails_Preview)(nil),               // 16: dota.PublishedFileDetails.Preview
	(*PublishedFileDetails_Child)(nil),                 // 17: dota.PublishedFileDetails.Child
	(*PublishedFileDetails_KVTag)(nil),                 // 18: dota.PublishedFileDetails.KVTag
	(*PublishedFileDetails_VoteData)(nil),              // 19: dota.PublishedFileDetails.VoteData
	(*CPublishedFile_GetUserFiles_Response_App)(nil),   // 20: dota.CPublishedFile_GetUserFiles_Response.App
}
var file_steammessages_publishedfile_steamworkssdk_proto_depIdxs = []int32{
	16, // 0: dota.PublishedFileDetails.previews:type_name -> dota.PublishedFileDetails.Preview
	15, // 1: dota.PublishedFileDetails.tags:type_name -> dota.PublishedFileDetails.Tag
	17, // 2: dota.PublishedFileDetails.children:type_name -> dota.PublishedFileDetails.Child
	18, // 3: dota.PublishedFileDetails.kvtags:type_name -> dota.PublishedFileDetails.KVTag
	19, // 4: dota.PublishedFileDetails.vote_data:type_name -> dota.PublishedFileDetails.VoteData
	7,  // 5: dota.CPublishedFile_GetDetails_Response.publishedfiledetails:type_name -> dota.PublishedFileDetails
	7,  // 6: dota.CPublishedFile_GetUserFiles_Response.publishedfiledetails:type_name -> dota.PublishedFileDetails
	20, // 7: dota.CPublishedFile_GetUserFiles_Response.apps:type_name -> dota.CPublishedFile_GetUserFiles_Response.App
	0,  // 8: dota.PublishedFile.Subscribe:input_type -> dota.CPublishedFile_Subscribe_Request
	2,  // 9: dota.PublishedFile.Unsubscribe:input_type -> dota.CPublishedFile_Unsubscribe_Request
	4,  // 10: dota.PublishedFile.Publish:input_type -> dota.CPublishedFile_Publish_Request
	6,  // 11: dota.PublishedFile.GetDetails:input_type -> dota.CPublishedFile_GetDetails_Request
	9,  // 12: dota.PublishedFile.GetUserFiles:input_type -> dota.CPublishedFile_GetUserFiles_Request
	11, // 13: dota.PublishedFile.Update:input_type -> dota.CPublishedFile_Update_Request
	13, // 14: dota.PublishedFile.RefreshVotingQueue:input_type -> dota.CPublishedFile_RefreshVotingQueue_Request
	1,  // 15: dota.PublishedFile.Subscribe:output_type -> dota.CPublishedFile_Subscribe_Response
	3,  // 16: dota.PublishedFile.Unsubscribe:output_type -> dota.CPublishedFile_Unsubscribe_Response
	5,  // 17: dota.PublishedFile.Publish:output_type -> dota.CPublishedFile_Publish_Response
	8,  // 18: dota.PublishedFile.GetDetails:output_type -> dota.CPublishedFile_GetDetails_Response
	10, // 19: dota.PublishedFile.GetUserFiles:output_type -> dota.CPublishedFile_GetUserFiles_Response
	12, // 20: dota.PublishedFile.Update:output_type -> dota.CPublishedFile_Update_Response
	14, // 21: dota.PublishedFile.RefreshVotingQueue:output_type -> dota.CPublishedFile_RefreshVotingQueue_Response
	15, // [15:22] is the sub-list for method output_type
	8,  // [8:15] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_steammessages_publishedfile_steamworkssdk_proto_init() }
func file_steammessages_publishedfile_steamworkssdk_proto_init() {
	if File_steammessages_publishedfile_steamworkssdk_proto != nil {
		return
	}
	file_steammessages_unified_base_steamworkssdk_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_Subscribe_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_Subscribe_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_Unsubscribe_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_Unsubscribe_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_Publish_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_Publish_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_GetDetails_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishedFileDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_GetDetails_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_GetUserFiles_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_GetUserFiles_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_Update_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_Update_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_RefreshVotingQueue_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_RefreshVotingQueue_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishedFileDetails_Tag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishedFileDetails_Preview); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishedFileDetails_Child); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishedFileDetails_KVTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishedFileDetails_VoteData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_GetUserFiles_Response_App); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_steammessages_publishedfile_steamworkssdk_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_steammessages_publishedfile_steamworkssdk_proto_goTypes,
		DependencyIndexes: file_steammessages_publishedfile_steamworkssdk_proto_depIdxs,
		MessageInfos:      file_steammessages_publishedfile_steamworkssdk_proto_msgTypes,
	}.Build()
	File_steammessages_publishedfile_steamworkssdk_proto = out.File
	file_steammessages_publishedfile_steamworkssdk_proto_rawDesc = nil
	file_steammessages_publishedfile_steamworkssdk_proto_goTypes = nil
	file_steammessages_publishedfile_steamworkssdk_proto_depIdxs = nil
}
