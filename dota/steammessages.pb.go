// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.5
// source: steammessages.proto

package dota

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EGCPlatform int32

const (
	EGCPlatform_k_eGCPlatform_None    EGCPlatform = 0
	EGCPlatform_k_eGCPlatform_PC      EGCPlatform = 1
	EGCPlatform_k_eGCPlatform_Mac     EGCPlatform = 2
	EGCPlatform_k_eGCPlatform_Linux   EGCPlatform = 3
	EGCPlatform_k_eGCPlatform_Android EGCPlatform = 4
	EGCPlatform_k_eGCPlatform_iOS     EGCPlatform = 5
)

// Enum value maps for EGCPlatform.
var (
	EGCPlatform_name = map[int32]string{
		0: "k_eGCPlatform_None",
		1: "k_eGCPlatform_PC",
		2: "k_eGCPlatform_Mac",
		3: "k_eGCPlatform_Linux",
		4: "k_eGCPlatform_Android",
		5: "k_eGCPlatform_iOS",
	}
	EGCPlatform_value = map[string]int32{
		"k_eGCPlatform_None":    0,
		"k_eGCPlatform_PC":      1,
		"k_eGCPlatform_Mac":     2,
		"k_eGCPlatform_Linux":   3,
		"k_eGCPlatform_Android": 4,
		"k_eGCPlatform_iOS":     5,
	}
)

func (x EGCPlatform) Enum() *EGCPlatform {
	p := new(EGCPlatform)
	*p = x
	return p
}

func (x EGCPlatform) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EGCPlatform) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_proto_enumTypes[0].Descriptor()
}

func (EGCPlatform) Type() protoreflect.EnumType {
	return &file_steammessages_proto_enumTypes[0]
}

func (x EGCPlatform) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EGCPlatform) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EGCPlatform(num)
	return nil
}

// Deprecated: Use EGCPlatform.Descriptor instead.
func (EGCPlatform) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_proto_rawDescGZIP(), []int{0}
}

type GCProtoBufMsgSrc int32

const (
	GCProtoBufMsgSrc_GCProtoBufMsgSrc_Unspecified    GCProtoBufMsgSrc = 0
	GCProtoBufMsgSrc_GCProtoBufMsgSrc_FromSystem     GCProtoBufMsgSrc = 1
	GCProtoBufMsgSrc_GCProtoBufMsgSrc_FromSteamID    GCProtoBufMsgSrc = 2
	GCProtoBufMsgSrc_GCProtoBufMsgSrc_FromGC         GCProtoBufMsgSrc = 3
	GCProtoBufMsgSrc_GCProtoBufMsgSrc_ReplySystem    GCProtoBufMsgSrc = 4
	GCProtoBufMsgSrc_GCProtoBufMsgSrc_SpoofedSteamID GCProtoBufMsgSrc = 5
)

// Enum value maps for GCProtoBufMsgSrc.
var (
	GCProtoBufMsgSrc_name = map[int32]string{
		0: "GCProtoBufMsgSrc_Unspecified",
		1: "GCProtoBufMsgSrc_FromSystem",
		2: "GCProtoBufMsgSrc_FromSteamID",
		3: "GCProtoBufMsgSrc_FromGC",
		4: "GCProtoBufMsgSrc_ReplySystem",
		5: "GCProtoBufMsgSrc_SpoofedSteamID",
	}
	GCProtoBufMsgSrc_value = map[string]int32{
		"GCProtoBufMsgSrc_Unspecified":    0,
		"GCProtoBufMsgSrc_FromSystem":     1,
		"GCProtoBufMsgSrc_FromSteamID":    2,
		"GCProtoBufMsgSrc_FromGC":         3,
		"GCProtoBufMsgSrc_ReplySystem":    4,
		"GCProtoBufMsgSrc_SpoofedSteamID": 5,
	}
)

func (x GCProtoBufMsgSrc) Enum() *GCProtoBufMsgSrc {
	p := new(GCProtoBufMsgSrc)
	*p = x
	return p
}

func (x GCProtoBufMsgSrc) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GCProtoBufMsgSrc) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_proto_enumTypes[1].Descriptor()
}

func (GCProtoBufMsgSrc) Type() protoreflect.EnumType {
	return &file_steammessages_proto_enumTypes[1]
}

func (x GCProtoBufMsgSrc) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GCProtoBufMsgSrc) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GCProtoBufMsgSrc(num)
	return nil
}

// Deprecated: Use GCProtoBufMsgSrc.Descriptor instead.
func (GCProtoBufMsgSrc) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_proto_rawDescGZIP(), []int{1}
}

type CMsgProtoBufHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientSteamId    *uint64           `protobuf:"fixed64,1,opt,name=client_steam_id,json=clientSteamId" json:"client_steam_id,omitempty"`
	ClientSessionId  *int32            `protobuf:"varint,2,opt,name=client_session_id,json=clientSessionId" json:"client_session_id,omitempty"`
	SourceAppId      *uint32           `protobuf:"varint,3,opt,name=source_app_id,json=sourceAppId" json:"source_app_id,omitempty"`
	JobIdSource      *uint64           `protobuf:"fixed64,10,opt,name=job_id_source,json=jobIdSource" json:"job_id_source,omitempty"`
	JobIdTarget      *uint64           `protobuf:"fixed64,11,opt,name=job_id_target,json=jobIdTarget" json:"job_id_target,omitempty"`
	TargetJobName    *string           `protobuf:"bytes,12,opt,name=target_job_name,json=targetJobName" json:"target_job_name,omitempty"`
	Eresult          *int32            `protobuf:"varint,13,opt,name=eresult" json:"eresult,omitempty"`
	ErrorMessage     *string           `protobuf:"bytes,14,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	GcMsgSrc         *GCProtoBufMsgSrc `protobuf:"varint,200,opt,name=gc_msg_src,json=gcMsgSrc,enum=dota.GCProtoBufMsgSrc" json:"gc_msg_src,omitempty"`
	GcDirIndexSource *int32            `protobuf:"varint,201,opt,name=gc_dir_index_source,json=gcDirIndexSource" json:"gc_dir_index_source,omitempty"`
}

func (x *CMsgProtoBufHeader) Reset() {
	*x = CMsgProtoBufHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgProtoBufHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgProtoBufHeader) ProtoMessage() {}

func (x *CMsgProtoBufHeader) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgProtoBufHeader.ProtoReflect.Descriptor instead.
func (*CMsgProtoBufHeader) Descriptor() ([]byte, []int) {
	return file_steammessages_proto_rawDescGZIP(), []int{0}
}

func (x *CMsgProtoBufHeader) GetClientSteamId() uint64 {
	if x != nil && x.ClientSteamId != nil {
		return *x.ClientSteamId
	}
	return 0
}

func (x *CMsgProtoBufHeader) GetClientSessionId() int32 {
	if x != nil && x.ClientSessionId != nil {
		return *x.ClientSessionId
	}
	return 0
}

func (x *CMsgProtoBufHeader) GetSourceAppId() uint32 {
	if x != nil && x.SourceAppId != nil {
		return *x.SourceAppId
	}
	return 0
}

func (x *CMsgProtoBufHeader) GetJobIdSource() uint64 {
	if x != nil && x.JobIdSource != nil {
		return *x.JobIdSource
	}
	return 0
}

func (x *CMsgProtoBufHeader) GetJobIdTarget() uint64 {
	if x != nil && x.JobIdTarget != nil {
		return *x.JobIdTarget
	}
	return 0
}

func (x *CMsgProtoBufHeader) GetTargetJobName() string {
	if x != nil && x.TargetJobName != nil {
		return *x.TargetJobName
	}
	return ""
}

func (x *CMsgProtoBufHeader) GetEresult() int32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return 0
}

func (x *CMsgProtoBufHeader) GetErrorMessage() string {
	if x != nil && x.ErrorMessage != nil {
		return *x.ErrorMessage
	}
	return ""
}

func (x *CMsgProtoBufHeader) GetGcMsgSrc() GCProtoBufMsgSrc {
	if x != nil && x.GcMsgSrc != nil {
		return *x.GcMsgSrc
	}
	return GCProtoBufMsgSrc_GCProtoBufMsgSrc_Unspecified
}

func (x *CMsgProtoBufHeader) GetGcDirIndexSource() int32 {
	if x != nil && x.GcDirIndexSource != nil {
		return *x.GcDirIndexSource
	}
	return 0
}

type CGCSystemMsg_GetAccountDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid *uint64 `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	Appid   *uint32 `protobuf:"varint,2,opt,name=appid" json:"appid,omitempty"`
}

func (x *CGCSystemMsg_GetAccountDetails) Reset() {
	*x = CGCSystemMsg_GetAccountDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGCSystemMsg_GetAccountDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGCSystemMsg_GetAccountDetails) ProtoMessage() {}

func (x *CGCSystemMsg_GetAccountDetails) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGCSystemMsg_GetAccountDetails.ProtoReflect.Descriptor instead.
func (*CGCSystemMsg_GetAccountDetails) Descriptor() ([]byte, []int) {
	return file_steammessages_proto_rawDescGZIP(), []int{1}
}

func (x *CGCSystemMsg_GetAccountDetails) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CGCSystemMsg_GetAccountDetails) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

type CGCSystemMsg_GetAccountDetails_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EresultDeprecated      *uint32 `protobuf:"varint,1,opt,name=eresult_deprecated,json=eresultDeprecated" json:"eresult_deprecated,omitempty"`
	AccountName            *string `protobuf:"bytes,2,opt,name=account_name,json=accountName" json:"account_name,omitempty"`
	PersonaName            *string `protobuf:"bytes,3,opt,name=persona_name,json=personaName" json:"persona_name,omitempty"`
	IsProfileCreated       *bool   `protobuf:"varint,26,opt,name=is_profile_created,json=isProfileCreated" json:"is_profile_created,omitempty"`
	IsProfilePublic        *bool   `protobuf:"varint,4,opt,name=is_profile_public,json=isProfilePublic" json:"is_profile_public,omitempty"`
	IsInventoryPublic      *bool   `protobuf:"varint,5,opt,name=is_inventory_public,json=isInventoryPublic" json:"is_inventory_public,omitempty"`
	IsVacBanned            *bool   `protobuf:"varint,7,opt,name=is_vac_banned,json=isVacBanned" json:"is_vac_banned,omitempty"`
	IsCyberCafe            *bool   `protobuf:"varint,8,opt,name=is_cyber_cafe,json=isCyberCafe" json:"is_cyber_cafe,omitempty"`
	IsSchoolAccount        *bool   `protobuf:"varint,9,opt,name=is_school_account,json=isSchoolAccount" json:"is_school_account,omitempty"`
	IsLimited              *bool   `protobuf:"varint,10,opt,name=is_limited,json=isLimited" json:"is_limited,omitempty"`
	IsSubscribed           *bool   `protobuf:"varint,11,opt,name=is_subscribed,json=isSubscribed" json:"is_subscribed,omitempty"`
	Package                *uint32 `protobuf:"varint,12,opt,name=package" json:"package,omitempty"`
	IsFreeTrialAccount     *bool   `protobuf:"varint,13,opt,name=is_free_trial_account,json=isFreeTrialAccount" json:"is_free_trial_account,omitempty"`
	FreeTrialExpiration    *uint32 `protobuf:"varint,14,opt,name=free_trial_expiration,json=freeTrialExpiration" json:"free_trial_expiration,omitempty"`
	IsLowViolence          *bool   `protobuf:"varint,15,opt,name=is_low_violence,json=isLowViolence" json:"is_low_violence,omitempty"`
	IsAccountLockedDown    *bool   `protobuf:"varint,16,opt,name=is_account_locked_down,json=isAccountLockedDown" json:"is_account_locked_down,omitempty"`
	IsCommunityBanned      *bool   `protobuf:"varint,17,opt,name=is_community_banned,json=isCommunityBanned" json:"is_community_banned,omitempty"`
	IsTradeBanned          *bool   `protobuf:"varint,18,opt,name=is_trade_banned,json=isTradeBanned" json:"is_trade_banned,omitempty"`
	TradeBanExpiration     *uint32 `protobuf:"varint,19,opt,name=trade_ban_expiration,json=tradeBanExpiration" json:"trade_ban_expiration,omitempty"`
	Accountid              *uint32 `protobuf:"varint,20,opt,name=accountid" json:"accountid,omitempty"`
	SuspensionEndTime      *uint32 `protobuf:"varint,21,opt,name=suspension_end_time,json=suspensionEndTime" json:"suspension_end_time,omitempty"`
	Currency               *string `protobuf:"bytes,22,opt,name=currency" json:"currency,omitempty"`
	SteamLevel             *uint32 `protobuf:"varint,23,opt,name=steam_level,json=steamLevel" json:"steam_level,omitempty"`
	FriendCount            *uint32 `protobuf:"varint,24,opt,name=friend_count,json=friendCount" json:"friend_count,omitempty"`
	AccountCreationTime    *uint32 `protobuf:"varint,25,opt,name=account_creation_time,json=accountCreationTime" json:"account_creation_time,omitempty"`
	IsSteamguardEnabled    *bool   `protobuf:"varint,27,opt,name=is_steamguard_enabled,json=isSteamguardEnabled" json:"is_steamguard_enabled,omitempty"`
	IsPhoneVerified        *bool   `protobuf:"varint,28,opt,name=is_phone_verified,json=isPhoneVerified" json:"is_phone_verified,omitempty"`
	IsTwoFactorAuthEnabled *bool   `protobuf:"varint,29,opt,name=is_two_factor_auth_enabled,json=isTwoFactorAuthEnabled" json:"is_two_factor_auth_enabled,omitempty"`
	TwoFactorEnabledTime   *uint32 `protobuf:"varint,30,opt,name=two_factor_enabled_time,json=twoFactorEnabledTime" json:"two_factor_enabled_time,omitempty"`
	PhoneVerificationTime  *uint32 `protobuf:"varint,31,opt,name=phone_verification_time,json=phoneVerificationTime" json:"phone_verification_time,omitempty"`
	PhoneId                *uint64 `protobuf:"varint,33,opt,name=phone_id,json=phoneId" json:"phone_id,omitempty"`
	IsPhoneIdentifying     *bool   `protobuf:"varint,34,opt,name=is_phone_identifying,json=isPhoneIdentifying" json:"is_phone_identifying,omitempty"`
	RtIdentityLinked       *uint32 `protobuf:"varint,35,opt,name=rt_identity_linked,json=rtIdentityLinked" json:"rt_identity_linked,omitempty"`
	RtBirthDate            *uint32 `protobuf:"varint,36,opt,name=rt_birth_date,json=rtBirthDate" json:"rt_birth_date,omitempty"`
	TxnCountryCode         *string `protobuf:"bytes,37,opt,name=txn_country_code,json=txnCountryCode" json:"txn_country_code,omitempty"`
	HasAcceptedChinaSsa    *bool   `protobuf:"varint,38,opt,name=has_accepted_china_ssa,json=hasAcceptedChinaSsa" json:"has_accepted_china_ssa,omitempty"`
	IsBannedSteamChina     *bool   `protobuf:"varint,39,opt,name=is_banned_steam_china,json=isBannedSteamChina" json:"is_banned_steam_china,omitempty"`
}

func (x *CGCSystemMsg_GetAccountDetails_Response) Reset() {
	*x = CGCSystemMsg_GetAccountDetails_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGCSystemMsg_GetAccountDetails_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGCSystemMsg_GetAccountDetails_Response) ProtoMessage() {}

func (x *CGCSystemMsg_GetAccountDetails_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGCSystemMsg_GetAccountDetails_Response.ProtoReflect.Descriptor instead.
func (*CGCSystemMsg_GetAccountDetails_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_proto_rawDescGZIP(), []int{2}
}

func (x *CGCSystemMsg_GetAccountDetails_Response) GetEresultDeprecated() uint32 {
	if x != nil && x.EresultDeprecated != nil {
		return *x.EresultDeprecated
	}
	return 0
}

func (x *CGCSystemMsg_GetAccountDetails_Response) GetAccountName() string {
	if x != nil && x.AccountName != nil {
		return *x.AccountName
	}
	return ""
}

func (x *CGCSystemMsg_GetAccountDetails_Response) GetPersonaName() string {
	if x != nil && x.PersonaName != nil {
		return *x.PersonaName
	}
	return ""
}

func (x *CGCSystemMsg_GetAccountDetails_Response) GetIsProfileCreated() bool {
	if x != nil && x.IsProfileCreated != nil {
		return *x.IsProfileCreated
	}
	return false
}

func (x *CGCSystemMsg_GetAccountDetails_Response) GetIsProfilePublic() bool {
	if x != nil && x.IsProfilePublic != nil {
		return *x.IsProfilePublic
	}
	return false
}

func (x *CGCSystemMsg_GetAccountDetails_Response) GetIsInventoryPublic() bool {
	if x != nil && x.IsInventoryPublic != nil {
		return *x.IsInventoryPublic
	}
	return false
}

func (x *CGCSystemMsg_GetAccountDetails_Response) GetIsVacBanned() bool {
	if x != nil && x.IsVacBanned != nil {
		return *x.IsVacBanned
	}
	return false
}

func (x *CGCSystemMsg_GetAccountDetails_Response) GetIsCyberCafe() bool {
	if x != nil && x.IsCyberCafe != nil {
		return *x.IsCyberCafe
	}
	return false
}

func (x *CGCSystemMsg_GetAccountDetails_Response) GetIsSchoolAccount() bool {
	if x != nil && x.IsSchoolAccount != nil {
		return *x.IsSchoolAccount
	}
	return false
}

func (x *CGCSystemMsg_GetAccountDetails_Response) GetIsLimited() bool {
	if x != nil && x.IsLimited != nil {
		return *x.IsLimited
	}
	return false
}

func (x *CGCSystemMsg_GetAccountDetails_Response) GetIsSubscribed() bool {
	if x != nil && x.IsSubscribed != nil {
		return *x.IsSubscribed
	}
	return false
}

func (x *CGCSystemMsg_GetAccountDetails_Response) GetPackage() uint32 {
	if x != nil && x.Package != nil {
		return *x.Package
	}
	return 0
}

func (x *CGCSystemMsg_GetAccountDetails_Response) GetIsFreeTrialAccount() bool {
	if x != nil && x.IsFreeTrialAccount != nil {
		return *x.IsFreeTrialAccount
	}
	return false
}

func (x *CGCSystemMsg_GetAccountDetails_Response) GetFreeTrialExpiration() uint32 {
	if x != nil && x.FreeTrialExpiration != nil {
		return *x.FreeTrialExpiration
	}
	return 0
}

func (x *CGCSystemMsg_GetAccountDetails_Response) GetIsLowViolence() bool {
	if x != nil && x.IsLowViolence != nil {
		return *x.IsLowViolence
	}
	return false
}

func (x *CGCSystemMsg_GetAccountDetails_Response) GetIsAccountLockedDown() bool {
	if x != nil && x.IsAccountLockedDown != nil {
		return *x.IsAccountLockedDown
	}
	return false
}

func (x *CGCSystemMsg_GetAccountDetails_Response) GetIsCommunityBanned() bool {
	if x != nil && x.IsCommunityBanned != nil {
		return *x.IsCommunityBanned
	}
	return false
}

func (x *CGCSystemMsg_GetAccountDetails_Response) GetIsTradeBanned() bool {
	if x != nil && x.IsTradeBanned != nil {
		return *x.IsTradeBanned
	}
	return false
}

func (x *CGCSystemMsg_GetAccountDetails_Response) GetTradeBanExpiration() uint32 {
	if x != nil && x.TradeBanExpiration != nil {
		return *x.TradeBanExpiration
	}
	return 0
}

func (x *CGCSystemMsg_GetAccountDetails_Response) GetAccountid() uint32 {
	if x != nil && x.Accountid != nil {
		return *x.Accountid
	}
	return 0
}

func (x *CGCSystemMsg_GetAccountDetails_Response) GetSuspensionEndTime() uint32 {
	if x != nil && x.SuspensionEndTime != nil {
		return *x.SuspensionEndTime
	}
	return 0
}

func (x *CGCSystemMsg_GetAccountDetails_Response) GetCurrency() string {
	if x != nil && x.Currency != nil {
		return *x.Currency
	}
	return ""
}

func (x *CGCSystemMsg_GetAccountDetails_Response) GetSteamLevel() uint32 {
	if x != nil && x.SteamLevel != nil {
		return *x.SteamLevel
	}
	return 0
}

func (x *CGCSystemMsg_GetAccountDetails_Response) GetFriendCount() uint32 {
	if x != nil && x.FriendCount != nil {
		return *x.FriendCount
	}
	return 0
}

func (x *CGCSystemMsg_GetAccountDetails_Response) GetAccountCreationTime() uint32 {
	if x != nil && x.AccountCreationTime != nil {
		return *x.AccountCreationTime
	}
	return 0
}

func (x *CGCSystemMsg_GetAccountDetails_Response) GetIsSteamguardEnabled() bool {
	if x != nil && x.IsSteamguardEnabled != nil {
		return *x.IsSteamguardEnabled
	}
	return false
}

func (x *CGCSystemMsg_GetAccountDetails_Response) GetIsPhoneVerified() bool {
	if x != nil && x.IsPhoneVerified != nil {
		return *x.IsPhoneVerified
	}
	return false
}

func (x *CGCSystemMsg_GetAccountDetails_Response) GetIsTwoFactorAuthEnabled() bool {
	if x != nil && x.IsTwoFactorAuthEnabled != nil {
		return *x.IsTwoFactorAuthEnabled
	}
	return false
}

func (x *CGCSystemMsg_GetAccountDetails_Response) GetTwoFactorEnabledTime() uint32 {
	if x != nil && x.TwoFactorEnabledTime != nil {
		return *x.TwoFactorEnabledTime
	}
	return 0
}

func (x *CGCSystemMsg_GetAccountDetails_Response) GetPhoneVerificationTime() uint32 {
	if x != nil && x.PhoneVerificationTime != nil {
		return *x.PhoneVerificationTime
	}
	return 0
}

func (x *CGCSystemMsg_GetAccountDetails_Response) GetPhoneId() uint64 {
	if x != nil && x.PhoneId != nil {
		return *x.PhoneId
	}
	return 0
}

func (x *CGCSystemMsg_GetAccountDetails_Response) GetIsPhoneIdentifying() bool {
	if x != nil && x.IsPhoneIdentifying != nil {
		return *x.IsPhoneIdentifying
	}
	return false
}

func (x *CGCSystemMsg_GetAccountDetails_Response) GetRtIdentityLinked() uint32 {
	if x != nil && x.RtIdentityLinked != nil {
		return *x.RtIdentityLinked
	}
	return 0
}

func (x *CGCSystemMsg_GetAccountDetails_Response) GetRtBirthDate() uint32 {
	if x != nil && x.RtBirthDate != nil {
		return *x.RtBirthDate
	}
	return 0
}

func (x *CGCSystemMsg_GetAccountDetails_Response) GetTxnCountryCode() string {
	if x != nil && x.TxnCountryCode != nil {
		return *x.TxnCountryCode
	}
	return ""
}

func (x *CGCSystemMsg_GetAccountDetails_Response) GetHasAcceptedChinaSsa() bool {
	if x != nil && x.HasAcceptedChinaSsa != nil {
		return *x.HasAcceptedChinaSsa
	}
	return false
}

func (x *CGCSystemMsg_GetAccountDetails_Response) GetIsBannedSteamChina() bool {
	if x != nil && x.IsBannedSteamChina != nil {
		return *x.IsBannedSteamChina
	}
	return false
}

type CIPLocationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip        *uint32  `protobuf:"varint,1,opt,name=ip" json:"ip,omitempty"`
	Latitude  *float32 `protobuf:"fixed32,2,opt,name=latitude" json:"latitude,omitempty"`
	Longitude *float32 `protobuf:"fixed32,3,opt,name=longitude" json:"longitude,omitempty"`
	Country   *string  `protobuf:"bytes,4,opt,name=country" json:"country,omitempty"`
	State     *string  `protobuf:"bytes,5,opt,name=state" json:"state,omitempty"`
	City      *string  `protobuf:"bytes,6,opt,name=city" json:"city,omitempty"`
}

func (x *CIPLocationInfo) Reset() {
	*x = CIPLocationInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CIPLocationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CIPLocationInfo) ProtoMessage() {}

func (x *CIPLocationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CIPLocationInfo.ProtoReflect.Descriptor instead.
func (*CIPLocationInfo) Descriptor() ([]byte, []int) {
	return file_steammessages_proto_rawDescGZIP(), []int{3}
}

func (x *CIPLocationInfo) GetIp() uint32 {
	if x != nil && x.Ip != nil {
		return *x.Ip
	}
	return 0
}

func (x *CIPLocationInfo) GetLatitude() float32 {
	if x != nil && x.Latitude != nil {
		return *x.Latitude
	}
	return 0
}

func (x *CIPLocationInfo) GetLongitude() float32 {
	if x != nil && x.Longitude != nil {
		return *x.Longitude
	}
	return 0
}

func (x *CIPLocationInfo) GetCountry() string {
	if x != nil && x.Country != nil {
		return *x.Country
	}
	return ""
}

func (x *CIPLocationInfo) GetState() string {
	if x != nil && x.State != nil {
		return *x.State
	}
	return ""
}

func (x *CIPLocationInfo) GetCity() string {
	if x != nil && x.City != nil {
		return *x.City
	}
	return ""
}

type CGCMsgGetIPLocationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*CIPLocationInfo `protobuf:"bytes,1,rep,name=infos" json:"infos,omitempty"`
}

func (x *CGCMsgGetIPLocationResponse) Reset() {
	*x = CGCMsgGetIPLocationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGCMsgGetIPLocationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGCMsgGetIPLocationResponse) ProtoMessage() {}

func (x *CGCMsgGetIPLocationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGCMsgGetIPLocationResponse.ProtoReflect.Descriptor instead.
func (*CGCMsgGetIPLocationResponse) Descriptor() ([]byte, []int) {
	return file_steammessages_proto_rawDescGZIP(), []int{4}
}

func (x *CGCMsgGetIPLocationResponse) GetInfos() []*CIPLocationInfo {
	if x != nil {
		return x.Infos
	}
	return nil
}

var file_steammessages_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         60000,
		Name:          "dota.key_field",
		Tag:           "varint,60000,opt,name=key_field",
		Filename:      "steammessages.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MessageOptions)(nil),
		ExtensionType: (*int32)(nil),
		Field:         60000,
		Name:          "dota.msgpool_soft_limit",
		Tag:           "varint,60000,opt,name=msgpool_soft_limit",
		Filename:      "steammessages.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MessageOptions)(nil),
		ExtensionType: (*int32)(nil),
		Field:         60001,
		Name:          "dota.msgpool_hard_limit",
		Tag:           "varint,60001,opt,name=msgpool_hard_limit",
		Filename:      "steammessages.proto",
	},
}

// Extension fields to descriptorpb.FieldOptions.
var (
	// optional bool key_field = 60000;
	E_KeyField = &file_steammessages_proto_extTypes[0]
)

// Extension fields to descriptorpb.MessageOptions.
var (
	// optional int32 msgpool_soft_limit = 60000;
	E_MsgpoolSoftLimit = &file_steammessages_proto_extTypes[1]
	// optional int32 msgpool_hard_limit = 60001;
	E_MsgpoolHardLimit = &file_steammessages_proto_extTypes[2]
)

var File_steammessages_proto protoreflect.FileDescriptor

var file_steammessages_proto_rawDesc = []byte{
	0x0a, 0x13, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x64, 0x6f, 0x74, 0x61, 0x1a, 0x20, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xae, 0x03,
	0x0a, 0x12, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x75, 0x66, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0d, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d,
	0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x0b, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x22, 0x0a, 0x0d, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0b, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6a,
	0x6f, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x67,
	0x63, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x73, 0x72, 0x63, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x47, 0x43, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42,
	0x75, 0x66, 0x4d, 0x73, 0x67, 0x53, 0x72, 0x63, 0x52, 0x08, 0x67, 0x63, 0x4d, 0x73, 0x67, 0x53,
	0x72, 0x63, 0x12, 0x2e, 0x0a, 0x13, 0x67, 0x63, 0x5f, 0x64, 0x69, 0x72, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x10, 0x67, 0x63, 0x44, 0x69, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x3a, 0x0a, 0x80, 0xa6, 0x1d, 0x80, 0x02, 0x88, 0xa6, 0x1d, 0x80, 0x08, 0x22, 0x5c,
	0x0a, 0x1e, 0x43, 0x47, 0x43, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x73, 0x67, 0x5f, 0x47,
	0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70,
	0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64,
	0x3a, 0x0a, 0x80, 0xa6, 0x1d, 0x80, 0x01, 0x88, 0xa6, 0x1d, 0x80, 0x04, 0x22, 0xf2, 0x0c, 0x0a,
	0x27, 0x43, 0x47, 0x43, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x73, 0x67, 0x5f, 0x47, 0x65,
	0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x65, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x5f, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x44, 0x65, 0x70,
	0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a,
	0x12, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x69,
	0x73, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x76, 0x61,
	0x63, 0x5f, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x69, 0x73, 0x56, 0x61, 0x63, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x69,
	0x73, 0x5f, 0x63, 0x79, 0x62, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x66, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x43, 0x79, 0x62, 0x65, 0x72, 0x43, 0x61, 0x66, 0x65, 0x12,
	0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x53, 0x63,
	0x68, 0x6f, 0x6f, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x69, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73,
	0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x69, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x69, 0x73, 0x5f,
	0x66, 0x72, 0x65, 0x65, 0x5f, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x73, 0x46, 0x72, 0x65, 0x65,
	0x54, 0x72, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x15,
	0x66, 0x72, 0x65, 0x65, 0x5f, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x66, 0x72, 0x65,
	0x65, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x6c, 0x6f, 0x77, 0x5f, 0x76, 0x69, 0x6f, 0x6c, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x4c, 0x6f, 0x77,
	0x56, 0x69, 0x6f, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x69, 0x73, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x64, 0x6f,
	0x77, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x73, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x44, 0x6f, 0x77, 0x6e, 0x12, 0x2e, 0x0a,
	0x13, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x62, 0x61,
	0x6e, 0x6e, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x43, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x12, 0x26, 0x0a,
	0x0f, 0x69, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x54, 0x72, 0x61, 0x64, 0x65, 0x42,
	0x61, 0x6e, 0x6e, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x62,
	0x61, 0x6e, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x12, 0x74, 0x72, 0x61, 0x64, 0x65, 0x42, 0x61, 0x6e, 0x45, 0x78, 0x70,
	0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x11, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x73, 0x5f,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x67, 0x75, 0x61, 0x72, 0x64, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x73, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x67, 0x75, 0x61, 0x72, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2a, 0x0a,
	0x11, 0x69, 0x73, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x1a, 0x69, 0x73, 0x5f,
	0x74, 0x77, 0x6f, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x69,
	0x73, 0x54, 0x77, 0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x75, 0x74, 0x68, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x74, 0x77, 0x6f, 0x5f, 0x66, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x74, 0x77, 0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x17,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x21, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x12,
	0x30, 0x0a, 0x14, 0x69, 0x73, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x18, 0x22, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69,
	0x73, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x79, 0x69, 0x6e,
	0x67, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x72,
	0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x12,
	0x22, 0x0a, 0x0d, 0x72, 0x74, 0x5f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x24, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x74, 0x42, 0x69, 0x72, 0x74, 0x68, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x78, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74,
	0x78, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x33, 0x0a,
	0x16, 0x68, 0x61, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x68,
	0x69, 0x6e, 0x61, 0x5f, 0x73, 0x73, 0x61, 0x18, 0x26, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x68,
	0x61, 0x73, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x43, 0x68, 0x69, 0x6e, 0x61, 0x53,
	0x73, 0x61, 0x12, 0x31, 0x0a, 0x15, 0x69, 0x73, 0x5f, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x68, 0x69, 0x6e, 0x61, 0x18, 0x27, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x12, 0x69, 0x73, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x43, 0x68, 0x69, 0x6e, 0x61, 0x3a, 0x0a, 0x80, 0xa6, 0x1d, 0x80, 0x01, 0x88, 0xa6, 0x1d, 0x80,
	0x04, 0x22, 0x9f, 0x01, 0x0a, 0x0f, 0x43, 0x49, 0x50, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x69, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x69, 0x74, 0x79, 0x22, 0x4a, 0x0a, 0x1b, 0x43, 0x47, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x65, 0x74,
	0x49, 0x50, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x49, 0x50, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x2a,
	0x9d, 0x01, 0x0a, 0x0b, 0x45, 0x47, 0x43, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12,
	0x16, 0x0a, 0x12, 0x6b, 0x5f, 0x65, 0x47, 0x43, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x47, 0x43,
	0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x50, 0x43, 0x10, 0x01, 0x12, 0x15, 0x0a,
	0x11, 0x6b, 0x5f, 0x65, 0x47, 0x43, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x4d,
	0x61, 0x63, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x6b, 0x5f, 0x65, 0x47, 0x43, 0x50, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x4c, 0x69, 0x6e, 0x75, 0x78, 0x10, 0x03, 0x12, 0x19, 0x0a,
	0x15, 0x6b, 0x5f, 0x65, 0x47, 0x43, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x41,
	0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x65, 0x47,
	0x43, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x4f, 0x53, 0x10, 0x05, 0x2a,
	0xdb, 0x01, 0x0a, 0x10, 0x47, 0x43, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x75, 0x66, 0x4d, 0x73,
	0x67, 0x53, 0x72, 0x63, 0x12, 0x20, 0x0a, 0x1c, 0x47, 0x43, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42,
	0x75, 0x66, 0x4d, 0x73, 0x67, 0x53, 0x72, 0x63, 0x5f, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x47, 0x43, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x42, 0x75, 0x66, 0x4d, 0x73, 0x67, 0x53, 0x72, 0x63, 0x5f, 0x46, 0x72, 0x6f, 0x6d, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x47, 0x43, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x42, 0x75, 0x66, 0x4d, 0x73, 0x67, 0x53, 0x72, 0x63, 0x5f, 0x46, 0x72, 0x6f, 0x6d,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x47, 0x43, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x42, 0x75, 0x66, 0x4d, 0x73, 0x67, 0x53, 0x72, 0x63, 0x5f, 0x46, 0x72,
	0x6f, 0x6d, 0x47, 0x43, 0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x47, 0x43, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x42, 0x75, 0x66, 0x4d, 0x73, 0x67, 0x53, 0x72, 0x63, 0x5f, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x10, 0x04, 0x12, 0x23, 0x0a, 0x1f, 0x47, 0x43, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x42, 0x75, 0x66, 0x4d, 0x73, 0x67, 0x53, 0x72, 0x63, 0x5f, 0x53, 0x70, 0x6f,
	0x6f, 0x66, 0x65, 0x64, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x10, 0x05, 0x3a, 0x3c, 0x0a,
	0x09, 0x6b, 0x65, 0x79, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xe0, 0xd4, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x3a, 0x4f, 0x0a, 0x12, 0x6d,
	0x73, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x73, 0x6f, 0x66, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0xe0, 0xd4, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6d, 0x73, 0x67, 0x70,
	0x6f, 0x6f, 0x6c, 0x53, 0x6f, 0x66, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x3a, 0x4f, 0x0a, 0x12,
	0x6d, 0x73, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0xe1, 0xd4, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6d, 0x73, 0x67,
	0x70, 0x6f, 0x6f, 0x6c, 0x48, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x25, 0x5a,
	0x23, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x74, 0x61,
	0x62, 0x75, 0x66, 0x66, 0x2f, 0x6d, 0x61, 0x6e, 0x74, 0x61, 0x2f, 0x64, 0x6f, 0x74, 0x61, 0x3b,
	0x64, 0x6f, 0x74, 0x61,
}

var (
	file_steammessages_proto_rawDescOnce sync.Once
	file_steammessages_proto_rawDescData = file_steammessages_proto_rawDesc
)

func file_steammessages_proto_rawDescGZIP() []byte {
	file_steammessages_proto_rawDescOnce.Do(func() {
		file_steammessages_proto_rawDescData = protoimpl.X.CompressGZIP(file_steammessages_proto_rawDescData)
	})
	return file_steammessages_proto_rawDescData
}

var file_steammessages_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_steammessages_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_steammessages_proto_goTypes = []interface{}{
	(EGCPlatform)(0),                                // 0: dota.EGCPlatform
	(GCProtoBufMsgSrc)(0),                           // 1: dota.GCProtoBufMsgSrc
	(*CMsgProtoBufHeader)(nil),                      // 2: dota.CMsgProtoBufHeader
	(*CGCSystemMsg_GetAccountDetails)(nil),          // 3: dota.CGCSystemMsg_GetAccountDetails
	(*CGCSystemMsg_GetAccountDetails_Response)(nil), // 4: dota.CGCSystemMsg_GetAccountDetails_Response
	(*CIPLocationInfo)(nil),                         // 5: dota.CIPLocationInfo
	(*CGCMsgGetIPLocationResponse)(nil),             // 6: dota.CGCMsgGetIPLocationResponse
	(*descriptorpb.FieldOptions)(nil),               // 7: google.protobuf.FieldOptions
	(*descriptorpb.MessageOptions)(nil),             // 8: google.protobuf.MessageOptions
}
var file_steammessages_proto_depIdxs = []int32{
	1, // 0: dota.CMsgProtoBufHeader.gc_msg_src:type_name -> dota.GCProtoBufMsgSrc
	5, // 1: dota.CGCMsgGetIPLocationResponse.infos:type_name -> dota.CIPLocationInfo
	7, // 2: dota.key_field:extendee -> google.protobuf.FieldOptions
	8, // 3: dota.msgpool_soft_limit:extendee -> google.protobuf.MessageOptions
	8, // 4: dota.msgpool_hard_limit:extendee -> google.protobuf.MessageOptions
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	2, // [2:5] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_steammessages_proto_init() }
func file_steammessages_proto_init() {
	if File_steammessages_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_steammessages_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgProtoBufHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CGCSystemMsg_GetAccountDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CGCSystemMsg_GetAccountDetails_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CIPLocationInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CGCMsgGetIPLocationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_steammessages_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   5,
			NumExtensions: 3,
			NumServices:   0,
		},
		GoTypes:           file_steammessages_proto_goTypes,
		DependencyIndexes: file_steammessages_proto_depIdxs,
		EnumInfos:         file_steammessages_proto_enumTypes,
		MessageInfos:      file_steammessages_proto_msgTypes,
		ExtensionInfos:    file_steammessages_proto_extTypes,
	}.Build()
	File_steammessages_proto = out.File
	file_steammessages_proto_rawDesc = nil
	file_steammessages_proto_goTypes = nil
	file_steammessages_proto_depIdxs = nil
}
