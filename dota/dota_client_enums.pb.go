// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.6.1
// source: dota_client_enums.proto

package dota

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ETournamentTemplate int32

const (
	ETournamentTemplate_k_ETournamentTemplate_None          ETournamentTemplate = 0
	ETournamentTemplate_k_ETournamentTemplate_AutomatedWin3 ETournamentTemplate = 1
)

// Enum value maps for ETournamentTemplate.
var (
	ETournamentTemplate_name = map[int32]string{
		0: "k_ETournamentTemplate_None",
		1: "k_ETournamentTemplate_AutomatedWin3",
	}
	ETournamentTemplate_value = map[string]int32{
		"k_ETournamentTemplate_None":          0,
		"k_ETournamentTemplate_AutomatedWin3": 1,
	}
)

func (x ETournamentTemplate) Enum() *ETournamentTemplate {
	p := new(ETournamentTemplate)
	*p = x
	return p
}

func (x ETournamentTemplate) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ETournamentTemplate) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_client_enums_proto_enumTypes[0].Descriptor()
}

func (ETournamentTemplate) Type() protoreflect.EnumType {
	return &file_dota_client_enums_proto_enumTypes[0]
}

func (x ETournamentTemplate) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ETournamentTemplate) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ETournamentTemplate(num)
	return nil
}

// Deprecated: Use ETournamentTemplate.Descriptor instead.
func (ETournamentTemplate) EnumDescriptor() ([]byte, []int) {
	return file_dota_client_enums_proto_rawDescGZIP(), []int{0}
}

type ETournamentGameState int32

const (
	ETournamentGameState_k_ETournamentGameState_Unknown              ETournamentGameState = 0
	ETournamentGameState_k_ETournamentGameState_Canceled             ETournamentGameState = 1
	ETournamentGameState_k_ETournamentGameState_Scheduled            ETournamentGameState = 2
	ETournamentGameState_k_ETournamentGameState_Active               ETournamentGameState = 3
	ETournamentGameState_k_ETournamentGameState_RadVictory           ETournamentGameState = 20
	ETournamentGameState_k_ETournamentGameState_DireVictory          ETournamentGameState = 21
	ETournamentGameState_k_ETournamentGameState_RadVictoryByForfeit  ETournamentGameState = 22
	ETournamentGameState_k_ETournamentGameState_DireVictoryByForfeit ETournamentGameState = 23
	ETournamentGameState_k_ETournamentGameState_ServerFailure        ETournamentGameState = 40
	ETournamentGameState_k_ETournamentGameState_NotNeeded            ETournamentGameState = 41
)

// Enum value maps for ETournamentGameState.
var (
	ETournamentGameState_name = map[int32]string{
		0:  "k_ETournamentGameState_Unknown",
		1:  "k_ETournamentGameState_Canceled",
		2:  "k_ETournamentGameState_Scheduled",
		3:  "k_ETournamentGameState_Active",
		20: "k_ETournamentGameState_RadVictory",
		21: "k_ETournamentGameState_DireVictory",
		22: "k_ETournamentGameState_RadVictoryByForfeit",
		23: "k_ETournamentGameState_DireVictoryByForfeit",
		40: "k_ETournamentGameState_ServerFailure",
		41: "k_ETournamentGameState_NotNeeded",
	}
	ETournamentGameState_value = map[string]int32{
		"k_ETournamentGameState_Unknown":              0,
		"k_ETournamentGameState_Canceled":             1,
		"k_ETournamentGameState_Scheduled":            2,
		"k_ETournamentGameState_Active":               3,
		"k_ETournamentGameState_RadVictory":           20,
		"k_ETournamentGameState_DireVictory":          21,
		"k_ETournamentGameState_RadVictoryByForfeit":  22,
		"k_ETournamentGameState_DireVictoryByForfeit": 23,
		"k_ETournamentGameState_ServerFailure":        40,
		"k_ETournamentGameState_NotNeeded":            41,
	}
)

func (x ETournamentGameState) Enum() *ETournamentGameState {
	p := new(ETournamentGameState)
	*p = x
	return p
}

func (x ETournamentGameState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ETournamentGameState) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_client_enums_proto_enumTypes[1].Descriptor()
}

func (ETournamentGameState) Type() protoreflect.EnumType {
	return &file_dota_client_enums_proto_enumTypes[1]
}

func (x ETournamentGameState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ETournamentGameState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ETournamentGameState(num)
	return nil
}

// Deprecated: Use ETournamentGameState.Descriptor instead.
func (ETournamentGameState) EnumDescriptor() ([]byte, []int) {
	return file_dota_client_enums_proto_rawDescGZIP(), []int{1}
}

type ETournamentTeamState int32

const (
	ETournamentTeamState_k_ETournamentTeamState_Unknown      ETournamentTeamState = 0
	ETournamentTeamState_k_ETournamentTeamState_Node1        ETournamentTeamState = 1
	ETournamentTeamState_k_ETournamentTeamState_NodeMax      ETournamentTeamState = 1024
	ETournamentTeamState_k_ETournamentTeamState_Eliminated   ETournamentTeamState = 14003
	ETournamentTeamState_k_ETournamentTeamState_Forfeited    ETournamentTeamState = 14004
	ETournamentTeamState_k_ETournamentTeamState_Finished1st  ETournamentTeamState = 15001
	ETournamentTeamState_k_ETournamentTeamState_Finished2nd  ETournamentTeamState = 15002
	ETournamentTeamState_k_ETournamentTeamState_Finished3rd  ETournamentTeamState = 15003
	ETournamentTeamState_k_ETournamentTeamState_Finished4th  ETournamentTeamState = 15004
	ETournamentTeamState_k_ETournamentTeamState_Finished5th  ETournamentTeamState = 15005
	ETournamentTeamState_k_ETournamentTeamState_Finished6th  ETournamentTeamState = 15006
	ETournamentTeamState_k_ETournamentTeamState_Finished7th  ETournamentTeamState = 15007
	ETournamentTeamState_k_ETournamentTeamState_Finished8th  ETournamentTeamState = 15008
	ETournamentTeamState_k_ETournamentTeamState_Finished9th  ETournamentTeamState = 15009
	ETournamentTeamState_k_ETournamentTeamState_Finished10th ETournamentTeamState = 15010
	ETournamentTeamState_k_ETournamentTeamState_Finished11th ETournamentTeamState = 15011
	ETournamentTeamState_k_ETournamentTeamState_Finished12th ETournamentTeamState = 15012
	ETournamentTeamState_k_ETournamentTeamState_Finished13th ETournamentTeamState = 15013
	ETournamentTeamState_k_ETournamentTeamState_Finished14th ETournamentTeamState = 15014
	ETournamentTeamState_k_ETournamentTeamState_Finished15th ETournamentTeamState = 15015
	ETournamentTeamState_k_ETournamentTeamState_Finished16th ETournamentTeamState = 15016
)

// Enum value maps for ETournamentTeamState.
var (
	ETournamentTeamState_name = map[int32]string{
		0:     "k_ETournamentTeamState_Unknown",
		1:     "k_ETournamentTeamState_Node1",
		1024:  "k_ETournamentTeamState_NodeMax",
		14003: "k_ETournamentTeamState_Eliminated",
		14004: "k_ETournamentTeamState_Forfeited",
		15001: "k_ETournamentTeamState_Finished1st",
		15002: "k_ETournamentTeamState_Finished2nd",
		15003: "k_ETournamentTeamState_Finished3rd",
		15004: "k_ETournamentTeamState_Finished4th",
		15005: "k_ETournamentTeamState_Finished5th",
		15006: "k_ETournamentTeamState_Finished6th",
		15007: "k_ETournamentTeamState_Finished7th",
		15008: "k_ETournamentTeamState_Finished8th",
		15009: "k_ETournamentTeamState_Finished9th",
		15010: "k_ETournamentTeamState_Finished10th",
		15011: "k_ETournamentTeamState_Finished11th",
		15012: "k_ETournamentTeamState_Finished12th",
		15013: "k_ETournamentTeamState_Finished13th",
		15014: "k_ETournamentTeamState_Finished14th",
		15015: "k_ETournamentTeamState_Finished15th",
		15016: "k_ETournamentTeamState_Finished16th",
	}
	ETournamentTeamState_value = map[string]int32{
		"k_ETournamentTeamState_Unknown":      0,
		"k_ETournamentTeamState_Node1":        1,
		"k_ETournamentTeamState_NodeMax":      1024,
		"k_ETournamentTeamState_Eliminated":   14003,
		"k_ETournamentTeamState_Forfeited":    14004,
		"k_ETournamentTeamState_Finished1st":  15001,
		"k_ETournamentTeamState_Finished2nd":  15002,
		"k_ETournamentTeamState_Finished3rd":  15003,
		"k_ETournamentTeamState_Finished4th":  15004,
		"k_ETournamentTeamState_Finished5th":  15005,
		"k_ETournamentTeamState_Finished6th":  15006,
		"k_ETournamentTeamState_Finished7th":  15007,
		"k_ETournamentTeamState_Finished8th":  15008,
		"k_ETournamentTeamState_Finished9th":  15009,
		"k_ETournamentTeamState_Finished10th": 15010,
		"k_ETournamentTeamState_Finished11th": 15011,
		"k_ETournamentTeamState_Finished12th": 15012,
		"k_ETournamentTeamState_Finished13th": 15013,
		"k_ETournamentTeamState_Finished14th": 15014,
		"k_ETournamentTeamState_Finished15th": 15015,
		"k_ETournamentTeamState_Finished16th": 15016,
	}
)

func (x ETournamentTeamState) Enum() *ETournamentTeamState {
	p := new(ETournamentTeamState)
	*p = x
	return p
}

func (x ETournamentTeamState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ETournamentTeamState) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_client_enums_proto_enumTypes[2].Descriptor()
}

func (ETournamentTeamState) Type() protoreflect.EnumType {
	return &file_dota_client_enums_proto_enumTypes[2]
}

func (x ETournamentTeamState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ETournamentTeamState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ETournamentTeamState(num)
	return nil
}

// Deprecated: Use ETournamentTeamState.Descriptor instead.
func (ETournamentTeamState) EnumDescriptor() ([]byte, []int) {
	return file_dota_client_enums_proto_rawDescGZIP(), []int{2}
}

type ETournamentState int32

const (
	ETournamentState_k_ETournamentState_Unknown                     ETournamentState = 0
	ETournamentState_k_ETournamentState_CanceledByAdmin             ETournamentState = 1
	ETournamentState_k_ETournamentState_Completed                   ETournamentState = 2
	ETournamentState_k_ETournamentState_Merged                      ETournamentState = 3
	ETournamentState_k_ETournamentState_ServerFailure               ETournamentState = 4
	ETournamentState_k_ETournamentState_TeamAbandoned               ETournamentState = 5
	ETournamentState_k_ETournamentState_TeamTimeoutForfeit          ETournamentState = 6
	ETournamentState_k_ETournamentState_TeamTimeoutRefund           ETournamentState = 7
	ETournamentState_k_ETournamentState_ServerFailureGrantedVictory ETournamentState = 8
	ETournamentState_k_ETournamentState_TeamTimeoutGrantedVictory   ETournamentState = 9
	ETournamentState_k_ETournamentState_InProgress                  ETournamentState = 100
	ETournamentState_k_ETournamentState_WaitingToMerge              ETournamentState = 101
)

// Enum value maps for ETournamentState.
var (
	ETournamentState_name = map[int32]string{
		0:   "k_ETournamentState_Unknown",
		1:   "k_ETournamentState_CanceledByAdmin",
		2:   "k_ETournamentState_Completed",
		3:   "k_ETournamentState_Merged",
		4:   "k_ETournamentState_ServerFailure",
		5:   "k_ETournamentState_TeamAbandoned",
		6:   "k_ETournamentState_TeamTimeoutForfeit",
		7:   "k_ETournamentState_TeamTimeoutRefund",
		8:   "k_ETournamentState_ServerFailureGrantedVictory",
		9:   "k_ETournamentState_TeamTimeoutGrantedVictory",
		100: "k_ETournamentState_InProgress",
		101: "k_ETournamentState_WaitingToMerge",
	}
	ETournamentState_value = map[string]int32{
		"k_ETournamentState_Unknown":                     0,
		"k_ETournamentState_CanceledByAdmin":             1,
		"k_ETournamentState_Completed":                   2,
		"k_ETournamentState_Merged":                      3,
		"k_ETournamentState_ServerFailure":               4,
		"k_ETournamentState_TeamAbandoned":               5,
		"k_ETournamentState_TeamTimeoutForfeit":          6,
		"k_ETournamentState_TeamTimeoutRefund":           7,
		"k_ETournamentState_ServerFailureGrantedVictory": 8,
		"k_ETournamentState_TeamTimeoutGrantedVictory":   9,
		"k_ETournamentState_InProgress":                  100,
		"k_ETournamentState_WaitingToMerge":              101,
	}
)

func (x ETournamentState) Enum() *ETournamentState {
	p := new(ETournamentState)
	*p = x
	return p
}

func (x ETournamentState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ETournamentState) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_client_enums_proto_enumTypes[3].Descriptor()
}

func (ETournamentState) Type() protoreflect.EnumType {
	return &file_dota_client_enums_proto_enumTypes[3]
}

func (x ETournamentState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ETournamentState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ETournamentState(num)
	return nil
}

// Deprecated: Use ETournamentState.Descriptor instead.
func (ETournamentState) EnumDescriptor() ([]byte, []int) {
	return file_dota_client_enums_proto_rawDescGZIP(), []int{3}
}

type ETournamentNodeState int32

const (
	ETournamentNodeState_k_ETournamentNodeState_Unknown             ETournamentNodeState = 0
	ETournamentNodeState_k_ETournamentNodeState_Canceled            ETournamentNodeState = 1
	ETournamentNodeState_k_ETournamentNodeState_TeamsNotYetAssigned ETournamentNodeState = 2
	ETournamentNodeState_k_ETournamentNodeState_InBetweenGames      ETournamentNodeState = 3
	ETournamentNodeState_k_ETournamentNodeState_GameInProgress      ETournamentNodeState = 4
	ETournamentNodeState_k_ETournamentNodeState_A_Won               ETournamentNodeState = 5
	ETournamentNodeState_k_ETournamentNodeState_B_Won               ETournamentNodeState = 6
	ETournamentNodeState_k_ETournamentNodeState_A_WonByForfeit      ETournamentNodeState = 7
	ETournamentNodeState_k_ETournamentNodeState_B_WonByForfeit      ETournamentNodeState = 8
	ETournamentNodeState_k_ETournamentNodeState_A_Bye               ETournamentNodeState = 9
	ETournamentNodeState_k_ETournamentNodeState_A_Abandoned         ETournamentNodeState = 10
	ETournamentNodeState_k_ETournamentNodeState_ServerFailure       ETournamentNodeState = 11
	ETournamentNodeState_k_ETournamentNodeState_A_TimeoutForfeit    ETournamentNodeState = 12
	ETournamentNodeState_k_ETournamentNodeState_A_TimeoutRefund     ETournamentNodeState = 13
)

// Enum value maps for ETournamentNodeState.
var (
	ETournamentNodeState_name = map[int32]string{
		0:  "k_ETournamentNodeState_Unknown",
		1:  "k_ETournamentNodeState_Canceled",
		2:  "k_ETournamentNodeState_TeamsNotYetAssigned",
		3:  "k_ETournamentNodeState_InBetweenGames",
		4:  "k_ETournamentNodeState_GameInProgress",
		5:  "k_ETournamentNodeState_A_Won",
		6:  "k_ETournamentNodeState_B_Won",
		7:  "k_ETournamentNodeState_A_WonByForfeit",
		8:  "k_ETournamentNodeState_B_WonByForfeit",
		9:  "k_ETournamentNodeState_A_Bye",
		10: "k_ETournamentNodeState_A_Abandoned",
		11: "k_ETournamentNodeState_ServerFailure",
		12: "k_ETournamentNodeState_A_TimeoutForfeit",
		13: "k_ETournamentNodeState_A_TimeoutRefund",
	}
	ETournamentNodeState_value = map[string]int32{
		"k_ETournamentNodeState_Unknown":             0,
		"k_ETournamentNodeState_Canceled":            1,
		"k_ETournamentNodeState_TeamsNotYetAssigned": 2,
		"k_ETournamentNodeState_InBetweenGames":      3,
		"k_ETournamentNodeState_GameInProgress":      4,
		"k_ETournamentNodeState_A_Won":               5,
		"k_ETournamentNodeState_B_Won":               6,
		"k_ETournamentNodeState_A_WonByForfeit":      7,
		"k_ETournamentNodeState_B_WonByForfeit":      8,
		"k_ETournamentNodeState_A_Bye":               9,
		"k_ETournamentNodeState_A_Abandoned":         10,
		"k_ETournamentNodeState_ServerFailure":       11,
		"k_ETournamentNodeState_A_TimeoutForfeit":    12,
		"k_ETournamentNodeState_A_TimeoutRefund":     13,
	}
)

func (x ETournamentNodeState) Enum() *ETournamentNodeState {
	p := new(ETournamentNodeState)
	*p = x
	return p
}

func (x ETournamentNodeState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ETournamentNodeState) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_client_enums_proto_enumTypes[4].Descriptor()
}

func (ETournamentNodeState) Type() protoreflect.EnumType {
	return &file_dota_client_enums_proto_enumTypes[4]
}

func (x ETournamentNodeState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ETournamentNodeState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ETournamentNodeState(num)
	return nil
}

// Deprecated: Use ETournamentNodeState.Descriptor instead.
func (ETournamentNodeState) EnumDescriptor() ([]byte, []int) {
	return file_dota_client_enums_proto_rawDescGZIP(), []int{4}
}

type EDOTAGroupMergeResult int32

const (
	EDOTAGroupMergeResult_k_EDOTAGroupMergeResult_OK                   EDOTAGroupMergeResult = 0
	EDOTAGroupMergeResult_k_EDOTAGroupMergeResult_FAILED_GENERIC       EDOTAGroupMergeResult = 1
	EDOTAGroupMergeResult_k_EDOTAGroupMergeResult_NOT_LEADER           EDOTAGroupMergeResult = 2
	EDOTAGroupMergeResult_k_EDOTAGroupMergeResult_TOO_MANY_PLAYERS     EDOTAGroupMergeResult = 3
	EDOTAGroupMergeResult_k_EDOTAGroupMergeResult_TOO_MANY_COACHES     EDOTAGroupMergeResult = 4
	EDOTAGroupMergeResult_k_EDOTAGroupMergeResult_ENGINE_MISMATCH      EDOTAGroupMergeResult = 5
	EDOTAGroupMergeResult_k_EDOTAGroupMergeResult_NO_SUCH_GROUP        EDOTAGroupMergeResult = 6
	EDOTAGroupMergeResult_k_EDOTAGroupMergeResult_OTHER_GROUP_NOT_OPEN EDOTAGroupMergeResult = 7
	EDOTAGroupMergeResult_k_EDOTAGroupMergeResult_ALREADY_INVITED      EDOTAGroupMergeResult = 8
	EDOTAGroupMergeResult_k_EDOTAGroupMergeResult_NOT_INVITED          EDOTAGroupMergeResult = 9
)

// Enum value maps for EDOTAGroupMergeResult.
var (
	EDOTAGroupMergeResult_name = map[int32]string{
		0: "k_EDOTAGroupMergeResult_OK",
		1: "k_EDOTAGroupMergeResult_FAILED_GENERIC",
		2: "k_EDOTAGroupMergeResult_NOT_LEADER",
		3: "k_EDOTAGroupMergeResult_TOO_MANY_PLAYERS",
		4: "k_EDOTAGroupMergeResult_TOO_MANY_COACHES",
		5: "k_EDOTAGroupMergeResult_ENGINE_MISMATCH",
		6: "k_EDOTAGroupMergeResult_NO_SUCH_GROUP",
		7: "k_EDOTAGroupMergeResult_OTHER_GROUP_NOT_OPEN",
		8: "k_EDOTAGroupMergeResult_ALREADY_INVITED",
		9: "k_EDOTAGroupMergeResult_NOT_INVITED",
	}
	EDOTAGroupMergeResult_value = map[string]int32{
		"k_EDOTAGroupMergeResult_OK":                   0,
		"k_EDOTAGroupMergeResult_FAILED_GENERIC":       1,
		"k_EDOTAGroupMergeResult_NOT_LEADER":           2,
		"k_EDOTAGroupMergeResult_TOO_MANY_PLAYERS":     3,
		"k_EDOTAGroupMergeResult_TOO_MANY_COACHES":     4,
		"k_EDOTAGroupMergeResult_ENGINE_MISMATCH":      5,
		"k_EDOTAGroupMergeResult_NO_SUCH_GROUP":        6,
		"k_EDOTAGroupMergeResult_OTHER_GROUP_NOT_OPEN": 7,
		"k_EDOTAGroupMergeResult_ALREADY_INVITED":      8,
		"k_EDOTAGroupMergeResult_NOT_INVITED":          9,
	}
)

func (x EDOTAGroupMergeResult) Enum() *EDOTAGroupMergeResult {
	p := new(EDOTAGroupMergeResult)
	*p = x
	return p
}

func (x EDOTAGroupMergeResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EDOTAGroupMergeResult) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_client_enums_proto_enumTypes[5].Descriptor()
}

func (EDOTAGroupMergeResult) Type() protoreflect.EnumType {
	return &file_dota_client_enums_proto_enumTypes[5]
}

func (x EDOTAGroupMergeResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EDOTAGroupMergeResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EDOTAGroupMergeResult(num)
	return nil
}

// Deprecated: Use EDOTAGroupMergeResult.Descriptor instead.
func (EDOTAGroupMergeResult) EnumDescriptor() ([]byte, []int) {
	return file_dota_client_enums_proto_rawDescGZIP(), []int{5}
}

type EPartyBeaconType int32

const (
	EPartyBeaconType_k_EPartyBeaconType_Available EPartyBeaconType = 0
	EPartyBeaconType_k_EPartyBeaconType_Joinable  EPartyBeaconType = 1
)

// Enum value maps for EPartyBeaconType.
var (
	EPartyBeaconType_name = map[int32]string{
		0: "k_EPartyBeaconType_Available",
		1: "k_EPartyBeaconType_Joinable",
	}
	EPartyBeaconType_value = map[string]int32{
		"k_EPartyBeaconType_Available": 0,
		"k_EPartyBeaconType_Joinable":  1,
	}
)

func (x EPartyBeaconType) Enum() *EPartyBeaconType {
	p := new(EPartyBeaconType)
	*p = x
	return p
}

func (x EPartyBeaconType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPartyBeaconType) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_client_enums_proto_enumTypes[6].Descriptor()
}

func (EPartyBeaconType) Type() protoreflect.EnumType {
	return &file_dota_client_enums_proto_enumTypes[6]
}

func (x EPartyBeaconType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EPartyBeaconType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EPartyBeaconType(num)
	return nil
}

// Deprecated: Use EPartyBeaconType.Descriptor instead.
func (EPartyBeaconType) EnumDescriptor() ([]byte, []int) {
	return file_dota_client_enums_proto_rawDescGZIP(), []int{6}
}

var File_dota_client_enums_proto protoreflect.FileDescriptor

var file_dota_client_enums_proto_rawDesc = []byte{
	0x0a, 0x17, 0x64, 0x6f, 0x74, 0x61, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x64, 0x6f, 0x74, 0x61, 0x2a,
	0x5e, 0x0a, 0x13, 0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f,
	0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f,
	0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x57, 0x69, 0x6e, 0x33, 0x10, 0x01, 0x2a,
	0xa8, 0x03, 0x0a, 0x14, 0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x47,
	0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x54,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f,
	0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x10,
	0x01, 0x12, 0x24, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x54, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x03, 0x12, 0x25, 0x0a, 0x21, 0x6b, 0x5f,
	0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x52, 0x61, 0x64, 0x56, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x10,
	0x14, 0x12, 0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x44, 0x69, 0x72, 0x65,
	0x56, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x10, 0x15, 0x12, 0x2e, 0x0a, 0x2a, 0x6b, 0x5f, 0x45,
	0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x52, 0x61, 0x64, 0x56, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x79,
	0x46, 0x6f, 0x72, 0x66, 0x65, 0x69, 0x74, 0x10, 0x16, 0x12, 0x2f, 0x0a, 0x2b, 0x6b, 0x5f, 0x45,
	0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x44, 0x69, 0x72, 0x65, 0x56, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x42,
	0x79, 0x46, 0x6f, 0x72, 0x66, 0x65, 0x69, 0x74, 0x10, 0x17, 0x12, 0x28, 0x0a, 0x24, 0x6b, 0x5f,
	0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x10, 0x28, 0x12, 0x24, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x4e,
	0x6f, 0x74, 0x4e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x10, 0x29, 0x2a, 0xe7, 0x06, 0x0a, 0x14, 0x45,
	0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x55, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x54, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x4e, 0x6f, 0x64, 0x65, 0x31, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1e, 0x6b, 0x5f, 0x45,
	0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x78, 0x10, 0x80, 0x08, 0x12, 0x26,
	0x0a, 0x21, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x45, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x64, 0x10, 0xb3, 0x6d, 0x12, 0x25, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x46, 0x6f, 0x72, 0x66, 0x65, 0x69, 0x74, 0x65, 0x64, 0x10, 0xb4, 0x6d, 0x12, 0x27, 0x0a,
	0x22, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65,
	0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x31, 0x73, 0x74, 0x10, 0x99, 0x75, 0x12, 0x27, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x32, 0x6e, 0x64, 0x10, 0x9a, 0x75, 0x12,
	0x27, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x33, 0x72, 0x64, 0x10, 0x9b, 0x75, 0x12, 0x27, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x54,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x34, 0x74, 0x68, 0x10, 0x9c,
	0x75, 0x12, 0x27, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x46, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x35, 0x74, 0x68, 0x10, 0x9d, 0x75, 0x12, 0x27, 0x0a, 0x22, 0x6b, 0x5f,
	0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x36, 0x74, 0x68,
	0x10, 0x9e, 0x75, 0x12, 0x27, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x46, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x37, 0x74, 0x68, 0x10, 0x9f, 0x75, 0x12, 0x27, 0x0a, 0x22,
	0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61,
	0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x38,
	0x74, 0x68, 0x10, 0xa0, 0x75, 0x12, 0x27, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x39, 0x74, 0x68, 0x10, 0xa1, 0x75, 0x12, 0x28,
	0x0a, 0x23, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x31, 0x30, 0x74, 0x68, 0x10, 0xa2, 0x75, 0x12, 0x28, 0x0a, 0x23, 0x6b, 0x5f, 0x45, 0x54,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x31, 0x31, 0x74, 0x68, 0x10,
	0xa3, 0x75, 0x12, 0x28, 0x0a, 0x23, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x46, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x31, 0x32, 0x74, 0x68, 0x10, 0xa4, 0x75, 0x12, 0x28, 0x0a, 0x23,
	0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61,
	0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x31,
	0x33, 0x74, 0x68, 0x10, 0xa5, 0x75, 0x12, 0x28, 0x0a, 0x23, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x31, 0x34, 0x74, 0x68, 0x10, 0xa6, 0x75,
	0x12, 0x28, 0x0a, 0x23, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x31, 0x35, 0x74, 0x68, 0x10, 0xa7, 0x75, 0x12, 0x28, 0x0a, 0x23, 0x6b, 0x5f,
	0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x31, 0x36, 0x74,
	0x68, 0x10, 0xa8, 0x75, 0x2a, 0xec, 0x03, 0x0a, 0x10, 0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x5f, 0x45,
	0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x45,
	0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x42, 0x79, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x10,
	0x01, 0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x64,
	0x10, 0x03, 0x12, 0x24, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x46,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x10, 0x04, 0x12, 0x24, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x54,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x54,
	0x65, 0x61, 0x6d, 0x41, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x65, 0x64, 0x10, 0x05, 0x12, 0x29,
	0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x54, 0x65, 0x61, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x46, 0x6f, 0x72, 0x66, 0x65, 0x69, 0x74, 0x10, 0x06, 0x12, 0x28, 0x0a, 0x24, 0x6b, 0x5f, 0x45,
	0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x54, 0x65, 0x61, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x10, 0x07, 0x12, 0x32, 0x0a, 0x2e, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x56, 0x69,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x10, 0x08, 0x12, 0x30, 0x0a, 0x2c, 0x6b, 0x5f, 0x45, 0x54, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x54, 0x65,
	0x61, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64,
	0x56, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x10, 0x09, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45,
	0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x49, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x10, 0x64, 0x12, 0x25, 0x0a, 0x21,
	0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x4d, 0x65, 0x72, 0x67,
	0x65, 0x10, 0x65, 0x2a, 0xcc, 0x04, 0x0a, 0x14, 0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x1e,
	0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00,
	0x12, 0x23, 0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x65, 0x64, 0x10, 0x01, 0x12, 0x2e, 0x0a, 0x2a, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x54, 0x65, 0x61, 0x6d, 0x73, 0x4e, 0x6f, 0x74, 0x59, 0x65, 0x74, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x10, 0x02, 0x12, 0x29, 0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x49, 0x6e, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x10, 0x03,
	0x12, 0x29, 0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x49,
	0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x10, 0x04, 0x12, 0x20, 0x0a, 0x1c, 0x6b,
	0x5f, 0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x41, 0x5f, 0x57, 0x6f, 0x6e, 0x10, 0x05, 0x12, 0x20, 0x0a,
	0x1c, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x42, 0x5f, 0x57, 0x6f, 0x6e, 0x10, 0x06, 0x12,
	0x29, 0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x41, 0x5f, 0x57, 0x6f, 0x6e, 0x42,
	0x79, 0x46, 0x6f, 0x72, 0x66, 0x65, 0x69, 0x74, 0x10, 0x07, 0x12, 0x29, 0x0a, 0x25, 0x6b, 0x5f,
	0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x42, 0x5f, 0x57, 0x6f, 0x6e, 0x42, 0x79, 0x46, 0x6f, 0x72, 0x66,
	0x65, 0x69, 0x74, 0x10, 0x08, 0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x41, 0x5f, 0x42, 0x79, 0x65, 0x10, 0x09, 0x12, 0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x54, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x41, 0x5f, 0x41, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x65, 0x64, 0x10, 0x0a, 0x12,
	0x28, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x10, 0x0b, 0x12, 0x2b, 0x0a, 0x27, 0x6b, 0x5f, 0x45,
	0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x41, 0x5f, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x46, 0x6f, 0x72,
	0x66, 0x65, 0x69, 0x74, 0x10, 0x0c, 0x12, 0x2a, 0x0a, 0x26, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x41, 0x5f, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x10, 0x0d, 0x2a, 0xc7, 0x03, 0x0a, 0x15, 0x45, 0x44, 0x4f, 0x54, 0x41, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1e, 0x0a, 0x1a,
	0x6b, 0x5f, 0x45, 0x44, 0x4f, 0x54, 0x41, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x72, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x2a, 0x0a, 0x26,
	0x6b, 0x5f, 0x45, 0x44, 0x4f, 0x54, 0x41, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x72, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x47,
	0x45, 0x4e, 0x45, 0x52, 0x49, 0x43, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x44,
	0x4f, 0x54, 0x41, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4c, 0x45, 0x41, 0x44, 0x45, 0x52, 0x10, 0x02,
	0x12, 0x2c, 0x0a, 0x28, 0x6b, 0x5f, 0x45, 0x44, 0x4f, 0x54, 0x41, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x54, 0x4f, 0x4f, 0x5f,
	0x4d, 0x41, 0x4e, 0x59, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x53, 0x10, 0x03, 0x12, 0x2c,
	0x0a, 0x28, 0x6b, 0x5f, 0x45, 0x44, 0x4f, 0x54, 0x41, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65,
	0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4d, 0x41,
	0x4e, 0x59, 0x5f, 0x43, 0x4f, 0x41, 0x43, 0x48, 0x45, 0x53, 0x10, 0x04, 0x12, 0x2b, 0x0a, 0x27,
	0x6b, 0x5f, 0x45, 0x44, 0x4f, 0x54, 0x41, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x72, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x45, 0x4e, 0x47, 0x49, 0x4e, 0x45, 0x5f, 0x4d,
	0x49, 0x53, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x05, 0x12, 0x29, 0x0a, 0x25, 0x6b, 0x5f, 0x45,
	0x44, 0x4f, 0x54, 0x41, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x5f, 0x4e, 0x4f, 0x5f, 0x53, 0x55, 0x43, 0x48, 0x5f, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x10, 0x06, 0x12, 0x30, 0x0a, 0x2c, 0x6b, 0x5f, 0x45, 0x44, 0x4f, 0x54, 0x41, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f,
	0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x4f, 0x50, 0x45, 0x4e, 0x10, 0x07, 0x12, 0x2b, 0x0a, 0x27, 0x6b, 0x5f, 0x45, 0x44, 0x4f, 0x54,
	0x41, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45,
	0x44, 0x10, 0x08, 0x12, 0x27, 0x0a, 0x23, 0x6b, 0x5f, 0x45, 0x44, 0x4f, 0x54, 0x41, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x44, 0x10, 0x09, 0x2a, 0x55, 0x0a, 0x10,
	0x45, 0x50, 0x61, 0x72, 0x74, 0x79, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x50, 0x61, 0x72, 0x74, 0x79, 0x42, 0x65, 0x61, 0x63,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x6b, 0x5f, 0x45, 0x50, 0x61, 0x72, 0x74, 0x79, 0x42, 0x65,
	0x61, 0x63, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4a, 0x6f, 0x69, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x10, 0x01, 0x42, 0x05, 0x48, 0x01, 0x80, 0x01, 0x00,
}

var (
	file_dota_client_enums_proto_rawDescOnce sync.Once
	file_dota_client_enums_proto_rawDescData = file_dota_client_enums_proto_rawDesc
)

func file_dota_client_enums_proto_rawDescGZIP() []byte {
	file_dota_client_enums_proto_rawDescOnce.Do(func() {
		file_dota_client_enums_proto_rawDescData = protoimpl.X.CompressGZIP(file_dota_client_enums_proto_rawDescData)
	})
	return file_dota_client_enums_proto_rawDescData
}

var file_dota_client_enums_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_dota_client_enums_proto_goTypes = []interface{}{
	(ETournamentTemplate)(0),   // 0: dota.ETournamentTemplate
	(ETournamentGameState)(0),  // 1: dota.ETournamentGameState
	(ETournamentTeamState)(0),  // 2: dota.ETournamentTeamState
	(ETournamentState)(0),      // 3: dota.ETournamentState
	(ETournamentNodeState)(0),  // 4: dota.ETournamentNodeState
	(EDOTAGroupMergeResult)(0), // 5: dota.EDOTAGroupMergeResult
	(EPartyBeaconType)(0),      // 6: dota.EPartyBeaconType
}
var file_dota_client_enums_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_dota_client_enums_proto_init() }
func file_dota_client_enums_proto_init() {
	if File_dota_client_enums_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dota_client_enums_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_dota_client_enums_proto_goTypes,
		DependencyIndexes: file_dota_client_enums_proto_depIdxs,
		EnumInfos:         file_dota_client_enums_proto_enumTypes,
	}.Build()
	File_dota_client_enums_proto = out.File
	file_dota_client_enums_proto_rawDesc = nil
	file_dota_client_enums_proto_goTypes = nil
	file_dota_client_enums_proto_depIdxs = nil
}
