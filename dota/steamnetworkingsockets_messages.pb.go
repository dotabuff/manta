// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.5
// source: steamnetworkingsockets_messages.proto

package dota

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ESteamNetworkingSocketsCipher int32

const (
	ESteamNetworkingSocketsCipher_k_ESteamNetworkingSocketsCipher_INVALID     ESteamNetworkingSocketsCipher = 0
	ESteamNetworkingSocketsCipher_k_ESteamNetworkingSocketsCipher_NULL        ESteamNetworkingSocketsCipher = 1
	ESteamNetworkingSocketsCipher_k_ESteamNetworkingSocketsCipher_AES_256_GCM ESteamNetworkingSocketsCipher = 2
)

// Enum value maps for ESteamNetworkingSocketsCipher.
var (
	ESteamNetworkingSocketsCipher_name = map[int32]string{
		0: "k_ESteamNetworkingSocketsCipher_INVALID",
		1: "k_ESteamNetworkingSocketsCipher_NULL",
		2: "k_ESteamNetworkingSocketsCipher_AES_256_GCM",
	}
	ESteamNetworkingSocketsCipher_value = map[string]int32{
		"k_ESteamNetworkingSocketsCipher_INVALID":     0,
		"k_ESteamNetworkingSocketsCipher_NULL":        1,
		"k_ESteamNetworkingSocketsCipher_AES_256_GCM": 2,
	}
)

func (x ESteamNetworkingSocketsCipher) Enum() *ESteamNetworkingSocketsCipher {
	p := new(ESteamNetworkingSocketsCipher)
	*p = x
	return p
}

func (x ESteamNetworkingSocketsCipher) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESteamNetworkingSocketsCipher) Descriptor() protoreflect.EnumDescriptor {
	return file_steamnetworkingsockets_messages_proto_enumTypes[0].Descriptor()
}

func (ESteamNetworkingSocketsCipher) Type() protoreflect.EnumType {
	return &file_steamnetworkingsockets_messages_proto_enumTypes[0]
}

func (x ESteamNetworkingSocketsCipher) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ESteamNetworkingSocketsCipher) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ESteamNetworkingSocketsCipher(num)
	return nil
}

// Deprecated: Use ESteamNetworkingSocketsCipher.Descriptor instead.
func (ESteamNetworkingSocketsCipher) EnumDescriptor() ([]byte, []int) {
	return file_steamnetworkingsockets_messages_proto_rawDescGZIP(), []int{0}
}

type CMsgSteamDatagramSessionCryptInfo_EKeyType int32

const (
	CMsgSteamDatagramSessionCryptInfo_INVALID    CMsgSteamDatagramSessionCryptInfo_EKeyType = 0
	CMsgSteamDatagramSessionCryptInfo_CURVE25519 CMsgSteamDatagramSessionCryptInfo_EKeyType = 1
)

// Enum value maps for CMsgSteamDatagramSessionCryptInfo_EKeyType.
var (
	CMsgSteamDatagramSessionCryptInfo_EKeyType_name = map[int32]string{
		0: "INVALID",
		1: "CURVE25519",
	}
	CMsgSteamDatagramSessionCryptInfo_EKeyType_value = map[string]int32{
		"INVALID":    0,
		"CURVE25519": 1,
	}
)

func (x CMsgSteamDatagramSessionCryptInfo_EKeyType) Enum() *CMsgSteamDatagramSessionCryptInfo_EKeyType {
	p := new(CMsgSteamDatagramSessionCryptInfo_EKeyType)
	*p = x
	return p
}

func (x CMsgSteamDatagramSessionCryptInfo_EKeyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgSteamDatagramSessionCryptInfo_EKeyType) Descriptor() protoreflect.EnumDescriptor {
	return file_steamnetworkingsockets_messages_proto_enumTypes[1].Descriptor()
}

func (CMsgSteamDatagramSessionCryptInfo_EKeyType) Type() protoreflect.EnumType {
	return &file_steamnetworkingsockets_messages_proto_enumTypes[1]
}

func (x CMsgSteamDatagramSessionCryptInfo_EKeyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgSteamDatagramSessionCryptInfo_EKeyType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgSteamDatagramSessionCryptInfo_EKeyType(num)
	return nil
}

// Deprecated: Use CMsgSteamDatagramSessionCryptInfo_EKeyType.Descriptor instead.
func (CMsgSteamDatagramSessionCryptInfo_EKeyType) EnumDescriptor() ([]byte, []int) {
	return file_steamnetworkingsockets_messages_proto_rawDescGZIP(), []int{0, 0}
}

type CMsgSteamDatagramSessionCryptInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyType         *CMsgSteamDatagramSessionCryptInfo_EKeyType `protobuf:"varint,1,opt,name=key_type,json=keyType,enum=dota.CMsgSteamDatagramSessionCryptInfo_EKeyType" json:"key_type,omitempty"`
	KeyData         []byte                                      `protobuf:"bytes,2,opt,name=key_data,json=keyData" json:"key_data,omitempty"`
	Nonce           *uint64                                     `protobuf:"fixed64,3,opt,name=nonce" json:"nonce,omitempty"`
	ProtocolVersion *uint32                                     `protobuf:"varint,4,opt,name=protocol_version,json=protocolVersion" json:"protocol_version,omitempty"`
	Ciphers         []ESteamNetworkingSocketsCipher             `protobuf:"varint,5,rep,name=ciphers,enum=dota.ESteamNetworkingSocketsCipher" json:"ciphers,omitempty"`
}

func (x *CMsgSteamDatagramSessionCryptInfo) Reset() {
	*x = CMsgSteamDatagramSessionCryptInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steamnetworkingsockets_messages_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamDatagramSessionCryptInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramSessionCryptInfo) ProtoMessage() {}

func (x *CMsgSteamDatagramSessionCryptInfo) ProtoReflect() protoreflect.Message {
	mi := &file_steamnetworkingsockets_messages_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramSessionCryptInfo.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramSessionCryptInfo) Descriptor() ([]byte, []int) {
	return file_steamnetworkingsockets_messages_proto_rawDescGZIP(), []int{0}
}

func (x *CMsgSteamDatagramSessionCryptInfo) GetKeyType() CMsgSteamDatagramSessionCryptInfo_EKeyType {
	if x != nil && x.KeyType != nil {
		return *x.KeyType
	}
	return CMsgSteamDatagramSessionCryptInfo_INVALID
}

func (x *CMsgSteamDatagramSessionCryptInfo) GetKeyData() []byte {
	if x != nil {
		return x.KeyData
	}
	return nil
}

func (x *CMsgSteamDatagramSessionCryptInfo) GetNonce() uint64 {
	if x != nil && x.Nonce != nil {
		return *x.Nonce
	}
	return 0
}

func (x *CMsgSteamDatagramSessionCryptInfo) GetProtocolVersion() uint32 {
	if x != nil && x.ProtocolVersion != nil {
		return *x.ProtocolVersion
	}
	return 0
}

func (x *CMsgSteamDatagramSessionCryptInfo) GetCiphers() []ESteamNetworkingSocketsCipher {
	if x != nil {
		return x.Ciphers
	}
	return nil
}

type CMsgSteamDatagramSessionCryptInfoSigned struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info      []byte `protobuf:"bytes,1,opt,name=info" json:"info,omitempty"`
	Signature []byte `protobuf:"bytes,2,opt,name=signature" json:"signature,omitempty"`
}

func (x *CMsgSteamDatagramSessionCryptInfoSigned) Reset() {
	*x = CMsgSteamDatagramSessionCryptInfoSigned{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steamnetworkingsockets_messages_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamDatagramSessionCryptInfoSigned) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramSessionCryptInfoSigned) ProtoMessage() {}

func (x *CMsgSteamDatagramSessionCryptInfoSigned) ProtoReflect() protoreflect.Message {
	mi := &file_steamnetworkingsockets_messages_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramSessionCryptInfoSigned.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramSessionCryptInfoSigned) Descriptor() ([]byte, []int) {
	return file_steamnetworkingsockets_messages_proto_rawDescGZIP(), []int{1}
}

func (x *CMsgSteamDatagramSessionCryptInfoSigned) GetInfo() []byte {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *CMsgSteamDatagramSessionCryptInfoSigned) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type CMsgSteamDatagramDiagnostic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Severity *uint32 `protobuf:"varint,1,opt,name=severity" json:"severity,omitempty"`
	Text     *string `protobuf:"bytes,2,opt,name=text" json:"text,omitempty"`
}

func (x *CMsgSteamDatagramDiagnostic) Reset() {
	*x = CMsgSteamDatagramDiagnostic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steamnetworkingsockets_messages_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamDatagramDiagnostic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramDiagnostic) ProtoMessage() {}

func (x *CMsgSteamDatagramDiagnostic) ProtoReflect() protoreflect.Message {
	mi := &file_steamnetworkingsockets_messages_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramDiagnostic.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramDiagnostic) Descriptor() ([]byte, []int) {
	return file_steamnetworkingsockets_messages_proto_rawDescGZIP(), []int{2}
}

func (x *CMsgSteamDatagramDiagnostic) GetSeverity() uint32 {
	if x != nil && x.Severity != nil {
		return *x.Severity
	}
	return 0
}

func (x *CMsgSteamDatagramDiagnostic) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

type CMsgSteamDatagramLinkInstantaneousStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutPacketsPerSecX10     *uint32 `protobuf:"varint,1,opt,name=out_packets_per_sec_x10,json=outPacketsPerSecX10" json:"out_packets_per_sec_x10,omitempty"`
	OutBytesPerSec          *uint32 `protobuf:"varint,2,opt,name=out_bytes_per_sec,json=outBytesPerSec" json:"out_bytes_per_sec,omitempty"`
	InPacketsPerSecX10      *uint32 `protobuf:"varint,3,opt,name=in_packets_per_sec_x10,json=inPacketsPerSecX10" json:"in_packets_per_sec_x10,omitempty"`
	InBytesPerSec           *uint32 `protobuf:"varint,4,opt,name=in_bytes_per_sec,json=inBytesPerSec" json:"in_bytes_per_sec,omitempty"`
	PingMs                  *uint32 `protobuf:"varint,5,opt,name=ping_ms,json=pingMs" json:"ping_ms,omitempty"`
	PacketsDroppedPct       *uint32 `protobuf:"varint,6,opt,name=packets_dropped_pct,json=packetsDroppedPct" json:"packets_dropped_pct,omitempty"`
	PacketsWeirdSequencePct *uint32 `protobuf:"varint,7,opt,name=packets_weird_sequence_pct,json=packetsWeirdSequencePct" json:"packets_weird_sequence_pct,omitempty"`
	PeakJitterUsec          *uint32 `protobuf:"varint,8,opt,name=peak_jitter_usec,json=peakJitterUsec" json:"peak_jitter_usec,omitempty"`
}

func (x *CMsgSteamDatagramLinkInstantaneousStats) Reset() {
	*x = CMsgSteamDatagramLinkInstantaneousStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steamnetworkingsockets_messages_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamDatagramLinkInstantaneousStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramLinkInstantaneousStats) ProtoMessage() {}

func (x *CMsgSteamDatagramLinkInstantaneousStats) ProtoReflect() protoreflect.Message {
	mi := &file_steamnetworkingsockets_messages_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramLinkInstantaneousStats.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramLinkInstantaneousStats) Descriptor() ([]byte, []int) {
	return file_steamnetworkingsockets_messages_proto_rawDescGZIP(), []int{3}
}

func (x *CMsgSteamDatagramLinkInstantaneousStats) GetOutPacketsPerSecX10() uint32 {
	if x != nil && x.OutPacketsPerSecX10 != nil {
		return *x.OutPacketsPerSecX10
	}
	return 0
}

func (x *CMsgSteamDatagramLinkInstantaneousStats) GetOutBytesPerSec() uint32 {
	if x != nil && x.OutBytesPerSec != nil {
		return *x.OutBytesPerSec
	}
	return 0
}

func (x *CMsgSteamDatagramLinkInstantaneousStats) GetInPacketsPerSecX10() uint32 {
	if x != nil && x.InPacketsPerSecX10 != nil {
		return *x.InPacketsPerSecX10
	}
	return 0
}

func (x *CMsgSteamDatagramLinkInstantaneousStats) GetInBytesPerSec() uint32 {
	if x != nil && x.InBytesPerSec != nil {
		return *x.InBytesPerSec
	}
	return 0
}

func (x *CMsgSteamDatagramLinkInstantaneousStats) GetPingMs() uint32 {
	if x != nil && x.PingMs != nil {
		return *x.PingMs
	}
	return 0
}

func (x *CMsgSteamDatagramLinkInstantaneousStats) GetPacketsDroppedPct() uint32 {
	if x != nil && x.PacketsDroppedPct != nil {
		return *x.PacketsDroppedPct
	}
	return 0
}

func (x *CMsgSteamDatagramLinkInstantaneousStats) GetPacketsWeirdSequencePct() uint32 {
	if x != nil && x.PacketsWeirdSequencePct != nil {
		return *x.PacketsWeirdSequencePct
	}
	return 0
}

func (x *CMsgSteamDatagramLinkInstantaneousStats) GetPeakJitterUsec() uint32 {
	if x != nil && x.PeakJitterUsec != nil {
		return *x.PeakJitterUsec
	}
	return 0
}

type CMsgSteamDatagramLinkLifetimeStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectedSeconds              *uint32  `protobuf:"varint,2,opt,name=connected_seconds,json=connectedSeconds" json:"connected_seconds,omitempty"`
	PacketsSent                   *uint64  `protobuf:"varint,3,opt,name=packets_sent,json=packetsSent" json:"packets_sent,omitempty"`
	KbSent                        *uint64  `protobuf:"varint,4,opt,name=kb_sent,json=kbSent" json:"kb_sent,omitempty"`
	PacketsRecv                   *uint64  `protobuf:"varint,5,opt,name=packets_recv,json=packetsRecv" json:"packets_recv,omitempty"`
	KbRecv                        *uint64  `protobuf:"varint,6,opt,name=kb_recv,json=kbRecv" json:"kb_recv,omitempty"`
	PacketsRecvSequenced          *uint64  `protobuf:"varint,7,opt,name=packets_recv_sequenced,json=packetsRecvSequenced" json:"packets_recv_sequenced,omitempty"`
	PacketsRecvDropped            *uint64  `protobuf:"varint,8,opt,name=packets_recv_dropped,json=packetsRecvDropped" json:"packets_recv_dropped,omitempty"`
	PacketsRecvOutOfOrder         *uint64  `protobuf:"varint,9,opt,name=packets_recv_out_of_order,json=packetsRecvOutOfOrder" json:"packets_recv_out_of_order,omitempty"`
	PacketsRecvDuplicate          *uint64  `protobuf:"varint,10,opt,name=packets_recv_duplicate,json=packetsRecvDuplicate" json:"packets_recv_duplicate,omitempty"`
	PacketsRecvLurch              *uint64  `protobuf:"varint,11,opt,name=packets_recv_lurch,json=packetsRecvLurch" json:"packets_recv_lurch,omitempty"`
	MultipathPacketsRecvSequenced []uint64 `protobuf:"varint,12,rep,name=multipath_packets_recv_sequenced,json=multipathPacketsRecvSequenced" json:"multipath_packets_recv_sequenced,omitempty"`
	MultipathPacketsRecvLater     []uint64 `protobuf:"varint,13,rep,name=multipath_packets_recv_later,json=multipathPacketsRecvLater" json:"multipath_packets_recv_later,omitempty"`
	MultipathSendEnabled          *uint32  `protobuf:"varint,14,opt,name=multipath_send_enabled,json=multipathSendEnabled" json:"multipath_send_enabled,omitempty"`
	QualityHistogram_100          *uint32  `protobuf:"varint,21,opt,name=quality_histogram_100,json=qualityHistogram100" json:"quality_histogram_100,omitempty"`
	QualityHistogram_99           *uint32  `protobuf:"varint,22,opt,name=quality_histogram_99,json=qualityHistogram99" json:"quality_histogram_99,omitempty"`
	QualityHistogram_97           *uint32  `protobuf:"varint,23,opt,name=quality_histogram_97,json=qualityHistogram97" json:"quality_histogram_97,omitempty"`
	QualityHistogram_95           *uint32  `protobuf:"varint,24,opt,name=quality_histogram_95,json=qualityHistogram95" json:"quality_histogram_95,omitempty"`
	QualityHistogram_90           *uint32  `protobuf:"varint,25,opt,name=quality_histogram_90,json=qualityHistogram90" json:"quality_histogram_90,omitempty"`
	QualityHistogram_75           *uint32  `protobuf:"varint,26,opt,name=quality_histogram_75,json=qualityHistogram75" json:"quality_histogram_75,omitempty"`
	QualityHistogram_50           *uint32  `protobuf:"varint,27,opt,name=quality_histogram_50,json=qualityHistogram50" json:"quality_histogram_50,omitempty"`
	QualityHistogram_1            *uint32  `protobuf:"varint,28,opt,name=quality_histogram_1,json=qualityHistogram1" json:"quality_histogram_1,omitempty"`
	QualityHistogramDead          *uint32  `protobuf:"varint,29,opt,name=quality_histogram_dead,json=qualityHistogramDead" json:"quality_histogram_dead,omitempty"`
	QualityNtile_2Nd              *uint32  `protobuf:"varint,30,opt,name=quality_ntile_2nd,json=qualityNtile2nd" json:"quality_ntile_2nd,omitempty"`
	QualityNtile_5Th              *uint32  `protobuf:"varint,31,opt,name=quality_ntile_5th,json=qualityNtile5th" json:"quality_ntile_5th,omitempty"`
	QualityNtile_25Th             *uint32  `protobuf:"varint,32,opt,name=quality_ntile_25th,json=qualityNtile25th" json:"quality_ntile_25th,omitempty"`
	QualityNtile_50Th             *uint32  `protobuf:"varint,33,opt,name=quality_ntile_50th,json=qualityNtile50th" json:"quality_ntile_50th,omitempty"`
	PingHistogram_25              *uint32  `protobuf:"varint,41,opt,name=ping_histogram_25,json=pingHistogram25" json:"ping_histogram_25,omitempty"`
	PingHistogram_50              *uint32  `protobuf:"varint,42,opt,name=ping_histogram_50,json=pingHistogram50" json:"ping_histogram_50,omitempty"`
	PingHistogram_75              *uint32  `protobuf:"varint,43,opt,name=ping_histogram_75,json=pingHistogram75" json:"ping_histogram_75,omitempty"`
	PingHistogram_100             *uint32  `protobuf:"varint,44,opt,name=ping_histogram_100,json=pingHistogram100" json:"ping_histogram_100,omitempty"`
	PingHistogram_125             *uint32  `protobuf:"varint,45,opt,name=ping_histogram_125,json=pingHistogram125" json:"ping_histogram_125,omitempty"`
	PingHistogram_150             *uint32  `protobuf:"varint,46,opt,name=ping_histogram_150,json=pingHistogram150" json:"ping_histogram_150,omitempty"`
	PingHistogram_200             *uint32  `protobuf:"varint,47,opt,name=ping_histogram_200,json=pingHistogram200" json:"ping_histogram_200,omitempty"`
	PingHistogram_300             *uint32  `protobuf:"varint,48,opt,name=ping_histogram_300,json=pingHistogram300" json:"ping_histogram_300,omitempty"`
	PingHistogramMax              *uint32  `protobuf:"varint,49,opt,name=ping_histogram_max,json=pingHistogramMax" json:"ping_histogram_max,omitempty"`
	PingNtile_5Th                 *uint32  `protobuf:"varint,50,opt,name=ping_ntile_5th,json=pingNtile5th" json:"ping_ntile_5th,omitempty"`
	PingNtile_50Th                *uint32  `protobuf:"varint,51,opt,name=ping_ntile_50th,json=pingNtile50th" json:"ping_ntile_50th,omitempty"`
	PingNtile_75Th                *uint32  `protobuf:"varint,52,opt,name=ping_ntile_75th,json=pingNtile75th" json:"ping_ntile_75th,omitempty"`
	PingNtile_95Th                *uint32  `protobuf:"varint,53,opt,name=ping_ntile_95th,json=pingNtile95th" json:"ping_ntile_95th,omitempty"`
	PingNtile_98Th                *uint32  `protobuf:"varint,54,opt,name=ping_ntile_98th,json=pingNtile98th" json:"ping_ntile_98th,omitempty"`
	JitterHistogramNegligible     *uint32  `protobuf:"varint,61,opt,name=jitter_histogram_negligible,json=jitterHistogramNegligible" json:"jitter_histogram_negligible,omitempty"`
	JitterHistogram_1             *uint32  `protobuf:"varint,62,opt,name=jitter_histogram_1,json=jitterHistogram1" json:"jitter_histogram_1,omitempty"`
	JitterHistogram_2             *uint32  `protobuf:"varint,63,opt,name=jitter_histogram_2,json=jitterHistogram2" json:"jitter_histogram_2,omitempty"`
	JitterHistogram_5             *uint32  `protobuf:"varint,64,opt,name=jitter_histogram_5,json=jitterHistogram5" json:"jitter_histogram_5,omitempty"`
	JitterHistogram_10            *uint32  `protobuf:"varint,65,opt,name=jitter_histogram_10,json=jitterHistogram10" json:"jitter_histogram_10,omitempty"`
	JitterHistogram_20            *uint32  `protobuf:"varint,66,opt,name=jitter_histogram_20,json=jitterHistogram20" json:"jitter_histogram_20,omitempty"`
	TxspeedMax                    *uint32  `protobuf:"varint,67,opt,name=txspeed_max,json=txspeedMax" json:"txspeed_max,omitempty"`
	TxspeedHistogram_16           *uint32  `protobuf:"varint,68,opt,name=txspeed_histogram_16,json=txspeedHistogram16" json:"txspeed_histogram_16,omitempty"`
	TxspeedHistogram_32           *uint32  `protobuf:"varint,69,opt,name=txspeed_histogram_32,json=txspeedHistogram32" json:"txspeed_histogram_32,omitempty"`
	TxspeedHistogram_64           *uint32  `protobuf:"varint,70,opt,name=txspeed_histogram_64,json=txspeedHistogram64" json:"txspeed_histogram_64,omitempty"`
	TxspeedHistogram_128          *uint32  `protobuf:"varint,71,opt,name=txspeed_histogram_128,json=txspeedHistogram128" json:"txspeed_histogram_128,omitempty"`
	TxspeedHistogram_256          *uint32  `protobuf:"varint,72,opt,name=txspeed_histogram_256,json=txspeedHistogram256" json:"txspeed_histogram_256,omitempty"`
	TxspeedHistogram_512          *uint32  `protobuf:"varint,73,opt,name=txspeed_histogram_512,json=txspeedHistogram512" json:"txspeed_histogram_512,omitempty"`
	TxspeedHistogram_1024         *uint32  `protobuf:"varint,74,opt,name=txspeed_histogram_1024,json=txspeedHistogram1024" json:"txspeed_histogram_1024,omitempty"`
	TxspeedHistogramMax           *uint32  `protobuf:"varint,75,opt,name=txspeed_histogram_max,json=txspeedHistogramMax" json:"txspeed_histogram_max,omitempty"`
	TxspeedNtile_5Th              *uint32  `protobuf:"varint,76,opt,name=txspeed_ntile_5th,json=txspeedNtile5th" json:"txspeed_ntile_5th,omitempty"`
	TxspeedNtile_50Th             *uint32  `protobuf:"varint,77,opt,name=txspeed_ntile_50th,json=txspeedNtile50th" json:"txspeed_ntile_50th,omitempty"`
	TxspeedNtile_75Th             *uint32  `protobuf:"varint,78,opt,name=txspeed_ntile_75th,json=txspeedNtile75th" json:"txspeed_ntile_75th,omitempty"`
	TxspeedNtile_95Th             *uint32  `protobuf:"varint,79,opt,name=txspeed_ntile_95th,json=txspeedNtile95th" json:"txspeed_ntile_95th,omitempty"`
	TxspeedNtile_98Th             *uint32  `protobuf:"varint,80,opt,name=txspeed_ntile_98th,json=txspeedNtile98th" json:"txspeed_ntile_98th,omitempty"`
	RxspeedMax                    *uint32  `protobuf:"varint,81,opt,name=rxspeed_max,json=rxspeedMax" json:"rxspeed_max,omitempty"`
	RxspeedHistogram_16           *uint32  `protobuf:"varint,82,opt,name=rxspeed_histogram_16,json=rxspeedHistogram16" json:"rxspeed_histogram_16,omitempty"`
	RxspeedHistogram_32           *uint32  `protobuf:"varint,83,opt,name=rxspeed_histogram_32,json=rxspeedHistogram32" json:"rxspeed_histogram_32,omitempty"`
	RxspeedHistogram_64           *uint32  `protobuf:"varint,84,opt,name=rxspeed_histogram_64,json=rxspeedHistogram64" json:"rxspeed_histogram_64,omitempty"`
	RxspeedHistogram_128          *uint32  `protobuf:"varint,85,opt,name=rxspeed_histogram_128,json=rxspeedHistogram128" json:"rxspeed_histogram_128,omitempty"`
	RxspeedHistogram_256          *uint32  `protobuf:"varint,86,opt,name=rxspeed_histogram_256,json=rxspeedHistogram256" json:"rxspeed_histogram_256,omitempty"`
	RxspeedHistogram_512          *uint32  `protobuf:"varint,87,opt,name=rxspeed_histogram_512,json=rxspeedHistogram512" json:"rxspeed_histogram_512,omitempty"`
	RxspeedHistogram_1024         *uint32  `protobuf:"varint,88,opt,name=rxspeed_histogram_1024,json=rxspeedHistogram1024" json:"rxspeed_histogram_1024,omitempty"`
	RxspeedHistogramMax           *uint32  `protobuf:"varint,89,opt,name=rxspeed_histogram_max,json=rxspeedHistogramMax" json:"rxspeed_histogram_max,omitempty"`
	RxspeedNtile_5Th              *uint32  `protobuf:"varint,90,opt,name=rxspeed_ntile_5th,json=rxspeedNtile5th" json:"rxspeed_ntile_5th,omitempty"`
	RxspeedNtile_50Th             *uint32  `protobuf:"varint,91,opt,name=rxspeed_ntile_50th,json=rxspeedNtile50th" json:"rxspeed_ntile_50th,omitempty"`
	RxspeedNtile_75Th             *uint32  `protobuf:"varint,92,opt,name=rxspeed_ntile_75th,json=rxspeedNtile75th" json:"rxspeed_ntile_75th,omitempty"`
	RxspeedNtile_95Th             *uint32  `protobuf:"varint,93,opt,name=rxspeed_ntile_95th,json=rxspeedNtile95th" json:"rxspeed_ntile_95th,omitempty"`
	RxspeedNtile_98Th             *uint32  `protobuf:"varint,94,opt,name=rxspeed_ntile_98th,json=rxspeedNtile98th" json:"rxspeed_ntile_98th,omitempty"`
}

func (x *CMsgSteamDatagramLinkLifetimeStats) Reset() {
	*x = CMsgSteamDatagramLinkLifetimeStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steamnetworkingsockets_messages_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamDatagramLinkLifetimeStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramLinkLifetimeStats) ProtoMessage() {}

func (x *CMsgSteamDatagramLinkLifetimeStats) ProtoReflect() protoreflect.Message {
	mi := &file_steamnetworkingsockets_messages_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramLinkLifetimeStats.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramLinkLifetimeStats) Descriptor() ([]byte, []int) {
	return file_steamnetworkingsockets_messages_proto_rawDescGZIP(), []int{4}
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetConnectedSeconds() uint32 {
	if x != nil && x.ConnectedSeconds != nil {
		return *x.ConnectedSeconds
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetPacketsSent() uint64 {
	if x != nil && x.PacketsSent != nil {
		return *x.PacketsSent
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetKbSent() uint64 {
	if x != nil && x.KbSent != nil {
		return *x.KbSent
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetPacketsRecv() uint64 {
	if x != nil && x.PacketsRecv != nil {
		return *x.PacketsRecv
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetKbRecv() uint64 {
	if x != nil && x.KbRecv != nil {
		return *x.KbRecv
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetPacketsRecvSequenced() uint64 {
	if x != nil && x.PacketsRecvSequenced != nil {
		return *x.PacketsRecvSequenced
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetPacketsRecvDropped() uint64 {
	if x != nil && x.PacketsRecvDropped != nil {
		return *x.PacketsRecvDropped
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetPacketsRecvOutOfOrder() uint64 {
	if x != nil && x.PacketsRecvOutOfOrder != nil {
		return *x.PacketsRecvOutOfOrder
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetPacketsRecvDuplicate() uint64 {
	if x != nil && x.PacketsRecvDuplicate != nil {
		return *x.PacketsRecvDuplicate
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetPacketsRecvLurch() uint64 {
	if x != nil && x.PacketsRecvLurch != nil {
		return *x.PacketsRecvLurch
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetMultipathPacketsRecvSequenced() []uint64 {
	if x != nil {
		return x.MultipathPacketsRecvSequenced
	}
	return nil
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetMultipathPacketsRecvLater() []uint64 {
	if x != nil {
		return x.MultipathPacketsRecvLater
	}
	return nil
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetMultipathSendEnabled() uint32 {
	if x != nil && x.MultipathSendEnabled != nil {
		return *x.MultipathSendEnabled
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetQualityHistogram_100() uint32 {
	if x != nil && x.QualityHistogram_100 != nil {
		return *x.QualityHistogram_100
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetQualityHistogram_99() uint32 {
	if x != nil && x.QualityHistogram_99 != nil {
		return *x.QualityHistogram_99
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetQualityHistogram_97() uint32 {
	if x != nil && x.QualityHistogram_97 != nil {
		return *x.QualityHistogram_97
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetQualityHistogram_95() uint32 {
	if x != nil && x.QualityHistogram_95 != nil {
		return *x.QualityHistogram_95
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetQualityHistogram_90() uint32 {
	if x != nil && x.QualityHistogram_90 != nil {
		return *x.QualityHistogram_90
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetQualityHistogram_75() uint32 {
	if x != nil && x.QualityHistogram_75 != nil {
		return *x.QualityHistogram_75
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetQualityHistogram_50() uint32 {
	if x != nil && x.QualityHistogram_50 != nil {
		return *x.QualityHistogram_50
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetQualityHistogram_1() uint32 {
	if x != nil && x.QualityHistogram_1 != nil {
		return *x.QualityHistogram_1
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetQualityHistogramDead() uint32 {
	if x != nil && x.QualityHistogramDead != nil {
		return *x.QualityHistogramDead
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetQualityNtile_2Nd() uint32 {
	if x != nil && x.QualityNtile_2Nd != nil {
		return *x.QualityNtile_2Nd
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetQualityNtile_5Th() uint32 {
	if x != nil && x.QualityNtile_5Th != nil {
		return *x.QualityNtile_5Th
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetQualityNtile_25Th() uint32 {
	if x != nil && x.QualityNtile_25Th != nil {
		return *x.QualityNtile_25Th
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetQualityNtile_50Th() uint32 {
	if x != nil && x.QualityNtile_50Th != nil {
		return *x.QualityNtile_50Th
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetPingHistogram_25() uint32 {
	if x != nil && x.PingHistogram_25 != nil {
		return *x.PingHistogram_25
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetPingHistogram_50() uint32 {
	if x != nil && x.PingHistogram_50 != nil {
		return *x.PingHistogram_50
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetPingHistogram_75() uint32 {
	if x != nil && x.PingHistogram_75 != nil {
		return *x.PingHistogram_75
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetPingHistogram_100() uint32 {
	if x != nil && x.PingHistogram_100 != nil {
		return *x.PingHistogram_100
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetPingHistogram_125() uint32 {
	if x != nil && x.PingHistogram_125 != nil {
		return *x.PingHistogram_125
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetPingHistogram_150() uint32 {
	if x != nil && x.PingHistogram_150 != nil {
		return *x.PingHistogram_150
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetPingHistogram_200() uint32 {
	if x != nil && x.PingHistogram_200 != nil {
		return *x.PingHistogram_200
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetPingHistogram_300() uint32 {
	if x != nil && x.PingHistogram_300 != nil {
		return *x.PingHistogram_300
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetPingHistogramMax() uint32 {
	if x != nil && x.PingHistogramMax != nil {
		return *x.PingHistogramMax
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetPingNtile_5Th() uint32 {
	if x != nil && x.PingNtile_5Th != nil {
		return *x.PingNtile_5Th
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetPingNtile_50Th() uint32 {
	if x != nil && x.PingNtile_50Th != nil {
		return *x.PingNtile_50Th
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetPingNtile_75Th() uint32 {
	if x != nil && x.PingNtile_75Th != nil {
		return *x.PingNtile_75Th
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetPingNtile_95Th() uint32 {
	if x != nil && x.PingNtile_95Th != nil {
		return *x.PingNtile_95Th
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetPingNtile_98Th() uint32 {
	if x != nil && x.PingNtile_98Th != nil {
		return *x.PingNtile_98Th
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetJitterHistogramNegligible() uint32 {
	if x != nil && x.JitterHistogramNegligible != nil {
		return *x.JitterHistogramNegligible
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetJitterHistogram_1() uint32 {
	if x != nil && x.JitterHistogram_1 != nil {
		return *x.JitterHistogram_1
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetJitterHistogram_2() uint32 {
	if x != nil && x.JitterHistogram_2 != nil {
		return *x.JitterHistogram_2
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetJitterHistogram_5() uint32 {
	if x != nil && x.JitterHistogram_5 != nil {
		return *x.JitterHistogram_5
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetJitterHistogram_10() uint32 {
	if x != nil && x.JitterHistogram_10 != nil {
		return *x.JitterHistogram_10
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetJitterHistogram_20() uint32 {
	if x != nil && x.JitterHistogram_20 != nil {
		return *x.JitterHistogram_20
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetTxspeedMax() uint32 {
	if x != nil && x.TxspeedMax != nil {
		return *x.TxspeedMax
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetTxspeedHistogram_16() uint32 {
	if x != nil && x.TxspeedHistogram_16 != nil {
		return *x.TxspeedHistogram_16
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetTxspeedHistogram_32() uint32 {
	if x != nil && x.TxspeedHistogram_32 != nil {
		return *x.TxspeedHistogram_32
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetTxspeedHistogram_64() uint32 {
	if x != nil && x.TxspeedHistogram_64 != nil {
		return *x.TxspeedHistogram_64
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetTxspeedHistogram_128() uint32 {
	if x != nil && x.TxspeedHistogram_128 != nil {
		return *x.TxspeedHistogram_128
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetTxspeedHistogram_256() uint32 {
	if x != nil && x.TxspeedHistogram_256 != nil {
		return *x.TxspeedHistogram_256
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetTxspeedHistogram_512() uint32 {
	if x != nil && x.TxspeedHistogram_512 != nil {
		return *x.TxspeedHistogram_512
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetTxspeedHistogram_1024() uint32 {
	if x != nil && x.TxspeedHistogram_1024 != nil {
		return *x.TxspeedHistogram_1024
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetTxspeedHistogramMax() uint32 {
	if x != nil && x.TxspeedHistogramMax != nil {
		return *x.TxspeedHistogramMax
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetTxspeedNtile_5Th() uint32 {
	if x != nil && x.TxspeedNtile_5Th != nil {
		return *x.TxspeedNtile_5Th
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetTxspeedNtile_50Th() uint32 {
	if x != nil && x.TxspeedNtile_50Th != nil {
		return *x.TxspeedNtile_50Th
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetTxspeedNtile_75Th() uint32 {
	if x != nil && x.TxspeedNtile_75Th != nil {
		return *x.TxspeedNtile_75Th
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetTxspeedNtile_95Th() uint32 {
	if x != nil && x.TxspeedNtile_95Th != nil {
		return *x.TxspeedNtile_95Th
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetTxspeedNtile_98Th() uint32 {
	if x != nil && x.TxspeedNtile_98Th != nil {
		return *x.TxspeedNtile_98Th
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetRxspeedMax() uint32 {
	if x != nil && x.RxspeedMax != nil {
		return *x.RxspeedMax
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetRxspeedHistogram_16() uint32 {
	if x != nil && x.RxspeedHistogram_16 != nil {
		return *x.RxspeedHistogram_16
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetRxspeedHistogram_32() uint32 {
	if x != nil && x.RxspeedHistogram_32 != nil {
		return *x.RxspeedHistogram_32
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetRxspeedHistogram_64() uint32 {
	if x != nil && x.RxspeedHistogram_64 != nil {
		return *x.RxspeedHistogram_64
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetRxspeedHistogram_128() uint32 {
	if x != nil && x.RxspeedHistogram_128 != nil {
		return *x.RxspeedHistogram_128
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetRxspeedHistogram_256() uint32 {
	if x != nil && x.RxspeedHistogram_256 != nil {
		return *x.RxspeedHistogram_256
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetRxspeedHistogram_512() uint32 {
	if x != nil && x.RxspeedHistogram_512 != nil {
		return *x.RxspeedHistogram_512
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetRxspeedHistogram_1024() uint32 {
	if x != nil && x.RxspeedHistogram_1024 != nil {
		return *x.RxspeedHistogram_1024
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetRxspeedHistogramMax() uint32 {
	if x != nil && x.RxspeedHistogramMax != nil {
		return *x.RxspeedHistogramMax
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetRxspeedNtile_5Th() uint32 {
	if x != nil && x.RxspeedNtile_5Th != nil {
		return *x.RxspeedNtile_5Th
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetRxspeedNtile_50Th() uint32 {
	if x != nil && x.RxspeedNtile_50Th != nil {
		return *x.RxspeedNtile_50Th
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetRxspeedNtile_75Th() uint32 {
	if x != nil && x.RxspeedNtile_75Th != nil {
		return *x.RxspeedNtile_75Th
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetRxspeedNtile_95Th() uint32 {
	if x != nil && x.RxspeedNtile_95Th != nil {
		return *x.RxspeedNtile_95Th
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetRxspeedNtile_98Th() uint32 {
	if x != nil && x.RxspeedNtile_98Th != nil {
		return *x.RxspeedNtile_98Th
	}
	return 0
}

type CMsgSteamDatagramConnectionQuality struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instantaneous *CMsgSteamDatagramLinkInstantaneousStats `protobuf:"bytes,1,opt,name=instantaneous" json:"instantaneous,omitempty"`
	Lifetime      *CMsgSteamDatagramLinkLifetimeStats      `protobuf:"bytes,2,opt,name=lifetime" json:"lifetime,omitempty"`
}

func (x *CMsgSteamDatagramConnectionQuality) Reset() {
	*x = CMsgSteamDatagramConnectionQuality{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steamnetworkingsockets_messages_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamDatagramConnectionQuality) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramConnectionQuality) ProtoMessage() {}

func (x *CMsgSteamDatagramConnectionQuality) ProtoReflect() protoreflect.Message {
	mi := &file_steamnetworkingsockets_messages_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramConnectionQuality.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramConnectionQuality) Descriptor() ([]byte, []int) {
	return file_steamnetworkingsockets_messages_proto_rawDescGZIP(), []int{5}
}

func (x *CMsgSteamDatagramConnectionQuality) GetInstantaneous() *CMsgSteamDatagramLinkInstantaneousStats {
	if x != nil {
		return x.Instantaneous
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionQuality) GetLifetime() *CMsgSteamDatagramLinkLifetimeStats {
	if x != nil {
		return x.Lifetime
	}
	return nil
}

type CMsgICECandidate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Candidate *string `protobuf:"bytes,3,opt,name=candidate" json:"candidate,omitempty"`
}

func (x *CMsgICECandidate) Reset() {
	*x = CMsgICECandidate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steamnetworkingsockets_messages_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgICECandidate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgICECandidate) ProtoMessage() {}

func (x *CMsgICECandidate) ProtoReflect() protoreflect.Message {
	mi := &file_steamnetworkingsockets_messages_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgICECandidate.ProtoReflect.Descriptor instead.
func (*CMsgICECandidate) Descriptor() ([]byte, []int) {
	return file_steamnetworkingsockets_messages_proto_rawDescGZIP(), []int{6}
}

func (x *CMsgICECandidate) GetCandidate() string {
	if x != nil && x.Candidate != nil {
		return *x.Candidate
	}
	return ""
}

type CMsgICERendezvous struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth         *CMsgICERendezvous_Auth `protobuf:"bytes,2,opt,name=auth" json:"auth,omitempty"`
	AddCandidate *CMsgICECandidate       `protobuf:"bytes,1,opt,name=add_candidate,json=addCandidate" json:"add_candidate,omitempty"`
}

func (x *CMsgICERendezvous) Reset() {
	*x = CMsgICERendezvous{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steamnetworkingsockets_messages_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgICERendezvous) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgICERendezvous) ProtoMessage() {}

func (x *CMsgICERendezvous) ProtoReflect() protoreflect.Message {
	mi := &file_steamnetworkingsockets_messages_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgICERendezvous.ProtoReflect.Descriptor instead.
func (*CMsgICERendezvous) Descriptor() ([]byte, []int) {
	return file_steamnetworkingsockets_messages_proto_rawDescGZIP(), []int{7}
}

func (x *CMsgICERendezvous) GetAuth() *CMsgICERendezvous_Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *CMsgICERendezvous) GetAddCandidate() *CMsgICECandidate {
	if x != nil {
		return x.AddCandidate
	}
	return nil
}

type CMsgSteamNetworkingP2PRendezvous struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromIdentity          *string                                                `protobuf:"bytes,8,opt,name=from_identity,json=fromIdentity" json:"from_identity,omitempty"`
	FromConnectionId      *uint32                                                `protobuf:"fixed32,9,opt,name=from_connection_id,json=fromConnectionId" json:"from_connection_id,omitempty"`
	ToIdentity            *string                                                `protobuf:"bytes,10,opt,name=to_identity,json=toIdentity" json:"to_identity,omitempty"`
	ToConnectionId        *uint32                                                `protobuf:"fixed32,1,opt,name=to_connection_id,json=toConnectionId" json:"to_connection_id,omitempty"`
	SdrRoutes             []byte                                                 `protobuf:"bytes,2,opt,name=sdr_routes,json=sdrRoutes" json:"sdr_routes,omitempty"`
	AckPeerRoutesRevision *uint32                                                `protobuf:"varint,3,opt,name=ack_peer_routes_revision,json=ackPeerRoutesRevision" json:"ack_peer_routes_revision,omitempty"`
	IceEnabled            *bool                                                  `protobuf:"varint,7,opt,name=ice_enabled,json=iceEnabled" json:"ice_enabled,omitempty"`
	HostedServerTicket    []byte                                                 `protobuf:"bytes,14,opt,name=hosted_server_ticket,json=hostedServerTicket" json:"hosted_server_ticket,omitempty"`
	ConnectRequest        *CMsgSteamNetworkingP2PRendezvous_ConnectRequest       `protobuf:"bytes,4,opt,name=connect_request,json=connectRequest" json:"connect_request,omitempty"`
	ConnectOk             *CMsgSteamNetworkingP2PRendezvous_ConnectOK            `protobuf:"bytes,5,opt,name=connect_ok,json=connectOk" json:"connect_ok,omitempty"`
	ConnectionClosed      *CMsgSteamNetworkingP2PRendezvous_ConnectionClosed     `protobuf:"bytes,6,opt,name=connection_closed,json=connectionClosed" json:"connection_closed,omitempty"`
	AckReliableMsg        *uint32                                                `protobuf:"varint,11,opt,name=ack_reliable_msg,json=ackReliableMsg" json:"ack_reliable_msg,omitempty"`
	FirstReliableMsg      *uint32                                                `protobuf:"varint,12,opt,name=first_reliable_msg,json=firstReliableMsg" json:"first_reliable_msg,omitempty"`
	ReliableMessages      []*CMsgSteamNetworkingP2PRendezvous_ReliableMessage    `protobuf:"bytes,13,rep,name=reliable_messages,json=reliableMessages" json:"reliable_messages,omitempty"`
	ApplicationMessages   []*CMsgSteamNetworkingP2PRendezvous_ApplicationMessage `protobuf:"bytes,15,rep,name=application_messages,json=applicationMessages" json:"application_messages,omitempty"`
}

func (x *CMsgSteamNetworkingP2PRendezvous) Reset() {
	*x = CMsgSteamNetworkingP2PRendezvous{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steamnetworkingsockets_messages_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamNetworkingP2PRendezvous) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamNetworkingP2PRendezvous) ProtoMessage() {}

func (x *CMsgSteamNetworkingP2PRendezvous) ProtoReflect() protoreflect.Message {
	mi := &file_steamnetworkingsockets_messages_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamNetworkingP2PRendezvous.ProtoReflect.Descriptor instead.
func (*CMsgSteamNetworkingP2PRendezvous) Descriptor() ([]byte, []int) {
	return file_steamnetworkingsockets_messages_proto_rawDescGZIP(), []int{8}
}

func (x *CMsgSteamNetworkingP2PRendezvous) GetFromIdentity() string {
	if x != nil && x.FromIdentity != nil {
		return *x.FromIdentity
	}
	return ""
}

func (x *CMsgSteamNetworkingP2PRendezvous) GetFromConnectionId() uint32 {
	if x != nil && x.FromConnectionId != nil {
		return *x.FromConnectionId
	}
	return 0
}

func (x *CMsgSteamNetworkingP2PRendezvous) GetToIdentity() string {
	if x != nil && x.ToIdentity != nil {
		return *x.ToIdentity
	}
	return ""
}

func (x *CMsgSteamNetworkingP2PRendezvous) GetToConnectionId() uint32 {
	if x != nil && x.ToConnectionId != nil {
		return *x.ToConnectionId
	}
	return 0
}

func (x *CMsgSteamNetworkingP2PRendezvous) GetSdrRoutes() []byte {
	if x != nil {
		return x.SdrRoutes
	}
	return nil
}

func (x *CMsgSteamNetworkingP2PRendezvous) GetAckPeerRoutesRevision() uint32 {
	if x != nil && x.AckPeerRoutesRevision != nil {
		return *x.AckPeerRoutesRevision
	}
	return 0
}

func (x *CMsgSteamNetworkingP2PRendezvous) GetIceEnabled() bool {
	if x != nil && x.IceEnabled != nil {
		return *x.IceEnabled
	}
	return false
}

func (x *CMsgSteamNetworkingP2PRendezvous) GetHostedServerTicket() []byte {
	if x != nil {
		return x.HostedServerTicket
	}
	return nil
}

func (x *CMsgSteamNetworkingP2PRendezvous) GetConnectRequest() *CMsgSteamNetworkingP2PRendezvous_ConnectRequest {
	if x != nil {
		return x.ConnectRequest
	}
	return nil
}

func (x *CMsgSteamNetworkingP2PRendezvous) GetConnectOk() *CMsgSteamNetworkingP2PRendezvous_ConnectOK {
	if x != nil {
		return x.ConnectOk
	}
	return nil
}

func (x *CMsgSteamNetworkingP2PRendezvous) GetConnectionClosed() *CMsgSteamNetworkingP2PRendezvous_ConnectionClosed {
	if x != nil {
		return x.ConnectionClosed
	}
	return nil
}

func (x *CMsgSteamNetworkingP2PRendezvous) GetAckReliableMsg() uint32 {
	if x != nil && x.AckReliableMsg != nil {
		return *x.AckReliableMsg
	}
	return 0
}

func (x *CMsgSteamNetworkingP2PRendezvous) GetFirstReliableMsg() uint32 {
	if x != nil && x.FirstReliableMsg != nil {
		return *x.FirstReliableMsg
	}
	return 0
}

func (x *CMsgSteamNetworkingP2PRendezvous) GetReliableMessages() []*CMsgSteamNetworkingP2PRendezvous_ReliableMessage {
	if x != nil {
		return x.ReliableMessages
	}
	return nil
}

func (x *CMsgSteamNetworkingP2PRendezvous) GetApplicationMessages() []*CMsgSteamNetworkingP2PRendezvous_ApplicationMessage {
	if x != nil {
		return x.ApplicationMessages
	}
	return nil
}

type CMsgSteamNetworkingICESessionSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FailureReasonCode          *uint32 `protobuf:"varint,7,opt,name=failure_reason_code,json=failureReasonCode" json:"failure_reason_code,omitempty"`
	LocalCandidateTypes        *uint32 `protobuf:"varint,1,opt,name=local_candidate_types,json=localCandidateTypes" json:"local_candidate_types,omitempty"`
	RemoteCandidateTypes       *uint32 `protobuf:"varint,2,opt,name=remote_candidate_types,json=remoteCandidateTypes" json:"remote_candidate_types,omitempty"`
	InitialRouteKind           *uint32 `protobuf:"varint,3,opt,name=initial_route_kind,json=initialRouteKind" json:"initial_route_kind,omitempty"`
	InitialPing                *uint32 `protobuf:"varint,4,opt,name=initial_ping,json=initialPing" json:"initial_ping,omitempty"`
	InitialScore               *uint32 `protobuf:"varint,6,opt,name=initial_score,json=initialScore" json:"initial_score,omitempty"`
	NegotiationMs              *uint32 `protobuf:"varint,5,opt,name=negotiation_ms,json=negotiationMs" json:"negotiation_ms,omitempty"`
	BestRouteKind              *uint32 `protobuf:"varint,16,opt,name=best_route_kind,json=bestRouteKind" json:"best_route_kind,omitempty"`
	BestPing                   *uint32 `protobuf:"varint,17,opt,name=best_ping,json=bestPing" json:"best_ping,omitempty"`
	BestScore                  *uint32 `protobuf:"varint,18,opt,name=best_score,json=bestScore" json:"best_score,omitempty"`
	BestTime                   *uint32 `protobuf:"varint,19,opt,name=best_time,json=bestTime" json:"best_time,omitempty"`
	SelectedSeconds            *uint32 `protobuf:"varint,12,opt,name=selected_seconds,json=selectedSeconds" json:"selected_seconds,omitempty"`
	UserSettings               *uint32 `protobuf:"varint,13,opt,name=user_settings,json=userSettings" json:"user_settings,omitempty"`
	IceEnableVar               *uint32 `protobuf:"varint,14,opt,name=ice_enable_var,json=iceEnableVar" json:"ice_enable_var,omitempty"`
	LocalCandidateTypesAllowed *uint32 `protobuf:"varint,15,opt,name=local_candidate_types_allowed,json=localCandidateTypesAllowed" json:"local_candidate_types_allowed,omitempty"`
}

func (x *CMsgSteamNetworkingICESessionSummary) Reset() {
	*x = CMsgSteamNetworkingICESessionSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steamnetworkingsockets_messages_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamNetworkingICESessionSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamNetworkingICESessionSummary) ProtoMessage() {}

func (x *CMsgSteamNetworkingICESessionSummary) ProtoReflect() protoreflect.Message {
	mi := &file_steamnetworkingsockets_messages_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamNetworkingICESessionSummary.ProtoReflect.Descriptor instead.
func (*CMsgSteamNetworkingICESessionSummary) Descriptor() ([]byte, []int) {
	return file_steamnetworkingsockets_messages_proto_rawDescGZIP(), []int{9}
}

func (x *CMsgSteamNetworkingICESessionSummary) GetFailureReasonCode() uint32 {
	if x != nil && x.FailureReasonCode != nil {
		return *x.FailureReasonCode
	}
	return 0
}

func (x *CMsgSteamNetworkingICESessionSummary) GetLocalCandidateTypes() uint32 {
	if x != nil && x.LocalCandidateTypes != nil {
		return *x.LocalCandidateTypes
	}
	return 0
}

func (x *CMsgSteamNetworkingICESessionSummary) GetRemoteCandidateTypes() uint32 {
	if x != nil && x.RemoteCandidateTypes != nil {
		return *x.RemoteCandidateTypes
	}
	return 0
}

func (x *CMsgSteamNetworkingICESessionSummary) GetInitialRouteKind() uint32 {
	if x != nil && x.InitialRouteKind != nil {
		return *x.InitialRouteKind
	}
	return 0
}

func (x *CMsgSteamNetworkingICESessionSummary) GetInitialPing() uint32 {
	if x != nil && x.InitialPing != nil {
		return *x.InitialPing
	}
	return 0
}

func (x *CMsgSteamNetworkingICESessionSummary) GetInitialScore() uint32 {
	if x != nil && x.InitialScore != nil {
		return *x.InitialScore
	}
	return 0
}

func (x *CMsgSteamNetworkingICESessionSummary) GetNegotiationMs() uint32 {
	if x != nil && x.NegotiationMs != nil {
		return *x.NegotiationMs
	}
	return 0
}

func (x *CMsgSteamNetworkingICESessionSummary) GetBestRouteKind() uint32 {
	if x != nil && x.BestRouteKind != nil {
		return *x.BestRouteKind
	}
	return 0
}

func (x *CMsgSteamNetworkingICESessionSummary) GetBestPing() uint32 {
	if x != nil && x.BestPing != nil {
		return *x.BestPing
	}
	return 0
}

func (x *CMsgSteamNetworkingICESessionSummary) GetBestScore() uint32 {
	if x != nil && x.BestScore != nil {
		return *x.BestScore
	}
	return 0
}

func (x *CMsgSteamNetworkingICESessionSummary) GetBestTime() uint32 {
	if x != nil && x.BestTime != nil {
		return *x.BestTime
	}
	return 0
}

func (x *CMsgSteamNetworkingICESessionSummary) GetSelectedSeconds() uint32 {
	if x != nil && x.SelectedSeconds != nil {
		return *x.SelectedSeconds
	}
	return 0
}

func (x *CMsgSteamNetworkingICESessionSummary) GetUserSettings() uint32 {
	if x != nil && x.UserSettings != nil {
		return *x.UserSettings
	}
	return 0
}

func (x *CMsgSteamNetworkingICESessionSummary) GetIceEnableVar() uint32 {
	if x != nil && x.IceEnableVar != nil {
		return *x.IceEnableVar
	}
	return 0
}

func (x *CMsgSteamNetworkingICESessionSummary) GetLocalCandidateTypesAllowed() uint32 {
	if x != nil && x.LocalCandidateTypesAllowed != nil {
		return *x.LocalCandidateTypesAllowed
	}
	return 0
}

type CMsgICERendezvous_Auth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PwdFrag *string `protobuf:"bytes,1,opt,name=pwd_frag,json=pwdFrag" json:"pwd_frag,omitempty"`
}

func (x *CMsgICERendezvous_Auth) Reset() {
	*x = CMsgICERendezvous_Auth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steamnetworkingsockets_messages_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgICERendezvous_Auth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgICERendezvous_Auth) ProtoMessage() {}

func (x *CMsgICERendezvous_Auth) ProtoReflect() protoreflect.Message {
	mi := &file_steamnetworkingsockets_messages_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgICERendezvous_Auth.ProtoReflect.Descriptor instead.
func (*CMsgICERendezvous_Auth) Descriptor() ([]byte, []int) {
	return file_steamnetworkingsockets_messages_proto_rawDescGZIP(), []int{7, 0}
}

func (x *CMsgICERendezvous_Auth) GetPwdFrag() string {
	if x != nil && x.PwdFrag != nil {
		return *x.PwdFrag
	}
	return ""
}

type CMsgSteamNetworkingP2PRendezvous_ConnectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Crypt           *CMsgSteamDatagramSessionCryptInfoSigned `protobuf:"bytes,6,opt,name=crypt" json:"crypt,omitempty"`
	Cert            *CMsgSteamDatagramCertificateSigned      `protobuf:"bytes,7,opt,name=cert" json:"cert,omitempty"`
	ToVirtualPort   *uint32                                  `protobuf:"varint,9,opt,name=to_virtual_port,json=toVirtualPort" json:"to_virtual_port,omitempty"`
	FromVirtualPort *uint32                                  `protobuf:"varint,10,opt,name=from_virtual_port,json=fromVirtualPort" json:"from_virtual_port,omitempty"`
	FromFakeip      *string                                  `protobuf:"bytes,11,opt,name=from_fakeip,json=fromFakeip" json:"from_fakeip,omitempty"`
}

func (x *CMsgSteamNetworkingP2PRendezvous_ConnectRequest) Reset() {
	*x = CMsgSteamNetworkingP2PRendezvous_ConnectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steamnetworkingsockets_messages_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamNetworkingP2PRendezvous_ConnectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamNetworkingP2PRendezvous_ConnectRequest) ProtoMessage() {}

func (x *CMsgSteamNetworkingP2PRendezvous_ConnectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_steamnetworkingsockets_messages_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamNetworkingP2PRendezvous_ConnectRequest.ProtoReflect.Descriptor instead.
func (*CMsgSteamNetworkingP2PRendezvous_ConnectRequest) Descriptor() ([]byte, []int) {
	return file_steamnetworkingsockets_messages_proto_rawDescGZIP(), []int{8, 0}
}

func (x *CMsgSteamNetworkingP2PRendezvous_ConnectRequest) GetCrypt() *CMsgSteamDatagramSessionCryptInfoSigned {
	if x != nil {
		return x.Crypt
	}
	return nil
}

func (x *CMsgSteamNetworkingP2PRendezvous_ConnectRequest) GetCert() *CMsgSteamDatagramCertificateSigned {
	if x != nil {
		return x.Cert
	}
	return nil
}

func (x *CMsgSteamNetworkingP2PRendezvous_ConnectRequest) GetToVirtualPort() uint32 {
	if x != nil && x.ToVirtualPort != nil {
		return *x.ToVirtualPort
	}
	return 0
}

func (x *CMsgSteamNetworkingP2PRendezvous_ConnectRequest) GetFromVirtualPort() uint32 {
	if x != nil && x.FromVirtualPort != nil {
		return *x.FromVirtualPort
	}
	return 0
}

func (x *CMsgSteamNetworkingP2PRendezvous_ConnectRequest) GetFromFakeip() string {
	if x != nil && x.FromFakeip != nil {
		return *x.FromFakeip
	}
	return ""
}

type CMsgSteamNetworkingP2PRendezvous_ConnectOK struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Crypt *CMsgSteamDatagramSessionCryptInfoSigned `protobuf:"bytes,5,opt,name=crypt" json:"crypt,omitempty"`
	Cert  *CMsgSteamDatagramCertificateSigned      `protobuf:"bytes,6,opt,name=cert" json:"cert,omitempty"`
}

func (x *CMsgSteamNetworkingP2PRendezvous_ConnectOK) Reset() {
	*x = CMsgSteamNetworkingP2PRendezvous_ConnectOK{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steamnetworkingsockets_messages_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamNetworkingP2PRendezvous_ConnectOK) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamNetworkingP2PRendezvous_ConnectOK) ProtoMessage() {}

func (x *CMsgSteamNetworkingP2PRendezvous_ConnectOK) ProtoReflect() protoreflect.Message {
	mi := &file_steamnetworkingsockets_messages_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamNetworkingP2PRendezvous_ConnectOK.ProtoReflect.Descriptor instead.
func (*CMsgSteamNetworkingP2PRendezvous_ConnectOK) Descriptor() ([]byte, []int) {
	return file_steamnetworkingsockets_messages_proto_rawDescGZIP(), []int{8, 1}
}

func (x *CMsgSteamNetworkingP2PRendezvous_ConnectOK) GetCrypt() *CMsgSteamDatagramSessionCryptInfoSigned {
	if x != nil {
		return x.Crypt
	}
	return nil
}

func (x *CMsgSteamNetworkingP2PRendezvous_ConnectOK) GetCert() *CMsgSteamDatagramCertificateSigned {
	if x != nil {
		return x.Cert
	}
	return nil
}

type CMsgSteamNetworkingP2PRendezvous_ConnectionClosed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Debug      *string `protobuf:"bytes,5,opt,name=debug" json:"debug,omitempty"`
	ReasonCode *uint32 `protobuf:"varint,6,opt,name=reason_code,json=reasonCode" json:"reason_code,omitempty"`
}

func (x *CMsgSteamNetworkingP2PRendezvous_ConnectionClosed) Reset() {
	*x = CMsgSteamNetworkingP2PRendezvous_ConnectionClosed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steamnetworkingsockets_messages_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamNetworkingP2PRendezvous_ConnectionClosed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamNetworkingP2PRendezvous_ConnectionClosed) ProtoMessage() {}

func (x *CMsgSteamNetworkingP2PRendezvous_ConnectionClosed) ProtoReflect() protoreflect.Message {
	mi := &file_steamnetworkingsockets_messages_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamNetworkingP2PRendezvous_ConnectionClosed.ProtoReflect.Descriptor instead.
func (*CMsgSteamNetworkingP2PRendezvous_ConnectionClosed) Descriptor() ([]byte, []int) {
	return file_steamnetworkingsockets_messages_proto_rawDescGZIP(), []int{8, 2}
}

func (x *CMsgSteamNetworkingP2PRendezvous_ConnectionClosed) GetDebug() string {
	if x != nil && x.Debug != nil {
		return *x.Debug
	}
	return ""
}

func (x *CMsgSteamNetworkingP2PRendezvous_ConnectionClosed) GetReasonCode() uint32 {
	if x != nil && x.ReasonCode != nil {
		return *x.ReasonCode
	}
	return 0
}

type CMsgSteamNetworkingP2PRendezvous_ReliableMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ice *CMsgICERendezvous `protobuf:"bytes,1,opt,name=ice" json:"ice,omitempty"`
}

func (x *CMsgSteamNetworkingP2PRendezvous_ReliableMessage) Reset() {
	*x = CMsgSteamNetworkingP2PRendezvous_ReliableMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steamnetworkingsockets_messages_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamNetworkingP2PRendezvous_ReliableMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamNetworkingP2PRendezvous_ReliableMessage) ProtoMessage() {}

func (x *CMsgSteamNetworkingP2PRendezvous_ReliableMessage) ProtoReflect() protoreflect.Message {
	mi := &file_steamnetworkingsockets_messages_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamNetworkingP2PRendezvous_ReliableMessage.ProtoReflect.Descriptor instead.
func (*CMsgSteamNetworkingP2PRendezvous_ReliableMessage) Descriptor() ([]byte, []int) {
	return file_steamnetworkingsockets_messages_proto_rawDescGZIP(), []int{8, 3}
}

func (x *CMsgSteamNetworkingP2PRendezvous_ReliableMessage) GetIce() *CMsgICERendezvous {
	if x != nil {
		return x.Ice
	}
	return nil
}

type CMsgSteamNetworkingP2PRendezvous_ApplicationMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data    []byte  `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	MsgNum  *uint64 `protobuf:"varint,2,opt,name=msg_num,json=msgNum" json:"msg_num,omitempty"`
	Flags   *uint32 `protobuf:"varint,3,opt,name=flags" json:"flags,omitempty"`
	LaneIdx *uint32 `protobuf:"varint,4,opt,name=lane_idx,json=laneIdx" json:"lane_idx,omitempty"`
}

func (x *CMsgSteamNetworkingP2PRendezvous_ApplicationMessage) Reset() {
	*x = CMsgSteamNetworkingP2PRendezvous_ApplicationMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steamnetworkingsockets_messages_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamNetworkingP2PRendezvous_ApplicationMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamNetworkingP2PRendezvous_ApplicationMessage) ProtoMessage() {}

func (x *CMsgSteamNetworkingP2PRendezvous_ApplicationMessage) ProtoReflect() protoreflect.Message {
	mi := &file_steamnetworkingsockets_messages_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamNetworkingP2PRendezvous_ApplicationMessage.ProtoReflect.Descriptor instead.
func (*CMsgSteamNetworkingP2PRendezvous_ApplicationMessage) Descriptor() ([]byte, []int) {
	return file_steamnetworkingsockets_messages_proto_rawDescGZIP(), []int{8, 4}
}

func (x *CMsgSteamNetworkingP2PRendezvous_ApplicationMessage) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CMsgSteamNetworkingP2PRendezvous_ApplicationMessage) GetMsgNum() uint64 {
	if x != nil && x.MsgNum != nil {
		return *x.MsgNum
	}
	return 0
}

func (x *CMsgSteamNetworkingP2PRendezvous_ApplicationMessage) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *CMsgSteamNetworkingP2PRendezvous_ApplicationMessage) GetLaneIdx() uint32 {
	if x != nil && x.LaneIdx != nil {
		return *x.LaneIdx
	}
	return 0
}

var File_steamnetworkingsockets_messages_proto protoreflect.FileDescriptor

var file_steamnetworkingsockets_messages_proto_rawDesc = []byte{
	0x0a, 0x25, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x64, 0x6f, 0x74, 0x61, 0x1a, 0x2b, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x6f,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x63,
	0x65, 0x72, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb4, 0x02, 0x0a, 0x21, 0x43,
	0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x4b, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x30, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x45, 0x4b, 0x65, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x6b, 0x65, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x6b, 0x65, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x29,
	0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x07, 0x63, 0x69, 0x70,
	0x68, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x64, 0x6f, 0x74,
	0x61, 0x2e, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69,
	0x6e, 0x67, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x52,
	0x07, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x73, 0x22, 0x27, 0x0a, 0x08, 0x45, 0x4b, 0x65, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10,
	0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x55, 0x52, 0x56, 0x45, 0x32, 0x35, 0x35, 0x31, 0x39, 0x10,
	0x01, 0x22, 0x5b, 0x0a, 0x27, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61,
	0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x79,
	0x70, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x4d,
	0x0a, 0x1b, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67,
	0x72, 0x61, 0x6d, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0x97, 0x03,
	0x0a, 0x27, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67,
	0x72, 0x61, 0x6d, 0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x61, 0x6e,
	0x65, 0x6f, 0x75, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x17, 0x6f, 0x75, 0x74,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63,
	0x5f, 0x78, 0x31, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6f, 0x75, 0x74, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x58, 0x31, 0x30, 0x12,
	0x29, 0x0a, 0x11, 0x6f, 0x75, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72,
	0x5f, 0x73, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6f, 0x75, 0x74, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x12, 0x32, 0x0a, 0x16, 0x69, 0x6e,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63,
	0x5f, 0x78, 0x31, 0x30, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x69, 0x6e, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x58, 0x31, 0x30, 0x12, 0x27,
	0x0a, 0x10, 0x69, 0x6e, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x69, 0x6e, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x69, 0x6e, 0x67, 0x5f,
	0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x69, 0x6e, 0x67, 0x4d, 0x73,
	0x12, 0x2e, 0x0a, 0x13, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x64, 0x72, 0x6f, 0x70,
	0x70, 0x65, 0x64, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x50, 0x63, 0x74,
	0x12, 0x3b, 0x0a, 0x1a, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x77, 0x65, 0x69, 0x72,
	0x64, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x57, 0x65, 0x69,
	0x72, 0x64, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x63, 0x74, 0x12, 0x28, 0x0a,
	0x10, 0x70, 0x65, 0x61, 0x6b, 0x5f, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65,
	0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x70, 0x65, 0x61, 0x6b, 0x4a, 0x69, 0x74,
	0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x63, 0x22, 0xd3, 0x1b, 0x0a, 0x22, 0x43, 0x4d, 0x73, 0x67,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x4c, 0x69, 0x6e,
	0x6b, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x2b,
	0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x6b, 0x62, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x6b, 0x62, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x76, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x63, 0x76, 0x12, 0x17, 0x0a, 0x07, 0x6b, 0x62,
	0x5f, 0x72, 0x65, 0x63, 0x76, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6b, 0x62, 0x52,
	0x65, 0x63, 0x76, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x72,
	0x65, 0x63, 0x76, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x14, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x63, 0x76,
	0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x76, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x52, 0x65, 0x63, 0x76, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x19, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x76, 0x5f, 0x6f, 0x75, 0x74, 0x5f,
	0x6f, 0x66, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x63, 0x76, 0x4f, 0x75, 0x74, 0x4f, 0x66,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x5f, 0x72, 0x65, 0x63, 0x76, 0x5f, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65,
	0x63, 0x76, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x76, 0x5f, 0x6c, 0x75, 0x72, 0x63,
	0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x52, 0x65, 0x63, 0x76, 0x4c, 0x75, 0x72, 0x63, 0x68, 0x12, 0x47, 0x0a, 0x20, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x72,
	0x65, 0x63, 0x76, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x18, 0x0c, 0x20,
	0x03, 0x28, 0x04, 0x52, 0x1d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x74, 0x68, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x63, 0x76, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x64, 0x12, 0x3f, 0x0a, 0x1c, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x74, 0x68, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x76, 0x5f, 0x6c, 0x61, 0x74,
	0x65, 0x72, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x04, 0x52, 0x19, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x61, 0x74, 0x68, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x63, 0x76, 0x4c, 0x61,
	0x74, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x16, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x74, 0x68,
	0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x14, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x74, 0x68, 0x53, 0x65,
	0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x31,
	0x30, 0x30, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x31, 0x30, 0x30, 0x12, 0x30, 0x0a,
	0x14, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x5f, 0x39, 0x39, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x39, 0x39, 0x12,
	0x30, 0x0a, 0x14, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x5f, 0x39, 0x37, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x39,
	0x37, 0x12, 0x30, 0x0a, 0x14, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x68, 0x69, 0x73,
	0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x39, 0x35, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x12, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x39, 0x35, 0x12, 0x30, 0x0a, 0x14, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x39, 0x30, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x12, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x39, 0x30, 0x12, 0x30, 0x0a, 0x14, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x37, 0x35, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x12, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x37, 0x35, 0x12, 0x30, 0x0a, 0x14, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x35, 0x30, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x35, 0x30, 0x12, 0x2e, 0x0a, 0x13, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x31,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x31, 0x12, 0x34, 0x0a, 0x16, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x64,
	0x65, 0x61, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x44, 0x65, 0x61, 0x64, 0x12,
	0x2a, 0x0a, 0x11, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x74, 0x69, 0x6c, 0x65,
	0x5f, 0x32, 0x6e, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x4e, 0x74, 0x69, 0x6c, 0x65, 0x32, 0x6e, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x5f, 0x35, 0x74, 0x68,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x4e,
	0x74, 0x69, 0x6c, 0x65, 0x35, 0x74, 0x68, 0x12, 0x2c, 0x0a, 0x12, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x5f, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x5f, 0x32, 0x35, 0x74, 0x68, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x10, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x4e, 0x74, 0x69, 0x6c,
	0x65, 0x32, 0x35, 0x74, 0x68, 0x12, 0x2c, 0x0a, 0x12, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x5f, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x5f, 0x35, 0x30, 0x74, 0x68, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x4e, 0x74, 0x69, 0x6c, 0x65, 0x35,
	0x30, 0x74, 0x68, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x69, 0x73, 0x74,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x32, 0x35, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x70, 0x69, 0x6e, 0x67, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x32, 0x35, 0x12,
	0x2a, 0x0a, 0x11, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x5f, 0x35, 0x30, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x69, 0x6e, 0x67,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x35, 0x30, 0x12, 0x2a, 0x0a, 0x11, 0x70,
	0x69, 0x6e, 0x67, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x37, 0x35,
	0x18, 0x2b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x69, 0x6e, 0x67, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x37, 0x35, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x69, 0x6e, 0x67, 0x5f,
	0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x31, 0x30, 0x30, 0x18, 0x2c, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x10, 0x70, 0x69, 0x6e, 0x67, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x31, 0x30, 0x30, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x69,
	0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x31, 0x32, 0x35, 0x18, 0x2d, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x70, 0x69, 0x6e, 0x67, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x31, 0x32, 0x35, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x69, 0x73, 0x74,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x31, 0x35, 0x30, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x10, 0x70, 0x69, 0x6e, 0x67, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x31, 0x35,
	0x30, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x5f, 0x32, 0x30, 0x30, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x70,
	0x69, 0x6e, 0x67, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x32, 0x30, 0x30, 0x12,
	0x2c, 0x0a, 0x12, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x5f, 0x33, 0x30, 0x30, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x70, 0x69, 0x6e,
	0x67, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x33, 0x30, 0x30, 0x12, 0x2c, 0x0a,
	0x12, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f,
	0x6d, 0x61, 0x78, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x70, 0x69, 0x6e, 0x67, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4d, 0x61, 0x78, 0x12, 0x24, 0x0a, 0x0e, 0x70,
	0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x5f, 0x35, 0x74, 0x68, 0x18, 0x32, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x69, 0x6e, 0x67, 0x4e, 0x74, 0x69, 0x6c, 0x65, 0x35, 0x74,
	0x68, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x5f,
	0x35, 0x30, 0x74, 0x68, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x69, 0x6e, 0x67,
	0x4e, 0x74, 0x69, 0x6c, 0x65, 0x35, 0x30, 0x74, 0x68, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x69, 0x6e,
	0x67, 0x5f, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x5f, 0x37, 0x35, 0x74, 0x68, 0x18, 0x34, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x70, 0x69, 0x6e, 0x67, 0x4e, 0x74, 0x69, 0x6c, 0x65, 0x37, 0x35, 0x74,
	0x68, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x5f,
	0x39, 0x35, 0x74, 0x68, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x69, 0x6e, 0x67,
	0x4e, 0x74, 0x69, 0x6c, 0x65, 0x39, 0x35, 0x74, 0x68, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x69, 0x6e,
	0x67, 0x5f, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x5f, 0x39, 0x38, 0x74, 0x68, 0x18, 0x36, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x70, 0x69, 0x6e, 0x67, 0x4e, 0x74, 0x69, 0x6c, 0x65, 0x39, 0x38, 0x74,
	0x68, 0x12, 0x3e, 0x0a, 0x1b, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x68, 0x69, 0x73, 0x74,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x6e, 0x65, 0x67, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65,
	0x18, 0x3d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e, 0x65, 0x67, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c,
	0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x68, 0x69, 0x73, 0x74,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x31, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6a,
	0x69, 0x74, 0x74, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x31, 0x12,
	0x2c, 0x0a, 0x12, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x5f, 0x32, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6a, 0x69, 0x74,
	0x74, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x32, 0x12, 0x2c, 0x0a,
	0x12, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x5f, 0x35, 0x18, 0x40, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6a, 0x69, 0x74, 0x74, 0x65,
	0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x35, 0x12, 0x2e, 0x0a, 0x13, 0x6a,
	0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f,
	0x31, 0x30, 0x18, 0x41, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x31, 0x30, 0x12, 0x2e, 0x0a, 0x13, 0x6a,
	0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f,
	0x32, 0x30, 0x18, 0x42, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x32, 0x30, 0x12, 0x1f, 0x0a, 0x0b, 0x74,
	0x78, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x43, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x74, 0x78, 0x73, 0x70, 0x65, 0x65, 0x64, 0x4d, 0x61, 0x78, 0x12, 0x30, 0x0a, 0x14,
	0x74, 0x78, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x5f, 0x31, 0x36, 0x18, 0x44, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x74, 0x78, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x31, 0x36, 0x12, 0x30,
	0x0a, 0x14, 0x74, 0x78, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x5f, 0x33, 0x32, 0x18, 0x45, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x74, 0x78,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x33, 0x32,
	0x12, 0x30, 0x0a, 0x14, 0x74, 0x78, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x68, 0x69, 0x73, 0x74,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x36, 0x34, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12,
	0x74, 0x78, 0x73, 0x70, 0x65, 0x65, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x36, 0x34, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x78, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x68, 0x69,
	0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x31, 0x32, 0x38, 0x18, 0x47, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x13, 0x74, 0x78, 0x73, 0x70, 0x65, 0x65, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x31, 0x32, 0x38, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x78, 0x73, 0x70, 0x65, 0x65,
	0x64, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x32, 0x35, 0x36, 0x18,
	0x48, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x74, 0x78, 0x73, 0x70, 0x65, 0x65, 0x64, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x32, 0x35, 0x36, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x78,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f,
	0x35, 0x31, 0x32, 0x18, 0x49, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x74, 0x78, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x35, 0x31, 0x32, 0x12, 0x34,
	0x0a, 0x16, 0x74, 0x78, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x5f, 0x31, 0x30, 0x32, 0x34, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14,
	0x74, 0x78, 0x73, 0x70, 0x65, 0x65, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x31, 0x30, 0x32, 0x34, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x78, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f,
	0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x4b, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x13, 0x74, 0x78, 0x73, 0x70, 0x65, 0x65, 0x64, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4d, 0x61, 0x78, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x78, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x5f, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x5f, 0x35, 0x74, 0x68, 0x18, 0x4c, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x78, 0x73, 0x70, 0x65, 0x65, 0x64, 0x4e, 0x74, 0x69, 0x6c,
	0x65, 0x35, 0x74, 0x68, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x78, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f,
	0x6e, 0x74, 0x69, 0x6c, 0x65, 0x5f, 0x35, 0x30, 0x74, 0x68, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x74, 0x78, 0x73, 0x70, 0x65, 0x65, 0x64, 0x4e, 0x74, 0x69, 0x6c, 0x65, 0x35, 0x30,
	0x74, 0x68, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x78, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x6e, 0x74,
	0x69, 0x6c, 0x65, 0x5f, 0x37, 0x35, 0x74, 0x68, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10,
	0x74, 0x78, 0x73, 0x70, 0x65, 0x65, 0x64, 0x4e, 0x74, 0x69, 0x6c, 0x65, 0x37, 0x35, 0x74, 0x68,
	0x12, 0x2c, 0x0a, 0x12, 0x74, 0x78, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x6e, 0x74, 0x69, 0x6c,
	0x65, 0x5f, 0x39, 0x35, 0x74, 0x68, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x74, 0x78,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x4e, 0x74, 0x69, 0x6c, 0x65, 0x39, 0x35, 0x74, 0x68, 0x12, 0x2c,
	0x0a, 0x12, 0x74, 0x78, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x5f,
	0x39, 0x38, 0x74, 0x68, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x74, 0x78, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x4e, 0x74, 0x69, 0x6c, 0x65, 0x39, 0x38, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b,
	0x72, 0x78, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x51, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x72, 0x78, 0x73, 0x70, 0x65, 0x65, 0x64, 0x4d, 0x61, 0x78, 0x12, 0x30, 0x0a,
	0x14, 0x72, 0x78, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x5f, 0x31, 0x36, 0x18, 0x52, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x72, 0x78, 0x73,
	0x70, 0x65, 0x65, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x31, 0x36, 0x12,
	0x30, 0x0a, 0x14, 0x72, 0x78, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x5f, 0x33, 0x32, 0x18, 0x53, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x72,
	0x78, 0x73, 0x70, 0x65, 0x65, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x33,
	0x32, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x78, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x68, 0x69, 0x73,
	0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x36, 0x34, 0x18, 0x54, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x12, 0x72, 0x78, 0x73, 0x70, 0x65, 0x65, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x36, 0x34, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x78, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x31, 0x32, 0x38, 0x18, 0x55, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x13, 0x72, 0x78, 0x73, 0x70, 0x65, 0x65, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x31, 0x32, 0x38, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x78, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x32, 0x35, 0x36,
	0x18, 0x56, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x72, 0x78, 0x73, 0x70, 0x65, 0x65, 0x64, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x32, 0x35, 0x36, 0x12, 0x32, 0x0a, 0x15, 0x72,
	0x78, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x5f, 0x35, 0x31, 0x32, 0x18, 0x57, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x72, 0x78, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x35, 0x31, 0x32, 0x12,
	0x34, 0x0a, 0x16, 0x72, 0x78, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x5f, 0x31, 0x30, 0x32, 0x34, 0x18, 0x58, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x14, 0x72, 0x78, 0x73, 0x70, 0x65, 0x65, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x31, 0x30, 0x32, 0x34, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x78, 0x73, 0x70, 0x65, 0x65, 0x64,
	0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x59,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x72, 0x78, 0x73, 0x70, 0x65, 0x65, 0x64, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4d, 0x61, 0x78, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x78, 0x73,
	0x70, 0x65, 0x65, 0x64, 0x5f, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x5f, 0x35, 0x74, 0x68, 0x18, 0x5a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x78, 0x73, 0x70, 0x65, 0x65, 0x64, 0x4e, 0x74, 0x69,
	0x6c, 0x65, 0x35, 0x74, 0x68, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x78, 0x73, 0x70, 0x65, 0x65, 0x64,
	0x5f, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x5f, 0x35, 0x30, 0x74, 0x68, 0x18, 0x5b, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x72, 0x78, 0x73, 0x70, 0x65, 0x65, 0x64, 0x4e, 0x74, 0x69, 0x6c, 0x65, 0x35,
	0x30, 0x74, 0x68, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x78, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x6e,
	0x74, 0x69, 0x6c, 0x65, 0x5f, 0x37, 0x35, 0x74, 0x68, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x10, 0x72, 0x78, 0x73, 0x70, 0x65, 0x65, 0x64, 0x4e, 0x74, 0x69, 0x6c, 0x65, 0x37, 0x35, 0x74,
	0x68, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x78, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x6e, 0x74, 0x69,
	0x6c, 0x65, 0x5f, 0x39, 0x35, 0x74, 0x68, 0x18, 0x5d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x72,
	0x78, 0x73, 0x70, 0x65, 0x65, 0x64, 0x4e, 0x74, 0x69, 0x6c, 0x65, 0x39, 0x35, 0x74, 0x68, 0x12,
	0x2c, 0x0a, 0x12, 0x72, 0x78, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x6e, 0x74, 0x69, 0x6c, 0x65,
	0x5f, 0x39, 0x38, 0x74, 0x68, 0x18, 0x5e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x72, 0x78, 0x73,
	0x70, 0x65, 0x65, 0x64, 0x4e, 0x74, 0x69, 0x6c, 0x65, 0x39, 0x38, 0x74, 0x68, 0x22, 0xbf, 0x01,
	0x0a, 0x22, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67,
	0x72, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0x53, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x61,
	0x6e, 0x65, 0x6f, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x64, 0x6f,
	0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61,
	0x67, 0x72, 0x61, 0x6d, 0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x61,
	0x6e, 0x65, 0x6f, 0x75, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x61, 0x6e, 0x65, 0x6f, 0x75, 0x73, 0x12, 0x44, 0x0a, 0x08, 0x6c, 0x69, 0x66,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x64, 0x6f,
	0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61,
	0x67, 0x72, 0x61, 0x6d, 0x4c, 0x69, 0x6e, 0x6b, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x08, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x22,
	0x30, 0x0a, 0x10, 0x43, 0x4d, 0x73, 0x67, 0x49, 0x43, 0x45, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x22, 0xa5, 0x01, 0x0a, 0x11, 0x43, 0x4d, 0x73, 0x67, 0x49, 0x43, 0x45, 0x52, 0x65, 0x6e,
	0x64, 0x65, 0x7a, 0x76, 0x6f, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x49, 0x43, 0x45, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x7a, 0x76, 0x6f, 0x75, 0x73, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x3b, 0x0a, 0x0d, 0x61, 0x64, 0x64,
	0x5f, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x49, 0x43, 0x45, 0x43,
	0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x61, 0x64, 0x64, 0x43, 0x61, 0x6e,
	0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x1a, 0x21, 0x0a, 0x04, 0x41, 0x75, 0x74, 0x68, 0x12, 0x19,
	0x0a, 0x08, 0x70, 0x77, 0x64, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x77, 0x64, 0x46, 0x72, 0x61, 0x67, 0x22, 0xc6, 0x0c, 0x0a, 0x20, 0x43, 0x4d,
	0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x50, 0x32, 0x50, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x7a, 0x76, 0x6f, 0x75, 0x73, 0x12, 0x23,
	0x0a, 0x0d, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x07, 0x52,
	0x10, 0x66, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x6f, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0e, 0x74, 0x6f,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x64, 0x72, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x09, 0x73, 0x64, 0x72, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x61,
	0x63, 0x6b, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x72,
	0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x61,
	0x63, 0x6b, 0x50, 0x65, 0x65, 0x72, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x63, 0x65, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x68, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x12, 0x68, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x5e, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x35, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x50, 0x32, 0x50, 0x52, 0x65,
	0x6e, 0x64, 0x65, 0x7a, 0x76, 0x6f, 0x75, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x5f, 0x6f, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x64, 0x6f,
	0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x50, 0x32, 0x50, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x7a, 0x76,
	0x6f, 0x75, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4f, 0x4b, 0x52, 0x09, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4f, 0x6b, 0x12, 0x64, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x50, 0x32,
	0x50, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x7a, 0x76, 0x6f, 0x75, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x52, 0x10, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x28,
	0x0a, 0x10, 0x61, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d,
	0x73, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x6c,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x5f, 0x72, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x66, 0x69, 0x72, 0x73, 0x74, 0x52, 0x65, 0x6c, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x63, 0x0a, 0x11, 0x72, 0x65, 0x6c, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x36, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x50, 0x32, 0x50, 0x52,
	0x65, 0x6e, 0x64, 0x65, 0x7a, 0x76, 0x6f, 0x75, 0x73, 0x2e, 0x52, 0x65, 0x6c, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x10, 0x72, 0x65, 0x6c, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x6c, 0x0a, 0x14, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x64, 0x6f, 0x74, 0x61,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x50, 0x32, 0x50, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x7a, 0x76, 0x6f, 0x75,
	0x73, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x13, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x1a, 0x88, 0x02, 0x0a, 0x0e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x05,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x64, 0x6f,
	0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61,
	0x67, 0x72, 0x61, 0x6d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x79, 0x70, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x52, 0x05, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x12, 0x3c, 0x0a, 0x04, 0x63, 0x65, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x52, 0x04, 0x63, 0x65, 0x72, 0x74, 0x12,
	0x26, 0x0a, 0x0f, 0x74, 0x6f, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x6f, 0x56, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x66, 0x72, 0x6f, 0x6d, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x50,
	0x6f, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x66, 0x61, 0x6b, 0x65,
	0x69, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x46, 0x61,
	0x6b, 0x65, 0x69, 0x70, 0x1a, 0x8e, 0x01, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x4f, 0x4b, 0x12, 0x43, 0x0a, 0x05, 0x63, 0x72, 0x79, 0x70, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x52, 0x05, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x3c, 0x0a, 0x04, 0x63, 0x65, 0x72, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x52,
	0x04, 0x63, 0x65, 0x72, 0x74, 0x1a, 0x49, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x12,
	0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x1a, 0x3c, 0x0a, 0x0f, 0x52, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x03, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x49, 0x43, 0x45, 0x52,
	0x65, 0x6e, 0x64, 0x65, 0x7a, 0x76, 0x6f, 0x75, 0x73, 0x52, 0x03, 0x69, 0x63, 0x65, 0x1a, 0x72,
	0x0a, 0x12, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x73, 0x67, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6d, 0x73, 0x67, 0x4e, 0x75,
	0x6d, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x65, 0x5f,
	0x69, 0x64, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x61, 0x6e, 0x65, 0x49,
	0x64, 0x78, 0x22, 0x97, 0x05, 0x0a, 0x24, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x43, 0x45, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x2e, 0x0a, 0x13, 0x66,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x34, 0x0a, 0x16, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x14, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4b,
	0x69, 0x6e, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x70,
	0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6e,
	0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x62, 0x65, 0x73,
	0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x65,
	0x73, 0x74, 0x5f, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x62,
	0x65, 0x73, 0x74, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65, 0x73, 0x74, 0x5f,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x65, 0x73,
	0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x62, 0x65, 0x73, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x23,
	0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x76, 0x61, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x69, 0x63, 0x65,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x72, 0x12, 0x41, 0x0a, 0x1d, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x5f, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x1a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x2a, 0xa7, 0x01, 0x0a,
	0x1d, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x12, 0x2b,
	0x0a, 0x27, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x43, 0x69, 0x70, 0x68, 0x65,
	0x72, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x24, 0x6b,
	0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x5f, 0x4e,
	0x55, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x2f, 0x0a, 0x2b, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x6f, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x32, 0x35, 0x36,
	0x5f, 0x47, 0x43, 0x4d, 0x10, 0x02, 0x42, 0x2a, 0x48, 0x01, 0x5a, 0x23, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x74, 0x61, 0x62, 0x75, 0x66, 0x66, 0x2f,
	0x6d, 0x61, 0x6e, 0x74, 0x61, 0x2f, 0x64, 0x6f, 0x74, 0x61, 0x3b, 0x64, 0x6f, 0x74, 0x61, 0x80,
	0x01, 0x00,
}

var (
	file_steamnetworkingsockets_messages_proto_rawDescOnce sync.Once
	file_steamnetworkingsockets_messages_proto_rawDescData = file_steamnetworkingsockets_messages_proto_rawDesc
)

func file_steamnetworkingsockets_messages_proto_rawDescGZIP() []byte {
	file_steamnetworkingsockets_messages_proto_rawDescOnce.Do(func() {
		file_steamnetworkingsockets_messages_proto_rawDescData = protoimpl.X.CompressGZIP(file_steamnetworkingsockets_messages_proto_rawDescData)
	})
	return file_steamnetworkingsockets_messages_proto_rawDescData
}

var file_steamnetworkingsockets_messages_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_steamnetworkingsockets_messages_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_steamnetworkingsockets_messages_proto_goTypes = []interface{}{
	(ESteamNetworkingSocketsCipher)(0),                          // 0: dota.ESteamNetworkingSocketsCipher
	(CMsgSteamDatagramSessionCryptInfo_EKeyType)(0),             // 1: dota.CMsgSteamDatagramSessionCryptInfo.EKeyType
	(*CMsgSteamDatagramSessionCryptInfo)(nil),                   // 2: dota.CMsgSteamDatagramSessionCryptInfo
	(*CMsgSteamDatagramSessionCryptInfoSigned)(nil),             // 3: dota.CMsgSteamDatagramSessionCryptInfoSigned
	(*CMsgSteamDatagramDiagnostic)(nil),                         // 4: dota.CMsgSteamDatagramDiagnostic
	(*CMsgSteamDatagramLinkInstantaneousStats)(nil),             // 5: dota.CMsgSteamDatagramLinkInstantaneousStats
	(*CMsgSteamDatagramLinkLifetimeStats)(nil),                  // 6: dota.CMsgSteamDatagramLinkLifetimeStats
	(*CMsgSteamDatagramConnectionQuality)(nil),                  // 7: dota.CMsgSteamDatagramConnectionQuality
	(*CMsgICECandidate)(nil),                                    // 8: dota.CMsgICECandidate
	(*CMsgICERendezvous)(nil),                                   // 9: dota.CMsgICERendezvous
	(*CMsgSteamNetworkingP2PRendezvous)(nil),                    // 10: dota.CMsgSteamNetworkingP2PRendezvous
	(*CMsgSteamNetworkingICESessionSummary)(nil),                // 11: dota.CMsgSteamNetworkingICESessionSummary
	(*CMsgICERendezvous_Auth)(nil),                              // 12: dota.CMsgICERendezvous.Auth
	(*CMsgSteamNetworkingP2PRendezvous_ConnectRequest)(nil),     // 13: dota.CMsgSteamNetworkingP2PRendezvous.ConnectRequest
	(*CMsgSteamNetworkingP2PRendezvous_ConnectOK)(nil),          // 14: dota.CMsgSteamNetworkingP2PRendezvous.ConnectOK
	(*CMsgSteamNetworkingP2PRendezvous_ConnectionClosed)(nil),   // 15: dota.CMsgSteamNetworkingP2PRendezvous.ConnectionClosed
	(*CMsgSteamNetworkingP2PRendezvous_ReliableMessage)(nil),    // 16: dota.CMsgSteamNetworkingP2PRendezvous.ReliableMessage
	(*CMsgSteamNetworkingP2PRendezvous_ApplicationMessage)(nil), // 17: dota.CMsgSteamNetworkingP2PRendezvous.ApplicationMessage
	(*CMsgSteamDatagramCertificateSigned)(nil),                  // 18: dota.CMsgSteamDatagramCertificateSigned
}
var file_steamnetworkingsockets_messages_proto_depIdxs = []int32{
	1,  // 0: dota.CMsgSteamDatagramSessionCryptInfo.key_type:type_name -> dota.CMsgSteamDatagramSessionCryptInfo.EKeyType
	0,  // 1: dota.CMsgSteamDatagramSessionCryptInfo.ciphers:type_name -> dota.ESteamNetworkingSocketsCipher
	5,  // 2: dota.CMsgSteamDatagramConnectionQuality.instantaneous:type_name -> dota.CMsgSteamDatagramLinkInstantaneousStats
	6,  // 3: dota.CMsgSteamDatagramConnectionQuality.lifetime:type_name -> dota.CMsgSteamDatagramLinkLifetimeStats
	12, // 4: dota.CMsgICERendezvous.auth:type_name -> dota.CMsgICERendezvous.Auth
	8,  // 5: dota.CMsgICERendezvous.add_candidate:type_name -> dota.CMsgICECandidate
	13, // 6: dota.CMsgSteamNetworkingP2PRendezvous.connect_request:type_name -> dota.CMsgSteamNetworkingP2PRendezvous.ConnectRequest
	14, // 7: dota.CMsgSteamNetworkingP2PRendezvous.connect_ok:type_name -> dota.CMsgSteamNetworkingP2PRendezvous.ConnectOK
	15, // 8: dota.CMsgSteamNetworkingP2PRendezvous.connection_closed:type_name -> dota.CMsgSteamNetworkingP2PRendezvous.ConnectionClosed
	16, // 9: dota.CMsgSteamNetworkingP2PRendezvous.reliable_messages:type_name -> dota.CMsgSteamNetworkingP2PRendezvous.ReliableMessage
	17, // 10: dota.CMsgSteamNetworkingP2PRendezvous.application_messages:type_name -> dota.CMsgSteamNetworkingP2PRendezvous.ApplicationMessage
	3,  // 11: dota.CMsgSteamNetworkingP2PRendezvous.ConnectRequest.crypt:type_name -> dota.CMsgSteamDatagramSessionCryptInfoSigned
	18, // 12: dota.CMsgSteamNetworkingP2PRendezvous.ConnectRequest.cert:type_name -> dota.CMsgSteamDatagramCertificateSigned
	3,  // 13: dota.CMsgSteamNetworkingP2PRendezvous.ConnectOK.crypt:type_name -> dota.CMsgSteamDatagramSessionCryptInfoSigned
	18, // 14: dota.CMsgSteamNetworkingP2PRendezvous.ConnectOK.cert:type_name -> dota.CMsgSteamDatagramCertificateSigned
	9,  // 15: dota.CMsgSteamNetworkingP2PRendezvous.ReliableMessage.ice:type_name -> dota.CMsgICERendezvous
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_steamnetworkingsockets_messages_proto_init() }
func file_steamnetworkingsockets_messages_proto_init() {
	if File_steamnetworkingsockets_messages_proto != nil {
		return
	}
	file_steamnetworkingsockets_messages_certs_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_steamnetworkingsockets_messages_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSteamDatagramSessionCryptInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steamnetworkingsockets_messages_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSteamDatagramSessionCryptInfoSigned); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steamnetworkingsockets_messages_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSteamDatagramDiagnostic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steamnetworkingsockets_messages_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSteamDatagramLinkInstantaneousStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steamnetworkingsockets_messages_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSteamDatagramLinkLifetimeStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steamnetworkingsockets_messages_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSteamDatagramConnectionQuality); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steamnetworkingsockets_messages_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgICECandidate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steamnetworkingsockets_messages_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgICERendezvous); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steamnetworkingsockets_messages_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSteamNetworkingP2PRendezvous); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steamnetworkingsockets_messages_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSteamNetworkingICESessionSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steamnetworkingsockets_messages_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgICERendezvous_Auth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steamnetworkingsockets_messages_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSteamNetworkingP2PRendezvous_ConnectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steamnetworkingsockets_messages_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSteamNetworkingP2PRendezvous_ConnectOK); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steamnetworkingsockets_messages_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSteamNetworkingP2PRendezvous_ConnectionClosed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steamnetworkingsockets_messages_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSteamNetworkingP2PRendezvous_ReliableMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steamnetworkingsockets_messages_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSteamNetworkingP2PRendezvous_ApplicationMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_steamnetworkingsockets_messages_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_steamnetworkingsockets_messages_proto_goTypes,
		DependencyIndexes: file_steamnetworkingsockets_messages_proto_depIdxs,
		EnumInfos:         file_steamnetworkingsockets_messages_proto_enumTypes,
		MessageInfos:      file_steamnetworkingsockets_messages_proto_msgTypes,
	}.Build()
	File_steamnetworkingsockets_messages_proto = out.File
	file_steamnetworkingsockets_messages_proto_rawDesc = nil
	file_steamnetworkingsockets_messages_proto_goTypes = nil
	file_steamnetworkingsockets_messages_proto_depIdxs = nil
}
