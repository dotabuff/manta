// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.6.1
// source: dota_match_metadata.proto

package dota

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type CDOTAMatchMetadataFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version         *int32              `protobuf:"varint,1,req,name=version" json:"version,omitempty"`
	MatchId         *uint64             `protobuf:"varint,2,req,name=match_id,json=matchId" json:"match_id,omitempty"`
	Metadata        *CDOTAMatchMetadata `protobuf:"bytes,3,opt,name=metadata" json:"metadata,omitempty"`
	PrivateMetadata []byte              `protobuf:"bytes,5,opt,name=private_metadata,json=privateMetadata" json:"private_metadata,omitempty"`
}

func (x *CDOTAMatchMetadataFile) Reset() {
	*x = CDOTAMatchMetadataFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_match_metadata_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAMatchMetadataFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAMatchMetadataFile) ProtoMessage() {}

func (x *CDOTAMatchMetadataFile) ProtoReflect() protoreflect.Message {
	mi := &file_dota_match_metadata_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAMatchMetadataFile.ProtoReflect.Descriptor instead.
func (*CDOTAMatchMetadataFile) Descriptor() ([]byte, []int) {
	return file_dota_match_metadata_proto_rawDescGZIP(), []int{0}
}

func (x *CDOTAMatchMetadataFile) GetVersion() int32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *CDOTAMatchMetadataFile) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CDOTAMatchMetadataFile) GetMetadata() *CDOTAMatchMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *CDOTAMatchMetadataFile) GetPrivateMetadata() []byte {
	if x != nil {
		return x.PrivateMetadata
	}
	return nil
}

type CDOTAMatchMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Teams                  []*CDOTAMatchMetadata_Team                   `protobuf:"bytes,1,rep,name=teams" json:"teams,omitempty"`
	ItemRewards            []*CLobbyTimedRewardDetails                  `protobuf:"bytes,2,rep,name=item_rewards,json=itemRewards" json:"item_rewards,omitempty"`
	LobbyId                *uint64                                      `protobuf:"fixed64,3,opt,name=lobby_id,json=lobbyId" json:"lobby_id,omitempty"`
	ReportUntilTime        *uint64                                      `protobuf:"fixed64,4,opt,name=report_until_time,json=reportUntilTime" json:"report_until_time,omitempty"`
	EventGameCustomTable   []byte                                       `protobuf:"bytes,5,opt,name=event_game_custom_table,json=eventGameCustomTable" json:"event_game_custom_table,omitempty"`
	PrimaryEventId         *uint32                                      `protobuf:"varint,6,opt,name=primary_event_id,json=primaryEventId" json:"primary_event_id,omitempty"`
	MatchTips              []*CMsgMatchTips                             `protobuf:"bytes,7,rep,name=match_tips,json=matchTips" json:"match_tips,omitempty"`
	MatchmakingStats       *CMsgMatchMatchmakingStats                   `protobuf:"bytes,8,opt,name=matchmaking_stats,json=matchmakingStats" json:"matchmaking_stats,omitempty"`
	MvpData                *CMvpData                                    `protobuf:"bytes,9,opt,name=mvp_data,json=mvpData" json:"mvp_data,omitempty"`
	GuildChallengeProgress []*CDOTAMatchMetadata_GuildChallengeProgress `protobuf:"bytes,10,rep,name=guild_challenge_progress,json=guildChallengeProgress" json:"guild_challenge_progress,omitempty"`
}

func (x *CDOTAMatchMetadata) Reset() {
	*x = CDOTAMatchMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_match_metadata_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAMatchMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAMatchMetadata) ProtoMessage() {}

func (x *CDOTAMatchMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_dota_match_metadata_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAMatchMetadata.ProtoReflect.Descriptor instead.
func (*CDOTAMatchMetadata) Descriptor() ([]byte, []int) {
	return file_dota_match_metadata_proto_rawDescGZIP(), []int{1}
}

func (x *CDOTAMatchMetadata) GetTeams() []*CDOTAMatchMetadata_Team {
	if x != nil {
		return x.Teams
	}
	return nil
}

func (x *CDOTAMatchMetadata) GetItemRewards() []*CLobbyTimedRewardDetails {
	if x != nil {
		return x.ItemRewards
	}
	return nil
}

func (x *CDOTAMatchMetadata) GetLobbyId() uint64 {
	if x != nil && x.LobbyId != nil {
		return *x.LobbyId
	}
	return 0
}

func (x *CDOTAMatchMetadata) GetReportUntilTime() uint64 {
	if x != nil && x.ReportUntilTime != nil {
		return *x.ReportUntilTime
	}
	return 0
}

func (x *CDOTAMatchMetadata) GetEventGameCustomTable() []byte {
	if x != nil {
		return x.EventGameCustomTable
	}
	return nil
}

func (x *CDOTAMatchMetadata) GetPrimaryEventId() uint32 {
	if x != nil && x.PrimaryEventId != nil {
		return *x.PrimaryEventId
	}
	return 0
}

func (x *CDOTAMatchMetadata) GetMatchTips() []*CMsgMatchTips {
	if x != nil {
		return x.MatchTips
	}
	return nil
}

func (x *CDOTAMatchMetadata) GetMatchmakingStats() *CMsgMatchMatchmakingStats {
	if x != nil {
		return x.MatchmakingStats
	}
	return nil
}

func (x *CDOTAMatchMetadata) GetMvpData() *CMvpData {
	if x != nil {
		return x.MvpData
	}
	return nil
}

func (x *CDOTAMatchMetadata) GetGuildChallengeProgress() []*CDOTAMatchMetadata_GuildChallengeProgress {
	if x != nil {
		return x.GuildChallengeProgress
	}
	return nil
}

type CDOTAMatchPrivateMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Teams               []*CDOTAMatchPrivateMetadata_Team       `protobuf:"bytes,1,rep,name=teams" json:"teams,omitempty"`
	GraphWinProbability []float32                               `protobuf:"fixed32,2,rep,name=graph_win_probability,json=graphWinProbability" json:"graph_win_probability,omitempty"`
	StringNames         []*CDOTAMatchPrivateMetadata_StringName `protobuf:"bytes,3,rep,name=string_names,json=stringNames" json:"string_names,omitempty"`
}

func (x *CDOTAMatchPrivateMetadata) Reset() {
	*x = CDOTAMatchPrivateMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_match_metadata_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAMatchPrivateMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAMatchPrivateMetadata) ProtoMessage() {}

func (x *CDOTAMatchPrivateMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_dota_match_metadata_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAMatchPrivateMetadata.ProtoReflect.Descriptor instead.
func (*CDOTAMatchPrivateMetadata) Descriptor() ([]byte, []int) {
	return file_dota_match_metadata_proto_rawDescGZIP(), []int{2}
}

func (x *CDOTAMatchPrivateMetadata) GetTeams() []*CDOTAMatchPrivateMetadata_Team {
	if x != nil {
		return x.Teams
	}
	return nil
}

func (x *CDOTAMatchPrivateMetadata) GetGraphWinProbability() []float32 {
	if x != nil {
		return x.GraphWinProbability
	}
	return nil
}

func (x *CDOTAMatchPrivateMetadata) GetStringNames() []*CDOTAMatchPrivateMetadata_StringName {
	if x != nil {
		return x.StringNames
	}
	return nil
}

type CMsgDOTADPCMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Match    *CMsgDOTAMatch      `protobuf:"bytes,1,opt,name=match" json:"match,omitempty"`
	Metadata *CDOTAMatchMetadata `protobuf:"bytes,2,opt,name=metadata" json:"metadata,omitempty"`
}

func (x *CMsgDOTADPCMatch) Reset() {
	*x = CMsgDOTADPCMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_match_metadata_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTADPCMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTADPCMatch) ProtoMessage() {}

func (x *CMsgDOTADPCMatch) ProtoReflect() protoreflect.Message {
	mi := &file_dota_match_metadata_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTADPCMatch.ProtoReflect.Descriptor instead.
func (*CMsgDOTADPCMatch) Descriptor() ([]byte, []int) {
	return file_dota_match_metadata_proto_rawDescGZIP(), []int{3}
}

func (x *CMsgDOTADPCMatch) GetMatch() *CMsgDOTAMatch {
	if x != nil {
		return x.Match
	}
	return nil
}

func (x *CMsgDOTADPCMatch) GetMetadata() *CDOTAMatchMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type CDOTAMatchMetadata_Team struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DotaTeam          *uint32                           `protobuf:"varint,1,opt,name=dota_team,json=dotaTeam" json:"dota_team,omitempty"`
	Players           []*CDOTAMatchMetadata_Team_Player `protobuf:"bytes,2,rep,name=players" json:"players,omitempty"`
	GraphExperience   []float32                         `protobuf:"fixed32,3,rep,name=graph_experience,json=graphExperience" json:"graph_experience,omitempty"`
	GraphGoldEarned   []float32                         `protobuf:"fixed32,4,rep,name=graph_gold_earned,json=graphGoldEarned" json:"graph_gold_earned,omitempty"`
	GraphNetWorth     []float32                         `protobuf:"fixed32,5,rep,name=graph_net_worth,json=graphNetWorth" json:"graph_net_worth,omitempty"`
	CmFirstPick       *bool                             `protobuf:"varint,6,opt,name=cm_first_pick,json=cmFirstPick" json:"cm_first_pick,omitempty"`
	CmCaptainPlayerId *uint32                           `protobuf:"varint,7,opt,name=cm_captain_player_id,json=cmCaptainPlayerId" json:"cm_captain_player_id,omitempty"`
	CmBans            []uint32                          `protobuf:"varint,8,rep,name=cm_bans,json=cmBans" json:"cm_bans,omitempty"`
	CmPicks           []uint32                          `protobuf:"varint,9,rep,name=cm_picks,json=cmPicks" json:"cm_picks,omitempty"`
	CmPenalty         *uint32                           `protobuf:"varint,10,opt,name=cm_penalty,json=cmPenalty" json:"cm_penalty,omitempty"`
}

func (x *CDOTAMatchMetadata_Team) Reset() {
	*x = CDOTAMatchMetadata_Team{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_match_metadata_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAMatchMetadata_Team) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAMatchMetadata_Team) ProtoMessage() {}

func (x *CDOTAMatchMetadata_Team) ProtoReflect() protoreflect.Message {
	mi := &file_dota_match_metadata_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAMatchMetadata_Team.ProtoReflect.Descriptor instead.
func (*CDOTAMatchMetadata_Team) Descriptor() ([]byte, []int) {
	return file_dota_match_metadata_proto_rawDescGZIP(), []int{1, 0}
}

func (x *CDOTAMatchMetadata_Team) GetDotaTeam() uint32 {
	if x != nil && x.DotaTeam != nil {
		return *x.DotaTeam
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team) GetPlayers() []*CDOTAMatchMetadata_Team_Player {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *CDOTAMatchMetadata_Team) GetGraphExperience() []float32 {
	if x != nil {
		return x.GraphExperience
	}
	return nil
}

func (x *CDOTAMatchMetadata_Team) GetGraphGoldEarned() []float32 {
	if x != nil {
		return x.GraphGoldEarned
	}
	return nil
}

func (x *CDOTAMatchMetadata_Team) GetGraphNetWorth() []float32 {
	if x != nil {
		return x.GraphNetWorth
	}
	return nil
}

func (x *CDOTAMatchMetadata_Team) GetCmFirstPick() bool {
	if x != nil && x.CmFirstPick != nil {
		return *x.CmFirstPick
	}
	return false
}

func (x *CDOTAMatchMetadata_Team) GetCmCaptainPlayerId() uint32 {
	if x != nil && x.CmCaptainPlayerId != nil {
		return *x.CmCaptainPlayerId
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team) GetCmBans() []uint32 {
	if x != nil {
		return x.CmBans
	}
	return nil
}

func (x *CDOTAMatchMetadata_Team) GetCmPicks() []uint32 {
	if x != nil {
		return x.CmPicks
	}
	return nil
}

func (x *CDOTAMatchMetadata_Team) GetCmPenalty() uint32 {
	if x != nil && x.CmPenalty != nil {
		return *x.CmPenalty
	}
	return 0
}

type CDOTAMatchMetadata_GuildChallengeProgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildId                      *uint32                                                         `protobuf:"varint,1,opt,name=guild_id,json=guildId" json:"guild_id,omitempty"`
	EventId                      *EEvent                                                         `protobuf:"varint,2,opt,name=event_id,json=eventId,enum=dota.EEvent,def=0" json:"event_id,omitempty"`
	ChallengeInstanceId          *uint32                                                         `protobuf:"varint,3,opt,name=challenge_instance_id,json=challengeInstanceId" json:"challenge_instance_id,omitempty"`
	ChallengeParameter           *uint32                                                         `protobuf:"varint,4,opt,name=challenge_parameter,json=challengeParameter" json:"challenge_parameter,omitempty"`
	ChallengeTimestamp           *uint32                                                         `protobuf:"varint,5,opt,name=challenge_timestamp,json=challengeTimestamp" json:"challenge_timestamp,omitempty"`
	ChallengeProgressAtStart     *uint32                                                         `protobuf:"varint,6,opt,name=challenge_progress_at_start,json=challengeProgressAtStart" json:"challenge_progress_at_start,omitempty"`
	ChallengeProgressAccumulated *uint32                                                         `protobuf:"varint,7,opt,name=challenge_progress_accumulated,json=challengeProgressAccumulated" json:"challenge_progress_accumulated,omitempty"`
	IndividualProgress           []*CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress `protobuf:"bytes,8,rep,name=individual_progress,json=individualProgress" json:"individual_progress,omitempty"`
}

// Default values for CDOTAMatchMetadata_GuildChallengeProgress fields.
const (
	Default_CDOTAMatchMetadata_GuildChallengeProgress_EventId = EEvent_EVENT_ID_NONE
)

func (x *CDOTAMatchMetadata_GuildChallengeProgress) Reset() {
	*x = CDOTAMatchMetadata_GuildChallengeProgress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_match_metadata_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAMatchMetadata_GuildChallengeProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAMatchMetadata_GuildChallengeProgress) ProtoMessage() {}

func (x *CDOTAMatchMetadata_GuildChallengeProgress) ProtoReflect() protoreflect.Message {
	mi := &file_dota_match_metadata_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAMatchMetadata_GuildChallengeProgress.ProtoReflect.Descriptor instead.
func (*CDOTAMatchMetadata_GuildChallengeProgress) Descriptor() ([]byte, []int) {
	return file_dota_match_metadata_proto_rawDescGZIP(), []int{1, 1}
}

func (x *CDOTAMatchMetadata_GuildChallengeProgress) GetGuildId() uint32 {
	if x != nil && x.GuildId != nil {
		return *x.GuildId
	}
	return 0
}

func (x *CDOTAMatchMetadata_GuildChallengeProgress) GetEventId() EEvent {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return Default_CDOTAMatchMetadata_GuildChallengeProgress_EventId
}

func (x *CDOTAMatchMetadata_GuildChallengeProgress) GetChallengeInstanceId() uint32 {
	if x != nil && x.ChallengeInstanceId != nil {
		return *x.ChallengeInstanceId
	}
	return 0
}

func (x *CDOTAMatchMetadata_GuildChallengeProgress) GetChallengeParameter() uint32 {
	if x != nil && x.ChallengeParameter != nil {
		return *x.ChallengeParameter
	}
	return 0
}

func (x *CDOTAMatchMetadata_GuildChallengeProgress) GetChallengeTimestamp() uint32 {
	if x != nil && x.ChallengeTimestamp != nil {
		return *x.ChallengeTimestamp
	}
	return 0
}

func (x *CDOTAMatchMetadata_GuildChallengeProgress) GetChallengeProgressAtStart() uint32 {
	if x != nil && x.ChallengeProgressAtStart != nil {
		return *x.ChallengeProgressAtStart
	}
	return 0
}

func (x *CDOTAMatchMetadata_GuildChallengeProgress) GetChallengeProgressAccumulated() uint32 {
	if x != nil && x.ChallengeProgressAccumulated != nil {
		return *x.ChallengeProgressAccumulated
	}
	return 0
}

func (x *CDOTAMatchMetadata_GuildChallengeProgress) GetIndividualProgress() []*CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress {
	if x != nil {
		return x.IndividualProgress
	}
	return nil
}

type CDOTAMatchMetadata_Team_PlayerKill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VictimSlot *uint32 `protobuf:"varint,1,opt,name=victim_slot,json=victimSlot" json:"victim_slot,omitempty"`
	Count      *uint32 `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
}

func (x *CDOTAMatchMetadata_Team_PlayerKill) Reset() {
	*x = CDOTAMatchMetadata_Team_PlayerKill{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_match_metadata_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAMatchMetadata_Team_PlayerKill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAMatchMetadata_Team_PlayerKill) ProtoMessage() {}

func (x *CDOTAMatchMetadata_Team_PlayerKill) ProtoReflect() protoreflect.Message {
	mi := &file_dota_match_metadata_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAMatchMetadata_Team_PlayerKill.ProtoReflect.Descriptor instead.
func (*CDOTAMatchMetadata_Team_PlayerKill) Descriptor() ([]byte, []int) {
	return file_dota_match_metadata_proto_rawDescGZIP(), []int{1, 0, 0}
}

func (x *CDOTAMatchMetadata_Team_PlayerKill) GetVictimSlot() uint32 {
	if x != nil && x.VictimSlot != nil {
		return *x.VictimSlot
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_PlayerKill) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type CDOTAMatchMetadata_Team_ItemPurchase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId       *uint32 `protobuf:"varint,1,opt,name=item_id,json=itemId" json:"item_id,omitempty"`
	PurchaseTime *int32  `protobuf:"varint,2,opt,name=purchase_time,json=purchaseTime" json:"purchase_time,omitempty"`
}

func (x *CDOTAMatchMetadata_Team_ItemPurchase) Reset() {
	*x = CDOTAMatchMetadata_Team_ItemPurchase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_match_metadata_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAMatchMetadata_Team_ItemPurchase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAMatchMetadata_Team_ItemPurchase) ProtoMessage() {}

func (x *CDOTAMatchMetadata_Team_ItemPurchase) ProtoReflect() protoreflect.Message {
	mi := &file_dota_match_metadata_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAMatchMetadata_Team_ItemPurchase.ProtoReflect.Descriptor instead.
func (*CDOTAMatchMetadata_Team_ItemPurchase) Descriptor() ([]byte, []int) {
	return file_dota_match_metadata_proto_rawDescGZIP(), []int{1, 0, 1}
}

func (x *CDOTAMatchMetadata_Team_ItemPurchase) GetItemId() uint32 {
	if x != nil && x.ItemId != nil {
		return *x.ItemId
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_ItemPurchase) GetPurchaseTime() int32 {
	if x != nil && x.PurchaseTime != nil {
		return *x.PurchaseTime
	}
	return 0
}

type CDOTAMatchMetadata_Team_InventorySnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId   []uint32 `protobuf:"varint,1,rep,name=item_id,json=itemId" json:"item_id,omitempty"`
	GameTime *int32   `protobuf:"varint,2,opt,name=game_time,json=gameTime" json:"game_time,omitempty"`
	Kills    *uint32  `protobuf:"varint,3,opt,name=kills" json:"kills,omitempty"`
	Deaths   *uint32  `protobuf:"varint,4,opt,name=deaths" json:"deaths,omitempty"`
	Assists  *uint32  `protobuf:"varint,5,opt,name=assists" json:"assists,omitempty"`
	Level    *uint32  `protobuf:"varint,6,opt,name=level" json:"level,omitempty"`
}

func (x *CDOTAMatchMetadata_Team_InventorySnapshot) Reset() {
	*x = CDOTAMatchMetadata_Team_InventorySnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_match_metadata_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAMatchMetadata_Team_InventorySnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAMatchMetadata_Team_InventorySnapshot) ProtoMessage() {}

func (x *CDOTAMatchMetadata_Team_InventorySnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_dota_match_metadata_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAMatchMetadata_Team_InventorySnapshot.ProtoReflect.Descriptor instead.
func (*CDOTAMatchMetadata_Team_InventorySnapshot) Descriptor() ([]byte, []int) {
	return file_dota_match_metadata_proto_rawDescGZIP(), []int{1, 0, 2}
}

func (x *CDOTAMatchMetadata_Team_InventorySnapshot) GetItemId() []uint32 {
	if x != nil {
		return x.ItemId
	}
	return nil
}

func (x *CDOTAMatchMetadata_Team_InventorySnapshot) GetGameTime() int32 {
	if x != nil && x.GameTime != nil {
		return *x.GameTime
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_InventorySnapshot) GetKills() uint32 {
	if x != nil && x.Kills != nil {
		return *x.Kills
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_InventorySnapshot) GetDeaths() uint32 {
	if x != nil && x.Deaths != nil {
		return *x.Deaths
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_InventorySnapshot) GetAssists() uint32 {
	if x != nil && x.Assists != nil {
		return *x.Assists
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_InventorySnapshot) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

type CDOTAMatchMetadata_Team_AutoStyleCriteria struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NameToken *uint32  `protobuf:"varint,1,opt,name=name_token,json=nameToken" json:"name_token,omitempty"`
	Value     *float32 `protobuf:"fixed32,2,opt,name=value" json:"value,omitempty"`
}

func (x *CDOTAMatchMetadata_Team_AutoStyleCriteria) Reset() {
	*x = CDOTAMatchMetadata_Team_AutoStyleCriteria{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_match_metadata_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAMatchMetadata_Team_AutoStyleCriteria) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAMatchMetadata_Team_AutoStyleCriteria) ProtoMessage() {}

func (x *CDOTAMatchMetadata_Team_AutoStyleCriteria) ProtoReflect() protoreflect.Message {
	mi := &file_dota_match_metadata_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAMatchMetadata_Team_AutoStyleCriteria.ProtoReflect.Descriptor instead.
func (*CDOTAMatchMetadata_Team_AutoStyleCriteria) Descriptor() ([]byte, []int) {
	return file_dota_match_metadata_proto_rawDescGZIP(), []int{1, 0, 3}
}

func (x *CDOTAMatchMetadata_Team_AutoStyleCriteria) GetNameToken() uint32 {
	if x != nil && x.NameToken != nil {
		return *x.NameToken
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_AutoStyleCriteria) GetValue() float32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

type CDOTAMatchMetadata_Team_StrangeGemProgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KillEaterType     *uint32 `protobuf:"varint,1,opt,name=kill_eater_type,json=killEaterType" json:"kill_eater_type,omitempty"`
	GemItemDefIndex   *uint32 `protobuf:"varint,2,opt,name=gem_item_def_index,json=gemItemDefIndex" json:"gem_item_def_index,omitempty"`
	RequiredHeroId    *uint32 `protobuf:"varint,3,opt,name=required_hero_id,json=requiredHeroId" json:"required_hero_id,omitempty"`
	StartingValue     *uint32 `protobuf:"varint,4,opt,name=starting_value,json=startingValue" json:"starting_value,omitempty"`
	EndingValue       *uint32 `protobuf:"varint,5,opt,name=ending_value,json=endingValue" json:"ending_value,omitempty"`
	OwnerItemDefIndex *uint32 `protobuf:"varint,6,opt,name=owner_item_def_index,json=ownerItemDefIndex" json:"owner_item_def_index,omitempty"`
	OwnerItemId       *uint64 `protobuf:"varint,7,opt,name=owner_item_id,json=ownerItemId" json:"owner_item_id,omitempty"`
}

func (x *CDOTAMatchMetadata_Team_StrangeGemProgress) Reset() {
	*x = CDOTAMatchMetadata_Team_StrangeGemProgress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_match_metadata_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAMatchMetadata_Team_StrangeGemProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAMatchMetadata_Team_StrangeGemProgress) ProtoMessage() {}

func (x *CDOTAMatchMetadata_Team_StrangeGemProgress) ProtoReflect() protoreflect.Message {
	mi := &file_dota_match_metadata_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAMatchMetadata_Team_StrangeGemProgress.ProtoReflect.Descriptor instead.
func (*CDOTAMatchMetadata_Team_StrangeGemProgress) Descriptor() ([]byte, []int) {
	return file_dota_match_metadata_proto_rawDescGZIP(), []int{1, 0, 4}
}

func (x *CDOTAMatchMetadata_Team_StrangeGemProgress) GetKillEaterType() uint32 {
	if x != nil && x.KillEaterType != nil {
		return *x.KillEaterType
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_StrangeGemProgress) GetGemItemDefIndex() uint32 {
	if x != nil && x.GemItemDefIndex != nil {
		return *x.GemItemDefIndex
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_StrangeGemProgress) GetRequiredHeroId() uint32 {
	if x != nil && x.RequiredHeroId != nil {
		return *x.RequiredHeroId
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_StrangeGemProgress) GetStartingValue() uint32 {
	if x != nil && x.StartingValue != nil {
		return *x.StartingValue
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_StrangeGemProgress) GetEndingValue() uint32 {
	if x != nil && x.EndingValue != nil {
		return *x.EndingValue
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_StrangeGemProgress) GetOwnerItemDefIndex() uint32 {
	if x != nil && x.OwnerItemDefIndex != nil {
		return *x.OwnerItemDefIndex
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_StrangeGemProgress) GetOwnerItemId() uint64 {
	if x != nil && x.OwnerItemId != nil {
		return *x.OwnerItemId
	}
	return 0
}

type CDOTAMatchMetadata_Team_VictoryPrediction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId        *uint64 `protobuf:"varint,1,opt,name=item_id,json=itemId" json:"item_id,omitempty"`
	ItemDefIndex  *uint32 `protobuf:"varint,2,opt,name=item_def_index,json=itemDefIndex" json:"item_def_index,omitempty"`
	StartingValue *uint32 `protobuf:"varint,3,opt,name=starting_value,json=startingValue" json:"starting_value,omitempty"`
	IsVictory     *bool   `protobuf:"varint,4,opt,name=is_victory,json=isVictory" json:"is_victory,omitempty"`
}

func (x *CDOTAMatchMetadata_Team_VictoryPrediction) Reset() {
	*x = CDOTAMatchMetadata_Team_VictoryPrediction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_match_metadata_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAMatchMetadata_Team_VictoryPrediction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAMatchMetadata_Team_VictoryPrediction) ProtoMessage() {}

func (x *CDOTAMatchMetadata_Team_VictoryPrediction) ProtoReflect() protoreflect.Message {
	mi := &file_dota_match_metadata_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAMatchMetadata_Team_VictoryPrediction.ProtoReflect.Descriptor instead.
func (*CDOTAMatchMetadata_Team_VictoryPrediction) Descriptor() ([]byte, []int) {
	return file_dota_match_metadata_proto_rawDescGZIP(), []int{1, 0, 5}
}

func (x *CDOTAMatchMetadata_Team_VictoryPrediction) GetItemId() uint64 {
	if x != nil && x.ItemId != nil {
		return *x.ItemId
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_VictoryPrediction) GetItemDefIndex() uint32 {
	if x != nil && x.ItemDefIndex != nil {
		return *x.ItemDefIndex
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_VictoryPrediction) GetStartingValue() uint32 {
	if x != nil && x.StartingValue != nil {
		return *x.StartingValue
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_VictoryPrediction) GetIsVictory() bool {
	if x != nil && x.IsVictory != nil {
		return *x.IsVictory
	}
	return false
}

type CDOTAMatchMetadata_Team_SubChallenge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlotId     *uint32 `protobuf:"varint,1,opt,name=slot_id,json=slotId" json:"slot_id,omitempty"`
	StartValue *uint32 `protobuf:"varint,2,opt,name=start_value,json=startValue" json:"start_value,omitempty"`
	EndValue   *uint32 `protobuf:"varint,3,opt,name=end_value,json=endValue" json:"end_value,omitempty"`
	Completed  *bool   `protobuf:"varint,4,opt,name=completed" json:"completed,omitempty"`
}

func (x *CDOTAMatchMetadata_Team_SubChallenge) Reset() {
	*x = CDOTAMatchMetadata_Team_SubChallenge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_match_metadata_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAMatchMetadata_Team_SubChallenge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAMatchMetadata_Team_SubChallenge) ProtoMessage() {}

func (x *CDOTAMatchMetadata_Team_SubChallenge) ProtoReflect() protoreflect.Message {
	mi := &file_dota_match_metadata_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAMatchMetadata_Team_SubChallenge.ProtoReflect.Descriptor instead.
func (*CDOTAMatchMetadata_Team_SubChallenge) Descriptor() ([]byte, []int) {
	return file_dota_match_metadata_proto_rawDescGZIP(), []int{1, 0, 6}
}

func (x *CDOTAMatchMetadata_Team_SubChallenge) GetSlotId() uint32 {
	if x != nil && x.SlotId != nil {
		return *x.SlotId
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_SubChallenge) GetStartValue() uint32 {
	if x != nil && x.StartValue != nil {
		return *x.StartValue
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_SubChallenge) GetEndValue() uint32 {
	if x != nil && x.EndValue != nil {
		return *x.EndValue
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_SubChallenge) GetCompleted() bool {
	if x != nil && x.Completed != nil {
		return *x.Completed
	}
	return false
}

type CDOTAMatchMetadata_Team_CavernChallengeResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompletedPathId *uint32 `protobuf:"varint,1,opt,name=completed_path_id,json=completedPathId" json:"completed_path_id,omitempty"`
	ClaimedRoomId   *uint32 `protobuf:"varint,2,opt,name=claimed_room_id,json=claimedRoomId" json:"claimed_room_id,omitempty"`
}

func (x *CDOTAMatchMetadata_Team_CavernChallengeResult) Reset() {
	*x = CDOTAMatchMetadata_Team_CavernChallengeResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_match_metadata_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAMatchMetadata_Team_CavernChallengeResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAMatchMetadata_Team_CavernChallengeResult) ProtoMessage() {}

func (x *CDOTAMatchMetadata_Team_CavernChallengeResult) ProtoReflect() protoreflect.Message {
	mi := &file_dota_match_metadata_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAMatchMetadata_Team_CavernChallengeResult.ProtoReflect.Descriptor instead.
func (*CDOTAMatchMetadata_Team_CavernChallengeResult) Descriptor() ([]byte, []int) {
	return file_dota_match_metadata_proto_rawDescGZIP(), []int{1, 0, 7}
}

func (x *CDOTAMatchMetadata_Team_CavernChallengeResult) GetCompletedPathId() uint32 {
	if x != nil && x.CompletedPathId != nil {
		return *x.CompletedPathId
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_CavernChallengeResult) GetClaimedRoomId() uint32 {
	if x != nil && x.ClaimedRoomId != nil {
		return *x.ClaimedRoomId
	}
	return 0
}

type CDOTAMatchMetadata_Team_ActionGrant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionId *uint32 `protobuf:"varint,1,opt,name=action_id,json=actionId" json:"action_id,omitempty"`
	Quantity *uint32 `protobuf:"varint,2,opt,name=quantity" json:"quantity,omitempty"`
	Audit    *uint32 `protobuf:"varint,3,opt,name=audit" json:"audit,omitempty"`
}

func (x *CDOTAMatchMetadata_Team_ActionGrant) Reset() {
	*x = CDOTAMatchMetadata_Team_ActionGrant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_match_metadata_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAMatchMetadata_Team_ActionGrant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAMatchMetadata_Team_ActionGrant) ProtoMessage() {}

func (x *CDOTAMatchMetadata_Team_ActionGrant) ProtoReflect() protoreflect.Message {
	mi := &file_dota_match_metadata_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAMatchMetadata_Team_ActionGrant.ProtoReflect.Descriptor instead.
func (*CDOTAMatchMetadata_Team_ActionGrant) Descriptor() ([]byte, []int) {
	return file_dota_match_metadata_proto_rawDescGZIP(), []int{1, 0, 8}
}

func (x *CDOTAMatchMetadata_Team_ActionGrant) GetActionId() uint32 {
	if x != nil && x.ActionId != nil {
		return *x.ActionId
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_ActionGrant) GetQuantity() uint32 {
	if x != nil && x.Quantity != nil {
		return *x.Quantity
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_ActionGrant) GetAudit() uint32 {
	if x != nil && x.Audit != nil {
		return *x.Audit
	}
	return 0
}

type CDOTAMatchMetadata_Team_EventData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId                          *uint32                                          `protobuf:"varint,1,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	EventPoints                      *uint32                                          `protobuf:"varint,2,opt,name=event_points,json=eventPoints" json:"event_points,omitempty"`
	ChallengeInstanceId              *uint32                                          `protobuf:"varint,3,opt,name=challenge_instance_id,json=challengeInstanceId" json:"challenge_instance_id,omitempty"`
	ChallengeQuestId                 *uint32                                          `protobuf:"varint,4,opt,name=challenge_quest_id,json=challengeQuestId" json:"challenge_quest_id,omitempty"`
	ChallengeQuestChallengeId        *uint32                                          `protobuf:"varint,5,opt,name=challenge_quest_challenge_id,json=challengeQuestChallengeId" json:"challenge_quest_challenge_id,omitempty"`
	ChallengeCompleted               *bool                                            `protobuf:"varint,6,opt,name=challenge_completed,json=challengeCompleted" json:"challenge_completed,omitempty"`
	ChallengeRankCompleted           *uint32                                          `protobuf:"varint,7,opt,name=challenge_rank_completed,json=challengeRankCompleted" json:"challenge_rank_completed,omitempty"`
	ChallengeRankPreviouslyCompleted *uint32                                          `protobuf:"varint,8,opt,name=challenge_rank_previously_completed,json=challengeRankPreviouslyCompleted" json:"challenge_rank_previously_completed,omitempty"`
	EventOwned                       *bool                                            `protobuf:"varint,9,opt,name=event_owned,json=eventOwned" json:"event_owned,omitempty"`
	SubChallengesWithProgress        []*CDOTAMatchMetadata_Team_SubChallenge          `protobuf:"bytes,10,rep,name=sub_challenges_with_progress,json=subChallengesWithProgress" json:"sub_challenges_with_progress,omitempty"`
	WagerWinnings                    *uint32                                          `protobuf:"varint,11,opt,name=wager_winnings,json=wagerWinnings" json:"wager_winnings,omitempty"`
	CavernChallengeActive            *bool                                            `protobuf:"varint,12,opt,name=cavern_challenge_active,json=cavernChallengeActive" json:"cavern_challenge_active,omitempty"`
	CavernChallengeWinnings          *uint32                                          `protobuf:"varint,13,opt,name=cavern_challenge_winnings,json=cavernChallengeWinnings" json:"cavern_challenge_winnings,omitempty"`
	AmountWagered                    *uint32                                          `protobuf:"varint,14,opt,name=amount_wagered,json=amountWagered" json:"amount_wagered,omitempty"`
	PeriodicPointAdjustments         *uint32                                          `protobuf:"varint,16,opt,name=periodic_point_adjustments,json=periodicPointAdjustments" json:"periodic_point_adjustments,omitempty"`
	CavernChallengeMapResults        []*CDOTAMatchMetadata_Team_CavernChallengeResult `protobuf:"bytes,17,rep,name=cavern_challenge_map_results,json=cavernChallengeMapResults" json:"cavern_challenge_map_results,omitempty"`
	CavernChallengePlusShardWinnings *uint32                                          `protobuf:"varint,18,opt,name=cavern_challenge_plus_shard_winnings,json=cavernChallengePlusShardWinnings" json:"cavern_challenge_plus_shard_winnings,omitempty"`
	ActionsGranted                   []*CDOTAMatchMetadata_Team_ActionGrant           `protobuf:"bytes,19,rep,name=actions_granted,json=actionsGranted" json:"actions_granted,omitempty"`
	CavernCrawlMapVariant            *uint32                                          `protobuf:"varint,20,opt,name=cavern_crawl_map_variant,json=cavernCrawlMapVariant" json:"cavern_crawl_map_variant,omitempty"`
	TeamWagerBonusPct                *uint32                                          `protobuf:"varint,21,opt,name=team_wager_bonus_pct,json=teamWagerBonusPct" json:"team_wager_bonus_pct,omitempty"`
	WagerStreakPct                   *uint32                                          `protobuf:"varint,22,opt,name=wager_streak_pct,json=wagerStreakPct" json:"wager_streak_pct,omitempty"`
}

func (x *CDOTAMatchMetadata_Team_EventData) Reset() {
	*x = CDOTAMatchMetadata_Team_EventData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_match_metadata_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAMatchMetadata_Team_EventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAMatchMetadata_Team_EventData) ProtoMessage() {}

func (x *CDOTAMatchMetadata_Team_EventData) ProtoReflect() protoreflect.Message {
	mi := &file_dota_match_metadata_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAMatchMetadata_Team_EventData.ProtoReflect.Descriptor instead.
func (*CDOTAMatchMetadata_Team_EventData) Descriptor() ([]byte, []int) {
	return file_dota_match_metadata_proto_rawDescGZIP(), []int{1, 0, 9}
}

func (x *CDOTAMatchMetadata_Team_EventData) GetEventId() uint32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_EventData) GetEventPoints() uint32 {
	if x != nil && x.EventPoints != nil {
		return *x.EventPoints
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_EventData) GetChallengeInstanceId() uint32 {
	if x != nil && x.ChallengeInstanceId != nil {
		return *x.ChallengeInstanceId
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_EventData) GetChallengeQuestId() uint32 {
	if x != nil && x.ChallengeQuestId != nil {
		return *x.ChallengeQuestId
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_EventData) GetChallengeQuestChallengeId() uint32 {
	if x != nil && x.ChallengeQuestChallengeId != nil {
		return *x.ChallengeQuestChallengeId
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_EventData) GetChallengeCompleted() bool {
	if x != nil && x.ChallengeCompleted != nil {
		return *x.ChallengeCompleted
	}
	return false
}

func (x *CDOTAMatchMetadata_Team_EventData) GetChallengeRankCompleted() uint32 {
	if x != nil && x.ChallengeRankCompleted != nil {
		return *x.ChallengeRankCompleted
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_EventData) GetChallengeRankPreviouslyCompleted() uint32 {
	if x != nil && x.ChallengeRankPreviouslyCompleted != nil {
		return *x.ChallengeRankPreviouslyCompleted
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_EventData) GetEventOwned() bool {
	if x != nil && x.EventOwned != nil {
		return *x.EventOwned
	}
	return false
}

func (x *CDOTAMatchMetadata_Team_EventData) GetSubChallengesWithProgress() []*CDOTAMatchMetadata_Team_SubChallenge {
	if x != nil {
		return x.SubChallengesWithProgress
	}
	return nil
}

func (x *CDOTAMatchMetadata_Team_EventData) GetWagerWinnings() uint32 {
	if x != nil && x.WagerWinnings != nil {
		return *x.WagerWinnings
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_EventData) GetCavernChallengeActive() bool {
	if x != nil && x.CavernChallengeActive != nil {
		return *x.CavernChallengeActive
	}
	return false
}

func (x *CDOTAMatchMetadata_Team_EventData) GetCavernChallengeWinnings() uint32 {
	if x != nil && x.CavernChallengeWinnings != nil {
		return *x.CavernChallengeWinnings
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_EventData) GetAmountWagered() uint32 {
	if x != nil && x.AmountWagered != nil {
		return *x.AmountWagered
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_EventData) GetPeriodicPointAdjustments() uint32 {
	if x != nil && x.PeriodicPointAdjustments != nil {
		return *x.PeriodicPointAdjustments
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_EventData) GetCavernChallengeMapResults() []*CDOTAMatchMetadata_Team_CavernChallengeResult {
	if x != nil {
		return x.CavernChallengeMapResults
	}
	return nil
}

func (x *CDOTAMatchMetadata_Team_EventData) GetCavernChallengePlusShardWinnings() uint32 {
	if x != nil && x.CavernChallengePlusShardWinnings != nil {
		return *x.CavernChallengePlusShardWinnings
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_EventData) GetActionsGranted() []*CDOTAMatchMetadata_Team_ActionGrant {
	if x != nil {
		return x.ActionsGranted
	}
	return nil
}

func (x *CDOTAMatchMetadata_Team_EventData) GetCavernCrawlMapVariant() uint32 {
	if x != nil && x.CavernCrawlMapVariant != nil {
		return *x.CavernCrawlMapVariant
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_EventData) GetTeamWagerBonusPct() uint32 {
	if x != nil && x.TeamWagerBonusPct != nil {
		return *x.TeamWagerBonusPct
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_EventData) GetWagerStreakPct() uint32 {
	if x != nil && x.WagerStreakPct != nil {
		return *x.WagerStreakPct
	}
	return 0
}

type CDOTAMatchMetadata_Team_GauntletProgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GauntletTier   *uint32 `protobuf:"varint,2,opt,name=gauntlet_tier,json=gauntletTier" json:"gauntlet_tier,omitempty"`
	GauntletWins   *uint32 `protobuf:"varint,3,opt,name=gauntlet_wins,json=gauntletWins" json:"gauntlet_wins,omitempty"`
	GauntletLosses *uint32 `protobuf:"varint,4,opt,name=gauntlet_losses,json=gauntletLosses" json:"gauntlet_losses,omitempty"`
}

func (x *CDOTAMatchMetadata_Team_GauntletProgress) Reset() {
	*x = CDOTAMatchMetadata_Team_GauntletProgress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_match_metadata_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAMatchMetadata_Team_GauntletProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAMatchMetadata_Team_GauntletProgress) ProtoMessage() {}

func (x *CDOTAMatchMetadata_Team_GauntletProgress) ProtoReflect() protoreflect.Message {
	mi := &file_dota_match_metadata_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAMatchMetadata_Team_GauntletProgress.ProtoReflect.Descriptor instead.
func (*CDOTAMatchMetadata_Team_GauntletProgress) Descriptor() ([]byte, []int) {
	return file_dota_match_metadata_proto_rawDescGZIP(), []int{1, 0, 10}
}

func (x *CDOTAMatchMetadata_Team_GauntletProgress) GetGauntletTier() uint32 {
	if x != nil && x.GauntletTier != nil {
		return *x.GauntletTier
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_GauntletProgress) GetGauntletWins() uint32 {
	if x != nil && x.GauntletWins != nil {
		return *x.GauntletWins
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_GauntletProgress) GetGauntletLosses() uint32 {
	if x != nil && x.GauntletLosses != nil {
		return *x.GauntletLosses
	}
	return 0
}

type CDOTAMatchMetadata_Team_Player struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId           *uint32                                            `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	AbilityUpgrades     []uint32                                           `protobuf:"varint,2,rep,name=ability_upgrades,json=abilityUpgrades" json:"ability_upgrades,omitempty"`
	PlayerSlot          *uint32                                            `protobuf:"varint,3,opt,name=player_slot,json=playerSlot" json:"player_slot,omitempty"`
	EquippedEconItems   []*CSOEconItem                                     `protobuf:"bytes,4,rep,name=equipped_econ_items,json=equippedEconItems" json:"equipped_econ_items,omitempty"`
	Kills               []*CDOTAMatchMetadata_Team_PlayerKill              `protobuf:"bytes,5,rep,name=kills" json:"kills,omitempty"`
	Items               []*CDOTAMatchMetadata_Team_ItemPurchase            `protobuf:"bytes,6,rep,name=items" json:"items,omitempty"`
	AvgKillsX16         *uint32                                            `protobuf:"varint,7,opt,name=avg_kills_x16,json=avgKillsX16" json:"avg_kills_x16,omitempty"`
	AvgDeathsX16        *uint32                                            `protobuf:"varint,8,opt,name=avg_deaths_x16,json=avgDeathsX16" json:"avg_deaths_x16,omitempty"`
	AvgAssistsX16       *uint32                                            `protobuf:"varint,9,opt,name=avg_assists_x16,json=avgAssistsX16" json:"avg_assists_x16,omitempty"`
	AvgGpmX16           *uint32                                            `protobuf:"varint,10,opt,name=avg_gpm_x16,json=avgGpmX16" json:"avg_gpm_x16,omitempty"`
	AvgXpmX16           *uint32                                            `protobuf:"varint,11,opt,name=avg_xpm_x16,json=avgXpmX16" json:"avg_xpm_x16,omitempty"`
	BestKillsX16        *uint32                                            `protobuf:"varint,12,opt,name=best_kills_x16,json=bestKillsX16" json:"best_kills_x16,omitempty"`
	BestAssistsX16      *uint32                                            `protobuf:"varint,13,opt,name=best_assists_x16,json=bestAssistsX16" json:"best_assists_x16,omitempty"`
	BestGpmX16          *uint32                                            `protobuf:"varint,14,opt,name=best_gpm_x16,json=bestGpmX16" json:"best_gpm_x16,omitempty"`
	BestXpmX16          *uint32                                            `protobuf:"varint,15,opt,name=best_xpm_x16,json=bestXpmX16" json:"best_xpm_x16,omitempty"`
	WinStreak           *uint32                                            `protobuf:"varint,16,opt,name=win_streak,json=winStreak" json:"win_streak,omitempty"`
	BestWinStreak       *uint32                                            `protobuf:"varint,17,opt,name=best_win_streak,json=bestWinStreak" json:"best_win_streak,omitempty"`
	FightScore          *float32                                           `protobuf:"fixed32,18,opt,name=fight_score,json=fightScore" json:"fight_score,omitempty"`
	FarmScore           *float32                                           `protobuf:"fixed32,19,opt,name=farm_score,json=farmScore" json:"farm_score,omitempty"`
	SupportScore        *float32                                           `protobuf:"fixed32,20,opt,name=support_score,json=supportScore" json:"support_score,omitempty"`
	PushScore           *float32                                           `protobuf:"fixed32,21,opt,name=push_score,json=pushScore" json:"push_score,omitempty"`
	LevelUpTimes        []uint32                                           `protobuf:"varint,22,rep,name=level_up_times,json=levelUpTimes" json:"level_up_times,omitempty"`
	GraphNetWorth       []float32                                          `protobuf:"fixed32,23,rep,name=graph_net_worth,json=graphNetWorth" json:"graph_net_worth,omitempty"`
	InventorySnapshot   []*CDOTAMatchMetadata_Team_InventorySnapshot       `protobuf:"bytes,24,rep,name=inventory_snapshot,json=inventorySnapshot" json:"inventory_snapshot,omitempty"`
	AvgStatsCalibrated  *bool                                              `protobuf:"varint,25,opt,name=avg_stats_calibrated,json=avgStatsCalibrated" json:"avg_stats_calibrated,omitempty"`
	AutoStyleCriteria   []*CDOTAMatchMetadata_Team_AutoStyleCriteria       `protobuf:"bytes,26,rep,name=auto_style_criteria,json=autoStyleCriteria" json:"auto_style_criteria,omitempty"`
	EventData           []*CDOTAMatchMetadata_Team_EventData               `protobuf:"bytes,29,rep,name=event_data,json=eventData" json:"event_data,omitempty"`
	StrangeGemProgress  []*CDOTAMatchMetadata_Team_StrangeGemProgress      `protobuf:"bytes,30,rep,name=strange_gem_progress,json=strangeGemProgress" json:"strange_gem_progress,omitempty"`
	HeroXp              *uint32                                            `protobuf:"varint,31,opt,name=hero_xp,json=heroXp" json:"hero_xp,omitempty"`
	CampsStacked        *uint32                                            `protobuf:"varint,32,opt,name=camps_stacked,json=campsStacked" json:"camps_stacked,omitempty"`
	VictoryPrediction   []*CDOTAMatchMetadata_Team_VictoryPrediction       `protobuf:"bytes,33,rep,name=victory_prediction,json=victoryPrediction" json:"victory_prediction,omitempty"`
	LaneSelectionFlags  *uint32                                            `protobuf:"varint,34,opt,name=lane_selection_flags,json=laneSelectionFlags" json:"lane_selection_flags,omitempty"`
	Rampages            *uint32                                            `protobuf:"varint,35,opt,name=rampages" json:"rampages,omitempty"`
	TripleKills         *uint32                                            `protobuf:"varint,36,opt,name=triple_kills,json=tripleKills" json:"triple_kills,omitempty"`
	AegisSnatched       *uint32                                            `protobuf:"varint,37,opt,name=aegis_snatched,json=aegisSnatched" json:"aegis_snatched,omitempty"`
	RapiersPurchased    *uint32                                            `protobuf:"varint,38,opt,name=rapiers_purchased,json=rapiersPurchased" json:"rapiers_purchased,omitempty"`
	CouriersKilled      *uint32                                            `protobuf:"varint,39,opt,name=couriers_killed,json=couriersKilled" json:"couriers_killed,omitempty"`
	NetWorthRank        *uint32                                            `protobuf:"varint,40,opt,name=net_worth_rank,json=netWorthRank" json:"net_worth_rank,omitempty"`
	SupportGoldSpent    *uint32                                            `protobuf:"varint,41,opt,name=support_gold_spent,json=supportGoldSpent" json:"support_gold_spent,omitempty"`
	ObserverWardsPlaced *uint32                                            `protobuf:"varint,42,opt,name=observer_wards_placed,json=observerWardsPlaced" json:"observer_wards_placed,omitempty"`
	SentryWardsPlaced   *uint32                                            `protobuf:"varint,43,opt,name=sentry_wards_placed,json=sentryWardsPlaced" json:"sentry_wards_placed,omitempty"`
	WardsDewarded       *uint32                                            `protobuf:"varint,44,opt,name=wards_dewarded,json=wardsDewarded" json:"wards_dewarded,omitempty"`
	StunDuration        *float32                                           `protobuf:"fixed32,45,opt,name=stun_duration,json=stunDuration" json:"stun_duration,omitempty"`
	RankMmrBoostType    *EDOTAMMRBoostType                                 `protobuf:"varint,46,opt,name=rank_mmr_boost_type,json=rankMmrBoostType,enum=dota.EDOTAMMRBoostType,def=0" json:"rank_mmr_boost_type,omitempty"`
	GauntletProgress    *CDOTAMatchMetadata_Team_GauntletProgress          `protobuf:"bytes,47,opt,name=gauntlet_progress,json=gauntletProgress" json:"gauntlet_progress,omitempty"`
	ContractProgress    []*CDOTAMatchMetadata_Team_Player_ContractProgress `protobuf:"bytes,48,rep,name=contract_progress,json=contractProgress" json:"contract_progress,omitempty"`
}

// Default values for CDOTAMatchMetadata_Team_Player fields.
const (
	Default_CDOTAMatchMetadata_Team_Player_RankMmrBoostType = EDOTAMMRBoostType_k_EDOTAMMRBoostType_None
)

func (x *CDOTAMatchMetadata_Team_Player) Reset() {
	*x = CDOTAMatchMetadata_Team_Player{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_match_metadata_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAMatchMetadata_Team_Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAMatchMetadata_Team_Player) ProtoMessage() {}

func (x *CDOTAMatchMetadata_Team_Player) ProtoReflect() protoreflect.Message {
	mi := &file_dota_match_metadata_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAMatchMetadata_Team_Player.ProtoReflect.Descriptor instead.
func (*CDOTAMatchMetadata_Team_Player) Descriptor() ([]byte, []int) {
	return file_dota_match_metadata_proto_rawDescGZIP(), []int{1, 0, 11}
}

func (x *CDOTAMatchMetadata_Team_Player) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_Player) GetAbilityUpgrades() []uint32 {
	if x != nil {
		return x.AbilityUpgrades
	}
	return nil
}

func (x *CDOTAMatchMetadata_Team_Player) GetPlayerSlot() uint32 {
	if x != nil && x.PlayerSlot != nil {
		return *x.PlayerSlot
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_Player) GetEquippedEconItems() []*CSOEconItem {
	if x != nil {
		return x.EquippedEconItems
	}
	return nil
}

func (x *CDOTAMatchMetadata_Team_Player) GetKills() []*CDOTAMatchMetadata_Team_PlayerKill {
	if x != nil {
		return x.Kills
	}
	return nil
}

func (x *CDOTAMatchMetadata_Team_Player) GetItems() []*CDOTAMatchMetadata_Team_ItemPurchase {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *CDOTAMatchMetadata_Team_Player) GetAvgKillsX16() uint32 {
	if x != nil && x.AvgKillsX16 != nil {
		return *x.AvgKillsX16
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_Player) GetAvgDeathsX16() uint32 {
	if x != nil && x.AvgDeathsX16 != nil {
		return *x.AvgDeathsX16
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_Player) GetAvgAssistsX16() uint32 {
	if x != nil && x.AvgAssistsX16 != nil {
		return *x.AvgAssistsX16
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_Player) GetAvgGpmX16() uint32 {
	if x != nil && x.AvgGpmX16 != nil {
		return *x.AvgGpmX16
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_Player) GetAvgXpmX16() uint32 {
	if x != nil && x.AvgXpmX16 != nil {
		return *x.AvgXpmX16
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_Player) GetBestKillsX16() uint32 {
	if x != nil && x.BestKillsX16 != nil {
		return *x.BestKillsX16
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_Player) GetBestAssistsX16() uint32 {
	if x != nil && x.BestAssistsX16 != nil {
		return *x.BestAssistsX16
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_Player) GetBestGpmX16() uint32 {
	if x != nil && x.BestGpmX16 != nil {
		return *x.BestGpmX16
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_Player) GetBestXpmX16() uint32 {
	if x != nil && x.BestXpmX16 != nil {
		return *x.BestXpmX16
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_Player) GetWinStreak() uint32 {
	if x != nil && x.WinStreak != nil {
		return *x.WinStreak
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_Player) GetBestWinStreak() uint32 {
	if x != nil && x.BestWinStreak != nil {
		return *x.BestWinStreak
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_Player) GetFightScore() float32 {
	if x != nil && x.FightScore != nil {
		return *x.FightScore
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_Player) GetFarmScore() float32 {
	if x != nil && x.FarmScore != nil {
		return *x.FarmScore
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_Player) GetSupportScore() float32 {
	if x != nil && x.SupportScore != nil {
		return *x.SupportScore
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_Player) GetPushScore() float32 {
	if x != nil && x.PushScore != nil {
		return *x.PushScore
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_Player) GetLevelUpTimes() []uint32 {
	if x != nil {
		return x.LevelUpTimes
	}
	return nil
}

func (x *CDOTAMatchMetadata_Team_Player) GetGraphNetWorth() []float32 {
	if x != nil {
		return x.GraphNetWorth
	}
	return nil
}

func (x *CDOTAMatchMetadata_Team_Player) GetInventorySnapshot() []*CDOTAMatchMetadata_Team_InventorySnapshot {
	if x != nil {
		return x.InventorySnapshot
	}
	return nil
}

func (x *CDOTAMatchMetadata_Team_Player) GetAvgStatsCalibrated() bool {
	if x != nil && x.AvgStatsCalibrated != nil {
		return *x.AvgStatsCalibrated
	}
	return false
}

func (x *CDOTAMatchMetadata_Team_Player) GetAutoStyleCriteria() []*CDOTAMatchMetadata_Team_AutoStyleCriteria {
	if x != nil {
		return x.AutoStyleCriteria
	}
	return nil
}

func (x *CDOTAMatchMetadata_Team_Player) GetEventData() []*CDOTAMatchMetadata_Team_EventData {
	if x != nil {
		return x.EventData
	}
	return nil
}

func (x *CDOTAMatchMetadata_Team_Player) GetStrangeGemProgress() []*CDOTAMatchMetadata_Team_StrangeGemProgress {
	if x != nil {
		return x.StrangeGemProgress
	}
	return nil
}

func (x *CDOTAMatchMetadata_Team_Player) GetHeroXp() uint32 {
	if x != nil && x.HeroXp != nil {
		return *x.HeroXp
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_Player) GetCampsStacked() uint32 {
	if x != nil && x.CampsStacked != nil {
		return *x.CampsStacked
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_Player) GetVictoryPrediction() []*CDOTAMatchMetadata_Team_VictoryPrediction {
	if x != nil {
		return x.VictoryPrediction
	}
	return nil
}

func (x *CDOTAMatchMetadata_Team_Player) GetLaneSelectionFlags() uint32 {
	if x != nil && x.LaneSelectionFlags != nil {
		return *x.LaneSelectionFlags
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_Player) GetRampages() uint32 {
	if x != nil && x.Rampages != nil {
		return *x.Rampages
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_Player) GetTripleKills() uint32 {
	if x != nil && x.TripleKills != nil {
		return *x.TripleKills
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_Player) GetAegisSnatched() uint32 {
	if x != nil && x.AegisSnatched != nil {
		return *x.AegisSnatched
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_Player) GetRapiersPurchased() uint32 {
	if x != nil && x.RapiersPurchased != nil {
		return *x.RapiersPurchased
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_Player) GetCouriersKilled() uint32 {
	if x != nil && x.CouriersKilled != nil {
		return *x.CouriersKilled
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_Player) GetNetWorthRank() uint32 {
	if x != nil && x.NetWorthRank != nil {
		return *x.NetWorthRank
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_Player) GetSupportGoldSpent() uint32 {
	if x != nil && x.SupportGoldSpent != nil {
		return *x.SupportGoldSpent
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_Player) GetObserverWardsPlaced() uint32 {
	if x != nil && x.ObserverWardsPlaced != nil {
		return *x.ObserverWardsPlaced
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_Player) GetSentryWardsPlaced() uint32 {
	if x != nil && x.SentryWardsPlaced != nil {
		return *x.SentryWardsPlaced
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_Player) GetWardsDewarded() uint32 {
	if x != nil && x.WardsDewarded != nil {
		return *x.WardsDewarded
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_Player) GetStunDuration() float32 {
	if x != nil && x.StunDuration != nil {
		return *x.StunDuration
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_Player) GetRankMmrBoostType() EDOTAMMRBoostType {
	if x != nil && x.RankMmrBoostType != nil {
		return *x.RankMmrBoostType
	}
	return Default_CDOTAMatchMetadata_Team_Player_RankMmrBoostType
}

func (x *CDOTAMatchMetadata_Team_Player) GetGauntletProgress() *CDOTAMatchMetadata_Team_GauntletProgress {
	if x != nil {
		return x.GauntletProgress
	}
	return nil
}

func (x *CDOTAMatchMetadata_Team_Player) GetContractProgress() []*CDOTAMatchMetadata_Team_Player_ContractProgress {
	if x != nil {
		return x.ContractProgress
	}
	return nil
}

type CDOTAMatchMetadata_Team_Player_ContractProgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildId             *uint32 `protobuf:"varint,1,opt,name=guild_id,json=guildId" json:"guild_id,omitempty"`
	EventId             *uint32 `protobuf:"varint,2,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	ChallengeInstanceId *uint32 `protobuf:"varint,3,opt,name=challenge_instance_id,json=challengeInstanceId" json:"challenge_instance_id,omitempty"`
	ChallengeParameter  *uint32 `protobuf:"varint,4,opt,name=challenge_parameter,json=challengeParameter" json:"challenge_parameter,omitempty"`
	ContractStars       *uint32 `protobuf:"varint,5,opt,name=contract_stars,json=contractStars" json:"contract_stars,omitempty"`
	ContractSlot        *uint32 `protobuf:"varint,6,opt,name=contract_slot,json=contractSlot" json:"contract_slot,omitempty"`
	Completed           *bool   `protobuf:"varint,7,opt,name=completed" json:"completed,omitempty"`
}

func (x *CDOTAMatchMetadata_Team_Player_ContractProgress) Reset() {
	*x = CDOTAMatchMetadata_Team_Player_ContractProgress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_match_metadata_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAMatchMetadata_Team_Player_ContractProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAMatchMetadata_Team_Player_ContractProgress) ProtoMessage() {}

func (x *CDOTAMatchMetadata_Team_Player_ContractProgress) ProtoReflect() protoreflect.Message {
	mi := &file_dota_match_metadata_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAMatchMetadata_Team_Player_ContractProgress.ProtoReflect.Descriptor instead.
func (*CDOTAMatchMetadata_Team_Player_ContractProgress) Descriptor() ([]byte, []int) {
	return file_dota_match_metadata_proto_rawDescGZIP(), []int{1, 0, 11, 0}
}

func (x *CDOTAMatchMetadata_Team_Player_ContractProgress) GetGuildId() uint32 {
	if x != nil && x.GuildId != nil {
		return *x.GuildId
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_Player_ContractProgress) GetEventId() uint32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_Player_ContractProgress) GetChallengeInstanceId() uint32 {
	if x != nil && x.ChallengeInstanceId != nil {
		return *x.ChallengeInstanceId
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_Player_ContractProgress) GetChallengeParameter() uint32 {
	if x != nil && x.ChallengeParameter != nil {
		return *x.ChallengeParameter
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_Player_ContractProgress) GetContractStars() uint32 {
	if x != nil && x.ContractStars != nil {
		return *x.ContractStars
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_Player_ContractProgress) GetContractSlot() uint32 {
	if x != nil && x.ContractSlot != nil {
		return *x.ContractSlot
	}
	return 0
}

func (x *CDOTAMatchMetadata_Team_Player_ContractProgress) GetCompleted() bool {
	if x != nil && x.Completed != nil {
		return *x.Completed
	}
	return false
}

type CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Progress  *uint32 `protobuf:"varint,2,opt,name=progress" json:"progress,omitempty"`
}

func (x *CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress) Reset() {
	*x = CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_match_metadata_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress) ProtoMessage() {}

func (x *CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress) ProtoReflect() protoreflect.Message {
	mi := &file_dota_match_metadata_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress.ProtoReflect.Descriptor instead.
func (*CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress) Descriptor() ([]byte, []int) {
	return file_dota_match_metadata_proto_rawDescGZIP(), []int{1, 1, 0}
}

func (x *CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress) GetProgress() uint32 {
	if x != nil && x.Progress != nil {
		return *x.Progress
	}
	return 0
}

type CDOTAMatchPrivateMetadata_StringName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   *uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (x *CDOTAMatchPrivateMetadata_StringName) Reset() {
	*x = CDOTAMatchPrivateMetadata_StringName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_match_metadata_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAMatchPrivateMetadata_StringName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAMatchPrivateMetadata_StringName) ProtoMessage() {}

func (x *CDOTAMatchPrivateMetadata_StringName) ProtoReflect() protoreflect.Message {
	mi := &file_dota_match_metadata_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAMatchPrivateMetadata_StringName.ProtoReflect.Descriptor instead.
func (*CDOTAMatchPrivateMetadata_StringName) Descriptor() ([]byte, []int) {
	return file_dota_match_metadata_proto_rawDescGZIP(), []int{2, 0}
}

func (x *CDOTAMatchPrivateMetadata_StringName) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *CDOTAMatchPrivateMetadata_StringName) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type CDOTAMatchPrivateMetadata_Team struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DotaTeam  *uint32                                    `protobuf:"varint,1,opt,name=dota_team,json=dotaTeam" json:"dota_team,omitempty"`
	Players   []*CDOTAMatchPrivateMetadata_Team_Player   `protobuf:"bytes,2,rep,name=players" json:"players,omitempty"`
	Buildings []*CDOTAMatchPrivateMetadata_Team_Building `protobuf:"bytes,3,rep,name=buildings" json:"buildings,omitempty"`
}

func (x *CDOTAMatchPrivateMetadata_Team) Reset() {
	*x = CDOTAMatchPrivateMetadata_Team{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_match_metadata_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAMatchPrivateMetadata_Team) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAMatchPrivateMetadata_Team) ProtoMessage() {}

func (x *CDOTAMatchPrivateMetadata_Team) ProtoReflect() protoreflect.Message {
	mi := &file_dota_match_metadata_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAMatchPrivateMetadata_Team.ProtoReflect.Descriptor instead.
func (*CDOTAMatchPrivateMetadata_Team) Descriptor() ([]byte, []int) {
	return file_dota_match_metadata_proto_rawDescGZIP(), []int{2, 1}
}

func (x *CDOTAMatchPrivateMetadata_Team) GetDotaTeam() uint32 {
	if x != nil && x.DotaTeam != nil {
		return *x.DotaTeam
	}
	return 0
}

func (x *CDOTAMatchPrivateMetadata_Team) GetPlayers() []*CDOTAMatchPrivateMetadata_Team_Player {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *CDOTAMatchPrivateMetadata_Team) GetBuildings() []*CDOTAMatchPrivateMetadata_Team_Building {
	if x != nil {
		return x.Buildings
	}
	return nil
}

type CDOTAMatchPrivateMetadata_Team_Player struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId       *uint32                                                `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	PlayerSlot      *uint32                                                `protobuf:"varint,2,opt,name=player_slot,json=playerSlot" json:"player_slot,omitempty"`
	PositionStream  []byte                                                 `protobuf:"bytes,3,opt,name=position_stream,json=positionStream" json:"position_stream,omitempty"`
	CombatSegments  []*CDOTAMatchPrivateMetadata_Team_Player_CombatSegment `protobuf:"bytes,4,rep,name=combat_segments,json=combatSegments" json:"combat_segments,omitempty"`
	DamageUnitNames []string                                               `protobuf:"bytes,5,rep,name=damage_unit_names,json=damageUnitNames" json:"damage_unit_names,omitempty"`
	BuffRecords     []*CDOTAMatchPrivateMetadata_Team_Player_BuffRecord    `protobuf:"bytes,6,rep,name=buff_records,json=buffRecords" json:"buff_records,omitempty"`
	GraphKills      []float32                                              `protobuf:"fixed32,7,rep,name=graph_kills,json=graphKills" json:"graph_kills,omitempty"`
	GraphDeaths     []float32                                              `protobuf:"fixed32,8,rep,name=graph_deaths,json=graphDeaths" json:"graph_deaths,omitempty"`
	GraphAssists    []float32                                              `protobuf:"fixed32,9,rep,name=graph_assists,json=graphAssists" json:"graph_assists,omitempty"`
	GraphLasthits   []float32                                              `protobuf:"fixed32,10,rep,name=graph_lasthits,json=graphLasthits" json:"graph_lasthits,omitempty"`
	GraphDenies     []float32                                              `protobuf:"fixed32,11,rep,name=graph_denies,json=graphDenies" json:"graph_denies,omitempty"`
	GoldReceived    *CDOTAMatchPrivateMetadata_Team_Player_GoldReceived    `protobuf:"bytes,12,opt,name=gold_received,json=goldReceived" json:"gold_received,omitempty"`
	XpReceived      *CDOTAMatchPrivateMetadata_Team_Player_XPReceived      `protobuf:"bytes,13,opt,name=xp_received,json=xpReceived" json:"xp_received,omitempty"`
}

func (x *CDOTAMatchPrivateMetadata_Team_Player) Reset() {
	*x = CDOTAMatchPrivateMetadata_Team_Player{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_match_metadata_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAMatchPrivateMetadata_Team_Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAMatchPrivateMetadata_Team_Player) ProtoMessage() {}

func (x *CDOTAMatchPrivateMetadata_Team_Player) ProtoReflect() protoreflect.Message {
	mi := &file_dota_match_metadata_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAMatchPrivateMetadata_Team_Player.ProtoReflect.Descriptor instead.
func (*CDOTAMatchPrivateMetadata_Team_Player) Descriptor() ([]byte, []int) {
	return file_dota_match_metadata_proto_rawDescGZIP(), []int{2, 1, 0}
}

func (x *CDOTAMatchPrivateMetadata_Team_Player) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CDOTAMatchPrivateMetadata_Team_Player) GetPlayerSlot() uint32 {
	if x != nil && x.PlayerSlot != nil {
		return *x.PlayerSlot
	}
	return 0
}

func (x *CDOTAMatchPrivateMetadata_Team_Player) GetPositionStream() []byte {
	if x != nil {
		return x.PositionStream
	}
	return nil
}

func (x *CDOTAMatchPrivateMetadata_Team_Player) GetCombatSegments() []*CDOTAMatchPrivateMetadata_Team_Player_CombatSegment {
	if x != nil {
		return x.CombatSegments
	}
	return nil
}

func (x *CDOTAMatchPrivateMetadata_Team_Player) GetDamageUnitNames() []string {
	if x != nil {
		return x.DamageUnitNames
	}
	return nil
}

func (x *CDOTAMatchPrivateMetadata_Team_Player) GetBuffRecords() []*CDOTAMatchPrivateMetadata_Team_Player_BuffRecord {
	if x != nil {
		return x.BuffRecords
	}
	return nil
}

func (x *CDOTAMatchPrivateMetadata_Team_Player) GetGraphKills() []float32 {
	if x != nil {
		return x.GraphKills
	}
	return nil
}

func (x *CDOTAMatchPrivateMetadata_Team_Player) GetGraphDeaths() []float32 {
	if x != nil {
		return x.GraphDeaths
	}
	return nil
}

func (x *CDOTAMatchPrivateMetadata_Team_Player) GetGraphAssists() []float32 {
	if x != nil {
		return x.GraphAssists
	}
	return nil
}

func (x *CDOTAMatchPrivateMetadata_Team_Player) GetGraphLasthits() []float32 {
	if x != nil {
		return x.GraphLasthits
	}
	return nil
}

func (x *CDOTAMatchPrivateMetadata_Team_Player) GetGraphDenies() []float32 {
	if x != nil {
		return x.GraphDenies
	}
	return nil
}

func (x *CDOTAMatchPrivateMetadata_Team_Player) GetGoldReceived() *CDOTAMatchPrivateMetadata_Team_Player_GoldReceived {
	if x != nil {
		return x.GoldReceived
	}
	return nil
}

func (x *CDOTAMatchPrivateMetadata_Team_Player) GetXpReceived() *CDOTAMatchPrivateMetadata_Team_Player_XPReceived {
	if x != nil {
		return x.XpReceived
	}
	return nil
}

type CDOTAMatchPrivateMetadata_Team_Building struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnitName       *string  `protobuf:"bytes,1,opt,name=unit_name,json=unitName" json:"unit_name,omitempty"`
	PositionQuantX *uint32  `protobuf:"varint,2,opt,name=position_quant_x,json=positionQuantX" json:"position_quant_x,omitempty"`
	PositionQuantY *uint32  `protobuf:"varint,3,opt,name=position_quant_y,json=positionQuantY" json:"position_quant_y,omitempty"`
	DeathTime      *float32 `protobuf:"fixed32,4,opt,name=death_time,json=deathTime" json:"death_time,omitempty"`
}

func (x *CDOTAMatchPrivateMetadata_Team_Building) Reset() {
	*x = CDOTAMatchPrivateMetadata_Team_Building{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_match_metadata_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAMatchPrivateMetadata_Team_Building) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAMatchPrivateMetadata_Team_Building) ProtoMessage() {}

func (x *CDOTAMatchPrivateMetadata_Team_Building) ProtoReflect() protoreflect.Message {
	mi := &file_dota_match_metadata_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAMatchPrivateMetadata_Team_Building.ProtoReflect.Descriptor instead.
func (*CDOTAMatchPrivateMetadata_Team_Building) Descriptor() ([]byte, []int) {
	return file_dota_match_metadata_proto_rawDescGZIP(), []int{2, 1, 1}
}

func (x *CDOTAMatchPrivateMetadata_Team_Building) GetUnitName() string {
	if x != nil && x.UnitName != nil {
		return *x.UnitName
	}
	return ""
}

func (x *CDOTAMatchPrivateMetadata_Team_Building) GetPositionQuantX() uint32 {
	if x != nil && x.PositionQuantX != nil {
		return *x.PositionQuantX
	}
	return 0
}

func (x *CDOTAMatchPrivateMetadata_Team_Building) GetPositionQuantY() uint32 {
	if x != nil && x.PositionQuantY != nil {
		return *x.PositionQuantY
	}
	return 0
}

func (x *CDOTAMatchPrivateMetadata_Team_Building) GetDeathTime() float32 {
	if x != nil && x.DeathTime != nil {
		return *x.DeathTime
	}
	return 0
}

type CDOTAMatchPrivateMetadata_Team_Player_CombatSegment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameTime         *int32                                                                  `protobuf:"varint,1,opt,name=game_time,json=gameTime" json:"game_time,omitempty"`
	DamageByAbility  []*CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility  `protobuf:"bytes,2,rep,name=damage_by_ability,json=damageByAbility" json:"damage_by_ability,omitempty"`
	HealingByAbility []*CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility `protobuf:"bytes,3,rep,name=healing_by_ability,json=healingByAbility" json:"healing_by_ability,omitempty"`
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment) Reset() {
	*x = CDOTAMatchPrivateMetadata_Team_Player_CombatSegment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_match_metadata_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAMatchPrivateMetadata_Team_Player_CombatSegment) ProtoMessage() {}

func (x *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment) ProtoReflect() protoreflect.Message {
	mi := &file_dota_match_metadata_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAMatchPrivateMetadata_Team_Player_CombatSegment.ProtoReflect.Descriptor instead.
func (*CDOTAMatchPrivateMetadata_Team_Player_CombatSegment) Descriptor() ([]byte, []int) {
	return file_dota_match_metadata_proto_rawDescGZIP(), []int{2, 1, 0, 0}
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment) GetGameTime() int32 {
	if x != nil && x.GameTime != nil {
		return *x.GameTime
	}
	return 0
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment) GetDamageByAbility() []*CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility {
	if x != nil {
		return x.DamageByAbility
	}
	return nil
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment) GetHealingByAbility() []*CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility {
	if x != nil {
		return x.HealingByAbility
	}
	return nil
}

type CDOTAMatchPrivateMetadata_Team_Player_BuffRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuffAbilityId    *uint32                                                          `protobuf:"varint,1,opt,name=buff_ability_id,json=buffAbilityId" json:"buff_ability_id,omitempty"`
	BuffModifierName *string                                                          `protobuf:"bytes,3,opt,name=buff_modifier_name,json=buffModifierName" json:"buff_modifier_name,omitempty"`
	ByHeroTargets    []*CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget `protobuf:"bytes,2,rep,name=by_hero_targets,json=byHeroTargets" json:"by_hero_targets,omitempty"`
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_BuffRecord) Reset() {
	*x = CDOTAMatchPrivateMetadata_Team_Player_BuffRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_match_metadata_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_BuffRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAMatchPrivateMetadata_Team_Player_BuffRecord) ProtoMessage() {}

func (x *CDOTAMatchPrivateMetadata_Team_Player_BuffRecord) ProtoReflect() protoreflect.Message {
	mi := &file_dota_match_metadata_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAMatchPrivateMetadata_Team_Player_BuffRecord.ProtoReflect.Descriptor instead.
func (*CDOTAMatchPrivateMetadata_Team_Player_BuffRecord) Descriptor() ([]byte, []int) {
	return file_dota_match_metadata_proto_rawDescGZIP(), []int{2, 1, 0, 1}
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_BuffRecord) GetBuffAbilityId() uint32 {
	if x != nil && x.BuffAbilityId != nil {
		return *x.BuffAbilityId
	}
	return 0
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_BuffRecord) GetBuffModifierName() string {
	if x != nil && x.BuffModifierName != nil {
		return *x.BuffModifierName
	}
	return ""
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_BuffRecord) GetByHeroTargets() []*CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget {
	if x != nil {
		return x.ByHeroTargets
	}
	return nil
}

type CDOTAMatchPrivateMetadata_Team_Player_GoldReceived struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Creep       *uint32 `protobuf:"varint,1,opt,name=creep" json:"creep,omitempty"`
	Heroes      *uint32 `protobuf:"varint,2,opt,name=heroes" json:"heroes,omitempty"`
	BountyRunes *uint32 `protobuf:"varint,3,opt,name=bounty_runes,json=bountyRunes" json:"bounty_runes,omitempty"`
	Passive     *uint32 `protobuf:"varint,4,opt,name=passive" json:"passive,omitempty"`
	Buildings   *uint32 `protobuf:"varint,5,opt,name=buildings" json:"buildings,omitempty"`
	Abilities   *uint32 `protobuf:"varint,6,opt,name=abilities" json:"abilities,omitempty"`
	Wards       *uint32 `protobuf:"varint,7,opt,name=wards" json:"wards,omitempty"`
	Other       *uint32 `protobuf:"varint,8,opt,name=other" json:"other,omitempty"`
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_GoldReceived) Reset() {
	*x = CDOTAMatchPrivateMetadata_Team_Player_GoldReceived{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_match_metadata_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_GoldReceived) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAMatchPrivateMetadata_Team_Player_GoldReceived) ProtoMessage() {}

func (x *CDOTAMatchPrivateMetadata_Team_Player_GoldReceived) ProtoReflect() protoreflect.Message {
	mi := &file_dota_match_metadata_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAMatchPrivateMetadata_Team_Player_GoldReceived.ProtoReflect.Descriptor instead.
func (*CDOTAMatchPrivateMetadata_Team_Player_GoldReceived) Descriptor() ([]byte, []int) {
	return file_dota_match_metadata_proto_rawDescGZIP(), []int{2, 1, 0, 2}
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_GoldReceived) GetCreep() uint32 {
	if x != nil && x.Creep != nil {
		return *x.Creep
	}
	return 0
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_GoldReceived) GetHeroes() uint32 {
	if x != nil && x.Heroes != nil {
		return *x.Heroes
	}
	return 0
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_GoldReceived) GetBountyRunes() uint32 {
	if x != nil && x.BountyRunes != nil {
		return *x.BountyRunes
	}
	return 0
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_GoldReceived) GetPassive() uint32 {
	if x != nil && x.Passive != nil {
		return *x.Passive
	}
	return 0
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_GoldReceived) GetBuildings() uint32 {
	if x != nil && x.Buildings != nil {
		return *x.Buildings
	}
	return 0
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_GoldReceived) GetAbilities() uint32 {
	if x != nil && x.Abilities != nil {
		return *x.Abilities
	}
	return 0
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_GoldReceived) GetWards() uint32 {
	if x != nil && x.Wards != nil {
		return *x.Wards
	}
	return 0
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_GoldReceived) GetOther() uint32 {
	if x != nil && x.Other != nil {
		return *x.Other
	}
	return 0
}

type CDOTAMatchPrivateMetadata_Team_Player_XPReceived struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Creep           *uint32 `protobuf:"varint,1,opt,name=creep" json:"creep,omitempty"`
	Heroes          *uint32 `protobuf:"varint,2,opt,name=heroes" json:"heroes,omitempty"`
	Roshan          *uint32 `protobuf:"varint,3,opt,name=roshan" json:"roshan,omitempty"`
	TomeOfKnowledge *uint32 `protobuf:"varint,4,opt,name=tome_of_knowledge,json=tomeOfKnowledge" json:"tome_of_knowledge,omitempty"`
	Outpost         *uint32 `protobuf:"varint,5,opt,name=outpost" json:"outpost,omitempty"`
	Other           *uint32 `protobuf:"varint,6,opt,name=other" json:"other,omitempty"`
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_XPReceived) Reset() {
	*x = CDOTAMatchPrivateMetadata_Team_Player_XPReceived{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_match_metadata_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_XPReceived) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAMatchPrivateMetadata_Team_Player_XPReceived) ProtoMessage() {}

func (x *CDOTAMatchPrivateMetadata_Team_Player_XPReceived) ProtoReflect() protoreflect.Message {
	mi := &file_dota_match_metadata_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAMatchPrivateMetadata_Team_Player_XPReceived.ProtoReflect.Descriptor instead.
func (*CDOTAMatchPrivateMetadata_Team_Player_XPReceived) Descriptor() ([]byte, []int) {
	return file_dota_match_metadata_proto_rawDescGZIP(), []int{2, 1, 0, 3}
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_XPReceived) GetCreep() uint32 {
	if x != nil && x.Creep != nil {
		return *x.Creep
	}
	return 0
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_XPReceived) GetHeroes() uint32 {
	if x != nil && x.Heroes != nil {
		return *x.Heroes
	}
	return 0
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_XPReceived) GetRoshan() uint32 {
	if x != nil && x.Roshan != nil {
		return *x.Roshan
	}
	return 0
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_XPReceived) GetTomeOfKnowledge() uint32 {
	if x != nil && x.TomeOfKnowledge != nil {
		return *x.TomeOfKnowledge
	}
	return 0
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_XPReceived) GetOutpost() uint32 {
	if x != nil && x.Outpost != nil {
		return *x.Outpost
	}
	return 0
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_XPReceived) GetOther() uint32 {
	if x != nil && x.Other != nil {
		return *x.Other
	}
	return 0
}

type CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceUnitIndex *uint32                                                                             `protobuf:"varint,3,opt,name=source_unit_index,json=sourceUnitIndex" json:"source_unit_index,omitempty"`
	AbilityId       *uint32                                                                             `protobuf:"varint,1,opt,name=ability_id,json=abilityId" json:"ability_id,omitempty"`
	ByHeroTargets   []*CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget `protobuf:"bytes,2,rep,name=by_hero_targets,json=byHeroTargets" json:"by_hero_targets,omitempty"`
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility) Reset() {
	*x = CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_match_metadata_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility) ProtoMessage() {}

func (x *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility) ProtoReflect() protoreflect.Message {
	mi := &file_dota_match_metadata_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility.ProtoReflect.Descriptor instead.
func (*CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility) Descriptor() ([]byte, []int) {
	return file_dota_match_metadata_proto_rawDescGZIP(), []int{2, 1, 0, 0, 0}
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility) GetSourceUnitIndex() uint32 {
	if x != nil && x.SourceUnitIndex != nil {
		return *x.SourceUnitIndex
	}
	return 0
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility) GetAbilityId() uint32 {
	if x != nil && x.AbilityId != nil {
		return *x.AbilityId
	}
	return 0
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility) GetByHeroTargets() []*CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget {
	if x != nil {
		return x.ByHeroTargets
	}
	return nil
}

type CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceUnitIndex *uint32                                                                              `protobuf:"varint,3,opt,name=source_unit_index,json=sourceUnitIndex" json:"source_unit_index,omitempty"`
	AbilityId       *uint32                                                                              `protobuf:"varint,1,opt,name=ability_id,json=abilityId" json:"ability_id,omitempty"`
	ByHeroTargets   []*CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget `protobuf:"bytes,2,rep,name=by_hero_targets,json=byHeroTargets" json:"by_hero_targets,omitempty"`
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility) Reset() {
	*x = CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_match_metadata_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility) ProtoMessage() {}

func (x *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility) ProtoReflect() protoreflect.Message {
	mi := &file_dota_match_metadata_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility.ProtoReflect.Descriptor instead.
func (*CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility) Descriptor() ([]byte, []int) {
	return file_dota_match_metadata_proto_rawDescGZIP(), []int{2, 1, 0, 0, 1}
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility) GetSourceUnitIndex() uint32 {
	if x != nil && x.SourceUnitIndex != nil {
		return *x.SourceUnitIndex
	}
	return 0
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility) GetAbilityId() uint32 {
	if x != nil && x.AbilityId != nil {
		return *x.AbilityId
	}
	return 0
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility) GetByHeroTargets() []*CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget {
	if x != nil {
		return x.ByHeroTargets
	}
	return nil
}

type CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeroId *uint32 `protobuf:"varint,1,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	Damage *uint32 `protobuf:"varint,2,opt,name=damage" json:"damage,omitempty"`
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget) Reset() {
	*x = CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_match_metadata_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget) ProtoMessage() {
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget) ProtoReflect() protoreflect.Message {
	mi := &file_dota_match_metadata_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget.ProtoReflect.Descriptor instead.
func (*CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget) Descriptor() ([]byte, []int) {
	return file_dota_match_metadata_proto_rawDescGZIP(), []int{2, 1, 0, 0, 0, 0}
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget) GetHeroId() uint32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget) GetDamage() uint32 {
	if x != nil && x.Damage != nil {
		return *x.Damage
	}
	return 0
}

type CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeroId  *uint32 `protobuf:"varint,1,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	Healing *uint32 `protobuf:"varint,2,opt,name=healing" json:"healing,omitempty"`
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget) Reset() {
	*x = CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_match_metadata_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget) ProtoMessage() {
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget) ProtoReflect() protoreflect.Message {
	mi := &file_dota_match_metadata_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget.ProtoReflect.Descriptor instead.
func (*CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget) Descriptor() ([]byte, []int) {
	return file_dota_match_metadata_proto_rawDescGZIP(), []int{2, 1, 0, 0, 1, 0}
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget) GetHeroId() uint32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget) GetHealing() uint32 {
	if x != nil && x.Healing != nil {
		return *x.Healing
	}
	return 0
}

type CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeroId          *uint32  `protobuf:"varint,1,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	ElapsedDuration *float32 `protobuf:"fixed32,2,opt,name=elapsed_duration,json=elapsedDuration" json:"elapsed_duration,omitempty"`
	IsHidden        *bool    `protobuf:"varint,3,opt,name=is_hidden,json=isHidden" json:"is_hidden,omitempty"`
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget) Reset() {
	*x = CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_match_metadata_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget) ProtoMessage() {}

func (x *CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget) ProtoReflect() protoreflect.Message {
	mi := &file_dota_match_metadata_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget.ProtoReflect.Descriptor instead.
func (*CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget) Descriptor() ([]byte, []int) {
	return file_dota_match_metadata_proto_rawDescGZIP(), []int{2, 1, 0, 1, 0}
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget) GetHeroId() uint32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget) GetElapsedDuration() float32 {
	if x != nil && x.ElapsedDuration != nil {
		return *x.ElapsedDuration
	}
	return 0
}

func (x *CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget) GetIsHidden() bool {
	if x != nil && x.IsHidden != nil {
		return *x.IsHidden
	}
	return false
}

var File_dota_match_metadata_proto protoreflect.FileDescriptor

var file_dota_match_metadata_proto_rawDesc = []byte{
	0x0a, 0x19, 0x64, 0x6f, 0x74, 0x61, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x64, 0x6f, 0x74,
	0x61, 0x1a, 0x15, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x67, 0x63, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x64, 0x6f, 0x74, 0x61, 0x5f, 0x67,
	0x63, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x64, 0x6f, 0x74, 0x61, 0x5f, 0x67, 0x63,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x64, 0x6f, 0x74, 0x61, 0x5f, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xae,
	0x01, 0x0a, 0x16, 0x43, 0x44, 0x4f, 0x54, 0x41, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x34,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x44, 0x4f, 0x54, 0x41, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22,
	0xc3, 0x34, 0x0a, 0x12, 0x43, 0x44, 0x4f, 0x54, 0x41, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x33, 0x0a, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x44, 0x4f,
	0x54, 0x41, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x54, 0x65, 0x61, 0x6d, 0x52, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x41, 0x0a, 0x0c, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x54,
	0x69, 0x6d, 0x65, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x52, 0x0b, 0x69, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x19,
	0x0a, 0x08, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x07, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x0f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x6e, 0x74, 0x69,
	0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x14, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d,
	0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x10,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x74, 0x69, 0x70, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x6f, 0x74,
	0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x70, 0x73, 0x52,
	0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x70, 0x73, 0x12, 0x4c, 0x0a, 0x11, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x10, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x08, 0x6d, 0x76, 0x70, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x6f, 0x74,
	0x61, 0x2e, 0x43, 0x4d, 0x76, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x6d, 0x76, 0x70, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x69, 0x0a, 0x18, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x63, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x44, 0x4f,
	0x54, 0x41, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x47, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x16, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x1a, 0xa5,
	0x2b, 0x0a, 0x04, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x74, 0x61, 0x5f,
	0x74, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x6f, 0x74, 0x61,
	0x54, 0x65, 0x61, 0x6d, 0x12, 0x3e, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x44, 0x4f,
	0x54, 0x41, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x54, 0x65, 0x61, 0x6d, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x07, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x65, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x02, 0x52, 0x0f,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x2a, 0x0a, 0x11, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x5f, 0x65, 0x61,
	0x72, 0x6e, 0x65, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x02, 0x52, 0x0f, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x47, 0x6f, 0x6c, 0x64, 0x45, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x5f, 0x6e, 0x65, 0x74, 0x5f, 0x77, 0x6f, 0x72, 0x74, 0x68, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x02, 0x52, 0x0d, 0x67, 0x72, 0x61, 0x70, 0x68, 0x4e, 0x65, 0x74, 0x57, 0x6f,
	0x72, 0x74, 0x68, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x6d, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f,
	0x70, 0x69, 0x63, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x63, 0x6d, 0x46, 0x69,
	0x72, 0x73, 0x74, 0x50, 0x69, 0x63, 0x6b, 0x12, 0x2f, 0x0a, 0x14, 0x63, 0x6d, 0x5f, 0x63, 0x61,
	0x70, 0x74, 0x61, 0x69, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x63, 0x6d, 0x43, 0x61, 0x70, 0x74, 0x61, 0x69, 0x6e,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6d, 0x5f, 0x62,
	0x61, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x6d, 0x42, 0x61, 0x6e,
	0x73, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6d, 0x5f, 0x70, 0x69, 0x63, 0x6b, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x6d, 0x50, 0x69, 0x63, 0x6b, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x6d, 0x5f, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x63, 0x6d, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x1a, 0x43, 0x0a, 0x0a, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x4b, 0x69, 0x6c, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x69, 0x63,
	0x74, 0x69, 0x6d, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x76, 0x69, 0x63, 0x74, 0x69, 0x6d, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x1a, 0x4c, 0x0a, 0x0c, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0xa7,
	0x01, 0x0a, 0x11, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x69,
	0x6c, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x61, 0x74, 0x68, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x64, 0x65, 0x61, 0x74, 0x68, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x69,
	0x73, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x61, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x1a, 0x48, 0x0a, 0x11, 0x41, 0x75, 0x74, 0x6f,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x12, 0x1d, 0x0a,
	0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x1a, 0xb2, 0x02, 0x0a, 0x12, 0x53, 0x74, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x47, 0x65,
	0x6d, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6b, 0x69, 0x6c,
	0x6c, 0x5f, 0x65, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x6b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x2b, 0x0a, 0x12, 0x67, 0x65, 0x6d, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x64, 0x65,
	0x66, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x67,
	0x65, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x66, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x28,
	0x0a, 0x10, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x68, 0x65, 0x72, 0x6f, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x48, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x65, 0x6d,
	0x5f, 0x64, 0x65, 0x66, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x11, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x66, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x1a, 0x98, 0x01, 0x0a, 0x11, 0x56, 0x69, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a,
	0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x64,
	0x65, 0x66, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x69, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x66, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x25, 0x0a, 0x0e,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x76, 0x69, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x56, 0x69, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x1a, 0x83, 0x01, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x65, 0x6e, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x65, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x1a, 0x6b, 0x0a, 0x15, 0x43, 0x61, 0x76, 0x65,
	0x72, 0x6e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x50, 0x61, 0x74, 0x68, 0x49, 0x64, 0x12, 0x26, 0x0a,
	0x0f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x52,
	0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x1a, 0x5c, 0x0a, 0x0b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47,
	0x72, 0x61, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x61, 0x75, 0x64, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x1a, 0xe2, 0x09, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12,
	0x32, 0x0a, 0x15, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13,
	0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x10, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x12, 0x3f, 0x0a, 0x1c, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x49, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x12, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x52, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x4d, 0x0a,
	0x23, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x5f,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x6c, 0x79, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x20, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75,
	0x73, 0x6c, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x12, 0x6b, 0x0a,
	0x1c, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x5f,
	0x77, 0x69, 0x74, 0x68, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x44, 0x4f, 0x54, 0x41,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x65,
	0x61, 0x6d, 0x2e, 0x53, 0x75, 0x62, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52,
	0x19, 0x73, 0x75, 0x62, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x57, 0x69,
	0x74, 0x68, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61,
	0x67, 0x65, 0x72, 0x5f, 0x77, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x77, 0x61, 0x67, 0x65, 0x72, 0x57, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x36, 0x0a, 0x17, 0x63, 0x61, 0x76, 0x65, 0x72, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x15, 0x63, 0x61, 0x76, 0x65, 0x72, 0x6e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x3a, 0x0a, 0x19, 0x63, 0x61, 0x76,
	0x65, 0x72, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x77, 0x69,
	0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x63, 0x61,
	0x76, 0x65, 0x72, 0x6e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x57, 0x69, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x77, 0x61, 0x67, 0x65, 0x72, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x57, 0x61, 0x67, 0x65, 0x72, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x1a,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x61,
	0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x18, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x41,
	0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x74, 0x0a, 0x1c, 0x63, 0x61,
	0x76, 0x65, 0x72, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x6d,
	0x61, 0x70, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x44, 0x4f, 0x54, 0x41, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x2e,
	0x43, 0x61, 0x76, 0x65, 0x72, 0x6e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x19, 0x63, 0x61, 0x76, 0x65, 0x72, 0x6e, 0x43, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x12, 0x4e, 0x0a, 0x24, 0x63, 0x61, 0x76, 0x65, 0x72, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x6c, 0x75, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f,
	0x77, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x20,
	0x63, 0x61, 0x76, 0x65, 0x72, 0x6e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x50,
	0x6c, 0x75, 0x73, 0x53, 0x68, 0x61, 0x72, 0x64, 0x57, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x52, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x67, 0x72, 0x61, 0x6e,
	0x74, 0x65, 0x64, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x64, 0x6f, 0x74, 0x61,
	0x2e, 0x43, 0x44, 0x4f, 0x54, 0x41, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47,
	0x72, 0x61, 0x6e, 0x74, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x47, 0x72, 0x61,
	0x6e, 0x74, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x63, 0x61, 0x76, 0x65, 0x72, 0x6e, 0x5f, 0x63,
	0x72, 0x61, 0x77, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x63, 0x61, 0x76, 0x65, 0x72, 0x6e, 0x43, 0x72,
	0x61, 0x77, 0x6c, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x12, 0x2f, 0x0a,
	0x14, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x77, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x6e, 0x75,
	0x73, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x74, 0x65, 0x61,
	0x6d, 0x57, 0x61, 0x67, 0x65, 0x72, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x50, 0x63, 0x74, 0x12, 0x28,
	0x0a, 0x10, 0x77, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x5f, 0x70,
	0x63, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x77, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6b, 0x50, 0x63, 0x74, 0x1a, 0x85, 0x01, 0x0a, 0x10, 0x47, 0x61, 0x75,
	0x6e, 0x74, 0x6c, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x67, 0x61, 0x75, 0x6e, 0x74, 0x6c, 0x65, 0x74, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x67, 0x61, 0x75, 0x6e, 0x74, 0x6c, 0x65, 0x74, 0x54, 0x69,
	0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x67, 0x61, 0x75, 0x6e, 0x74, 0x6c, 0x65, 0x74, 0x5f, 0x77,
	0x69, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x67, 0x61, 0x75, 0x6e, 0x74,
	0x6c, 0x65, 0x74, 0x57, 0x69, 0x6e, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x67, 0x61, 0x75, 0x6e, 0x74,
	0x6c, 0x65, 0x74, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x67, 0x61, 0x75, 0x6e, 0x74, 0x6c, 0x65, 0x74, 0x4c, 0x6f, 0x73, 0x73, 0x65, 0x73,
	0x1a, 0x83, 0x14, 0x0a, 0x06, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x0f, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x55, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x73, 0x6c, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x41, 0x0a, 0x13, 0x65, 0x71, 0x75, 0x69, 0x70, 0x70,
	0x65, 0x64, 0x5f, 0x65, 0x63, 0x6f, 0x6e, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x53, 0x4f, 0x45, 0x63,
	0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x11, 0x65, 0x71, 0x75, 0x69, 0x70, 0x70, 0x65, 0x64,
	0x45, 0x63, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x3e, 0x0a, 0x05, 0x6b, 0x69, 0x6c,
	0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e,
	0x43, 0x44, 0x4f, 0x54, 0x41, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4b, 0x69,
	0x6c, 0x6c, 0x52, 0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x40, 0x0a, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e,
	0x43, 0x44, 0x4f, 0x54, 0x41, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x61,
	0x76, 0x67, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x5f, 0x78, 0x31, 0x36, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x61, 0x76, 0x67, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x58, 0x31, 0x36, 0x12,
	0x24, 0x0a, 0x0e, 0x61, 0x76, 0x67, 0x5f, 0x64, 0x65, 0x61, 0x74, 0x68, 0x73, 0x5f, 0x78, 0x31,
	0x36, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x61, 0x76, 0x67, 0x44, 0x65, 0x61, 0x74,
	0x68, 0x73, 0x58, 0x31, 0x36, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x76, 0x67, 0x5f, 0x61, 0x73, 0x73,
	0x69, 0x73, 0x74, 0x73, 0x5f, 0x78, 0x31, 0x36, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x61, 0x76, 0x67, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x58, 0x31, 0x36, 0x12, 0x1e, 0x0a,
	0x0b, 0x61, 0x76, 0x67, 0x5f, 0x67, 0x70, 0x6d, 0x5f, 0x78, 0x31, 0x36, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x61, 0x76, 0x67, 0x47, 0x70, 0x6d, 0x58, 0x31, 0x36, 0x12, 0x1e, 0x0a,
	0x0b, 0x61, 0x76, 0x67, 0x5f, 0x78, 0x70, 0x6d, 0x5f, 0x78, 0x31, 0x36, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x61, 0x76, 0x67, 0x58, 0x70, 0x6d, 0x58, 0x31, 0x36, 0x12, 0x24, 0x0a,
	0x0e, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x5f, 0x78, 0x31, 0x36, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x62, 0x65, 0x73, 0x74, 0x4b, 0x69, 0x6c, 0x6c, 0x73,
	0x58, 0x31, 0x36, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x73, 0x73, 0x69,
	0x73, 0x74, 0x73, 0x5f, 0x78, 0x31, 0x36, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x62,
	0x65, 0x73, 0x74, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x58, 0x31, 0x36, 0x12, 0x20, 0x0a,
	0x0c, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x67, 0x70, 0x6d, 0x5f, 0x78, 0x31, 0x36, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x62, 0x65, 0x73, 0x74, 0x47, 0x70, 0x6d, 0x58, 0x31, 0x36, 0x12,
	0x20, 0x0a, 0x0c, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x78, 0x70, 0x6d, 0x5f, 0x78, 0x31, 0x36, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x62, 0x65, 0x73, 0x74, 0x58, 0x70, 0x6d, 0x58, 0x31,
	0x36, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x77, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6b,
	0x12, 0x26, 0x0a, 0x0f, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x77, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6b, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x62, 0x65, 0x73, 0x74, 0x57,
	0x69, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x67, 0x68,
	0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x66,
	0x69, 0x67, 0x68, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x61, 0x72,
	0x6d, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x66,
	0x61, 0x72, 0x6d, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0c, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x09, 0x70, 0x75, 0x73, 0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x24, 0x0a, 0x0e,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x75, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x16,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x55, 0x70, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x6e, 0x65, 0x74, 0x5f,
	0x77, 0x6f, 0x72, 0x74, 0x68, 0x18, 0x17, 0x20, 0x03, 0x28, 0x02, 0x52, 0x0d, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x4e, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x74, 0x68, 0x12, 0x5e, 0x0a, 0x12, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x44,
	0x4f, 0x54, 0x41, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x54, 0x65, 0x61, 0x6d, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x11, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x76,
	0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x61, 0x76, 0x67, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x65, 0x64, 0x12, 0x5f, 0x0a, 0x13,
	0x61, 0x75, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x64, 0x6f, 0x74, 0x61,
	0x2e, 0x43, 0x44, 0x4f, 0x54, 0x41, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x52, 0x11, 0x61, 0x75, 0x74, 0x6f,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x12, 0x46, 0x0a,
	0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x1d, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x44, 0x4f, 0x54, 0x41, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x65, 0x61, 0x6d,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x62, 0x0a, 0x14, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x67, 0x65, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x1e, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x44, 0x4f, 0x54, 0x41,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x65,
	0x61, 0x6d, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x47, 0x65, 0x6d, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x12, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x47, 0x65,
	0x6d, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x65, 0x72,
	0x6f, 0x5f, 0x78, 0x70, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x72, 0x6f,
	0x58, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x6d, 0x70, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x63,
	0x6b, 0x65, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x61, 0x6d, 0x70, 0x73,
	0x53, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x5e, 0x0a, 0x12, 0x76, 0x69, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x21, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x44, 0x4f, 0x54, 0x41,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x65,
	0x61, 0x6d, 0x2e, 0x56, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x76, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x61, 0x6e, 0x65, 0x5f,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6c, 0x61, 0x6e, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x61, 0x6d,
	0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x61, 0x6d,
	0x70, 0x61, 0x67, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x69, 0x70, 0x6c, 0x65, 0x5f,
	0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x72, 0x69,
	0x70, 0x6c, 0x65, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x65, 0x67, 0x69,
	0x73, 0x5f, 0x73, 0x6e, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x61, 0x65, 0x67, 0x69, 0x73, 0x53, 0x6e, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x12,
	0x2b, 0x0a, 0x11, 0x72, 0x61, 0x70, 0x69, 0x65, 0x72, 0x73, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x64, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x72, 0x61, 0x70, 0x69,
	0x65, 0x72, 0x73, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f,
	0x63, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x73, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x18,
	0x27, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x73, 0x4b,
	0x69, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x65, 0x74, 0x5f, 0x77, 0x6f, 0x72,
	0x74, 0x68, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6e,
	0x65, 0x74, 0x57, 0x6f, 0x72, 0x74, 0x68, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x2c, 0x0a, 0x12, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x6e,
	0x74, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x47, 0x6f, 0x6c, 0x64, 0x53, 0x70, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x6f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x64, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x57, 0x61, 0x72, 0x64, 0x73, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x12, 0x2e, 0x0a,
	0x13, 0x73, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x64, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x73, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x57, 0x61, 0x72, 0x64, 0x73, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x12, 0x25, 0x0a,
	0x0e, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x64, 0x65, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x18,
	0x2c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x77, 0x61, 0x72, 0x64, 0x73, 0x44, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x75, 0x6e, 0x5f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x73, 0x74, 0x75,
	0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x60, 0x0a, 0x13, 0x72, 0x61, 0x6e,
	0x6b, 0x5f, 0x6d, 0x6d, 0x72, 0x5f, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x2e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x45, 0x44,
	0x4f, 0x54, 0x41, 0x4d, 0x4d, 0x52, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x3a,
	0x18, 0x6b, 0x5f, 0x45, 0x44, 0x4f, 0x54, 0x41, 0x4d, 0x4d, 0x52, 0x42, 0x6f, 0x6f, 0x73, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x52, 0x10, 0x72, 0x61, 0x6e, 0x6b, 0x4d,
	0x6d, 0x72, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5b, 0x0a, 0x11, 0x67,
	0x61, 0x75, 0x6e, 0x74, 0x6c, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x44,
	0x4f, 0x54, 0x41, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x54, 0x65, 0x61, 0x6d, 0x2e, 0x47, 0x61, 0x75, 0x6e, 0x74, 0x6c, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x10, 0x67, 0x61, 0x75, 0x6e, 0x74, 0x6c, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x62, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x30, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x44, 0x4f, 0x54, 0x41,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x65,
	0x61, 0x6d, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x97, 0x02, 0x0a,
	0x10, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x63,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x74,
	0x61, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f,
	0x73, 0x6c, 0x6f, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x1a, 0xcc, 0x04, 0x0a, 0x16, 0x47, 0x75, 0x69, 0x6c, 0x64,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x08,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x45, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x3a, 0x0d, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x52, 0x07, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x13, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3d, 0x0a, 0x1b, 0x63, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x61, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x18, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x41, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x44, 0x0a, 0x1e, 0x63, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x61, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x1c, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x41, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x73, 0x0a, 0x13, 0x69, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x5f, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x64,
	0x6f, 0x74, 0x61, 0x2e, 0x43, 0x44, 0x4f, 0x54, 0x41, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x49, 0x6e,
	0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x12, 0x69, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x1a, 0x4f, 0x0a, 0x12, 0x49, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75,
	0x61, 0x6c, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x22, 0xe9, 0x16, 0x0a, 0x19, 0x43, 0x44, 0x4f, 0x54, 0x41, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x3a, 0x0a, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x44, 0x4f, 0x54, 0x41, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x12,
	0x32, 0x0a, 0x15, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x77, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f,
	0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x02, 0x52, 0x13,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x57, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0x4d, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x64, 0x6f, 0x74, 0x61,
	0x2e, 0x43, 0x44, 0x4f, 0x54, 0x41, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x1a, 0x30, 0x0a, 0x0a, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x1a, 0xda, 0x14, 0x0a, 0x04, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x1b, 0x0a,
	0x09, 0x64, 0x6f, 0x74, 0x61, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x64, 0x6f, 0x74, 0x61, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x45, 0x0a, 0x07, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x64, 0x6f,
	0x74, 0x61, 0x2e, 0x43, 0x44, 0x4f, 0x54, 0x41, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x65, 0x61,
	0x6d, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x73, 0x12, 0x4b, 0x0a, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x44, 0x4f, 0x54,
	0x41, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x69, 0x6e, 0x67, 0x52, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0x83,
	0x12, 0x0a, 0x06, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0e, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x12, 0x62, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x5f, 0x73, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x64, 0x6f,
	0x74, 0x61, 0x2e, 0x43, 0x44, 0x4f, 0x54, 0x41, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x65, 0x61,
	0x6d, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x53,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x12, 0x59, 0x0a, 0x0c, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e,
	0x43, 0x44, 0x4f, 0x54, 0x41, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x2e, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x0b, 0x62, 0x75, 0x66, 0x66, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x02, 0x52, 0x0a, 0x67, 0x72, 0x61, 0x70, 0x68, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x64, 0x65, 0x61, 0x74, 0x68, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x02, 0x52, 0x0b, 0x67, 0x72, 0x61, 0x70, 0x68, 0x44, 0x65, 0x61, 0x74, 0x68,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x02, 0x52, 0x0c, 0x67, 0x72, 0x61, 0x70, 0x68, 0x41,
	0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f,
	0x6c, 0x61, 0x73, 0x74, 0x68, 0x69, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x02, 0x52, 0x0d,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x4c, 0x61, 0x73, 0x74, 0x68, 0x69, 0x74, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x73, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x02, 0x52, 0x0b, 0x67, 0x72, 0x61, 0x70, 0x68, 0x44, 0x65, 0x6e, 0x69, 0x65, 0x73,
	0x12, 0x5d, 0x0a, 0x0d, 0x67, 0x6f, 0x6c, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43,
	0x44, 0x4f, 0x54, 0x41, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x2e, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x47, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x52, 0x0c, 0x67, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12,
	0x57, 0x0a, 0x0b, 0x78, 0x70, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x44, 0x4f, 0x54,
	0x41, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x2e, 0x58, 0x50, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x52, 0x0a, 0x78, 0x70,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x1a, 0xe1, 0x06, 0x0a, 0x0d, 0x43, 0x6f, 0x6d,
	0x62, 0x61, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61,
	0x6d, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x67,
	0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x75, 0x0a, 0x11, 0x64, 0x61, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x62, 0x79, 0x5f, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x49, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x44, 0x4f, 0x54, 0x41, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e,
	0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61,
	0x6d, 0x61, 0x67, 0x65, 0x42, 0x79, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0f, 0x64,
	0x61, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x79, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x78,
	0x0a, 0x12, 0x68, 0x65, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x79, 0x5f, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x64, 0x6f, 0x74,
	0x61, 0x2e, 0x43, 0x44, 0x4f, 0x54, 0x41, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x65, 0x61, 0x6d,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x41,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x10, 0x68, 0x65, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x42,
	0x79, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x1a, 0x9d, 0x02, 0x0a, 0x0f, 0x44, 0x61, 0x6d,
	0x61, 0x67, 0x65, 0x42, 0x79, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x2a, 0x0a, 0x11,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55,
	0x6e, 0x69, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x7e, 0x0a, 0x0f, 0x62, 0x79, 0x5f, 0x68, 0x65,
	0x72, 0x6f, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x56, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x44, 0x4f, 0x54, 0x41, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x43, 0x6f,
	0x6d, 0x62, 0x61, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61, 0x6d, 0x61,
	0x67, 0x65, 0x42, 0x79, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x42, 0x79, 0x48, 0x65,
	0x72, 0x6f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x0d, 0x62, 0x79, 0x48, 0x65, 0x72, 0x6f,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x1a, 0x3f, 0x0a, 0x0c, 0x42, 0x79, 0x48, 0x65, 0x72,
	0x6f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x65, 0x72, 0x6f, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x72, 0x6f, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x1a, 0xa1, 0x02, 0x0a, 0x10, 0x48, 0x65, 0x61,
	0x6c, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x2a, 0x0a,
	0x11, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x55, 0x6e, 0x69, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x7f, 0x0a, 0x0f, 0x62, 0x79, 0x5f, 0x68,
	0x65, 0x72, 0x6f, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x57, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x44, 0x4f, 0x54, 0x41, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x43,
	0x6f, 0x6d, 0x62, 0x61, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x48, 0x65, 0x61,
	0x6c, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x42, 0x79,
	0x48, 0x65, 0x72, 0x6f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x0d, 0x62, 0x79, 0x48, 0x65,
	0x72, 0x6f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x1a, 0x41, 0x0a, 0x0c, 0x42, 0x79, 0x48,
	0x65, 0x72, 0x6f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x65, 0x72,
	0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x72, 0x6f,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x68, 0x65, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x1a, 0xc0, 0x02, 0x0a,
	0x0a, 0x42, 0x75, 0x66, 0x66, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x62,
	0x75, 0x66, 0x66, 0x5f, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x62, 0x75, 0x66, 0x66, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x62, 0x75, 0x66, 0x66, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x6b, 0x0a, 0x0f, 0x62, 0x79, 0x5f, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x64, 0x6f, 0x74,
	0x61, 0x2e, 0x43, 0x44, 0x4f, 0x54, 0x41, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x65, 0x61, 0x6d,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x2e, 0x42, 0x79, 0x48, 0x65, 0x72, 0x6f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52,
	0x0d, 0x62, 0x79, 0x48, 0x65, 0x72, 0x6f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x1a, 0x6f,
	0x0a, 0x0c, 0x42, 0x79, 0x48, 0x65, 0x72, 0x6f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x68, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x6c, 0x61, 0x70, 0x73,
	0x65, 0x64, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0f, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x1a,
	0xe1, 0x01, 0x0a, 0x0c, 0x47, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x72, 0x65, 0x65, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x63, 0x72, 0x65, 0x65, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x72, 0x6f, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x72, 0x6f, 0x65, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x5f, 0x72, 0x75, 0x6e, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x52, 0x75, 0x6e, 0x65,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x70, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x1a, 0xae, 0x01, 0x0a, 0x0a, 0x58, 0x50, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x72, 0x65, 0x65, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x63, 0x72, 0x65, 0x65, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x72, 0x6f,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x72, 0x6f, 0x65, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x73, 0x68, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x72, 0x6f, 0x73, 0x68, 0x61, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x6f, 0x6d, 0x65,
	0x5f, 0x6f, 0x66, 0x5f, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x6f, 0x6d, 0x65, 0x4f, 0x66, 0x4b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x6f, 0x73, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x6f, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6f,
	0x74, 0x68, 0x65, 0x72, 0x1a, 0x9a, 0x01, 0x0a, 0x08, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e,
	0x67, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28,
	0x0a, 0x10, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x5f, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x58, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x5f, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x59, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x61, 0x74, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x64, 0x65, 0x61, 0x74, 0x68, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0x73, 0x0a, 0x10, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x44, 0x50, 0x43,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x29, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x44, 0x4f, 0x54, 0x41, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x12, 0x34, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x44, 0x4f, 0x54, 0x41, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x03, 0x80, 0x01, 0x00,
}

var (
	file_dota_match_metadata_proto_rawDescOnce sync.Once
	file_dota_match_metadata_proto_rawDescData = file_dota_match_metadata_proto_rawDesc
)

func file_dota_match_metadata_proto_rawDescGZIP() []byte {
	file_dota_match_metadata_proto_rawDescOnce.Do(func() {
		file_dota_match_metadata_proto_rawDescData = protoimpl.X.CompressGZIP(file_dota_match_metadata_proto_rawDescData)
	})
	return file_dota_match_metadata_proto_rawDescData
}

var file_dota_match_metadata_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_dota_match_metadata_proto_goTypes = []interface{}{
	(*CDOTAMatchMetadataFile)(nil),                                                            // 0: dota.CDOTAMatchMetadataFile
	(*CDOTAMatchMetadata)(nil),                                                                // 1: dota.CDOTAMatchMetadata
	(*CDOTAMatchPrivateMetadata)(nil),                                                         // 2: dota.CDOTAMatchPrivateMetadata
	(*CMsgDOTADPCMatch)(nil),                                                                  // 3: dota.CMsgDOTADPCMatch
	(*CDOTAMatchMetadata_Team)(nil),                                                           // 4: dota.CDOTAMatchMetadata.Team
	(*CDOTAMatchMetadata_GuildChallengeProgress)(nil),                                         // 5: dota.CDOTAMatchMetadata.GuildChallengeProgress
	(*CDOTAMatchMetadata_Team_PlayerKill)(nil),                                                // 6: dota.CDOTAMatchMetadata.Team.PlayerKill
	(*CDOTAMatchMetadata_Team_ItemPurchase)(nil),                                              // 7: dota.CDOTAMatchMetadata.Team.ItemPurchase
	(*CDOTAMatchMetadata_Team_InventorySnapshot)(nil),                                         // 8: dota.CDOTAMatchMetadata.Team.InventorySnapshot
	(*CDOTAMatchMetadata_Team_AutoStyleCriteria)(nil),                                         // 9: dota.CDOTAMatchMetadata.Team.AutoStyleCriteria
	(*CDOTAMatchMetadata_Team_StrangeGemProgress)(nil),                                        // 10: dota.CDOTAMatchMetadata.Team.StrangeGemProgress
	(*CDOTAMatchMetadata_Team_VictoryPrediction)(nil),                                         // 11: dota.CDOTAMatchMetadata.Team.VictoryPrediction
	(*CDOTAMatchMetadata_Team_SubChallenge)(nil),                                              // 12: dota.CDOTAMatchMetadata.Team.SubChallenge
	(*CDOTAMatchMetadata_Team_CavernChallengeResult)(nil),                                     // 13: dota.CDOTAMatchMetadata.Team.CavernChallengeResult
	(*CDOTAMatchMetadata_Team_ActionGrant)(nil),                                               // 14: dota.CDOTAMatchMetadata.Team.ActionGrant
	(*CDOTAMatchMetadata_Team_EventData)(nil),                                                 // 15: dota.CDOTAMatchMetadata.Team.EventData
	(*CDOTAMatchMetadata_Team_GauntletProgress)(nil),                                          // 16: dota.CDOTAMatchMetadata.Team.GauntletProgress
	(*CDOTAMatchMetadata_Team_Player)(nil),                                                    // 17: dota.CDOTAMatchMetadata.Team.Player
	(*CDOTAMatchMetadata_Team_Player_ContractProgress)(nil),                                   // 18: dota.CDOTAMatchMetadata.Team.Player.ContractProgress
	(*CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress)(nil),                      // 19: dota.CDOTAMatchMetadata.GuildChallengeProgress.IndividualProgress
	(*CDOTAMatchPrivateMetadata_StringName)(nil),                                              // 20: dota.CDOTAMatchPrivateMetadata.StringName
	(*CDOTAMatchPrivateMetadata_Team)(nil),                                                    // 21: dota.CDOTAMatchPrivateMetadata.Team
	(*CDOTAMatchPrivateMetadata_Team_Player)(nil),                                             // 22: dota.CDOTAMatchPrivateMetadata.Team.Player
	(*CDOTAMatchPrivateMetadata_Team_Building)(nil),                                           // 23: dota.CDOTAMatchPrivateMetadata.Team.Building
	(*CDOTAMatchPrivateMetadata_Team_Player_CombatSegment)(nil),                               // 24: dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment
	(*CDOTAMatchPrivateMetadata_Team_Player_BuffRecord)(nil),                                  // 25: dota.CDOTAMatchPrivateMetadata.Team.Player.BuffRecord
	(*CDOTAMatchPrivateMetadata_Team_Player_GoldReceived)(nil),                                // 26: dota.CDOTAMatchPrivateMetadata.Team.Player.GoldReceived
	(*CDOTAMatchPrivateMetadata_Team_Player_XPReceived)(nil),                                  // 27: dota.CDOTAMatchPrivateMetadata.Team.Player.XPReceived
	(*CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility)(nil),               // 28: dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility
	(*CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility)(nil),              // 29: dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbility
	(*CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget)(nil),  // 30: dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.ByHeroTarget
	(*CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget)(nil), // 31: dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbility.ByHeroTarget
	(*CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget)(nil),                     // 32: dota.CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.ByHeroTarget
	(*CLobbyTimedRewardDetails)(nil),                                                          // 33: dota.CLobbyTimedRewardDetails
	(*CMsgMatchTips)(nil),                                                                     // 34: dota.CMsgMatchTips
	(*CMsgMatchMatchmakingStats)(nil),                                                         // 35: dota.CMsgMatchMatchmakingStats
	(*CMvpData)(nil),                                                                          // 36: dota.CMvpData
	(*CMsgDOTAMatch)(nil),                                                                     // 37: dota.CMsgDOTAMatch
	(EEvent)(0),                                                                               // 38: dota.EEvent
	(*CSOEconItem)(nil),                                                                       // 39: dota.CSOEconItem
	(EDOTAMMRBoostType)(0),                                                                    // 40: dota.EDOTAMMRBoostType
}
var file_dota_match_metadata_proto_depIdxs = []int32{
	1,  // 0: dota.CDOTAMatchMetadataFile.metadata:type_name -> dota.CDOTAMatchMetadata
	4,  // 1: dota.CDOTAMatchMetadata.teams:type_name -> dota.CDOTAMatchMetadata.Team
	33, // 2: dota.CDOTAMatchMetadata.item_rewards:type_name -> dota.CLobbyTimedRewardDetails
	34, // 3: dota.CDOTAMatchMetadata.match_tips:type_name -> dota.CMsgMatchTips
	35, // 4: dota.CDOTAMatchMetadata.matchmaking_stats:type_name -> dota.CMsgMatchMatchmakingStats
	36, // 5: dota.CDOTAMatchMetadata.mvp_data:type_name -> dota.CMvpData
	5,  // 6: dota.CDOTAMatchMetadata.guild_challenge_progress:type_name -> dota.CDOTAMatchMetadata.GuildChallengeProgress
	21, // 7: dota.CDOTAMatchPrivateMetadata.teams:type_name -> dota.CDOTAMatchPrivateMetadata.Team
	20, // 8: dota.CDOTAMatchPrivateMetadata.string_names:type_name -> dota.CDOTAMatchPrivateMetadata.StringName
	37, // 9: dota.CMsgDOTADPCMatch.match:type_name -> dota.CMsgDOTAMatch
	1,  // 10: dota.CMsgDOTADPCMatch.metadata:type_name -> dota.CDOTAMatchMetadata
	17, // 11: dota.CDOTAMatchMetadata.Team.players:type_name -> dota.CDOTAMatchMetadata.Team.Player
	38, // 12: dota.CDOTAMatchMetadata.GuildChallengeProgress.event_id:type_name -> dota.EEvent
	19, // 13: dota.CDOTAMatchMetadata.GuildChallengeProgress.individual_progress:type_name -> dota.CDOTAMatchMetadata.GuildChallengeProgress.IndividualProgress
	12, // 14: dota.CDOTAMatchMetadata.Team.EventData.sub_challenges_with_progress:type_name -> dota.CDOTAMatchMetadata.Team.SubChallenge
	13, // 15: dota.CDOTAMatchMetadata.Team.EventData.cavern_challenge_map_results:type_name -> dota.CDOTAMatchMetadata.Team.CavernChallengeResult
	14, // 16: dota.CDOTAMatchMetadata.Team.EventData.actions_granted:type_name -> dota.CDOTAMatchMetadata.Team.ActionGrant
	39, // 17: dota.CDOTAMatchMetadata.Team.Player.equipped_econ_items:type_name -> dota.CSOEconItem
	6,  // 18: dota.CDOTAMatchMetadata.Team.Player.kills:type_name -> dota.CDOTAMatchMetadata.Team.PlayerKill
	7,  // 19: dota.CDOTAMatchMetadata.Team.Player.items:type_name -> dota.CDOTAMatchMetadata.Team.ItemPurchase
	8,  // 20: dota.CDOTAMatchMetadata.Team.Player.inventory_snapshot:type_name -> dota.CDOTAMatchMetadata.Team.InventorySnapshot
	9,  // 21: dota.CDOTAMatchMetadata.Team.Player.auto_style_criteria:type_name -> dota.CDOTAMatchMetadata.Team.AutoStyleCriteria
	15, // 22: dota.CDOTAMatchMetadata.Team.Player.event_data:type_name -> dota.CDOTAMatchMetadata.Team.EventData
	10, // 23: dota.CDOTAMatchMetadata.Team.Player.strange_gem_progress:type_name -> dota.CDOTAMatchMetadata.Team.StrangeGemProgress
	11, // 24: dota.CDOTAMatchMetadata.Team.Player.victory_prediction:type_name -> dota.CDOTAMatchMetadata.Team.VictoryPrediction
	40, // 25: dota.CDOTAMatchMetadata.Team.Player.rank_mmr_boost_type:type_name -> dota.EDOTAMMRBoostType
	16, // 26: dota.CDOTAMatchMetadata.Team.Player.gauntlet_progress:type_name -> dota.CDOTAMatchMetadata.Team.GauntletProgress
	18, // 27: dota.CDOTAMatchMetadata.Team.Player.contract_progress:type_name -> dota.CDOTAMatchMetadata.Team.Player.ContractProgress
	22, // 28: dota.CDOTAMatchPrivateMetadata.Team.players:type_name -> dota.CDOTAMatchPrivateMetadata.Team.Player
	23, // 29: dota.CDOTAMatchPrivateMetadata.Team.buildings:type_name -> dota.CDOTAMatchPrivateMetadata.Team.Building
	24, // 30: dota.CDOTAMatchPrivateMetadata.Team.Player.combat_segments:type_name -> dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment
	25, // 31: dota.CDOTAMatchPrivateMetadata.Team.Player.buff_records:type_name -> dota.CDOTAMatchPrivateMetadata.Team.Player.BuffRecord
	26, // 32: dota.CDOTAMatchPrivateMetadata.Team.Player.gold_received:type_name -> dota.CDOTAMatchPrivateMetadata.Team.Player.GoldReceived
	27, // 33: dota.CDOTAMatchPrivateMetadata.Team.Player.xp_received:type_name -> dota.CDOTAMatchPrivateMetadata.Team.Player.XPReceived
	28, // 34: dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.damage_by_ability:type_name -> dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility
	29, // 35: dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.healing_by_ability:type_name -> dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbility
	32, // 36: dota.CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.by_hero_targets:type_name -> dota.CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.ByHeroTarget
	30, // 37: dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.by_hero_targets:type_name -> dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.ByHeroTarget
	31, // 38: dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbility.by_hero_targets:type_name -> dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbility.ByHeroTarget
	39, // [39:39] is the sub-list for method output_type
	39, // [39:39] is the sub-list for method input_type
	39, // [39:39] is the sub-list for extension type_name
	39, // [39:39] is the sub-list for extension extendee
	0,  // [0:39] is the sub-list for field type_name
}

func init() { file_dota_match_metadata_proto_init() }
func file_dota_match_metadata_proto_init() {
	if File_dota_match_metadata_proto != nil {
		return
	}
	file_base_gcmessages_proto_init()
	file_dota_gcmessages_common_match_management_proto_init()
	file_dota_gcmessages_common_proto_init()
	file_dota_shared_enums_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_dota_match_metadata_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAMatchMetadataFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_match_metadata_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAMatchMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_match_metadata_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAMatchPrivateMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_match_metadata_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTADPCMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_match_metadata_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAMatchMetadata_Team); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_match_metadata_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAMatchMetadata_GuildChallengeProgress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_match_metadata_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAMatchMetadata_Team_PlayerKill); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_match_metadata_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAMatchMetadata_Team_ItemPurchase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_match_metadata_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAMatchMetadata_Team_InventorySnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_match_metadata_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAMatchMetadata_Team_AutoStyleCriteria); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_match_metadata_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAMatchMetadata_Team_StrangeGemProgress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_match_metadata_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAMatchMetadata_Team_VictoryPrediction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_match_metadata_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAMatchMetadata_Team_SubChallenge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_match_metadata_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAMatchMetadata_Team_CavernChallengeResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_match_metadata_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAMatchMetadata_Team_ActionGrant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_match_metadata_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAMatchMetadata_Team_EventData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_match_metadata_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAMatchMetadata_Team_GauntletProgress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_match_metadata_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAMatchMetadata_Team_Player); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_match_metadata_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAMatchMetadata_Team_Player_ContractProgress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_match_metadata_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_match_metadata_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAMatchPrivateMetadata_StringName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_match_metadata_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAMatchPrivateMetadata_Team); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_match_metadata_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAMatchPrivateMetadata_Team_Player); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_match_metadata_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAMatchPrivateMetadata_Team_Building); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_match_metadata_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAMatchPrivateMetadata_Team_Player_CombatSegment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_match_metadata_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAMatchPrivateMetadata_Team_Player_BuffRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_match_metadata_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAMatchPrivateMetadata_Team_Player_GoldReceived); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_match_metadata_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAMatchPrivateMetadata_Team_Player_XPReceived); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_match_metadata_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_match_metadata_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_match_metadata_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_match_metadata_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_match_metadata_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dota_match_metadata_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_dota_match_metadata_proto_goTypes,
		DependencyIndexes: file_dota_match_metadata_proto_depIdxs,
		MessageInfos:      file_dota_match_metadata_proto_msgTypes,
	}.Build()
	File_dota_match_metadata_proto = out.File
	file_dota_match_metadata_proto_rawDesc = nil
	file_dota_match_metadata_proto_goTypes = nil
	file_dota_match_metadata_proto_depIdxs = nil
}
