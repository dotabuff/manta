// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.6.1
// source: dota_gcmessages_client_watch.proto

package dota

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type CMsgSpectateFriendGameResponse_EWatchLiveResult int32

const (
	CMsgSpectateFriendGameResponse_SUCCESS                        CMsgSpectateFriendGameResponse_EWatchLiveResult = 0
	CMsgSpectateFriendGameResponse_ERROR_GENERIC                  CMsgSpectateFriendGameResponse_EWatchLiveResult = 1
	CMsgSpectateFriendGameResponse_ERROR_NO_PLUS                  CMsgSpectateFriendGameResponse_EWatchLiveResult = 2
	CMsgSpectateFriendGameResponse_ERROR_NOT_FRIENDS              CMsgSpectateFriendGameResponse_EWatchLiveResult = 3
	CMsgSpectateFriendGameResponse_ERROR_LOBBY_NOT_FOUND          CMsgSpectateFriendGameResponse_EWatchLiveResult = 4
	CMsgSpectateFriendGameResponse_ERROR_SPECTATOR_IN_A_LOBBY     CMsgSpectateFriendGameResponse_EWatchLiveResult = 5
	CMsgSpectateFriendGameResponse_ERROR_LOBBY_IS_LAN             CMsgSpectateFriendGameResponse_EWatchLiveResult = 6
	CMsgSpectateFriendGameResponse_ERROR_WRONG_LOBBY_TYPE         CMsgSpectateFriendGameResponse_EWatchLiveResult = 7
	CMsgSpectateFriendGameResponse_ERROR_WRONG_LOBBY_STATE        CMsgSpectateFriendGameResponse_EWatchLiveResult = 8
	CMsgSpectateFriendGameResponse_ERROR_PLAYER_NOT_PLAYER        CMsgSpectateFriendGameResponse_EWatchLiveResult = 9
	CMsgSpectateFriendGameResponse_ERROR_TOO_MANY_SPECTATORS      CMsgSpectateFriendGameResponse_EWatchLiveResult = 10
	CMsgSpectateFriendGameResponse_ERROR_SPECTATOR_SWITCHED_TEAMS CMsgSpectateFriendGameResponse_EWatchLiveResult = 11
	CMsgSpectateFriendGameResponse_ERROR_FRIENDS_ON_BOTH_SIDES    CMsgSpectateFriendGameResponse_EWatchLiveResult = 12
	CMsgSpectateFriendGameResponse_ERROR_SPECTATOR_IN_THIS_LOBBY  CMsgSpectateFriendGameResponse_EWatchLiveResult = 13
)

// Enum value maps for CMsgSpectateFriendGameResponse_EWatchLiveResult.
var (
	CMsgSpectateFriendGameResponse_EWatchLiveResult_name = map[int32]string{
		0:  "SUCCESS",
		1:  "ERROR_GENERIC",
		2:  "ERROR_NO_PLUS",
		3:  "ERROR_NOT_FRIENDS",
		4:  "ERROR_LOBBY_NOT_FOUND",
		5:  "ERROR_SPECTATOR_IN_A_LOBBY",
		6:  "ERROR_LOBBY_IS_LAN",
		7:  "ERROR_WRONG_LOBBY_TYPE",
		8:  "ERROR_WRONG_LOBBY_STATE",
		9:  "ERROR_PLAYER_NOT_PLAYER",
		10: "ERROR_TOO_MANY_SPECTATORS",
		11: "ERROR_SPECTATOR_SWITCHED_TEAMS",
		12: "ERROR_FRIENDS_ON_BOTH_SIDES",
		13: "ERROR_SPECTATOR_IN_THIS_LOBBY",
	}
	CMsgSpectateFriendGameResponse_EWatchLiveResult_value = map[string]int32{
		"SUCCESS":                        0,
		"ERROR_GENERIC":                  1,
		"ERROR_NO_PLUS":                  2,
		"ERROR_NOT_FRIENDS":              3,
		"ERROR_LOBBY_NOT_FOUND":          4,
		"ERROR_SPECTATOR_IN_A_LOBBY":     5,
		"ERROR_LOBBY_IS_LAN":             6,
		"ERROR_WRONG_LOBBY_TYPE":         7,
		"ERROR_WRONG_LOBBY_STATE":        8,
		"ERROR_PLAYER_NOT_PLAYER":        9,
		"ERROR_TOO_MANY_SPECTATORS":      10,
		"ERROR_SPECTATOR_SWITCHED_TEAMS": 11,
		"ERROR_FRIENDS_ON_BOTH_SIDES":    12,
		"ERROR_SPECTATOR_IN_THIS_LOBBY":  13,
	}
)

func (x CMsgSpectateFriendGameResponse_EWatchLiveResult) Enum() *CMsgSpectateFriendGameResponse_EWatchLiveResult {
	p := new(CMsgSpectateFriendGameResponse_EWatchLiveResult)
	*p = x
	return p
}

func (x CMsgSpectateFriendGameResponse_EWatchLiveResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgSpectateFriendGameResponse_EWatchLiveResult) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_watch_proto_enumTypes[0].Descriptor()
}

func (CMsgSpectateFriendGameResponse_EWatchLiveResult) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_watch_proto_enumTypes[0]
}

func (x CMsgSpectateFriendGameResponse_EWatchLiveResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgSpectateFriendGameResponse_EWatchLiveResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgSpectateFriendGameResponse_EWatchLiveResult(num)
	return nil
}

// Deprecated: Use CMsgSpectateFriendGameResponse_EWatchLiveResult.Descriptor instead.
func (CMsgSpectateFriendGameResponse_EWatchLiveResult) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_watch_proto_rawDescGZIP(), []int{14, 0}
}

type CMsgWatchGameResponse_WatchGameResult int32

const (
	CMsgWatchGameResponse_PENDING                   CMsgWatchGameResponse_WatchGameResult = 0
	CMsgWatchGameResponse_READY                     CMsgWatchGameResponse_WatchGameResult = 1
	CMsgWatchGameResponse_GAMESERVERNOTFOUND        CMsgWatchGameResponse_WatchGameResult = 2
	CMsgWatchGameResponse_UNAVAILABLE               CMsgWatchGameResponse_WatchGameResult = 3
	CMsgWatchGameResponse_CANCELLED                 CMsgWatchGameResponse_WatchGameResult = 4
	CMsgWatchGameResponse_INCOMPATIBLEVERSION       CMsgWatchGameResponse_WatchGameResult = 5
	CMsgWatchGameResponse_MISSINGLEAGUESUBSCRIPTION CMsgWatchGameResponse_WatchGameResult = 6
	CMsgWatchGameResponse_LOBBYNOTFOUND             CMsgWatchGameResponse_WatchGameResult = 7
)

// Enum value maps for CMsgWatchGameResponse_WatchGameResult.
var (
	CMsgWatchGameResponse_WatchGameResult_name = map[int32]string{
		0: "PENDING",
		1: "READY",
		2: "GAMESERVERNOTFOUND",
		3: "UNAVAILABLE",
		4: "CANCELLED",
		5: "INCOMPATIBLEVERSION",
		6: "MISSINGLEAGUESUBSCRIPTION",
		7: "LOBBYNOTFOUND",
	}
	CMsgWatchGameResponse_WatchGameResult_value = map[string]int32{
		"PENDING":                   0,
		"READY":                     1,
		"GAMESERVERNOTFOUND":        2,
		"UNAVAILABLE":               3,
		"CANCELLED":                 4,
		"INCOMPATIBLEVERSION":       5,
		"MISSINGLEAGUESUBSCRIPTION": 6,
		"LOBBYNOTFOUND":             7,
	}
)

func (x CMsgWatchGameResponse_WatchGameResult) Enum() *CMsgWatchGameResponse_WatchGameResult {
	p := new(CMsgWatchGameResponse_WatchGameResult)
	*p = x
	return p
}

func (x CMsgWatchGameResponse_WatchGameResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgWatchGameResponse_WatchGameResult) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_watch_proto_enumTypes[1].Descriptor()
}

func (CMsgWatchGameResponse_WatchGameResult) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_watch_proto_enumTypes[1]
}

func (x CMsgWatchGameResponse_WatchGameResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgWatchGameResponse_WatchGameResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgWatchGameResponse_WatchGameResult(num)
	return nil
}

// Deprecated: Use CMsgWatchGameResponse_WatchGameResult.Descriptor instead.
func (CMsgWatchGameResponse_WatchGameResult) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_watch_proto_rawDescGZIP(), []int{18, 0}
}

type CSourceTVGameSmall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivateTime               *uint32                      `protobuf:"varint,1,opt,name=activate_time,json=activateTime" json:"activate_time,omitempty"`
	DeactivateTime             *uint32                      `protobuf:"varint,2,opt,name=deactivate_time,json=deactivateTime" json:"deactivate_time,omitempty"`
	ServerSteamId              *uint64                      `protobuf:"varint,3,opt,name=server_steam_id,json=serverSteamId" json:"server_steam_id,omitempty"`
	LobbyId                    *uint64                      `protobuf:"varint,4,opt,name=lobby_id,json=lobbyId" json:"lobby_id,omitempty"`
	LeagueId                   *uint32                      `protobuf:"varint,5,opt,name=league_id,json=leagueId" json:"league_id,omitempty"`
	LobbyType                  *uint32                      `protobuf:"varint,6,opt,name=lobby_type,json=lobbyType" json:"lobby_type,omitempty"`
	GameTime                   *int32                       `protobuf:"varint,7,opt,name=game_time,json=gameTime" json:"game_time,omitempty"`
	Delay                      *uint32                      `protobuf:"varint,8,opt,name=delay" json:"delay,omitempty"`
	Spectators                 *uint32                      `protobuf:"varint,9,opt,name=spectators" json:"spectators,omitempty"`
	GameMode                   *uint32                      `protobuf:"varint,10,opt,name=game_mode,json=gameMode" json:"game_mode,omitempty"`
	AverageMmr                 *uint32                      `protobuf:"varint,11,opt,name=average_mmr,json=averageMmr" json:"average_mmr,omitempty"`
	MatchId                    *uint64                      `protobuf:"varint,12,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	SeriesId                   *uint32                      `protobuf:"varint,13,opt,name=series_id,json=seriesId" json:"series_id,omitempty"`
	TeamNameRadiant            *string                      `protobuf:"bytes,15,opt,name=team_name_radiant,json=teamNameRadiant" json:"team_name_radiant,omitempty"`
	TeamNameDire               *string                      `protobuf:"bytes,16,opt,name=team_name_dire,json=teamNameDire" json:"team_name_dire,omitempty"`
	TeamLogoRadiant            *uint64                      `protobuf:"fixed64,24,opt,name=team_logo_radiant,json=teamLogoRadiant" json:"team_logo_radiant,omitempty"`
	TeamLogoDire               *uint64                      `protobuf:"fixed64,25,opt,name=team_logo_dire,json=teamLogoDire" json:"team_logo_dire,omitempty"`
	TeamIdRadiant              *uint32                      `protobuf:"varint,30,opt,name=team_id_radiant,json=teamIdRadiant" json:"team_id_radiant,omitempty"`
	TeamIdDire                 *uint32                      `protobuf:"varint,31,opt,name=team_id_dire,json=teamIdDire" json:"team_id_dire,omitempty"`
	SortScore                  *uint32                      `protobuf:"varint,17,opt,name=sort_score,json=sortScore" json:"sort_score,omitempty"`
	LastUpdateTime             *float32                     `protobuf:"fixed32,18,opt,name=last_update_time,json=lastUpdateTime" json:"last_update_time,omitempty"`
	RadiantLead                *int32                       `protobuf:"varint,19,opt,name=radiant_lead,json=radiantLead" json:"radiant_lead,omitempty"`
	RadiantScore               *uint32                      `protobuf:"varint,20,opt,name=radiant_score,json=radiantScore" json:"radiant_score,omitempty"`
	DireScore                  *uint32                      `protobuf:"varint,21,opt,name=dire_score,json=direScore" json:"dire_score,omitempty"`
	Players                    []*CSourceTVGameSmall_Player `protobuf:"bytes,22,rep,name=players" json:"players,omitempty"`
	BuildingState              *uint32                      `protobuf:"fixed32,23,opt,name=building_state,json=buildingState" json:"building_state,omitempty"`
	WeekendTourneyTournamentId *uint32                      `protobuf:"varint,26,opt,name=weekend_tourney_tournament_id,json=weekendTourneyTournamentId" json:"weekend_tourney_tournament_id,omitempty"`
	WeekendTourneyDivision     *uint32                      `protobuf:"varint,27,opt,name=weekend_tourney_division,json=weekendTourneyDivision" json:"weekend_tourney_division,omitempty"`
	WeekendTourneySkillLevel   *uint32                      `protobuf:"varint,28,opt,name=weekend_tourney_skill_level,json=weekendTourneySkillLevel" json:"weekend_tourney_skill_level,omitempty"`
	WeekendTourneyBracketRound *uint32                      `protobuf:"varint,29,opt,name=weekend_tourney_bracket_round,json=weekendTourneyBracketRound" json:"weekend_tourney_bracket_round,omitempty"`
}

func (x *CSourceTVGameSmall) Reset() {
	*x = CSourceTVGameSmall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_watch_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSourceTVGameSmall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSourceTVGameSmall) ProtoMessage() {}

func (x *CSourceTVGameSmall) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_watch_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSourceTVGameSmall.ProtoReflect.Descriptor instead.
func (*CSourceTVGameSmall) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_watch_proto_rawDescGZIP(), []int{0}
}

func (x *CSourceTVGameSmall) GetActivateTime() uint32 {
	if x != nil && x.ActivateTime != nil {
		return *x.ActivateTime
	}
	return 0
}

func (x *CSourceTVGameSmall) GetDeactivateTime() uint32 {
	if x != nil && x.DeactivateTime != nil {
		return *x.DeactivateTime
	}
	return 0
}

func (x *CSourceTVGameSmall) GetServerSteamId() uint64 {
	if x != nil && x.ServerSteamId != nil {
		return *x.ServerSteamId
	}
	return 0
}

func (x *CSourceTVGameSmall) GetLobbyId() uint64 {
	if x != nil && x.LobbyId != nil {
		return *x.LobbyId
	}
	return 0
}

func (x *CSourceTVGameSmall) GetLeagueId() uint32 {
	if x != nil && x.LeagueId != nil {
		return *x.LeagueId
	}
	return 0
}

func (x *CSourceTVGameSmall) GetLobbyType() uint32 {
	if x != nil && x.LobbyType != nil {
		return *x.LobbyType
	}
	return 0
}

func (x *CSourceTVGameSmall) GetGameTime() int32 {
	if x != nil && x.GameTime != nil {
		return *x.GameTime
	}
	return 0
}

func (x *CSourceTVGameSmall) GetDelay() uint32 {
	if x != nil && x.Delay != nil {
		return *x.Delay
	}
	return 0
}

func (x *CSourceTVGameSmall) GetSpectators() uint32 {
	if x != nil && x.Spectators != nil {
		return *x.Spectators
	}
	return 0
}

func (x *CSourceTVGameSmall) GetGameMode() uint32 {
	if x != nil && x.GameMode != nil {
		return *x.GameMode
	}
	return 0
}

func (x *CSourceTVGameSmall) GetAverageMmr() uint32 {
	if x != nil && x.AverageMmr != nil {
		return *x.AverageMmr
	}
	return 0
}

func (x *CSourceTVGameSmall) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CSourceTVGameSmall) GetSeriesId() uint32 {
	if x != nil && x.SeriesId != nil {
		return *x.SeriesId
	}
	return 0
}

func (x *CSourceTVGameSmall) GetTeamNameRadiant() string {
	if x != nil && x.TeamNameRadiant != nil {
		return *x.TeamNameRadiant
	}
	return ""
}

func (x *CSourceTVGameSmall) GetTeamNameDire() string {
	if x != nil && x.TeamNameDire != nil {
		return *x.TeamNameDire
	}
	return ""
}

func (x *CSourceTVGameSmall) GetTeamLogoRadiant() uint64 {
	if x != nil && x.TeamLogoRadiant != nil {
		return *x.TeamLogoRadiant
	}
	return 0
}

func (x *CSourceTVGameSmall) GetTeamLogoDire() uint64 {
	if x != nil && x.TeamLogoDire != nil {
		return *x.TeamLogoDire
	}
	return 0
}

func (x *CSourceTVGameSmall) GetTeamIdRadiant() uint32 {
	if x != nil && x.TeamIdRadiant != nil {
		return *x.TeamIdRadiant
	}
	return 0
}

func (x *CSourceTVGameSmall) GetTeamIdDire() uint32 {
	if x != nil && x.TeamIdDire != nil {
		return *x.TeamIdDire
	}
	return 0
}

func (x *CSourceTVGameSmall) GetSortScore() uint32 {
	if x != nil && x.SortScore != nil {
		return *x.SortScore
	}
	return 0
}

func (x *CSourceTVGameSmall) GetLastUpdateTime() float32 {
	if x != nil && x.LastUpdateTime != nil {
		return *x.LastUpdateTime
	}
	return 0
}

func (x *CSourceTVGameSmall) GetRadiantLead() int32 {
	if x != nil && x.RadiantLead != nil {
		return *x.RadiantLead
	}
	return 0
}

func (x *CSourceTVGameSmall) GetRadiantScore() uint32 {
	if x != nil && x.RadiantScore != nil {
		return *x.RadiantScore
	}
	return 0
}

func (x *CSourceTVGameSmall) GetDireScore() uint32 {
	if x != nil && x.DireScore != nil {
		return *x.DireScore
	}
	return 0
}

func (x *CSourceTVGameSmall) GetPlayers() []*CSourceTVGameSmall_Player {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *CSourceTVGameSmall) GetBuildingState() uint32 {
	if x != nil && x.BuildingState != nil {
		return *x.BuildingState
	}
	return 0
}

func (x *CSourceTVGameSmall) GetWeekendTourneyTournamentId() uint32 {
	if x != nil && x.WeekendTourneyTournamentId != nil {
		return *x.WeekendTourneyTournamentId
	}
	return 0
}

func (x *CSourceTVGameSmall) GetWeekendTourneyDivision() uint32 {
	if x != nil && x.WeekendTourneyDivision != nil {
		return *x.WeekendTourneyDivision
	}
	return 0
}

func (x *CSourceTVGameSmall) GetWeekendTourneySkillLevel() uint32 {
	if x != nil && x.WeekendTourneySkillLevel != nil {
		return *x.WeekendTourneySkillLevel
	}
	return 0
}

func (x *CSourceTVGameSmall) GetWeekendTourneyBracketRound() uint32 {
	if x != nil && x.WeekendTourneyBracketRound != nil {
		return *x.WeekendTourneyBracketRound
	}
	return 0
}

type CMsgClientToGCFindTopSourceTVGames struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SearchKey     *string  `protobuf:"bytes,1,opt,name=search_key,json=searchKey" json:"search_key,omitempty"`
	LeagueId      *uint32  `protobuf:"varint,2,opt,name=league_id,json=leagueId" json:"league_id,omitempty"`
	HeroId        *uint32  `protobuf:"varint,3,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	StartGame     *uint32  `protobuf:"varint,4,opt,name=start_game,json=startGame" json:"start_game,omitempty"`
	GameListIndex *uint32  `protobuf:"varint,5,opt,name=game_list_index,json=gameListIndex" json:"game_list_index,omitempty"`
	LobbyIds      []uint64 `protobuf:"varint,6,rep,name=lobby_ids,json=lobbyIds" json:"lobby_ids,omitempty"`
}

func (x *CMsgClientToGCFindTopSourceTVGames) Reset() {
	*x = CMsgClientToGCFindTopSourceTVGames{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_watch_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCFindTopSourceTVGames) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCFindTopSourceTVGames) ProtoMessage() {}

func (x *CMsgClientToGCFindTopSourceTVGames) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_watch_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCFindTopSourceTVGames.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCFindTopSourceTVGames) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_watch_proto_rawDescGZIP(), []int{1}
}

func (x *CMsgClientToGCFindTopSourceTVGames) GetSearchKey() string {
	if x != nil && x.SearchKey != nil {
		return *x.SearchKey
	}
	return ""
}

func (x *CMsgClientToGCFindTopSourceTVGames) GetLeagueId() uint32 {
	if x != nil && x.LeagueId != nil {
		return *x.LeagueId
	}
	return 0
}

func (x *CMsgClientToGCFindTopSourceTVGames) GetHeroId() uint32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CMsgClientToGCFindTopSourceTVGames) GetStartGame() uint32 {
	if x != nil && x.StartGame != nil {
		return *x.StartGame
	}
	return 0
}

func (x *CMsgClientToGCFindTopSourceTVGames) GetGameListIndex() uint32 {
	if x != nil && x.GameListIndex != nil {
		return *x.GameListIndex
	}
	return 0
}

func (x *CMsgClientToGCFindTopSourceTVGames) GetLobbyIds() []uint64 {
	if x != nil {
		return x.LobbyIds
	}
	return nil
}

type CMsgGCToClientFindTopSourceTVGamesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SearchKey     *string               `protobuf:"bytes,1,opt,name=search_key,json=searchKey" json:"search_key,omitempty"`
	LeagueId      *uint32               `protobuf:"varint,2,opt,name=league_id,json=leagueId" json:"league_id,omitempty"`
	HeroId        *uint32               `protobuf:"varint,3,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	StartGame     *uint32               `protobuf:"varint,4,opt,name=start_game,json=startGame" json:"start_game,omitempty"`
	NumGames      *uint32               `protobuf:"varint,5,opt,name=num_games,json=numGames" json:"num_games,omitempty"`
	GameListIndex *uint32               `protobuf:"varint,6,opt,name=game_list_index,json=gameListIndex" json:"game_list_index,omitempty"`
	GameList      []*CSourceTVGameSmall `protobuf:"bytes,7,rep,name=game_list,json=gameList" json:"game_list,omitempty"`
	SpecificGames *bool                 `protobuf:"varint,8,opt,name=specific_games,json=specificGames" json:"specific_games,omitempty"`
	BotGame       *CSourceTVGameSmall   `protobuf:"bytes,9,opt,name=bot_game,json=botGame" json:"bot_game,omitempty"`
}

func (x *CMsgGCToClientFindTopSourceTVGamesResponse) Reset() {
	*x = CMsgGCToClientFindTopSourceTVGamesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_watch_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCToClientFindTopSourceTVGamesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientFindTopSourceTVGamesResponse) ProtoMessage() {}

func (x *CMsgGCToClientFindTopSourceTVGamesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_watch_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientFindTopSourceTVGamesResponse.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientFindTopSourceTVGamesResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_watch_proto_rawDescGZIP(), []int{2}
}

func (x *CMsgGCToClientFindTopSourceTVGamesResponse) GetSearchKey() string {
	if x != nil && x.SearchKey != nil {
		return *x.SearchKey
	}
	return ""
}

func (x *CMsgGCToClientFindTopSourceTVGamesResponse) GetLeagueId() uint32 {
	if x != nil && x.LeagueId != nil {
		return *x.LeagueId
	}
	return 0
}

func (x *CMsgGCToClientFindTopSourceTVGamesResponse) GetHeroId() uint32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CMsgGCToClientFindTopSourceTVGamesResponse) GetStartGame() uint32 {
	if x != nil && x.StartGame != nil {
		return *x.StartGame
	}
	return 0
}

func (x *CMsgGCToClientFindTopSourceTVGamesResponse) GetNumGames() uint32 {
	if x != nil && x.NumGames != nil {
		return *x.NumGames
	}
	return 0
}

func (x *CMsgGCToClientFindTopSourceTVGamesResponse) GetGameListIndex() uint32 {
	if x != nil && x.GameListIndex != nil {
		return *x.GameListIndex
	}
	return 0
}

func (x *CMsgGCToClientFindTopSourceTVGamesResponse) GetGameList() []*CSourceTVGameSmall {
	if x != nil {
		return x.GameList
	}
	return nil
}

func (x *CMsgGCToClientFindTopSourceTVGamesResponse) GetSpecificGames() bool {
	if x != nil && x.SpecificGames != nil {
		return *x.SpecificGames
	}
	return false
}

func (x *CMsgGCToClientFindTopSourceTVGamesResponse) GetBotGame() *CSourceTVGameSmall {
	if x != nil {
		return x.BotGame
	}
	return nil
}

type CMsgGCToClientTopWeekendTourneyGames struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LiveGames []*CSourceTVGameSmall `protobuf:"bytes,1,rep,name=live_games,json=liveGames" json:"live_games,omitempty"`
}

func (x *CMsgGCToClientTopWeekendTourneyGames) Reset() {
	*x = CMsgGCToClientTopWeekendTourneyGames{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_watch_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCToClientTopWeekendTourneyGames) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientTopWeekendTourneyGames) ProtoMessage() {}

func (x *CMsgGCToClientTopWeekendTourneyGames) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_watch_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientTopWeekendTourneyGames.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientTopWeekendTourneyGames) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_watch_proto_rawDescGZIP(), []int{3}
}

func (x *CMsgGCToClientTopWeekendTourneyGames) GetLiveGames() []*CSourceTVGameSmall {
	if x != nil {
		return x.LiveGames
	}
	return nil
}

type CMsgClientToGCTopMatchesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeroId          *uint32 `protobuf:"varint,1,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	PlayerAccountId *uint32 `protobuf:"varint,2,opt,name=player_account_id,json=playerAccountId" json:"player_account_id,omitempty"`
	TeamId          *uint32 `protobuf:"varint,3,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
}

func (x *CMsgClientToGCTopMatchesRequest) Reset() {
	*x = CMsgClientToGCTopMatchesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_watch_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCTopMatchesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCTopMatchesRequest) ProtoMessage() {}

func (x *CMsgClientToGCTopMatchesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_watch_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCTopMatchesRequest.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCTopMatchesRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_watch_proto_rawDescGZIP(), []int{4}
}

func (x *CMsgClientToGCTopMatchesRequest) GetHeroId() uint32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CMsgClientToGCTopMatchesRequest) GetPlayerAccountId() uint32 {
	if x != nil && x.PlayerAccountId != nil {
		return *x.PlayerAccountId
	}
	return 0
}

func (x *CMsgClientToGCTopMatchesRequest) GetTeamId() uint32 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

type CMsgClientToGCTopLeagueMatchesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgClientToGCTopLeagueMatchesRequest) Reset() {
	*x = CMsgClientToGCTopLeagueMatchesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_watch_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCTopLeagueMatchesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCTopLeagueMatchesRequest) ProtoMessage() {}

func (x *CMsgClientToGCTopLeagueMatchesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_watch_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCTopLeagueMatchesRequest.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCTopLeagueMatchesRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_watch_proto_rawDescGZIP(), []int{5}
}

type CMsgClientToGCTopFriendMatchesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgClientToGCTopFriendMatchesRequest) Reset() {
	*x = CMsgClientToGCTopFriendMatchesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_watch_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCTopFriendMatchesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCTopFriendMatchesRequest) ProtoMessage() {}

func (x *CMsgClientToGCTopFriendMatchesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_watch_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCTopFriendMatchesRequest.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCTopFriendMatchesRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_watch_proto_rawDescGZIP(), []int{6}
}

type CMsgClientToGCMatchesMinimalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchIds []uint64 `protobuf:"varint,1,rep,name=match_ids,json=matchIds" json:"match_ids,omitempty"`
}

func (x *CMsgClientToGCMatchesMinimalRequest) Reset() {
	*x = CMsgClientToGCMatchesMinimalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_watch_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCMatchesMinimalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCMatchesMinimalRequest) ProtoMessage() {}

func (x *CMsgClientToGCMatchesMinimalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_watch_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCMatchesMinimalRequest.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCMatchesMinimalRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_watch_proto_rawDescGZIP(), []int{7}
}

func (x *CMsgClientToGCMatchesMinimalRequest) GetMatchIds() []uint64 {
	if x != nil {
		return x.MatchIds
	}
	return nil
}

type CMsgClientToGCMatchesMinimalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Matches   []*CMsgDOTAMatchMinimal `protobuf:"bytes,1,rep,name=matches" json:"matches,omitempty"`
	LastMatch *bool                   `protobuf:"varint,2,opt,name=last_match,json=lastMatch" json:"last_match,omitempty"`
}

func (x *CMsgClientToGCMatchesMinimalResponse) Reset() {
	*x = CMsgClientToGCMatchesMinimalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_watch_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCMatchesMinimalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCMatchesMinimalResponse) ProtoMessage() {}

func (x *CMsgClientToGCMatchesMinimalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_watch_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCMatchesMinimalResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCMatchesMinimalResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_watch_proto_rawDescGZIP(), []int{8}
}

func (x *CMsgClientToGCMatchesMinimalResponse) GetMatches() []*CMsgDOTAMatchMinimal {
	if x != nil {
		return x.Matches
	}
	return nil
}

func (x *CMsgClientToGCMatchesMinimalResponse) GetLastMatch() bool {
	if x != nil && x.LastMatch != nil {
		return *x.LastMatch
	}
	return false
}

type CMsgGCToClientTopLeagueMatchesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Matches []*CMsgDOTAMatchMinimal `protobuf:"bytes,2,rep,name=matches" json:"matches,omitempty"`
}

func (x *CMsgGCToClientTopLeagueMatchesResponse) Reset() {
	*x = CMsgGCToClientTopLeagueMatchesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_watch_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCToClientTopLeagueMatchesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientTopLeagueMatchesResponse) ProtoMessage() {}

func (x *CMsgGCToClientTopLeagueMatchesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_watch_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientTopLeagueMatchesResponse.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientTopLeagueMatchesResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_watch_proto_rawDescGZIP(), []int{9}
}

func (x *CMsgGCToClientTopLeagueMatchesResponse) GetMatches() []*CMsgDOTAMatchMinimal {
	if x != nil {
		return x.Matches
	}
	return nil
}

type CMsgGCToClientTopFriendMatchesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Matches []*CMsgDOTAMatchMinimal `protobuf:"bytes,1,rep,name=matches" json:"matches,omitempty"`
}

func (x *CMsgGCToClientTopFriendMatchesResponse) Reset() {
	*x = CMsgGCToClientTopFriendMatchesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_watch_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCToClientTopFriendMatchesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientTopFriendMatchesResponse) ProtoMessage() {}

func (x *CMsgGCToClientTopFriendMatchesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_watch_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientTopFriendMatchesResponse.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientTopFriendMatchesResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_watch_proto_rawDescGZIP(), []int{10}
}

func (x *CMsgGCToClientTopFriendMatchesResponse) GetMatches() []*CMsgDOTAMatchMinimal {
	if x != nil {
		return x.Matches
	}
	return nil
}

type CMsgClientToGCFindTopMatches struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartGame  *uint32 `protobuf:"varint,1,opt,name=start_game,json=startGame" json:"start_game,omitempty"`
	LeagueId   *uint32 `protobuf:"varint,2,opt,name=league_id,json=leagueId" json:"league_id,omitempty"`
	HeroId     *uint32 `protobuf:"varint,3,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	FriendId   *uint32 `protobuf:"varint,4,opt,name=friend_id,json=friendId" json:"friend_id,omitempty"`
	FriendList *bool   `protobuf:"varint,5,opt,name=friend_list,json=friendList" json:"friend_list,omitempty"`
	LeagueList *bool   `protobuf:"varint,6,opt,name=league_list,json=leagueList" json:"league_list,omitempty"`
}

func (x *CMsgClientToGCFindTopMatches) Reset() {
	*x = CMsgClientToGCFindTopMatches{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_watch_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCFindTopMatches) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCFindTopMatches) ProtoMessage() {}

func (x *CMsgClientToGCFindTopMatches) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_watch_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCFindTopMatches.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCFindTopMatches) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_watch_proto_rawDescGZIP(), []int{11}
}

func (x *CMsgClientToGCFindTopMatches) GetStartGame() uint32 {
	if x != nil && x.StartGame != nil {
		return *x.StartGame
	}
	return 0
}

func (x *CMsgClientToGCFindTopMatches) GetLeagueId() uint32 {
	if x != nil && x.LeagueId != nil {
		return *x.LeagueId
	}
	return 0
}

func (x *CMsgClientToGCFindTopMatches) GetHeroId() uint32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CMsgClientToGCFindTopMatches) GetFriendId() uint32 {
	if x != nil && x.FriendId != nil {
		return *x.FriendId
	}
	return 0
}

func (x *CMsgClientToGCFindTopMatches) GetFriendList() bool {
	if x != nil && x.FriendList != nil {
		return *x.FriendList
	}
	return false
}

func (x *CMsgClientToGCFindTopMatches) GetLeagueList() bool {
	if x != nil && x.LeagueList != nil {
		return *x.LeagueList
	}
	return false
}

type CMsgGCToClientFindTopLeagueMatchesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartGame *uint32          `protobuf:"varint,1,opt,name=start_game,json=startGame" json:"start_game,omitempty"`
	LeagueId  *uint32          `protobuf:"varint,2,opt,name=league_id,json=leagueId" json:"league_id,omitempty"`
	HeroId    *uint32          `protobuf:"varint,3,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	MatchIds  []uint32         `protobuf:"varint,4,rep,name=match_ids,json=matchIds" json:"match_ids,omitempty"`
	Matches   []*CMsgDOTAMatch `protobuf:"bytes,5,rep,name=matches" json:"matches,omitempty"`
}

func (x *CMsgGCToClientFindTopLeagueMatchesResponse) Reset() {
	*x = CMsgGCToClientFindTopLeagueMatchesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_watch_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCToClientFindTopLeagueMatchesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientFindTopLeagueMatchesResponse) ProtoMessage() {}

func (x *CMsgGCToClientFindTopLeagueMatchesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_watch_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientFindTopLeagueMatchesResponse.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientFindTopLeagueMatchesResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_watch_proto_rawDescGZIP(), []int{12}
}

func (x *CMsgGCToClientFindTopLeagueMatchesResponse) GetStartGame() uint32 {
	if x != nil && x.StartGame != nil {
		return *x.StartGame
	}
	return 0
}

func (x *CMsgGCToClientFindTopLeagueMatchesResponse) GetLeagueId() uint32 {
	if x != nil && x.LeagueId != nil {
		return *x.LeagueId
	}
	return 0
}

func (x *CMsgGCToClientFindTopLeagueMatchesResponse) GetHeroId() uint32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CMsgGCToClientFindTopLeagueMatchesResponse) GetMatchIds() []uint32 {
	if x != nil {
		return x.MatchIds
	}
	return nil
}

func (x *CMsgGCToClientFindTopLeagueMatchesResponse) GetMatches() []*CMsgDOTAMatch {
	if x != nil {
		return x.Matches
	}
	return nil
}

type CMsgSpectateFriendGame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SteamId *uint64 `protobuf:"fixed64,1,opt,name=steam_id,json=steamId" json:"steam_id,omitempty"`
	Live    *bool   `protobuf:"varint,2,opt,name=live" json:"live,omitempty"`
}

func (x *CMsgSpectateFriendGame) Reset() {
	*x = CMsgSpectateFriendGame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_watch_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSpectateFriendGame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSpectateFriendGame) ProtoMessage() {}

func (x *CMsgSpectateFriendGame) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_watch_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSpectateFriendGame.ProtoReflect.Descriptor instead.
func (*CMsgSpectateFriendGame) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_watch_proto_rawDescGZIP(), []int{13}
}

func (x *CMsgSpectateFriendGame) GetSteamId() uint64 {
	if x != nil && x.SteamId != nil {
		return *x.SteamId
	}
	return 0
}

func (x *CMsgSpectateFriendGame) GetLive() bool {
	if x != nil && x.Live != nil {
		return *x.Live
	}
	return false
}

type CMsgSpectateFriendGameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerSteamid   *uint64                                          `protobuf:"fixed64,4,opt,name=server_steamid,json=serverSteamid" json:"server_steamid,omitempty"`
	WatchLiveResult *CMsgSpectateFriendGameResponse_EWatchLiveResult `protobuf:"varint,5,opt,name=watch_live_result,json=watchLiveResult,enum=dota.CMsgSpectateFriendGameResponse_EWatchLiveResult,def=0" json:"watch_live_result,omitempty"`
}

// Default values for CMsgSpectateFriendGameResponse fields.
const (
	Default_CMsgSpectateFriendGameResponse_WatchLiveResult = CMsgSpectateFriendGameResponse_SUCCESS
)

func (x *CMsgSpectateFriendGameResponse) Reset() {
	*x = CMsgSpectateFriendGameResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_watch_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSpectateFriendGameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSpectateFriendGameResponse) ProtoMessage() {}

func (x *CMsgSpectateFriendGameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_watch_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSpectateFriendGameResponse.ProtoReflect.Descriptor instead.
func (*CMsgSpectateFriendGameResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_watch_proto_rawDescGZIP(), []int{14}
}

func (x *CMsgSpectateFriendGameResponse) GetServerSteamid() uint64 {
	if x != nil && x.ServerSteamid != nil {
		return *x.ServerSteamid
	}
	return 0
}

func (x *CMsgSpectateFriendGameResponse) GetWatchLiveResult() CMsgSpectateFriendGameResponse_EWatchLiveResult {
	if x != nil && x.WatchLiveResult != nil {
		return *x.WatchLiveResult
	}
	return Default_CMsgSpectateFriendGameResponse_WatchLiveResult
}

type CDOTAReplayDownloadInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Match        *CMsgDOTAMatchMinimal `protobuf:"bytes,1,opt,name=match" json:"match,omitempty"`
	Title        *string               `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Description  *string               `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	Size         *uint32               `protobuf:"varint,4,opt,name=size" json:"size,omitempty"`
	Tags         []string              `protobuf:"bytes,5,rep,name=tags" json:"tags,omitempty"`
	ExistsOnDisk *bool                 `protobuf:"varint,6,opt,name=exists_on_disk,json=existsOnDisk" json:"exists_on_disk,omitempty"`
}

func (x *CDOTAReplayDownloadInfo) Reset() {
	*x = CDOTAReplayDownloadInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_watch_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAReplayDownloadInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAReplayDownloadInfo) ProtoMessage() {}

func (x *CDOTAReplayDownloadInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_watch_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAReplayDownloadInfo.ProtoReflect.Descriptor instead.
func (*CDOTAReplayDownloadInfo) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_watch_proto_rawDescGZIP(), []int{15}
}

func (x *CDOTAReplayDownloadInfo) GetMatch() *CMsgDOTAMatchMinimal {
	if x != nil {
		return x.Match
	}
	return nil
}

func (x *CDOTAReplayDownloadInfo) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *CDOTAReplayDownloadInfo) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *CDOTAReplayDownloadInfo) GetSize() uint32 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

func (x *CDOTAReplayDownloadInfo) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CDOTAReplayDownloadInfo) GetExistsOnDisk() bool {
	if x != nil && x.ExistsOnDisk != nil {
		return *x.ExistsOnDisk
	}
	return false
}

type CMsgWatchGame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerSteamid      *uint64  `protobuf:"fixed64,1,opt,name=server_steamid,json=serverSteamid" json:"server_steamid,omitempty"`
	ClientVersion      *uint32  `protobuf:"varint,2,opt,name=client_version,json=clientVersion" json:"client_version,omitempty"`
	WatchServerSteamid *uint64  `protobuf:"fixed64,3,opt,name=watch_server_steamid,json=watchServerSteamid" json:"watch_server_steamid,omitempty"`
	LobbyId            *uint64  `protobuf:"varint,4,opt,name=lobby_id,json=lobbyId" json:"lobby_id,omitempty"`
	Regions            []uint32 `protobuf:"varint,5,rep,name=regions" json:"regions,omitempty"`
}

func (x *CMsgWatchGame) Reset() {
	*x = CMsgWatchGame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_watch_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgWatchGame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgWatchGame) ProtoMessage() {}

func (x *CMsgWatchGame) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_watch_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgWatchGame.ProtoReflect.Descriptor instead.
func (*CMsgWatchGame) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_watch_proto_rawDescGZIP(), []int{16}
}

func (x *CMsgWatchGame) GetServerSteamid() uint64 {
	if x != nil && x.ServerSteamid != nil {
		return *x.ServerSteamid
	}
	return 0
}

func (x *CMsgWatchGame) GetClientVersion() uint32 {
	if x != nil && x.ClientVersion != nil {
		return *x.ClientVersion
	}
	return 0
}

func (x *CMsgWatchGame) GetWatchServerSteamid() uint64 {
	if x != nil && x.WatchServerSteamid != nil {
		return *x.WatchServerSteamid
	}
	return 0
}

func (x *CMsgWatchGame) GetLobbyId() uint64 {
	if x != nil && x.LobbyId != nil {
		return *x.LobbyId
	}
	return 0
}

func (x *CMsgWatchGame) GetRegions() []uint32 {
	if x != nil {
		return x.Regions
	}
	return nil
}

type CMsgCancelWatchGame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgCancelWatchGame) Reset() {
	*x = CMsgCancelWatchGame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_watch_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgCancelWatchGame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgCancelWatchGame) ProtoMessage() {}

func (x *CMsgCancelWatchGame) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_watch_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgCancelWatchGame.ProtoReflect.Descriptor instead.
func (*CMsgCancelWatchGame) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_watch_proto_rawDescGZIP(), []int{17}
}

type CMsgWatchGameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WatchGameResult         *CMsgWatchGameResponse_WatchGameResult `protobuf:"varint,1,opt,name=watch_game_result,json=watchGameResult,enum=dota.CMsgWatchGameResponse_WatchGameResult,def=0" json:"watch_game_result,omitempty"`
	SourceTvPublicAddr      *uint32                                `protobuf:"varint,2,opt,name=source_tv_public_addr,json=sourceTvPublicAddr" json:"source_tv_public_addr,omitempty"`
	SourceTvPrivateAddr     *uint32                                `protobuf:"varint,3,opt,name=source_tv_private_addr,json=sourceTvPrivateAddr" json:"source_tv_private_addr,omitempty"`
	SourceTvPort            *uint32                                `protobuf:"varint,4,opt,name=source_tv_port,json=sourceTvPort" json:"source_tv_port,omitempty"`
	GameServerSteamid       *uint64                                `protobuf:"fixed64,5,opt,name=game_server_steamid,json=gameServerSteamid" json:"game_server_steamid,omitempty"`
	WatchServerSteamid      *uint64                                `protobuf:"fixed64,6,opt,name=watch_server_steamid,json=watchServerSteamid" json:"watch_server_steamid,omitempty"`
	WatchTvUniqueSecretCode *uint64                                `protobuf:"fixed64,7,opt,name=watch_tv_unique_secret_code,json=watchTvUniqueSecretCode" json:"watch_tv_unique_secret_code,omitempty"`
}

// Default values for CMsgWatchGameResponse fields.
const (
	Default_CMsgWatchGameResponse_WatchGameResult = CMsgWatchGameResponse_PENDING
)

func (x *CMsgWatchGameResponse) Reset() {
	*x = CMsgWatchGameResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_watch_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgWatchGameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgWatchGameResponse) ProtoMessage() {}

func (x *CMsgWatchGameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_watch_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgWatchGameResponse.ProtoReflect.Descriptor instead.
func (*CMsgWatchGameResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_watch_proto_rawDescGZIP(), []int{18}
}

func (x *CMsgWatchGameResponse) GetWatchGameResult() CMsgWatchGameResponse_WatchGameResult {
	if x != nil && x.WatchGameResult != nil {
		return *x.WatchGameResult
	}
	return Default_CMsgWatchGameResponse_WatchGameResult
}

func (x *CMsgWatchGameResponse) GetSourceTvPublicAddr() uint32 {
	if x != nil && x.SourceTvPublicAddr != nil {
		return *x.SourceTvPublicAddr
	}
	return 0
}

func (x *CMsgWatchGameResponse) GetSourceTvPrivateAddr() uint32 {
	if x != nil && x.SourceTvPrivateAddr != nil {
		return *x.SourceTvPrivateAddr
	}
	return 0
}

func (x *CMsgWatchGameResponse) GetSourceTvPort() uint32 {
	if x != nil && x.SourceTvPort != nil {
		return *x.SourceTvPort
	}
	return 0
}

func (x *CMsgWatchGameResponse) GetGameServerSteamid() uint64 {
	if x != nil && x.GameServerSteamid != nil {
		return *x.GameServerSteamid
	}
	return 0
}

func (x *CMsgWatchGameResponse) GetWatchServerSteamid() uint64 {
	if x != nil && x.WatchServerSteamid != nil {
		return *x.WatchServerSteamid
	}
	return 0
}

func (x *CMsgWatchGameResponse) GetWatchTvUniqueSecretCode() uint64 {
	if x != nil && x.WatchTvUniqueSecretCode != nil {
		return *x.WatchTvUniqueSecretCode
	}
	return 0
}

type CMsgPartyLeaderWatchGamePrompt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameServerSteamid *uint64 `protobuf:"fixed64,5,opt,name=game_server_steamid,json=gameServerSteamid" json:"game_server_steamid,omitempty"`
}

func (x *CMsgPartyLeaderWatchGamePrompt) Reset() {
	*x = CMsgPartyLeaderWatchGamePrompt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_watch_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPartyLeaderWatchGamePrompt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPartyLeaderWatchGamePrompt) ProtoMessage() {}

func (x *CMsgPartyLeaderWatchGamePrompt) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_watch_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPartyLeaderWatchGamePrompt.ProtoReflect.Descriptor instead.
func (*CMsgPartyLeaderWatchGamePrompt) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_watch_proto_rawDescGZIP(), []int{19}
}

func (x *CMsgPartyLeaderWatchGamePrompt) GetGameServerSteamid() uint64 {
	if x != nil && x.GameServerSteamid != nil {
		return *x.GameServerSteamid
	}
	return 0
}

type CDOTABroadcasterInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId                  *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	ServerSteamId              *uint64 `protobuf:"fixed64,2,opt,name=server_steam_id,json=serverSteamId" json:"server_steam_id,omitempty"`
	Live                       *bool   `protobuf:"varint,3,opt,name=live" json:"live,omitempty"`
	TeamNameRadiant            *string `protobuf:"bytes,4,opt,name=team_name_radiant,json=teamNameRadiant" json:"team_name_radiant,omitempty"`
	TeamNameDire               *string `protobuf:"bytes,5,opt,name=team_name_dire,json=teamNameDire" json:"team_name_dire,omitempty"`
	SeriesGame                 *uint32 `protobuf:"varint,7,opt,name=series_game,json=seriesGame" json:"series_game,omitempty"`
	UpcomingBroadcastTimestamp *uint32 `protobuf:"varint,9,opt,name=upcoming_broadcast_timestamp,json=upcomingBroadcastTimestamp" json:"upcoming_broadcast_timestamp,omitempty"`
	AllowLiveVideo             *bool   `protobuf:"varint,10,opt,name=allow_live_video,json=allowLiveVideo" json:"allow_live_video,omitempty"`
	NodeType                   *uint32 `protobuf:"varint,11,opt,name=node_type,json=nodeType" json:"node_type,omitempty"`
	NodeName                   *string `protobuf:"bytes,12,opt,name=node_name,json=nodeName" json:"node_name,omitempty"`
}

func (x *CDOTABroadcasterInfo) Reset() {
	*x = CDOTABroadcasterInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_watch_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTABroadcasterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTABroadcasterInfo) ProtoMessage() {}

func (x *CDOTABroadcasterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_watch_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTABroadcasterInfo.ProtoReflect.Descriptor instead.
func (*CDOTABroadcasterInfo) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_watch_proto_rawDescGZIP(), []int{20}
}

func (x *CDOTABroadcasterInfo) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CDOTABroadcasterInfo) GetServerSteamId() uint64 {
	if x != nil && x.ServerSteamId != nil {
		return *x.ServerSteamId
	}
	return 0
}

func (x *CDOTABroadcasterInfo) GetLive() bool {
	if x != nil && x.Live != nil {
		return *x.Live
	}
	return false
}

func (x *CDOTABroadcasterInfo) GetTeamNameRadiant() string {
	if x != nil && x.TeamNameRadiant != nil {
		return *x.TeamNameRadiant
	}
	return ""
}

func (x *CDOTABroadcasterInfo) GetTeamNameDire() string {
	if x != nil && x.TeamNameDire != nil {
		return *x.TeamNameDire
	}
	return ""
}

func (x *CDOTABroadcasterInfo) GetSeriesGame() uint32 {
	if x != nil && x.SeriesGame != nil {
		return *x.SeriesGame
	}
	return 0
}

func (x *CDOTABroadcasterInfo) GetUpcomingBroadcastTimestamp() uint32 {
	if x != nil && x.UpcomingBroadcastTimestamp != nil {
		return *x.UpcomingBroadcastTimestamp
	}
	return 0
}

func (x *CDOTABroadcasterInfo) GetAllowLiveVideo() bool {
	if x != nil && x.AllowLiveVideo != nil {
		return *x.AllowLiveVideo
	}
	return false
}

func (x *CDOTABroadcasterInfo) GetNodeType() uint32 {
	if x != nil && x.NodeType != nil {
		return *x.NodeType
	}
	return 0
}

func (x *CDOTABroadcasterInfo) GetNodeName() string {
	if x != nil && x.NodeName != nil {
		return *x.NodeName
	}
	return ""
}

type CMsgDOTASeries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeriesId     *uint32                  `protobuf:"varint,1,opt,name=series_id,json=seriesId" json:"series_id,omitempty"`
	SeriesType   *uint32                  `protobuf:"varint,2,opt,name=series_type,json=seriesType" json:"series_type,omitempty"`
	Team_1       *CMsgDOTASeries_TeamInfo `protobuf:"bytes,3,opt,name=team_1,json=team1" json:"team_1,omitempty"`
	Team_2       *CMsgDOTASeries_TeamInfo `protobuf:"bytes,4,opt,name=team_2,json=team2" json:"team_2,omitempty"`
	MatchMinimal []*CMsgDOTAMatchMinimal  `protobuf:"bytes,5,rep,name=match_minimal,json=matchMinimal" json:"match_minimal,omitempty"`
	LiveGame     *CMsgDOTASeries_LiveGame `protobuf:"bytes,6,opt,name=live_game,json=liveGame" json:"live_game,omitempty"`
}

func (x *CMsgDOTASeries) Reset() {
	*x = CMsgDOTASeries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_watch_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTASeries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTASeries) ProtoMessage() {}

func (x *CMsgDOTASeries) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_watch_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTASeries.ProtoReflect.Descriptor instead.
func (*CMsgDOTASeries) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_watch_proto_rawDescGZIP(), []int{21}
}

func (x *CMsgDOTASeries) GetSeriesId() uint32 {
	if x != nil && x.SeriesId != nil {
		return *x.SeriesId
	}
	return 0
}

func (x *CMsgDOTASeries) GetSeriesType() uint32 {
	if x != nil && x.SeriesType != nil {
		return *x.SeriesType
	}
	return 0
}

func (x *CMsgDOTASeries) GetTeam_1() *CMsgDOTASeries_TeamInfo {
	if x != nil {
		return x.Team_1
	}
	return nil
}

func (x *CMsgDOTASeries) GetTeam_2() *CMsgDOTASeries_TeamInfo {
	if x != nil {
		return x.Team_2
	}
	return nil
}

func (x *CMsgDOTASeries) GetMatchMinimal() []*CMsgDOTAMatchMinimal {
	if x != nil {
		return x.MatchMinimal
	}
	return nil
}

func (x *CMsgDOTASeries) GetLiveGame() *CMsgDOTASeries_LiveGame {
	if x != nil {
		return x.LiveGame
	}
	return nil
}

type CSourceTVGameSmall_Player struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	HeroId    *uint32 `protobuf:"varint,2,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
}

func (x *CSourceTVGameSmall_Player) Reset() {
	*x = CSourceTVGameSmall_Player{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_watch_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSourceTVGameSmall_Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSourceTVGameSmall_Player) ProtoMessage() {}

func (x *CSourceTVGameSmall_Player) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_watch_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSourceTVGameSmall_Player.ProtoReflect.Descriptor instead.
func (*CSourceTVGameSmall_Player) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_watch_proto_rawDescGZIP(), []int{0, 0}
}

func (x *CSourceTVGameSmall_Player) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CSourceTVGameSmall_Player) GetHeroId() uint32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

type CDOTAReplayDownloadInfo_Highlight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp   *uint32 `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	Description *string `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
}

func (x *CDOTAReplayDownloadInfo_Highlight) Reset() {
	*x = CDOTAReplayDownloadInfo_Highlight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_watch_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAReplayDownloadInfo_Highlight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAReplayDownloadInfo_Highlight) ProtoMessage() {}

func (x *CDOTAReplayDownloadInfo_Highlight) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_watch_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAReplayDownloadInfo_Highlight.ProtoReflect.Descriptor instead.
func (*CDOTAReplayDownloadInfo_Highlight) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_watch_proto_rawDescGZIP(), []int{15, 0}
}

func (x *CDOTAReplayDownloadInfo_Highlight) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *CDOTAReplayDownloadInfo_Highlight) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

type CMsgDOTASeries_TeamInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamId      *uint32 `protobuf:"varint,1,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	TeamName    *string `protobuf:"bytes,2,opt,name=team_name,json=teamName" json:"team_name,omitempty"`
	TeamLogoUrl *string `protobuf:"bytes,3,opt,name=team_logo_url,json=teamLogoUrl" json:"team_logo_url,omitempty"`
	WagerCount  *uint32 `protobuf:"varint,4,opt,name=wager_count,json=wagerCount" json:"wager_count,omitempty"`
}

func (x *CMsgDOTASeries_TeamInfo) Reset() {
	*x = CMsgDOTASeries_TeamInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_watch_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTASeries_TeamInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTASeries_TeamInfo) ProtoMessage() {}

func (x *CMsgDOTASeries_TeamInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_watch_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTASeries_TeamInfo.ProtoReflect.Descriptor instead.
func (*CMsgDOTASeries_TeamInfo) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_watch_proto_rawDescGZIP(), []int{21, 0}
}

func (x *CMsgDOTASeries_TeamInfo) GetTeamId() uint32 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

func (x *CMsgDOTASeries_TeamInfo) GetTeamName() string {
	if x != nil && x.TeamName != nil {
		return *x.TeamName
	}
	return ""
}

func (x *CMsgDOTASeries_TeamInfo) GetTeamLogoUrl() string {
	if x != nil && x.TeamLogoUrl != nil {
		return *x.TeamLogoUrl
	}
	return ""
}

func (x *CMsgDOTASeries_TeamInfo) GetWagerCount() uint32 {
	if x != nil && x.WagerCount != nil {
		return *x.WagerCount
	}
	return 0
}

type CMsgDOTASeries_LiveGame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerSteamId    *uint64                  `protobuf:"fixed64,1,opt,name=server_steam_id,json=serverSteamId" json:"server_steam_id,omitempty"`
	TeamRadiant      *CMsgDOTASeries_TeamInfo `protobuf:"bytes,2,opt,name=team_radiant,json=teamRadiant" json:"team_radiant,omitempty"`
	TeamDire         *CMsgDOTASeries_TeamInfo `protobuf:"bytes,3,opt,name=team_dire,json=teamDire" json:"team_dire,omitempty"`
	TeamRadiantScore *uint32                  `protobuf:"varint,4,opt,name=team_radiant_score,json=teamRadiantScore" json:"team_radiant_score,omitempty"`
	TeamDireScore    *uint32                  `protobuf:"varint,5,opt,name=team_dire_score,json=teamDireScore" json:"team_dire_score,omitempty"`
}

func (x *CMsgDOTASeries_LiveGame) Reset() {
	*x = CMsgDOTASeries_LiveGame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_watch_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTASeries_LiveGame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTASeries_LiveGame) ProtoMessage() {}

func (x *CMsgDOTASeries_LiveGame) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_watch_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTASeries_LiveGame.ProtoReflect.Descriptor instead.
func (*CMsgDOTASeries_LiveGame) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_watch_proto_rawDescGZIP(), []int{21, 1}
}

func (x *CMsgDOTASeries_LiveGame) GetServerSteamId() uint64 {
	if x != nil && x.ServerSteamId != nil {
		return *x.ServerSteamId
	}
	return 0
}

func (x *CMsgDOTASeries_LiveGame) GetTeamRadiant() *CMsgDOTASeries_TeamInfo {
	if x != nil {
		return x.TeamRadiant
	}
	return nil
}

func (x *CMsgDOTASeries_LiveGame) GetTeamDire() *CMsgDOTASeries_TeamInfo {
	if x != nil {
		return x.TeamDire
	}
	return nil
}

func (x *CMsgDOTASeries_LiveGame) GetTeamRadiantScore() uint32 {
	if x != nil && x.TeamRadiantScore != nil {
		return *x.TeamRadiantScore
	}
	return 0
}

func (x *CMsgDOTASeries_LiveGame) GetTeamDireScore() uint32 {
	if x != nil && x.TeamDireScore != nil {
		return *x.TeamDireScore
	}
	return 0
}

var File_dota_gcmessages_client_watch_proto protoreflect.FileDescriptor

var file_dota_gcmessages_client_watch_proto_rawDesc = []byte{
	0x0a, 0x22, 0x64, 0x6f, 0x74, 0x61, 0x5f, 0x67, 0x63, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x64, 0x6f, 0x74, 0x61, 0x1a, 0x1c, 0x64, 0x6f, 0x74, 0x61,
	0x5f, 0x67, 0x63, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xeb, 0x09, 0x0a, 0x12, 0x43, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x54, 0x56, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x12,
	0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x64,
	0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a,
	0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x6c,
	0x61, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x12,
	0x1e, 0x0a, 0x0a, 0x73, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x6d, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x6d, 0x72, 0x12, 0x19, 0x0a,
	0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x61, 0x64, 0x69, 0x61, 0x6e,
	0x74, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x64,
	0x69, 0x72, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x65, 0x61, 0x6d, 0x4e,
	0x61, 0x6d, 0x65, 0x44, 0x69, 0x72, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x65, 0x61, 0x6d, 0x5f,
	0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x0f, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x67, 0x6f, 0x52, 0x61, 0x64, 0x69,
	0x61, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6c, 0x6f, 0x67, 0x6f,
	0x5f, 0x64, 0x69, 0x72, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0c, 0x74, 0x65, 0x61,
	0x6d, 0x4c, 0x6f, 0x67, 0x6f, 0x44, 0x69, 0x72, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x65, 0x61,
	0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x52, 0x61, 0x64, 0x69, 0x61, 0x6e,
	0x74, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x64, 0x69, 0x72,
	0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x44,
	0x69, 0x72, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x6c, 0x61,
	0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x6c, 0x65, 0x61, 0x64, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x69, 0x72, 0x65, 0x5f, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x39, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x16,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x56, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x2e, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x25,
	0x0a, 0x0e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0d, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x41, 0x0a, 0x1d, 0x77, 0x65, 0x65, 0x6b, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x5f, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x77, 0x65,
	0x65, 0x6b, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x54, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x77, 0x65, 0x65, 0x6b,
	0x65, 0x6e, 0x64, 0x5f, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x5f, 0x64, 0x69, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x77, 0x65, 0x65, 0x6b,
	0x65, 0x6e, 0x64, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x1b, 0x77, 0x65, 0x65, 0x6b, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x6f,
	0x75, 0x72, 0x6e, 0x65, 0x79, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x77, 0x65, 0x65, 0x6b, 0x65, 0x6e, 0x64,
	0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x41, 0x0a, 0x1d, 0x77, 0x65, 0x65, 0x6b, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x6f, 0x75,
	0x72, 0x6e, 0x65, 0x79, 0x5f, 0x62, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x77, 0x65, 0x65, 0x6b, 0x65, 0x6e,
	0x64, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x42, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x1a, 0x40, 0x0a, 0x06, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x68, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x22, 0xdd, 0x01, 0x0a, 0x22, 0x43, 0x4d, 0x73, 0x67, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x46, 0x69, 0x6e, 0x64, 0x54, 0x6f, 0x70,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x56, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x09,
	0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x65, 0x72,
	0x6f, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x72, 0x6f,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x67, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x47, 0x61, 0x6d,
	0x65, 0x12, 0x26, 0x0a, 0x0f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x67, 0x61, 0x6d, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x62,
	0x62, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f,
	0x62, 0x62, 0x79, 0x49, 0x64, 0x73, 0x22, 0xf8, 0x02, 0x0a, 0x2a, 0x43, 0x4d, 0x73, 0x67, 0x47,
	0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6e, 0x64, 0x54, 0x6f, 0x70,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x56, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x4b, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x75, 0x6d,
	0x5f, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6e, 0x75,
	0x6d, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x67, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x35,
	0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x54, 0x56, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x52, 0x08, 0x67, 0x61, 0x6d,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x08,
	0x62, 0x6f, 0x74, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x56, 0x47,
	0x61, 0x6d, 0x65, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x52, 0x07, 0x62, 0x6f, 0x74, 0x47, 0x61, 0x6d,
	0x65, 0x22, 0x5f, 0x0a, 0x24, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x54, 0x6f, 0x70, 0x57, 0x65, 0x65, 0x6b, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x75,
	0x72, 0x6e, 0x65, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x0a, 0x6c, 0x69, 0x76,
	0x65, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x56, 0x47, 0x61,
	0x6d, 0x65, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x52, 0x09, 0x6c, 0x69, 0x76, 0x65, 0x47, 0x61, 0x6d,
	0x65, 0x73, 0x22, 0x7f, 0x0a, 0x1f, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x70, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x12, 0x2a,
	0x0a, 0x11, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65,
	0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x65, 0x61,
	0x6d, 0x49, 0x64, 0x22, 0x27, 0x0a, 0x25, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x70, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x27, 0x0a, 0x25,
	0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f,
	0x70, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x42, 0x0a, 0x23, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x4d, 0x69,
	0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52,
	0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x73, 0x22, 0x7b, 0x0a, 0x24, 0x43, 0x4d, 0x73,
	0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x73, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f,
	0x54, 0x41, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x07,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6c, 0x61, 0x73,
	0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x22, 0x5e, 0x0a, 0x26, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43,
	0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x70, 0x4c, 0x65, 0x61, 0x67, 0x75,
	0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x34, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54,
	0x41, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x07, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x22, 0x5e, 0x0a, 0x26, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43,
	0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x70, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x34, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54,
	0x41, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x07, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x22, 0xd2, 0x01, 0x0a, 0x1c, 0x43, 0x4d, 0x73, 0x67, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x46, 0x69, 0x6e, 0x64, 0x54, 0x6f, 0x70,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x67, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x65, 0x61, 0x67, 0x75,
	0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x65,
	0x61, 0x67, 0x75, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xcd, 0x01, 0x0a, 0x2a,
	0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x46, 0x69,
	0x6e, 0x64, 0x54, 0x6f, 0x70, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x61,
	0x67, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x65,
	0x61, 0x67, 0x75, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x73, 0x12, 0x2d, 0x0a, 0x07,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x22, 0x47, 0x0a, 0x16, 0x43,
	0x4d, 0x73, 0x67, 0x53, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04,
	0x6c, 0x69, 0x76, 0x65, 0x22, 0xc2, 0x04, 0x0a, 0x1e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x70, 0x65,
	0x63, 0x74, 0x61, 0x74, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x6a,
	0x0a, 0x11, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x64, 0x6f, 0x74, 0x61,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x65, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x45, 0x57, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x3a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x52, 0x0f, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x4c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x8c, 0x03, 0x0a, 0x10, 0x45,
	0x57, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x49, 0x43, 0x10, 0x01, 0x12,
	0x11, 0x0a, 0x0d, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x5f, 0x50, 0x4c, 0x55, 0x53,
	0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x53, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x4c, 0x4f, 0x42, 0x42, 0x59, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55,
	0x4e, 0x44, 0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x50,
	0x45, 0x43, 0x54, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x5f, 0x41, 0x5f, 0x4c, 0x4f, 0x42,
	0x42, 0x59, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4c, 0x4f,
	0x42, 0x42, 0x59, 0x5f, 0x49, 0x53, 0x5f, 0x4c, 0x41, 0x4e, 0x10, 0x06, 0x12, 0x1a, 0x0a, 0x16,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x57, 0x52, 0x4f, 0x4e, 0x47, 0x5f, 0x4c, 0x4f, 0x42, 0x42,
	0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x07, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x57, 0x52, 0x4f, 0x4e, 0x47, 0x5f, 0x4c, 0x4f, 0x42, 0x42, 0x59, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x10, 0x08, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x50,
	0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52,
	0x10, 0x09, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x54, 0x4f, 0x4f, 0x5f,
	0x4d, 0x41, 0x4e, 0x59, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x54, 0x41, 0x54, 0x4f, 0x52, 0x53, 0x10,
	0x0a, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x54,
	0x41, 0x54, 0x4f, 0x52, 0x5f, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x45, 0x44, 0x5f, 0x54, 0x45,
	0x41, 0x4d, 0x53, 0x10, 0x0b, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x46,
	0x52, 0x49, 0x45, 0x4e, 0x44, 0x53, 0x5f, 0x4f, 0x4e, 0x5f, 0x42, 0x4f, 0x54, 0x48, 0x5f, 0x53,
	0x49, 0x44, 0x45, 0x53, 0x10, 0x0c, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x53, 0x50, 0x45, 0x43, 0x54, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x5f, 0x54, 0x48, 0x49,
	0x53, 0x5f, 0x4c, 0x4f, 0x42, 0x42, 0x59, 0x10, 0x0d, 0x22, 0x9e, 0x02, 0x0a, 0x17, 0x43, 0x44,
	0x4f, 0x54, 0x41, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x44, 0x4f, 0x54, 0x41, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x6c,
	0x52, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x65, 0x78, 0x69, 0x73, 0x74,
	0x73, 0x5f, 0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x4f, 0x6e, 0x44, 0x69, 0x73, 0x6b, 0x1a, 0x4b, 0x0a,
	0x09, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc4, 0x01, 0x0a, 0x0d, 0x43,
	0x4d, 0x73, 0x67, 0x57, 0x61, 0x74, 0x63, 0x68, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x77, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x12, 0x77, 0x61, 0x74, 0x63, 0x68, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x6c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x15, 0x0a, 0x13, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x57,
	0x61, 0x74, 0x63, 0x68, 0x47, 0x61, 0x6d, 0x65, 0x22, 0xd6, 0x04, 0x0a, 0x15, 0x43, 0x4d, 0x73,
	0x67, 0x57, 0x61, 0x74, 0x63, 0x68, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x60, 0x0a, 0x11, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e,
	0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x57, 0x61, 0x74, 0x63, 0x68, 0x47, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a, 0x07, 0x50, 0x45, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x52, 0x0f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x31, 0x0a, 0x15, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74,
	0x76, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x12, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x76, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x41, 0x64, 0x64, 0x72, 0x12, 0x33, 0x0a, 0x16, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x74, 0x76, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
	0x76, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x12, 0x24, 0x0a, 0x0e,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x76, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x76, 0x50, 0x6f,
	0x72, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x11, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x69, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x12, 0x77, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x1b, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x76,
	0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x06, 0x52, 0x17, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x54, 0x76, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0xac, 0x01, 0x0a, 0x0f, 0x57, 0x61, 0x74, 0x63, 0x68, 0x47, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e,
	0x47, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x01, 0x12, 0x16,
	0x0a, 0x12, 0x47, 0x41, 0x4d, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x4e, 0x4f, 0x54, 0x46,
	0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49,
	0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45,
	0x4c, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x50,
	0x41, 0x54, 0x49, 0x42, 0x4c, 0x45, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12,
	0x1d, 0x0a, 0x19, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x41, 0x47, 0x55, 0x45,
	0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x06, 0x12, 0x11,
	0x0a, 0x0d, 0x4c, 0x4f, 0x42, 0x42, 0x59, 0x4e, 0x4f, 0x54, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10,
	0x07, 0x22, 0x50, 0x0a, 0x1e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x72, 0x74, 0x79, 0x4c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x57, 0x61, 0x74, 0x63, 0x68, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f,
	0x6d, 0x70, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x11, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x69, 0x64, 0x22, 0x8a, 0x03, 0x0a, 0x14, 0x43, 0x44, 0x4f, 0x54, 0x41, 0x42, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x04, 0x6c, 0x69, 0x76, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x65, 0x61, 0x6d, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x61, 0x64, 0x69,
	0x61, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x5f, 0x64, 0x69, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x65, 0x61,
	0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x44, 0x69, 0x72, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x1c, 0x75, 0x70,
	0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x1a, 0x75, 0x70, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x28, 0x0a, 0x10,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x76,
	0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0xc8, 0x05, 0x0a, 0x0e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x53, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x34, 0x0a, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54,
	0x41, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x31, 0x12, 0x34, 0x0a, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x5f,
	0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x54, 0x65,
	0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x32, 0x12, 0x3f, 0x0a,
	0x0d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x44, 0x4f, 0x54, 0x41, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x6c,
	0x52, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x12, 0x3a,
	0x0a, 0x09, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54,
	0x41, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65,
	0x52, 0x08, 0x6c, 0x69, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x1a, 0x85, 0x01, 0x0a, 0x08, 0x54,
	0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a,
	0x0d, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x67, 0x6f, 0x55, 0x72,
	0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x77, 0x61, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x1a, 0x86, 0x02, 0x0a, 0x08, 0x4c, 0x69, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x12,
	0x26, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x0c, 0x74, 0x65, 0x61, 0x6d, 0x5f,
	0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x53, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x74, 0x65,
	0x61, 0x6d, 0x52, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x09, 0x74, 0x65, 0x61,
	0x6d, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64,
	0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x53, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x74, 0x65, 0x61,
	0x6d, 0x44, 0x69, 0x72, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x61,
	0x64, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x74, 0x65, 0x61, 0x6d, 0x52, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x64, 0x69, 0x72, 0x65,
	0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x65,
	0x61, 0x6d, 0x44, 0x69, 0x72, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x42, 0x05, 0x48, 0x01, 0x80,
	0x01, 0x00,
}

var (
	file_dota_gcmessages_client_watch_proto_rawDescOnce sync.Once
	file_dota_gcmessages_client_watch_proto_rawDescData = file_dota_gcmessages_client_watch_proto_rawDesc
)

func file_dota_gcmessages_client_watch_proto_rawDescGZIP() []byte {
	file_dota_gcmessages_client_watch_proto_rawDescOnce.Do(func() {
		file_dota_gcmessages_client_watch_proto_rawDescData = protoimpl.X.CompressGZIP(file_dota_gcmessages_client_watch_proto_rawDescData)
	})
	return file_dota_gcmessages_client_watch_proto_rawDescData
}

var file_dota_gcmessages_client_watch_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_dota_gcmessages_client_watch_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_dota_gcmessages_client_watch_proto_goTypes = []interface{}{
	(CMsgSpectateFriendGameResponse_EWatchLiveResult)(0), // 0: dota.CMsgSpectateFriendGameResponse.EWatchLiveResult
	(CMsgWatchGameResponse_WatchGameResult)(0),           // 1: dota.CMsgWatchGameResponse.WatchGameResult
	(*CSourceTVGameSmall)(nil),                           // 2: dota.CSourceTVGameSmall
	(*CMsgClientToGCFindTopSourceTVGames)(nil),           // 3: dota.CMsgClientToGCFindTopSourceTVGames
	(*CMsgGCToClientFindTopSourceTVGamesResponse)(nil),   // 4: dota.CMsgGCToClientFindTopSourceTVGamesResponse
	(*CMsgGCToClientTopWeekendTourneyGames)(nil),         // 5: dota.CMsgGCToClientTopWeekendTourneyGames
	(*CMsgClientToGCTopMatchesRequest)(nil),              // 6: dota.CMsgClientToGCTopMatchesRequest
	(*CMsgClientToGCTopLeagueMatchesRequest)(nil),        // 7: dota.CMsgClientToGCTopLeagueMatchesRequest
	(*CMsgClientToGCTopFriendMatchesRequest)(nil),        // 8: dota.CMsgClientToGCTopFriendMatchesRequest
	(*CMsgClientToGCMatchesMinimalRequest)(nil),          // 9: dota.CMsgClientToGCMatchesMinimalRequest
	(*CMsgClientToGCMatchesMinimalResponse)(nil),         // 10: dota.CMsgClientToGCMatchesMinimalResponse
	(*CMsgGCToClientTopLeagueMatchesResponse)(nil),       // 11: dota.CMsgGCToClientTopLeagueMatchesResponse
	(*CMsgGCToClientTopFriendMatchesResponse)(nil),       // 12: dota.CMsgGCToClientTopFriendMatchesResponse
	(*CMsgClientToGCFindTopMatches)(nil),                 // 13: dota.CMsgClientToGCFindTopMatches
	(*CMsgGCToClientFindTopLeagueMatchesResponse)(nil),   // 14: dota.CMsgGCToClientFindTopLeagueMatchesResponse
	(*CMsgSpectateFriendGame)(nil),                       // 15: dota.CMsgSpectateFriendGame
	(*CMsgSpectateFriendGameResponse)(nil),               // 16: dota.CMsgSpectateFriendGameResponse
	(*CDOTAReplayDownloadInfo)(nil),                      // 17: dota.CDOTAReplayDownloadInfo
	(*CMsgWatchGame)(nil),                                // 18: dota.CMsgWatchGame
	(*CMsgCancelWatchGame)(nil),                          // 19: dota.CMsgCancelWatchGame
	(*CMsgWatchGameResponse)(nil),                        // 20: dota.CMsgWatchGameResponse
	(*CMsgPartyLeaderWatchGamePrompt)(nil),               // 21: dota.CMsgPartyLeaderWatchGamePrompt
	(*CDOTABroadcasterInfo)(nil),                         // 22: dota.CDOTABroadcasterInfo
	(*CMsgDOTASeries)(nil),                               // 23: dota.CMsgDOTASeries
	(*CSourceTVGameSmall_Player)(nil),                    // 24: dota.CSourceTVGameSmall.Player
	(*CDOTAReplayDownloadInfo_Highlight)(nil),            // 25: dota.CDOTAReplayDownloadInfo.Highlight
	(*CMsgDOTASeries_TeamInfo)(nil),                      // 26: dota.CMsgDOTASeries.TeamInfo
	(*CMsgDOTASeries_LiveGame)(nil),                      // 27: dota.CMsgDOTASeries.LiveGame
	(*CMsgDOTAMatchMinimal)(nil),                         // 28: dota.CMsgDOTAMatchMinimal
	(*CMsgDOTAMatch)(nil),                                // 29: dota.CMsgDOTAMatch
}
var file_dota_gcmessages_client_watch_proto_depIdxs = []int32{
	24, // 0: dota.CSourceTVGameSmall.players:type_name -> dota.CSourceTVGameSmall.Player
	2,  // 1: dota.CMsgGCToClientFindTopSourceTVGamesResponse.game_list:type_name -> dota.CSourceTVGameSmall
	2,  // 2: dota.CMsgGCToClientFindTopSourceTVGamesResponse.bot_game:type_name -> dota.CSourceTVGameSmall
	2,  // 3: dota.CMsgGCToClientTopWeekendTourneyGames.live_games:type_name -> dota.CSourceTVGameSmall
	28, // 4: dota.CMsgClientToGCMatchesMinimalResponse.matches:type_name -> dota.CMsgDOTAMatchMinimal
	28, // 5: dota.CMsgGCToClientTopLeagueMatchesResponse.matches:type_name -> dota.CMsgDOTAMatchMinimal
	28, // 6: dota.CMsgGCToClientTopFriendMatchesResponse.matches:type_name -> dota.CMsgDOTAMatchMinimal
	29, // 7: dota.CMsgGCToClientFindTopLeagueMatchesResponse.matches:type_name -> dota.CMsgDOTAMatch
	0,  // 8: dota.CMsgSpectateFriendGameResponse.watch_live_result:type_name -> dota.CMsgSpectateFriendGameResponse.EWatchLiveResult
	28, // 9: dota.CDOTAReplayDownloadInfo.match:type_name -> dota.CMsgDOTAMatchMinimal
	1,  // 10: dota.CMsgWatchGameResponse.watch_game_result:type_name -> dota.CMsgWatchGameResponse.WatchGameResult
	26, // 11: dota.CMsgDOTASeries.team_1:type_name -> dota.CMsgDOTASeries.TeamInfo
	26, // 12: dota.CMsgDOTASeries.team_2:type_name -> dota.CMsgDOTASeries.TeamInfo
	28, // 13: dota.CMsgDOTASeries.match_minimal:type_name -> dota.CMsgDOTAMatchMinimal
	27, // 14: dota.CMsgDOTASeries.live_game:type_name -> dota.CMsgDOTASeries.LiveGame
	26, // 15: dota.CMsgDOTASeries.LiveGame.team_radiant:type_name -> dota.CMsgDOTASeries.TeamInfo
	26, // 16: dota.CMsgDOTASeries.LiveGame.team_dire:type_name -> dota.CMsgDOTASeries.TeamInfo
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_dota_gcmessages_client_watch_proto_init() }
func file_dota_gcmessages_client_watch_proto_init() {
	if File_dota_gcmessages_client_watch_proto != nil {
		return
	}
	file_dota_gcmessages_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_dota_gcmessages_client_watch_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSourceTVGameSmall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_watch_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCFindTopSourceTVGames); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_watch_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCToClientFindTopSourceTVGamesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_watch_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCToClientTopWeekendTourneyGames); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_watch_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCTopMatchesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_watch_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCTopLeagueMatchesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_watch_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCTopFriendMatchesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_watch_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCMatchesMinimalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_watch_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCMatchesMinimalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_watch_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCToClientTopLeagueMatchesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_watch_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCToClientTopFriendMatchesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_watch_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCFindTopMatches); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_watch_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCToClientFindTopLeagueMatchesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_watch_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSpectateFriendGame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_watch_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSpectateFriendGameResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_watch_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAReplayDownloadInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_watch_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgWatchGame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_watch_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgCancelWatchGame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_watch_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgWatchGameResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_watch_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPartyLeaderWatchGamePrompt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_watch_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTABroadcasterInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_watch_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTASeries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_watch_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSourceTVGameSmall_Player); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_watch_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAReplayDownloadInfo_Highlight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_watch_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTASeries_TeamInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_watch_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTASeries_LiveGame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dota_gcmessages_client_watch_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_dota_gcmessages_client_watch_proto_goTypes,
		DependencyIndexes: file_dota_gcmessages_client_watch_proto_depIdxs,
		EnumInfos:         file_dota_gcmessages_client_watch_proto_enumTypes,
		MessageInfos:      file_dota_gcmessages_client_watch_proto_msgTypes,
	}.Build()
	File_dota_gcmessages_client_watch_proto = out.File
	file_dota_gcmessages_client_watch_proto_rawDesc = nil
	file_dota_gcmessages_client_watch_proto_goTypes = nil
	file_dota_gcmessages_client_watch_proto_depIdxs = nil
}
