// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.6.1
// source: dota_clientmessages.proto

package dota

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type EDotaClientMessages int32

const (
	EDotaClientMessages_DOTA_CM_MapLine                                EDotaClientMessages = 301
	EDotaClientMessages_DOTA_CM_AspectRatio                            EDotaClientMessages = 302
	EDotaClientMessages_DOTA_CM_MapPing                                EDotaClientMessages = 303
	EDotaClientMessages_DOTA_CM_UnitsAutoAttack                        EDotaClientMessages = 304
	EDotaClientMessages_DOTA_CM_SearchString                           EDotaClientMessages = 307
	EDotaClientMessages_DOTA_CM_Pause                                  EDotaClientMessages = 308
	EDotaClientMessages_DOTA_CM_ShopViewMode                           EDotaClientMessages = 309
	EDotaClientMessages_DOTA_CM_SetUnitShareFlag                       EDotaClientMessages = 310
	EDotaClientMessages_DOTA_CM_SwapRequest                            EDotaClientMessages = 311
	EDotaClientMessages_DOTA_CM_SwapAccept                             EDotaClientMessages = 312
	EDotaClientMessages_DOTA_CM_WorldLine                              EDotaClientMessages = 313
	EDotaClientMessages_DOTA_CM_RequestGraphUpdate                     EDotaClientMessages = 314
	EDotaClientMessages_DOTA_CM_ItemAlert                              EDotaClientMessages = 315
	EDotaClientMessages_DOTA_CM_ChatWheel                              EDotaClientMessages = 316
	EDotaClientMessages_DOTA_CM_SendStatPopup                          EDotaClientMessages = 317
	EDotaClientMessages_DOTA_CM_BeginLastHitChallenge                  EDotaClientMessages = 318
	EDotaClientMessages_DOTA_CM_UpdateQuickBuy                         EDotaClientMessages = 319
	EDotaClientMessages_DOTA_CM_UpdateCoachListen                      EDotaClientMessages = 320
	EDotaClientMessages_DOTA_CM_CoachHUDPing                           EDotaClientMessages = 321
	EDotaClientMessages_DOTA_CM_RecordVote                             EDotaClientMessages = 322
	EDotaClientMessages_DOTA_CM_UnitsAutoAttackAfterSpell              EDotaClientMessages = 323
	EDotaClientMessages_DOTA_CM_WillPurchaseAlert                      EDotaClientMessages = 324
	EDotaClientMessages_DOTA_CM_PlayerShowCase                         EDotaClientMessages = 325
	EDotaClientMessages_DOTA_CM_TeleportRequiresHalt                   EDotaClientMessages = 326
	EDotaClientMessages_DOTA_CM_CameraZoomAmount                       EDotaClientMessages = 327
	EDotaClientMessages_DOTA_CM_BroadcasterUsingCamerman               EDotaClientMessages = 328
	EDotaClientMessages_DOTA_CM_BroadcasterUsingAssistedCameraOperator EDotaClientMessages = 329
	EDotaClientMessages_DOTA_CM_EnemyItemAlert                         EDotaClientMessages = 330
	EDotaClientMessages_DOTA_CM_FreeInventory                          EDotaClientMessages = 331
	EDotaClientMessages_DOTA_CM_BuyBackStateAlert                      EDotaClientMessages = 332
	EDotaClientMessages_DOTA_CM_QuickBuyAlert                          EDotaClientMessages = 333
	EDotaClientMessages_DOTA_CM_HeroStatueLike                         EDotaClientMessages = 334
	EDotaClientMessages_DOTA_CM_ModifierAlert                          EDotaClientMessages = 335
	EDotaClientMessages_DOTA_CM_TeamShowcaseEditor                     EDotaClientMessages = 336
	EDotaClientMessages_DOTA_CM_HPManaAlert                            EDotaClientMessages = 337
	EDotaClientMessages_DOTA_CM_GlyphAlert                             EDotaClientMessages = 338
	EDotaClientMessages_DOTA_CM_TeamShowcaseClientData                 EDotaClientMessages = 339
	EDotaClientMessages_DOTA_CM_PlayTeamShowcase                       EDotaClientMessages = 340
	EDotaClientMessages_DOTA_CM_EventCNY2015Cmd                        EDotaClientMessages = 341
	EDotaClientMessages_DOTA_CM_FillEmptySlotsWithBots                 EDotaClientMessages = 342
	EDotaClientMessages_DOTA_CM_DemoHero                               EDotaClientMessages = 343
	EDotaClientMessages_DOTA_CM_AbilityLearnModeToggled                EDotaClientMessages = 344
	EDotaClientMessages_DOTA_CM_AbilityStartUse                        EDotaClientMessages = 345
	EDotaClientMessages_DOTA_CM_ChallengeSelect                        EDotaClientMessages = 346
	EDotaClientMessages_DOTA_CM_ChallengeReroll                        EDotaClientMessages = 347
	EDotaClientMessages_DOTA_CM_ClickedBuff                            EDotaClientMessages = 348
	EDotaClientMessages_DOTA_CM_CoinWager                              EDotaClientMessages = 349
	EDotaClientMessages_DOTA_CM_ExecuteOrders                          EDotaClientMessages = 350
	EDotaClientMessages_DOTA_CM_XPAlert                                EDotaClientMessages = 351
	EDotaClientMessages_DOTA_CM_EventPointsTip                         EDotaClientMessages = 353
	EDotaClientMessages_DOTA_CM_MatchMetadata                          EDotaClientMessages = 354
	EDotaClientMessages_DOTA_CM_KillMyHero                             EDotaClientMessages = 355
	EDotaClientMessages_DOTA_CM_QuestStatus                            EDotaClientMessages = 356
	EDotaClientMessages_DOTA_CM_ToggleAutoattack                       EDotaClientMessages = 357
	EDotaClientMessages_DOTA_CM_SpecialAbility                         EDotaClientMessages = 358
	EDotaClientMessages_DOTA_CM_KillcamDamageTaken                     EDotaClientMessages = 359
	EDotaClientMessages_DOTA_CM_SetEnemyStartingPosition               EDotaClientMessages = 360
	EDotaClientMessages_DOTA_CM_SetDesiredWardPlacement                EDotaClientMessages = 361
	EDotaClientMessages_DOTA_CM_RollDice                               EDotaClientMessages = 362
	EDotaClientMessages_DOTA_CM_FlipCoin                               EDotaClientMessages = 363
	EDotaClientMessages_DOTA_CM_RequestItemSuggestions                 EDotaClientMessages = 364
	EDotaClientMessages_DOTA_CM_MakeTeamCaptain                        EDotaClientMessages = 365
	EDotaClientMessages_DOTA_CM_CoinWagerToken                         EDotaClientMessages = 366
	EDotaClientMessages_DOTA_CM_RankWager                              EDotaClientMessages = 367
	EDotaClientMessages_DOTA_CM_DismissAllStatPopups                   EDotaClientMessages = 368
	EDotaClientMessages_DOTA_CM_HelpTipSystemStateChanged              EDotaClientMessages = 369
	EDotaClientMessages_DOTA_CM_ChannelRequiresHalt                    EDotaClientMessages = 370
	EDotaClientMessages_DOTA_CM_RequestBulkCombatLog                   EDotaClientMessages = 371
	EDotaClientMessages_DOTA_CM_AbilityDraftRequestAbility             EDotaClientMessages = 372
	EDotaClientMessages_DOTA_CM_GuideSelectOption                      EDotaClientMessages = 373
	EDotaClientMessages_DOTA_CM_GuideSelected                          EDotaClientMessages = 374
	EDotaClientMessages_DOTA_CM_DamageReport                           EDotaClientMessages = 375
	EDotaClientMessages_DOTA_CM_SalutePlayer                           EDotaClientMessages = 376
	EDotaClientMessages_DOTA_CM_SprayWheel                             EDotaClientMessages = 377
	EDotaClientMessages_DOTA_CM_TipAlert                               EDotaClientMessages = 378
	EDotaClientMessages_DOTA_CM_EmptyTeleportAlert                     EDotaClientMessages = 379
	EDotaClientMessages_DOTA_CM_RadarAlert                             EDotaClientMessages = 380
	EDotaClientMessages_DOTA_CM_TalentTreeAlert                        EDotaClientMessages = 381
	EDotaClientMessages_DOTA_CM_SetCavernMapVariant                    EDotaClientMessages = 382
	EDotaClientMessages_DOTA_CM_PauseGameOrder                         EDotaClientMessages = 383
	EDotaClientMessages_DOTA_CM_VersusScene_PlayerBehavior             EDotaClientMessages = 384
	EDotaClientMessages_DOTA_CM_PlayerBounty                           EDotaClientMessages = 385
	EDotaClientMessages_DOTA_CM_PlayerBountyCancel                     EDotaClientMessages = 386
	EDotaClientMessages_DOTA_CM_PingConfirm                            EDotaClientMessages = 387
)

// Enum value maps for EDotaClientMessages.
var (
	EDotaClientMessages_name = map[int32]string{
		301: "DOTA_CM_MapLine",
		302: "DOTA_CM_AspectRatio",
		303: "DOTA_CM_MapPing",
		304: "DOTA_CM_UnitsAutoAttack",
		307: "DOTA_CM_SearchString",
		308: "DOTA_CM_Pause",
		309: "DOTA_CM_ShopViewMode",
		310: "DOTA_CM_SetUnitShareFlag",
		311: "DOTA_CM_SwapRequest",
		312: "DOTA_CM_SwapAccept",
		313: "DOTA_CM_WorldLine",
		314: "DOTA_CM_RequestGraphUpdate",
		315: "DOTA_CM_ItemAlert",
		316: "DOTA_CM_ChatWheel",
		317: "DOTA_CM_SendStatPopup",
		318: "DOTA_CM_BeginLastHitChallenge",
		319: "DOTA_CM_UpdateQuickBuy",
		320: "DOTA_CM_UpdateCoachListen",
		321: "DOTA_CM_CoachHUDPing",
		322: "DOTA_CM_RecordVote",
		323: "DOTA_CM_UnitsAutoAttackAfterSpell",
		324: "DOTA_CM_WillPurchaseAlert",
		325: "DOTA_CM_PlayerShowCase",
		326: "DOTA_CM_TeleportRequiresHalt",
		327: "DOTA_CM_CameraZoomAmount",
		328: "DOTA_CM_BroadcasterUsingCamerman",
		329: "DOTA_CM_BroadcasterUsingAssistedCameraOperator",
		330: "DOTA_CM_EnemyItemAlert",
		331: "DOTA_CM_FreeInventory",
		332: "DOTA_CM_BuyBackStateAlert",
		333: "DOTA_CM_QuickBuyAlert",
		334: "DOTA_CM_HeroStatueLike",
		335: "DOTA_CM_ModifierAlert",
		336: "DOTA_CM_TeamShowcaseEditor",
		337: "DOTA_CM_HPManaAlert",
		338: "DOTA_CM_GlyphAlert",
		339: "DOTA_CM_TeamShowcaseClientData",
		340: "DOTA_CM_PlayTeamShowcase",
		341: "DOTA_CM_EventCNY2015Cmd",
		342: "DOTA_CM_FillEmptySlotsWithBots",
		343: "DOTA_CM_DemoHero",
		344: "DOTA_CM_AbilityLearnModeToggled",
		345: "DOTA_CM_AbilityStartUse",
		346: "DOTA_CM_ChallengeSelect",
		347: "DOTA_CM_ChallengeReroll",
		348: "DOTA_CM_ClickedBuff",
		349: "DOTA_CM_CoinWager",
		350: "DOTA_CM_ExecuteOrders",
		351: "DOTA_CM_XPAlert",
		353: "DOTA_CM_EventPointsTip",
		354: "DOTA_CM_MatchMetadata",
		355: "DOTA_CM_KillMyHero",
		356: "DOTA_CM_QuestStatus",
		357: "DOTA_CM_ToggleAutoattack",
		358: "DOTA_CM_SpecialAbility",
		359: "DOTA_CM_KillcamDamageTaken",
		360: "DOTA_CM_SetEnemyStartingPosition",
		361: "DOTA_CM_SetDesiredWardPlacement",
		362: "DOTA_CM_RollDice",
		363: "DOTA_CM_FlipCoin",
		364: "DOTA_CM_RequestItemSuggestions",
		365: "DOTA_CM_MakeTeamCaptain",
		366: "DOTA_CM_CoinWagerToken",
		367: "DOTA_CM_RankWager",
		368: "DOTA_CM_DismissAllStatPopups",
		369: "DOTA_CM_HelpTipSystemStateChanged",
		370: "DOTA_CM_ChannelRequiresHalt",
		371: "DOTA_CM_RequestBulkCombatLog",
		372: "DOTA_CM_AbilityDraftRequestAbility",
		373: "DOTA_CM_GuideSelectOption",
		374: "DOTA_CM_GuideSelected",
		375: "DOTA_CM_DamageReport",
		376: "DOTA_CM_SalutePlayer",
		377: "DOTA_CM_SprayWheel",
		378: "DOTA_CM_TipAlert",
		379: "DOTA_CM_EmptyTeleportAlert",
		380: "DOTA_CM_RadarAlert",
		381: "DOTA_CM_TalentTreeAlert",
		382: "DOTA_CM_SetCavernMapVariant",
		383: "DOTA_CM_PauseGameOrder",
		384: "DOTA_CM_VersusScene_PlayerBehavior",
		385: "DOTA_CM_PlayerBounty",
		386: "DOTA_CM_PlayerBountyCancel",
		387: "DOTA_CM_PingConfirm",
	}
	EDotaClientMessages_value = map[string]int32{
		"DOTA_CM_MapLine":                                301,
		"DOTA_CM_AspectRatio":                            302,
		"DOTA_CM_MapPing":                                303,
		"DOTA_CM_UnitsAutoAttack":                        304,
		"DOTA_CM_SearchString":                           307,
		"DOTA_CM_Pause":                                  308,
		"DOTA_CM_ShopViewMode":                           309,
		"DOTA_CM_SetUnitShareFlag":                       310,
		"DOTA_CM_SwapRequest":                            311,
		"DOTA_CM_SwapAccept":                             312,
		"DOTA_CM_WorldLine":                              313,
		"DOTA_CM_RequestGraphUpdate":                     314,
		"DOTA_CM_ItemAlert":                              315,
		"DOTA_CM_ChatWheel":                              316,
		"DOTA_CM_SendStatPopup":                          317,
		"DOTA_CM_BeginLastHitChallenge":                  318,
		"DOTA_CM_UpdateQuickBuy":                         319,
		"DOTA_CM_UpdateCoachListen":                      320,
		"DOTA_CM_CoachHUDPing":                           321,
		"DOTA_CM_RecordVote":                             322,
		"DOTA_CM_UnitsAutoAttackAfterSpell":              323,
		"DOTA_CM_WillPurchaseAlert":                      324,
		"DOTA_CM_PlayerShowCase":                         325,
		"DOTA_CM_TeleportRequiresHalt":                   326,
		"DOTA_CM_CameraZoomAmount":                       327,
		"DOTA_CM_BroadcasterUsingCamerman":               328,
		"DOTA_CM_BroadcasterUsingAssistedCameraOperator": 329,
		"DOTA_CM_EnemyItemAlert":                         330,
		"DOTA_CM_FreeInventory":                          331,
		"DOTA_CM_BuyBackStateAlert":                      332,
		"DOTA_CM_QuickBuyAlert":                          333,
		"DOTA_CM_HeroStatueLike":                         334,
		"DOTA_CM_ModifierAlert":                          335,
		"DOTA_CM_TeamShowcaseEditor":                     336,
		"DOTA_CM_HPManaAlert":                            337,
		"DOTA_CM_GlyphAlert":                             338,
		"DOTA_CM_TeamShowcaseClientData":                 339,
		"DOTA_CM_PlayTeamShowcase":                       340,
		"DOTA_CM_EventCNY2015Cmd":                        341,
		"DOTA_CM_FillEmptySlotsWithBots":                 342,
		"DOTA_CM_DemoHero":                               343,
		"DOTA_CM_AbilityLearnModeToggled":                344,
		"DOTA_CM_AbilityStartUse":                        345,
		"DOTA_CM_ChallengeSelect":                        346,
		"DOTA_CM_ChallengeReroll":                        347,
		"DOTA_CM_ClickedBuff":                            348,
		"DOTA_CM_CoinWager":                              349,
		"DOTA_CM_ExecuteOrders":                          350,
		"DOTA_CM_XPAlert":                                351,
		"DOTA_CM_EventPointsTip":                         353,
		"DOTA_CM_MatchMetadata":                          354,
		"DOTA_CM_KillMyHero":                             355,
		"DOTA_CM_QuestStatus":                            356,
		"DOTA_CM_ToggleAutoattack":                       357,
		"DOTA_CM_SpecialAbility":                         358,
		"DOTA_CM_KillcamDamageTaken":                     359,
		"DOTA_CM_SetEnemyStartingPosition":               360,
		"DOTA_CM_SetDesiredWardPlacement":                361,
		"DOTA_CM_RollDice":                               362,
		"DOTA_CM_FlipCoin":                               363,
		"DOTA_CM_RequestItemSuggestions":                 364,
		"DOTA_CM_MakeTeamCaptain":                        365,
		"DOTA_CM_CoinWagerToken":                         366,
		"DOTA_CM_RankWager":                              367,
		"DOTA_CM_DismissAllStatPopups":                   368,
		"DOTA_CM_HelpTipSystemStateChanged":              369,
		"DOTA_CM_ChannelRequiresHalt":                    370,
		"DOTA_CM_RequestBulkCombatLog":                   371,
		"DOTA_CM_AbilityDraftRequestAbility":             372,
		"DOTA_CM_GuideSelectOption":                      373,
		"DOTA_CM_GuideSelected":                          374,
		"DOTA_CM_DamageReport":                           375,
		"DOTA_CM_SalutePlayer":                           376,
		"DOTA_CM_SprayWheel":                             377,
		"DOTA_CM_TipAlert":                               378,
		"DOTA_CM_EmptyTeleportAlert":                     379,
		"DOTA_CM_RadarAlert":                             380,
		"DOTA_CM_TalentTreeAlert":                        381,
		"DOTA_CM_SetCavernMapVariant":                    382,
		"DOTA_CM_PauseGameOrder":                         383,
		"DOTA_CM_VersusScene_PlayerBehavior":             384,
		"DOTA_CM_PlayerBounty":                           385,
		"DOTA_CM_PlayerBountyCancel":                     386,
		"DOTA_CM_PingConfirm":                            387,
	}
)

func (x EDotaClientMessages) Enum() *EDotaClientMessages {
	p := new(EDotaClientMessages)
	*p = x
	return p
}

func (x EDotaClientMessages) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EDotaClientMessages) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_clientmessages_proto_enumTypes[0].Descriptor()
}

func (EDotaClientMessages) Type() protoreflect.EnumType {
	return &file_dota_clientmessages_proto_enumTypes[0]
}

func (x EDotaClientMessages) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EDotaClientMessages) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EDotaClientMessages(num)
	return nil
}

// Deprecated: Use EDotaClientMessages.Descriptor instead.
func (EDotaClientMessages) EnumDescriptor() ([]byte, []int) {
	return file_dota_clientmessages_proto_rawDescGZIP(), []int{0}
}

type CDOTAClientMsg_UnitsAutoAttackMode_EMode int32

const (
	CDOTAClientMsg_UnitsAutoAttackMode_INVALID         CDOTAClientMsg_UnitsAutoAttackMode_EMode = -1
	CDOTAClientMsg_UnitsAutoAttackMode_NEVER           CDOTAClientMsg_UnitsAutoAttackMode_EMode = 0
	CDOTAClientMsg_UnitsAutoAttackMode_AFTER_SPELLCAST CDOTAClientMsg_UnitsAutoAttackMode_EMode = 1
	CDOTAClientMsg_UnitsAutoAttackMode_ALWAYS          CDOTAClientMsg_UnitsAutoAttackMode_EMode = 2
)

// Enum value maps for CDOTAClientMsg_UnitsAutoAttackMode_EMode.
var (
	CDOTAClientMsg_UnitsAutoAttackMode_EMode_name = map[int32]string{
		-1: "INVALID",
		0:  "NEVER",
		1:  "AFTER_SPELLCAST",
		2:  "ALWAYS",
	}
	CDOTAClientMsg_UnitsAutoAttackMode_EMode_value = map[string]int32{
		"INVALID":         -1,
		"NEVER":           0,
		"AFTER_SPELLCAST": 1,
		"ALWAYS":          2,
	}
)

func (x CDOTAClientMsg_UnitsAutoAttackMode_EMode) Enum() *CDOTAClientMsg_UnitsAutoAttackMode_EMode {
	p := new(CDOTAClientMsg_UnitsAutoAttackMode_EMode)
	*p = x
	return p
}

func (x CDOTAClientMsg_UnitsAutoAttackMode_EMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CDOTAClientMsg_UnitsAutoAttackMode_EMode) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_clientmessages_proto_enumTypes[1].Descriptor()
}

func (CDOTAClientMsg_UnitsAutoAttackMode_EMode) Type() protoreflect.EnumType {
	return &file_dota_clientmessages_proto_enumTypes[1]
}

func (x CDOTAClientMsg_UnitsAutoAttackMode_EMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CDOTAClientMsg_UnitsAutoAttackMode_EMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CDOTAClientMsg_UnitsAutoAttackMode_EMode(num)
	return nil
}

// Deprecated: Use CDOTAClientMsg_UnitsAutoAttackMode_EMode.Descriptor instead.
func (CDOTAClientMsg_UnitsAutoAttackMode_EMode) EnumDescriptor() ([]byte, []int) {
	return file_dota_clientmessages_proto_rawDescGZIP(), []int{10, 0}
}

type CDOTAClientMsg_UnitsAutoAttackMode_EUnitType int32

const (
	CDOTAClientMsg_UnitsAutoAttackMode_NORMAL   CDOTAClientMsg_UnitsAutoAttackMode_EUnitType = 0
	CDOTAClientMsg_UnitsAutoAttackMode_SUMMONED CDOTAClientMsg_UnitsAutoAttackMode_EUnitType = 1
)

// Enum value maps for CDOTAClientMsg_UnitsAutoAttackMode_EUnitType.
var (
	CDOTAClientMsg_UnitsAutoAttackMode_EUnitType_name = map[int32]string{
		0: "NORMAL",
		1: "SUMMONED",
	}
	CDOTAClientMsg_UnitsAutoAttackMode_EUnitType_value = map[string]int32{
		"NORMAL":   0,
		"SUMMONED": 1,
	}
)

func (x CDOTAClientMsg_UnitsAutoAttackMode_EUnitType) Enum() *CDOTAClientMsg_UnitsAutoAttackMode_EUnitType {
	p := new(CDOTAClientMsg_UnitsAutoAttackMode_EUnitType)
	*p = x
	return p
}

func (x CDOTAClientMsg_UnitsAutoAttackMode_EUnitType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CDOTAClientMsg_UnitsAutoAttackMode_EUnitType) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_clientmessages_proto_enumTypes[2].Descriptor()
}

func (CDOTAClientMsg_UnitsAutoAttackMode_EUnitType) Type() protoreflect.EnumType {
	return &file_dota_clientmessages_proto_enumTypes[2]
}

func (x CDOTAClientMsg_UnitsAutoAttackMode_EUnitType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CDOTAClientMsg_UnitsAutoAttackMode_EUnitType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CDOTAClientMsg_UnitsAutoAttackMode_EUnitType(num)
	return nil
}

// Deprecated: Use CDOTAClientMsg_UnitsAutoAttackMode_EUnitType.Descriptor instead.
func (CDOTAClientMsg_UnitsAutoAttackMode_EUnitType) EnumDescriptor() ([]byte, []int) {
	return file_dota_clientmessages_proto_rawDescGZIP(), []int{10, 1}
}

type CDOTAClientMsg_MapPing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocationPing *CDOTAMsg_LocationPing `protobuf:"bytes,1,opt,name=location_ping,json=locationPing" json:"location_ping,omitempty"`
}

func (x *CDOTAClientMsg_MapPing) Reset() {
	*x = CDOTAClientMsg_MapPing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_clientmessages_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAClientMsg_MapPing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAClientMsg_MapPing) ProtoMessage() {}

func (x *CDOTAClientMsg_MapPing) ProtoReflect() protoreflect.Message {
	mi := &file_dota_clientmessages_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAClientMsg_MapPing.ProtoReflect.Descriptor instead.
func (*CDOTAClientMsg_MapPing) Descriptor() ([]byte, []int) {
	return file_dota_clientmessages_proto_rawDescGZIP(), []int{0}
}

func (x *CDOTAClientMsg_MapPing) GetLocationPing() *CDOTAMsg_LocationPing {
	if x != nil {
		return x.LocationPing
	}
	return nil
}

type CDOTAClientMsg_ItemAlert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemAlert *CDOTAMsg_ItemAlert `protobuf:"bytes,1,opt,name=item_alert,json=itemAlert" json:"item_alert,omitempty"`
}

func (x *CDOTAClientMsg_ItemAlert) Reset() {
	*x = CDOTAClientMsg_ItemAlert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_clientmessages_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAClientMsg_ItemAlert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAClientMsg_ItemAlert) ProtoMessage() {}

func (x *CDOTAClientMsg_ItemAlert) ProtoReflect() protoreflect.Message {
	mi := &file_dota_clientmessages_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAClientMsg_ItemAlert.ProtoReflect.Descriptor instead.
func (*CDOTAClientMsg_ItemAlert) Descriptor() ([]byte, []int) {
	return file_dota_clientmessages_proto_rawDescGZIP(), []int{1}
}

func (x *CDOTAClientMsg_ItemAlert) GetItemAlert() *CDOTAMsg_ItemAlert {
	if x != nil {
		return x.ItemAlert
	}
	return nil
}

type CDOTAClientMsg_EnemyItemAlert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemEntindex     *uint32 `protobuf:"varint,1,opt,name=item_entindex,json=itemEntindex" json:"item_entindex,omitempty"`
	RuneType         *int32  `protobuf:"varint,2,opt,name=rune_type,json=runeType,def=-1" json:"rune_type,omitempty"`
	ItemLevel        *int32  `protobuf:"varint,3,opt,name=item_level,json=itemLevel,def=-1" json:"item_level,omitempty"`
	PrimaryCharges   *int32  `protobuf:"varint,4,opt,name=primary_charges,json=primaryCharges,def=-1" json:"primary_charges,omitempty"`
	SecondaryCharges *int32  `protobuf:"varint,5,opt,name=secondary_charges,json=secondaryCharges,def=-1" json:"secondary_charges,omitempty"`
}

// Default values for CDOTAClientMsg_EnemyItemAlert fields.
const (
	Default_CDOTAClientMsg_EnemyItemAlert_RuneType         = int32(-1)
	Default_CDOTAClientMsg_EnemyItemAlert_ItemLevel        = int32(-1)
	Default_CDOTAClientMsg_EnemyItemAlert_PrimaryCharges   = int32(-1)
	Default_CDOTAClientMsg_EnemyItemAlert_SecondaryCharges = int32(-1)
)

func (x *CDOTAClientMsg_EnemyItemAlert) Reset() {
	*x = CDOTAClientMsg_EnemyItemAlert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_clientmessages_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAClientMsg_EnemyItemAlert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAClientMsg_EnemyItemAlert) ProtoMessage() {}

func (x *CDOTAClientMsg_EnemyItemAlert) ProtoReflect() protoreflect.Message {
	mi := &file_dota_clientmessages_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAClientMsg_EnemyItemAlert.ProtoReflect.Descriptor instead.
func (*CDOTAClientMsg_EnemyItemAlert) Descriptor() ([]byte, []int) {
	return file_dota_clientmessages_proto_rawDescGZIP(), []int{2}
}

func (x *CDOTAClientMsg_EnemyItemAlert) GetItemEntindex() uint32 {
	if x != nil && x.ItemEntindex != nil {
		return *x.ItemEntindex
	}
	return 0
}

func (x *CDOTAClientMsg_EnemyItemAlert) GetRuneType() int32 {
	if x != nil && x.RuneType != nil {
		return *x.RuneType
	}
	return Default_CDOTAClientMsg_EnemyItemAlert_RuneType
}

func (x *CDOTAClientMsg_EnemyItemAlert) GetItemLevel() int32 {
	if x != nil && x.ItemLevel != nil {
		return *x.ItemLevel
	}
	return Default_CDOTAClientMsg_EnemyItemAlert_ItemLevel
}

func (x *CDOTAClientMsg_EnemyItemAlert) GetPrimaryCharges() int32 {
	if x != nil && x.PrimaryCharges != nil {
		return *x.PrimaryCharges
	}
	return Default_CDOTAClientMsg_EnemyItemAlert_PrimaryCharges
}

func (x *CDOTAClientMsg_EnemyItemAlert) GetSecondaryCharges() int32 {
	if x != nil && x.SecondaryCharges != nil {
		return *x.SecondaryCharges
	}
	return Default_CDOTAClientMsg_EnemyItemAlert_SecondaryCharges
}

type CDOTAClientMsg_ModifierAlert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuffInternalIndex *int32  `protobuf:"varint,1,opt,name=buff_internal_index,json=buffInternalIndex" json:"buff_internal_index,omitempty"`
	TargetEntindex    *uint32 `protobuf:"varint,2,opt,name=target_entindex,json=targetEntindex" json:"target_entindex,omitempty"`
}

func (x *CDOTAClientMsg_ModifierAlert) Reset() {
	*x = CDOTAClientMsg_ModifierAlert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_clientmessages_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAClientMsg_ModifierAlert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAClientMsg_ModifierAlert) ProtoMessage() {}

func (x *CDOTAClientMsg_ModifierAlert) ProtoReflect() protoreflect.Message {
	mi := &file_dota_clientmessages_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAClientMsg_ModifierAlert.ProtoReflect.Descriptor instead.
func (*CDOTAClientMsg_ModifierAlert) Descriptor() ([]byte, []int) {
	return file_dota_clientmessages_proto_rawDescGZIP(), []int{3}
}

func (x *CDOTAClientMsg_ModifierAlert) GetBuffInternalIndex() int32 {
	if x != nil && x.BuffInternalIndex != nil {
		return *x.BuffInternalIndex
	}
	return 0
}

func (x *CDOTAClientMsg_ModifierAlert) GetTargetEntindex() uint32 {
	if x != nil && x.TargetEntindex != nil {
		return *x.TargetEntindex
	}
	return 0
}

type CDOTAClientMsg_ClickedBuff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuffInternalIndex *int32  `protobuf:"varint,1,opt,name=buff_internal_index,json=buffInternalIndex" json:"buff_internal_index,omitempty"`
	TargetEntindex    *uint32 `protobuf:"varint,2,opt,name=target_entindex,json=targetEntindex" json:"target_entindex,omitempty"`
}

func (x *CDOTAClientMsg_ClickedBuff) Reset() {
	*x = CDOTAClientMsg_ClickedBuff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_clientmessages_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAClientMsg_ClickedBuff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAClientMsg_ClickedBuff) ProtoMessage() {}

func (x *CDOTAClientMsg_ClickedBuff) ProtoReflect() protoreflect.Message {
	mi := &file_dota_clientmessages_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAClientMsg_ClickedBuff.ProtoReflect.Descriptor instead.
func (*CDOTAClientMsg_ClickedBuff) Descriptor() ([]byte, []int) {
	return file_dota_clientmessages_proto_rawDescGZIP(), []int{4}
}

func (x *CDOTAClientMsg_ClickedBuff) GetBuffInternalIndex() int32 {
	if x != nil && x.BuffInternalIndex != nil {
		return *x.BuffInternalIndex
	}
	return 0
}

func (x *CDOTAClientMsg_ClickedBuff) GetTargetEntindex() uint32 {
	if x != nil && x.TargetEntindex != nil {
		return *x.TargetEntindex
	}
	return 0
}

type CDOTAClientMsg_HPManaAlert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetEntindex *uint32 `protobuf:"varint,1,opt,name=target_entindex,json=targetEntindex" json:"target_entindex,omitempty"`
	ShowRawValues  *bool   `protobuf:"varint,2,opt,name=show_raw_values,json=showRawValues" json:"show_raw_values,omitempty"`
}

func (x *CDOTAClientMsg_HPManaAlert) Reset() {
	*x = CDOTAClientMsg_HPManaAlert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_clientmessages_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAClientMsg_HPManaAlert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAClientMsg_HPManaAlert) ProtoMessage() {}

func (x *CDOTAClientMsg_HPManaAlert) ProtoReflect() protoreflect.Message {
	mi := &file_dota_clientmessages_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAClientMsg_HPManaAlert.ProtoReflect.Descriptor instead.
func (*CDOTAClientMsg_HPManaAlert) Descriptor() ([]byte, []int) {
	return file_dota_clientmessages_proto_rawDescGZIP(), []int{5}
}

func (x *CDOTAClientMsg_HPManaAlert) GetTargetEntindex() uint32 {
	if x != nil && x.TargetEntindex != nil {
		return *x.TargetEntindex
	}
	return 0
}

func (x *CDOTAClientMsg_HPManaAlert) GetShowRawValues() bool {
	if x != nil && x.ShowRawValues != nil {
		return *x.ShowRawValues
	}
	return false
}

type CDOTAClientMsg_GlyphAlert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Negative *bool `protobuf:"varint,1,opt,name=negative" json:"negative,omitempty"`
}

func (x *CDOTAClientMsg_GlyphAlert) Reset() {
	*x = CDOTAClientMsg_GlyphAlert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_clientmessages_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAClientMsg_GlyphAlert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAClientMsg_GlyphAlert) ProtoMessage() {}

func (x *CDOTAClientMsg_GlyphAlert) ProtoReflect() protoreflect.Message {
	mi := &file_dota_clientmessages_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAClientMsg_GlyphAlert.ProtoReflect.Descriptor instead.
func (*CDOTAClientMsg_GlyphAlert) Descriptor() ([]byte, []int) {
	return file_dota_clientmessages_proto_rawDescGZIP(), []int{6}
}

func (x *CDOTAClientMsg_GlyphAlert) GetNegative() bool {
	if x != nil && x.Negative != nil {
		return *x.Negative
	}
	return false
}

type CDOTAClientMsg_RadarAlert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Negative *bool `protobuf:"varint,1,opt,name=negative" json:"negative,omitempty"`
}

func (x *CDOTAClientMsg_RadarAlert) Reset() {
	*x = CDOTAClientMsg_RadarAlert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_clientmessages_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAClientMsg_RadarAlert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAClientMsg_RadarAlert) ProtoMessage() {}

func (x *CDOTAClientMsg_RadarAlert) ProtoReflect() protoreflect.Message {
	mi := &file_dota_clientmessages_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAClientMsg_RadarAlert.ProtoReflect.Descriptor instead.
func (*CDOTAClientMsg_RadarAlert) Descriptor() ([]byte, []int) {
	return file_dota_clientmessages_proto_rawDescGZIP(), []int{7}
}

func (x *CDOTAClientMsg_RadarAlert) GetNegative() bool {
	if x != nil && x.Negative != nil {
		return *x.Negative
	}
	return false
}

type CDOTAClientMsg_MapLine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mapline *CDOTAMsg_MapLine `protobuf:"bytes,1,opt,name=mapline" json:"mapline,omitempty"`
}

func (x *CDOTAClientMsg_MapLine) Reset() {
	*x = CDOTAClientMsg_MapLine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_clientmessages_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAClientMsg_MapLine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAClientMsg_MapLine) ProtoMessage() {}

func (x *CDOTAClientMsg_MapLine) ProtoReflect() protoreflect.Message {
	mi := &file_dota_clientmessages_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAClientMsg_MapLine.ProtoReflect.Descriptor instead.
func (*CDOTAClientMsg_MapLine) Descriptor() ([]byte, []int) {
	return file_dota_clientmessages_proto_rawDescGZIP(), []int{8}
}

func (x *CDOTAClientMsg_MapLine) GetMapline() *CDOTAMsg_MapLine {
	if x != nil {
		return x.Mapline
	}
	return nil
}

type CDOTAClientMsg_AspectRatio struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ratio *float32 `protobuf:"fixed32,1,opt,name=ratio" json:"ratio,omitempty"`
}

func (x *CDOTAClientMsg_AspectRatio) Reset() {
	*x = CDOTAClientMsg_AspectRatio{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_clientmessages_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAClientMsg_AspectRatio) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAClientMsg_AspectRatio) ProtoMessage() {}

func (x *CDOTAClientMsg_AspectRatio) ProtoReflect() protoreflect.Message {
	mi := &file_dota_clientmessages_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAClientMsg_AspectRatio.ProtoReflect.Descriptor instead.
func (*CDOTAClientMsg_AspectRatio) Descriptor() ([]byte, []int) {
	return file_dota_clientmessages_proto_rawDescGZIP(), []int{9}
}

func (x *CDOTAClientMsg_AspectRatio) GetRatio() float32 {
	if x != nil && x.Ratio != nil {
		return *x.Ratio
	}
	return 0
}

type CDOTAClientMsg_UnitsAutoAttackMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode     *CDOTAClientMsg_UnitsAutoAttackMode_EMode     `protobuf:"varint,1,opt,name=mode,enum=dota.CDOTAClientMsg_UnitsAutoAttackMode_EMode,def=-1" json:"mode,omitempty"`
	UnitType *CDOTAClientMsg_UnitsAutoAttackMode_EUnitType `protobuf:"varint,2,opt,name=unit_type,json=unitType,enum=dota.CDOTAClientMsg_UnitsAutoAttackMode_EUnitType,def=0" json:"unit_type,omitempty"`
}

// Default values for CDOTAClientMsg_UnitsAutoAttackMode fields.
const (
	Default_CDOTAClientMsg_UnitsAutoAttackMode_Mode     = CDOTAClientMsg_UnitsAutoAttackMode_INVALID
	Default_CDOTAClientMsg_UnitsAutoAttackMode_UnitType = CDOTAClientMsg_UnitsAutoAttackMode_NORMAL
)

func (x *CDOTAClientMsg_UnitsAutoAttackMode) Reset() {
	*x = CDOTAClientMsg_UnitsAutoAttackMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_clientmessages_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAClientMsg_UnitsAutoAttackMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAClientMsg_UnitsAutoAttackMode) ProtoMessage() {}

func (x *CDOTAClientMsg_UnitsAutoAttackMode) ProtoReflect() protoreflect.Message {
	mi := &file_dota_clientmessages_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAClientMsg_UnitsAutoAttackMode.ProtoReflect.Descriptor instead.
func (*CDOTAClientMsg_UnitsAutoAttackMode) Descriptor() ([]byte, []int) {
	return file_dota_clientmessages_proto_rawDescGZIP(), []int{10}
}

func (x *CDOTAClientMsg_UnitsAutoAttackMode) GetMode() CDOTAClientMsg_UnitsAutoAttackMode_EMode {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return Default_CDOTAClientMsg_UnitsAutoAttackMode_Mode
}

func (x *CDOTAClientMsg_UnitsAutoAttackMode) GetUnitType() CDOTAClientMsg_UnitsAutoAttackMode_EUnitType {
	if x != nil && x.UnitType != nil {
		return *x.UnitType
	}
	return Default_CDOTAClientMsg_UnitsAutoAttackMode_UnitType
}

type CDOTAClientMsg_UnitsAutoAttackAfterSpell struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled *bool `protobuf:"varint,1,opt,name=enabled" json:"enabled,omitempty"`
}

func (x *CDOTAClientMsg_UnitsAutoAttackAfterSpell) Reset() {
	*x = CDOTAClientMsg_UnitsAutoAttackAfterSpell{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_clientmessages_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAClientMsg_UnitsAutoAttackAfterSpell) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAClientMsg_UnitsAutoAttackAfterSpell) ProtoMessage() {}

func (x *CDOTAClientMsg_UnitsAutoAttackAfterSpell) ProtoReflect() protoreflect.Message {
	mi := &file_dota_clientmessages_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAClientMsg_UnitsAutoAttackAfterSpell.ProtoReflect.Descriptor instead.
func (*CDOTAClientMsg_UnitsAutoAttackAfterSpell) Descriptor() ([]byte, []int) {
	return file_dota_clientmessages_proto_rawDescGZIP(), []int{11}
}

func (x *CDOTAClientMsg_UnitsAutoAttackAfterSpell) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

type CDOTAClientMsg_TeleportRequiresHalt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled *bool `protobuf:"varint,1,opt,name=enabled" json:"enabled,omitempty"`
}

func (x *CDOTAClientMsg_TeleportRequiresHalt) Reset() {
	*x = CDOTAClientMsg_TeleportRequiresHalt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_clientmessages_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAClientMsg_TeleportRequiresHalt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAClientMsg_TeleportRequiresHalt) ProtoMessage() {}

func (x *CDOTAClientMsg_TeleportRequiresHalt) ProtoReflect() protoreflect.Message {
	mi := &file_dota_clientmessages_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAClientMsg_TeleportRequiresHalt.ProtoReflect.Descriptor instead.
func (*CDOTAClientMsg_TeleportRequiresHalt) Descriptor() ([]byte, []int) {
	return file_dota_clientmessages_proto_rawDescGZIP(), []int{12}
}

func (x *CDOTAClientMsg_TeleportRequiresHalt) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

type CDOTAClientMsg_ChannelRequiresHalt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled *bool `protobuf:"varint,1,opt,name=enabled" json:"enabled,omitempty"`
}

func (x *CDOTAClientMsg_ChannelRequiresHalt) Reset() {
	*x = CDOTAClientMsg_ChannelRequiresHalt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_clientmessages_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAClientMsg_ChannelRequiresHalt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAClientMsg_ChannelRequiresHalt) ProtoMessage() {}

func (x *CDOTAClientMsg_ChannelRequiresHalt) ProtoReflect() protoreflect.Message {
	mi := &file_dota_clientmessages_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAClientMsg_ChannelRequiresHalt.ProtoReflect.Descriptor instead.
func (*CDOTAClientMsg_ChannelRequiresHalt) Descriptor() ([]byte, []int) {
	return file_dota_clientmessages_proto_rawDescGZIP(), []int{13}
}

func (x *CDOTAClientMsg_ChannelRequiresHalt) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

type CDOTAClientMsg_SearchString struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Search *string `protobuf:"bytes,1,opt,name=search" json:"search,omitempty"`
}

func (x *CDOTAClientMsg_SearchString) Reset() {
	*x = CDOTAClientMsg_SearchString{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_clientmessages_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAClientMsg_SearchString) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAClientMsg_SearchString) ProtoMessage() {}

func (x *CDOTAClientMsg_SearchString) ProtoReflect() protoreflect.Message {
	mi := &file_dota_clientmessages_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAClientMsg_SearchString.ProtoReflect.Descriptor instead.
func (*CDOTAClientMsg_SearchString) Descriptor() ([]byte, []int) {
	return file_dota_clientmessages_proto_rawDescGZIP(), []int{14}
}

func (x *CDOTAClientMsg_SearchString) GetSearch() string {
	if x != nil && x.Search != nil {
		return *x.Search
	}
	return ""
}

type CDOTAClientMsg_Pause struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CDOTAClientMsg_Pause) Reset() {
	*x = CDOTAClientMsg_Pause{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_clientmessages_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAClientMsg_Pause) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAClientMsg_Pause) ProtoMessage() {}

func (x *CDOTAClientMsg_Pause) ProtoReflect() protoreflect.Message {
	mi := &file_dota_clientmessages_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAClientMsg_Pause.ProtoReflect.Descriptor instead.
func (*CDOTAClientMsg_Pause) Descriptor() ([]byte, []int) {
	return file_dota_clientmessages_proto_rawDescGZIP(), []int{15}
}

type CDOTAClientMsg_ShopViewMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode *uint32 `protobuf:"varint,1,opt,name=mode" json:"mode,omitempty"`
}

func (x *CDOTAClientMsg_ShopViewMode) Reset() {
	*x = CDOTAClientMsg_ShopViewMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_clientmessages_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAClientMsg_ShopViewMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAClientMsg_ShopViewMode) ProtoMessage() {}

func (x *CDOTAClientMsg_ShopViewMode) ProtoReflect() protoreflect.Message {
	mi := &file_dota_clientmessages_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAClientMsg_ShopViewMode.ProtoReflect.Descriptor instead.
func (*CDOTAClientMsg_ShopViewMode) Descriptor() ([]byte, []int) {
	return file_dota_clientmessages_proto_rawDescGZIP(), []int{16}
}

func (x *CDOTAClientMsg_ShopViewMode) GetMode() uint32 {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return 0
}

type CDOTAClientMsg_SetUnitShareFlag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerID *uint32 `protobuf:"varint,1,opt,name=playerID" json:"playerID,omitempty"`
	Flag     *uint32 `protobuf:"varint,2,opt,name=flag" json:"flag,omitempty"`
	State    *bool   `protobuf:"varint,3,opt,name=state" json:"state,omitempty"`
}

func (x *CDOTAClientMsg_SetUnitShareFlag) Reset() {
	*x = CDOTAClientMsg_SetUnitShareFlag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_clientmessages_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAClientMsg_SetUnitShareFlag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAClientMsg_SetUnitShareFlag) ProtoMessage() {}

func (x *CDOTAClientMsg_SetUnitShareFlag) ProtoReflect() protoreflect.Message {
	mi := &file_dota_clientmessages_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAClientMsg_SetUnitShareFlag.ProtoReflect.Descriptor instead.
func (*CDOTAClientMsg_SetUnitShareFlag) Descriptor() ([]byte, []int) {
	return file_dota_clientmessages_proto_rawDescGZIP(), []int{17}
}

func (x *CDOTAClientMsg_SetUnitShareFlag) GetPlayerID() uint32 {
	if x != nil && x.PlayerID != nil {
		return *x.PlayerID
	}
	return 0
}

func (x *CDOTAClientMsg_SetUnitShareFlag) GetFlag() uint32 {
	if x != nil && x.Flag != nil {
		return *x.Flag
	}
	return 0
}

func (x *CDOTAClientMsg_SetUnitShareFlag) GetState() bool {
	if x != nil && x.State != nil {
		return *x.State
	}
	return false
}

type CDOTAClientMsg_SwapRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId *uint32 `protobuf:"varint,1,opt,name=player_id,json=playerId" json:"player_id,omitempty"`
}

func (x *CDOTAClientMsg_SwapRequest) Reset() {
	*x = CDOTAClientMsg_SwapRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_clientmessages_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAClientMsg_SwapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAClientMsg_SwapRequest) ProtoMessage() {}

func (x *CDOTAClientMsg_SwapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_clientmessages_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAClientMsg_SwapRequest.ProtoReflect.Descriptor instead.
func (*CDOTAClientMsg_SwapRequest) Descriptor() ([]byte, []int) {
	return file_dota_clientmessages_proto_rawDescGZIP(), []int{18}
}

func (x *CDOTAClientMsg_SwapRequest) GetPlayerId() uint32 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

type CDOTAClientMsg_SwapAccept struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId *uint32 `protobuf:"varint,1,opt,name=player_id,json=playerId" json:"player_id,omitempty"`
}

func (x *CDOTAClientMsg_SwapAccept) Reset() {
	*x = CDOTAClientMsg_SwapAccept{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_clientmessages_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAClientMsg_SwapAccept) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAClientMsg_SwapAccept) ProtoMessage() {}

func (x *CDOTAClientMsg_SwapAccept) ProtoReflect() protoreflect.Message {
	mi := &file_dota_clientmessages_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAClientMsg_SwapAccept.ProtoReflect.Descriptor instead.
func (*CDOTAClientMsg_SwapAccept) Descriptor() ([]byte, []int) {
	return file_dota_clientmessages_proto_rawDescGZIP(), []int{19}
}

func (x *CDOTAClientMsg_SwapAccept) GetPlayerId() uint32 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

type CDOTAClientMsg_WorldLine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Worldline *CDOTAMsg_WorldLine `protobuf:"bytes,1,opt,name=worldline" json:"worldline,omitempty"`
}

func (x *CDOTAClientMsg_WorldLine) Reset() {
	*x = CDOTAClientMsg_WorldLine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_clientmessages_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAClientMsg_WorldLine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAClientMsg_WorldLine) ProtoMessage() {}

func (x *CDOTAClientMsg_WorldLine) ProtoReflect() protoreflect.Message {
	mi := &file_dota_clientmessages_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAClientMsg_WorldLine.ProtoReflect.Descriptor instead.
func (*CDOTAClientMsg_WorldLine) Descriptor() ([]byte, []int) {
	return file_dota_clientmessages_proto_rawDescGZIP(), []int{20}
}

func (x *CDOTAClientMsg_WorldLine) GetWorldline() *CDOTAMsg_WorldLine {
	if x != nil {
		return x.Worldline
	}
	return nil
}

type CDOTAClientMsg_RequestGraphUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CDOTAClientMsg_RequestGraphUpdate) Reset() {
	*x = CDOTAClientMsg_RequestGraphUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_clientmessages_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAClientMsg_RequestGraphUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAClientMsg_RequestGraphUpdate) ProtoMessage() {}

func (x *CDOTAClientMsg_RequestGraphUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_dota_clientmessages_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAClientMsg_RequestGraphUpdate.ProtoReflect.Descriptor instead.
func (*CDOTAClientMsg_RequestGraphUpdate) Descriptor() ([]byte, []int) {
	return file_dota_clientmessages_proto_rawDescGZIP(), []int{21}
}

type CDOTAClientMsg_ChatWheel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatMessageId *uint32 `protobuf:"varint,1,opt,name=chat_message_id,json=chatMessageId" json:"chat_message_id,omitempty"`
	ParamHeroId   *uint32 `protobuf:"varint,2,opt,name=param_hero_id,json=paramHeroId" json:"param_hero_id,omitempty"`
	EmoticonId    *uint32 `protobuf:"varint,3,opt,name=emoticon_id,json=emoticonId" json:"emoticon_id,omitempty"`
}

func (x *CDOTAClientMsg_ChatWheel) Reset() {
	*x = CDOTAClientMsg_ChatWheel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_clientmessages_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAClientMsg_ChatWheel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAClientMsg_ChatWheel) ProtoMessage() {}

func (x *CDOTAClientMsg_ChatWheel) ProtoReflect() protoreflect.Message {
	mi := &file_dota_clientmessages_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAClientMsg_ChatWheel.ProtoReflect.Descriptor instead.
func (*CDOTAClientMsg_ChatWheel) Descriptor() ([]byte, []int) {
	return file_dota_clientmessages_proto_rawDescGZIP(), []int{22}
}

func (x *CDOTAClientMsg_ChatWheel) GetChatMessageId() uint32 {
	if x != nil && x.ChatMessageId != nil {
		return *x.ChatMessageId
	}
	return 0
}

func (x *CDOTAClientMsg_ChatWheel) GetParamHeroId() uint32 {
	if x != nil && x.ParamHeroId != nil {
		return *x.ParamHeroId
	}
	return 0
}

func (x *CDOTAClientMsg_ChatWheel) GetEmoticonId() uint32 {
	if x != nil && x.EmoticonId != nil {
		return *x.EmoticonId
	}
	return 0
}

type CDOTAClientMsg_SendStatPopup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Statpopup *CDOTAMsg_SendStatPopup `protobuf:"bytes,1,opt,name=statpopup" json:"statpopup,omitempty"`
}

func (x *CDOTAClientMsg_SendStatPopup) Reset() {
	*x = CDOTAClientMsg_SendStatPopup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_clientmessages_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAClientMsg_SendStatPopup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAClientMsg_SendStatPopup) ProtoMessage() {}

func (x *CDOTAClientMsg_SendStatPopup) ProtoReflect() protoreflect.Message {
	mi := &file_dota_clientmessages_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAClientMsg_SendStatPopup.ProtoReflect.Descriptor instead.
func (*CDOTAClientMsg_SendStatPopup) Descriptor() ([]byte, []int) {
	return file_dota_clientmessages_proto_rawDescGZIP(), []int{23}
}

func (x *CDOTAClientMsg_SendStatPopup) GetStatpopup() *CDOTAMsg_SendStatPopup {
	if x != nil {
		return x.Statpopup
	}
	return nil
}

type CDOTAClientMsg_DismissAllStatPopups struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dismissallmsg *CDOTAMsg_DismissAllStatPopups `protobuf:"bytes,1,opt,name=dismissallmsg" json:"dismissallmsg,omitempty"`
}

func (x *CDOTAClientMsg_DismissAllStatPopups) Reset() {
	*x = CDOTAClientMsg_DismissAllStatPopups{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_clientmessages_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAClientMsg_DismissAllStatPopups) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAClientMsg_DismissAllStatPopups) ProtoMessage() {}

func (x *CDOTAClientMsg_DismissAllStatPopups) ProtoReflect() protoreflect.Message {
	mi := &file_dota_clientmessages_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAClientMsg_DismissAllStatPopups.ProtoReflect.Descriptor instead.
func (*CDOTAClientMsg_DismissAllStatPopups) Descriptor() ([]byte, []int) {
	return file_dota_clientmessages_proto_rawDescGZIP(), []int{24}
}

func (x *CDOTAClientMsg_DismissAllStatPopups) GetDismissallmsg() *CDOTAMsg_DismissAllStatPopups {
	if x != nil {
		return x.Dismissallmsg
	}
	return nil
}

type CDOTAClientMsg_BeginLastHitChallenge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChosenLane    *uint32 `protobuf:"varint,1,opt,name=chosen_lane,json=chosenLane" json:"chosen_lane,omitempty"`
	HelperEnabled *bool   `protobuf:"varint,2,opt,name=helper_enabled,json=helperEnabled" json:"helper_enabled,omitempty"`
}

func (x *CDOTAClientMsg_BeginLastHitChallenge) Reset() {
	*x = CDOTAClientMsg_BeginLastHitChallenge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_clientmessages_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAClientMsg_BeginLastHitChallenge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAClientMsg_BeginLastHitChallenge) ProtoMessage() {}

func (x *CDOTAClientMsg_BeginLastHitChallenge) ProtoReflect() protoreflect.Message {
	mi := &file_dota_clientmessages_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAClientMsg_BeginLastHitChallenge.ProtoReflect.Descriptor instead.
func (*CDOTAClientMsg_BeginLastHitChallenge) Descriptor() ([]byte, []int) {
	return file_dota_clientmessages_proto_rawDescGZIP(), []int{25}
}

func (x *CDOTAClientMsg_BeginLastHitChallenge) GetChosenLane() uint32 {
	if x != nil && x.ChosenLane != nil {
		return *x.ChosenLane
	}
	return 0
}

func (x *CDOTAClientMsg_BeginLastHitChallenge) GetHelperEnabled() bool {
	if x != nil && x.HelperEnabled != nil {
		return *x.HelperEnabled
	}
	return false
}

type CDOTAClientMsg_UpdateQuickBuyItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemAbilityId *int32 `protobuf:"varint,1,opt,name=item_ability_id,json=itemAbilityId,def=-1" json:"item_ability_id,omitempty"`
	Purchasable   *bool  `protobuf:"varint,2,opt,name=purchasable,def=0" json:"purchasable,omitempty"`
}

// Default values for CDOTAClientMsg_UpdateQuickBuyItem fields.
const (
	Default_CDOTAClientMsg_UpdateQuickBuyItem_ItemAbilityId = int32(-1)
	Default_CDOTAClientMsg_UpdateQuickBuyItem_Purchasable   = bool(false)
)

func (x *CDOTAClientMsg_UpdateQuickBuyItem) Reset() {
	*x = CDOTAClientMsg_UpdateQuickBuyItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_clientmessages_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAClientMsg_UpdateQuickBuyItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAClientMsg_UpdateQuickBuyItem) ProtoMessage() {}

func (x *CDOTAClientMsg_UpdateQuickBuyItem) ProtoReflect() protoreflect.Message {
	mi := &file_dota_clientmessages_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAClientMsg_UpdateQuickBuyItem.ProtoReflect.Descriptor instead.
func (*CDOTAClientMsg_UpdateQuickBuyItem) Descriptor() ([]byte, []int) {
	return file_dota_clientmessages_proto_rawDescGZIP(), []int{26}
}

func (x *CDOTAClientMsg_UpdateQuickBuyItem) GetItemAbilityId() int32 {
	if x != nil && x.ItemAbilityId != nil {
		return *x.ItemAbilityId
	}
	return Default_CDOTAClientMsg_UpdateQuickBuyItem_ItemAbilityId
}

func (x *CDOTAClientMsg_UpdateQuickBuyItem) GetPurchasable() bool {
	if x != nil && x.Purchasable != nil {
		return *x.Purchasable
	}
	return Default_CDOTAClientMsg_UpdateQuickBuyItem_Purchasable
}

type CDOTAClientMsg_UpdateQuickBuy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*CDOTAClientMsg_UpdateQuickBuyItem `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (x *CDOTAClientMsg_UpdateQuickBuy) Reset() {
	*x = CDOTAClientMsg_UpdateQuickBuy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_clientmessages_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAClientMsg_UpdateQuickBuy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAClientMsg_UpdateQuickBuy) ProtoMessage() {}

func (x *CDOTAClientMsg_UpdateQuickBuy) ProtoReflect() protoreflect.Message {
	mi := &file_dota_clientmessages_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAClientMsg_UpdateQuickBuy.ProtoReflect.Descriptor instead.
func (*CDOTAClientMsg_UpdateQuickBuy) Descriptor() ([]byte, []int) {
	return file_dota_clientmessages_proto_rawDescGZIP(), []int{27}
}

func (x *CDOTAClientMsg_UpdateQuickBuy) GetItems() []*CDOTAClientMsg_UpdateQuickBuyItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type CDOTAClientMsg_RecordVote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChoiceIndex *int32 `protobuf:"varint,1,opt,name=choice_index,json=choiceIndex" json:"choice_index,omitempty"`
}

func (x *CDOTAClientMsg_RecordVote) Reset() {
	*x = CDOTAClientMsg_RecordVote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_clientmessages_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAClientMsg_RecordVote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAClientMsg_RecordVote) ProtoMessage() {}

func (x *CDOTAClientMsg_RecordVote) ProtoReflect() protoreflect.Message {
	mi := &file_dota_clientmessages_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAClientMsg_RecordVote.ProtoReflect.Descriptor instead.
func (*CDOTAClientMsg_RecordVote) Descriptor() ([]byte, []int) {
	return file_dota_clientmessages_proto_rawDescGZIP(), []int{28}
}

func (x *CDOTAClientMsg_RecordVote) GetChoiceIndex() int32 {
	if x != nil && x.ChoiceIndex != nil {
		return *x.ChoiceIndex
	}
	return 0
}

type CDOTAClientMsg_WillPurchaseAlert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemAbilityId      *int32  `protobuf:"varint,1,opt,name=item_ability_id,json=itemAbilityId" json:"item_ability_id,omitempty"`
	GoldRemaining      *uint32 `protobuf:"varint,2,opt,name=gold_remaining,json=goldRemaining" json:"gold_remaining,omitempty"`
	SuggestionPlayerId *int32  `protobuf:"varint,3,opt,name=suggestion_player_id,json=suggestionPlayerId" json:"suggestion_player_id,omitempty"`
}

func (x *CDOTAClientMsg_WillPurchaseAlert) Reset() {
	*x = CDOTAClientMsg_WillPurchaseAlert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_clientmessages_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAClientMsg_WillPurchaseAlert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAClientMsg_WillPurchaseAlert) ProtoMessage() {}

func (x *CDOTAClientMsg_WillPurchaseAlert) ProtoReflect() protoreflect.Message {
	mi := &file_dota_clientmessages_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAClientMsg_WillPurchaseAlert.ProtoReflect.Descriptor instead.
func (*CDOTAClientMsg_WillPurchaseAlert) Descriptor() ([]byte, []int) {
	return file_dota_clientmessages_proto_rawDescGZIP(), []int{29}
}

func (x *CDOTAClientMsg_WillPurchaseAlert) GetItemAbilityId() int32 {
	if x != nil && x.ItemAbilityId != nil {
		return *x.ItemAbilityId
	}
	return 0
}

func (x *CDOTAClientMsg_WillPurchaseAlert) GetGoldRemaining() uint32 {
	if x != nil && x.GoldRemaining != nil {
		return *x.GoldRemaining
	}
	return 0
}

func (x *CDOTAClientMsg_WillPurchaseAlert) GetSuggestionPlayerId() int32 {
	if x != nil && x.SuggestionPlayerId != nil {
		return *x.SuggestionPlayerId
	}
	return 0
}

type CDOTAClientMsg_BuyBackStateAlert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CDOTAClientMsg_BuyBackStateAlert) Reset() {
	*x = CDOTAClientMsg_BuyBackStateAlert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_clientmessages_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAClientMsg_BuyBackStateAlert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAClientMsg_BuyBackStateAlert) ProtoMessage() {}

func (x *CDOTAClientMsg_BuyBackStateAlert) ProtoReflect() protoreflect.Message {
	mi := &file_dota_clientmessages_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAClientMsg_BuyBackStateAlert.ProtoReflect.Descriptor instead.
func (*CDOTAClientMsg_BuyBackStateAlert) Descriptor() ([]byte, []int) {
	return file_dota_clientmessages_proto_rawDescGZIP(), []int{30}
}

type CDOTAClientMsg_QuickBuyAlert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemAbilityId       *int32 `protobuf:"varint,1,opt,name=item_ability_id,json=itemAbilityId" json:"item_ability_id,omitempty"`
	GoldCost            *int32 `protobuf:"varint,2,opt,name=gold_cost,json=goldCost" json:"gold_cost,omitempty"`
	ItemCooldownSeconds *int32 `protobuf:"varint,3,opt,name=item_cooldown_seconds,json=itemCooldownSeconds" json:"item_cooldown_seconds,omitempty"`
	ShowBuyback         *bool  `protobuf:"varint,4,opt,name=show_buyback,json=showBuyback" json:"show_buyback,omitempty"`
}

func (x *CDOTAClientMsg_QuickBuyAlert) Reset() {
	*x = CDOTAClientMsg_QuickBuyAlert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_clientmessages_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAClientMsg_QuickBuyAlert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAClientMsg_QuickBuyAlert) ProtoMessage() {}

func (x *CDOTAClientMsg_QuickBuyAlert) ProtoReflect() protoreflect.Message {
	mi := &file_dota_clientmessages_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAClientMsg_QuickBuyAlert.ProtoReflect.Descriptor instead.
func (*CDOTAClientMsg_QuickBuyAlert) Descriptor() ([]byte, []int) {
	return file_dota_clientmessages_proto_rawDescGZIP(), []int{31}
}

func (x *CDOTAClientMsg_QuickBuyAlert) GetItemAbilityId() int32 {
	if x != nil && x.ItemAbilityId != nil {
		return *x.ItemAbilityId
	}
	return 0
}

func (x *CDOTAClientMsg_QuickBuyAlert) GetGoldCost() int32 {
	if x != nil && x.GoldCost != nil {
		return *x.GoldCost
	}
	return 0
}

func (x *CDOTAClientMsg_QuickBuyAlert) GetItemCooldownSeconds() int32 {
	if x != nil && x.ItemCooldownSeconds != nil {
		return *x.ItemCooldownSeconds
	}
	return 0
}

func (x *CDOTAClientMsg_QuickBuyAlert) GetShowBuyback() bool {
	if x != nil && x.ShowBuyback != nil {
		return *x.ShowBuyback
	}
	return false
}

type CDOTAClientMsg_PlayerShowCase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Showcase *bool `protobuf:"varint,1,opt,name=showcase" json:"showcase,omitempty"`
}

func (x *CDOTAClientMsg_PlayerShowCase) Reset() {
	*x = CDOTAClientMsg_PlayerShowCase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_clientmessages_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAClientMsg_PlayerShowCase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAClientMsg_PlayerShowCase) ProtoMessage() {}

func (x *CDOTAClientMsg_PlayerShowCase) ProtoReflect() protoreflect.Message {
	mi := &file_dota_clientmessages_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAClientMsg_PlayerShowCase.ProtoReflect.Descriptor instead.
func (*CDOTAClientMsg_PlayerShowCase) Descriptor() ([]byte, []int) {
	return file_dota_clientmessages_proto_rawDescGZIP(), []int{32}
}

func (x *CDOTAClientMsg_PlayerShowCase) GetShowcase() bool {
	if x != nil && x.Showcase != nil {
		return *x.Showcase
	}
	return false
}

type CDOTAClientMsg_CameraZoomAmount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ZoomAmount *float32 `protobuf:"fixed32,1,opt,name=zoom_amount,json=zoomAmount" json:"zoom_amount,omitempty"`
}

func (x *CDOTAClientMsg_CameraZoomAmount) Reset() {
	*x = CDOTAClientMsg_CameraZoomAmount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_clientmessages_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAClientMsg_CameraZoomAmount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAClientMsg_CameraZoomAmount) ProtoMessage() {}

func (x *CDOTAClientMsg_CameraZoomAmount) ProtoReflect() protoreflect.Message {
	mi := &file_dota_clientmessages_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAClientMsg_CameraZoomAmount.ProtoReflect.Descriptor instead.
func (*CDOTAClientMsg_CameraZoomAmount) Descriptor() ([]byte, []int) {
	return file_dota_clientmessages_proto_rawDescGZIP(), []int{33}
}

func (x *CDOTAClientMsg_CameraZoomAmount) GetZoomAmount() float32 {
	if x != nil && x.ZoomAmount != nil {
		return *x.ZoomAmount
	}
	return 0
}

type CDOTAClientMsg_BroadcasterUsingCameraman struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cameraman *bool `protobuf:"varint,1,opt,name=cameraman" json:"cameraman,omitempty"`
}

func (x *CDOTAClientMsg_BroadcasterUsingCameraman) Reset() {
	*x = CDOTAClientMsg_BroadcasterUsingCameraman{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_clientmessages_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAClientMsg_BroadcasterUsingCameraman) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAClientMsg_BroadcasterUsingCameraman) ProtoMessage() {}

func (x *CDOTAClientMsg_BroadcasterUsingCameraman) ProtoReflect() protoreflect.Message {
	mi := &file_dota_clientmessages_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAClientMsg_BroadcasterUsingCameraman.ProtoReflect.Descriptor instead.
func (*CDOTAClientMsg_BroadcasterUsingCameraman) Descriptor() ([]byte, []int) {
	return file_dota_clientmessages_proto_rawDescGZIP(), []int{34}
}

func (x *CDOTAClientMsg_BroadcasterUsingCameraman) GetCameraman() bool {
	if x != nil && x.Cameraman != nil {
		return *x.Cameraman
	}
	return false
}

type CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled *bool `protobuf:"varint,1,opt,name=enabled" json:"enabled,omitempty"`
}

func (x *CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator) Reset() {
	*x = CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_clientmessages_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator) ProtoMessage() {}

func (x *CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator) ProtoReflect() protoreflect.Message {
	mi := &file_dota_clientmessages_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator.ProtoReflect.Descriptor instead.
func (*CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator) Descriptor() ([]byte, []int) {
	return file_dota_clientmessages_proto_rawDescGZIP(), []int{35}
}

func (x *CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

type CAdditionalEquipSlotClientMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClassId  *uint32 `protobuf:"varint,1,opt,name=class_id,json=classId" json:"class_id,omitempty"`
	SlotId   *uint32 `protobuf:"varint,2,opt,name=slot_id,json=slotId" json:"slot_id,omitempty"`
	DefIndex *uint32 `protobuf:"varint,3,opt,name=def_index,json=defIndex" json:"def_index,omitempty"`
}

func (x *CAdditionalEquipSlotClientMsg) Reset() {
	*x = CAdditionalEquipSlotClientMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_clientmessages_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAdditionalEquipSlotClientMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAdditionalEquipSlotClientMsg) ProtoMessage() {}

func (x *CAdditionalEquipSlotClientMsg) ProtoReflect() protoreflect.Message {
	mi := &file_dota_clientmessages_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAdditionalEquipSlotClientMsg.ProtoReflect.Descriptor instead.
func (*CAdditionalEquipSlotClientMsg) Descriptor() ([]byte, []int) {
	return file_dota_clientmessages_proto_rawDescGZIP(), []int{36}
}

func (x *CAdditionalEquipSlotClientMsg) GetClassId() uint32 {
	if x != nil && x.ClassId != nil {
		return *x.ClassId
	}
	return 0
}

func (x *CAdditionalEquipSlotClientMsg) GetSlotId() uint32 {
	if x != nil && x.SlotId != nil {
		return *x.SlotId
	}
	return 0
}

func (x *CAdditionalEquipSlotClientMsg) GetDefIndex() uint32 {
	if x != nil && x.DefIndex != nil {
		return *x.DefIndex
	}
	return 0
}

type CDOTAClientMsg_FreeInventory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Equips []*CAdditionalEquipSlotClientMsg `protobuf:"bytes,1,rep,name=equips" json:"equips,omitempty"`
}

func (x *CDOTAClientMsg_FreeInventory) Reset() {
	*x = CDOTAClientMsg_FreeInventory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_clientmessages_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAClientMsg_FreeInventory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAClientMsg_FreeInventory) ProtoMessage() {}

func (x *CDOTAClientMsg_FreeInventory) ProtoReflect() protoreflect.Message {
	mi := &file_dota_clientmessages_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAClientMsg_FreeInventory.ProtoReflect.Descriptor instead.
func (*CDOTAClientMsg_FreeInventory) Descriptor() ([]byte, []int) {
	return file_dota_clientmessages_proto_rawDescGZIP(), []int{37}
}

func (x *CDOTAClientMsg_FreeInventory) GetEquips() []*CAdditionalEquipSlotClientMsg {
	if x != nil {
		return x.Equips
	}
	return nil
}

type CDOTAClientMsg_FillEmptySlotsWithBots struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fillwithbots *bool `protobuf:"varint,1,opt,name=fillwithbots" json:"fillwithbots,omitempty"`
}

func (x *CDOTAClientMsg_FillEmptySlotsWithBots) Reset() {
	*x = CDOTAClientMsg_FillEmptySlotsWithBots{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_clientmessages_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAClientMsg_FillEmptySlotsWithBots) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAClientMsg_FillEmptySlotsWithBots) ProtoMessage() {}

func (x *CDOTAClientMsg_FillEmptySlotsWithBots) ProtoReflect() protoreflect.Message {
	mi := &file_dota_clientmessages_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAClientMsg_FillEmptySlotsWithBots.ProtoReflect.Descriptor instead.
func (*CDOTAClientMsg_FillEmptySlotsWithBots) Descriptor() ([]byte, []int) {
	return file_dota_clientmessages_proto_rawDescGZIP(), []int{38}
}

func (x *CDOTAClientMsg_FillEmptySlotsWithBots) GetFillwithbots() bool {
	if x != nil && x.Fillwithbots != nil {
		return *x.Fillwithbots
	}
	return false
}

type CDOTAClientMsg_HeroStatueLike struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerPlayerId *uint32 `protobuf:"varint,1,opt,name=owner_player_id,json=ownerPlayerId" json:"owner_player_id,omitempty"`
}

func (x *CDOTAClientMsg_HeroStatueLike) Reset() {
	*x = CDOTAClientMsg_HeroStatueLike{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_clientmessages_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAClientMsg_HeroStatueLike) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAClientMsg_HeroStatueLike) ProtoMessage() {}

func (x *CDOTAClientMsg_HeroStatueLike) ProtoReflect() protoreflect.Message {
	mi := &file_dota_clientmessages_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAClientMsg_HeroStatueLike.ProtoReflect.Descriptor instead.
func (*CDOTAClientMsg_HeroStatueLike) Descriptor() ([]byte, []int) {
	return file_dota_clientmessages_proto_rawDescGZIP(), []int{39}
}

func (x *CDOTAClientMsg_HeroStatueLike) GetOwnerPlayerId() uint32 {
	if x != nil && x.OwnerPlayerId != nil {
		return *x.OwnerPlayerId
	}
	return 0
}

type CDOTAClientMsg_EventCNY2015Cmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
}

func (x *CDOTAClientMsg_EventCNY2015Cmd) Reset() {
	*x = CDOTAClientMsg_EventCNY2015Cmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_clientmessages_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAClientMsg_EventCNY2015Cmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAClientMsg_EventCNY2015Cmd) ProtoMessage() {}

func (x *CDOTAClientMsg_EventCNY2015Cmd) ProtoReflect() protoreflect.Message {
	mi := &file_dota_clientmessages_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAClientMsg_EventCNY2015Cmd.ProtoReflect.Descriptor instead.
func (*CDOTAClientMsg_EventCNY2015Cmd) Descriptor() ([]byte, []int) {
	return file_dota_clientmessages_proto_rawDescGZIP(), []int{40}
}

func (x *CDOTAClientMsg_EventCNY2015Cmd) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type CDOTAClientMsg_DemoHero struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeroId               *int32   `protobuf:"varint,1,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	HeroIdToSpawn        *int32   `protobuf:"varint,2,opt,name=hero_id_to_spawn,json=heroIdToSpawn" json:"hero_id_to_spawn,omitempty"`
	ItemDefs             []uint32 `protobuf:"varint,3,rep,name=item_defs,json=itemDefs" json:"item_defs,omitempty"`
	ItemIds              []uint64 `protobuf:"varint,4,rep,name=item_ids,json=itemIds" json:"item_ids,omitempty"`
	StyleIndex           *uint32  `protobuf:"varint,5,opt,name=style_index,json=styleIndex" json:"style_index,omitempty"`
	KeepExistingDemohero *bool    `protobuf:"varint,6,opt,name=keep_existing_demohero,json=keepExistingDemohero" json:"keep_existing_demohero,omitempty"`
}

func (x *CDOTAClientMsg_DemoHero) Reset() {
	*x = CDOTAClientMsg_DemoHero{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_clientmessages_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAClientMsg_DemoHero) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAClientMsg_DemoHero) ProtoMessage() {}

func (x *CDOTAClientMsg_DemoHero) ProtoReflect() protoreflect.Message {
	mi := &file_dota_clientmessages_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAClientMsg_DemoHero.ProtoReflect.Descriptor instead.
func (*CDOTAClientMsg_DemoHero) Descriptor() ([]byte, []int) {
	return file_dota_clientmessages_proto_rawDescGZIP(), []int{41}
}

func (x *CDOTAClientMsg_DemoHero) GetHeroId() int32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CDOTAClientMsg_DemoHero) GetHeroIdToSpawn() int32 {
	if x != nil && x.HeroIdToSpawn != nil {
		return *x.HeroIdToSpawn
	}
	return 0
}

func (x *CDOTAClientMsg_DemoHero) GetItemDefs() []uint32 {
	if x != nil {
		return x.ItemDefs
	}
	return nil
}

func (x *CDOTAClientMsg_DemoHero) GetItemIds() []uint64 {
	if x != nil {
		return x.ItemIds
	}
	return nil
}

func (x *CDOTAClientMsg_DemoHero) GetStyleIndex() uint32 {
	if x != nil && x.StyleIndex != nil {
		return *x.StyleIndex
	}
	return 0
}

func (x *CDOTAClientMsg_DemoHero) GetKeepExistingDemohero() bool {
	if x != nil && x.KeepExistingDemohero != nil {
		return *x.KeepExistingDemohero
	}
	return false
}

type CDOTAClientMsg_ChallengeSelect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId    *uint32 `protobuf:"varint,1,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	SlotId     *uint32 `protobuf:"varint,2,opt,name=slot_id,json=slotId" json:"slot_id,omitempty"`
	SequenceId *uint32 `protobuf:"varint,3,opt,name=sequence_id,json=sequenceId" json:"sequence_id,omitempty"`
}

func (x *CDOTAClientMsg_ChallengeSelect) Reset() {
	*x = CDOTAClientMsg_ChallengeSelect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_clientmessages_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAClientMsg_ChallengeSelect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAClientMsg_ChallengeSelect) ProtoMessage() {}

func (x *CDOTAClientMsg_ChallengeSelect) ProtoReflect() protoreflect.Message {
	mi := &file_dota_clientmessages_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAClientMsg_ChallengeSelect.ProtoReflect.Descriptor instead.
func (*CDOTAClientMsg_ChallengeSelect) Descriptor() ([]byte, []int) {
	return file_dota_clientmessages_proto_rawDescGZIP(), []int{42}
}

func (x *CDOTAClientMsg_ChallengeSelect) GetEventId() uint32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

func (x *CDOTAClientMsg_ChallengeSelect) GetSlotId() uint32 {
	if x != nil && x.SlotId != nil {
		return *x.SlotId
	}
	return 0
}

func (x *CDOTAClientMsg_ChallengeSelect) GetSequenceId() uint32 {
	if x != nil && x.SequenceId != nil {
		return *x.SequenceId
	}
	return 0
}

type CDOTAClientMsg_ChallengeReroll struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId    *EEvent `protobuf:"varint,1,opt,name=event_id,json=eventId,enum=dota.EEvent,def=0" json:"event_id,omitempty"`
	SlotId     *uint32 `protobuf:"varint,2,opt,name=slot_id,json=slotId" json:"slot_id,omitempty"`
	SequenceId *uint32 `protobuf:"varint,3,opt,name=sequence_id,json=sequenceId" json:"sequence_id,omitempty"`
	HeroId     *uint32 `protobuf:"varint,4,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
}

// Default values for CDOTAClientMsg_ChallengeReroll fields.
const (
	Default_CDOTAClientMsg_ChallengeReroll_EventId = EEvent_EVENT_ID_NONE
)

func (x *CDOTAClientMsg_ChallengeReroll) Reset() {
	*x = CDOTAClientMsg_ChallengeReroll{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_clientmessages_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAClientMsg_ChallengeReroll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAClientMsg_ChallengeReroll) ProtoMessage() {}

func (x *CDOTAClientMsg_ChallengeReroll) ProtoReflect() protoreflect.Message {
	mi := &file_dota_clientmessages_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAClientMsg_ChallengeReroll.ProtoReflect.Descriptor instead.
func (*CDOTAClientMsg_ChallengeReroll) Descriptor() ([]byte, []int) {
	return file_dota_clientmessages_proto_rawDescGZIP(), []int{43}
}

func (x *CDOTAClientMsg_ChallengeReroll) GetEventId() EEvent {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return Default_CDOTAClientMsg_ChallengeReroll_EventId
}

func (x *CDOTAClientMsg_ChallengeReroll) GetSlotId() uint32 {
	if x != nil && x.SlotId != nil {
		return *x.SlotId
	}
	return 0
}

func (x *CDOTAClientMsg_ChallengeReroll) GetSequenceId() uint32 {
	if x != nil && x.SequenceId != nil {
		return *x.SequenceId
	}
	return 0
}

func (x *CDOTAClientMsg_ChallengeReroll) GetHeroId() uint32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

type CDOTAClientMsg_CoinWager struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WagerAmount *uint32 `protobuf:"varint,1,opt,name=wager_amount,json=wagerAmount" json:"wager_amount,omitempty"`
}

func (x *CDOTAClientMsg_CoinWager) Reset() {
	*x = CDOTAClientMsg_CoinWager{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_clientmessages_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAClientMsg_CoinWager) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAClientMsg_CoinWager) ProtoMessage() {}

func (x *CDOTAClientMsg_CoinWager) ProtoReflect() protoreflect.Message {
	mi := &file_dota_clientmessages_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAClientMsg_CoinWager.ProtoReflect.Descriptor instead.
func (*CDOTAClientMsg_CoinWager) Descriptor() ([]byte, []int) {
	return file_dota_clientmessages_proto_rawDescGZIP(), []int{44}
}

func (x *CDOTAClientMsg_CoinWager) GetWagerAmount() uint32 {
	if x != nil && x.WagerAmount != nil {
		return *x.WagerAmount
	}
	return 0
}

type CDOTAClientMsg_CoinWagerToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WagerTokenItemId *uint64 `protobuf:"varint,1,opt,name=wager_token_item_id,json=wagerTokenItemId" json:"wager_token_item_id,omitempty"`
}

func (x *CDOTAClientMsg_CoinWagerToken) Reset() {
	*x = CDOTAClientMsg_CoinWagerToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_clientmessages_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAClientMsg_CoinWagerToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAClientMsg_CoinWagerToken) ProtoMessage() {}

func (x *CDOTAClientMsg_CoinWagerToken) ProtoReflect() protoreflect.Message {
	mi := &file_dota_clientmessages_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAClientMsg_CoinWagerToken.ProtoReflect.Descriptor instead.
func (*CDOTAClientMsg_CoinWagerToken) Descriptor() ([]byte, []int) {
	return file_dota_clientmessages_proto_rawDescGZIP(), []int{45}
}

func (x *CDOTAClientMsg_CoinWagerToken) GetWagerTokenItemId() uint64 {
	if x != nil && x.WagerTokenItemId != nil {
		return *x.WagerTokenItemId
	}
	return 0
}

type CDOTAClientMsg_RankWager struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnnounceWager *bool `protobuf:"varint,1,opt,name=announce_wager,json=announceWager" json:"announce_wager,omitempty"`
}

func (x *CDOTAClientMsg_RankWager) Reset() {
	*x = CDOTAClientMsg_RankWager{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_clientmessages_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAClientMsg_RankWager) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAClientMsg_RankWager) ProtoMessage() {}

func (x *CDOTAClientMsg_RankWager) ProtoReflect() protoreflect.Message {
	mi := &file_dota_clientmessages_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAClientMsg_RankWager.ProtoReflect.Descriptor instead.
func (*CDOTAClientMsg_RankWager) Descriptor() ([]byte, []int) {
	return file_dota_clientmessages_proto_rawDescGZIP(), []int{46}
}

func (x *CDOTAClientMsg_RankWager) GetAnnounceWager() bool {
	if x != nil && x.AnnounceWager != nil {
		return *x.AnnounceWager
	}
	return false
}

type CDOTAClientMsg_PlayerBounty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId *uint32 `protobuf:"varint,1,opt,name=player_id,json=playerId" json:"player_id,omitempty"`
}

func (x *CDOTAClientMsg_PlayerBounty) Reset() {
	*x = CDOTAClientMsg_PlayerBounty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_clientmessages_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAClientMsg_PlayerBounty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAClientMsg_PlayerBounty) ProtoMessage() {}

func (x *CDOTAClientMsg_PlayerBounty) ProtoReflect() protoreflect.Message {
	mi := &file_dota_clientmessages_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAClientMsg_PlayerBounty.ProtoReflect.Descriptor instead.
func (*CDOTAClientMsg_PlayerBounty) Descriptor() ([]byte, []int) {
	return file_dota_clientmessages_proto_rawDescGZIP(), []int{47}
}

func (x *CDOTAClientMsg_PlayerBounty) GetPlayerId() uint32 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

type CDOTAClientMsg_EventPointsTip struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecipientPlayerId *uint32 `protobuf:"varint,1,opt,name=recipient_player_id,json=recipientPlayerId" json:"recipient_player_id,omitempty"`
}

func (x *CDOTAClientMsg_EventPointsTip) Reset() {
	*x = CDOTAClientMsg_EventPointsTip{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_clientmessages_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAClientMsg_EventPointsTip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAClientMsg_EventPointsTip) ProtoMessage() {}

func (x *CDOTAClientMsg_EventPointsTip) ProtoReflect() protoreflect.Message {
	mi := &file_dota_clientmessages_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAClientMsg_EventPointsTip.ProtoReflect.Descriptor instead.
func (*CDOTAClientMsg_EventPointsTip) Descriptor() ([]byte, []int) {
	return file_dota_clientmessages_proto_rawDescGZIP(), []int{48}
}

func (x *CDOTAClientMsg_EventPointsTip) GetRecipientPlayerId() uint32 {
	if x != nil && x.RecipientPlayerId != nil {
		return *x.RecipientPlayerId
	}
	return 0
}

type CDOTAClientMsg_ExecuteOrders struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Orders []*CDOTAMsg_UnitOrder `protobuf:"bytes,1,rep,name=orders" json:"orders,omitempty"`
}

func (x *CDOTAClientMsg_ExecuteOrders) Reset() {
	*x = CDOTAClientMsg_ExecuteOrders{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_clientmessages_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAClientMsg_ExecuteOrders) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAClientMsg_ExecuteOrders) ProtoMessage() {}

func (x *CDOTAClientMsg_ExecuteOrders) ProtoReflect() protoreflect.Message {
	mi := &file_dota_clientmessages_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAClientMsg_ExecuteOrders.ProtoReflect.Descriptor instead.
func (*CDOTAClientMsg_ExecuteOrders) Descriptor() ([]byte, []int) {
	return file_dota_clientmessages_proto_rawDescGZIP(), []int{49}
}

func (x *CDOTAClientMsg_ExecuteOrders) GetOrders() []*CDOTAMsg_UnitOrder {
	if x != nil {
		return x.Orders
	}
	return nil
}

type CDOTAClientMsg_XPAlert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetEntindex *uint32 `protobuf:"varint,1,opt,name=target_entindex,json=targetEntindex" json:"target_entindex,omitempty"`
	DamageTaken    *uint32 `protobuf:"varint,2,opt,name=damage_taken,json=damageTaken" json:"damage_taken,omitempty"`
}

func (x *CDOTAClientMsg_XPAlert) Reset() {
	*x = CDOTAClientMsg_XPAlert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_clientmessages_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAClientMsg_XPAlert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAClientMsg_XPAlert) ProtoMessage() {}

func (x *CDOTAClientMsg_XPAlert) ProtoReflect() protoreflect.Message {
	mi := &file_dota_clientmessages_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAClientMsg_XPAlert.ProtoReflect.Descriptor instead.
func (*CDOTAClientMsg_XPAlert) Descriptor() ([]byte, []int) {
	return file_dota_clientmessages_proto_rawDescGZIP(), []int{50}
}

func (x *CDOTAClientMsg_XPAlert) GetTargetEntindex() uint32 {
	if x != nil && x.TargetEntindex != nil {
		return *x.TargetEntindex
	}
	return 0
}

func (x *CDOTAClientMsg_XPAlert) GetDamageTaken() uint32 {
	if x != nil && x.DamageTaken != nil {
		return *x.DamageTaken
	}
	return 0
}

type CDOTAClientMsg_TalentTreeAlert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetEntindex *uint32 `protobuf:"varint,1,opt,name=target_entindex,json=targetEntindex" json:"target_entindex,omitempty"`
	AbilityId      *int32  `protobuf:"varint,2,opt,name=ability_id,json=abilityId" json:"ability_id,omitempty"`
	Slot           *int32  `protobuf:"varint,3,opt,name=slot" json:"slot,omitempty"`
	Learned        *bool   `protobuf:"varint,4,opt,name=learned" json:"learned,omitempty"`
}

func (x *CDOTAClientMsg_TalentTreeAlert) Reset() {
	*x = CDOTAClientMsg_TalentTreeAlert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_clientmessages_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAClientMsg_TalentTreeAlert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAClientMsg_TalentTreeAlert) ProtoMessage() {}

func (x *CDOTAClientMsg_TalentTreeAlert) ProtoReflect() protoreflect.Message {
	mi := &file_dota_clientmessages_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAClientMsg_TalentTreeAlert.ProtoReflect.Descriptor instead.
func (*CDOTAClientMsg_TalentTreeAlert) Descriptor() ([]byte, []int) {
	return file_dota_clientmessages_proto_rawDescGZIP(), []int{51}
}

func (x *CDOTAClientMsg_TalentTreeAlert) GetTargetEntindex() uint32 {
	if x != nil && x.TargetEntindex != nil {
		return *x.TargetEntindex
	}
	return 0
}

func (x *CDOTAClientMsg_TalentTreeAlert) GetAbilityId() int32 {
	if x != nil && x.AbilityId != nil {
		return *x.AbilityId
	}
	return 0
}

func (x *CDOTAClientMsg_TalentTreeAlert) GetSlot() int32 {
	if x != nil && x.Slot != nil {
		return *x.Slot
	}
	return 0
}

func (x *CDOTAClientMsg_TalentTreeAlert) GetLearned() bool {
	if x != nil && x.Learned != nil {
		return *x.Learned
	}
	return false
}

type CDOTAClientMsg_KillcamDamageTaken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetEntindex *uint32 `protobuf:"varint,1,opt,name=target_entindex,json=targetEntindex" json:"target_entindex,omitempty"`
	DamageTaken    *uint32 `protobuf:"varint,2,opt,name=damage_taken,json=damageTaken" json:"damage_taken,omitempty"`
	ItemType       *uint32 `protobuf:"varint,3,opt,name=item_type,json=itemType" json:"item_type,omitempty"`
	ItemAbilityId  *uint32 `protobuf:"varint,4,opt,name=item_ability_id,json=itemAbilityId" json:"item_ability_id,omitempty"`
	HeroName       *string `protobuf:"bytes,5,opt,name=hero_name,json=heroName" json:"hero_name,omitempty"`
	DamageColor    *string `protobuf:"bytes,6,opt,name=damage_color,json=damageColor" json:"damage_color,omitempty"`
}

func (x *CDOTAClientMsg_KillcamDamageTaken) Reset() {
	*x = CDOTAClientMsg_KillcamDamageTaken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_clientmessages_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAClientMsg_KillcamDamageTaken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAClientMsg_KillcamDamageTaken) ProtoMessage() {}

func (x *CDOTAClientMsg_KillcamDamageTaken) ProtoReflect() protoreflect.Message {
	mi := &file_dota_clientmessages_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAClientMsg_KillcamDamageTaken.ProtoReflect.Descriptor instead.
func (*CDOTAClientMsg_KillcamDamageTaken) Descriptor() ([]byte, []int) {
	return file_dota_clientmessages_proto_rawDescGZIP(), []int{52}
}

func (x *CDOTAClientMsg_KillcamDamageTaken) GetTargetEntindex() uint32 {
	if x != nil && x.TargetEntindex != nil {
		return *x.TargetEntindex
	}
	return 0
}

func (x *CDOTAClientMsg_KillcamDamageTaken) GetDamageTaken() uint32 {
	if x != nil && x.DamageTaken != nil {
		return *x.DamageTaken
	}
	return 0
}

func (x *CDOTAClientMsg_KillcamDamageTaken) GetItemType() uint32 {
	if x != nil && x.ItemType != nil {
		return *x.ItemType
	}
	return 0
}

func (x *CDOTAClientMsg_KillcamDamageTaken) GetItemAbilityId() uint32 {
	if x != nil && x.ItemAbilityId != nil {
		return *x.ItemAbilityId
	}
	return 0
}

func (x *CDOTAClientMsg_KillcamDamageTaken) GetHeroName() string {
	if x != nil && x.HeroName != nil {
		return *x.HeroName
	}
	return ""
}

func (x *CDOTAClientMsg_KillcamDamageTaken) GetDamageColor() string {
	if x != nil && x.DamageColor != nil {
		return *x.DamageColor
	}
	return ""
}

type CDOTAClientMsg_MatchMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId  *uint64 `protobuf:"varint,1,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	Metadata []byte  `protobuf:"bytes,2,opt,name=metadata" json:"metadata,omitempty"`
}

func (x *CDOTAClientMsg_MatchMetadata) Reset() {
	*x = CDOTAClientMsg_MatchMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_clientmessages_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAClientMsg_MatchMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAClientMsg_MatchMetadata) ProtoMessage() {}

func (x *CDOTAClientMsg_MatchMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_dota_clientmessages_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAClientMsg_MatchMetadata.ProtoReflect.Descriptor instead.
func (*CDOTAClientMsg_MatchMetadata) Descriptor() ([]byte, []int) {
	return file_dota_clientmessages_proto_rawDescGZIP(), []int{53}
}

func (x *CDOTAClientMsg_MatchMetadata) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CDOTAClientMsg_MatchMetadata) GetMetadata() []byte {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type CDOTAClientMsg_KillMyHero struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CDOTAClientMsg_KillMyHero) Reset() {
	*x = CDOTAClientMsg_KillMyHero{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_clientmessages_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAClientMsg_KillMyHero) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAClientMsg_KillMyHero) ProtoMessage() {}

func (x *CDOTAClientMsg_KillMyHero) ProtoReflect() protoreflect.Message {
	mi := &file_dota_clientmessages_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAClientMsg_KillMyHero.ProtoReflect.Descriptor instead.
func (*CDOTAClientMsg_KillMyHero) Descriptor() ([]byte, []int) {
	return file_dota_clientmessages_proto_rawDescGZIP(), []int{54}
}

type CDOTAClientMsg_QuestStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestId       *uint32  `protobuf:"varint,1,opt,name=quest_id,json=questId" json:"quest_id,omitempty"`
	ChallengeId   *uint32  `protobuf:"varint,2,opt,name=challenge_id,json=challengeId" json:"challenge_id,omitempty"`
	Progress      *uint32  `protobuf:"varint,3,opt,name=progress" json:"progress,omitempty"`
	Goal          *uint32  `protobuf:"varint,4,opt,name=goal" json:"goal,omitempty"`
	Query         *uint32  `protobuf:"varint,5,opt,name=query" json:"query,omitempty"`
	FailGametime  *float32 `protobuf:"fixed32,6,opt,name=fail_gametime,json=failGametime" json:"fail_gametime,omitempty"`
	ItemAbilityId *uint32  `protobuf:"varint,7,opt,name=item_ability_id,json=itemAbilityId" json:"item_ability_id,omitempty"`
}

func (x *CDOTAClientMsg_QuestStatus) Reset() {
	*x = CDOTAClientMsg_QuestStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_clientmessages_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAClientMsg_QuestStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAClientMsg_QuestStatus) ProtoMessage() {}

func (x *CDOTAClientMsg_QuestStatus) ProtoReflect() protoreflect.Message {
	mi := &file_dota_clientmessages_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAClientMsg_QuestStatus.ProtoReflect.Descriptor instead.
func (*CDOTAClientMsg_QuestStatus) Descriptor() ([]byte, []int) {
	return file_dota_clientmessages_proto_rawDescGZIP(), []int{55}
}

func (x *CDOTAClientMsg_QuestStatus) GetQuestId() uint32 {
	if x != nil && x.QuestId != nil {
		return *x.QuestId
	}
	return 0
}

func (x *CDOTAClientMsg_QuestStatus) GetChallengeId() uint32 {
	if x != nil && x.ChallengeId != nil {
		return *x.ChallengeId
	}
	return 0
}

func (x *CDOTAClientMsg_QuestStatus) GetProgress() uint32 {
	if x != nil && x.Progress != nil {
		return *x.Progress
	}
	return 0
}

func (x *CDOTAClientMsg_QuestStatus) GetGoal() uint32 {
	if x != nil && x.Goal != nil {
		return *x.Goal
	}
	return 0
}

func (x *CDOTAClientMsg_QuestStatus) GetQuery() uint32 {
	if x != nil && x.Query != nil {
		return *x.Query
	}
	return 0
}

func (x *CDOTAClientMsg_QuestStatus) GetFailGametime() float32 {
	if x != nil && x.FailGametime != nil {
		return *x.FailGametime
	}
	return 0
}

func (x *CDOTAClientMsg_QuestStatus) GetItemAbilityId() uint32 {
	if x != nil && x.ItemAbilityId != nil {
		return *x.ItemAbilityId
	}
	return 0
}

type CDOTAClientMsg_ToggleAutoattack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode        *int32 `protobuf:"varint,1,opt,name=mode" json:"mode,omitempty"`
	ShowMessage *bool  `protobuf:"varint,2,opt,name=show_message,json=showMessage" json:"show_message,omitempty"`
}

func (x *CDOTAClientMsg_ToggleAutoattack) Reset() {
	*x = CDOTAClientMsg_ToggleAutoattack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_clientmessages_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAClientMsg_ToggleAutoattack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAClientMsg_ToggleAutoattack) ProtoMessage() {}

func (x *CDOTAClientMsg_ToggleAutoattack) ProtoReflect() protoreflect.Message {
	mi := &file_dota_clientmessages_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAClientMsg_ToggleAutoattack.ProtoReflect.Descriptor instead.
func (*CDOTAClientMsg_ToggleAutoattack) Descriptor() ([]byte, []int) {
	return file_dota_clientmessages_proto_rawDescGZIP(), []int{56}
}

func (x *CDOTAClientMsg_ToggleAutoattack) GetMode() int32 {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return 0
}

func (x *CDOTAClientMsg_ToggleAutoattack) GetShowMessage() bool {
	if x != nil && x.ShowMessage != nil {
		return *x.ShowMessage
	}
	return false
}

type CDOTAClientMsg_SpecialAbility struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AbilityIndex   *uint32 `protobuf:"varint,1,opt,name=ability_index,json=abilityIndex" json:"ability_index,omitempty"`
	TargetEntindex *uint32 `protobuf:"varint,2,opt,name=target_entindex,json=targetEntindex" json:"target_entindex,omitempty"`
}

func (x *CDOTAClientMsg_SpecialAbility) Reset() {
	*x = CDOTAClientMsg_SpecialAbility{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_clientmessages_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAClientMsg_SpecialAbility) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAClientMsg_SpecialAbility) ProtoMessage() {}

func (x *CDOTAClientMsg_SpecialAbility) ProtoReflect() protoreflect.Message {
	mi := &file_dota_clientmessages_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAClientMsg_SpecialAbility.ProtoReflect.Descriptor instead.
func (*CDOTAClientMsg_SpecialAbility) Descriptor() ([]byte, []int) {
	return file_dota_clientmessages_proto_rawDescGZIP(), []int{57}
}

func (x *CDOTAClientMsg_SpecialAbility) GetAbilityIndex() uint32 {
	if x != nil && x.AbilityIndex != nil {
		return *x.AbilityIndex
	}
	return 0
}

func (x *CDOTAClientMsg_SpecialAbility) GetTargetEntindex() uint32 {
	if x != nil && x.TargetEntindex != nil {
		return *x.TargetEntindex
	}
	return 0
}

type CDOTAClientMsg_SetEnemyStartingPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnemyPlayerId         *uint32 `protobuf:"varint,1,opt,name=enemy_player_id,json=enemyPlayerId" json:"enemy_player_id,omitempty"`
	EnemyStartingPosition *uint32 `protobuf:"varint,2,opt,name=enemy_starting_position,json=enemyStartingPosition" json:"enemy_starting_position,omitempty"`
}

func (x *CDOTAClientMsg_SetEnemyStartingPosition) Reset() {
	*x = CDOTAClientMsg_SetEnemyStartingPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_clientmessages_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAClientMsg_SetEnemyStartingPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAClientMsg_SetEnemyStartingPosition) ProtoMessage() {}

func (x *CDOTAClientMsg_SetEnemyStartingPosition) ProtoReflect() protoreflect.Message {
	mi := &file_dota_clientmessages_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAClientMsg_SetEnemyStartingPosition.ProtoReflect.Descriptor instead.
func (*CDOTAClientMsg_SetEnemyStartingPosition) Descriptor() ([]byte, []int) {
	return file_dota_clientmessages_proto_rawDescGZIP(), []int{58}
}

func (x *CDOTAClientMsg_SetEnemyStartingPosition) GetEnemyPlayerId() uint32 {
	if x != nil && x.EnemyPlayerId != nil {
		return *x.EnemyPlayerId
	}
	return 0
}

func (x *CDOTAClientMsg_SetEnemyStartingPosition) GetEnemyStartingPosition() uint32 {
	if x != nil && x.EnemyStartingPosition != nil {
		return *x.EnemyStartingPosition
	}
	return 0
}

type CDOTAClientMsg_SetDesiredWardPlacement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WardIndex *uint32  `protobuf:"varint,1,opt,name=ward_index,json=wardIndex" json:"ward_index,omitempty"`
	WardX     *float32 `protobuf:"fixed32,2,opt,name=ward_x,json=wardX" json:"ward_x,omitempty"`
	WardY     *float32 `protobuf:"fixed32,3,opt,name=ward_y,json=wardY" json:"ward_y,omitempty"`
}

func (x *CDOTAClientMsg_SetDesiredWardPlacement) Reset() {
	*x = CDOTAClientMsg_SetDesiredWardPlacement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_clientmessages_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAClientMsg_SetDesiredWardPlacement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAClientMsg_SetDesiredWardPlacement) ProtoMessage() {}

func (x *CDOTAClientMsg_SetDesiredWardPlacement) ProtoReflect() protoreflect.Message {
	mi := &file_dota_clientmessages_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAClientMsg_SetDesiredWardPlacement.ProtoReflect.Descriptor instead.
func (*CDOTAClientMsg_SetDesiredWardPlacement) Descriptor() ([]byte, []int) {
	return file_dota_clientmessages_proto_rawDescGZIP(), []int{59}
}

func (x *CDOTAClientMsg_SetDesiredWardPlacement) GetWardIndex() uint32 {
	if x != nil && x.WardIndex != nil {
		return *x.WardIndex
	}
	return 0
}

func (x *CDOTAClientMsg_SetDesiredWardPlacement) GetWardX() float32 {
	if x != nil && x.WardX != nil {
		return *x.WardX
	}
	return 0
}

func (x *CDOTAClientMsg_SetDesiredWardPlacement) GetWardY() float32 {
	if x != nil && x.WardY != nil {
		return *x.WardY
	}
	return 0
}

type CDOTAClientMsg_RollDice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelType *uint32 `protobuf:"varint,1,opt,name=channel_type,json=channelType" json:"channel_type,omitempty"`
	RollMin     *uint32 `protobuf:"varint,2,opt,name=roll_min,json=rollMin" json:"roll_min,omitempty"`
	RollMax     *uint32 `protobuf:"varint,3,opt,name=roll_max,json=rollMax" json:"roll_max,omitempty"`
}

func (x *CDOTAClientMsg_RollDice) Reset() {
	*x = CDOTAClientMsg_RollDice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_clientmessages_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAClientMsg_RollDice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAClientMsg_RollDice) ProtoMessage() {}

func (x *CDOTAClientMsg_RollDice) ProtoReflect() protoreflect.Message {
	mi := &file_dota_clientmessages_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAClientMsg_RollDice.ProtoReflect.Descriptor instead.
func (*CDOTAClientMsg_RollDice) Descriptor() ([]byte, []int) {
	return file_dota_clientmessages_proto_rawDescGZIP(), []int{60}
}

func (x *CDOTAClientMsg_RollDice) GetChannelType() uint32 {
	if x != nil && x.ChannelType != nil {
		return *x.ChannelType
	}
	return 0
}

func (x *CDOTAClientMsg_RollDice) GetRollMin() uint32 {
	if x != nil && x.RollMin != nil {
		return *x.RollMin
	}
	return 0
}

func (x *CDOTAClientMsg_RollDice) GetRollMax() uint32 {
	if x != nil && x.RollMax != nil {
		return *x.RollMax
	}
	return 0
}

type CDOTAClientMsg_FlipCoin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelType *uint32 `protobuf:"varint,1,opt,name=channel_type,json=channelType" json:"channel_type,omitempty"`
}

func (x *CDOTAClientMsg_FlipCoin) Reset() {
	*x = CDOTAClientMsg_FlipCoin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_clientmessages_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAClientMsg_FlipCoin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAClientMsg_FlipCoin) ProtoMessage() {}

func (x *CDOTAClientMsg_FlipCoin) ProtoReflect() protoreflect.Message {
	mi := &file_dota_clientmessages_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAClientMsg_FlipCoin.ProtoReflect.Descriptor instead.
func (*CDOTAClientMsg_FlipCoin) Descriptor() ([]byte, []int) {
	return file_dota_clientmessages_proto_rawDescGZIP(), []int{61}
}

func (x *CDOTAClientMsg_FlipCoin) GetChannelType() uint32 {
	if x != nil && x.ChannelType != nil {
		return *x.ChannelType
	}
	return 0
}

type CDOTAClientMsg_RequestItemSuggestions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CDOTAClientMsg_RequestItemSuggestions) Reset() {
	*x = CDOTAClientMsg_RequestItemSuggestions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_clientmessages_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAClientMsg_RequestItemSuggestions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAClientMsg_RequestItemSuggestions) ProtoMessage() {}

func (x *CDOTAClientMsg_RequestItemSuggestions) ProtoReflect() protoreflect.Message {
	mi := &file_dota_clientmessages_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAClientMsg_RequestItemSuggestions.ProtoReflect.Descriptor instead.
func (*CDOTAClientMsg_RequestItemSuggestions) Descriptor() ([]byte, []int) {
	return file_dota_clientmessages_proto_rawDescGZIP(), []int{62}
}

type CDOTAClientMsg_MakeTeamCaptain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId *uint32 `protobuf:"varint,1,opt,name=player_id,json=playerId" json:"player_id,omitempty"`
}

func (x *CDOTAClientMsg_MakeTeamCaptain) Reset() {
	*x = CDOTAClientMsg_MakeTeamCaptain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_clientmessages_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAClientMsg_MakeTeamCaptain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAClientMsg_MakeTeamCaptain) ProtoMessage() {}

func (x *CDOTAClientMsg_MakeTeamCaptain) ProtoReflect() protoreflect.Message {
	mi := &file_dota_clientmessages_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAClientMsg_MakeTeamCaptain.ProtoReflect.Descriptor instead.
func (*CDOTAClientMsg_MakeTeamCaptain) Descriptor() ([]byte, []int) {
	return file_dota_clientmessages_proto_rawDescGZIP(), []int{63}
}

func (x *CDOTAClientMsg_MakeTeamCaptain) GetPlayerId() uint32 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

type CDOTAClientMsg_HelpTipSystemStateChanged struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TipDisplayed *bool `protobuf:"varint,1,opt,name=tip_displayed,json=tipDisplayed" json:"tip_displayed,omitempty"`
}

func (x *CDOTAClientMsg_HelpTipSystemStateChanged) Reset() {
	*x = CDOTAClientMsg_HelpTipSystemStateChanged{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_clientmessages_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAClientMsg_HelpTipSystemStateChanged) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAClientMsg_HelpTipSystemStateChanged) ProtoMessage() {}

func (x *CDOTAClientMsg_HelpTipSystemStateChanged) ProtoReflect() protoreflect.Message {
	mi := &file_dota_clientmessages_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAClientMsg_HelpTipSystemStateChanged.ProtoReflect.Descriptor instead.
func (*CDOTAClientMsg_HelpTipSystemStateChanged) Descriptor() ([]byte, []int) {
	return file_dota_clientmessages_proto_rawDescGZIP(), []int{64}
}

func (x *CDOTAClientMsg_HelpTipSystemStateChanged) GetTipDisplayed() bool {
	if x != nil && x.TipDisplayed != nil {
		return *x.TipDisplayed
	}
	return false
}

type CDOTAClientMsg_RequestBulkCombatLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameTime          *float32 `protobuf:"fixed32,1,opt,name=game_time,json=gameTime" json:"game_time,omitempty"`
	Duration          *float32 `protobuf:"fixed32,2,opt,name=duration" json:"duration,omitempty"`
	RecentPlayerDeath *bool    `protobuf:"varint,3,opt,name=recent_player_death,json=recentPlayerDeath" json:"recent_player_death,omitempty"`
	PlayerId          *int32   `protobuf:"varint,4,opt,name=player_id,json=playerId" json:"player_id,omitempty"`
}

func (x *CDOTAClientMsg_RequestBulkCombatLog) Reset() {
	*x = CDOTAClientMsg_RequestBulkCombatLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_clientmessages_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAClientMsg_RequestBulkCombatLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAClientMsg_RequestBulkCombatLog) ProtoMessage() {}

func (x *CDOTAClientMsg_RequestBulkCombatLog) ProtoReflect() protoreflect.Message {
	mi := &file_dota_clientmessages_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAClientMsg_RequestBulkCombatLog.ProtoReflect.Descriptor instead.
func (*CDOTAClientMsg_RequestBulkCombatLog) Descriptor() ([]byte, []int) {
	return file_dota_clientmessages_proto_rawDescGZIP(), []int{65}
}

func (x *CDOTAClientMsg_RequestBulkCombatLog) GetGameTime() float32 {
	if x != nil && x.GameTime != nil {
		return *x.GameTime
	}
	return 0
}

func (x *CDOTAClientMsg_RequestBulkCombatLog) GetDuration() float32 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

func (x *CDOTAClientMsg_RequestBulkCombatLog) GetRecentPlayerDeath() bool {
	if x != nil && x.RecentPlayerDeath != nil {
		return *x.RecentPlayerDeath
	}
	return false
}

func (x *CDOTAClientMsg_RequestBulkCombatLog) GetPlayerId() int32 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

type CDOTAClientMsg_AbilityDraftRequestAbility struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestedAbilityId *uint32 `protobuf:"varint,1,opt,name=requested_ability_id,json=requestedAbilityId" json:"requested_ability_id,omitempty"`
}

func (x *CDOTAClientMsg_AbilityDraftRequestAbility) Reset() {
	*x = CDOTAClientMsg_AbilityDraftRequestAbility{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_clientmessages_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAClientMsg_AbilityDraftRequestAbility) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAClientMsg_AbilityDraftRequestAbility) ProtoMessage() {}

func (x *CDOTAClientMsg_AbilityDraftRequestAbility) ProtoReflect() protoreflect.Message {
	mi := &file_dota_clientmessages_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAClientMsg_AbilityDraftRequestAbility.ProtoReflect.Descriptor instead.
func (*CDOTAClientMsg_AbilityDraftRequestAbility) Descriptor() ([]byte, []int) {
	return file_dota_clientmessages_proto_rawDescGZIP(), []int{66}
}

func (x *CDOTAClientMsg_AbilityDraftRequestAbility) GetRequestedAbilityId() uint32 {
	if x != nil && x.RequestedAbilityId != nil {
		return *x.RequestedAbilityId
	}
	return 0
}

type CDOTAClientMsg_GuideSelectOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Option           *uint32 `protobuf:"varint,1,opt,name=option" json:"option,omitempty"`
	ForceRecalculate *bool   `protobuf:"varint,2,opt,name=force_recalculate,json=forceRecalculate" json:"force_recalculate,omitempty"`
}

func (x *CDOTAClientMsg_GuideSelectOption) Reset() {
	*x = CDOTAClientMsg_GuideSelectOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_clientmessages_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAClientMsg_GuideSelectOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAClientMsg_GuideSelectOption) ProtoMessage() {}

func (x *CDOTAClientMsg_GuideSelectOption) ProtoReflect() protoreflect.Message {
	mi := &file_dota_clientmessages_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAClientMsg_GuideSelectOption.ProtoReflect.Descriptor instead.
func (*CDOTAClientMsg_GuideSelectOption) Descriptor() ([]byte, []int) {
	return file_dota_clientmessages_proto_rawDescGZIP(), []int{67}
}

func (x *CDOTAClientMsg_GuideSelectOption) GetOption() uint32 {
	if x != nil && x.Option != nil {
		return *x.Option
	}
	return 0
}

func (x *CDOTAClientMsg_GuideSelectOption) GetForceRecalculate() bool {
	if x != nil && x.ForceRecalculate != nil {
		return *x.ForceRecalculate
	}
	return false
}

type CDOTAClientMsg_GuideSelected struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuideWorkshopId *uint64 `protobuf:"varint,1,opt,name=guide_workshop_id,json=guideWorkshopId" json:"guide_workshop_id,omitempty"`
	IsPlusGuide     *bool   `protobuf:"varint,2,opt,name=is_plus_guide,json=isPlusGuide" json:"is_plus_guide,omitempty"`
}

func (x *CDOTAClientMsg_GuideSelected) Reset() {
	*x = CDOTAClientMsg_GuideSelected{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_clientmessages_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAClientMsg_GuideSelected) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAClientMsg_GuideSelected) ProtoMessage() {}

func (x *CDOTAClientMsg_GuideSelected) ProtoReflect() protoreflect.Message {
	mi := &file_dota_clientmessages_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAClientMsg_GuideSelected.ProtoReflect.Descriptor instead.
func (*CDOTAClientMsg_GuideSelected) Descriptor() ([]byte, []int) {
	return file_dota_clientmessages_proto_rawDescGZIP(), []int{68}
}

func (x *CDOTAClientMsg_GuideSelected) GetGuideWorkshopId() uint64 {
	if x != nil && x.GuideWorkshopId != nil {
		return *x.GuideWorkshopId
	}
	return 0
}

func (x *CDOTAClientMsg_GuideSelected) GetIsPlusGuide() bool {
	if x != nil && x.IsPlusGuide != nil {
		return *x.IsPlusGuide
	}
	return false
}

type CDOTAClientMsg_DamageReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetHeroId *uint32 `protobuf:"varint,1,opt,name=target_hero_id,json=targetHeroId" json:"target_hero_id,omitempty"`
	SourceHeroId *uint32 `protobuf:"varint,2,opt,name=source_hero_id,json=sourceHeroId" json:"source_hero_id,omitempty"`
	DamageAmount *int32  `protobuf:"varint,3,opt,name=damage_amount,json=damageAmount" json:"damage_amount,omitempty"`
	Broadcast    *bool   `protobuf:"varint,4,opt,name=broadcast" json:"broadcast,omitempty"`
}

func (x *CDOTAClientMsg_DamageReport) Reset() {
	*x = CDOTAClientMsg_DamageReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_clientmessages_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAClientMsg_DamageReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAClientMsg_DamageReport) ProtoMessage() {}

func (x *CDOTAClientMsg_DamageReport) ProtoReflect() protoreflect.Message {
	mi := &file_dota_clientmessages_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAClientMsg_DamageReport.ProtoReflect.Descriptor instead.
func (*CDOTAClientMsg_DamageReport) Descriptor() ([]byte, []int) {
	return file_dota_clientmessages_proto_rawDescGZIP(), []int{69}
}

func (x *CDOTAClientMsg_DamageReport) GetTargetHeroId() uint32 {
	if x != nil && x.TargetHeroId != nil {
		return *x.TargetHeroId
	}
	return 0
}

func (x *CDOTAClientMsg_DamageReport) GetSourceHeroId() uint32 {
	if x != nil && x.SourceHeroId != nil {
		return *x.SourceHeroId
	}
	return 0
}

func (x *CDOTAClientMsg_DamageReport) GetDamageAmount() int32 {
	if x != nil && x.DamageAmount != nil {
		return *x.DamageAmount
	}
	return 0
}

func (x *CDOTAClientMsg_DamageReport) GetBroadcast() bool {
	if x != nil && x.Broadcast != nil {
		return *x.Broadcast
	}
	return false
}

type CDOTAClientMsg_SalutePlayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetPlayerId *int32 `protobuf:"varint,1,opt,name=target_player_id,json=targetPlayerId" json:"target_player_id,omitempty"`
	EventId        *int32 `protobuf:"varint,2,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
}

func (x *CDOTAClientMsg_SalutePlayer) Reset() {
	*x = CDOTAClientMsg_SalutePlayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_clientmessages_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAClientMsg_SalutePlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAClientMsg_SalutePlayer) ProtoMessage() {}

func (x *CDOTAClientMsg_SalutePlayer) ProtoReflect() protoreflect.Message {
	mi := &file_dota_clientmessages_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAClientMsg_SalutePlayer.ProtoReflect.Descriptor instead.
func (*CDOTAClientMsg_SalutePlayer) Descriptor() ([]byte, []int) {
	return file_dota_clientmessages_proto_rawDescGZIP(), []int{70}
}

func (x *CDOTAClientMsg_SalutePlayer) GetTargetPlayerId() int32 {
	if x != nil && x.TargetPlayerId != nil {
		return *x.TargetPlayerId
	}
	return 0
}

func (x *CDOTAClientMsg_SalutePlayer) GetEventId() int32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

type CDOTAClientMsg_PingConfirm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PingOwnerPlayerId      *int32 `protobuf:"varint,1,opt,name=ping_owner_player_id,json=pingOwnerPlayerId" json:"ping_owner_player_id,omitempty"`
	PingConfirmingPlayerId *int32 `protobuf:"varint,2,opt,name=ping_confirming_player_id,json=pingConfirmingPlayerId" json:"ping_confirming_player_id,omitempty"`
	Confirming             *bool  `protobuf:"varint,3,opt,name=confirming" json:"confirming,omitempty"`
}

func (x *CDOTAClientMsg_PingConfirm) Reset() {
	*x = CDOTAClientMsg_PingConfirm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_clientmessages_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAClientMsg_PingConfirm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAClientMsg_PingConfirm) ProtoMessage() {}

func (x *CDOTAClientMsg_PingConfirm) ProtoReflect() protoreflect.Message {
	mi := &file_dota_clientmessages_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAClientMsg_PingConfirm.ProtoReflect.Descriptor instead.
func (*CDOTAClientMsg_PingConfirm) Descriptor() ([]byte, []int) {
	return file_dota_clientmessages_proto_rawDescGZIP(), []int{71}
}

func (x *CDOTAClientMsg_PingConfirm) GetPingOwnerPlayerId() int32 {
	if x != nil && x.PingOwnerPlayerId != nil {
		return *x.PingOwnerPlayerId
	}
	return 0
}

func (x *CDOTAClientMsg_PingConfirm) GetPingConfirmingPlayerId() int32 {
	if x != nil && x.PingConfirmingPlayerId != nil {
		return *x.PingConfirmingPlayerId
	}
	return 0
}

func (x *CDOTAClientMsg_PingConfirm) GetConfirming() bool {
	if x != nil && x.Confirming != nil {
		return *x.Confirming
	}
	return false
}

type CDOTAClientMsg_TipAlert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TipText *string `protobuf:"bytes,1,opt,name=tip_text,json=tipText" json:"tip_text,omitempty"`
}

func (x *CDOTAClientMsg_TipAlert) Reset() {
	*x = CDOTAClientMsg_TipAlert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_clientmessages_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAClientMsg_TipAlert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAClientMsg_TipAlert) ProtoMessage() {}

func (x *CDOTAClientMsg_TipAlert) ProtoReflect() protoreflect.Message {
	mi := &file_dota_clientmessages_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAClientMsg_TipAlert.ProtoReflect.Descriptor instead.
func (*CDOTAClientMsg_TipAlert) Descriptor() ([]byte, []int) {
	return file_dota_clientmessages_proto_rawDescGZIP(), []int{72}
}

func (x *CDOTAClientMsg_TipAlert) GetTipText() string {
	if x != nil && x.TipText != nil {
		return *x.TipText
	}
	return ""
}

type CDOTAClientMsg_EmptyTeleportAlert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetEntindex *int32 `protobuf:"varint,1,opt,name=target_entindex,json=targetEntindex" json:"target_entindex,omitempty"`
}

func (x *CDOTAClientMsg_EmptyTeleportAlert) Reset() {
	*x = CDOTAClientMsg_EmptyTeleportAlert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_clientmessages_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAClientMsg_EmptyTeleportAlert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAClientMsg_EmptyTeleportAlert) ProtoMessage() {}

func (x *CDOTAClientMsg_EmptyTeleportAlert) ProtoReflect() protoreflect.Message {
	mi := &file_dota_clientmessages_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAClientMsg_EmptyTeleportAlert.ProtoReflect.Descriptor instead.
func (*CDOTAClientMsg_EmptyTeleportAlert) Descriptor() ([]byte, []int) {
	return file_dota_clientmessages_proto_rawDescGZIP(), []int{73}
}

func (x *CDOTAClientMsg_EmptyTeleportAlert) GetTargetEntindex() int32 {
	if x != nil && x.TargetEntindex != nil {
		return *x.TargetEntindex
	}
	return 0
}

type CDOTAClientMsg_SetCavernMapVariant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapVariant *uint32 `protobuf:"varint,1,opt,name=map_variant,json=mapVariant" json:"map_variant,omitempty"`
}

func (x *CDOTAClientMsg_SetCavernMapVariant) Reset() {
	*x = CDOTAClientMsg_SetCavernMapVariant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_clientmessages_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAClientMsg_SetCavernMapVariant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAClientMsg_SetCavernMapVariant) ProtoMessage() {}

func (x *CDOTAClientMsg_SetCavernMapVariant) ProtoReflect() protoreflect.Message {
	mi := &file_dota_clientmessages_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAClientMsg_SetCavernMapVariant.ProtoReflect.Descriptor instead.
func (*CDOTAClientMsg_SetCavernMapVariant) Descriptor() ([]byte, []int) {
	return file_dota_clientmessages_proto_rawDescGZIP(), []int{74}
}

func (x *CDOTAClientMsg_SetCavernMapVariant) GetMapVariant() uint32 {
	if x != nil && x.MapVariant != nil {
		return *x.MapVariant
	}
	return 0
}

type CDOTAClientMsg_PauseGameOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId *int32 `protobuf:"varint,1,opt,name=order_id,json=orderId" json:"order_id,omitempty"`
	Data    *int32 `protobuf:"varint,2,opt,name=data" json:"data,omitempty"`
}

func (x *CDOTAClientMsg_PauseGameOrder) Reset() {
	*x = CDOTAClientMsg_PauseGameOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_clientmessages_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAClientMsg_PauseGameOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAClientMsg_PauseGameOrder) ProtoMessage() {}

func (x *CDOTAClientMsg_PauseGameOrder) ProtoReflect() protoreflect.Message {
	mi := &file_dota_clientmessages_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAClientMsg_PauseGameOrder.ProtoReflect.Descriptor instead.
func (*CDOTAClientMsg_PauseGameOrder) Descriptor() ([]byte, []int) {
	return file_dota_clientmessages_proto_rawDescGZIP(), []int{75}
}

func (x *CDOTAClientMsg_PauseGameOrder) GetOrderId() int32 {
	if x != nil && x.OrderId != nil {
		return *x.OrderId
	}
	return 0
}

func (x *CDOTAClientMsg_PauseGameOrder) GetData() int32 {
	if x != nil && x.Data != nil {
		return *x.Data
	}
	return 0
}

type CDOTAClientMsg_VersusScene_PlayerBehavior struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Behavior     *EDOTAVersusScenePlayerBehavior `protobuf:"varint,1,opt,name=behavior,enum=dota.EDOTAVersusScenePlayerBehavior,def=1" json:"behavior,omitempty"`
	PlayActivity *VersusScene_PlayActivity       `protobuf:"bytes,2,opt,name=play_activity,json=playActivity" json:"play_activity,omitempty"`
	ChatWheel    *VersusScene_ChatWheel          `protobuf:"bytes,3,opt,name=chat_wheel,json=chatWheel" json:"chat_wheel,omitempty"`
	PlaybackRate *VersusScene_PlaybackRate       `protobuf:"bytes,4,opt,name=playback_rate,json=playbackRate" json:"playback_rate,omitempty"`
}

// Default values for CDOTAClientMsg_VersusScene_PlayerBehavior fields.
const (
	Default_CDOTAClientMsg_VersusScene_PlayerBehavior_Behavior = EDOTAVersusScenePlayerBehavior_VS_PLAYER_BEHAVIOR_PLAY_ACTIVITY
)

func (x *CDOTAClientMsg_VersusScene_PlayerBehavior) Reset() {
	*x = CDOTAClientMsg_VersusScene_PlayerBehavior{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_clientmessages_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAClientMsg_VersusScene_PlayerBehavior) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAClientMsg_VersusScene_PlayerBehavior) ProtoMessage() {}

func (x *CDOTAClientMsg_VersusScene_PlayerBehavior) ProtoReflect() protoreflect.Message {
	mi := &file_dota_clientmessages_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAClientMsg_VersusScene_PlayerBehavior.ProtoReflect.Descriptor instead.
func (*CDOTAClientMsg_VersusScene_PlayerBehavior) Descriptor() ([]byte, []int) {
	return file_dota_clientmessages_proto_rawDescGZIP(), []int{76}
}

func (x *CDOTAClientMsg_VersusScene_PlayerBehavior) GetBehavior() EDOTAVersusScenePlayerBehavior {
	if x != nil && x.Behavior != nil {
		return *x.Behavior
	}
	return Default_CDOTAClientMsg_VersusScene_PlayerBehavior_Behavior
}

func (x *CDOTAClientMsg_VersusScene_PlayerBehavior) GetPlayActivity() *VersusScene_PlayActivity {
	if x != nil {
		return x.PlayActivity
	}
	return nil
}

func (x *CDOTAClientMsg_VersusScene_PlayerBehavior) GetChatWheel() *VersusScene_ChatWheel {
	if x != nil {
		return x.ChatWheel
	}
	return nil
}

func (x *CDOTAClientMsg_VersusScene_PlayerBehavior) GetPlaybackRate() *VersusScene_PlaybackRate {
	if x != nil {
		return x.PlaybackRate
	}
	return nil
}

var File_dota_clientmessages_proto protoreflect.FileDescriptor

var file_dota_clientmessages_proto_rawDesc = []byte{
	0x0a, 0x19, 0x64, 0x6f, 0x74, 0x61, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x64, 0x6f, 0x74,
	0x61, 0x1a, 0x19, 0x64, 0x6f, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x64, 0x6f,
	0x74, 0x61, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5a, 0x0a, 0x16, 0x43, 0x44, 0x4f, 0x54, 0x41, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x5f, 0x4d, 0x61, 0x70, 0x50, 0x69, 0x6e, 0x67, 0x12,
	0x40, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x69, 0x6e, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x44,
	0x4f, 0x54, 0x41, 0x4d, 0x73, 0x67, 0x5f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x69, 0x6e, 0x67, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x6e,
	0x67, 0x22, 0x53, 0x0a, 0x18, 0x43, 0x44, 0x4f, 0x54, 0x41, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4d, 0x73, 0x67, 0x5f, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x37, 0x0a,
	0x0a, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x44, 0x4f, 0x54, 0x41, 0x4d, 0x73,
	0x67, 0x5f, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x09, 0x69, 0x74, 0x65,
	0x6d, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x22, 0xe6, 0x01, 0x0a, 0x1d, 0x43, 0x44, 0x4f, 0x54, 0x41,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x5f, 0x45, 0x6e, 0x65, 0x6d, 0x79, 0x49,
	0x74, 0x65, 0x6d, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x74, 0x65, 0x6d,
	0x5f, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x69, 0x74, 0x65, 0x6d, 0x45, 0x6e, 0x74, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1f, 0x0a,
	0x09, 0x72, 0x75, 0x6e, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x3a, 0x02, 0x2d, 0x31, 0x52, 0x08, 0x72, 0x75, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21,
	0x0a, 0x0a, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x3a, 0x02, 0x2d, 0x31, 0x52, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x2b, 0x0a, 0x0f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x02, 0x2d, 0x31, 0x52, 0x0e,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x12, 0x2f,
	0x0a, 0x11, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x02, 0x2d, 0x31, 0x52, 0x10, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x22,
	0x77, 0x0a, 0x1c, 0x43, 0x44, 0x4f, 0x54, 0x41, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73,
	0x67, 0x5f, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12,
	0x2e, 0x0a, 0x13, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x62, 0x75,
	0x66, 0x66, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x27, 0x0a, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x45, 0x6e, 0x74, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x75, 0x0a, 0x1a, 0x43, 0x44, 0x4f, 0x54,
	0x41, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x5f, 0x43, 0x6c, 0x69, 0x63, 0x6b,
	0x65, 0x64, 0x42, 0x75, 0x66, 0x66, 0x12, 0x2e, 0x0a, 0x13, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x11, 0x62, 0x75, 0x66, 0x66, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22,
	0x6d, 0x0a, 0x1a, 0x43, 0x44, 0x4f, 0x54, 0x41, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73,
	0x67, 0x5f, 0x48, 0x50, 0x4d, 0x61, 0x6e, 0x61, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x27, 0x0a,
	0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x45, 0x6e,
	0x74, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x72,
	0x61, 0x77, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x73, 0x68, 0x6f, 0x77, 0x52, 0x61, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x37,
	0x0a, 0x19, 0x43, 0x44, 0x4f, 0x54, 0x41, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67,
	0x5f, 0x47, 0x6c, 0x79, 0x70, 0x68, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6e,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6e,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x22, 0x37, 0x0a, 0x19, 0x43, 0x44, 0x4f, 0x54, 0x41,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x5f, 0x52, 0x61, 0x64, 0x61, 0x72, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x22, 0x4a, 0x0a, 0x16, 0x43, 0x44, 0x4f, 0x54, 0x41, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d,
	0x73, 0x67, 0x5f, 0x4d, 0x61, 0x70, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x6d, 0x61,
	0x70, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x6f,
	0x74, 0x61, 0x2e, 0x43, 0x44, 0x4f, 0x54, 0x41, 0x4d, 0x73, 0x67, 0x5f, 0x4d, 0x61, 0x70, 0x4c,
	0x69, 0x6e, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x32, 0x0a, 0x1a,
	0x43, 0x44, 0x4f, 0x54, 0x41, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x5f, 0x41,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x22, 0xbc, 0x02, 0x0a, 0x22, 0x43, 0x44, 0x4f, 0x54, 0x41, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4d, 0x73, 0x67, 0x5f, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x4b, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x44, 0x4f,
	0x54, 0x41, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x5f, 0x55, 0x6e, 0x69, 0x74,
	0x73, 0x41, 0x75, 0x74, 0x6f, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x2e,
	0x45, 0x4d, 0x6f, 0x64, 0x65, 0x3a, 0x07, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x52, 0x04,
	0x6d, 0x6f, 0x64, 0x65, 0x12, 0x57, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43,
	0x44, 0x4f, 0x54, 0x41, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x5f, 0x55, 0x6e,
	0x69, 0x74, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x64,
	0x65, 0x2e, 0x45, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x06, 0x4e, 0x4f, 0x52,
	0x4d, 0x41, 0x4c, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x49, 0x0a,
	0x05, 0x45, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x07, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x09, 0x0a, 0x05,
	0x4e, 0x45, 0x56, 0x45, 0x52, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x46, 0x54, 0x45, 0x52,
	0x5f, 0x53, 0x50, 0x45, 0x4c, 0x4c, 0x43, 0x41, 0x53, 0x54, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06,
	0x41, 0x4c, 0x57, 0x41, 0x59, 0x53, 0x10, 0x02, 0x22, 0x25, 0x0a, 0x09, 0x45, 0x55, 0x6e, 0x69,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10,
	0x00, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x55, 0x4d, 0x4d, 0x4f, 0x4e, 0x45, 0x44, 0x10, 0x01, 0x22,
	0x44, 0x0a, 0x28, 0x43, 0x44, 0x4f, 0x54, 0x41, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73,
	0x67, 0x5f, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x6b, 0x41, 0x66, 0x74, 0x65, 0x72, 0x53, 0x70, 0x65, 0x6c, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x3f, 0x0a, 0x23, 0x43, 0x44, 0x4f, 0x54, 0x41, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x5f, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x48, 0x61, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x3e, 0x0a, 0x22, 0x43, 0x44, 0x4f, 0x54, 0x41, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x5f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x48, 0x61, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x35, 0x0a, 0x1b, 0x43, 0x44, 0x4f, 0x54, 0x41, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x5f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x22, 0x16, 0x0a,
	0x14, 0x43, 0x44, 0x4f, 0x54, 0x41, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x5f,
	0x50, 0x61, 0x75, 0x73, 0x65, 0x22, 0x31, 0x0a, 0x1b, 0x43, 0x44, 0x4f, 0x54, 0x41, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x5f, 0x53, 0x68, 0x6f, 0x70, 0x56, 0x69, 0x65, 0x77,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x67, 0x0a, 0x1f, 0x43, 0x44, 0x4f, 0x54,
	0x41, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x5f, 0x53, 0x65, 0x74, 0x55, 0x6e,
	0x69, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x22, 0x39, 0x0a, 0x1a, 0x43, 0x44, 0x4f, 0x54, 0x41, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4d, 0x73, 0x67, 0x5f, 0x53, 0x77, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x22, 0x38, 0x0a, 0x19,
	0x43, 0x44, 0x4f, 0x54, 0x41, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x5f, 0x53,
	0x77, 0x61, 0x70, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x22, 0x52, 0x0a, 0x18, 0x43, 0x44, 0x4f, 0x54, 0x41, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x5f, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x4c, 0x69,
	0x6e, 0x65, 0x12, 0x36, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x44, 0x4f,
	0x54, 0x41, 0x4d, 0x73, 0x67, 0x5f, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x52,
	0x09, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x23, 0x0a, 0x21, 0x43, 0x44,
	0x4f, 0x54, 0x41, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x47, 0x72, 0x61, 0x70, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22,
	0x87, 0x01, 0x0a, 0x18, 0x43, 0x44, 0x4f, 0x54, 0x41, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d,
	0x73, 0x67, 0x5f, 0x43, 0x68, 0x61, 0x74, 0x57, 0x68, 0x65, 0x65, 0x6c, 0x12, 0x26, 0x0a, 0x0f,
	0x63, 0x68, 0x61, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x68, 0x65,
	0x72, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x48, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6d, 0x6f, 0x74,
	0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x65,
	0x6d, 0x6f, 0x74, 0x69, 0x63, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x5a, 0x0a, 0x1c, 0x43, 0x44, 0x4f,
	0x54, 0x41, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x5f, 0x53, 0x65, 0x6e, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x50, 0x6f, 0x70, 0x75, 0x70, 0x12, 0x3a, 0x0a, 0x09, 0x73, 0x74, 0x61,
	0x74, 0x70, 0x6f, 0x70, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64,
	0x6f, 0x74, 0x61, 0x2e, 0x43, 0x44, 0x4f, 0x54, 0x41, 0x4d, 0x73, 0x67, 0x5f, 0x53, 0x65, 0x6e,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x50, 0x6f, 0x70, 0x75, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74,
	0x70, 0x6f, 0x70, 0x75, 0x70, 0x22, 0x70, 0x0a, 0x23, 0x43, 0x44, 0x4f, 0x54, 0x41, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x5f, 0x44, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x41,
	0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x50, 0x6f, 0x70, 0x75, 0x70, 0x73, 0x12, 0x49, 0x0a, 0x0d,
	0x64, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x61, 0x6c, 0x6c, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x44, 0x4f, 0x54, 0x41,
	0x4d, 0x73, 0x67, 0x5f, 0x44, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x41, 0x6c, 0x6c, 0x53, 0x74,
	0x61, 0x74, 0x50, 0x6f, 0x70, 0x75, 0x70, 0x73, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x6d, 0x69, 0x73,
	0x73, 0x61, 0x6c, 0x6c, 0x6d, 0x73, 0x67, 0x22, 0x6e, 0x0a, 0x24, 0x43, 0x44, 0x4f, 0x54, 0x41,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x5f, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x4c,
	0x61, 0x73, 0x74, 0x48, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x5f, 0x6c, 0x61, 0x6e, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x4c, 0x61, 0x6e, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x78, 0x0a, 0x21, 0x43, 0x44, 0x4f, 0x54, 0x41,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x51, 0x75, 0x69, 0x63, 0x6b, 0x42, 0x75, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x2a, 0x0a, 0x0f,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x02, 0x2d, 0x31, 0x52, 0x0d, 0x69, 0x74, 0x65, 0x6d, 0x41,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0b, 0x70, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66,
	0x61, 0x6c, 0x73, 0x65, 0x52, 0x0b, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x22, 0x5e, 0x0a, 0x1d, 0x43, 0x44, 0x4f, 0x54, 0x41, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4d, 0x73, 0x67, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x42,
	0x75, 0x79, 0x12, 0x3d, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x44, 0x4f, 0x54, 0x41, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75,
	0x69, 0x63, 0x6b, 0x42, 0x75, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x22, 0x3e, 0x0a, 0x19, 0x43, 0x44, 0x4f, 0x54, 0x41, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4d, 0x73, 0x67, 0x5f, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x22, 0xa3, 0x01, 0x0a, 0x20, 0x43, 0x44, 0x4f, 0x54, 0x41, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x4d, 0x73, 0x67, 0x5f, 0x57, 0x69, 0x6c, 0x6c, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x69, 0x74, 0x65, 0x6d, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x25,
	0x0a, 0x0e, 0x67, 0x6f, 0x6c, 0x64, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x67, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x6d, 0x61,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x12, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x22, 0x22, 0x0a, 0x20, 0x43, 0x44, 0x4f, 0x54, 0x41,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x5f, 0x42, 0x75, 0x79, 0x42, 0x61, 0x63,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x22, 0xba, 0x01, 0x0a, 0x1c,
	0x43, 0x44, 0x4f, 0x54, 0x41, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x5f, 0x51,
	0x75, 0x69, 0x63, 0x6b, 0x42, 0x75, 0x79, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x26, 0x0a, 0x0f,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x69, 0x74, 0x65, 0x6d, 0x41, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x6f, 0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x67, 0x6f, 0x6c, 0x64, 0x43, 0x6f, 0x73,
	0x74, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x6f, 0x6f, 0x6c, 0x64, 0x6f,
	0x77, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x13, 0x69, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x62, 0x75,
	0x79, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x68, 0x6f,
	0x77, 0x42, 0x75, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x22, 0x3b, 0x0a, 0x1d, 0x43, 0x44, 0x4f, 0x54,
	0x41, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x53, 0x68, 0x6f, 0x77, 0x43, 0x61, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x68, 0x6f,
	0x77, 0x63, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x68, 0x6f,
	0x77, 0x63, 0x61, 0x73, 0x65, 0x22, 0x42, 0x0a, 0x1f, 0x43, 0x44, 0x4f, 0x54, 0x41, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x5f, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5a, 0x6f,
	0x6f, 0x6d, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x7a, 0x6f, 0x6f, 0x6d,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x7a,
	0x6f, 0x6f, 0x6d, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x48, 0x0a, 0x28, 0x43, 0x44, 0x4f,
	0x54, 0x41, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x5f, 0x42, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x6d, 0x65,
	0x72, 0x61, 0x6d, 0x61, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x6d,
	0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61,
	0x6d, 0x61, 0x6e, 0x22, 0x51, 0x0a, 0x35, 0x43, 0x44, 0x4f, 0x54, 0x41, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x4d, 0x73, 0x67, 0x5f, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x55, 0x73, 0x69, 0x6e, 0x67, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x65, 0x64, 0x43, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x70, 0x0a, 0x1d, 0x43, 0x41, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x71, 0x75, 0x69, 0x70, 0x53, 0x6c, 0x6f, 0x74, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64,
	0x65, 0x66, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x64, 0x65, 0x66, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x5b, 0x0a, 0x1c, 0x43, 0x44, 0x4f, 0x54,
	0x41, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x5f, 0x46, 0x72, 0x65, 0x65, 0x49,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x3b, 0x0a, 0x06, 0x65, 0x71, 0x75, 0x69,
	0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e,
	0x43, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x71, 0x75, 0x69, 0x70,
	0x53, 0x6c, 0x6f, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x52, 0x06, 0x65,
	0x71, 0x75, 0x69, 0x70, 0x73, 0x22, 0x4b, 0x0a, 0x25, 0x43, 0x44, 0x4f, 0x54, 0x41, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x5f, 0x46, 0x69, 0x6c, 0x6c, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x42, 0x6f, 0x74, 0x73, 0x12, 0x22,
	0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x6c, 0x77, 0x69, 0x74, 0x68, 0x62, 0x6f, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x6c, 0x77, 0x69, 0x74, 0x68, 0x62, 0x6f,
	0x74, 0x73, 0x22, 0x47, 0x0a, 0x1d, 0x43, 0x44, 0x4f, 0x54, 0x41, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x4d, 0x73, 0x67, 0x5f, 0x48, 0x65, 0x72, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x65, 0x4c,
	0x69, 0x6b, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x22, 0x34, 0x0a, 0x1e, 0x43,
	0x44, 0x4f, 0x54, 0x41, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x5f, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x43, 0x4e, 0x59, 0x32, 0x30, 0x31, 0x35, 0x43, 0x6d, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0xea, 0x01, 0x0a, 0x17, 0x43, 0x44, 0x4f, 0x54, 0x41, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x4d, 0x73, 0x67, 0x5f, 0x44, 0x65, 0x6d, 0x6f, 0x48, 0x65, 0x72, 0x6f, 0x12, 0x17, 0x0a,
	0x07, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x68, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x10, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x69,
	0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x70, 0x61, 0x77, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x68, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x54, 0x6f, 0x53, 0x70, 0x61, 0x77, 0x6e, 0x12,
	0x1b, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x64, 0x65, 0x66, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x66, 0x73, 0x12, 0x19, 0x0a, 0x08,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x04, 0x52, 0x07,
	0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x79, 0x6c, 0x65,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x74,
	0x79, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x34, 0x0a, 0x16, 0x6b, 0x65, 0x65, 0x70,
	0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x6d, 0x6f, 0x68, 0x65,
	0x72, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x6b, 0x65, 0x65, 0x70, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x6d, 0x6f, 0x68, 0x65, 0x72, 0x6f, 0x22, 0x75,
	0x0a, 0x1e, 0x43, 0x44, 0x4f, 0x54, 0x41, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67,
	0x5f, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73,
	0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x6c,
	0x6f, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0xab, 0x01, 0x0a, 0x1e, 0x43, 0x44, 0x4f, 0x54, 0x41, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x5f, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x52, 0x65, 0x72, 0x6f, 0x6c, 0x6c, 0x12, 0x36, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x64, 0x6f, 0x74,
	0x61, 0x2e, 0x45, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x3a, 0x0d, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x65,
	0x72, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x72,
	0x6f, 0x49, 0x64, 0x22, 0x3d, 0x0a, 0x18, 0x43, 0x44, 0x4f, 0x54, 0x41, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x4d, 0x73, 0x67, 0x5f, 0x43, 0x6f, 0x69, 0x6e, 0x57, 0x61, 0x67, 0x65, 0x72, 0x12,
	0x21, 0x0a, 0x0c, 0x77, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x77, 0x61, 0x67, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x4e, 0x0a, 0x1d, 0x43, 0x44, 0x4f, 0x54, 0x41, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x4d, 0x73, 0x67, 0x5f, 0x43, 0x6f, 0x69, 0x6e, 0x57, 0x61, 0x67, 0x65, 0x72, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x2d, 0x0a, 0x13, 0x77, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x10, 0x77, 0x61, 0x67, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x74, 0x65, 0x6d,
	0x49, 0x64, 0x22, 0x41, 0x0a, 0x18, 0x43, 0x44, 0x4f, 0x54, 0x41, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x4d, 0x73, 0x67, 0x5f, 0x52, 0x61, 0x6e, 0x6b, 0x57, 0x61, 0x67, 0x65, 0x72, 0x12, 0x25,
	0x0a, 0x0e, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x5f, 0x77, 0x61, 0x67, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65,
	0x57, 0x61, 0x67, 0x65, 0x72, 0x22, 0x3a, 0x0a, 0x1b, 0x43, 0x44, 0x4f, 0x54, 0x41, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x6f,
	0x75, 0x6e, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x4f, 0x0a, 0x1d, 0x43, 0x44, 0x4f, 0x54, 0x41, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4d, 0x73, 0x67, 0x5f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x54,
	0x69, 0x70, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x11, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x50, 0x0a, 0x1c, 0x43, 0x44, 0x4f, 0x54, 0x41, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x4d, 0x73, 0x67, 0x5f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x12, 0x30, 0x0a, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x44, 0x4f, 0x54, 0x41, 0x4d,
	0x73, 0x67, 0x5f, 0x55, 0x6e, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x06, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x22, 0x64, 0x0a, 0x16, 0x43, 0x44, 0x4f, 0x54, 0x41, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x5f, 0x58, 0x50, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x27,
	0x0a, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x45,
	0x6e, 0x74, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x64,
	0x61, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x22, 0x96, 0x01, 0x0a, 0x1e, 0x43,
	0x44, 0x4f, 0x54, 0x41, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x5f, 0x54, 0x61,
	0x6c, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x65, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x27, 0x0a,
	0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x45, 0x6e,
	0x74, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x65, 0x61,
	0x72, 0x6e, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6c, 0x65, 0x61, 0x72,
	0x6e, 0x65, 0x64, 0x22, 0xf4, 0x01, 0x0a, 0x21, 0x43, 0x44, 0x4f, 0x54, 0x41, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x5f, 0x4b, 0x69, 0x6c, 0x6c, 0x63, 0x61, 0x6d, 0x44, 0x61,
	0x6d, 0x61, 0x67, 0x65, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x61, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65,
	0x54, 0x61, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x69, 0x74, 0x65,
	0x6d, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x65,
	0x72, 0x6f, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68,
	0x65, 0x72, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x61, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x55, 0x0a, 0x1c, 0x43, 0x44,
	0x4f, 0x54, 0x41, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x5f, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x1b, 0x0a, 0x19, 0x43, 0x44, 0x4f, 0x54, 0x41, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4d, 0x73, 0x67, 0x5f, 0x4b, 0x69, 0x6c, 0x6c, 0x4d, 0x79, 0x48, 0x65, 0x72, 0x6f, 0x22, 0xed,
	0x01, 0x0a, 0x1a, 0x43, 0x44, 0x4f, 0x54, 0x41, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73,
	0x67, 0x5f, 0x51, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a,
	0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x6f, 0x61, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x67, 0x6f, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x47, 0x61,
	0x6d, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x69, 0x74, 0x65, 0x6d, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0x58,
	0x0a, 0x1f, 0x43, 0x44, 0x4f, 0x54, 0x41, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67,
	0x5f, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x6b, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x68, 0x6f,
	0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x6d, 0x0a, 0x1d, 0x43, 0x44, 0x4f, 0x54,
	0x41, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x5f, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x61, 0x6c, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x27,
	0x0a, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x45,
	0x6e, 0x74, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x89, 0x01, 0x0a, 0x27, 0x43, 0x44, 0x4f, 0x54,
	0x41, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x5f, 0x53, 0x65, 0x74, 0x45, 0x6e,
	0x65, 0x6d, 0x79, 0x53, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x5f, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x65, 0x6e,
	0x65, 0x6d, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x65,
	0x6e, 0x65, 0x6d, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x65, 0x6e,
	0x65, 0x6d, 0x79, 0x53, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x75, 0x0a, 0x26, 0x43, 0x44, 0x4f, 0x54, 0x41, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x4d, 0x73, 0x67, 0x5f, 0x53, 0x65, 0x74, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64,
	0x57, 0x61, 0x72, 0x64, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x15, 0x0a, 0x06,
	0x77, 0x61, 0x72, 0x64, 0x5f, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x77, 0x61,
	0x72, 0x64, 0x58, 0x12, 0x15, 0x0a, 0x06, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x05, 0x77, 0x61, 0x72, 0x64, 0x59, 0x22, 0x72, 0x0a, 0x17, 0x43, 0x44,
	0x4f, 0x54, 0x41, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x5f, 0x52, 0x6f, 0x6c,
	0x6c, 0x44, 0x69, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x6c, 0x6c,
	0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x6f, 0x6c, 0x6c,
	0x4d, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x6c, 0x6c, 0x5f, 0x6d, 0x61, 0x78, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x6f, 0x6c, 0x6c, 0x4d, 0x61, 0x78, 0x22, 0x3c,
	0x0a, 0x17, 0x43, 0x44, 0x4f, 0x54, 0x41, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67,
	0x5f, 0x46, 0x6c, 0x69, 0x70, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x22, 0x27, 0x0a, 0x25,
	0x43, 0x44, 0x4f, 0x54, 0x41, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x3d, 0x0a, 0x1e, 0x43, 0x44, 0x4f, 0x54, 0x41, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x5f, 0x4d, 0x61, 0x6b, 0x65, 0x54, 0x65, 0x61, 0x6d,
	0x43, 0x61, 0x70, 0x74, 0x61, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x4f, 0x0a, 0x28, 0x43, 0x44, 0x4f, 0x54, 0x41, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x5f, 0x48, 0x65, 0x6c, 0x70, 0x54, 0x69, 0x70, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x74, 0x69, 0x70, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x74, 0x69, 0x70, 0x44, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x64, 0x22, 0xab, 0x01, 0x0a, 0x23, 0x43, 0x44, 0x4f, 0x54, 0x41, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x42, 0x75, 0x6c, 0x6b, 0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x4c, 0x6f, 0x67, 0x12, 0x1b, 0x0a,
	0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74,
	0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x11, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x44, 0x65, 0x61, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x5d, 0x0a, 0x29, 0x43, 0x44, 0x4f, 0x54, 0x41, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x4d, 0x73, 0x67, 0x5f, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x72, 0x61,
	0x66, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x22, 0x67, 0x0a, 0x20, 0x43, 0x44, 0x4f, 0x54, 0x41, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x4d, 0x73, 0x67, 0x5f, 0x47, 0x75, 0x69, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b,
	0x0a, 0x11, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x52, 0x65, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x22, 0x6e, 0x0a, 0x1c, 0x43,
	0x44, 0x4f, 0x54, 0x41, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x5f, 0x47, 0x75,
	0x69, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x67,
	0x75, 0x69, 0x64, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x67, 0x75, 0x69, 0x64, 0x65, 0x57, 0x6f, 0x72,
	0x6b, 0x73, 0x68, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x70, 0x6c,
	0x75, 0x73, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x69, 0x73, 0x50, 0x6c, 0x75, 0x73, 0x47, 0x75, 0x69, 0x64, 0x65, 0x22, 0xac, 0x01, 0x0a, 0x1b,
	0x43, 0x44, 0x4f, 0x54, 0x41, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x5f, 0x44,
	0x61, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x48, 0x65, 0x72, 0x6f, 0x49,
	0x64, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x68, 0x65, 0x72, 0x6f,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x48, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x61, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x22, 0x62, 0x0a, 0x1b, 0x43, 0x44,
	0x4f, 0x54, 0x41, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x5f, 0x53, 0x61, 0x6c,
	0x75, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xa8,
	0x01, 0x0a, 0x1a, 0x43, 0x44, 0x4f, 0x54, 0x41, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73,
	0x67, 0x5f, 0x50, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x12, 0x2f, 0x0a,
	0x14, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x70, 0x69, 0x6e,
	0x67, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x39,
	0x0a, 0x19, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x69, 0x6e,
	0x67, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x16, 0x70, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x69, 0x6e,
	0x67, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x22, 0x34, 0x0a, 0x17, 0x43, 0x44, 0x4f,
	0x54, 0x41, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x5f, 0x54, 0x69, 0x70, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x69, 0x70, 0x5f, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x69, 0x70, 0x54, 0x65, 0x78, 0x74, 0x22,
	0x4c, 0x0a, 0x21, 0x43, 0x44, 0x4f, 0x54, 0x41, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73,
	0x67, 0x5f, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x65,
	0x6e, 0x74, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x45, 0x0a,
	0x22, 0x43, 0x44, 0x4f, 0x54, 0x41, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x5f,
	0x53, 0x65, 0x74, 0x43, 0x61, 0x76, 0x65, 0x72, 0x6e, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x70, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x61, 0x70, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x6e, 0x74, 0x22, 0x4e, 0x0a, 0x1d, 0x43, 0x44, 0x4f, 0x54, 0x41, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x5f, 0x50, 0x61, 0x75, 0x73, 0x65, 0x47, 0x61, 0x6d, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0xd5, 0x02, 0x0a, 0x29, 0x43, 0x44, 0x4f, 0x54, 0x41, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x5f, 0x56, 0x65, 0x72, 0x73, 0x75, 0x73, 0x53, 0x63,
	0x65, 0x6e, 0x65, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x72, 0x12, 0x62, 0x0a, 0x08, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x45, 0x44, 0x4f, 0x54,
	0x41, 0x56, 0x65, 0x72, 0x73, 0x75, 0x73, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x3a, 0x20, 0x56, 0x53, 0x5f, 0x50,
	0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x42, 0x45, 0x48, 0x41, 0x56, 0x49, 0x4f, 0x52, 0x5f, 0x50,
	0x4c, 0x41, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x52, 0x08, 0x62, 0x65,
	0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x43, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x64, 0x6f, 0x74, 0x61, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x75, 0x73, 0x53, 0x63, 0x65, 0x6e, 0x65,
	0x5f, 0x50, 0x6c, 0x61, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x70,
	0x6c, 0x61, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x3a, 0x0a, 0x0a, 0x63,
	0x68, 0x61, 0x74, 0x5f, 0x77, 0x68, 0x65, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x75, 0x73, 0x53, 0x63, 0x65,
	0x6e, 0x65, 0x5f, 0x43, 0x68, 0x61, 0x74, 0x57, 0x68, 0x65, 0x65, 0x6c, 0x52, 0x09, 0x63, 0x68,
	0x61, 0x74, 0x57, 0x68, 0x65, 0x65, 0x6c, 0x12, 0x43, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x62,
	0x61, 0x63, 0x6b, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x75, 0x73, 0x53, 0x63, 0x65, 0x6e,
	0x65, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x61, 0x74, 0x65, 0x52, 0x0c,
	0x70, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x61, 0x74, 0x65, 0x2a, 0xe3, 0x13, 0x0a,
	0x13, 0x45, 0x44, 0x6f, 0x74, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x0f, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x43, 0x4d, 0x5f,
	0x4d, 0x61, 0x70, 0x4c, 0x69, 0x6e, 0x65, 0x10, 0xad, 0x02, 0x12, 0x18, 0x0a, 0x13, 0x44, 0x4f,
	0x54, 0x41, 0x5f, 0x43, 0x4d, 0x5f, 0x41, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52, 0x61, 0x74, 0x69,
	0x6f, 0x10, 0xae, 0x02, 0x12, 0x14, 0x0a, 0x0f, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x43, 0x4d, 0x5f,
	0x4d, 0x61, 0x70, 0x50, 0x69, 0x6e, 0x67, 0x10, 0xaf, 0x02, 0x12, 0x1c, 0x0a, 0x17, 0x44, 0x4f,
	0x54, 0x41, 0x5f, 0x43, 0x4d, 0x5f, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x6b, 0x10, 0xb0, 0x02, 0x12, 0x19, 0x0a, 0x14, 0x44, 0x4f, 0x54, 0x41,
	0x5f, 0x43, 0x4d, 0x5f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x10, 0xb3, 0x02, 0x12, 0x12, 0x0a, 0x0d, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x43, 0x4d, 0x5f, 0x50,
	0x61, 0x75, 0x73, 0x65, 0x10, 0xb4, 0x02, 0x12, 0x19, 0x0a, 0x14, 0x44, 0x4f, 0x54, 0x41, 0x5f,
	0x43, 0x4d, 0x5f, 0x53, 0x68, 0x6f, 0x70, 0x56, 0x69, 0x65, 0x77, 0x4d, 0x6f, 0x64, 0x65, 0x10,
	0xb5, 0x02, 0x12, 0x1d, 0x0a, 0x18, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x43, 0x4d, 0x5f, 0x53, 0x65,
	0x74, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x10, 0xb6,
	0x02, 0x12, 0x18, 0x0a, 0x13, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x43, 0x4d, 0x5f, 0x53, 0x77, 0x61,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0xb7, 0x02, 0x12, 0x17, 0x0a, 0x12, 0x44,
	0x4f, 0x54, 0x41, 0x5f, 0x43, 0x4d, 0x5f, 0x53, 0x77, 0x61, 0x70, 0x41, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x10, 0xb8, 0x02, 0x12, 0x16, 0x0a, 0x11, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x43, 0x4d, 0x5f,
	0x57, 0x6f, 0x72, 0x6c, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x10, 0xb9, 0x02, 0x12, 0x1f, 0x0a, 0x1a,
	0x44, 0x4f, 0x54, 0x41, 0x5f, 0x43, 0x4d, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x47,
	0x72, 0x61, 0x70, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x10, 0xba, 0x02, 0x12, 0x16, 0x0a,
	0x11, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x43, 0x4d, 0x5f, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x10, 0xbb, 0x02, 0x12, 0x16, 0x0a, 0x11, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x43, 0x4d,
	0x5f, 0x43, 0x68, 0x61, 0x74, 0x57, 0x68, 0x65, 0x65, 0x6c, 0x10, 0xbc, 0x02, 0x12, 0x1a, 0x0a,
	0x15, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x43, 0x4d, 0x5f, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x50, 0x6f, 0x70, 0x75, 0x70, 0x10, 0xbd, 0x02, 0x12, 0x22, 0x0a, 0x1d, 0x44, 0x4f, 0x54,
	0x41, 0x5f, 0x43, 0x4d, 0x5f, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x4c, 0x61, 0x73, 0x74, 0x48, 0x69,
	0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x10, 0xbe, 0x02, 0x12, 0x1b, 0x0a,
	0x16, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x43, 0x4d, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51,
	0x75, 0x69, 0x63, 0x6b, 0x42, 0x75, 0x79, 0x10, 0xbf, 0x02, 0x12, 0x1e, 0x0a, 0x19, 0x44, 0x4f,
	0x54, 0x41, 0x5f, 0x43, 0x4d, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x61, 0x63,
	0x68, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x10, 0xc0, 0x02, 0x12, 0x19, 0x0a, 0x14, 0x44, 0x4f,
	0x54, 0x41, 0x5f, 0x43, 0x4d, 0x5f, 0x43, 0x6f, 0x61, 0x63, 0x68, 0x48, 0x55, 0x44, 0x50, 0x69,
	0x6e, 0x67, 0x10, 0xc1, 0x02, 0x12, 0x17, 0x0a, 0x12, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x43, 0x4d,
	0x5f, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x56, 0x6f, 0x74, 0x65, 0x10, 0xc2, 0x02, 0x12, 0x26,
	0x0a, 0x21, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x43, 0x4d, 0x5f, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x41,
	0x75, 0x74, 0x6f, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x41, 0x66, 0x74, 0x65, 0x72, 0x53, 0x70,
	0x65, 0x6c, 0x6c, 0x10, 0xc3, 0x02, 0x12, 0x1e, 0x0a, 0x19, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x43,
	0x4d, 0x5f, 0x57, 0x69, 0x6c, 0x6c, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x10, 0xc4, 0x02, 0x12, 0x1b, 0x0a, 0x16, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x43,
	0x4d, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x68, 0x6f, 0x77, 0x43, 0x61, 0x73, 0x65,
	0x10, 0xc5, 0x02, 0x12, 0x21, 0x0a, 0x1c, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x43, 0x4d, 0x5f, 0x54,
	0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x48,
	0x61, 0x6c, 0x74, 0x10, 0xc6, 0x02, 0x12, 0x1d, 0x0a, 0x18, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x43,
	0x4d, 0x5f, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5a, 0x6f, 0x6f, 0x6d, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x10, 0xc7, 0x02, 0x12, 0x25, 0x0a, 0x20, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x43, 0x4d,
	0x5f, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x69, 0x6e,
	0x67, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x10, 0xc8, 0x02, 0x12, 0x33, 0x0a, 0x2e,
	0x44, 0x4f, 0x54, 0x41, 0x5f, 0x43, 0x4d, 0x5f, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x55, 0x73, 0x69, 0x6e, 0x67, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x65, 0x64,
	0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x10, 0xc9,
	0x02, 0x12, 0x1b, 0x0a, 0x16, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x43, 0x4d, 0x5f, 0x45, 0x6e, 0x65,
	0x6d, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x10, 0xca, 0x02, 0x12, 0x1a,
	0x0a, 0x15, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x43, 0x4d, 0x5f, 0x46, 0x72, 0x65, 0x65, 0x49, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x10, 0xcb, 0x02, 0x12, 0x1e, 0x0a, 0x19, 0x44, 0x4f,
	0x54, 0x41, 0x5f, 0x43, 0x4d, 0x5f, 0x42, 0x75, 0x79, 0x42, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x10, 0xcc, 0x02, 0x12, 0x1a, 0x0a, 0x15, 0x44, 0x4f,
	0x54, 0x41, 0x5f, 0x43, 0x4d, 0x5f, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x42, 0x75, 0x79, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x10, 0xcd, 0x02, 0x12, 0x1b, 0x0a, 0x16, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x43,
	0x4d, 0x5f, 0x48, 0x65, 0x72, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x65, 0x4c, 0x69, 0x6b, 0x65,
	0x10, 0xce, 0x02, 0x12, 0x1a, 0x0a, 0x15, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x43, 0x4d, 0x5f, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x10, 0xcf, 0x02, 0x12,
	0x1f, 0x0a, 0x1a, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x43, 0x4d, 0x5f, 0x54, 0x65, 0x61, 0x6d, 0x53,
	0x68, 0x6f, 0x77, 0x63, 0x61, 0x73, 0x65, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x10, 0xd0, 0x02,
	0x12, 0x18, 0x0a, 0x13, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x43, 0x4d, 0x5f, 0x48, 0x50, 0x4d, 0x61,
	0x6e, 0x61, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x10, 0xd1, 0x02, 0x12, 0x17, 0x0a, 0x12, 0x44, 0x4f,
	0x54, 0x41, 0x5f, 0x43, 0x4d, 0x5f, 0x47, 0x6c, 0x79, 0x70, 0x68, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x10, 0xd2, 0x02, 0x12, 0x23, 0x0a, 0x1e, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x43, 0x4d, 0x5f, 0x54,
	0x65, 0x61, 0x6d, 0x53, 0x68, 0x6f, 0x77, 0x63, 0x61, 0x73, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x10, 0xd3, 0x02, 0x12, 0x1d, 0x0a, 0x18, 0x44, 0x4f, 0x54, 0x41,
	0x5f, 0x43, 0x4d, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x68, 0x6f, 0x77,
	0x63, 0x61, 0x73, 0x65, 0x10, 0xd4, 0x02, 0x12, 0x1c, 0x0a, 0x17, 0x44, 0x4f, 0x54, 0x41, 0x5f,
	0x43, 0x4d, 0x5f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x4e, 0x59, 0x32, 0x30, 0x31, 0x35, 0x43,
	0x6d, 0x64, 0x10, 0xd5, 0x02, 0x12, 0x23, 0x0a, 0x1e, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x43, 0x4d,
	0x5f, 0x46, 0x69, 0x6c, 0x6c, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x57,
	0x69, 0x74, 0x68, 0x42, 0x6f, 0x74, 0x73, 0x10, 0xd6, 0x02, 0x12, 0x15, 0x0a, 0x10, 0x44, 0x4f,
	0x54, 0x41, 0x5f, 0x43, 0x4d, 0x5f, 0x44, 0x65, 0x6d, 0x6f, 0x48, 0x65, 0x72, 0x6f, 0x10, 0xd7,
	0x02, 0x12, 0x24, 0x0a, 0x1f, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x43, 0x4d, 0x5f, 0x41, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x54, 0x6f, 0x67,
	0x67, 0x6c, 0x65, 0x64, 0x10, 0xd8, 0x02, 0x12, 0x1c, 0x0a, 0x17, 0x44, 0x4f, 0x54, 0x41, 0x5f,
	0x43, 0x4d, 0x5f, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x72, 0x74, 0x55,
	0x73, 0x65, 0x10, 0xd9, 0x02, 0x12, 0x1c, 0x0a, 0x17, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x43, 0x4d,
	0x5f, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x10, 0xda, 0x02, 0x12, 0x1c, 0x0a, 0x17, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x43, 0x4d, 0x5f, 0x43,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x72, 0x6f, 0x6c, 0x6c, 0x10, 0xdb,
	0x02, 0x12, 0x18, 0x0a, 0x13, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x43, 0x4d, 0x5f, 0x43, 0x6c, 0x69,
	0x63, 0x6b, 0x65, 0x64, 0x42, 0x75, 0x66, 0x66, 0x10, 0xdc, 0x02, 0x12, 0x16, 0x0a, 0x11, 0x44,
	0x4f, 0x54, 0x41, 0x5f, 0x43, 0x4d, 0x5f, 0x43, 0x6f, 0x69, 0x6e, 0x57, 0x61, 0x67, 0x65, 0x72,
	0x10, 0xdd, 0x02, 0x12, 0x1a, 0x0a, 0x15, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x43, 0x4d, 0x5f, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x10, 0xde, 0x02, 0x12,
	0x14, 0x0a, 0x0f, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x43, 0x4d, 0x5f, 0x58, 0x50, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x10, 0xdf, 0x02, 0x12, 0x1b, 0x0a, 0x16, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x43, 0x4d,
	0x5f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x54, 0x69, 0x70, 0x10,
	0xe1, 0x02, 0x12, 0x1a, 0x0a, 0x15, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x43, 0x4d, 0x5f, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x10, 0xe2, 0x02, 0x12, 0x17,
	0x0a, 0x12, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x43, 0x4d, 0x5f, 0x4b, 0x69, 0x6c, 0x6c, 0x4d, 0x79,
	0x48, 0x65, 0x72, 0x6f, 0x10, 0xe3, 0x02, 0x12, 0x18, 0x0a, 0x13, 0x44, 0x4f, 0x54, 0x41, 0x5f,
	0x43, 0x4d, 0x5f, 0x51, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0xe4,
	0x02, 0x12, 0x1d, 0x0a, 0x18, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x43, 0x4d, 0x5f, 0x54, 0x6f, 0x67,
	0x67, 0x6c, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x10, 0xe5, 0x02,
	0x12, 0x1b, 0x0a, 0x16, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x43, 0x4d, 0x5f, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x61, 0x6c, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x10, 0xe6, 0x02, 0x12, 0x1f, 0x0a,
	0x1a, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x43, 0x4d, 0x5f, 0x4b, 0x69, 0x6c, 0x6c, 0x63, 0x61, 0x6d,
	0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x10, 0xe7, 0x02, 0x12, 0x25,
	0x0a, 0x20, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x43, 0x4d, 0x5f, 0x53, 0x65, 0x74, 0x45, 0x6e, 0x65,
	0x6d, 0x79, 0x53, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x10, 0xe8, 0x02, 0x12, 0x24, 0x0a, 0x1f, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x43, 0x4d,
	0x5f, 0x53, 0x65, 0x74, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x57, 0x61, 0x72, 0x64, 0x50,
	0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0xe9, 0x02, 0x12, 0x15, 0x0a, 0x10, 0x44,
	0x4f, 0x54, 0x41, 0x5f, 0x43, 0x4d, 0x5f, 0x52, 0x6f, 0x6c, 0x6c, 0x44, 0x69, 0x63, 0x65, 0x10,
	0xea, 0x02, 0x12, 0x15, 0x0a, 0x10, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x43, 0x4d, 0x5f, 0x46, 0x6c,
	0x69, 0x70, 0x43, 0x6f, 0x69, 0x6e, 0x10, 0xeb, 0x02, 0x12, 0x23, 0x0a, 0x1e, 0x44, 0x4f, 0x54,
	0x41, 0x5f, 0x43, 0x4d, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d,
	0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0xec, 0x02, 0x12, 0x1c,
	0x0a, 0x17, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x43, 0x4d, 0x5f, 0x4d, 0x61, 0x6b, 0x65, 0x54, 0x65,
	0x61, 0x6d, 0x43, 0x61, 0x70, 0x74, 0x61, 0x69, 0x6e, 0x10, 0xed, 0x02, 0x12, 0x1b, 0x0a, 0x16,
	0x44, 0x4f, 0x54, 0x41, 0x5f, 0x43, 0x4d, 0x5f, 0x43, 0x6f, 0x69, 0x6e, 0x57, 0x61, 0x67, 0x65,
	0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x10, 0xee, 0x02, 0x12, 0x16, 0x0a, 0x11, 0x44, 0x4f, 0x54,
	0x41, 0x5f, 0x43, 0x4d, 0x5f, 0x52, 0x61, 0x6e, 0x6b, 0x57, 0x61, 0x67, 0x65, 0x72, 0x10, 0xef,
	0x02, 0x12, 0x21, 0x0a, 0x1c, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x43, 0x4d, 0x5f, 0x44, 0x69, 0x73,
	0x6d, 0x69, 0x73, 0x73, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x50, 0x6f, 0x70, 0x75, 0x70,
	0x73, 0x10, 0xf0, 0x02, 0x12, 0x26, 0x0a, 0x21, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x43, 0x4d, 0x5f,
	0x48, 0x65, 0x6c, 0x70, 0x54, 0x69, 0x70, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x10, 0xf1, 0x02, 0x12, 0x20, 0x0a, 0x1b,
	0x44, 0x4f, 0x54, 0x41, 0x5f, 0x43, 0x4d, 0x5f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x48, 0x61, 0x6c, 0x74, 0x10, 0xf2, 0x02, 0x12, 0x21,
	0x0a, 0x1c, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x43, 0x4d, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x42, 0x75, 0x6c, 0x6b, 0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x4c, 0x6f, 0x67, 0x10, 0xf3,
	0x02, 0x12, 0x27, 0x0a, 0x22, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x43, 0x4d, 0x5f, 0x41, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x44, 0x72, 0x61, 0x66, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x10, 0xf4, 0x02, 0x12, 0x1e, 0x0a, 0x19, 0x44, 0x4f,
	0x54, 0x41, 0x5f, 0x43, 0x4d, 0x5f, 0x47, 0x75, 0x69, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xf5, 0x02, 0x12, 0x1a, 0x0a, 0x15, 0x44, 0x4f,
	0x54, 0x41, 0x5f, 0x43, 0x4d, 0x5f, 0x47, 0x75, 0x69, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x10, 0xf6, 0x02, 0x12, 0x19, 0x0a, 0x14, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x43,
	0x4d, 0x5f, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x10, 0xf7,
	0x02, 0x12, 0x19, 0x0a, 0x14, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x43, 0x4d, 0x5f, 0x53, 0x61, 0x6c,
	0x75, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x10, 0xf8, 0x02, 0x12, 0x17, 0x0a, 0x12,
	0x44, 0x4f, 0x54, 0x41, 0x5f, 0x43, 0x4d, 0x5f, 0x53, 0x70, 0x72, 0x61, 0x79, 0x57, 0x68, 0x65,
	0x65, 0x6c, 0x10, 0xf9, 0x02, 0x12, 0x15, 0x0a, 0x10, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x43, 0x4d,
	0x5f, 0x54, 0x69, 0x70, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x10, 0xfa, 0x02, 0x12, 0x1f, 0x0a, 0x1a,
	0x44, 0x4f, 0x54, 0x41, 0x5f, 0x43, 0x4d, 0x5f, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x54, 0x65, 0x6c,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x10, 0xfb, 0x02, 0x12, 0x17, 0x0a,
	0x12, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x43, 0x4d, 0x5f, 0x52, 0x61, 0x64, 0x61, 0x72, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x10, 0xfc, 0x02, 0x12, 0x1c, 0x0a, 0x17, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x43,
	0x4d, 0x5f, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x65, 0x65, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x10, 0xfd, 0x02, 0x12, 0x20, 0x0a, 0x1b, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x43, 0x4d, 0x5f,
	0x53, 0x65, 0x74, 0x43, 0x61, 0x76, 0x65, 0x72, 0x6e, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x6e, 0x74, 0x10, 0xfe, 0x02, 0x12, 0x1b, 0x0a, 0x16, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x43,
	0x4d, 0x5f, 0x50, 0x61, 0x75, 0x73, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x10, 0xff, 0x02, 0x12, 0x27, 0x0a, 0x22, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x43, 0x4d, 0x5f, 0x56,
	0x65, 0x72, 0x73, 0x75, 0x73, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x10, 0x80, 0x03, 0x12, 0x19, 0x0a, 0x14,
	0x44, 0x4f, 0x54, 0x41, 0x5f, 0x43, 0x4d, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x6f,
	0x75, 0x6e, 0x74, 0x79, 0x10, 0x81, 0x03, 0x12, 0x1f, 0x0a, 0x1a, 0x44, 0x4f, 0x54, 0x41, 0x5f,
	0x43, 0x4d, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x10, 0x82, 0x03, 0x12, 0x18, 0x0a, 0x13, 0x44, 0x4f, 0x54, 0x41,
	0x5f, 0x43, 0x4d, 0x5f, 0x50, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x10,
	0x83, 0x03, 0x42, 0x05, 0x48, 0x01, 0x80, 0x01, 0x00,
}

var (
	file_dota_clientmessages_proto_rawDescOnce sync.Once
	file_dota_clientmessages_proto_rawDescData = file_dota_clientmessages_proto_rawDesc
)

func file_dota_clientmessages_proto_rawDescGZIP() []byte {
	file_dota_clientmessages_proto_rawDescOnce.Do(func() {
		file_dota_clientmessages_proto_rawDescData = protoimpl.X.CompressGZIP(file_dota_clientmessages_proto_rawDescData)
	})
	return file_dota_clientmessages_proto_rawDescData
}

var file_dota_clientmessages_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_dota_clientmessages_proto_msgTypes = make([]protoimpl.MessageInfo, 77)
var file_dota_clientmessages_proto_goTypes = []interface{}{
	(EDotaClientMessages)(0),                                      // 0: dota.EDotaClientMessages
	(CDOTAClientMsg_UnitsAutoAttackMode_EMode)(0),                 // 1: dota.CDOTAClientMsg_UnitsAutoAttackMode.EMode
	(CDOTAClientMsg_UnitsAutoAttackMode_EUnitType)(0),             // 2: dota.CDOTAClientMsg_UnitsAutoAttackMode.EUnitType
	(*CDOTAClientMsg_MapPing)(nil),                                // 3: dota.CDOTAClientMsg_MapPing
	(*CDOTAClientMsg_ItemAlert)(nil),                              // 4: dota.CDOTAClientMsg_ItemAlert
	(*CDOTAClientMsg_EnemyItemAlert)(nil),                         // 5: dota.CDOTAClientMsg_EnemyItemAlert
	(*CDOTAClientMsg_ModifierAlert)(nil),                          // 6: dota.CDOTAClientMsg_ModifierAlert
	(*CDOTAClientMsg_ClickedBuff)(nil),                            // 7: dota.CDOTAClientMsg_ClickedBuff
	(*CDOTAClientMsg_HPManaAlert)(nil),                            // 8: dota.CDOTAClientMsg_HPManaAlert
	(*CDOTAClientMsg_GlyphAlert)(nil),                             // 9: dota.CDOTAClientMsg_GlyphAlert
	(*CDOTAClientMsg_RadarAlert)(nil),                             // 10: dota.CDOTAClientMsg_RadarAlert
	(*CDOTAClientMsg_MapLine)(nil),                                // 11: dota.CDOTAClientMsg_MapLine
	(*CDOTAClientMsg_AspectRatio)(nil),                            // 12: dota.CDOTAClientMsg_AspectRatio
	(*CDOTAClientMsg_UnitsAutoAttackMode)(nil),                    // 13: dota.CDOTAClientMsg_UnitsAutoAttackMode
	(*CDOTAClientMsg_UnitsAutoAttackAfterSpell)(nil),              // 14: dota.CDOTAClientMsg_UnitsAutoAttackAfterSpell
	(*CDOTAClientMsg_TeleportRequiresHalt)(nil),                   // 15: dota.CDOTAClientMsg_TeleportRequiresHalt
	(*CDOTAClientMsg_ChannelRequiresHalt)(nil),                    // 16: dota.CDOTAClientMsg_ChannelRequiresHalt
	(*CDOTAClientMsg_SearchString)(nil),                           // 17: dota.CDOTAClientMsg_SearchString
	(*CDOTAClientMsg_Pause)(nil),                                  // 18: dota.CDOTAClientMsg_Pause
	(*CDOTAClientMsg_ShopViewMode)(nil),                           // 19: dota.CDOTAClientMsg_ShopViewMode
	(*CDOTAClientMsg_SetUnitShareFlag)(nil),                       // 20: dota.CDOTAClientMsg_SetUnitShareFlag
	(*CDOTAClientMsg_SwapRequest)(nil),                            // 21: dota.CDOTAClientMsg_SwapRequest
	(*CDOTAClientMsg_SwapAccept)(nil),                             // 22: dota.CDOTAClientMsg_SwapAccept
	(*CDOTAClientMsg_WorldLine)(nil),                              // 23: dota.CDOTAClientMsg_WorldLine
	(*CDOTAClientMsg_RequestGraphUpdate)(nil),                     // 24: dota.CDOTAClientMsg_RequestGraphUpdate
	(*CDOTAClientMsg_ChatWheel)(nil),                              // 25: dota.CDOTAClientMsg_ChatWheel
	(*CDOTAClientMsg_SendStatPopup)(nil),                          // 26: dota.CDOTAClientMsg_SendStatPopup
	(*CDOTAClientMsg_DismissAllStatPopups)(nil),                   // 27: dota.CDOTAClientMsg_DismissAllStatPopups
	(*CDOTAClientMsg_BeginLastHitChallenge)(nil),                  // 28: dota.CDOTAClientMsg_BeginLastHitChallenge
	(*CDOTAClientMsg_UpdateQuickBuyItem)(nil),                     // 29: dota.CDOTAClientMsg_UpdateQuickBuyItem
	(*CDOTAClientMsg_UpdateQuickBuy)(nil),                         // 30: dota.CDOTAClientMsg_UpdateQuickBuy
	(*CDOTAClientMsg_RecordVote)(nil),                             // 31: dota.CDOTAClientMsg_RecordVote
	(*CDOTAClientMsg_WillPurchaseAlert)(nil),                      // 32: dota.CDOTAClientMsg_WillPurchaseAlert
	(*CDOTAClientMsg_BuyBackStateAlert)(nil),                      // 33: dota.CDOTAClientMsg_BuyBackStateAlert
	(*CDOTAClientMsg_QuickBuyAlert)(nil),                          // 34: dota.CDOTAClientMsg_QuickBuyAlert
	(*CDOTAClientMsg_PlayerShowCase)(nil),                         // 35: dota.CDOTAClientMsg_PlayerShowCase
	(*CDOTAClientMsg_CameraZoomAmount)(nil),                       // 36: dota.CDOTAClientMsg_CameraZoomAmount
	(*CDOTAClientMsg_BroadcasterUsingCameraman)(nil),              // 37: dota.CDOTAClientMsg_BroadcasterUsingCameraman
	(*CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator)(nil), // 38: dota.CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator
	(*CAdditionalEquipSlotClientMsg)(nil),                         // 39: dota.CAdditionalEquipSlotClientMsg
	(*CDOTAClientMsg_FreeInventory)(nil),                          // 40: dota.CDOTAClientMsg_FreeInventory
	(*CDOTAClientMsg_FillEmptySlotsWithBots)(nil),                 // 41: dota.CDOTAClientMsg_FillEmptySlotsWithBots
	(*CDOTAClientMsg_HeroStatueLike)(nil),                         // 42: dota.CDOTAClientMsg_HeroStatueLike
	(*CDOTAClientMsg_EventCNY2015Cmd)(nil),                        // 43: dota.CDOTAClientMsg_EventCNY2015Cmd
	(*CDOTAClientMsg_DemoHero)(nil),                               // 44: dota.CDOTAClientMsg_DemoHero
	(*CDOTAClientMsg_ChallengeSelect)(nil),                        // 45: dota.CDOTAClientMsg_ChallengeSelect
	(*CDOTAClientMsg_ChallengeReroll)(nil),                        // 46: dota.CDOTAClientMsg_ChallengeReroll
	(*CDOTAClientMsg_CoinWager)(nil),                              // 47: dota.CDOTAClientMsg_CoinWager
	(*CDOTAClientMsg_CoinWagerToken)(nil),                         // 48: dota.CDOTAClientMsg_CoinWagerToken
	(*CDOTAClientMsg_RankWager)(nil),                              // 49: dota.CDOTAClientMsg_RankWager
	(*CDOTAClientMsg_PlayerBounty)(nil),                           // 50: dota.CDOTAClientMsg_PlayerBounty
	(*CDOTAClientMsg_EventPointsTip)(nil),                         // 51: dota.CDOTAClientMsg_EventPointsTip
	(*CDOTAClientMsg_ExecuteOrders)(nil),                          // 52: dota.CDOTAClientMsg_ExecuteOrders
	(*CDOTAClientMsg_XPAlert)(nil),                                // 53: dota.CDOTAClientMsg_XPAlert
	(*CDOTAClientMsg_TalentTreeAlert)(nil),                        // 54: dota.CDOTAClientMsg_TalentTreeAlert
	(*CDOTAClientMsg_KillcamDamageTaken)(nil),                     // 55: dota.CDOTAClientMsg_KillcamDamageTaken
	(*CDOTAClientMsg_MatchMetadata)(nil),                          // 56: dota.CDOTAClientMsg_MatchMetadata
	(*CDOTAClientMsg_KillMyHero)(nil),                             // 57: dota.CDOTAClientMsg_KillMyHero
	(*CDOTAClientMsg_QuestStatus)(nil),                            // 58: dota.CDOTAClientMsg_QuestStatus
	(*CDOTAClientMsg_ToggleAutoattack)(nil),                       // 59: dota.CDOTAClientMsg_ToggleAutoattack
	(*CDOTAClientMsg_SpecialAbility)(nil),                         // 60: dota.CDOTAClientMsg_SpecialAbility
	(*CDOTAClientMsg_SetEnemyStartingPosition)(nil),               // 61: dota.CDOTAClientMsg_SetEnemyStartingPosition
	(*CDOTAClientMsg_SetDesiredWardPlacement)(nil),                // 62: dota.CDOTAClientMsg_SetDesiredWardPlacement
	(*CDOTAClientMsg_RollDice)(nil),                               // 63: dota.CDOTAClientMsg_RollDice
	(*CDOTAClientMsg_FlipCoin)(nil),                               // 64: dota.CDOTAClientMsg_FlipCoin
	(*CDOTAClientMsg_RequestItemSuggestions)(nil),                 // 65: dota.CDOTAClientMsg_RequestItemSuggestions
	(*CDOTAClientMsg_MakeTeamCaptain)(nil),                        // 66: dota.CDOTAClientMsg_MakeTeamCaptain
	(*CDOTAClientMsg_HelpTipSystemStateChanged)(nil),              // 67: dota.CDOTAClientMsg_HelpTipSystemStateChanged
	(*CDOTAClientMsg_RequestBulkCombatLog)(nil),                   // 68: dota.CDOTAClientMsg_RequestBulkCombatLog
	(*CDOTAClientMsg_AbilityDraftRequestAbility)(nil),             // 69: dota.CDOTAClientMsg_AbilityDraftRequestAbility
	(*CDOTAClientMsg_GuideSelectOption)(nil),                      // 70: dota.CDOTAClientMsg_GuideSelectOption
	(*CDOTAClientMsg_GuideSelected)(nil),                          // 71: dota.CDOTAClientMsg_GuideSelected
	(*CDOTAClientMsg_DamageReport)(nil),                           // 72: dota.CDOTAClientMsg_DamageReport
	(*CDOTAClientMsg_SalutePlayer)(nil),                           // 73: dota.CDOTAClientMsg_SalutePlayer
	(*CDOTAClientMsg_PingConfirm)(nil),                            // 74: dota.CDOTAClientMsg_PingConfirm
	(*CDOTAClientMsg_TipAlert)(nil),                               // 75: dota.CDOTAClientMsg_TipAlert
	(*CDOTAClientMsg_EmptyTeleportAlert)(nil),                     // 76: dota.CDOTAClientMsg_EmptyTeleportAlert
	(*CDOTAClientMsg_SetCavernMapVariant)(nil),                    // 77: dota.CDOTAClientMsg_SetCavernMapVariant
	(*CDOTAClientMsg_PauseGameOrder)(nil),                         // 78: dota.CDOTAClientMsg_PauseGameOrder
	(*CDOTAClientMsg_VersusScene_PlayerBehavior)(nil),             // 79: dota.CDOTAClientMsg_VersusScene_PlayerBehavior
	(*CDOTAMsg_LocationPing)(nil),                                 // 80: dota.CDOTAMsg_LocationPing
	(*CDOTAMsg_ItemAlert)(nil),                                    // 81: dota.CDOTAMsg_ItemAlert
	(*CDOTAMsg_MapLine)(nil),                                      // 82: dota.CDOTAMsg_MapLine
	(*CDOTAMsg_WorldLine)(nil),                                    // 83: dota.CDOTAMsg_WorldLine
	(*CDOTAMsg_SendStatPopup)(nil),                                // 84: dota.CDOTAMsg_SendStatPopup
	(*CDOTAMsg_DismissAllStatPopups)(nil),                         // 85: dota.CDOTAMsg_DismissAllStatPopups
	(EEvent)(0),                                                   // 86: dota.EEvent
	(*CDOTAMsg_UnitOrder)(nil),                                    // 87: dota.CDOTAMsg_UnitOrder
	(EDOTAVersusScenePlayerBehavior)(0),                           // 88: dota.EDOTAVersusScenePlayerBehavior
	(*VersusScene_PlayActivity)(nil),                              // 89: dota.VersusScene_PlayActivity
	(*VersusScene_ChatWheel)(nil),                                 // 90: dota.VersusScene_ChatWheel
	(*VersusScene_PlaybackRate)(nil),                              // 91: dota.VersusScene_PlaybackRate
}
var file_dota_clientmessages_proto_depIdxs = []int32{
	80, // 0: dota.CDOTAClientMsg_MapPing.location_ping:type_name -> dota.CDOTAMsg_LocationPing
	81, // 1: dota.CDOTAClientMsg_ItemAlert.item_alert:type_name -> dota.CDOTAMsg_ItemAlert
	82, // 2: dota.CDOTAClientMsg_MapLine.mapline:type_name -> dota.CDOTAMsg_MapLine
	1,  // 3: dota.CDOTAClientMsg_UnitsAutoAttackMode.mode:type_name -> dota.CDOTAClientMsg_UnitsAutoAttackMode.EMode
	2,  // 4: dota.CDOTAClientMsg_UnitsAutoAttackMode.unit_type:type_name -> dota.CDOTAClientMsg_UnitsAutoAttackMode.EUnitType
	83, // 5: dota.CDOTAClientMsg_WorldLine.worldline:type_name -> dota.CDOTAMsg_WorldLine
	84, // 6: dota.CDOTAClientMsg_SendStatPopup.statpopup:type_name -> dota.CDOTAMsg_SendStatPopup
	85, // 7: dota.CDOTAClientMsg_DismissAllStatPopups.dismissallmsg:type_name -> dota.CDOTAMsg_DismissAllStatPopups
	29, // 8: dota.CDOTAClientMsg_UpdateQuickBuy.items:type_name -> dota.CDOTAClientMsg_UpdateQuickBuyItem
	39, // 9: dota.CDOTAClientMsg_FreeInventory.equips:type_name -> dota.CAdditionalEquipSlotClientMsg
	86, // 10: dota.CDOTAClientMsg_ChallengeReroll.event_id:type_name -> dota.EEvent
	87, // 11: dota.CDOTAClientMsg_ExecuteOrders.orders:type_name -> dota.CDOTAMsg_UnitOrder
	88, // 12: dota.CDOTAClientMsg_VersusScene_PlayerBehavior.behavior:type_name -> dota.EDOTAVersusScenePlayerBehavior
	89, // 13: dota.CDOTAClientMsg_VersusScene_PlayerBehavior.play_activity:type_name -> dota.VersusScene_PlayActivity
	90, // 14: dota.CDOTAClientMsg_VersusScene_PlayerBehavior.chat_wheel:type_name -> dota.VersusScene_ChatWheel
	91, // 15: dota.CDOTAClientMsg_VersusScene_PlayerBehavior.playback_rate:type_name -> dota.VersusScene_PlaybackRate
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_dota_clientmessages_proto_init() }
func file_dota_clientmessages_proto_init() {
	if File_dota_clientmessages_proto != nil {
		return
	}
	file_dota_commonmessages_proto_init()
	file_dota_shared_enums_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_dota_clientmessages_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAClientMsg_MapPing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_clientmessages_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAClientMsg_ItemAlert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_clientmessages_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAClientMsg_EnemyItemAlert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_clientmessages_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAClientMsg_ModifierAlert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_clientmessages_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAClientMsg_ClickedBuff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_clientmessages_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAClientMsg_HPManaAlert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_clientmessages_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAClientMsg_GlyphAlert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_clientmessages_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAClientMsg_RadarAlert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_clientmessages_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAClientMsg_MapLine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_clientmessages_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAClientMsg_AspectRatio); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_clientmessages_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAClientMsg_UnitsAutoAttackMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_clientmessages_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAClientMsg_UnitsAutoAttackAfterSpell); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_clientmessages_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAClientMsg_TeleportRequiresHalt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_clientmessages_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAClientMsg_ChannelRequiresHalt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_clientmessages_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAClientMsg_SearchString); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_clientmessages_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAClientMsg_Pause); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_clientmessages_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAClientMsg_ShopViewMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_clientmessages_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAClientMsg_SetUnitShareFlag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_clientmessages_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAClientMsg_SwapRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_clientmessages_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAClientMsg_SwapAccept); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_clientmessages_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAClientMsg_WorldLine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_clientmessages_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAClientMsg_RequestGraphUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_clientmessages_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAClientMsg_ChatWheel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_clientmessages_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAClientMsg_SendStatPopup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_clientmessages_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAClientMsg_DismissAllStatPopups); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_clientmessages_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAClientMsg_BeginLastHitChallenge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_clientmessages_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAClientMsg_UpdateQuickBuyItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_clientmessages_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAClientMsg_UpdateQuickBuy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_clientmessages_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAClientMsg_RecordVote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_clientmessages_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAClientMsg_WillPurchaseAlert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_clientmessages_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAClientMsg_BuyBackStateAlert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_clientmessages_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAClientMsg_QuickBuyAlert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_clientmessages_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAClientMsg_PlayerShowCase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_clientmessages_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAClientMsg_CameraZoomAmount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_clientmessages_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAClientMsg_BroadcasterUsingCameraman); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_clientmessages_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_clientmessages_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CAdditionalEquipSlotClientMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_clientmessages_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAClientMsg_FreeInventory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_clientmessages_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAClientMsg_FillEmptySlotsWithBots); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_clientmessages_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAClientMsg_HeroStatueLike); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_clientmessages_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAClientMsg_EventCNY2015Cmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_clientmessages_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAClientMsg_DemoHero); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_clientmessages_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAClientMsg_ChallengeSelect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_clientmessages_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAClientMsg_ChallengeReroll); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_clientmessages_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAClientMsg_CoinWager); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_clientmessages_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAClientMsg_CoinWagerToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_clientmessages_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAClientMsg_RankWager); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_clientmessages_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAClientMsg_PlayerBounty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_clientmessages_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAClientMsg_EventPointsTip); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_clientmessages_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAClientMsg_ExecuteOrders); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_clientmessages_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAClientMsg_XPAlert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_clientmessages_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAClientMsg_TalentTreeAlert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_clientmessages_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAClientMsg_KillcamDamageTaken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_clientmessages_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAClientMsg_MatchMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_clientmessages_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAClientMsg_KillMyHero); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_clientmessages_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAClientMsg_QuestStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_clientmessages_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAClientMsg_ToggleAutoattack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_clientmessages_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAClientMsg_SpecialAbility); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_clientmessages_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAClientMsg_SetEnemyStartingPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_clientmessages_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAClientMsg_SetDesiredWardPlacement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_clientmessages_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAClientMsg_RollDice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_clientmessages_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAClientMsg_FlipCoin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_clientmessages_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAClientMsg_RequestItemSuggestions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_clientmessages_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAClientMsg_MakeTeamCaptain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_clientmessages_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAClientMsg_HelpTipSystemStateChanged); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_clientmessages_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAClientMsg_RequestBulkCombatLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_clientmessages_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAClientMsg_AbilityDraftRequestAbility); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_clientmessages_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAClientMsg_GuideSelectOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_clientmessages_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAClientMsg_GuideSelected); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_clientmessages_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAClientMsg_DamageReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_clientmessages_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAClientMsg_SalutePlayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_clientmessages_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAClientMsg_PingConfirm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_clientmessages_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAClientMsg_TipAlert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_clientmessages_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAClientMsg_EmptyTeleportAlert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_clientmessages_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAClientMsg_SetCavernMapVariant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_clientmessages_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAClientMsg_PauseGameOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_clientmessages_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAClientMsg_VersusScene_PlayerBehavior); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dota_clientmessages_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   77,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_dota_clientmessages_proto_goTypes,
		DependencyIndexes: file_dota_clientmessages_proto_depIdxs,
		EnumInfos:         file_dota_clientmessages_proto_enumTypes,
		MessageInfos:      file_dota_clientmessages_proto_msgTypes,
	}.Build()
	File_dota_clientmessages_proto = out.File
	file_dota_clientmessages_proto_rawDesc = nil
	file_dota_clientmessages_proto_goTypes = nil
	file_dota_clientmessages_proto_depIdxs = nil
}
