// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.6.1
// source: dota_gcmessages_common_league.proto

package dota

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ELeagueNodeGroupType int32

const (
	ELeagueNodeGroupType_INVALID_GROUP_TYPE        ELeagueNodeGroupType = 0
	ELeagueNodeGroupType_ORGANIZATIONAL            ELeagueNodeGroupType = 1
	ELeagueNodeGroupType_ROUND_ROBIN               ELeagueNodeGroupType = 2
	ELeagueNodeGroupType_SWISS                     ELeagueNodeGroupType = 3
	ELeagueNodeGroupType_BRACKET_SINGLE            ELeagueNodeGroupType = 4
	ELeagueNodeGroupType_BRACKET_DOUBLE_SEED_LOSER ELeagueNodeGroupType = 5
	ELeagueNodeGroupType_BRACKET_DOUBLE_ALL_WINNER ELeagueNodeGroupType = 6
	ELeagueNodeGroupType_SHOWMATCH                 ELeagueNodeGroupType = 7
	ELeagueNodeGroupType_GSL                       ELeagueNodeGroupType = 8
)

// Enum value maps for ELeagueNodeGroupType.
var (
	ELeagueNodeGroupType_name = map[int32]string{
		0: "INVALID_GROUP_TYPE",
		1: "ORGANIZATIONAL",
		2: "ROUND_ROBIN",
		3: "SWISS",
		4: "BRACKET_SINGLE",
		5: "BRACKET_DOUBLE_SEED_LOSER",
		6: "BRACKET_DOUBLE_ALL_WINNER",
		7: "SHOWMATCH",
		8: "GSL",
	}
	ELeagueNodeGroupType_value = map[string]int32{
		"INVALID_GROUP_TYPE":        0,
		"ORGANIZATIONAL":            1,
		"ROUND_ROBIN":               2,
		"SWISS":                     3,
		"BRACKET_SINGLE":            4,
		"BRACKET_DOUBLE_SEED_LOSER": 5,
		"BRACKET_DOUBLE_ALL_WINNER": 6,
		"SHOWMATCH":                 7,
		"GSL":                       8,
	}
)

func (x ELeagueNodeGroupType) Enum() *ELeagueNodeGroupType {
	p := new(ELeagueNodeGroupType)
	*p = x
	return p
}

func (x ELeagueNodeGroupType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ELeagueNodeGroupType) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_common_league_proto_enumTypes[0].Descriptor()
}

func (ELeagueNodeGroupType) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_common_league_proto_enumTypes[0]
}

func (x ELeagueNodeGroupType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ELeagueNodeGroupType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ELeagueNodeGroupType(num)
	return nil
}

// Deprecated: Use ELeagueNodeGroupType.Descriptor instead.
func (ELeagueNodeGroupType) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_league_proto_rawDescGZIP(), []int{0}
}

type ELeagueNodeType int32

const (
	ELeagueNodeType_INVALID_NODE_TYPE ELeagueNodeType = 0
	ELeagueNodeType_BEST_OF_ONE       ELeagueNodeType = 1
	ELeagueNodeType_BEST_OF_THREE     ELeagueNodeType = 2
	ELeagueNodeType_BEST_OF_FIVE      ELeagueNodeType = 3
	ELeagueNodeType_BEST_OF_TWO       ELeagueNodeType = 4
)

// Enum value maps for ELeagueNodeType.
var (
	ELeagueNodeType_name = map[int32]string{
		0: "INVALID_NODE_TYPE",
		1: "BEST_OF_ONE",
		2: "BEST_OF_THREE",
		3: "BEST_OF_FIVE",
		4: "BEST_OF_TWO",
	}
	ELeagueNodeType_value = map[string]int32{
		"INVALID_NODE_TYPE": 0,
		"BEST_OF_ONE":       1,
		"BEST_OF_THREE":     2,
		"BEST_OF_FIVE":      3,
		"BEST_OF_TWO":       4,
	}
)

func (x ELeagueNodeType) Enum() *ELeagueNodeType {
	p := new(ELeagueNodeType)
	*p = x
	return p
}

func (x ELeagueNodeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ELeagueNodeType) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_common_league_proto_enumTypes[1].Descriptor()
}

func (ELeagueNodeType) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_common_league_proto_enumTypes[1]
}

func (x ELeagueNodeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ELeagueNodeType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ELeagueNodeType(num)
	return nil
}

// Deprecated: Use ELeagueNodeType.Descriptor instead.
func (ELeagueNodeType) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_league_proto_rawDescGZIP(), []int{1}
}

type CMsgDOTALeagueNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             *string                            `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	NodeId           *uint32                            `protobuf:"varint,2,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	NodeGroupId      *uint32                            `protobuf:"varint,3,opt,name=node_group_id,json=nodeGroupId" json:"node_group_id,omitempty"`
	WinningNodeId    *uint32                            `protobuf:"varint,4,opt,name=winning_node_id,json=winningNodeId" json:"winning_node_id,omitempty"`
	LosingNodeId     *uint32                            `protobuf:"varint,5,opt,name=losing_node_id,json=losingNodeId" json:"losing_node_id,omitempty"`
	IncomingNodeId_1 *uint32                            `protobuf:"varint,6,opt,name=incoming_node_id_1,json=incomingNodeId1" json:"incoming_node_id_1,omitempty"`
	IncomingNodeId_2 *uint32                            `protobuf:"varint,7,opt,name=incoming_node_id_2,json=incomingNodeId2" json:"incoming_node_id_2,omitempty"`
	NodeType         *ELeagueNodeType                   `protobuf:"varint,8,opt,name=node_type,json=nodeType,enum=dota.ELeagueNodeType,def=0" json:"node_type,omitempty"`
	ScheduledTime    *uint32                            `protobuf:"varint,9,opt,name=scheduled_time,json=scheduledTime" json:"scheduled_time,omitempty"`
	ActualTime       *uint32                            `protobuf:"varint,19,opt,name=actual_time,json=actualTime" json:"actual_time,omitempty"`
	SeriesId         *uint32                            `protobuf:"varint,10,opt,name=series_id,json=seriesId" json:"series_id,omitempty"`
	TeamId_1         *uint32                            `protobuf:"varint,11,opt,name=team_id_1,json=teamId1" json:"team_id_1,omitempty"`
	TeamId_2         *uint32                            `protobuf:"varint,12,opt,name=team_id_2,json=teamId2" json:"team_id_2,omitempty"`
	Matches          []*CMsgDOTALeagueNode_MatchDetails `protobuf:"bytes,13,rep,name=matches" json:"matches,omitempty"`
	Team_1Wins       *uint32                            `protobuf:"varint,14,opt,name=team_1_wins,json=team1Wins" json:"team_1_wins,omitempty"`
	Team_2Wins       *uint32                            `protobuf:"varint,15,opt,name=team_2_wins,json=team2Wins" json:"team_2_wins,omitempty"`
	HasStarted       *bool                              `protobuf:"varint,16,opt,name=has_started,json=hasStarted" json:"has_started,omitempty"`
	IsCompleted      *bool                              `protobuf:"varint,17,opt,name=is_completed,json=isCompleted" json:"is_completed,omitempty"`
	StreamIds        []uint32                           `protobuf:"varint,18,rep,name=stream_ids,json=streamIds" json:"stream_ids,omitempty"`
}

// Default values for CMsgDOTALeagueNode fields.
const (
	Default_CMsgDOTALeagueNode_NodeType = ELeagueNodeType_INVALID_NODE_TYPE
)

func (x *CMsgDOTALeagueNode) Reset() {
	*x = CMsgDOTALeagueNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_league_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTALeagueNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTALeagueNode) ProtoMessage() {}

func (x *CMsgDOTALeagueNode) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_league_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTALeagueNode.ProtoReflect.Descriptor instead.
func (*CMsgDOTALeagueNode) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_league_proto_rawDescGZIP(), []int{0}
}

func (x *CMsgDOTALeagueNode) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CMsgDOTALeagueNode) GetNodeId() uint32 {
	if x != nil && x.NodeId != nil {
		return *x.NodeId
	}
	return 0
}

func (x *CMsgDOTALeagueNode) GetNodeGroupId() uint32 {
	if x != nil && x.NodeGroupId != nil {
		return *x.NodeGroupId
	}
	return 0
}

func (x *CMsgDOTALeagueNode) GetWinningNodeId() uint32 {
	if x != nil && x.WinningNodeId != nil {
		return *x.WinningNodeId
	}
	return 0
}

func (x *CMsgDOTALeagueNode) GetLosingNodeId() uint32 {
	if x != nil && x.LosingNodeId != nil {
		return *x.LosingNodeId
	}
	return 0
}

func (x *CMsgDOTALeagueNode) GetIncomingNodeId_1() uint32 {
	if x != nil && x.IncomingNodeId_1 != nil {
		return *x.IncomingNodeId_1
	}
	return 0
}

func (x *CMsgDOTALeagueNode) GetIncomingNodeId_2() uint32 {
	if x != nil && x.IncomingNodeId_2 != nil {
		return *x.IncomingNodeId_2
	}
	return 0
}

func (x *CMsgDOTALeagueNode) GetNodeType() ELeagueNodeType {
	if x != nil && x.NodeType != nil {
		return *x.NodeType
	}
	return Default_CMsgDOTALeagueNode_NodeType
}

func (x *CMsgDOTALeagueNode) GetScheduledTime() uint32 {
	if x != nil && x.ScheduledTime != nil {
		return *x.ScheduledTime
	}
	return 0
}

func (x *CMsgDOTALeagueNode) GetActualTime() uint32 {
	if x != nil && x.ActualTime != nil {
		return *x.ActualTime
	}
	return 0
}

func (x *CMsgDOTALeagueNode) GetSeriesId() uint32 {
	if x != nil && x.SeriesId != nil {
		return *x.SeriesId
	}
	return 0
}

func (x *CMsgDOTALeagueNode) GetTeamId_1() uint32 {
	if x != nil && x.TeamId_1 != nil {
		return *x.TeamId_1
	}
	return 0
}

func (x *CMsgDOTALeagueNode) GetTeamId_2() uint32 {
	if x != nil && x.TeamId_2 != nil {
		return *x.TeamId_2
	}
	return 0
}

func (x *CMsgDOTALeagueNode) GetMatches() []*CMsgDOTALeagueNode_MatchDetails {
	if x != nil {
		return x.Matches
	}
	return nil
}

func (x *CMsgDOTALeagueNode) GetTeam_1Wins() uint32 {
	if x != nil && x.Team_1Wins != nil {
		return *x.Team_1Wins
	}
	return 0
}

func (x *CMsgDOTALeagueNode) GetTeam_2Wins() uint32 {
	if x != nil && x.Team_2Wins != nil {
		return *x.Team_2Wins
	}
	return 0
}

func (x *CMsgDOTALeagueNode) GetHasStarted() bool {
	if x != nil && x.HasStarted != nil {
		return *x.HasStarted
	}
	return false
}

func (x *CMsgDOTALeagueNode) GetIsCompleted() bool {
	if x != nil && x.IsCompleted != nil {
		return *x.IsCompleted
	}
	return false
}

func (x *CMsgDOTALeagueNode) GetStreamIds() []uint32 {
	if x != nil {
		return x.StreamIds
	}
	return nil
}

type CMsgDOTALeagueNodeGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                          *string                                 `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	NodeGroupId                   *uint32                                 `protobuf:"varint,2,opt,name=node_group_id,json=nodeGroupId" json:"node_group_id,omitempty"`
	ParentNodeGroupId             *uint32                                 `protobuf:"varint,3,opt,name=parent_node_group_id,json=parentNodeGroupId" json:"parent_node_group_id,omitempty"`
	IncomingNodeGroupIds          []uint32                                `protobuf:"varint,4,rep,name=incoming_node_group_ids,json=incomingNodeGroupIds" json:"incoming_node_group_ids,omitempty"`
	AdvancingNodeGroupId          *uint32                                 `protobuf:"varint,5,opt,name=advancing_node_group_id,json=advancingNodeGroupId" json:"advancing_node_group_id,omitempty"`
	AdvancingTeamCount            *uint32                                 `protobuf:"varint,6,opt,name=advancing_team_count,json=advancingTeamCount" json:"advancing_team_count,omitempty"`
	TeamCount                     *uint32                                 `protobuf:"varint,7,opt,name=team_count,json=teamCount" json:"team_count,omitempty"`
	NodeGroupType                 *ELeagueNodeGroupType                   `protobuf:"varint,8,opt,name=node_group_type,json=nodeGroupType,enum=dota.ELeagueNodeGroupType,def=0" json:"node_group_type,omitempty"`
	DefaultNodeType               *ELeagueNodeType                        `protobuf:"varint,9,opt,name=default_node_type,json=defaultNodeType,enum=dota.ELeagueNodeType,def=0" json:"default_node_type,omitempty"`
	Round                         *uint32                                 `protobuf:"varint,10,opt,name=round" json:"round,omitempty"`
	MaxRounds                     *uint32                                 `protobuf:"varint,11,opt,name=max_rounds,json=maxRounds" json:"max_rounds,omitempty"`
	IsTiebreaker                  *bool                                   `protobuf:"varint,12,opt,name=is_tiebreaker,json=isTiebreaker" json:"is_tiebreaker,omitempty"`
	IsFinalGroup                  *bool                                   `protobuf:"varint,13,opt,name=is_final_group,json=isFinalGroup" json:"is_final_group,omitempty"`
	IsCompleted                   *bool                                   `protobuf:"varint,14,opt,name=is_completed,json=isCompleted" json:"is_completed,omitempty"`
	Phase                         *ELeaguePhase                           `protobuf:"varint,18,opt,name=phase,enum=dota.ELeaguePhase,def=0" json:"phase,omitempty"`
	Region                        *ELeagueRegion                          `protobuf:"varint,19,opt,name=region,enum=dota.ELeagueRegion,def=0" json:"region,omitempty"`
	StartTime                     *uint32                                 `protobuf:"varint,20,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	EndTime                       *uint32                                 `protobuf:"varint,21,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
	SecondaryAdvancingNodeGroupId *uint32                                 `protobuf:"varint,22,opt,name=secondary_advancing_node_group_id,json=secondaryAdvancingNodeGroupId" json:"secondary_advancing_node_group_id,omitempty"`
	SecondaryAdvancingTeamCount   *uint32                                 `protobuf:"varint,23,opt,name=secondary_advancing_team_count,json=secondaryAdvancingTeamCount" json:"secondary_advancing_team_count,omitempty"`
	TertiaryAdvancingNodeGroupId  *uint32                                 `protobuf:"varint,24,opt,name=tertiary_advancing_node_group_id,json=tertiaryAdvancingNodeGroupId" json:"tertiary_advancing_node_group_id,omitempty"`
	TertiaryAdvancingTeamCount    *uint32                                 `protobuf:"varint,25,opt,name=tertiary_advancing_team_count,json=tertiaryAdvancingTeamCount" json:"tertiary_advancing_team_count,omitempty"`
	EliminationDpcPoints          *uint32                                 `protobuf:"varint,26,opt,name=elimination_dpc_points,json=eliminationDpcPoints" json:"elimination_dpc_points,omitempty"`
	TeamStandings                 []*CMsgDOTALeagueNodeGroup_TeamStanding `protobuf:"bytes,15,rep,name=team_standings,json=teamStandings" json:"team_standings,omitempty"`
	Nodes                         []*CMsgDOTALeagueNode                   `protobuf:"bytes,16,rep,name=nodes" json:"nodes,omitempty"`
	NodeGroups                    []*CMsgDOTALeagueNodeGroup              `protobuf:"bytes,17,rep,name=node_groups,json=nodeGroups" json:"node_groups,omitempty"`
}

// Default values for CMsgDOTALeagueNodeGroup fields.
const (
	Default_CMsgDOTALeagueNodeGroup_NodeGroupType   = ELeagueNodeGroupType_INVALID_GROUP_TYPE
	Default_CMsgDOTALeagueNodeGroup_DefaultNodeType = ELeagueNodeType_INVALID_NODE_TYPE
	Default_CMsgDOTALeagueNodeGroup_Phase           = ELeaguePhase_LEAGUE_PHASE_UNSET
	Default_CMsgDOTALeagueNodeGroup_Region          = ELeagueRegion_LEAGUE_REGION_UNSET
)

func (x *CMsgDOTALeagueNodeGroup) Reset() {
	*x = CMsgDOTALeagueNodeGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_league_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTALeagueNodeGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTALeagueNodeGroup) ProtoMessage() {}

func (x *CMsgDOTALeagueNodeGroup) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_league_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTALeagueNodeGroup.ProtoReflect.Descriptor instead.
func (*CMsgDOTALeagueNodeGroup) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_league_proto_rawDescGZIP(), []int{1}
}

func (x *CMsgDOTALeagueNodeGroup) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CMsgDOTALeagueNodeGroup) GetNodeGroupId() uint32 {
	if x != nil && x.NodeGroupId != nil {
		return *x.NodeGroupId
	}
	return 0
}

func (x *CMsgDOTALeagueNodeGroup) GetParentNodeGroupId() uint32 {
	if x != nil && x.ParentNodeGroupId != nil {
		return *x.ParentNodeGroupId
	}
	return 0
}

func (x *CMsgDOTALeagueNodeGroup) GetIncomingNodeGroupIds() []uint32 {
	if x != nil {
		return x.IncomingNodeGroupIds
	}
	return nil
}

func (x *CMsgDOTALeagueNodeGroup) GetAdvancingNodeGroupId() uint32 {
	if x != nil && x.AdvancingNodeGroupId != nil {
		return *x.AdvancingNodeGroupId
	}
	return 0
}

func (x *CMsgDOTALeagueNodeGroup) GetAdvancingTeamCount() uint32 {
	if x != nil && x.AdvancingTeamCount != nil {
		return *x.AdvancingTeamCount
	}
	return 0
}

func (x *CMsgDOTALeagueNodeGroup) GetTeamCount() uint32 {
	if x != nil && x.TeamCount != nil {
		return *x.TeamCount
	}
	return 0
}

func (x *CMsgDOTALeagueNodeGroup) GetNodeGroupType() ELeagueNodeGroupType {
	if x != nil && x.NodeGroupType != nil {
		return *x.NodeGroupType
	}
	return Default_CMsgDOTALeagueNodeGroup_NodeGroupType
}

func (x *CMsgDOTALeagueNodeGroup) GetDefaultNodeType() ELeagueNodeType {
	if x != nil && x.DefaultNodeType != nil {
		return *x.DefaultNodeType
	}
	return Default_CMsgDOTALeagueNodeGroup_DefaultNodeType
}

func (x *CMsgDOTALeagueNodeGroup) GetRound() uint32 {
	if x != nil && x.Round != nil {
		return *x.Round
	}
	return 0
}

func (x *CMsgDOTALeagueNodeGroup) GetMaxRounds() uint32 {
	if x != nil && x.MaxRounds != nil {
		return *x.MaxRounds
	}
	return 0
}

func (x *CMsgDOTALeagueNodeGroup) GetIsTiebreaker() bool {
	if x != nil && x.IsTiebreaker != nil {
		return *x.IsTiebreaker
	}
	return false
}

func (x *CMsgDOTALeagueNodeGroup) GetIsFinalGroup() bool {
	if x != nil && x.IsFinalGroup != nil {
		return *x.IsFinalGroup
	}
	return false
}

func (x *CMsgDOTALeagueNodeGroup) GetIsCompleted() bool {
	if x != nil && x.IsCompleted != nil {
		return *x.IsCompleted
	}
	return false
}

func (x *CMsgDOTALeagueNodeGroup) GetPhase() ELeaguePhase {
	if x != nil && x.Phase != nil {
		return *x.Phase
	}
	return Default_CMsgDOTALeagueNodeGroup_Phase
}

func (x *CMsgDOTALeagueNodeGroup) GetRegion() ELeagueRegion {
	if x != nil && x.Region != nil {
		return *x.Region
	}
	return Default_CMsgDOTALeagueNodeGroup_Region
}

func (x *CMsgDOTALeagueNodeGroup) GetStartTime() uint32 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *CMsgDOTALeagueNodeGroup) GetEndTime() uint32 {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return 0
}

func (x *CMsgDOTALeagueNodeGroup) GetSecondaryAdvancingNodeGroupId() uint32 {
	if x != nil && x.SecondaryAdvancingNodeGroupId != nil {
		return *x.SecondaryAdvancingNodeGroupId
	}
	return 0
}

func (x *CMsgDOTALeagueNodeGroup) GetSecondaryAdvancingTeamCount() uint32 {
	if x != nil && x.SecondaryAdvancingTeamCount != nil {
		return *x.SecondaryAdvancingTeamCount
	}
	return 0
}

func (x *CMsgDOTALeagueNodeGroup) GetTertiaryAdvancingNodeGroupId() uint32 {
	if x != nil && x.TertiaryAdvancingNodeGroupId != nil {
		return *x.TertiaryAdvancingNodeGroupId
	}
	return 0
}

func (x *CMsgDOTALeagueNodeGroup) GetTertiaryAdvancingTeamCount() uint32 {
	if x != nil && x.TertiaryAdvancingTeamCount != nil {
		return *x.TertiaryAdvancingTeamCount
	}
	return 0
}

func (x *CMsgDOTALeagueNodeGroup) GetEliminationDpcPoints() uint32 {
	if x != nil && x.EliminationDpcPoints != nil {
		return *x.EliminationDpcPoints
	}
	return 0
}

func (x *CMsgDOTALeagueNodeGroup) GetTeamStandings() []*CMsgDOTALeagueNodeGroup_TeamStanding {
	if x != nil {
		return x.TeamStandings
	}
	return nil
}

func (x *CMsgDOTALeagueNodeGroup) GetNodes() []*CMsgDOTALeagueNode {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *CMsgDOTALeagueNodeGroup) GetNodeGroups() []*CMsgDOTALeagueNodeGroup {
	if x != nil {
		return x.NodeGroups
	}
	return nil
}

type CMsgDOTALeague struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info              *CMsgDOTALeague_Info         `protobuf:"bytes,1,opt,name=info" json:"info,omitempty"`
	PrizePool         *CMsgDOTALeague_PrizePool    `protobuf:"bytes,2,opt,name=prize_pool,json=prizePool" json:"prize_pool,omitempty"`
	Admins            []*CMsgDOTALeague_Admin      `protobuf:"bytes,3,rep,name=admins" json:"admins,omitempty"`
	Streams           []*CMsgDOTALeague_Stream     `protobuf:"bytes,4,rep,name=streams" json:"streams,omitempty"`
	NodeGroups        []*CMsgDOTALeagueNodeGroup   `protobuf:"bytes,5,rep,name=node_groups,json=nodeGroups" json:"node_groups,omitempty"`
	SeriesInfos       []*CMsgDOTALeague_SeriesInfo `protobuf:"bytes,6,rep,name=series_infos,json=seriesInfos" json:"series_infos,omitempty"`
	RegisteredPlayers []*CMsgDOTALeague_Player     `protobuf:"bytes,7,rep,name=registered_players,json=registeredPlayers" json:"registered_players,omitempty"`
}

func (x *CMsgDOTALeague) Reset() {
	*x = CMsgDOTALeague{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_league_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTALeague) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTALeague) ProtoMessage() {}

func (x *CMsgDOTALeague) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_league_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTALeague.ProtoReflect.Descriptor instead.
func (*CMsgDOTALeague) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_league_proto_rawDescGZIP(), []int{2}
}

func (x *CMsgDOTALeague) GetInfo() *CMsgDOTALeague_Info {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *CMsgDOTALeague) GetPrizePool() *CMsgDOTALeague_PrizePool {
	if x != nil {
		return x.PrizePool
	}
	return nil
}

func (x *CMsgDOTALeague) GetAdmins() []*CMsgDOTALeague_Admin {
	if x != nil {
		return x.Admins
	}
	return nil
}

func (x *CMsgDOTALeague) GetStreams() []*CMsgDOTALeague_Stream {
	if x != nil {
		return x.Streams
	}
	return nil
}

func (x *CMsgDOTALeague) GetNodeGroups() []*CMsgDOTALeagueNodeGroup {
	if x != nil {
		return x.NodeGroups
	}
	return nil
}

func (x *CMsgDOTALeague) GetSeriesInfos() []*CMsgDOTALeague_SeriesInfo {
	if x != nil {
		return x.SeriesInfos
	}
	return nil
}

func (x *CMsgDOTALeague) GetRegisteredPlayers() []*CMsgDOTALeague_Player {
	if x != nil {
		return x.RegisteredPlayers
	}
	return nil
}

type CMsgDOTALeagueInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeagueId           *uint32        `protobuf:"varint,1,opt,name=league_id,json=leagueId" json:"league_id,omitempty"`
	Name               *string        `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Tier               *ELeagueTier   `protobuf:"varint,3,opt,name=tier,enum=dota.ELeagueTier,def=0" json:"tier,omitempty"`
	Region             *ELeagueRegion `protobuf:"varint,4,opt,name=region,enum=dota.ELeagueRegion,def=0" json:"region,omitempty"`
	MostRecentActivity *uint32        `protobuf:"varint,5,opt,name=most_recent_activity,json=mostRecentActivity" json:"most_recent_activity,omitempty"`
	TotalPrizePool     *uint32        `protobuf:"varint,6,opt,name=total_prize_pool,json=totalPrizePool" json:"total_prize_pool,omitempty"`
	StartTimestamp     *uint32        `protobuf:"varint,7,opt,name=start_timestamp,json=startTimestamp" json:"start_timestamp,omitempty"`
	EndTimestamp       *uint32        `protobuf:"varint,8,opt,name=end_timestamp,json=endTimestamp" json:"end_timestamp,omitempty"`
	Status             *uint32        `protobuf:"varint,9,opt,name=status" json:"status,omitempty"`
}

// Default values for CMsgDOTALeagueInfo fields.
const (
	Default_CMsgDOTALeagueInfo_Tier   = ELeagueTier_LEAGUE_TIER_UNSET
	Default_CMsgDOTALeagueInfo_Region = ELeagueRegion_LEAGUE_REGION_UNSET
)

func (x *CMsgDOTALeagueInfo) Reset() {
	*x = CMsgDOTALeagueInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_league_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTALeagueInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTALeagueInfo) ProtoMessage() {}

func (x *CMsgDOTALeagueInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_league_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTALeagueInfo.ProtoReflect.Descriptor instead.
func (*CMsgDOTALeagueInfo) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_league_proto_rawDescGZIP(), []int{3}
}

func (x *CMsgDOTALeagueInfo) GetLeagueId() uint32 {
	if x != nil && x.LeagueId != nil {
		return *x.LeagueId
	}
	return 0
}

func (x *CMsgDOTALeagueInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CMsgDOTALeagueInfo) GetTier() ELeagueTier {
	if x != nil && x.Tier != nil {
		return *x.Tier
	}
	return Default_CMsgDOTALeagueInfo_Tier
}

func (x *CMsgDOTALeagueInfo) GetRegion() ELeagueRegion {
	if x != nil && x.Region != nil {
		return *x.Region
	}
	return Default_CMsgDOTALeagueInfo_Region
}

func (x *CMsgDOTALeagueInfo) GetMostRecentActivity() uint32 {
	if x != nil && x.MostRecentActivity != nil {
		return *x.MostRecentActivity
	}
	return 0
}

func (x *CMsgDOTALeagueInfo) GetTotalPrizePool() uint32 {
	if x != nil && x.TotalPrizePool != nil {
		return *x.TotalPrizePool
	}
	return 0
}

func (x *CMsgDOTALeagueInfo) GetStartTimestamp() uint32 {
	if x != nil && x.StartTimestamp != nil {
		return *x.StartTimestamp
	}
	return 0
}

func (x *CMsgDOTALeagueInfo) GetEndTimestamp() uint32 {
	if x != nil && x.EndTimestamp != nil {
		return *x.EndTimestamp
	}
	return 0
}

func (x *CMsgDOTALeagueInfo) GetStatus() uint32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

type CMsgDOTALeagueInfoList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*CMsgDOTALeagueInfo `protobuf:"bytes,1,rep,name=infos" json:"infos,omitempty"`
}

func (x *CMsgDOTALeagueInfoList) Reset() {
	*x = CMsgDOTALeagueInfoList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_league_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTALeagueInfoList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTALeagueInfoList) ProtoMessage() {}

func (x *CMsgDOTALeagueInfoList) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_league_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTALeagueInfoList.ProtoReflect.Descriptor instead.
func (*CMsgDOTALeagueInfoList) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_league_proto_rawDescGZIP(), []int{4}
}

func (x *CMsgDOTALeagueInfoList) GetInfos() []*CMsgDOTALeagueInfo {
	if x != nil {
		return x.Infos
	}
	return nil
}

type CMsgDOTALeagueLiveGames struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Games []*CMsgDOTALeagueLiveGames_LiveGame `protobuf:"bytes,1,rep,name=games" json:"games,omitempty"`
}

func (x *CMsgDOTALeagueLiveGames) Reset() {
	*x = CMsgDOTALeagueLiveGames{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_league_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTALeagueLiveGames) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTALeagueLiveGames) ProtoMessage() {}

func (x *CMsgDOTALeagueLiveGames) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_league_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTALeagueLiveGames.ProtoReflect.Descriptor instead.
func (*CMsgDOTALeagueLiveGames) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_league_proto_rawDescGZIP(), []int{5}
}

func (x *CMsgDOTALeagueLiveGames) GetGames() []*CMsgDOTALeagueLiveGames_LiveGame {
	if x != nil {
		return x.Games
	}
	return nil
}

type CMsgDOTALeagueMessages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messages []*CMsgDOTALeagueMessages_Message `protobuf:"bytes,1,rep,name=messages" json:"messages,omitempty"`
}

func (x *CMsgDOTALeagueMessages) Reset() {
	*x = CMsgDOTALeagueMessages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_league_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTALeagueMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTALeagueMessages) ProtoMessage() {}

func (x *CMsgDOTALeagueMessages) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_league_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTALeagueMessages.ProtoReflect.Descriptor instead.
func (*CMsgDOTALeagueMessages) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_league_proto_rawDescGZIP(), []int{6}
}

func (x *CMsgDOTALeagueMessages) GetMessages() []*CMsgDOTALeagueMessages_Message {
	if x != nil {
		return x.Messages
	}
	return nil
}

type CMsgDOTALeaguePrizePool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrizePool          *uint32  `protobuf:"varint,1,opt,name=prize_pool,json=prizePool" json:"prize_pool,omitempty"`
	IncrementPerSecond *float32 `protobuf:"fixed32,2,opt,name=increment_per_second,json=incrementPerSecond" json:"increment_per_second,omitempty"`
}

func (x *CMsgDOTALeaguePrizePool) Reset() {
	*x = CMsgDOTALeaguePrizePool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_league_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTALeaguePrizePool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTALeaguePrizePool) ProtoMessage() {}

func (x *CMsgDOTALeaguePrizePool) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_league_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTALeaguePrizePool.ProtoReflect.Descriptor instead.
func (*CMsgDOTALeaguePrizePool) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_league_proto_rawDescGZIP(), []int{7}
}

func (x *CMsgDOTALeaguePrizePool) GetPrizePool() uint32 {
	if x != nil && x.PrizePool != nil {
		return *x.PrizePool
	}
	return 0
}

func (x *CMsgDOTALeaguePrizePool) GetIncrementPerSecond() float32 {
	if x != nil && x.IncrementPerSecond != nil {
		return *x.IncrementPerSecond
	}
	return 0
}

type CMsgDOTALeagueInfoListAdminsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgDOTALeagueInfoListAdminsRequest) Reset() {
	*x = CMsgDOTALeagueInfoListAdminsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_league_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTALeagueInfoListAdminsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTALeagueInfoListAdminsRequest) ProtoMessage() {}

func (x *CMsgDOTALeagueInfoListAdminsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_league_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTALeagueInfoListAdminsRequest.ProtoReflect.Descriptor instead.
func (*CMsgDOTALeagueInfoListAdminsRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_league_proto_rawDescGZIP(), []int{8}
}

type CMsgDOTALeagueNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeagueId *uint32 `protobuf:"varint,1,opt,name=league_id,json=leagueId" json:"league_id,omitempty"`
	NodeId   *uint32 `protobuf:"varint,2,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
}

func (x *CMsgDOTALeagueNodeRequest) Reset() {
	*x = CMsgDOTALeagueNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_league_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTALeagueNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTALeagueNodeRequest) ProtoMessage() {}

func (x *CMsgDOTALeagueNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_league_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTALeagueNodeRequest.ProtoReflect.Descriptor instead.
func (*CMsgDOTALeagueNodeRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_league_proto_rawDescGZIP(), []int{9}
}

func (x *CMsgDOTALeagueNodeRequest) GetLeagueId() uint32 {
	if x != nil && x.LeagueId != nil {
		return *x.LeagueId
	}
	return 0
}

func (x *CMsgDOTALeagueNodeRequest) GetNodeId() uint32 {
	if x != nil && x.NodeId != nil {
		return *x.NodeId
	}
	return 0
}

type CMsgDOTALeagueNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node *CMsgDOTALeagueNode `protobuf:"bytes,1,opt,name=node" json:"node,omitempty"`
}

func (x *CMsgDOTALeagueNodeResponse) Reset() {
	*x = CMsgDOTALeagueNodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_league_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTALeagueNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTALeagueNodeResponse) ProtoMessage() {}

func (x *CMsgDOTALeagueNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_league_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTALeagueNodeResponse.ProtoReflect.Descriptor instead.
func (*CMsgDOTALeagueNodeResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_league_proto_rawDescGZIP(), []int{10}
}

func (x *CMsgDOTALeagueNodeResponse) GetNode() *CMsgDOTALeagueNode {
	if x != nil {
		return x.Node
	}
	return nil
}

type CMsgDOTALeagueAvailableLobbyNodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeagueId *uint32 `protobuf:"varint,1,opt,name=league_id,json=leagueId" json:"league_id,omitempty"`
}

func (x *CMsgDOTALeagueAvailableLobbyNodesRequest) Reset() {
	*x = CMsgDOTALeagueAvailableLobbyNodesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_league_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTALeagueAvailableLobbyNodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTALeagueAvailableLobbyNodesRequest) ProtoMessage() {}

func (x *CMsgDOTALeagueAvailableLobbyNodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_league_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTALeagueAvailableLobbyNodesRequest.ProtoReflect.Descriptor instead.
func (*CMsgDOTALeagueAvailableLobbyNodesRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_league_proto_rawDescGZIP(), []int{11}
}

func (x *CMsgDOTALeagueAvailableLobbyNodesRequest) GetLeagueId() uint32 {
	if x != nil && x.LeagueId != nil {
		return *x.LeagueId
	}
	return 0
}

type CMsgDOTALeagueAvailableLobbyNodes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeInfos []*CMsgDOTALeagueAvailableLobbyNodes_NodeInfo `protobuf:"bytes,1,rep,name=node_infos,json=nodeInfos" json:"node_infos,omitempty"`
}

func (x *CMsgDOTALeagueAvailableLobbyNodes) Reset() {
	*x = CMsgDOTALeagueAvailableLobbyNodes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_league_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTALeagueAvailableLobbyNodes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTALeagueAvailableLobbyNodes) ProtoMessage() {}

func (x *CMsgDOTALeagueAvailableLobbyNodes) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_league_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTALeagueAvailableLobbyNodes.ProtoReflect.Descriptor instead.
func (*CMsgDOTALeagueAvailableLobbyNodes) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_league_proto_rawDescGZIP(), []int{12}
}

func (x *CMsgDOTALeagueAvailableLobbyNodes) GetNodeInfos() []*CMsgDOTALeagueAvailableLobbyNodes_NodeInfo {
	if x != nil {
		return x.NodeInfos
	}
	return nil
}

type CMsgDOTALeagueNodeResults struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeResults []*CMsgDOTALeagueNodeResults_Result `protobuf:"bytes,1,rep,name=node_results,json=nodeResults" json:"node_results,omitempty"`
}

func (x *CMsgDOTALeagueNodeResults) Reset() {
	*x = CMsgDOTALeagueNodeResults{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_league_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTALeagueNodeResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTALeagueNodeResults) ProtoMessage() {}

func (x *CMsgDOTALeagueNodeResults) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_league_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTALeagueNodeResults.ProtoReflect.Descriptor instead.
func (*CMsgDOTALeagueNodeResults) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_league_proto_rawDescGZIP(), []int{13}
}

func (x *CMsgDOTALeagueNodeResults) GetNodeResults() []*CMsgDOTALeagueNodeResults_Result {
	if x != nil {
		return x.NodeResults
	}
	return nil
}

type CMsgDOTADPCLeagueResults struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*CMsgDOTADPCLeagueResults_Result `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
	Points  []uint32                           `protobuf:"varint,2,rep,name=points" json:"points,omitempty"`
	Dollars []uint32                           `protobuf:"varint,3,rep,name=dollars" json:"dollars,omitempty"`
}

func (x *CMsgDOTADPCLeagueResults) Reset() {
	*x = CMsgDOTADPCLeagueResults{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_league_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTADPCLeagueResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTADPCLeagueResults) ProtoMessage() {}

func (x *CMsgDOTADPCLeagueResults) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_league_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTADPCLeagueResults.ProtoReflect.Descriptor instead.
func (*CMsgDOTADPCLeagueResults) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_league_proto_rawDescGZIP(), []int{14}
}

func (x *CMsgDOTADPCLeagueResults) GetResults() []*CMsgDOTADPCLeagueResults_Result {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *CMsgDOTADPCLeagueResults) GetPoints() []uint32 {
	if x != nil {
		return x.Points
	}
	return nil
}

func (x *CMsgDOTADPCLeagueResults) GetDollars() []uint32 {
	if x != nil {
		return x.Dollars
	}
	return nil
}

type CMsgDOTADPCTeamResults struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*CMsgDOTADPCTeamResults_Result `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
}

func (x *CMsgDOTADPCTeamResults) Reset() {
	*x = CMsgDOTADPCTeamResults{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_league_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTADPCTeamResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTADPCTeamResults) ProtoMessage() {}

func (x *CMsgDOTADPCTeamResults) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_league_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTADPCTeamResults.ProtoReflect.Descriptor instead.
func (*CMsgDOTADPCTeamResults) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_league_proto_rawDescGZIP(), []int{15}
}

func (x *CMsgDOTADPCTeamResults) GetResults() []*CMsgDOTADPCTeamResults_Result {
	if x != nil {
		return x.Results
	}
	return nil
}

type CMsgDOTADPCSeasonResults struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*CMsgDOTADPCSeasonResults_TeamResult `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
}

func (x *CMsgDOTADPCSeasonResults) Reset() {
	*x = CMsgDOTADPCSeasonResults{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_league_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTADPCSeasonResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTADPCSeasonResults) ProtoMessage() {}

func (x *CMsgDOTADPCSeasonResults) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_league_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTADPCSeasonResults.ProtoReflect.Descriptor instead.
func (*CMsgDOTADPCSeasonResults) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_league_proto_rawDescGZIP(), []int{16}
}

func (x *CMsgDOTADPCSeasonResults) GetResults() []*CMsgDOTADPCSeasonResults_TeamResult {
	if x != nil {
		return x.Results
	}
	return nil
}

type CMsgDOTALeagueNode_MatchDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId       *uint64 `protobuf:"varint,1,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	WinningTeamId *uint32 `protobuf:"varint,2,opt,name=winning_team_id,json=winningTeamId" json:"winning_team_id,omitempty"`
}

func (x *CMsgDOTALeagueNode_MatchDetails) Reset() {
	*x = CMsgDOTALeagueNode_MatchDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_league_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTALeagueNode_MatchDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTALeagueNode_MatchDetails) ProtoMessage() {}

func (x *CMsgDOTALeagueNode_MatchDetails) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_league_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTALeagueNode_MatchDetails.ProtoReflect.Descriptor instead.
func (*CMsgDOTALeagueNode_MatchDetails) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_league_proto_rawDescGZIP(), []int{0, 0}
}

func (x *CMsgDOTALeagueNode_MatchDetails) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgDOTALeagueNode_MatchDetails) GetWinningTeamId() uint32 {
	if x != nil && x.WinningTeamId != nil {
		return *x.WinningTeamId
	}
	return 0
}

type CMsgDOTALeagueNodeGroup_TeamStanding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Standing    *uint32 `protobuf:"varint,1,opt,name=standing" json:"standing,omitempty"`
	TeamId      *uint32 `protobuf:"varint,2,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	TeamName    *string `protobuf:"bytes,3,opt,name=team_name,json=teamName" json:"team_name,omitempty"`
	TeamTag     *string `protobuf:"bytes,4,opt,name=team_tag,json=teamTag" json:"team_tag,omitempty"`
	TeamLogo    *uint64 `protobuf:"varint,5,opt,name=team_logo,json=teamLogo" json:"team_logo,omitempty"`
	TeamLogoUrl *string `protobuf:"bytes,6,opt,name=team_logo_url,json=teamLogoUrl" json:"team_logo_url,omitempty"`
	Wins        *uint32 `protobuf:"varint,7,opt,name=wins" json:"wins,omitempty"`
	Losses      *uint32 `protobuf:"varint,8,opt,name=losses" json:"losses,omitempty"`
	Score       *int64  `protobuf:"varint,9,opt,name=score" json:"score,omitempty"`
}

func (x *CMsgDOTALeagueNodeGroup_TeamStanding) Reset() {
	*x = CMsgDOTALeagueNodeGroup_TeamStanding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_league_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTALeagueNodeGroup_TeamStanding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTALeagueNodeGroup_TeamStanding) ProtoMessage() {}

func (x *CMsgDOTALeagueNodeGroup_TeamStanding) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_league_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTALeagueNodeGroup_TeamStanding.ProtoReflect.Descriptor instead.
func (*CMsgDOTALeagueNodeGroup_TeamStanding) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_league_proto_rawDescGZIP(), []int{1, 0}
}

func (x *CMsgDOTALeagueNodeGroup_TeamStanding) GetStanding() uint32 {
	if x != nil && x.Standing != nil {
		return *x.Standing
	}
	return 0
}

func (x *CMsgDOTALeagueNodeGroup_TeamStanding) GetTeamId() uint32 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

func (x *CMsgDOTALeagueNodeGroup_TeamStanding) GetTeamName() string {
	if x != nil && x.TeamName != nil {
		return *x.TeamName
	}
	return ""
}

func (x *CMsgDOTALeagueNodeGroup_TeamStanding) GetTeamTag() string {
	if x != nil && x.TeamTag != nil {
		return *x.TeamTag
	}
	return ""
}

func (x *CMsgDOTALeagueNodeGroup_TeamStanding) GetTeamLogo() uint64 {
	if x != nil && x.TeamLogo != nil {
		return *x.TeamLogo
	}
	return 0
}

func (x *CMsgDOTALeagueNodeGroup_TeamStanding) GetTeamLogoUrl() string {
	if x != nil && x.TeamLogoUrl != nil {
		return *x.TeamLogoUrl
	}
	return ""
}

func (x *CMsgDOTALeagueNodeGroup_TeamStanding) GetWins() uint32 {
	if x != nil && x.Wins != nil {
		return *x.Wins
	}
	return 0
}

func (x *CMsgDOTALeagueNodeGroup_TeamStanding) GetLosses() uint32 {
	if x != nil && x.Losses != nil {
		return *x.Losses
	}
	return 0
}

func (x *CMsgDOTALeagueNodeGroup_TeamStanding) GetScore() int64 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

type CMsgDOTALeague_Info struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeagueId           *uint32        `protobuf:"varint,1,opt,name=league_id,json=leagueId" json:"league_id,omitempty"`
	Name               *string        `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Tier               *ELeagueTier   `protobuf:"varint,3,opt,name=tier,enum=dota.ELeagueTier,def=0" json:"tier,omitempty"`
	Region             *ELeagueRegion `protobuf:"varint,4,opt,name=region,enum=dota.ELeagueRegion,def=0" json:"region,omitempty"`
	Url                *string        `protobuf:"bytes,5,opt,name=url" json:"url,omitempty"`
	Description        *string        `protobuf:"bytes,6,opt,name=description" json:"description,omitempty"`
	Notes              *string        `protobuf:"bytes,7,opt,name=notes" json:"notes,omitempty"`
	StartTimestamp     *uint32        `protobuf:"varint,8,opt,name=start_timestamp,json=startTimestamp" json:"start_timestamp,omitempty"`
	EndTimestamp       *uint32        `protobuf:"varint,9,opt,name=end_timestamp,json=endTimestamp" json:"end_timestamp,omitempty"`
	ProCircuitPoints   *uint32        `protobuf:"varint,10,opt,name=pro_circuit_points,json=proCircuitPoints" json:"pro_circuit_points,omitempty"`
	ImageBits          *uint32        `protobuf:"varint,11,opt,name=image_bits,json=imageBits" json:"image_bits,omitempty"`
	Status             *ELeagueStatus `protobuf:"varint,12,opt,name=status,enum=dota.ELeagueStatus,def=0" json:"status,omitempty"`
	MostRecentActivity *uint32        `protobuf:"varint,13,opt,name=most_recent_activity,json=mostRecentActivity" json:"most_recent_activity,omitempty"`
	RegistrationPeriod *uint32        `protobuf:"varint,14,opt,name=registration_period,json=registrationPeriod" json:"registration_period,omitempty"`
}

// Default values for CMsgDOTALeague_Info fields.
const (
	Default_CMsgDOTALeague_Info_Tier   = ELeagueTier_LEAGUE_TIER_UNSET
	Default_CMsgDOTALeague_Info_Region = ELeagueRegion_LEAGUE_REGION_UNSET
	Default_CMsgDOTALeague_Info_Status = ELeagueStatus_LEAGUE_STATUS_UNSET
)

func (x *CMsgDOTALeague_Info) Reset() {
	*x = CMsgDOTALeague_Info{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_league_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTALeague_Info) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTALeague_Info) ProtoMessage() {}

func (x *CMsgDOTALeague_Info) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_league_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTALeague_Info.ProtoReflect.Descriptor instead.
func (*CMsgDOTALeague_Info) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_league_proto_rawDescGZIP(), []int{2, 0}
}

func (x *CMsgDOTALeague_Info) GetLeagueId() uint32 {
	if x != nil && x.LeagueId != nil {
		return *x.LeagueId
	}
	return 0
}

func (x *CMsgDOTALeague_Info) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CMsgDOTALeague_Info) GetTier() ELeagueTier {
	if x != nil && x.Tier != nil {
		return *x.Tier
	}
	return Default_CMsgDOTALeague_Info_Tier
}

func (x *CMsgDOTALeague_Info) GetRegion() ELeagueRegion {
	if x != nil && x.Region != nil {
		return *x.Region
	}
	return Default_CMsgDOTALeague_Info_Region
}

func (x *CMsgDOTALeague_Info) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *CMsgDOTALeague_Info) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *CMsgDOTALeague_Info) GetNotes() string {
	if x != nil && x.Notes != nil {
		return *x.Notes
	}
	return ""
}

func (x *CMsgDOTALeague_Info) GetStartTimestamp() uint32 {
	if x != nil && x.StartTimestamp != nil {
		return *x.StartTimestamp
	}
	return 0
}

func (x *CMsgDOTALeague_Info) GetEndTimestamp() uint32 {
	if x != nil && x.EndTimestamp != nil {
		return *x.EndTimestamp
	}
	return 0
}

func (x *CMsgDOTALeague_Info) GetProCircuitPoints() uint32 {
	if x != nil && x.ProCircuitPoints != nil {
		return *x.ProCircuitPoints
	}
	return 0
}

func (x *CMsgDOTALeague_Info) GetImageBits() uint32 {
	if x != nil && x.ImageBits != nil {
		return *x.ImageBits
	}
	return 0
}

func (x *CMsgDOTALeague_Info) GetStatus() ELeagueStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return Default_CMsgDOTALeague_Info_Status
}

func (x *CMsgDOTALeague_Info) GetMostRecentActivity() uint32 {
	if x != nil && x.MostRecentActivity != nil {
		return *x.MostRecentActivity
	}
	return 0
}

func (x *CMsgDOTALeague_Info) GetRegistrationPeriod() uint32 {
	if x != nil && x.RegistrationPeriod != nil {
		return *x.RegistrationPeriod
	}
	return 0
}

type CMsgDOTALeague_Admin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId    *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	IsPrimary    *bool   `protobuf:"varint,2,opt,name=is_primary,json=isPrimary" json:"is_primary,omitempty"`
	EmailAddress *string `protobuf:"bytes,3,opt,name=email_address,json=emailAddress" json:"email_address,omitempty"`
}

func (x *CMsgDOTALeague_Admin) Reset() {
	*x = CMsgDOTALeague_Admin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_league_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTALeague_Admin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTALeague_Admin) ProtoMessage() {}

func (x *CMsgDOTALeague_Admin) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_league_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTALeague_Admin.ProtoReflect.Descriptor instead.
func (*CMsgDOTALeague_Admin) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_league_proto_rawDescGZIP(), []int{2, 1}
}

func (x *CMsgDOTALeague_Admin) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgDOTALeague_Admin) GetIsPrimary() bool {
	if x != nil && x.IsPrimary != nil {
		return *x.IsPrimary
	}
	return false
}

func (x *CMsgDOTALeague_Admin) GetEmailAddress() string {
	if x != nil && x.EmailAddress != nil {
		return *x.EmailAddress
	}
	return ""
}

type CMsgDOTALeague_PrizePoolItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemDef             *uint32 `protobuf:"varint,1,opt,name=item_def,json=itemDef" json:"item_def,omitempty"`
	SalesStopTimestamp  *uint32 `protobuf:"varint,2,opt,name=sales_stop_timestamp,json=salesStopTimestamp" json:"sales_stop_timestamp,omitempty"`
	RevenuePct          *uint32 `protobuf:"varint,3,opt,name=revenue_pct,json=revenuePct" json:"revenue_pct,omitempty"`
	RevenueCentsPerSale *uint32 `protobuf:"varint,4,opt,name=revenue_cents_per_sale,json=revenueCentsPerSale" json:"revenue_cents_per_sale,omitempty"`
}

func (x *CMsgDOTALeague_PrizePoolItem) Reset() {
	*x = CMsgDOTALeague_PrizePoolItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_league_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTALeague_PrizePoolItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTALeague_PrizePoolItem) ProtoMessage() {}

func (x *CMsgDOTALeague_PrizePoolItem) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_league_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTALeague_PrizePoolItem.ProtoReflect.Descriptor instead.
func (*CMsgDOTALeague_PrizePoolItem) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_league_proto_rawDescGZIP(), []int{2, 2}
}

func (x *CMsgDOTALeague_PrizePoolItem) GetItemDef() uint32 {
	if x != nil && x.ItemDef != nil {
		return *x.ItemDef
	}
	return 0
}

func (x *CMsgDOTALeague_PrizePoolItem) GetSalesStopTimestamp() uint32 {
	if x != nil && x.SalesStopTimestamp != nil {
		return *x.SalesStopTimestamp
	}
	return 0
}

func (x *CMsgDOTALeague_PrizePoolItem) GetRevenuePct() uint32 {
	if x != nil && x.RevenuePct != nil {
		return *x.RevenuePct
	}
	return 0
}

func (x *CMsgDOTALeague_PrizePoolItem) GetRevenueCentsPerSale() uint32 {
	if x != nil && x.RevenueCentsPerSale != nil {
		return *x.RevenueCentsPerSale
	}
	return 0
}

type CMsgDOTALeague_PrizePool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasePrizePool     *uint32                         `protobuf:"varint,1,opt,name=base_prize_pool,json=basePrizePool" json:"base_prize_pool,omitempty"`
	TotalPrizePool    *uint32                         `protobuf:"varint,2,opt,name=total_prize_pool,json=totalPrizePool" json:"total_prize_pool,omitempty"`
	PrizeSplitPctX100 []uint32                        `protobuf:"varint,3,rep,name=prize_split_pct_x100,json=prizeSplitPctX100" json:"prize_split_pct_x100,omitempty"`
	PrizePoolItems    []*CMsgDOTALeague_PrizePoolItem `protobuf:"bytes,4,rep,name=prize_pool_items,json=prizePoolItems" json:"prize_pool_items,omitempty"`
}

func (x *CMsgDOTALeague_PrizePool) Reset() {
	*x = CMsgDOTALeague_PrizePool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_league_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTALeague_PrizePool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTALeague_PrizePool) ProtoMessage() {}

func (x *CMsgDOTALeague_PrizePool) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_league_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTALeague_PrizePool.ProtoReflect.Descriptor instead.
func (*CMsgDOTALeague_PrizePool) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_league_proto_rawDescGZIP(), []int{2, 3}
}

func (x *CMsgDOTALeague_PrizePool) GetBasePrizePool() uint32 {
	if x != nil && x.BasePrizePool != nil {
		return *x.BasePrizePool
	}
	return 0
}

func (x *CMsgDOTALeague_PrizePool) GetTotalPrizePool() uint32 {
	if x != nil && x.TotalPrizePool != nil {
		return *x.TotalPrizePool
	}
	return 0
}

func (x *CMsgDOTALeague_PrizePool) GetPrizeSplitPctX100() []uint32 {
	if x != nil {
		return x.PrizeSplitPctX100
	}
	return nil
}

func (x *CMsgDOTALeague_PrizePool) GetPrizePoolItems() []*CMsgDOTALeague_PrizePoolItem {
	if x != nil {
		return x.PrizePoolItems
	}
	return nil
}

type CMsgDOTALeague_Stream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamId          *uint32                   `protobuf:"varint,1,opt,name=stream_id,json=streamId" json:"stream_id,omitempty"`
	Language          *uint32                   `protobuf:"varint,2,opt,name=language" json:"language,omitempty"`
	Name              *string                   `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	BroadcastProvider *ELeagueBroadcastProvider `protobuf:"varint,4,opt,name=broadcast_provider,json=broadcastProvider,enum=dota.ELeagueBroadcastProvider,def=0" json:"broadcast_provider,omitempty"`
	StreamUrl         *string                   `protobuf:"bytes,5,opt,name=stream_url,json=streamUrl" json:"stream_url,omitempty"`
	VodUrl            *string                   `protobuf:"bytes,6,opt,name=vod_url,json=vodUrl" json:"vod_url,omitempty"`
}

// Default values for CMsgDOTALeague_Stream fields.
const (
	Default_CMsgDOTALeague_Stream_BroadcastProvider = ELeagueBroadcastProvider_LEAGUE_BROADCAST_UNKNOWN
)

func (x *CMsgDOTALeague_Stream) Reset() {
	*x = CMsgDOTALeague_Stream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_league_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTALeague_Stream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTALeague_Stream) ProtoMessage() {}

func (x *CMsgDOTALeague_Stream) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_league_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTALeague_Stream.ProtoReflect.Descriptor instead.
func (*CMsgDOTALeague_Stream) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_league_proto_rawDescGZIP(), []int{2, 4}
}

func (x *CMsgDOTALeague_Stream) GetStreamId() uint32 {
	if x != nil && x.StreamId != nil {
		return *x.StreamId
	}
	return 0
}

func (x *CMsgDOTALeague_Stream) GetLanguage() uint32 {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return 0
}

func (x *CMsgDOTALeague_Stream) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CMsgDOTALeague_Stream) GetBroadcastProvider() ELeagueBroadcastProvider {
	if x != nil && x.BroadcastProvider != nil {
		return *x.BroadcastProvider
	}
	return Default_CMsgDOTALeague_Stream_BroadcastProvider
}

func (x *CMsgDOTALeague_Stream) GetStreamUrl() string {
	if x != nil && x.StreamUrl != nil {
		return *x.StreamUrl
	}
	return ""
}

func (x *CMsgDOTALeague_Stream) GetVodUrl() string {
	if x != nil && x.VodUrl != nil {
		return *x.VodUrl
	}
	return ""
}

type CMsgDOTALeague_SeriesInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeriesId   *uint32  `protobuf:"varint,1,opt,name=series_id,json=seriesId" json:"series_id,omitempty"`
	SeriesType *uint32  `protobuf:"varint,2,opt,name=series_type,json=seriesType" json:"series_type,omitempty"`
	StartTime  *uint32  `protobuf:"varint,3,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	MatchIds   []uint64 `protobuf:"varint,4,rep,name=match_ids,json=matchIds" json:"match_ids,omitempty"`
	TeamId_1   *uint32  `protobuf:"varint,5,opt,name=team_id_1,json=teamId1" json:"team_id_1,omitempty"`
	TeamId_2   *uint32  `protobuf:"varint,6,opt,name=team_id_2,json=teamId2" json:"team_id_2,omitempty"`
}

func (x *CMsgDOTALeague_SeriesInfo) Reset() {
	*x = CMsgDOTALeague_SeriesInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_league_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTALeague_SeriesInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTALeague_SeriesInfo) ProtoMessage() {}

func (x *CMsgDOTALeague_SeriesInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_league_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTALeague_SeriesInfo.ProtoReflect.Descriptor instead.
func (*CMsgDOTALeague_SeriesInfo) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_league_proto_rawDescGZIP(), []int{2, 5}
}

func (x *CMsgDOTALeague_SeriesInfo) GetSeriesId() uint32 {
	if x != nil && x.SeriesId != nil {
		return *x.SeriesId
	}
	return 0
}

func (x *CMsgDOTALeague_SeriesInfo) GetSeriesType() uint32 {
	if x != nil && x.SeriesType != nil {
		return *x.SeriesType
	}
	return 0
}

func (x *CMsgDOTALeague_SeriesInfo) GetStartTime() uint32 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *CMsgDOTALeague_SeriesInfo) GetMatchIds() []uint64 {
	if x != nil {
		return x.MatchIds
	}
	return nil
}

func (x *CMsgDOTALeague_SeriesInfo) GetTeamId_1() uint32 {
	if x != nil && x.TeamId_1 != nil {
		return *x.TeamId_1
	}
	return 0
}

func (x *CMsgDOTALeague_SeriesInfo) GetTeamId_2() uint32 {
	if x != nil && x.TeamId_2 != nil {
		return *x.TeamId_2
	}
	return 0
}

type CMsgDOTALeague_Player struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Name      *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	TeamId    *uint32 `protobuf:"varint,3,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
}

func (x *CMsgDOTALeague_Player) Reset() {
	*x = CMsgDOTALeague_Player{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_league_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTALeague_Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTALeague_Player) ProtoMessage() {}

func (x *CMsgDOTALeague_Player) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_league_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTALeague_Player.ProtoReflect.Descriptor instead.
func (*CMsgDOTALeague_Player) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_league_proto_rawDescGZIP(), []int{2, 6}
}

func (x *CMsgDOTALeague_Player) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgDOTALeague_Player) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CMsgDOTALeague_Player) GetTeamId() uint32 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

type CMsgDOTALeagueLiveGames_LiveGame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeagueId      *uint32 `protobuf:"varint,1,opt,name=league_id,json=leagueId" json:"league_id,omitempty"`
	ServerSteamId *uint64 `protobuf:"varint,2,opt,name=server_steam_id,json=serverSteamId" json:"server_steam_id,omitempty"`
	RadiantName   *string `protobuf:"bytes,3,opt,name=radiant_name,json=radiantName" json:"radiant_name,omitempty"`
	RadiantLogo   *uint64 `protobuf:"varint,4,opt,name=radiant_logo,json=radiantLogo" json:"radiant_logo,omitempty"`
	RadiantTeamId *uint32 `protobuf:"varint,9,opt,name=radiant_team_id,json=radiantTeamId" json:"radiant_team_id,omitempty"`
	DireName      *string `protobuf:"bytes,5,opt,name=dire_name,json=direName" json:"dire_name,omitempty"`
	DireLogo      *uint64 `protobuf:"varint,6,opt,name=dire_logo,json=direLogo" json:"dire_logo,omitempty"`
	DireTeamId    *uint32 `protobuf:"varint,10,opt,name=dire_team_id,json=direTeamId" json:"dire_team_id,omitempty"`
	Time          *uint32 `protobuf:"varint,7,opt,name=time" json:"time,omitempty"`
	Spectators    *uint32 `protobuf:"varint,8,opt,name=spectators" json:"spectators,omitempty"`
}

func (x *CMsgDOTALeagueLiveGames_LiveGame) Reset() {
	*x = CMsgDOTALeagueLiveGames_LiveGame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_league_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTALeagueLiveGames_LiveGame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTALeagueLiveGames_LiveGame) ProtoMessage() {}

func (x *CMsgDOTALeagueLiveGames_LiveGame) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_league_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTALeagueLiveGames_LiveGame.ProtoReflect.Descriptor instead.
func (*CMsgDOTALeagueLiveGames_LiveGame) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_league_proto_rawDescGZIP(), []int{5, 0}
}

func (x *CMsgDOTALeagueLiveGames_LiveGame) GetLeagueId() uint32 {
	if x != nil && x.LeagueId != nil {
		return *x.LeagueId
	}
	return 0
}

func (x *CMsgDOTALeagueLiveGames_LiveGame) GetServerSteamId() uint64 {
	if x != nil && x.ServerSteamId != nil {
		return *x.ServerSteamId
	}
	return 0
}

func (x *CMsgDOTALeagueLiveGames_LiveGame) GetRadiantName() string {
	if x != nil && x.RadiantName != nil {
		return *x.RadiantName
	}
	return ""
}

func (x *CMsgDOTALeagueLiveGames_LiveGame) GetRadiantLogo() uint64 {
	if x != nil && x.RadiantLogo != nil {
		return *x.RadiantLogo
	}
	return 0
}

func (x *CMsgDOTALeagueLiveGames_LiveGame) GetRadiantTeamId() uint32 {
	if x != nil && x.RadiantTeamId != nil {
		return *x.RadiantTeamId
	}
	return 0
}

func (x *CMsgDOTALeagueLiveGames_LiveGame) GetDireName() string {
	if x != nil && x.DireName != nil {
		return *x.DireName
	}
	return ""
}

func (x *CMsgDOTALeagueLiveGames_LiveGame) GetDireLogo() uint64 {
	if x != nil && x.DireLogo != nil {
		return *x.DireLogo
	}
	return 0
}

func (x *CMsgDOTALeagueLiveGames_LiveGame) GetDireTeamId() uint32 {
	if x != nil && x.DireTeamId != nil {
		return *x.DireTeamId
	}
	return 0
}

func (x *CMsgDOTALeagueLiveGames_LiveGame) GetTime() uint32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

func (x *CMsgDOTALeagueLiveGames_LiveGame) GetSpectators() uint32 {
	if x != nil && x.Spectators != nil {
		return *x.Spectators
	}
	return 0
}

type CMsgDOTALeagueMessages_Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthorAccountId *uint32 `protobuf:"varint,1,opt,name=author_account_id,json=authorAccountId" json:"author_account_id,omitempty"`
	Timestamp       *uint32 `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	Message         *string `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (x *CMsgDOTALeagueMessages_Message) Reset() {
	*x = CMsgDOTALeagueMessages_Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_league_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTALeagueMessages_Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTALeagueMessages_Message) ProtoMessage() {}

func (x *CMsgDOTALeagueMessages_Message) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_league_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTALeagueMessages_Message.ProtoReflect.Descriptor instead.
func (*CMsgDOTALeagueMessages_Message) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_league_proto_rawDescGZIP(), []int{6, 0}
}

func (x *CMsgDOTALeagueMessages_Message) GetAuthorAccountId() uint32 {
	if x != nil && x.AuthorAccountId != nil {
		return *x.AuthorAccountId
	}
	return 0
}

func (x *CMsgDOTALeagueMessages_Message) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *CMsgDOTALeagueMessages_Message) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type CMsgDOTALeagueAvailableLobbyNodes_NodeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId        *uint32 `protobuf:"varint,1,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	NodeName      *string `protobuf:"bytes,2,opt,name=node_name,json=nodeName" json:"node_name,omitempty"`
	NodeGroupName *string `protobuf:"bytes,3,opt,name=node_group_name,json=nodeGroupName" json:"node_group_name,omitempty"`
	TeamId_1      *uint32 `protobuf:"varint,4,opt,name=team_id_1,json=teamId1" json:"team_id_1,omitempty"`
	TeamId_2      *uint32 `protobuf:"varint,5,opt,name=team_id_2,json=teamId2" json:"team_id_2,omitempty"`
}

func (x *CMsgDOTALeagueAvailableLobbyNodes_NodeInfo) Reset() {
	*x = CMsgDOTALeagueAvailableLobbyNodes_NodeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_league_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTALeagueAvailableLobbyNodes_NodeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTALeagueAvailableLobbyNodes_NodeInfo) ProtoMessage() {}

func (x *CMsgDOTALeagueAvailableLobbyNodes_NodeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_league_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTALeagueAvailableLobbyNodes_NodeInfo.ProtoReflect.Descriptor instead.
func (*CMsgDOTALeagueAvailableLobbyNodes_NodeInfo) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_league_proto_rawDescGZIP(), []int{12, 0}
}

func (x *CMsgDOTALeagueAvailableLobbyNodes_NodeInfo) GetNodeId() uint32 {
	if x != nil && x.NodeId != nil {
		return *x.NodeId
	}
	return 0
}

func (x *CMsgDOTALeagueAvailableLobbyNodes_NodeInfo) GetNodeName() string {
	if x != nil && x.NodeName != nil {
		return *x.NodeName
	}
	return ""
}

func (x *CMsgDOTALeagueAvailableLobbyNodes_NodeInfo) GetNodeGroupName() string {
	if x != nil && x.NodeGroupName != nil {
		return *x.NodeGroupName
	}
	return ""
}

func (x *CMsgDOTALeagueAvailableLobbyNodes_NodeInfo) GetTeamId_1() uint32 {
	if x != nil && x.TeamId_1 != nil {
		return *x.TeamId_1
	}
	return 0
}

func (x *CMsgDOTALeagueAvailableLobbyNodes_NodeInfo) GetTeamId_2() uint32 {
	if x != nil && x.TeamId_2 != nil {
		return *x.TeamId_2
	}
	return 0
}

type CMsgDOTALeagueNodeResults_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId           *uint32  `protobuf:"varint,1,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	WinningNodeId    *uint32  `protobuf:"varint,2,opt,name=winning_node_id,json=winningNodeId" json:"winning_node_id,omitempty"`
	LosingNodeId     *uint32  `protobuf:"varint,3,opt,name=losing_node_id,json=losingNodeId" json:"losing_node_id,omitempty"`
	IncomingNodeId_1 *uint32  `protobuf:"varint,4,opt,name=incoming_node_id_1,json=incomingNodeId1" json:"incoming_node_id_1,omitempty"`
	IncomingNodeId_2 *uint32  `protobuf:"varint,5,opt,name=incoming_node_id_2,json=incomingNodeId2" json:"incoming_node_id_2,omitempty"`
	TeamId_1         *uint32  `protobuf:"varint,6,opt,name=team_id_1,json=teamId1" json:"team_id_1,omitempty"`
	TeamId_2         *uint32  `protobuf:"varint,7,opt,name=team_id_2,json=teamId2" json:"team_id_2,omitempty"`
	Team_1Name       *string  `protobuf:"bytes,8,opt,name=team_1_name,json=team1Name" json:"team_1_name,omitempty"`
	Team_2Name       *string  `protobuf:"bytes,9,opt,name=team_2_name,json=team2Name" json:"team_2_name,omitempty"`
	Team_1Wins       *uint32  `protobuf:"varint,10,opt,name=team_1_wins,json=team1Wins" json:"team_1_wins,omitempty"`
	Team_2Wins       *uint32  `protobuf:"varint,11,opt,name=team_2_wins,json=team2Wins" json:"team_2_wins,omitempty"`
	WinningTeamId    *uint32  `protobuf:"varint,12,opt,name=winning_team_id,json=winningTeamId" json:"winning_team_id,omitempty"`
	LosingTeamId     *uint32  `protobuf:"varint,13,opt,name=losing_team_id,json=losingTeamId" json:"losing_team_id,omitempty"`
	HasStarted       *bool    `protobuf:"varint,14,opt,name=has_started,json=hasStarted" json:"has_started,omitempty"`
	IsCompleted      *bool    `protobuf:"varint,15,opt,name=is_completed,json=isCompleted" json:"is_completed,omitempty"`
	ScheduledTime    *uint32  `protobuf:"varint,16,opt,name=scheduled_time,json=scheduledTime" json:"scheduled_time,omitempty"`
	MatchIds         []uint64 `protobuf:"varint,17,rep,name=match_ids,json=matchIds" json:"match_ids,omitempty"`
}

func (x *CMsgDOTALeagueNodeResults_Result) Reset() {
	*x = CMsgDOTALeagueNodeResults_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_league_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTALeagueNodeResults_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTALeagueNodeResults_Result) ProtoMessage() {}

func (x *CMsgDOTALeagueNodeResults_Result) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_league_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTALeagueNodeResults_Result.ProtoReflect.Descriptor instead.
func (*CMsgDOTALeagueNodeResults_Result) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_league_proto_rawDescGZIP(), []int{13, 0}
}

func (x *CMsgDOTALeagueNodeResults_Result) GetNodeId() uint32 {
	if x != nil && x.NodeId != nil {
		return *x.NodeId
	}
	return 0
}

func (x *CMsgDOTALeagueNodeResults_Result) GetWinningNodeId() uint32 {
	if x != nil && x.WinningNodeId != nil {
		return *x.WinningNodeId
	}
	return 0
}

func (x *CMsgDOTALeagueNodeResults_Result) GetLosingNodeId() uint32 {
	if x != nil && x.LosingNodeId != nil {
		return *x.LosingNodeId
	}
	return 0
}

func (x *CMsgDOTALeagueNodeResults_Result) GetIncomingNodeId_1() uint32 {
	if x != nil && x.IncomingNodeId_1 != nil {
		return *x.IncomingNodeId_1
	}
	return 0
}

func (x *CMsgDOTALeagueNodeResults_Result) GetIncomingNodeId_2() uint32 {
	if x != nil && x.IncomingNodeId_2 != nil {
		return *x.IncomingNodeId_2
	}
	return 0
}

func (x *CMsgDOTALeagueNodeResults_Result) GetTeamId_1() uint32 {
	if x != nil && x.TeamId_1 != nil {
		return *x.TeamId_1
	}
	return 0
}

func (x *CMsgDOTALeagueNodeResults_Result) GetTeamId_2() uint32 {
	if x != nil && x.TeamId_2 != nil {
		return *x.TeamId_2
	}
	return 0
}

func (x *CMsgDOTALeagueNodeResults_Result) GetTeam_1Name() string {
	if x != nil && x.Team_1Name != nil {
		return *x.Team_1Name
	}
	return ""
}

func (x *CMsgDOTALeagueNodeResults_Result) GetTeam_2Name() string {
	if x != nil && x.Team_2Name != nil {
		return *x.Team_2Name
	}
	return ""
}

func (x *CMsgDOTALeagueNodeResults_Result) GetTeam_1Wins() uint32 {
	if x != nil && x.Team_1Wins != nil {
		return *x.Team_1Wins
	}
	return 0
}

func (x *CMsgDOTALeagueNodeResults_Result) GetTeam_2Wins() uint32 {
	if x != nil && x.Team_2Wins != nil {
		return *x.Team_2Wins
	}
	return 0
}

func (x *CMsgDOTALeagueNodeResults_Result) GetWinningTeamId() uint32 {
	if x != nil && x.WinningTeamId != nil {
		return *x.WinningTeamId
	}
	return 0
}

func (x *CMsgDOTALeagueNodeResults_Result) GetLosingTeamId() uint32 {
	if x != nil && x.LosingTeamId != nil {
		return *x.LosingTeamId
	}
	return 0
}

func (x *CMsgDOTALeagueNodeResults_Result) GetHasStarted() bool {
	if x != nil && x.HasStarted != nil {
		return *x.HasStarted
	}
	return false
}

func (x *CMsgDOTALeagueNodeResults_Result) GetIsCompleted() bool {
	if x != nil && x.IsCompleted != nil {
		return *x.IsCompleted
	}
	return false
}

func (x *CMsgDOTALeagueNodeResults_Result) GetScheduledTime() uint32 {
	if x != nil && x.ScheduledTime != nil {
		return *x.ScheduledTime
	}
	return 0
}

func (x *CMsgDOTALeagueNodeResults_Result) GetMatchIds() []uint64 {
	if x != nil {
		return x.MatchIds
	}
	return nil
}

type CMsgDOTADPCLeagueResults_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Standing    *uint32       `protobuf:"varint,1,opt,name=standing" json:"standing,omitempty"`
	TeamId      *uint32       `protobuf:"varint,2,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	TeamName    *string       `protobuf:"bytes,3,opt,name=team_name,json=teamName" json:"team_name,omitempty"`
	TeamLogo    *uint64       `protobuf:"varint,4,opt,name=team_logo,json=teamLogo" json:"team_logo,omitempty"`
	TeamLogoUrl *string       `protobuf:"bytes,5,opt,name=team_logo_url,json=teamLogoUrl" json:"team_logo_url,omitempty"`
	Points      *uint32       `protobuf:"varint,6,opt,name=points" json:"points,omitempty"`
	Earnings    *uint32       `protobuf:"varint,7,opt,name=earnings" json:"earnings,omitempty"`
	Timestamp   *uint32       `protobuf:"varint,8,opt,name=timestamp" json:"timestamp,omitempty"`
	Phase       *ELeaguePhase `protobuf:"varint,9,opt,name=phase,enum=dota.ELeaguePhase,def=0" json:"phase,omitempty"`
}

// Default values for CMsgDOTADPCLeagueResults_Result fields.
const (
	Default_CMsgDOTADPCLeagueResults_Result_Phase = ELeaguePhase_LEAGUE_PHASE_UNSET
)

func (x *CMsgDOTADPCLeagueResults_Result) Reset() {
	*x = CMsgDOTADPCLeagueResults_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_league_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTADPCLeagueResults_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTADPCLeagueResults_Result) ProtoMessage() {}

func (x *CMsgDOTADPCLeagueResults_Result) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_league_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTADPCLeagueResults_Result.ProtoReflect.Descriptor instead.
func (*CMsgDOTADPCLeagueResults_Result) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_league_proto_rawDescGZIP(), []int{14, 0}
}

func (x *CMsgDOTADPCLeagueResults_Result) GetStanding() uint32 {
	if x != nil && x.Standing != nil {
		return *x.Standing
	}
	return 0
}

func (x *CMsgDOTADPCLeagueResults_Result) GetTeamId() uint32 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

func (x *CMsgDOTADPCLeagueResults_Result) GetTeamName() string {
	if x != nil && x.TeamName != nil {
		return *x.TeamName
	}
	return ""
}

func (x *CMsgDOTADPCLeagueResults_Result) GetTeamLogo() uint64 {
	if x != nil && x.TeamLogo != nil {
		return *x.TeamLogo
	}
	return 0
}

func (x *CMsgDOTADPCLeagueResults_Result) GetTeamLogoUrl() string {
	if x != nil && x.TeamLogoUrl != nil {
		return *x.TeamLogoUrl
	}
	return ""
}

func (x *CMsgDOTADPCLeagueResults_Result) GetPoints() uint32 {
	if x != nil && x.Points != nil {
		return *x.Points
	}
	return 0
}

func (x *CMsgDOTADPCLeagueResults_Result) GetEarnings() uint32 {
	if x != nil && x.Earnings != nil {
		return *x.Earnings
	}
	return 0
}

func (x *CMsgDOTADPCLeagueResults_Result) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *CMsgDOTADPCLeagueResults_Result) GetPhase() ELeaguePhase {
	if x != nil && x.Phase != nil {
		return *x.Phase
	}
	return Default_CMsgDOTADPCLeagueResults_Result_Phase
}

type CMsgDOTADPCTeamResults_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeagueId  *uint32 `protobuf:"varint,1,opt,name=league_id,json=leagueId" json:"league_id,omitempty"`
	Standing  *uint32 `protobuf:"varint,2,opt,name=standing" json:"standing,omitempty"`
	Points    *uint32 `protobuf:"varint,3,opt,name=points" json:"points,omitempty"`
	Earnings  *uint32 `protobuf:"varint,4,opt,name=earnings" json:"earnings,omitempty"`
	Timestamp *uint32 `protobuf:"varint,5,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (x *CMsgDOTADPCTeamResults_Result) Reset() {
	*x = CMsgDOTADPCTeamResults_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_league_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTADPCTeamResults_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTADPCTeamResults_Result) ProtoMessage() {}

func (x *CMsgDOTADPCTeamResults_Result) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_league_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTADPCTeamResults_Result.ProtoReflect.Descriptor instead.
func (*CMsgDOTADPCTeamResults_Result) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_league_proto_rawDescGZIP(), []int{15, 0}
}

func (x *CMsgDOTADPCTeamResults_Result) GetLeagueId() uint32 {
	if x != nil && x.LeagueId != nil {
		return *x.LeagueId
	}
	return 0
}

func (x *CMsgDOTADPCTeamResults_Result) GetStanding() uint32 {
	if x != nil && x.Standing != nil {
		return *x.Standing
	}
	return 0
}

func (x *CMsgDOTADPCTeamResults_Result) GetPoints() uint32 {
	if x != nil && x.Points != nil {
		return *x.Points
	}
	return 0
}

func (x *CMsgDOTADPCTeamResults_Result) GetEarnings() uint32 {
	if x != nil && x.Earnings != nil {
		return *x.Earnings
	}
	return 0
}

func (x *CMsgDOTADPCTeamResults_Result) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

type CMsgDOTADPCSeasonResults_TeamLeagueResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp   *uint32 `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	LeagueId    *uint32 `protobuf:"varint,2,opt,name=league_id,json=leagueId" json:"league_id,omitempty"`
	Standing    *uint32 `protobuf:"varint,3,opt,name=standing" json:"standing,omitempty"`
	Points      *uint32 `protobuf:"varint,4,opt,name=points" json:"points,omitempty"`
	Earnings    *uint32 `protobuf:"varint,5,opt,name=earnings" json:"earnings,omitempty"`
	AuditAction *uint32 `protobuf:"varint,6,opt,name=audit_action,json=auditAction" json:"audit_action,omitempty"`
}

func (x *CMsgDOTADPCSeasonResults_TeamLeagueResult) Reset() {
	*x = CMsgDOTADPCSeasonResults_TeamLeagueResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_league_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTADPCSeasonResults_TeamLeagueResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTADPCSeasonResults_TeamLeagueResult) ProtoMessage() {}

func (x *CMsgDOTADPCSeasonResults_TeamLeagueResult) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_league_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTADPCSeasonResults_TeamLeagueResult.ProtoReflect.Descriptor instead.
func (*CMsgDOTADPCSeasonResults_TeamLeagueResult) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_league_proto_rawDescGZIP(), []int{16, 0}
}

func (x *CMsgDOTADPCSeasonResults_TeamLeagueResult) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *CMsgDOTADPCSeasonResults_TeamLeagueResult) GetLeagueId() uint32 {
	if x != nil && x.LeagueId != nil {
		return *x.LeagueId
	}
	return 0
}

func (x *CMsgDOTADPCSeasonResults_TeamLeagueResult) GetStanding() uint32 {
	if x != nil && x.Standing != nil {
		return *x.Standing
	}
	return 0
}

func (x *CMsgDOTADPCSeasonResults_TeamLeagueResult) GetPoints() uint32 {
	if x != nil && x.Points != nil {
		return *x.Points
	}
	return 0
}

func (x *CMsgDOTADPCSeasonResults_TeamLeagueResult) GetEarnings() uint32 {
	if x != nil && x.Earnings != nil {
		return *x.Earnings
	}
	return 0
}

func (x *CMsgDOTADPCSeasonResults_TeamLeagueResult) GetAuditAction() uint32 {
	if x != nil && x.AuditAction != nil {
		return *x.AuditAction
	}
	return 0
}

type CMsgDOTADPCSeasonResults_TeamResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamId        *uint32                                      `protobuf:"varint,1,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	TeamName      *string                                      `protobuf:"bytes,2,opt,name=team_name,json=teamName" json:"team_name,omitempty"`
	TeamLogo      *uint64                                      `protobuf:"varint,3,opt,name=team_logo,json=teamLogo" json:"team_logo,omitempty"`
	TeamLogoUrl   *string                                      `protobuf:"bytes,4,opt,name=team_logo_url,json=teamLogoUrl" json:"team_logo_url,omitempty"`
	TotalPoints   *uint32                                      `protobuf:"varint,5,opt,name=total_points,json=totalPoints" json:"total_points,omitempty"`
	TotalEarnings *uint32                                      `protobuf:"varint,6,opt,name=total_earnings,json=totalEarnings" json:"total_earnings,omitempty"`
	LeagueResults []*CMsgDOTADPCSeasonResults_TeamLeagueResult `protobuf:"bytes,7,rep,name=league_results,json=leagueResults" json:"league_results,omitempty"`
}

func (x *CMsgDOTADPCSeasonResults_TeamResult) Reset() {
	*x = CMsgDOTADPCSeasonResults_TeamResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_league_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTADPCSeasonResults_TeamResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTADPCSeasonResults_TeamResult) ProtoMessage() {}

func (x *CMsgDOTADPCSeasonResults_TeamResult) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_league_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTADPCSeasonResults_TeamResult.ProtoReflect.Descriptor instead.
func (*CMsgDOTADPCSeasonResults_TeamResult) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_league_proto_rawDescGZIP(), []int{16, 1}
}

func (x *CMsgDOTADPCSeasonResults_TeamResult) GetTeamId() uint32 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

func (x *CMsgDOTADPCSeasonResults_TeamResult) GetTeamName() string {
	if x != nil && x.TeamName != nil {
		return *x.TeamName
	}
	return ""
}

func (x *CMsgDOTADPCSeasonResults_TeamResult) GetTeamLogo() uint64 {
	if x != nil && x.TeamLogo != nil {
		return *x.TeamLogo
	}
	return 0
}

func (x *CMsgDOTADPCSeasonResults_TeamResult) GetTeamLogoUrl() string {
	if x != nil && x.TeamLogoUrl != nil {
		return *x.TeamLogoUrl
	}
	return ""
}

func (x *CMsgDOTADPCSeasonResults_TeamResult) GetTotalPoints() uint32 {
	if x != nil && x.TotalPoints != nil {
		return *x.TotalPoints
	}
	return 0
}

func (x *CMsgDOTADPCSeasonResults_TeamResult) GetTotalEarnings() uint32 {
	if x != nil && x.TotalEarnings != nil {
		return *x.TotalEarnings
	}
	return 0
}

func (x *CMsgDOTADPCSeasonResults_TeamResult) GetLeagueResults() []*CMsgDOTADPCSeasonResults_TeamLeagueResult {
	if x != nil {
		return x.LeagueResults
	}
	return nil
}

var File_dota_gcmessages_common_league_proto protoreflect.FileDescriptor

var file_dota_gcmessages_common_league_proto_rawDesc = []byte{
	0x0a, 0x23, 0x64, 0x6f, 0x74, 0x61, 0x5f, 0x67, 0x63, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x64, 0x6f, 0x74, 0x61, 0x1a, 0x17, 0x64, 0x6f, 0x74,
	0x61, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa8, 0x06, 0x0a, 0x12, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54,
	0x41, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f,
	0x77, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x77, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x4e, 0x6f,
	0x64, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6c, 0x6f,
	0x73, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x12, 0x69, 0x6e,
	0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x31,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67,
	0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x31, 0x12, 0x2b, 0x0a, 0x12, 0x69, 0x6e, 0x63, 0x6f, 0x6d,
	0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x32, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64,
	0x65, 0x49, 0x64, 0x32, 0x12, 0x45, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x45,
	0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x11,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x69, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x31, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x31, 0x12, 0x1a, 0x0a, 0x09,
	0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x32, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x32, 0x12, 0x3f, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x64, 0x6f, 0x74, 0x61,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0b, 0x74, 0x65, 0x61,
	0x6d, 0x5f, 0x31, 0x5f, 0x77, 0x69, 0x6e, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x74, 0x65, 0x61, 0x6d, 0x31, 0x57, 0x69, 0x6e, 0x73, 0x12, 0x1e, 0x0a, 0x0b, 0x74, 0x65, 0x61,
	0x6d, 0x5f, 0x32, 0x5f, 0x77, 0x69, 0x6e, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x74, 0x65, 0x61, 0x6d, 0x32, 0x57, 0x69, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x61, 0x73,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x68, 0x61, 0x73, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73,
	0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x69, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x73, 0x1a, 0x51, 0x0a, 0x0c,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x19, 0x0a, 0x08,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x77, 0x69, 0x6e, 0x6e, 0x69,
	0x6e, 0x67, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x77, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x22,
	0xe0, 0x0c, 0x0a, 0x17, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x4c, 0x65, 0x61, 0x67,
	0x75, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x11, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67,
	0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x14, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x4e,
	0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x61,
	0x64, 0x76, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x61, 0x64,
	0x76, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x5f,
	0x74, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x12, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x61, 0x6d, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x56, 0x0a, 0x0f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x64,
	0x6f, 0x74, 0x61, 0x2e, 0x45, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x12, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x0d, 0x6e, 0x6f,
	0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x54, 0x0a, 0x11, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x45, 0x4c,
	0x65, 0x61, 0x67, 0x75, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x11, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x52, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x61, 0x78,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x74, 0x69, 0x65,
	0x62, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69,
	0x73, 0x54, 0x69, 0x65, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x69,
	0x73, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x45, 0x4c, 0x65, 0x61, 0x67,
	0x75, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x3a, 0x12, 0x4c, 0x45, 0x41, 0x47, 0x55, 0x45, 0x5f,
	0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x52, 0x05, 0x70, 0x68, 0x61,
	0x73, 0x65, 0x12, 0x40, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x45, 0x4c, 0x65, 0x61, 0x67, 0x75,
	0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x3a, 0x13, 0x4c, 0x45, 0x41, 0x47, 0x55, 0x45, 0x5f,
	0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x52, 0x06, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x48,
	0x0a, 0x21, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x61, 0x64, 0x76, 0x61,
	0x6e, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x61, 0x72, 0x79, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x1e, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x5f,
	0x74, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x1b, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x41, 0x64, 0x76, 0x61, 0x6e,
	0x63, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x46, 0x0a,
	0x20, 0x74, 0x65, 0x72, 0x74, 0x69, 0x61, 0x72, 0x79, 0x5f, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63,
	0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x74, 0x65, 0x72, 0x74, 0x69, 0x61, 0x72,
	0x79, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x1d, 0x74, 0x65, 0x72, 0x74, 0x69, 0x61, 0x72,
	0x79, 0x5f, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x74, 0x65,
	0x72, 0x74, 0x69, 0x61, 0x72, 0x79, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x54,
	0x65, 0x61, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x65, 0x6c, 0x69, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x70, 0x63, 0x5f, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x70, 0x63, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x51,
	0x0a, 0x0e, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x52, 0x0d, 0x74, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x2e, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41,
	0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x12, 0x3e, 0x0a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x1a, 0xfe, 0x01, 0x0a, 0x0c, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x17,
	0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x74, 0x61, 0x67,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x61, 0x67, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x22, 0x0a, 0x0d,
	0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c,
	0x12, 0x12, 0x0a, 0x04, 0x77, 0x69, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x77, 0x69, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x73, 0x73, 0x65, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x6f, 0x73, 0x73, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x22, 0x89, 0x10, 0x0a, 0x0e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x4c,
	0x65, 0x61, 0x67, 0x75, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44,
	0x4f, 0x54, 0x41, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x12, 0x3d, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x7a, 0x65, 0x5f, 0x70, 0x6f,
	0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x2e, 0x50,
	0x72, 0x69, 0x7a, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x09, 0x70, 0x72, 0x69, 0x7a, 0x65, 0x50,
	0x6f, 0x6f, 0x6c, 0x12, 0x32, 0x0a, 0x06, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44,
	0x4f, 0x54, 0x41, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52,
	0x06, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x73, 0x12, 0x35, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x07, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x3e,
	0x0a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44,
	0x4f, 0x54, 0x41, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x42,
	0x0a, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x44, 0x4f, 0x54, 0x41, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x73, 0x12, 0x4a, 0x0a, 0x12, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64,
	0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x4c, 0x65,
	0x61, 0x67, 0x75, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x11, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x1a, 0xbd,
	0x04, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x61, 0x67, 0x75,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x65, 0x61, 0x67,
	0x75, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x69, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x45, 0x4c,
	0x65, 0x61, 0x67, 0x75, 0x65, 0x54, 0x69, 0x65, 0x72, 0x3a, 0x11, 0x4c, 0x45, 0x41, 0x47, 0x55,
	0x45, 0x5f, 0x54, 0x49, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x52, 0x04, 0x74, 0x69,
	0x65, 0x72, 0x12, 0x40, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x45, 0x4c, 0x65, 0x61, 0x67, 0x75,
	0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x3a, 0x13, 0x4c, 0x45, 0x41, 0x47, 0x55, 0x45, 0x5f,
	0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x52, 0x06, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x27,
	0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2c, 0x0a, 0x12,
	0x70, 0x72, 0x6f, 0x5f, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x43, 0x69, 0x72,
	0x63, 0x75, 0x69, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x62, 0x69, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x69, 0x74, 0x73, 0x12, 0x40, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x64, 0x6f, 0x74, 0x61,
	0x2e, 0x45, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x13,
	0x4c, 0x45, 0x41, 0x47, 0x55, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e,
	0x53, 0x45, 0x54, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x6d,
	0x6f, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6d, 0x6f, 0x73, 0x74, 0x52,
	0x65, 0x63, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x2f, 0x0a,
	0x13, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x1a, 0x6a,
	0x0a, 0x05, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x50, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0xb2, 0x01, 0x0a, 0x0d, 0x50,
	0x72, 0x69, 0x7a, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x19, 0x0a, 0x08,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x64, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x69, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x66, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x61, 0x6c, 0x65, 0x73,
	0x5f, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x53, 0x74, 0x6f, 0x70,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x76,
	0x65, 0x6e, 0x75, 0x65, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x50, 0x63, 0x74, 0x12, 0x33, 0x0a, 0x16, 0x72, 0x65,
	0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f,
	0x73, 0x61, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x72, 0x65, 0x76, 0x65,
	0x6e, 0x75, 0x65, 0x43, 0x65, 0x6e, 0x74, 0x73, 0x50, 0x65, 0x72, 0x53, 0x61, 0x6c, 0x65, 0x1a,
	0xdc, 0x01, 0x0a, 0x09, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x26, 0x0a,
	0x0f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x7a, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x50, 0x72, 0x69, 0x7a,
	0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70,
	0x72, 0x69, 0x7a, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x12,
	0x2f, 0x0a, 0x14, 0x70, 0x72, 0x69, 0x7a, 0x65, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x70,
	0x63, 0x74, 0x5f, 0x78, 0x31, 0x30, 0x30, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x11, 0x70,
	0x72, 0x69, 0x7a, 0x65, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x50, 0x63, 0x74, 0x58, 0x31, 0x30, 0x30,
	0x12, 0x4c, 0x0a, 0x10, 0x70, 0x72, 0x69, 0x7a, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x6f, 0x74,
	0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65,
	0x2e, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0e,
	0x70, 0x72, 0x69, 0x7a, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x1a, 0xf6,
	0x01, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x67, 0x0a, 0x12, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x45, 0x4c, 0x65, 0x61, 0x67, 0x75,
	0x65, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x3a, 0x18, 0x4c, 0x45, 0x41, 0x47, 0x55, 0x45, 0x5f, 0x42, 0x52, 0x4f, 0x41, 0x44,
	0x43, 0x41, 0x53, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x52, 0x11, 0x62, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x55, 0x72, 0x6c, 0x12, 0x17,
	0x0a, 0x07, 0x76, 0x6f, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x76, 0x6f, 0x64, 0x55, 0x72, 0x6c, 0x1a, 0xbe, 0x01, 0x0a, 0x0a, 0x53, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x73,
	0x12, 0x1a, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x31, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x31, 0x12, 0x1a, 0x0a, 0x09,
	0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x32, 0x1a, 0x54, 0x0a, 0x06, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x22, 0x83,
	0x03, 0x0a, 0x12, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x4c, 0x65, 0x61, 0x67, 0x75,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x69, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x45, 0x4c, 0x65, 0x61,
	0x67, 0x75, 0x65, 0x54, 0x69, 0x65, 0x72, 0x3a, 0x11, 0x4c, 0x45, 0x41, 0x47, 0x55, 0x45, 0x5f,
	0x54, 0x49, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x52, 0x04, 0x74, 0x69, 0x65, 0x72,
	0x12, 0x40, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x13, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x45, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x3a, 0x13, 0x4c, 0x45, 0x41, 0x47, 0x55, 0x45, 0x5f, 0x52, 0x45,
	0x47, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x6f, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x6e,
	0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x12, 0x6d, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72,
	0x69, 0x7a, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x27,
	0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x48, 0x0a, 0x16, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41,
	0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2e,
	0x0a, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x4c, 0x65, 0x61,
	0x67, 0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0xa7,
	0x03, 0x0a, 0x17, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x4c, 0x65, 0x61, 0x67, 0x75,
	0x65, 0x4c, 0x69, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x05, 0x67, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x64, 0x6f, 0x74, 0x61,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x4c,
	0x69, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x47, 0x61, 0x6d,
	0x65, 0x52, 0x05, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x1a, 0xcd, 0x02, 0x0a, 0x08, 0x4c, 0x69, 0x76,
	0x65, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65,
	0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x61,
	0x64, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x6f,
	0x12, 0x26, 0x0a, 0x0f, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x72, 0x61, 0x64, 0x69, 0x61,
	0x6e, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x72,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x5f, 0x6c, 0x6f,
	0x67, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x64, 0x69, 0x72, 0x65, 0x4c, 0x6f,
	0x67, 0x6f, 0x12, 0x20, 0x0a, 0x0c, 0x64, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x69, 0x72, 0x65, 0x54, 0x65,
	0x61, 0x6d, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x22, 0xc9, 0x01, 0x0a, 0x16, 0x43, 0x4d, 0x73,
	0x67, 0x44, 0x4f, 0x54, 0x41, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x44, 0x4f, 0x54, 0x41, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x1a, 0x6d, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x2a, 0x0a, 0x11, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x6a, 0x0a, 0x17, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41,
	0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x7a, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x69, 0x7a, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x30,
	0x0a, 0x14, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x69, 0x6e,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x22, 0x25, 0x0a, 0x23, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x4c, 0x65, 0x61, 0x67,
	0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x51, 0x0a, 0x19, 0x43, 0x4d, 0x73, 0x67, 0x44,
	0x4f, 0x54, 0x41, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x22, 0x4a, 0x0a, 0x1a, 0x43, 0x4d,
	0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x22, 0x47, 0x0a, 0x28, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f,
	0x54, 0x41, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x64, 0x22,
	0x97, 0x02, 0x0a, 0x21, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x4c, 0x65, 0x61, 0x67,
	0x75, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79,
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x64, 0x6f, 0x74, 0x61,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x6e, 0x6f, 0x64,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x1a, 0xa0, 0x01, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x31, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x31, 0x12, 0x1a, 0x0a,
	0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x32, 0x22, 0xc0, 0x05, 0x0a, 0x19, 0x43, 0x4d,
	0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x49, 0x0a, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x4c, 0x65, 0x61,
	0x67, 0x75, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x1a, 0xd7, 0x04, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x77, 0x69, 0x6e, 0x6e, 0x69, 0x6e,
	0x67, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x77, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x24,
	0x0a, 0x0e, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x4e, 0x6f,
	0x64, 0x65, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x12, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67,
	0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x31, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64,
	0x31, 0x12, 0x2b, 0x0a, 0x12, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x69,
	0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x32, 0x12, 0x1a,
	0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x31, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x31, 0x12, 0x1a, 0x0a, 0x09, 0x74, 0x65,
	0x61, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x32, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74,
	0x65, 0x61, 0x6d, 0x49, 0x64, 0x32, 0x12, 0x1e, 0x0a, 0x0b, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x31,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65, 0x61,
	0x6d, 0x31, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x32,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65, 0x61,
	0x6d, 0x32, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x31,
	0x5f, 0x77, 0x69, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x65, 0x61,
	0x6d, 0x31, 0x57, 0x69, 0x6e, 0x73, 0x12, 0x1e, 0x0a, 0x0b, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x32,
	0x5f, 0x77, 0x69, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x65, 0x61,
	0x6d, 0x32, 0x57, 0x69, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x77, 0x69, 0x6e, 0x6e, 0x69, 0x6e,
	0x67, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x77, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x24,
	0x0a, 0x0e, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x54, 0x65,
	0x61, 0x6d, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x68, 0x61, 0x73, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x11, 0x20, 0x03,
	0x28, 0x04, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x73, 0x22, 0xbb, 0x03, 0x0a,
	0x18, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x44, 0x50, 0x43, 0x4c, 0x65, 0x61, 0x67,
	0x75, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x3f, 0x0a, 0x07, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x64, 0x6f, 0x74,
	0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x44, 0x50, 0x43, 0x4c, 0x65, 0x61,
	0x67, 0x75, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x6f, 0x6c, 0x6c, 0x61, 0x72, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x07, 0x64, 0x6f, 0x6c, 0x6c, 0x61, 0x72, 0x73, 0x1a, 0xab, 0x02, 0x0a,
	0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x61,
	0x6d, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x74, 0x65,
	0x61, 0x6d, 0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6c,
	0x6f, 0x67, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74,
	0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3c, 0x0a, 0x05,
	0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x64, 0x6f,
	0x74, 0x61, 0x2e, 0x45, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x3a,
	0x12, 0x4c, 0x45, 0x41, 0x47, 0x55, 0x45, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x45, 0x54, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x22, 0xed, 0x01, 0x0a, 0x16, 0x43,
	0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x44, 0x50, 0x43, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x3d, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x44, 0x50, 0x43, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x1a, 0x93, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xca, 0x04, 0x0a, 0x18, 0x43,
	0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x44, 0x50, 0x43, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x43, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x44, 0x50, 0x43, 0x53, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0xc0, 0x01, 0x0a,
	0x10, 0x54, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x61, 0x75, 0x64, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0xa5, 0x02, 0x0a, 0x0a, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6c, 0x6f, 0x67,
	0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x67,
	0x6f, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x6f,
	0x67, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x56, 0x0a, 0x0e, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x44, 0x50, 0x43, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x67,
	0x75, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0d, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2a, 0xc8, 0x01, 0x0a, 0x14, 0x45, 0x4c, 0x65, 0x61,
	0x67, 0x75, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x16, 0x0a, 0x12, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x52, 0x47, 0x41,
	0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b,
	0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x52, 0x4f, 0x42, 0x49, 0x4e, 0x10, 0x02, 0x12, 0x09, 0x0a,
	0x05, 0x53, 0x57, 0x49, 0x53, 0x53, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x52, 0x41, 0x43,
	0x4b, 0x45, 0x54, 0x5f, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19,
	0x42, 0x52, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x5f, 0x53,
	0x45, 0x45, 0x44, 0x5f, 0x4c, 0x4f, 0x53, 0x45, 0x52, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x42,
	0x52, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x5f, 0x41, 0x4c,
	0x4c, 0x5f, 0x57, 0x49, 0x4e, 0x4e, 0x45, 0x52, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x48,
	0x4f, 0x57, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x07, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x53, 0x4c,
	0x10, 0x08, 0x2a, 0x6f, 0x0a, 0x0f, 0x45, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b,
	0x42, 0x45, 0x53, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x11, 0x0a,
	0x0d, 0x42, 0x45, 0x53, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x45, 0x10, 0x02,
	0x12, 0x10, 0x0a, 0x0c, 0x42, 0x45, 0x53, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x46, 0x49, 0x56, 0x45,
	0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x45, 0x53, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x54, 0x57,
	0x4f, 0x10, 0x04, 0x42, 0x05, 0x48, 0x01, 0x80, 0x01, 0x00,
}

var (
	file_dota_gcmessages_common_league_proto_rawDescOnce sync.Once
	file_dota_gcmessages_common_league_proto_rawDescData = file_dota_gcmessages_common_league_proto_rawDesc
)

func file_dota_gcmessages_common_league_proto_rawDescGZIP() []byte {
	file_dota_gcmessages_common_league_proto_rawDescOnce.Do(func() {
		file_dota_gcmessages_common_league_proto_rawDescData = protoimpl.X.CompressGZIP(file_dota_gcmessages_common_league_proto_rawDescData)
	})
	return file_dota_gcmessages_common_league_proto_rawDescData
}

var file_dota_gcmessages_common_league_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_dota_gcmessages_common_league_proto_msgTypes = make([]protoimpl.MessageInfo, 34)
var file_dota_gcmessages_common_league_proto_goTypes = []interface{}{
	(ELeagueNodeGroupType)(0),                          // 0: dota.ELeagueNodeGroupType
	(ELeagueNodeType)(0),                               // 1: dota.ELeagueNodeType
	(*CMsgDOTALeagueNode)(nil),                         // 2: dota.CMsgDOTALeagueNode
	(*CMsgDOTALeagueNodeGroup)(nil),                    // 3: dota.CMsgDOTALeagueNodeGroup
	(*CMsgDOTALeague)(nil),                             // 4: dota.CMsgDOTALeague
	(*CMsgDOTALeagueInfo)(nil),                         // 5: dota.CMsgDOTALeagueInfo
	(*CMsgDOTALeagueInfoList)(nil),                     // 6: dota.CMsgDOTALeagueInfoList
	(*CMsgDOTALeagueLiveGames)(nil),                    // 7: dota.CMsgDOTALeagueLiveGames
	(*CMsgDOTALeagueMessages)(nil),                     // 8: dota.CMsgDOTALeagueMessages
	(*CMsgDOTALeaguePrizePool)(nil),                    // 9: dota.CMsgDOTALeaguePrizePool
	(*CMsgDOTALeagueInfoListAdminsRequest)(nil),        // 10: dota.CMsgDOTALeagueInfoListAdminsRequest
	(*CMsgDOTALeagueNodeRequest)(nil),                  // 11: dota.CMsgDOTALeagueNodeRequest
	(*CMsgDOTALeagueNodeResponse)(nil),                 // 12: dota.CMsgDOTALeagueNodeResponse
	(*CMsgDOTALeagueAvailableLobbyNodesRequest)(nil),   // 13: dota.CMsgDOTALeagueAvailableLobbyNodesRequest
	(*CMsgDOTALeagueAvailableLobbyNodes)(nil),          // 14: dota.CMsgDOTALeagueAvailableLobbyNodes
	(*CMsgDOTALeagueNodeResults)(nil),                  // 15: dota.CMsgDOTALeagueNodeResults
	(*CMsgDOTADPCLeagueResults)(nil),                   // 16: dota.CMsgDOTADPCLeagueResults
	(*CMsgDOTADPCTeamResults)(nil),                     // 17: dota.CMsgDOTADPCTeamResults
	(*CMsgDOTADPCSeasonResults)(nil),                   // 18: dota.CMsgDOTADPCSeasonResults
	(*CMsgDOTALeagueNode_MatchDetails)(nil),            // 19: dota.CMsgDOTALeagueNode.MatchDetails
	(*CMsgDOTALeagueNodeGroup_TeamStanding)(nil),       // 20: dota.CMsgDOTALeagueNodeGroup.TeamStanding
	(*CMsgDOTALeague_Info)(nil),                        // 21: dota.CMsgDOTALeague.Info
	(*CMsgDOTALeague_Admin)(nil),                       // 22: dota.CMsgDOTALeague.Admin
	(*CMsgDOTALeague_PrizePoolItem)(nil),               // 23: dota.CMsgDOTALeague.PrizePoolItem
	(*CMsgDOTALeague_PrizePool)(nil),                   // 24: dota.CMsgDOTALeague.PrizePool
	(*CMsgDOTALeague_Stream)(nil),                      // 25: dota.CMsgDOTALeague.Stream
	(*CMsgDOTALeague_SeriesInfo)(nil),                  // 26: dota.CMsgDOTALeague.SeriesInfo
	(*CMsgDOTALeague_Player)(nil),                      // 27: dota.CMsgDOTALeague.Player
	(*CMsgDOTALeagueLiveGames_LiveGame)(nil),           // 28: dota.CMsgDOTALeagueLiveGames.LiveGame
	(*CMsgDOTALeagueMessages_Message)(nil),             // 29: dota.CMsgDOTALeagueMessages.Message
	(*CMsgDOTALeagueAvailableLobbyNodes_NodeInfo)(nil), // 30: dota.CMsgDOTALeagueAvailableLobbyNodes.NodeInfo
	(*CMsgDOTALeagueNodeResults_Result)(nil),           // 31: dota.CMsgDOTALeagueNodeResults.Result
	(*CMsgDOTADPCLeagueResults_Result)(nil),            // 32: dota.CMsgDOTADPCLeagueResults.Result
	(*CMsgDOTADPCTeamResults_Result)(nil),              // 33: dota.CMsgDOTADPCTeamResults.Result
	(*CMsgDOTADPCSeasonResults_TeamLeagueResult)(nil),  // 34: dota.CMsgDOTADPCSeasonResults.TeamLeagueResult
	(*CMsgDOTADPCSeasonResults_TeamResult)(nil),        // 35: dota.CMsgDOTADPCSeasonResults.TeamResult
	(ELeaguePhase)(0),                                  // 36: dota.ELeaguePhase
	(ELeagueRegion)(0),                                 // 37: dota.ELeagueRegion
	(ELeagueTier)(0),                                   // 38: dota.ELeagueTier
	(ELeagueStatus)(0),                                 // 39: dota.ELeagueStatus
	(ELeagueBroadcastProvider)(0),                      // 40: dota.ELeagueBroadcastProvider
}
var file_dota_gcmessages_common_league_proto_depIdxs = []int32{
	1,  // 0: dota.CMsgDOTALeagueNode.node_type:type_name -> dota.ELeagueNodeType
	19, // 1: dota.CMsgDOTALeagueNode.matches:type_name -> dota.CMsgDOTALeagueNode.MatchDetails
	0,  // 2: dota.CMsgDOTALeagueNodeGroup.node_group_type:type_name -> dota.ELeagueNodeGroupType
	1,  // 3: dota.CMsgDOTALeagueNodeGroup.default_node_type:type_name -> dota.ELeagueNodeType
	36, // 4: dota.CMsgDOTALeagueNodeGroup.phase:type_name -> dota.ELeaguePhase
	37, // 5: dota.CMsgDOTALeagueNodeGroup.region:type_name -> dota.ELeagueRegion
	20, // 6: dota.CMsgDOTALeagueNodeGroup.team_standings:type_name -> dota.CMsgDOTALeagueNodeGroup.TeamStanding
	2,  // 7: dota.CMsgDOTALeagueNodeGroup.nodes:type_name -> dota.CMsgDOTALeagueNode
	3,  // 8: dota.CMsgDOTALeagueNodeGroup.node_groups:type_name -> dota.CMsgDOTALeagueNodeGroup
	21, // 9: dota.CMsgDOTALeague.info:type_name -> dota.CMsgDOTALeague.Info
	24, // 10: dota.CMsgDOTALeague.prize_pool:type_name -> dota.CMsgDOTALeague.PrizePool
	22, // 11: dota.CMsgDOTALeague.admins:type_name -> dota.CMsgDOTALeague.Admin
	25, // 12: dota.CMsgDOTALeague.streams:type_name -> dota.CMsgDOTALeague.Stream
	3,  // 13: dota.CMsgDOTALeague.node_groups:type_name -> dota.CMsgDOTALeagueNodeGroup
	26, // 14: dota.CMsgDOTALeague.series_infos:type_name -> dota.CMsgDOTALeague.SeriesInfo
	27, // 15: dota.CMsgDOTALeague.registered_players:type_name -> dota.CMsgDOTALeague.Player
	38, // 16: dota.CMsgDOTALeagueInfo.tier:type_name -> dota.ELeagueTier
	37, // 17: dota.CMsgDOTALeagueInfo.region:type_name -> dota.ELeagueRegion
	5,  // 18: dota.CMsgDOTALeagueInfoList.infos:type_name -> dota.CMsgDOTALeagueInfo
	28, // 19: dota.CMsgDOTALeagueLiveGames.games:type_name -> dota.CMsgDOTALeagueLiveGames.LiveGame
	29, // 20: dota.CMsgDOTALeagueMessages.messages:type_name -> dota.CMsgDOTALeagueMessages.Message
	2,  // 21: dota.CMsgDOTALeagueNodeResponse.node:type_name -> dota.CMsgDOTALeagueNode
	30, // 22: dota.CMsgDOTALeagueAvailableLobbyNodes.node_infos:type_name -> dota.CMsgDOTALeagueAvailableLobbyNodes.NodeInfo
	31, // 23: dota.CMsgDOTALeagueNodeResults.node_results:type_name -> dota.CMsgDOTALeagueNodeResults.Result
	32, // 24: dota.CMsgDOTADPCLeagueResults.results:type_name -> dota.CMsgDOTADPCLeagueResults.Result
	33, // 25: dota.CMsgDOTADPCTeamResults.results:type_name -> dota.CMsgDOTADPCTeamResults.Result
	35, // 26: dota.CMsgDOTADPCSeasonResults.results:type_name -> dota.CMsgDOTADPCSeasonResults.TeamResult
	38, // 27: dota.CMsgDOTALeague.Info.tier:type_name -> dota.ELeagueTier
	37, // 28: dota.CMsgDOTALeague.Info.region:type_name -> dota.ELeagueRegion
	39, // 29: dota.CMsgDOTALeague.Info.status:type_name -> dota.ELeagueStatus
	23, // 30: dota.CMsgDOTALeague.PrizePool.prize_pool_items:type_name -> dota.CMsgDOTALeague.PrizePoolItem
	40, // 31: dota.CMsgDOTALeague.Stream.broadcast_provider:type_name -> dota.ELeagueBroadcastProvider
	36, // 32: dota.CMsgDOTADPCLeagueResults.Result.phase:type_name -> dota.ELeaguePhase
	34, // 33: dota.CMsgDOTADPCSeasonResults.TeamResult.league_results:type_name -> dota.CMsgDOTADPCSeasonResults.TeamLeagueResult
	34, // [34:34] is the sub-list for method output_type
	34, // [34:34] is the sub-list for method input_type
	34, // [34:34] is the sub-list for extension type_name
	34, // [34:34] is the sub-list for extension extendee
	0,  // [0:34] is the sub-list for field type_name
}

func init() { file_dota_gcmessages_common_league_proto_init() }
func file_dota_gcmessages_common_league_proto_init() {
	if File_dota_gcmessages_common_league_proto != nil {
		return
	}
	file_dota_shared_enums_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_dota_gcmessages_common_league_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTALeagueNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_league_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTALeagueNodeGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_league_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTALeague); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_league_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTALeagueInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_league_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTALeagueInfoList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_league_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTALeagueLiveGames); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_league_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTALeagueMessages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_league_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTALeaguePrizePool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_league_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTALeagueInfoListAdminsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_league_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTALeagueNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_league_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTALeagueNodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_league_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTALeagueAvailableLobbyNodesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_league_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTALeagueAvailableLobbyNodes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_league_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTALeagueNodeResults); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_league_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTADPCLeagueResults); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_league_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTADPCTeamResults); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_league_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTADPCSeasonResults); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_league_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTALeagueNode_MatchDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_league_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTALeagueNodeGroup_TeamStanding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_league_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTALeague_Info); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_league_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTALeague_Admin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_league_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTALeague_PrizePoolItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_league_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTALeague_PrizePool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_league_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTALeague_Stream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_league_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTALeague_SeriesInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_league_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTALeague_Player); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_league_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTALeagueLiveGames_LiveGame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_league_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTALeagueMessages_Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_league_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTALeagueAvailableLobbyNodes_NodeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_league_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTALeagueNodeResults_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_league_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTADPCLeagueResults_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_league_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTADPCTeamResults_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_league_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTADPCSeasonResults_TeamLeagueResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_league_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTADPCSeasonResults_TeamResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dota_gcmessages_common_league_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   34,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_dota_gcmessages_common_league_proto_goTypes,
		DependencyIndexes: file_dota_gcmessages_common_league_proto_depIdxs,
		EnumInfos:         file_dota_gcmessages_common_league_proto_enumTypes,
		MessageInfos:      file_dota_gcmessages_common_league_proto_msgTypes,
	}.Build()
	File_dota_gcmessages_common_league_proto = out.File
	file_dota_gcmessages_common_league_proto_rawDesc = nil
	file_dota_gcmessages_common_league_proto_goTypes = nil
	file_dota_gcmessages_common_league_proto_depIdxs = nil
}
