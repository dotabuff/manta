// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.6.1
// source: dota_gcmessages_client_tournament.proto

package dota

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ETournamentEvent int32

const (
	ETournamentEvent_k_ETournamentEvent_None                                      ETournamentEvent = 0
	ETournamentEvent_k_ETournamentEvent_TournamentCreated                         ETournamentEvent = 1
	ETournamentEvent_k_ETournamentEvent_TournamentsMerged                         ETournamentEvent = 2
	ETournamentEvent_k_ETournamentEvent_GameOutcome                               ETournamentEvent = 3
	ETournamentEvent_k_ETournamentEvent_TeamGivenBye                              ETournamentEvent = 4
	ETournamentEvent_k_ETournamentEvent_TournamentCanceledByAdmin                 ETournamentEvent = 5
	ETournamentEvent_k_ETournamentEvent_TeamAbandoned                             ETournamentEvent = 6
	ETournamentEvent_k_ETournamentEvent_ScheduledGameStarted                      ETournamentEvent = 7
	ETournamentEvent_k_ETournamentEvent_Canceled                                  ETournamentEvent = 8
	ETournamentEvent_k_ETournamentEvent_TeamParticipationTimedOut_EntryFeeRefund  ETournamentEvent = 9
	ETournamentEvent_k_ETournamentEvent_TeamParticipationTimedOut_EntryFeeForfeit ETournamentEvent = 10
	ETournamentEvent_k_ETournamentEvent_TeamParticipationTimedOut_GrantedVictory  ETournamentEvent = 11
)

// Enum value maps for ETournamentEvent.
var (
	ETournamentEvent_name = map[int32]string{
		0:  "k_ETournamentEvent_None",
		1:  "k_ETournamentEvent_TournamentCreated",
		2:  "k_ETournamentEvent_TournamentsMerged",
		3:  "k_ETournamentEvent_GameOutcome",
		4:  "k_ETournamentEvent_TeamGivenBye",
		5:  "k_ETournamentEvent_TournamentCanceledByAdmin",
		6:  "k_ETournamentEvent_TeamAbandoned",
		7:  "k_ETournamentEvent_ScheduledGameStarted",
		8:  "k_ETournamentEvent_Canceled",
		9:  "k_ETournamentEvent_TeamParticipationTimedOut_EntryFeeRefund",
		10: "k_ETournamentEvent_TeamParticipationTimedOut_EntryFeeForfeit",
		11: "k_ETournamentEvent_TeamParticipationTimedOut_GrantedVictory",
	}
	ETournamentEvent_value = map[string]int32{
		"k_ETournamentEvent_None":                                      0,
		"k_ETournamentEvent_TournamentCreated":                         1,
		"k_ETournamentEvent_TournamentsMerged":                         2,
		"k_ETournamentEvent_GameOutcome":                               3,
		"k_ETournamentEvent_TeamGivenBye":                              4,
		"k_ETournamentEvent_TournamentCanceledByAdmin":                 5,
		"k_ETournamentEvent_TeamAbandoned":                             6,
		"k_ETournamentEvent_ScheduledGameStarted":                      7,
		"k_ETournamentEvent_Canceled":                                  8,
		"k_ETournamentEvent_TeamParticipationTimedOut_EntryFeeRefund":  9,
		"k_ETournamentEvent_TeamParticipationTimedOut_EntryFeeForfeit": 10,
		"k_ETournamentEvent_TeamParticipationTimedOut_GrantedVictory":  11,
	}
)

func (x ETournamentEvent) Enum() *ETournamentEvent {
	p := new(ETournamentEvent)
	*p = x
	return p
}

func (x ETournamentEvent) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ETournamentEvent) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_tournament_proto_enumTypes[0].Descriptor()
}

func (ETournamentEvent) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_tournament_proto_enumTypes[0]
}

func (x ETournamentEvent) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ETournamentEvent) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ETournamentEvent(num)
	return nil
}

// Deprecated: Use ETournamentEvent.Descriptor instead.
func (ETournamentEvent) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_tournament_proto_rawDescGZIP(), []int{0}
}

type CMsgDOTATournamentInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeagueId            *uint32                                 `protobuf:"varint,1,opt,name=league_id,json=leagueId" json:"league_id,omitempty"`
	PhaseList           []*CMsgDOTATournamentInfo_Phase         `protobuf:"bytes,2,rep,name=phase_list,json=phaseList" json:"phase_list,omitempty"`
	TeamsList           []*CMsgDOTATournamentInfo_Team          `protobuf:"bytes,3,rep,name=teams_list,json=teamsList" json:"teams_list,omitempty"`
	UpcomingMatchesList []*CMsgDOTATournamentInfo_UpcomingMatch `protobuf:"bytes,4,rep,name=upcoming_matches_list,json=upcomingMatchesList" json:"upcoming_matches_list,omitempty"`
	NewsList            []*CMsgDOTATournamentInfo_News          `protobuf:"bytes,5,rep,name=news_list,json=newsList" json:"news_list,omitempty"`
}

func (x *CMsgDOTATournamentInfo) Reset() {
	*x = CMsgDOTATournamentInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_tournament_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTATournamentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTATournamentInfo) ProtoMessage() {}

func (x *CMsgDOTATournamentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_tournament_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTATournamentInfo.ProtoReflect.Descriptor instead.
func (*CMsgDOTATournamentInfo) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_tournament_proto_rawDescGZIP(), []int{0}
}

func (x *CMsgDOTATournamentInfo) GetLeagueId() uint32 {
	if x != nil && x.LeagueId != nil {
		return *x.LeagueId
	}
	return 0
}

func (x *CMsgDOTATournamentInfo) GetPhaseList() []*CMsgDOTATournamentInfo_Phase {
	if x != nil {
		return x.PhaseList
	}
	return nil
}

func (x *CMsgDOTATournamentInfo) GetTeamsList() []*CMsgDOTATournamentInfo_Team {
	if x != nil {
		return x.TeamsList
	}
	return nil
}

func (x *CMsgDOTATournamentInfo) GetUpcomingMatchesList() []*CMsgDOTATournamentInfo_UpcomingMatch {
	if x != nil {
		return x.UpcomingMatchesList
	}
	return nil
}

func (x *CMsgDOTATournamentInfo) GetNewsList() []*CMsgDOTATournamentInfo_News {
	if x != nil {
		return x.NewsList
	}
	return nil
}

type CMsgRequestWeekendTourneySchedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgRequestWeekendTourneySchedule) Reset() {
	*x = CMsgRequestWeekendTourneySchedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_tournament_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgRequestWeekendTourneySchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgRequestWeekendTourneySchedule) ProtoMessage() {}

func (x *CMsgRequestWeekendTourneySchedule) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_tournament_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgRequestWeekendTourneySchedule.ProtoReflect.Descriptor instead.
func (*CMsgRequestWeekendTourneySchedule) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_tournament_proto_rawDescGZIP(), []int{1}
}

type CMsgWeekendTourneySchedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Divisions []*CMsgWeekendTourneySchedule_Division `protobuf:"bytes,1,rep,name=divisions" json:"divisions,omitempty"`
}

func (x *CMsgWeekendTourneySchedule) Reset() {
	*x = CMsgWeekendTourneySchedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_tournament_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgWeekendTourneySchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgWeekendTourneySchedule) ProtoMessage() {}

func (x *CMsgWeekendTourneySchedule) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_tournament_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgWeekendTourneySchedule.ProtoReflect.Descriptor instead.
func (*CMsgWeekendTourneySchedule) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_tournament_proto_rawDescGZIP(), []int{2}
}

func (x *CMsgWeekendTourneySchedule) GetDivisions() []*CMsgWeekendTourneySchedule_Division {
	if x != nil {
		return x.Divisions
	}
	return nil
}

type CMsgWeekendTourneyOpts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Participating  *bool   `protobuf:"varint,1,opt,name=participating" json:"participating,omitempty"`
	DivisionId     *uint32 `protobuf:"varint,2,opt,name=division_id,json=divisionId" json:"division_id,omitempty"`
	Buyin          *uint32 `protobuf:"varint,3,opt,name=buyin" json:"buyin,omitempty"`
	SkillLevel     *uint32 `protobuf:"varint,4,opt,name=skill_level,json=skillLevel" json:"skill_level,omitempty"`
	MatchGroups    *uint32 `protobuf:"varint,5,opt,name=match_groups,json=matchGroups" json:"match_groups,omitempty"`
	TeamId         *uint32 `protobuf:"varint,6,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	PickupTeamName *string `protobuf:"bytes,7,opt,name=pickup_team_name,json=pickupTeamName" json:"pickup_team_name,omitempty"`
	PickupTeamLogo *uint64 `protobuf:"varint,8,opt,name=pickup_team_logo,json=pickupTeamLogo" json:"pickup_team_logo,omitempty"`
}

func (x *CMsgWeekendTourneyOpts) Reset() {
	*x = CMsgWeekendTourneyOpts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_tournament_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgWeekendTourneyOpts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgWeekendTourneyOpts) ProtoMessage() {}

func (x *CMsgWeekendTourneyOpts) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_tournament_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgWeekendTourneyOpts.ProtoReflect.Descriptor instead.
func (*CMsgWeekendTourneyOpts) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_tournament_proto_rawDescGZIP(), []int{3}
}

func (x *CMsgWeekendTourneyOpts) GetParticipating() bool {
	if x != nil && x.Participating != nil {
		return *x.Participating
	}
	return false
}

func (x *CMsgWeekendTourneyOpts) GetDivisionId() uint32 {
	if x != nil && x.DivisionId != nil {
		return *x.DivisionId
	}
	return 0
}

func (x *CMsgWeekendTourneyOpts) GetBuyin() uint32 {
	if x != nil && x.Buyin != nil {
		return *x.Buyin
	}
	return 0
}

func (x *CMsgWeekendTourneyOpts) GetSkillLevel() uint32 {
	if x != nil && x.SkillLevel != nil {
		return *x.SkillLevel
	}
	return 0
}

func (x *CMsgWeekendTourneyOpts) GetMatchGroups() uint32 {
	if x != nil && x.MatchGroups != nil {
		return *x.MatchGroups
	}
	return 0
}

func (x *CMsgWeekendTourneyOpts) GetTeamId() uint32 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

func (x *CMsgWeekendTourneyOpts) GetPickupTeamName() string {
	if x != nil && x.PickupTeamName != nil {
		return *x.PickupTeamName
	}
	return ""
}

func (x *CMsgWeekendTourneyOpts) GetPickupTeamLogo() uint64 {
	if x != nil && x.PickupTeamLogo != nil {
		return *x.PickupTeamLogo
	}
	return 0
}

type CMsgWeekendTourneyLeave struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgWeekendTourneyLeave) Reset() {
	*x = CMsgWeekendTourneyLeave{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_tournament_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgWeekendTourneyLeave) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgWeekendTourneyLeave) ProtoMessage() {}

func (x *CMsgWeekendTourneyLeave) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_tournament_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgWeekendTourneyLeave.ProtoReflect.Descriptor instead.
func (*CMsgWeekendTourneyLeave) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_tournament_proto_rawDescGZIP(), []int{4}
}

type CMsgDOTATournament struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TournamentId       *uint32                    `protobuf:"varint,1,opt,name=tournament_id,json=tournamentId" json:"tournament_id,omitempty"`
	DivisionId         *uint32                    `protobuf:"varint,2,opt,name=division_id,json=divisionId" json:"division_id,omitempty"`
	ScheduleTime       *uint32                    `protobuf:"varint,3,opt,name=schedule_time,json=scheduleTime" json:"schedule_time,omitempty"`
	SkillLevel         *uint32                    `protobuf:"varint,4,opt,name=skill_level,json=skillLevel" json:"skill_level,omitempty"`
	TournamentTemplate *ETournamentTemplate       `protobuf:"varint,5,opt,name=tournament_template,json=tournamentTemplate,enum=dota.ETournamentTemplate,def=0" json:"tournament_template,omitempty"`
	State              *ETournamentState          `protobuf:"varint,6,opt,name=state,enum=dota.ETournamentState,def=0" json:"state,omitempty"`
	StateSeqNum        *uint32                    `protobuf:"varint,10,opt,name=state_seq_num,json=stateSeqNum" json:"state_seq_num,omitempty"`
	SeasonTrophyId     *uint32                    `protobuf:"varint,11,opt,name=season_trophy_id,json=seasonTrophyId" json:"season_trophy_id,omitempty"`
	Teams              []*CMsgDOTATournament_Team `protobuf:"bytes,7,rep,name=teams" json:"teams,omitempty"`
	Games              []*CMsgDOTATournament_Game `protobuf:"bytes,8,rep,name=games" json:"games,omitempty"`
	Nodes              []*CMsgDOTATournament_Node `protobuf:"bytes,9,rep,name=nodes" json:"nodes,omitempty"`
}

// Default values for CMsgDOTATournament fields.
const (
	Default_CMsgDOTATournament_TournamentTemplate = ETournamentTemplate_k_ETournamentTemplate_None
	Default_CMsgDOTATournament_State              = ETournamentState_k_ETournamentState_Unknown
)

func (x *CMsgDOTATournament) Reset() {
	*x = CMsgDOTATournament{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_tournament_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTATournament) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTATournament) ProtoMessage() {}

func (x *CMsgDOTATournament) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_tournament_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTATournament.ProtoReflect.Descriptor instead.
func (*CMsgDOTATournament) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_tournament_proto_rawDescGZIP(), []int{5}
}

func (x *CMsgDOTATournament) GetTournamentId() uint32 {
	if x != nil && x.TournamentId != nil {
		return *x.TournamentId
	}
	return 0
}

func (x *CMsgDOTATournament) GetDivisionId() uint32 {
	if x != nil && x.DivisionId != nil {
		return *x.DivisionId
	}
	return 0
}

func (x *CMsgDOTATournament) GetScheduleTime() uint32 {
	if x != nil && x.ScheduleTime != nil {
		return *x.ScheduleTime
	}
	return 0
}

func (x *CMsgDOTATournament) GetSkillLevel() uint32 {
	if x != nil && x.SkillLevel != nil {
		return *x.SkillLevel
	}
	return 0
}

func (x *CMsgDOTATournament) GetTournamentTemplate() ETournamentTemplate {
	if x != nil && x.TournamentTemplate != nil {
		return *x.TournamentTemplate
	}
	return Default_CMsgDOTATournament_TournamentTemplate
}

func (x *CMsgDOTATournament) GetState() ETournamentState {
	if x != nil && x.State != nil {
		return *x.State
	}
	return Default_CMsgDOTATournament_State
}

func (x *CMsgDOTATournament) GetStateSeqNum() uint32 {
	if x != nil && x.StateSeqNum != nil {
		return *x.StateSeqNum
	}
	return 0
}

func (x *CMsgDOTATournament) GetSeasonTrophyId() uint32 {
	if x != nil && x.SeasonTrophyId != nil {
		return *x.SeasonTrophyId
	}
	return 0
}

func (x *CMsgDOTATournament) GetTeams() []*CMsgDOTATournament_Team {
	if x != nil {
		return x.Teams
	}
	return nil
}

func (x *CMsgDOTATournament) GetGames() []*CMsgDOTATournament_Game {
	if x != nil {
		return x.Games
	}
	return nil
}

func (x *CMsgDOTATournament) GetNodes() []*CMsgDOTATournament_Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type CMsgDOTATournamentStateChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewTournamentId     *uint32                                     `protobuf:"varint,1,opt,name=new_tournament_id,json=newTournamentId" json:"new_tournament_id,omitempty"`
	Event               *ETournamentEvent                           `protobuf:"varint,2,opt,name=event,enum=dota.ETournamentEvent,def=0" json:"event,omitempty"`
	NewTournamentState  *ETournamentState                           `protobuf:"varint,3,opt,name=new_tournament_state,json=newTournamentState,enum=dota.ETournamentState,def=0" json:"new_tournament_state,omitempty"`
	GameChanges         []*CMsgDOTATournamentStateChange_GameChange `protobuf:"bytes,4,rep,name=game_changes,json=gameChanges" json:"game_changes,omitempty"`
	TeamChanges         []*CMsgDOTATournamentStateChange_TeamChange `protobuf:"bytes,5,rep,name=team_changes,json=teamChanges" json:"team_changes,omitempty"`
	MergedTournamentIds []uint32                                    `protobuf:"varint,6,rep,packed,name=merged_tournament_ids,json=mergedTournamentIds" json:"merged_tournament_ids,omitempty"`
	StateSeqNum         *uint32                                     `protobuf:"varint,7,opt,name=state_seq_num,json=stateSeqNum" json:"state_seq_num,omitempty"`
}

// Default values for CMsgDOTATournamentStateChange fields.
const (
	Default_CMsgDOTATournamentStateChange_Event              = ETournamentEvent_k_ETournamentEvent_None
	Default_CMsgDOTATournamentStateChange_NewTournamentState = ETournamentState_k_ETournamentState_Unknown
)

func (x *CMsgDOTATournamentStateChange) Reset() {
	*x = CMsgDOTATournamentStateChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_tournament_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTATournamentStateChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTATournamentStateChange) ProtoMessage() {}

func (x *CMsgDOTATournamentStateChange) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_tournament_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTATournamentStateChange.ProtoReflect.Descriptor instead.
func (*CMsgDOTATournamentStateChange) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_tournament_proto_rawDescGZIP(), []int{6}
}

func (x *CMsgDOTATournamentStateChange) GetNewTournamentId() uint32 {
	if x != nil && x.NewTournamentId != nil {
		return *x.NewTournamentId
	}
	return 0
}

func (x *CMsgDOTATournamentStateChange) GetEvent() ETournamentEvent {
	if x != nil && x.Event != nil {
		return *x.Event
	}
	return Default_CMsgDOTATournamentStateChange_Event
}

func (x *CMsgDOTATournamentStateChange) GetNewTournamentState() ETournamentState {
	if x != nil && x.NewTournamentState != nil {
		return *x.NewTournamentState
	}
	return Default_CMsgDOTATournamentStateChange_NewTournamentState
}

func (x *CMsgDOTATournamentStateChange) GetGameChanges() []*CMsgDOTATournamentStateChange_GameChange {
	if x != nil {
		return x.GameChanges
	}
	return nil
}

func (x *CMsgDOTATournamentStateChange) GetTeamChanges() []*CMsgDOTATournamentStateChange_TeamChange {
	if x != nil {
		return x.TeamChanges
	}
	return nil
}

func (x *CMsgDOTATournamentStateChange) GetMergedTournamentIds() []uint32 {
	if x != nil {
		return x.MergedTournamentIds
	}
	return nil
}

func (x *CMsgDOTATournamentStateChange) GetStateSeqNum() uint32 {
	if x != nil && x.StateSeqNum != nil {
		return *x.StateSeqNum
	}
	return 0
}

type CMsgDOTATournamentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TournamentId        *uint32 `protobuf:"varint,1,opt,name=tournament_id,json=tournamentId" json:"tournament_id,omitempty"`
	ClientTournamentGid *uint64 `protobuf:"varint,2,opt,name=client_tournament_gid,json=clientTournamentGid" json:"client_tournament_gid,omitempty"`
}

func (x *CMsgDOTATournamentRequest) Reset() {
	*x = CMsgDOTATournamentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_tournament_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTATournamentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTATournamentRequest) ProtoMessage() {}

func (x *CMsgDOTATournamentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_tournament_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTATournamentRequest.ProtoReflect.Descriptor instead.
func (*CMsgDOTATournamentRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_tournament_proto_rawDescGZIP(), []int{7}
}

func (x *CMsgDOTATournamentRequest) GetTournamentId() uint32 {
	if x != nil && x.TournamentId != nil {
		return *x.TournamentId
	}
	return 0
}

func (x *CMsgDOTATournamentRequest) GetClientTournamentGid() uint64 {
	if x != nil && x.ClientTournamentGid != nil {
		return *x.ClientTournamentGid
	}
	return 0
}

type CMsgDOTATournamentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result     *uint32             `protobuf:"varint,1,opt,name=result,def=2" json:"result,omitempty"`
	Tournament *CMsgDOTATournament `protobuf:"bytes,2,opt,name=tournament" json:"tournament,omitempty"`
}

// Default values for CMsgDOTATournamentResponse fields.
const (
	Default_CMsgDOTATournamentResponse_Result = uint32(2)
)

func (x *CMsgDOTATournamentResponse) Reset() {
	*x = CMsgDOTATournamentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_tournament_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTATournamentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTATournamentResponse) ProtoMessage() {}

func (x *CMsgDOTATournamentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_tournament_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTATournamentResponse.ProtoReflect.Descriptor instead.
func (*CMsgDOTATournamentResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_tournament_proto_rawDescGZIP(), []int{8}
}

func (x *CMsgDOTATournamentResponse) GetResult() uint32 {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgDOTATournamentResponse_Result
}

func (x *CMsgDOTATournamentResponse) GetTournament() *CMsgDOTATournament {
	if x != nil {
		return x.Tournament
	}
	return nil
}

type CMsgDOTAClearTournamentGame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TournamentId *uint32 `protobuf:"varint,1,opt,name=tournament_id,json=tournamentId" json:"tournament_id,omitempty"`
	GameId       *uint32 `protobuf:"varint,2,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
}

func (x *CMsgDOTAClearTournamentGame) Reset() {
	*x = CMsgDOTAClearTournamentGame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_tournament_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAClearTournamentGame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAClearTournamentGame) ProtoMessage() {}

func (x *CMsgDOTAClearTournamentGame) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_tournament_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAClearTournamentGame.ProtoReflect.Descriptor instead.
func (*CMsgDOTAClearTournamentGame) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_tournament_proto_rawDescGZIP(), []int{9}
}

func (x *CMsgDOTAClearTournamentGame) GetTournamentId() uint32 {
	if x != nil && x.TournamentId != nil {
		return *x.TournamentId
	}
	return 0
}

func (x *CMsgDOTAClearTournamentGame) GetGameId() uint32 {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return 0
}

type CMsgDOTAWeekendTourneyPlayerSkillLevelStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkillLevel        *uint32 `protobuf:"varint,1,opt,name=skill_level,json=skillLevel" json:"skill_level,omitempty"`
	TimesWon_0        *uint32 `protobuf:"varint,2,opt,name=times_won_0,json=timesWon0" json:"times_won_0,omitempty"`
	TimesWon_1        *uint32 `protobuf:"varint,3,opt,name=times_won_1,json=timesWon1" json:"times_won_1,omitempty"`
	TimesWon_2        *uint32 `protobuf:"varint,4,opt,name=times_won_2,json=timesWon2" json:"times_won_2,omitempty"`
	TimesWon_3        *uint32 `protobuf:"varint,5,opt,name=times_won_3,json=timesWon3" json:"times_won_3,omitempty"`
	TimesByeAndLost   *uint32 `protobuf:"varint,6,opt,name=times_bye_and_lost,json=timesByeAndLost" json:"times_bye_and_lost,omitempty"`
	TimesByeAndWon    *uint32 `protobuf:"varint,7,opt,name=times_bye_and_won,json=timesByeAndWon" json:"times_bye_and_won,omitempty"`
	TimesUnusualChamp *uint32 `protobuf:"varint,10,opt,name=times_unusual_champ,json=timesUnusualChamp" json:"times_unusual_champ,omitempty"`
	TotalGamesWon     *uint32 `protobuf:"varint,8,opt,name=total_games_won,json=totalGamesWon" json:"total_games_won,omitempty"`
	Score             *uint32 `protobuf:"varint,9,opt,name=score" json:"score,omitempty"`
}

func (x *CMsgDOTAWeekendTourneyPlayerSkillLevelStats) Reset() {
	*x = CMsgDOTAWeekendTourneyPlayerSkillLevelStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_tournament_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAWeekendTourneyPlayerSkillLevelStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAWeekendTourneyPlayerSkillLevelStats) ProtoMessage() {}

func (x *CMsgDOTAWeekendTourneyPlayerSkillLevelStats) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_tournament_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAWeekendTourneyPlayerSkillLevelStats.ProtoReflect.Descriptor instead.
func (*CMsgDOTAWeekendTourneyPlayerSkillLevelStats) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_tournament_proto_rawDescGZIP(), []int{10}
}

func (x *CMsgDOTAWeekendTourneyPlayerSkillLevelStats) GetSkillLevel() uint32 {
	if x != nil && x.SkillLevel != nil {
		return *x.SkillLevel
	}
	return 0
}

func (x *CMsgDOTAWeekendTourneyPlayerSkillLevelStats) GetTimesWon_0() uint32 {
	if x != nil && x.TimesWon_0 != nil {
		return *x.TimesWon_0
	}
	return 0
}

func (x *CMsgDOTAWeekendTourneyPlayerSkillLevelStats) GetTimesWon_1() uint32 {
	if x != nil && x.TimesWon_1 != nil {
		return *x.TimesWon_1
	}
	return 0
}

func (x *CMsgDOTAWeekendTourneyPlayerSkillLevelStats) GetTimesWon_2() uint32 {
	if x != nil && x.TimesWon_2 != nil {
		return *x.TimesWon_2
	}
	return 0
}

func (x *CMsgDOTAWeekendTourneyPlayerSkillLevelStats) GetTimesWon_3() uint32 {
	if x != nil && x.TimesWon_3 != nil {
		return *x.TimesWon_3
	}
	return 0
}

func (x *CMsgDOTAWeekendTourneyPlayerSkillLevelStats) GetTimesByeAndLost() uint32 {
	if x != nil && x.TimesByeAndLost != nil {
		return *x.TimesByeAndLost
	}
	return 0
}

func (x *CMsgDOTAWeekendTourneyPlayerSkillLevelStats) GetTimesByeAndWon() uint32 {
	if x != nil && x.TimesByeAndWon != nil {
		return *x.TimesByeAndWon
	}
	return 0
}

func (x *CMsgDOTAWeekendTourneyPlayerSkillLevelStats) GetTimesUnusualChamp() uint32 {
	if x != nil && x.TimesUnusualChamp != nil {
		return *x.TimesUnusualChamp
	}
	return 0
}

func (x *CMsgDOTAWeekendTourneyPlayerSkillLevelStats) GetTotalGamesWon() uint32 {
	if x != nil && x.TotalGamesWon != nil {
		return *x.TotalGamesWon
	}
	return 0
}

func (x *CMsgDOTAWeekendTourneyPlayerSkillLevelStats) GetScore() uint32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

type CMsgDOTAWeekendTourneyPlayerStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId      *uint32                                        `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	SeasonTrophyId *uint32                                        `protobuf:"varint,2,opt,name=season_trophy_id,json=seasonTrophyId" json:"season_trophy_id,omitempty"`
	SkillLevels    []*CMsgDOTAWeekendTourneyPlayerSkillLevelStats `protobuf:"bytes,3,rep,name=skill_levels,json=skillLevels" json:"skill_levels,omitempty"`
	CurrentTier    *uint32                                        `protobuf:"varint,4,opt,name=current_tier,json=currentTier" json:"current_tier,omitempty"`
}

func (x *CMsgDOTAWeekendTourneyPlayerStats) Reset() {
	*x = CMsgDOTAWeekendTourneyPlayerStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_tournament_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAWeekendTourneyPlayerStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAWeekendTourneyPlayerStats) ProtoMessage() {}

func (x *CMsgDOTAWeekendTourneyPlayerStats) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_tournament_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAWeekendTourneyPlayerStats.ProtoReflect.Descriptor instead.
func (*CMsgDOTAWeekendTourneyPlayerStats) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_tournament_proto_rawDescGZIP(), []int{11}
}

func (x *CMsgDOTAWeekendTourneyPlayerStats) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgDOTAWeekendTourneyPlayerStats) GetSeasonTrophyId() uint32 {
	if x != nil && x.SeasonTrophyId != nil {
		return *x.SeasonTrophyId
	}
	return 0
}

func (x *CMsgDOTAWeekendTourneyPlayerStats) GetSkillLevels() []*CMsgDOTAWeekendTourneyPlayerSkillLevelStats {
	if x != nil {
		return x.SkillLevels
	}
	return nil
}

func (x *CMsgDOTAWeekendTourneyPlayerStats) GetCurrentTier() uint32 {
	if x != nil && x.CurrentTier != nil {
		return *x.CurrentTier
	}
	return 0
}

type CMsgDOTAWeekendTourneyPlayerStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId      *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	SeasonTrophyId *uint32 `protobuf:"varint,2,opt,name=season_trophy_id,json=seasonTrophyId" json:"season_trophy_id,omitempty"`
}

func (x *CMsgDOTAWeekendTourneyPlayerStatsRequest) Reset() {
	*x = CMsgDOTAWeekendTourneyPlayerStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_tournament_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAWeekendTourneyPlayerStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAWeekendTourneyPlayerStatsRequest) ProtoMessage() {}

func (x *CMsgDOTAWeekendTourneyPlayerStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_tournament_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAWeekendTourneyPlayerStatsRequest.ProtoReflect.Descriptor instead.
func (*CMsgDOTAWeekendTourneyPlayerStatsRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_tournament_proto_rawDescGZIP(), []int{12}
}

func (x *CMsgDOTAWeekendTourneyPlayerStatsRequest) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgDOTAWeekendTourneyPlayerStatsRequest) GetSeasonTrophyId() uint32 {
	if x != nil && x.SeasonTrophyId != nil {
		return *x.SeasonTrophyId
	}
	return 0
}

type CMsgDOTAWeekendTourneyPlayerHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId      *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	SeasonTrophyId *uint32 `protobuf:"varint,2,opt,name=season_trophy_id,json=seasonTrophyId" json:"season_trophy_id,omitempty"`
}

func (x *CMsgDOTAWeekendTourneyPlayerHistoryRequest) Reset() {
	*x = CMsgDOTAWeekendTourneyPlayerHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_tournament_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAWeekendTourneyPlayerHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAWeekendTourneyPlayerHistoryRequest) ProtoMessage() {}

func (x *CMsgDOTAWeekendTourneyPlayerHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_tournament_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAWeekendTourneyPlayerHistoryRequest.ProtoReflect.Descriptor instead.
func (*CMsgDOTAWeekendTourneyPlayerHistoryRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_tournament_proto_rawDescGZIP(), []int{13}
}

func (x *CMsgDOTAWeekendTourneyPlayerHistoryRequest) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgDOTAWeekendTourneyPlayerHistoryRequest) GetSeasonTrophyId() uint32 {
	if x != nil && x.SeasonTrophyId != nil {
		return *x.SeasonTrophyId
	}
	return 0
}

type CMsgDOTAWeekendTourneyPlayerHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId   *uint32                                           `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Tournaments []*CMsgDOTAWeekendTourneyPlayerHistory_Tournament `protobuf:"bytes,3,rep,name=tournaments" json:"tournaments,omitempty"`
}

func (x *CMsgDOTAWeekendTourneyPlayerHistory) Reset() {
	*x = CMsgDOTAWeekendTourneyPlayerHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_tournament_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAWeekendTourneyPlayerHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAWeekendTourneyPlayerHistory) ProtoMessage() {}

func (x *CMsgDOTAWeekendTourneyPlayerHistory) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_tournament_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAWeekendTourneyPlayerHistory.ProtoReflect.Descriptor instead.
func (*CMsgDOTAWeekendTourneyPlayerHistory) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_tournament_proto_rawDescGZIP(), []int{14}
}

func (x *CMsgDOTAWeekendTourneyPlayerHistory) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgDOTAWeekendTourneyPlayerHistory) GetTournaments() []*CMsgDOTAWeekendTourneyPlayerHistory_Tournament {
	if x != nil {
		return x.Tournaments
	}
	return nil
}

type CMsgDOTAWeekendTourneyParticipationDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Divisions []*CMsgDOTAWeekendTourneyParticipationDetails_Division `protobuf:"bytes,1,rep,name=divisions" json:"divisions,omitempty"`
}

func (x *CMsgDOTAWeekendTourneyParticipationDetails) Reset() {
	*x = CMsgDOTAWeekendTourneyParticipationDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_tournament_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAWeekendTourneyParticipationDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAWeekendTourneyParticipationDetails) ProtoMessage() {}

func (x *CMsgDOTAWeekendTourneyParticipationDetails) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_tournament_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAWeekendTourneyParticipationDetails.ProtoReflect.Descriptor instead.
func (*CMsgDOTAWeekendTourneyParticipationDetails) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_tournament_proto_rawDescGZIP(), []int{15}
}

func (x *CMsgDOTAWeekendTourneyParticipationDetails) GetDivisions() []*CMsgDOTAWeekendTourneyParticipationDetails_Division {
	if x != nil {
		return x.Divisions
	}
	return nil
}

type CMsgDOTATournamentInfo_PhaseGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId   *uint32 `protobuf:"varint,1,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	GroupName *string `protobuf:"bytes,2,opt,name=group_name,json=groupName" json:"group_name,omitempty"`
}

func (x *CMsgDOTATournamentInfo_PhaseGroup) Reset() {
	*x = CMsgDOTATournamentInfo_PhaseGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_tournament_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTATournamentInfo_PhaseGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTATournamentInfo_PhaseGroup) ProtoMessage() {}

func (x *CMsgDOTATournamentInfo_PhaseGroup) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_tournament_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTATournamentInfo_PhaseGroup.ProtoReflect.Descriptor instead.
func (*CMsgDOTATournamentInfo_PhaseGroup) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_tournament_proto_rawDescGZIP(), []int{0, 0}
}

func (x *CMsgDOTATournamentInfo_PhaseGroup) GetGroupId() uint32 {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return 0
}

func (x *CMsgDOTATournamentInfo_PhaseGroup) GetGroupName() string {
	if x != nil && x.GroupName != nil {
		return *x.GroupName
	}
	return ""
}

type CMsgDOTATournamentInfo_Phase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhaseId      *uint32                              `protobuf:"varint,1,opt,name=phase_id,json=phaseId" json:"phase_id,omitempty"`
	PhaseName    *string                              `protobuf:"bytes,2,opt,name=phase_name,json=phaseName" json:"phase_name,omitempty"`
	TypeId       *uint32                              `protobuf:"varint,3,opt,name=type_id,json=typeId" json:"type_id,omitempty"`
	Iterations   *uint32                              `protobuf:"varint,4,opt,name=iterations" json:"iterations,omitempty"`
	MinStartTime *uint32                              `protobuf:"varint,5,opt,name=min_start_time,json=minStartTime" json:"min_start_time,omitempty"`
	MaxStartTime *uint32                              `protobuf:"varint,6,opt,name=max_start_time,json=maxStartTime" json:"max_start_time,omitempty"`
	GroupList    []*CMsgDOTATournamentInfo_PhaseGroup `protobuf:"bytes,7,rep,name=group_list,json=groupList" json:"group_list,omitempty"`
}

func (x *CMsgDOTATournamentInfo_Phase) Reset() {
	*x = CMsgDOTATournamentInfo_Phase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_tournament_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTATournamentInfo_Phase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTATournamentInfo_Phase) ProtoMessage() {}

func (x *CMsgDOTATournamentInfo_Phase) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_tournament_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTATournamentInfo_Phase.ProtoReflect.Descriptor instead.
func (*CMsgDOTATournamentInfo_Phase) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_tournament_proto_rawDescGZIP(), []int{0, 1}
}

func (x *CMsgDOTATournamentInfo_Phase) GetPhaseId() uint32 {
	if x != nil && x.PhaseId != nil {
		return *x.PhaseId
	}
	return 0
}

func (x *CMsgDOTATournamentInfo_Phase) GetPhaseName() string {
	if x != nil && x.PhaseName != nil {
		return *x.PhaseName
	}
	return ""
}

func (x *CMsgDOTATournamentInfo_Phase) GetTypeId() uint32 {
	if x != nil && x.TypeId != nil {
		return *x.TypeId
	}
	return 0
}

func (x *CMsgDOTATournamentInfo_Phase) GetIterations() uint32 {
	if x != nil && x.Iterations != nil {
		return *x.Iterations
	}
	return 0
}

func (x *CMsgDOTATournamentInfo_Phase) GetMinStartTime() uint32 {
	if x != nil && x.MinStartTime != nil {
		return *x.MinStartTime
	}
	return 0
}

func (x *CMsgDOTATournamentInfo_Phase) GetMaxStartTime() uint32 {
	if x != nil && x.MaxStartTime != nil {
		return *x.MaxStartTime
	}
	return 0
}

func (x *CMsgDOTATournamentInfo_Phase) GetGroupList() []*CMsgDOTATournamentInfo_PhaseGroup {
	if x != nil {
		return x.GroupList
	}
	return nil
}

type CMsgDOTATournamentInfo_Team struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamId     *uint32 `protobuf:"varint,1,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	Name       *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Tag        *string `protobuf:"bytes,3,opt,name=tag" json:"tag,omitempty"`
	TeamLogo   *uint64 `protobuf:"varint,4,opt,name=team_logo,json=teamLogo" json:"team_logo,omitempty"`
	Eliminated *bool   `protobuf:"varint,5,opt,name=eliminated" json:"eliminated,omitempty"`
}

func (x *CMsgDOTATournamentInfo_Team) Reset() {
	*x = CMsgDOTATournamentInfo_Team{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_tournament_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTATournamentInfo_Team) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTATournamentInfo_Team) ProtoMessage() {}

func (x *CMsgDOTATournamentInfo_Team) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_tournament_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTATournamentInfo_Team.ProtoReflect.Descriptor instead.
func (*CMsgDOTATournamentInfo_Team) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_tournament_proto_rawDescGZIP(), []int{0, 2}
}

func (x *CMsgDOTATournamentInfo_Team) GetTeamId() uint32 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

func (x *CMsgDOTATournamentInfo_Team) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CMsgDOTATournamentInfo_Team) GetTag() string {
	if x != nil && x.Tag != nil {
		return *x.Tag
	}
	return ""
}

func (x *CMsgDOTATournamentInfo_Team) GetTeamLogo() uint64 {
	if x != nil && x.TeamLogo != nil {
		return *x.TeamLogo
	}
	return 0
}

func (x *CMsgDOTATournamentInfo_Team) GetEliminated() bool {
	if x != nil && x.Eliminated != nil {
		return *x.Eliminated
	}
	return false
}

type CMsgDOTATournamentInfo_UpcomingMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeriesId                    *uint32 `protobuf:"varint,1,opt,name=series_id,json=seriesId" json:"series_id,omitempty"`
	Team1Id                     *uint32 `protobuf:"varint,2,opt,name=team1_id,json=team1Id" json:"team1_id,omitempty"`
	Team2Id                     *uint32 `protobuf:"varint,3,opt,name=team2_id,json=team2Id" json:"team2_id,omitempty"`
	Bo                          *uint32 `protobuf:"varint,4,opt,name=bo" json:"bo,omitempty"`
	StageName                   *string `protobuf:"bytes,5,opt,name=stage_name,json=stageName" json:"stage_name,omitempty"`
	StartTime                   *uint32 `protobuf:"varint,6,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	WinnerStage                 *string `protobuf:"bytes,7,opt,name=winner_stage,json=winnerStage" json:"winner_stage,omitempty"`
	LoserStage                  *string `protobuf:"bytes,8,opt,name=loser_stage,json=loserStage" json:"loser_stage,omitempty"`
	Team1Tag                    *string `protobuf:"bytes,9,opt,name=team1_tag,json=team1Tag" json:"team1_tag,omitempty"`
	Team2Tag                    *string `protobuf:"bytes,10,opt,name=team2_tag,json=team2Tag" json:"team2_tag,omitempty"`
	Team1PrevOpponentTag        *string `protobuf:"bytes,11,opt,name=team1_prev_opponent_tag,json=team1PrevOpponentTag" json:"team1_prev_opponent_tag,omitempty"`
	Team2PrevOpponentTag        *string `protobuf:"bytes,12,opt,name=team2_prev_opponent_tag,json=team2PrevOpponentTag" json:"team2_prev_opponent_tag,omitempty"`
	Team1Logo                   *uint64 `protobuf:"varint,13,opt,name=team1_logo,json=team1Logo" json:"team1_logo,omitempty"`
	Team2Logo                   *uint64 `protobuf:"varint,14,opt,name=team2_logo,json=team2Logo" json:"team2_logo,omitempty"`
	Team1PrevOpponentLogo       *uint64 `protobuf:"varint,15,opt,name=team1_prev_opponent_logo,json=team1PrevOpponentLogo" json:"team1_prev_opponent_logo,omitempty"`
	Team2PrevOpponentLogo       *uint64 `protobuf:"varint,16,opt,name=team2_prev_opponent_logo,json=team2PrevOpponentLogo" json:"team2_prev_opponent_logo,omitempty"`
	Team1PrevOpponentId         *uint32 `protobuf:"varint,17,opt,name=team1_prev_opponent_id,json=team1PrevOpponentId" json:"team1_prev_opponent_id,omitempty"`
	Team2PrevOpponentId         *uint32 `protobuf:"varint,18,opt,name=team2_prev_opponent_id,json=team2PrevOpponentId" json:"team2_prev_opponent_id,omitempty"`
	Team1PrevMatchScore         *uint32 `protobuf:"varint,19,opt,name=team1_prev_match_score,json=team1PrevMatchScore" json:"team1_prev_match_score,omitempty"`
	Team1PrevMatchOpponentScore *uint32 `protobuf:"varint,20,opt,name=team1_prev_match_opponent_score,json=team1PrevMatchOpponentScore" json:"team1_prev_match_opponent_score,omitempty"`
	Team2PrevMatchScore         *uint32 `protobuf:"varint,21,opt,name=team2_prev_match_score,json=team2PrevMatchScore" json:"team2_prev_match_score,omitempty"`
	Team2PrevMatchOpponentScore *uint32 `protobuf:"varint,22,opt,name=team2_prev_match_opponent_score,json=team2PrevMatchOpponentScore" json:"team2_prev_match_opponent_score,omitempty"`
	PhaseType                   *uint32 `protobuf:"varint,23,opt,name=phase_type,json=phaseType" json:"phase_type,omitempty"`
	Team1Score                  *uint32 `protobuf:"varint,24,opt,name=team1_score,json=team1Score" json:"team1_score,omitempty"`
	Team2Score                  *uint32 `protobuf:"varint,25,opt,name=team2_score,json=team2Score" json:"team2_score,omitempty"`
	PhaseId                     *uint32 `protobuf:"varint,26,opt,name=phase_id,json=phaseId" json:"phase_id,omitempty"`
}

func (x *CMsgDOTATournamentInfo_UpcomingMatch) Reset() {
	*x = CMsgDOTATournamentInfo_UpcomingMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_tournament_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTATournamentInfo_UpcomingMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTATournamentInfo_UpcomingMatch) ProtoMessage() {}

func (x *CMsgDOTATournamentInfo_UpcomingMatch) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_tournament_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTATournamentInfo_UpcomingMatch.ProtoReflect.Descriptor instead.
func (*CMsgDOTATournamentInfo_UpcomingMatch) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_tournament_proto_rawDescGZIP(), []int{0, 3}
}

func (x *CMsgDOTATournamentInfo_UpcomingMatch) GetSeriesId() uint32 {
	if x != nil && x.SeriesId != nil {
		return *x.SeriesId
	}
	return 0
}

func (x *CMsgDOTATournamentInfo_UpcomingMatch) GetTeam1Id() uint32 {
	if x != nil && x.Team1Id != nil {
		return *x.Team1Id
	}
	return 0
}

func (x *CMsgDOTATournamentInfo_UpcomingMatch) GetTeam2Id() uint32 {
	if x != nil && x.Team2Id != nil {
		return *x.Team2Id
	}
	return 0
}

func (x *CMsgDOTATournamentInfo_UpcomingMatch) GetBo() uint32 {
	if x != nil && x.Bo != nil {
		return *x.Bo
	}
	return 0
}

func (x *CMsgDOTATournamentInfo_UpcomingMatch) GetStageName() string {
	if x != nil && x.StageName != nil {
		return *x.StageName
	}
	return ""
}

func (x *CMsgDOTATournamentInfo_UpcomingMatch) GetStartTime() uint32 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *CMsgDOTATournamentInfo_UpcomingMatch) GetWinnerStage() string {
	if x != nil && x.WinnerStage != nil {
		return *x.WinnerStage
	}
	return ""
}

func (x *CMsgDOTATournamentInfo_UpcomingMatch) GetLoserStage() string {
	if x != nil && x.LoserStage != nil {
		return *x.LoserStage
	}
	return ""
}

func (x *CMsgDOTATournamentInfo_UpcomingMatch) GetTeam1Tag() string {
	if x != nil && x.Team1Tag != nil {
		return *x.Team1Tag
	}
	return ""
}

func (x *CMsgDOTATournamentInfo_UpcomingMatch) GetTeam2Tag() string {
	if x != nil && x.Team2Tag != nil {
		return *x.Team2Tag
	}
	return ""
}

func (x *CMsgDOTATournamentInfo_UpcomingMatch) GetTeam1PrevOpponentTag() string {
	if x != nil && x.Team1PrevOpponentTag != nil {
		return *x.Team1PrevOpponentTag
	}
	return ""
}

func (x *CMsgDOTATournamentInfo_UpcomingMatch) GetTeam2PrevOpponentTag() string {
	if x != nil && x.Team2PrevOpponentTag != nil {
		return *x.Team2PrevOpponentTag
	}
	return ""
}

func (x *CMsgDOTATournamentInfo_UpcomingMatch) GetTeam1Logo() uint64 {
	if x != nil && x.Team1Logo != nil {
		return *x.Team1Logo
	}
	return 0
}

func (x *CMsgDOTATournamentInfo_UpcomingMatch) GetTeam2Logo() uint64 {
	if x != nil && x.Team2Logo != nil {
		return *x.Team2Logo
	}
	return 0
}

func (x *CMsgDOTATournamentInfo_UpcomingMatch) GetTeam1PrevOpponentLogo() uint64 {
	if x != nil && x.Team1PrevOpponentLogo != nil {
		return *x.Team1PrevOpponentLogo
	}
	return 0
}

func (x *CMsgDOTATournamentInfo_UpcomingMatch) GetTeam2PrevOpponentLogo() uint64 {
	if x != nil && x.Team2PrevOpponentLogo != nil {
		return *x.Team2PrevOpponentLogo
	}
	return 0
}

func (x *CMsgDOTATournamentInfo_UpcomingMatch) GetTeam1PrevOpponentId() uint32 {
	if x != nil && x.Team1PrevOpponentId != nil {
		return *x.Team1PrevOpponentId
	}
	return 0
}

func (x *CMsgDOTATournamentInfo_UpcomingMatch) GetTeam2PrevOpponentId() uint32 {
	if x != nil && x.Team2PrevOpponentId != nil {
		return *x.Team2PrevOpponentId
	}
	return 0
}

func (x *CMsgDOTATournamentInfo_UpcomingMatch) GetTeam1PrevMatchScore() uint32 {
	if x != nil && x.Team1PrevMatchScore != nil {
		return *x.Team1PrevMatchScore
	}
	return 0
}

func (x *CMsgDOTATournamentInfo_UpcomingMatch) GetTeam1PrevMatchOpponentScore() uint32 {
	if x != nil && x.Team1PrevMatchOpponentScore != nil {
		return *x.Team1PrevMatchOpponentScore
	}
	return 0
}

func (x *CMsgDOTATournamentInfo_UpcomingMatch) GetTeam2PrevMatchScore() uint32 {
	if x != nil && x.Team2PrevMatchScore != nil {
		return *x.Team2PrevMatchScore
	}
	return 0
}

func (x *CMsgDOTATournamentInfo_UpcomingMatch) GetTeam2PrevMatchOpponentScore() uint32 {
	if x != nil && x.Team2PrevMatchOpponentScore != nil {
		return *x.Team2PrevMatchOpponentScore
	}
	return 0
}

func (x *CMsgDOTATournamentInfo_UpcomingMatch) GetPhaseType() uint32 {
	if x != nil && x.PhaseType != nil {
		return *x.PhaseType
	}
	return 0
}

func (x *CMsgDOTATournamentInfo_UpcomingMatch) GetTeam1Score() uint32 {
	if x != nil && x.Team1Score != nil {
		return *x.Team1Score
	}
	return 0
}

func (x *CMsgDOTATournamentInfo_UpcomingMatch) GetTeam2Score() uint32 {
	if x != nil && x.Team2Score != nil {
		return *x.Team2Score
	}
	return 0
}

func (x *CMsgDOTATournamentInfo_UpcomingMatch) GetPhaseId() uint32 {
	if x != nil && x.PhaseId != nil {
		return *x.PhaseId
	}
	return 0
}

type CMsgDOTATournamentInfo_News struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Link      *string `protobuf:"bytes,1,opt,name=link" json:"link,omitempty"`
	Title     *string `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Image     *string `protobuf:"bytes,3,opt,name=image" json:"image,omitempty"`
	Timestamp *uint32 `protobuf:"varint,4,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (x *CMsgDOTATournamentInfo_News) Reset() {
	*x = CMsgDOTATournamentInfo_News{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_tournament_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTATournamentInfo_News) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTATournamentInfo_News) ProtoMessage() {}

func (x *CMsgDOTATournamentInfo_News) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_tournament_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTATournamentInfo_News.ProtoReflect.Descriptor instead.
func (*CMsgDOTATournamentInfo_News) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_tournament_proto_rawDescGZIP(), []int{0, 4}
}

func (x *CMsgDOTATournamentInfo_News) GetLink() string {
	if x != nil && x.Link != nil {
		return *x.Link
	}
	return ""
}

func (x *CMsgDOTATournamentInfo_News) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *CMsgDOTATournamentInfo_News) GetImage() string {
	if x != nil && x.Image != nil {
		return *x.Image
	}
	return ""
}

func (x *CMsgDOTATournamentInfo_News) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

type CMsgWeekendTourneySchedule_Division struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DivisionCode       *uint32 `protobuf:"varint,1,opt,name=division_code,json=divisionCode" json:"division_code,omitempty"`
	TimeWindowOpen     *uint32 `protobuf:"varint,2,opt,name=time_window_open,json=timeWindowOpen" json:"time_window_open,omitempty"`
	TimeWindowClose    *uint32 `protobuf:"varint,3,opt,name=time_window_close,json=timeWindowClose" json:"time_window_close,omitempty"`
	TimeWindowOpenNext *uint32 `protobuf:"varint,4,opt,name=time_window_open_next,json=timeWindowOpenNext" json:"time_window_open_next,omitempty"`
	TrophyId           *uint32 `protobuf:"varint,5,opt,name=trophy_id,json=trophyId" json:"trophy_id,omitempty"`
	FreeWeekend        *bool   `protobuf:"varint,6,opt,name=free_weekend,json=freeWeekend" json:"free_weekend,omitempty"`
}

func (x *CMsgWeekendTourneySchedule_Division) Reset() {
	*x = CMsgWeekendTourneySchedule_Division{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_tournament_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgWeekendTourneySchedule_Division) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgWeekendTourneySchedule_Division) ProtoMessage() {}

func (x *CMsgWeekendTourneySchedule_Division) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_tournament_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgWeekendTourneySchedule_Division.ProtoReflect.Descriptor instead.
func (*CMsgWeekendTourneySchedule_Division) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_tournament_proto_rawDescGZIP(), []int{2, 0}
}

func (x *CMsgWeekendTourneySchedule_Division) GetDivisionCode() uint32 {
	if x != nil && x.DivisionCode != nil {
		return *x.DivisionCode
	}
	return 0
}

func (x *CMsgWeekendTourneySchedule_Division) GetTimeWindowOpen() uint32 {
	if x != nil && x.TimeWindowOpen != nil {
		return *x.TimeWindowOpen
	}
	return 0
}

func (x *CMsgWeekendTourneySchedule_Division) GetTimeWindowClose() uint32 {
	if x != nil && x.TimeWindowClose != nil {
		return *x.TimeWindowClose
	}
	return 0
}

func (x *CMsgWeekendTourneySchedule_Division) GetTimeWindowOpenNext() uint32 {
	if x != nil && x.TimeWindowOpenNext != nil {
		return *x.TimeWindowOpenNext
	}
	return 0
}

func (x *CMsgWeekendTourneySchedule_Division) GetTrophyId() uint32 {
	if x != nil && x.TrophyId != nil {
		return *x.TrophyId
	}
	return 0
}

func (x *CMsgWeekendTourneySchedule_Division) GetFreeWeekend() bool {
	if x != nil && x.FreeWeekend != nil {
		return *x.FreeWeekend
	}
	return false
}

type CMsgDOTATournament_Team struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamGid          *uint64  `protobuf:"fixed64,1,opt,name=team_gid,json=teamGid" json:"team_gid,omitempty"`
	NodeOrState      *uint32  `protobuf:"varint,2,opt,name=node_or_state,json=nodeOrState" json:"node_or_state,omitempty"`
	Players          []uint32 `protobuf:"varint,3,rep,packed,name=players" json:"players,omitempty"`
	PlayerBuyin      []uint32 `protobuf:"varint,9,rep,packed,name=player_buyin,json=playerBuyin" json:"player_buyin,omitempty"`
	PlayerSkillLevel []uint32 `protobuf:"varint,10,rep,packed,name=player_skill_level,json=playerSkillLevel" json:"player_skill_level,omitempty"`
	MatchGroupMask   *uint32  `protobuf:"varint,12,opt,name=match_group_mask,json=matchGroupMask" json:"match_group_mask,omitempty"`
	TeamId           *uint32  `protobuf:"varint,4,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	TeamName         *string  `protobuf:"bytes,5,opt,name=team_name,json=teamName" json:"team_name,omitempty"`
	TeamBaseLogo     *uint64  `protobuf:"varint,7,opt,name=team_base_logo,json=teamBaseLogo" json:"team_base_logo,omitempty"`
	TeamUiLogo       *uint64  `protobuf:"varint,8,opt,name=team_ui_logo,json=teamUiLogo" json:"team_ui_logo,omitempty"`
}

func (x *CMsgDOTATournament_Team) Reset() {
	*x = CMsgDOTATournament_Team{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_tournament_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTATournament_Team) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTATournament_Team) ProtoMessage() {}

func (x *CMsgDOTATournament_Team) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_tournament_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTATournament_Team.ProtoReflect.Descriptor instead.
func (*CMsgDOTATournament_Team) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_tournament_proto_rawDescGZIP(), []int{5, 0}
}

func (x *CMsgDOTATournament_Team) GetTeamGid() uint64 {
	if x != nil && x.TeamGid != nil {
		return *x.TeamGid
	}
	return 0
}

func (x *CMsgDOTATournament_Team) GetNodeOrState() uint32 {
	if x != nil && x.NodeOrState != nil {
		return *x.NodeOrState
	}
	return 0
}

func (x *CMsgDOTATournament_Team) GetPlayers() []uint32 {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *CMsgDOTATournament_Team) GetPlayerBuyin() []uint32 {
	if x != nil {
		return x.PlayerBuyin
	}
	return nil
}

func (x *CMsgDOTATournament_Team) GetPlayerSkillLevel() []uint32 {
	if x != nil {
		return x.PlayerSkillLevel
	}
	return nil
}

func (x *CMsgDOTATournament_Team) GetMatchGroupMask() uint32 {
	if x != nil && x.MatchGroupMask != nil {
		return *x.MatchGroupMask
	}
	return 0
}

func (x *CMsgDOTATournament_Team) GetTeamId() uint32 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

func (x *CMsgDOTATournament_Team) GetTeamName() string {
	if x != nil && x.TeamName != nil {
		return *x.TeamName
	}
	return ""
}

func (x *CMsgDOTATournament_Team) GetTeamBaseLogo() uint64 {
	if x != nil && x.TeamBaseLogo != nil {
		return *x.TeamBaseLogo
	}
	return 0
}

func (x *CMsgDOTATournament_Team) GetTeamUiLogo() uint64 {
	if x != nil && x.TeamUiLogo != nil {
		return *x.TeamUiLogo
	}
	return 0
}

type CMsgDOTATournament_Game struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeIdx   *uint32               `protobuf:"varint,1,opt,name=node_idx,json=nodeIdx" json:"node_idx,omitempty"`
	LobbyId   *uint64               `protobuf:"fixed64,2,opt,name=lobby_id,json=lobbyId" json:"lobby_id,omitempty"`
	MatchId   *uint64               `protobuf:"varint,3,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	TeamAGood *bool                 `protobuf:"varint,4,opt,name=team_a_good,json=teamAGood" json:"team_a_good,omitempty"`
	State     *ETournamentGameState `protobuf:"varint,5,opt,name=state,enum=dota.ETournamentGameState,def=0" json:"state,omitempty"`
	StartTime *uint32               `protobuf:"varint,6,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
}

// Default values for CMsgDOTATournament_Game fields.
const (
	Default_CMsgDOTATournament_Game_State = ETournamentGameState_k_ETournamentGameState_Unknown
)

func (x *CMsgDOTATournament_Game) Reset() {
	*x = CMsgDOTATournament_Game{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_tournament_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTATournament_Game) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTATournament_Game) ProtoMessage() {}

func (x *CMsgDOTATournament_Game) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_tournament_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTATournament_Game.ProtoReflect.Descriptor instead.
func (*CMsgDOTATournament_Game) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_tournament_proto_rawDescGZIP(), []int{5, 1}
}

func (x *CMsgDOTATournament_Game) GetNodeIdx() uint32 {
	if x != nil && x.NodeIdx != nil {
		return *x.NodeIdx
	}
	return 0
}

func (x *CMsgDOTATournament_Game) GetLobbyId() uint64 {
	if x != nil && x.LobbyId != nil {
		return *x.LobbyId
	}
	return 0
}

func (x *CMsgDOTATournament_Game) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgDOTATournament_Game) GetTeamAGood() bool {
	if x != nil && x.TeamAGood != nil {
		return *x.TeamAGood
	}
	return false
}

func (x *CMsgDOTATournament_Game) GetState() ETournamentGameState {
	if x != nil && x.State != nil {
		return *x.State
	}
	return Default_CMsgDOTATournament_Game_State
}

func (x *CMsgDOTATournament_Game) GetStartTime() uint32 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

type CMsgDOTATournament_Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId    *uint32               `protobuf:"varint,1,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	TeamIdxA  *uint32               `protobuf:"varint,2,opt,name=team_idx_a,json=teamIdxA" json:"team_idx_a,omitempty"`
	TeamIdxB  *uint32               `protobuf:"varint,3,opt,name=team_idx_b,json=teamIdxB" json:"team_idx_b,omitempty"`
	NodeState *ETournamentNodeState `protobuf:"varint,4,opt,name=node_state,json=nodeState,enum=dota.ETournamentNodeState,def=0" json:"node_state,omitempty"`
}

// Default values for CMsgDOTATournament_Node fields.
const (
	Default_CMsgDOTATournament_Node_NodeState = ETournamentNodeState_k_ETournamentNodeState_Unknown
)

func (x *CMsgDOTATournament_Node) Reset() {
	*x = CMsgDOTATournament_Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_tournament_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTATournament_Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTATournament_Node) ProtoMessage() {}

func (x *CMsgDOTATournament_Node) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_tournament_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTATournament_Node.ProtoReflect.Descriptor instead.
func (*CMsgDOTATournament_Node) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_tournament_proto_rawDescGZIP(), []int{5, 2}
}

func (x *CMsgDOTATournament_Node) GetNodeId() uint32 {
	if x != nil && x.NodeId != nil {
		return *x.NodeId
	}
	return 0
}

func (x *CMsgDOTATournament_Node) GetTeamIdxA() uint32 {
	if x != nil && x.TeamIdxA != nil {
		return *x.TeamIdxA
	}
	return 0
}

func (x *CMsgDOTATournament_Node) GetTeamIdxB() uint32 {
	if x != nil && x.TeamIdxB != nil {
		return *x.TeamIdxB
	}
	return 0
}

func (x *CMsgDOTATournament_Node) GetNodeState() ETournamentNodeState {
	if x != nil && x.NodeState != nil {
		return *x.NodeState
	}
	return Default_CMsgDOTATournament_Node_NodeState
}

type CMsgDOTATournamentStateChange_GameChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId  *uint64               `protobuf:"varint,1,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	NewState *ETournamentGameState `protobuf:"varint,2,opt,name=new_state,json=newState,enum=dota.ETournamentGameState,def=0" json:"new_state,omitempty"`
}

// Default values for CMsgDOTATournamentStateChange_GameChange fields.
const (
	Default_CMsgDOTATournamentStateChange_GameChange_NewState = ETournamentGameState_k_ETournamentGameState_Unknown
)

func (x *CMsgDOTATournamentStateChange_GameChange) Reset() {
	*x = CMsgDOTATournamentStateChange_GameChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_tournament_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTATournamentStateChange_GameChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTATournamentStateChange_GameChange) ProtoMessage() {}

func (x *CMsgDOTATournamentStateChange_GameChange) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_tournament_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTATournamentStateChange_GameChange.ProtoReflect.Descriptor instead.
func (*CMsgDOTATournamentStateChange_GameChange) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_tournament_proto_rawDescGZIP(), []int{6, 0}
}

func (x *CMsgDOTATournamentStateChange_GameChange) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgDOTATournamentStateChange_GameChange) GetNewState() ETournamentGameState {
	if x != nil && x.NewState != nil {
		return *x.NewState
	}
	return Default_CMsgDOTATournamentStateChange_GameChange_NewState
}

type CMsgDOTATournamentStateChange_TeamChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamGid        *uint64 `protobuf:"varint,1,opt,name=team_gid,json=teamGid" json:"team_gid,omitempty"`
	NewNodeOrState *uint32 `protobuf:"varint,2,opt,name=new_node_or_state,json=newNodeOrState" json:"new_node_or_state,omitempty"`
	OldNodeOrState *uint32 `protobuf:"varint,3,opt,name=old_node_or_state,json=oldNodeOrState" json:"old_node_or_state,omitempty"`
}

func (x *CMsgDOTATournamentStateChange_TeamChange) Reset() {
	*x = CMsgDOTATournamentStateChange_TeamChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_tournament_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTATournamentStateChange_TeamChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTATournamentStateChange_TeamChange) ProtoMessage() {}

func (x *CMsgDOTATournamentStateChange_TeamChange) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_tournament_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTATournamentStateChange_TeamChange.ProtoReflect.Descriptor instead.
func (*CMsgDOTATournamentStateChange_TeamChange) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_tournament_proto_rawDescGZIP(), []int{6, 1}
}

func (x *CMsgDOTATournamentStateChange_TeamChange) GetTeamGid() uint64 {
	if x != nil && x.TeamGid != nil {
		return *x.TeamGid
	}
	return 0
}

func (x *CMsgDOTATournamentStateChange_TeamChange) GetNewNodeOrState() uint32 {
	if x != nil && x.NewNodeOrState != nil {
		return *x.NewNodeOrState
	}
	return 0
}

func (x *CMsgDOTATournamentStateChange_TeamChange) GetOldNodeOrState() uint32 {
	if x != nil && x.OldNodeOrState != nil {
		return *x.OldNodeOrState
	}
	return 0
}

type CMsgDOTAWeekendTourneyPlayerHistory_Tournament struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TournamentId   *uint32  `protobuf:"varint,1,opt,name=tournament_id,json=tournamentId" json:"tournament_id,omitempty"`
	StartTime      *uint32  `protobuf:"varint,2,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	TournamentTier *uint32  `protobuf:"varint,3,opt,name=tournament_tier,json=tournamentTier" json:"tournament_tier,omitempty"`
	TeamId         *uint32  `protobuf:"varint,4,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	TeamDate       *uint32  `protobuf:"varint,5,opt,name=team_date,json=teamDate" json:"team_date,omitempty"`
	TeamResult     *uint32  `protobuf:"varint,6,opt,name=team_result,json=teamResult" json:"team_result,omitempty"`
	AccountId      []uint32 `protobuf:"varint,7,rep,name=account_id,json=accountId" json:"account_id,omitempty"`
	TeamName       *string  `protobuf:"bytes,8,opt,name=team_name,json=teamName" json:"team_name,omitempty"`
	SeasonTrophyId *uint32  `protobuf:"varint,9,opt,name=season_trophy_id,json=seasonTrophyId" json:"season_trophy_id,omitempty"`
}

func (x *CMsgDOTAWeekendTourneyPlayerHistory_Tournament) Reset() {
	*x = CMsgDOTAWeekendTourneyPlayerHistory_Tournament{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_tournament_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAWeekendTourneyPlayerHistory_Tournament) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAWeekendTourneyPlayerHistory_Tournament) ProtoMessage() {}

func (x *CMsgDOTAWeekendTourneyPlayerHistory_Tournament) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_tournament_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAWeekendTourneyPlayerHistory_Tournament.ProtoReflect.Descriptor instead.
func (*CMsgDOTAWeekendTourneyPlayerHistory_Tournament) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_tournament_proto_rawDescGZIP(), []int{14, 0}
}

func (x *CMsgDOTAWeekendTourneyPlayerHistory_Tournament) GetTournamentId() uint32 {
	if x != nil && x.TournamentId != nil {
		return *x.TournamentId
	}
	return 0
}

func (x *CMsgDOTAWeekendTourneyPlayerHistory_Tournament) GetStartTime() uint32 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *CMsgDOTAWeekendTourneyPlayerHistory_Tournament) GetTournamentTier() uint32 {
	if x != nil && x.TournamentTier != nil {
		return *x.TournamentTier
	}
	return 0
}

func (x *CMsgDOTAWeekendTourneyPlayerHistory_Tournament) GetTeamId() uint32 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

func (x *CMsgDOTAWeekendTourneyPlayerHistory_Tournament) GetTeamDate() uint32 {
	if x != nil && x.TeamDate != nil {
		return *x.TeamDate
	}
	return 0
}

func (x *CMsgDOTAWeekendTourneyPlayerHistory_Tournament) GetTeamResult() uint32 {
	if x != nil && x.TeamResult != nil {
		return *x.TeamResult
	}
	return 0
}

func (x *CMsgDOTAWeekendTourneyPlayerHistory_Tournament) GetAccountId() []uint32 {
	if x != nil {
		return x.AccountId
	}
	return nil
}

func (x *CMsgDOTAWeekendTourneyPlayerHistory_Tournament) GetTeamName() string {
	if x != nil && x.TeamName != nil {
		return *x.TeamName
	}
	return ""
}

func (x *CMsgDOTAWeekendTourneyPlayerHistory_Tournament) GetSeasonTrophyId() uint32 {
	if x != nil && x.SeasonTrophyId != nil {
		return *x.SeasonTrophyId
	}
	return 0
}

type CMsgDOTAWeekendTourneyParticipationDetails_Tier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tier            *uint32 `protobuf:"varint,1,opt,name=tier" json:"tier,omitempty"`
	Players         *uint32 `protobuf:"varint,2,opt,name=players" json:"players,omitempty"`
	Teams           *uint32 `protobuf:"varint,3,opt,name=teams" json:"teams,omitempty"`
	WinningTeams    *uint32 `protobuf:"varint,4,opt,name=winning_teams,json=winningTeams" json:"winning_teams,omitempty"`
	PlayersStreak_2 *uint32 `protobuf:"varint,5,opt,name=players_streak_2,json=playersStreak2" json:"players_streak_2,omitempty"`
	PlayersStreak_3 *uint32 `protobuf:"varint,6,opt,name=players_streak_3,json=playersStreak3" json:"players_streak_3,omitempty"`
	PlayersStreak_4 *uint32 `protobuf:"varint,7,opt,name=players_streak_4,json=playersStreak4" json:"players_streak_4,omitempty"`
	PlayersStreak_5 *uint32 `protobuf:"varint,8,opt,name=players_streak_5,json=playersStreak5" json:"players_streak_5,omitempty"`
}

func (x *CMsgDOTAWeekendTourneyParticipationDetails_Tier) Reset() {
	*x = CMsgDOTAWeekendTourneyParticipationDetails_Tier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_tournament_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAWeekendTourneyParticipationDetails_Tier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAWeekendTourneyParticipationDetails_Tier) ProtoMessage() {}

func (x *CMsgDOTAWeekendTourneyParticipationDetails_Tier) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_tournament_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAWeekendTourneyParticipationDetails_Tier.ProtoReflect.Descriptor instead.
func (*CMsgDOTAWeekendTourneyParticipationDetails_Tier) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_tournament_proto_rawDescGZIP(), []int{15, 0}
}

func (x *CMsgDOTAWeekendTourneyParticipationDetails_Tier) GetTier() uint32 {
	if x != nil && x.Tier != nil {
		return *x.Tier
	}
	return 0
}

func (x *CMsgDOTAWeekendTourneyParticipationDetails_Tier) GetPlayers() uint32 {
	if x != nil && x.Players != nil {
		return *x.Players
	}
	return 0
}

func (x *CMsgDOTAWeekendTourneyParticipationDetails_Tier) GetTeams() uint32 {
	if x != nil && x.Teams != nil {
		return *x.Teams
	}
	return 0
}

func (x *CMsgDOTAWeekendTourneyParticipationDetails_Tier) GetWinningTeams() uint32 {
	if x != nil && x.WinningTeams != nil {
		return *x.WinningTeams
	}
	return 0
}

func (x *CMsgDOTAWeekendTourneyParticipationDetails_Tier) GetPlayersStreak_2() uint32 {
	if x != nil && x.PlayersStreak_2 != nil {
		return *x.PlayersStreak_2
	}
	return 0
}

func (x *CMsgDOTAWeekendTourneyParticipationDetails_Tier) GetPlayersStreak_3() uint32 {
	if x != nil && x.PlayersStreak_3 != nil {
		return *x.PlayersStreak_3
	}
	return 0
}

func (x *CMsgDOTAWeekendTourneyParticipationDetails_Tier) GetPlayersStreak_4() uint32 {
	if x != nil && x.PlayersStreak_4 != nil {
		return *x.PlayersStreak_4
	}
	return 0
}

func (x *CMsgDOTAWeekendTourneyParticipationDetails_Tier) GetPlayersStreak_5() uint32 {
	if x != nil && x.PlayersStreak_5 != nil {
		return *x.PlayersStreak_5
	}
	return 0
}

type CMsgDOTAWeekendTourneyParticipationDetails_Division struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DivisionId   *uint32                                            `protobuf:"varint,1,opt,name=division_id,json=divisionId" json:"division_id,omitempty"`
	ScheduleTime *uint32                                            `protobuf:"varint,2,opt,name=schedule_time,json=scheduleTime" json:"schedule_time,omitempty"`
	Tiers        []*CMsgDOTAWeekendTourneyParticipationDetails_Tier `protobuf:"bytes,3,rep,name=tiers" json:"tiers,omitempty"`
}

func (x *CMsgDOTAWeekendTourneyParticipationDetails_Division) Reset() {
	*x = CMsgDOTAWeekendTourneyParticipationDetails_Division{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_tournament_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAWeekendTourneyParticipationDetails_Division) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAWeekendTourneyParticipationDetails_Division) ProtoMessage() {}

func (x *CMsgDOTAWeekendTourneyParticipationDetails_Division) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_tournament_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAWeekendTourneyParticipationDetails_Division.ProtoReflect.Descriptor instead.
func (*CMsgDOTAWeekendTourneyParticipationDetails_Division) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_tournament_proto_rawDescGZIP(), []int{15, 1}
}

func (x *CMsgDOTAWeekendTourneyParticipationDetails_Division) GetDivisionId() uint32 {
	if x != nil && x.DivisionId != nil {
		return *x.DivisionId
	}
	return 0
}

func (x *CMsgDOTAWeekendTourneyParticipationDetails_Division) GetScheduleTime() uint32 {
	if x != nil && x.ScheduleTime != nil {
		return *x.ScheduleTime
	}
	return 0
}

func (x *CMsgDOTAWeekendTourneyParticipationDetails_Division) GetTiers() []*CMsgDOTAWeekendTourneyParticipationDetails_Tier {
	if x != nil {
		return x.Tiers
	}
	return nil
}

var File_dota_gcmessages_client_tournament_proto protoreflect.FileDescriptor

var file_dota_gcmessages_client_tournament_proto_rawDesc = []byte{
	0x0a, 0x27, 0x64, 0x6f, 0x74, 0x61, 0x5f, 0x67, 0x63, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x64, 0x6f, 0x74, 0x61, 0x1a,
	0x17, 0x64, 0x6f, 0x74, 0x61, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc9, 0x0f, 0x0a, 0x16, 0x43, 0x4d, 0x73,
	0x67, 0x44, 0x4f, 0x54, 0x41, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x64,
	0x12, 0x41, 0x0a, 0x0a, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x44, 0x4f, 0x54, 0x41, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x09, 0x70, 0x68, 0x61, 0x73, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x09, 0x74, 0x65, 0x61, 0x6d,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x5e, 0x0a, 0x15, 0x75, 0x70, 0x63, 0x6f, 0x6d, 0x69, 0x6e,
	0x67, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x44, 0x4f, 0x54, 0x41, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x55, 0x70, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x13, 0x75, 0x70, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x73, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4e, 0x65, 0x77, 0x73, 0x52, 0x08, 0x6e, 0x65, 0x77,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x46, 0x0a, 0x0a, 0x50, 0x68, 0x61, 0x73, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x8e, 0x02,
	0x0a, 0x05, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x68, 0x61, 0x73, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x68, 0x61, 0x73, 0x65,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x68, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x74,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x69,
	0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x64, 0x6f, 0x74,
	0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x82,
	0x01, 0x0a, 0x04, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6c,
	0x6f, 0x67, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4c,
	0x6f, 0x67, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x64, 0x1a, 0xa8, 0x08, 0x0a, 0x0d, 0x55, 0x70, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x31, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x31, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x74, 0x65, 0x61, 0x6d, 0x32, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x74, 0x65, 0x61, 0x6d, 0x32, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x62, 0x6f, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x62, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72,
	0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x69,
	0x6e, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x73,
	0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6c, 0x6f, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65,
	0x61, 0x6d, 0x31, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x65, 0x61, 0x6d, 0x31, 0x54, 0x61, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x32,
	0x5f, 0x74, 0x61, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d,
	0x32, 0x54, 0x61, 0x67, 0x12, 0x35, 0x0a, 0x17, 0x74, 0x65, 0x61, 0x6d, 0x31, 0x5f, 0x70, 0x72,
	0x65, 0x76, 0x5f, 0x6f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x67, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x74, 0x65, 0x61, 0x6d, 0x31, 0x50, 0x72, 0x65, 0x76,
	0x4f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x67, 0x12, 0x35, 0x0a, 0x17, 0x74,
	0x65, 0x61, 0x6d, 0x32, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x6f, 0x70, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x74, 0x65,
	0x61, 0x6d, 0x32, 0x50, 0x72, 0x65, 0x76, 0x4f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x54,
	0x61, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x31, 0x5f, 0x6c, 0x6f, 0x67, 0x6f,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x31, 0x4c, 0x6f, 0x67,
	0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x32, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x32, 0x4c, 0x6f, 0x67, 0x6f,
	0x12, 0x37, 0x0a, 0x18, 0x74, 0x65, 0x61, 0x6d, 0x31, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x6f,
	0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x15, 0x74, 0x65, 0x61, 0x6d, 0x31, 0x50, 0x72, 0x65, 0x76, 0x4f, 0x70, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x37, 0x0a, 0x18, 0x74, 0x65, 0x61,
	0x6d, 0x32, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x6f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x74, 0x65, 0x61,
	0x6d, 0x32, 0x50, 0x72, 0x65, 0x76, 0x4f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4c, 0x6f,
	0x67, 0x6f, 0x12, 0x33, 0x0a, 0x16, 0x74, 0x65, 0x61, 0x6d, 0x31, 0x5f, 0x70, 0x72, 0x65, 0x76,
	0x5f, 0x6f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x13, 0x74, 0x65, 0x61, 0x6d, 0x31, 0x50, 0x72, 0x65, 0x76, 0x4f, 0x70, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x74, 0x65, 0x61, 0x6d, 0x32,
	0x5f, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x6f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x74, 0x65, 0x61, 0x6d, 0x32, 0x50, 0x72,
	0x65, 0x76, 0x4f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x16,
	0x74, 0x65, 0x61, 0x6d, 0x31, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x74, 0x65,
	0x61, 0x6d, 0x31, 0x50, 0x72, 0x65, 0x76, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x44, 0x0a, 0x1f, 0x74, 0x65, 0x61, 0x6d, 0x31, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x5f,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x74, 0x65, 0x61, 0x6d,
	0x31, 0x50, 0x72, 0x65, 0x76, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x74, 0x65, 0x61, 0x6d, 0x32,
	0x5f, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x74, 0x65, 0x61, 0x6d, 0x32, 0x50, 0x72,
	0x65, 0x76, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x44, 0x0a, 0x1f,
	0x74, 0x65, 0x61, 0x6d, 0x32, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x6f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x74, 0x65, 0x61, 0x6d, 0x32, 0x50, 0x72, 0x65, 0x76,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x68, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x61, 0x6d, 0x31, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x31, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x61, 0x6d, 0x32, 0x5f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x32, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x68, 0x61, 0x73, 0x65, 0x49, 0x64, 0x1a, 0x64,
	0x0a, 0x04, 0x4e, 0x65, 0x77, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x22, 0x23, 0x0a, 0x21, 0x43, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x57, 0x65, 0x65, 0x6b, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65,
	0x79, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x22, 0xe0, 0x02, 0x0a, 0x1a, 0x43, 0x4d,
	0x73, 0x67, 0x57, 0x65, 0x65, 0x6b, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x47, 0x0a, 0x09, 0x64, 0x69, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x64, 0x6f,
	0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x57, 0x65, 0x65, 0x6b, 0x65, 0x6e, 0x64, 0x54, 0x6f,
	0x75, 0x72, 0x6e, 0x65, 0x79, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x44, 0x69,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x1a, 0xf8, 0x01, 0x0a, 0x08, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23,
	0x0a, 0x0d, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x77, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74,
	0x69, 0x6d, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x2a, 0x0a,
	0x11, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x57, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x6e, 0x65,
	0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x57, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x4f, 0x70, 0x65, 0x6e, 0x4e, 0x65, 0x78, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x72, 0x6f, 0x70, 0x68, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x74, 0x72, 0x6f, 0x70, 0x68, 0x79, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x72, 0x65,
	0x65, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x65, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x66, 0x72, 0x65, 0x65, 0x57, 0x65, 0x65, 0x6b, 0x65, 0x6e, 0x64, 0x22, 0xa6, 0x02, 0x0a,
	0x16, 0x43, 0x4d, 0x73, 0x67, 0x57, 0x65, 0x65, 0x6b, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x75, 0x72,
	0x6e, 0x65, 0x79, 0x4f, 0x70, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a,
	0x0b, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x62, 0x75, 0x79, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x62,
	0x75, 0x79, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49,
	0x64, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x69, 0x63,
	0x6b, 0x75, 0x70, 0x54, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x70,
	0x69, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x70, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x54, 0x65, 0x61,
	0x6d, 0x4c, 0x6f, 0x67, 0x6f, 0x22, 0x19, 0x0a, 0x17, 0x43, 0x4d, 0x73, 0x67, 0x57, 0x65, 0x65,
	0x6b, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x4c, 0x65, 0x61, 0x76, 0x65,
	0x22, 0xca, 0x0a, 0x0a, 0x12, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x54, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x66, 0x0a, 0x13, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x19, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x3a, 0x1a, 0x6b, 0x5f, 0x45,
	0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x52, 0x12, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x48, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x64, 0x6f, 0x74,
	0x61, 0x2e, 0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x3a, 0x1a, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x73,
	0x65, 0x71, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x6f, 0x70, 0x68, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x54, 0x72, 0x6f, 0x70, 0x68,
	0x79, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f,
	0x54, 0x41, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x65, 0x61,
	0x6d, 0x52, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x33, 0x0a, 0x05, 0x67, 0x61, 0x6d, 0x65,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x05, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x33, 0x0a,
	0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64,
	0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x54, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64,
	0x65, 0x73, 0x1a, 0xe4, 0x02, 0x0a, 0x04, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x74,
	0x65, 0x61, 0x6d, 0x5f, 0x67, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x74,
	0x65, 0x61, 0x6d, 0x47, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6f,
	0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6e,
	0x6f, 0x64, 0x65, 0x4f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x07, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x02, 0x10, 0x01, 0x52,
	0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x25, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x62, 0x75, 0x79, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x02,
	0x10, 0x01, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x75, 0x79, 0x69, 0x6e, 0x12,
	0x30, 0x0a, 0x12, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x02, 0x10, 0x01, 0x52,
	0x10, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x17, 0x0a, 0x07, 0x74,
	0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x65,
	0x61, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6c,
	0x6f, 0x67, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x74, 0x65, 0x61, 0x6d, 0x42,
	0x61, 0x73, 0x65, 0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x65, 0x61, 0x6d, 0x5f,
	0x75, 0x69, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74,
	0x65, 0x61, 0x6d, 0x55, 0x69, 0x4c, 0x6f, 0x67, 0x6f, 0x1a, 0xe8, 0x01, 0x0a, 0x04, 0x47, 0x61,
	0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x78, 0x12, 0x19, 0x0a,
	0x08, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x07, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x61, 0x5f, 0x67, 0x6f,
	0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x41, 0x47,
	0x6f, 0x6f, 0x64, 0x12, 0x50, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x1e,
	0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x1a, 0xb6, 0x01, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69,
	0x64, 0x78, 0x5f, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d,
	0x49, 0x64, 0x78, 0x41, 0x12, 0x1c, 0x0a, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x78,
	0x5f, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64,
	0x78, 0x42, 0x12, 0x59, 0x0a, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x45, 0x54,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x3a, 0x1e, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x52, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0xfc, 0x05,
	0x0a, 0x1d, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x2a, 0x0a, 0x11, 0x6e, 0x65, 0x77, 0x5f, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6e, 0x65, 0x77, 0x54,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x05, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x64, 0x6f, 0x74,
	0x61, 0x2e, 0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x3a, 0x17, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x52, 0x05, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x64, 0x0a, 0x14, 0x6e, 0x65, 0x77, 0x5f, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x1a, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x55, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x52, 0x12, 0x6e, 0x65, 0x77, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x51, 0x0a, 0x0c, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x54, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0b,
	0x67, 0x61, 0x6d, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x51, 0x0a, 0x0c, 0x74,
	0x65, 0x61, 0x6d, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54,
	0x41, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x0b, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x36,
	0x0a, 0x15, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x02, 0x10,
	0x01, 0x52, 0x13, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x73, 0x65, 0x71, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x53, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x1a, 0x80, 0x01, 0x0a, 0x0a, 0x47,
	0x61, 0x6d, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x49, 0x64, 0x12, 0x57, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x45,
	0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x3a, 0x1e, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x55, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x7d, 0x0a,
	0x0a, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74,
	0x65, 0x61, 0x6d, 0x5f, 0x67, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x74,
	0x65, 0x61, 0x6d, 0x47, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x11, 0x6e, 0x65, 0x77, 0x5f, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x6e, 0x65, 0x77, 0x4e, 0x6f, 0x64, 0x65, 0x4f, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x29, 0x0a, 0x11, 0x6f, 0x6c, 0x64, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6f, 0x72,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6f, 0x6c,
	0x64, 0x4e, 0x6f, 0x64, 0x65, 0x4f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x74, 0x0a, 0x19,
	0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x32,
	0x0a, 0x15, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x67, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x47,
	0x69, 0x64, 0x22, 0x71, 0x0a, 0x1a, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x54, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x19, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x3a, 0x01, 0x32, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x38, 0x0a, 0x0a, 0x74,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x54,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x74, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x5b, 0x0a, 0x1b, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54,
	0x41, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x47, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65,
	0x49, 0x64, 0x22, 0x94, 0x03, 0x0a, 0x2b, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x57,
	0x65, 0x65, 0x6b, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x5f, 0x77, 0x6f, 0x6e,
	0x5f, 0x30, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x57,
	0x6f, 0x6e, 0x30, 0x12, 0x1e, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x5f, 0x77, 0x6f, 0x6e,
	0x5f, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x57,
	0x6f, 0x6e, 0x31, 0x12, 0x1e, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x5f, 0x77, 0x6f, 0x6e,
	0x5f, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x57,
	0x6f, 0x6e, 0x32, 0x12, 0x1e, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x5f, 0x77, 0x6f, 0x6e,
	0x5f, 0x33, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x57,
	0x6f, 0x6e, 0x33, 0x12, 0x2b, 0x0a, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x5f, 0x62, 0x79, 0x65,
	0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x6c, 0x6f, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x42, 0x79, 0x65, 0x41, 0x6e, 0x64, 0x4c, 0x6f, 0x73, 0x74,
	0x12, 0x29, 0x0a, 0x11, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x5f, 0x62, 0x79, 0x65, 0x5f, 0x61, 0x6e,
	0x64, 0x5f, 0x77, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x42, 0x79, 0x65, 0x41, 0x6e, 0x64, 0x57, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x5f, 0x75, 0x6e, 0x75, 0x73, 0x75, 0x61, 0x6c, 0x5f, 0x63, 0x68, 0x61,
	0x6d, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x55,
	0x6e, 0x75, 0x73, 0x75, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6d, 0x70, 0x12, 0x26, 0x0a, 0x0f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x77, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x73,
	0x57, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0xe5, 0x01, 0x0a, 0x21, 0x43, 0x4d,
	0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x57, 0x65, 0x65, 0x6b, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x75,
	0x72, 0x6e, 0x65, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x28,
	0x0a, 0x10, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x6f, 0x70, 0x68, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x54, 0x72, 0x6f, 0x70, 0x68, 0x79, 0x49, 0x64, 0x12, 0x54, 0x0a, 0x0c, 0x73, 0x6b, 0x69, 0x6c,
	0x6c, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x57, 0x65,
	0x65, 0x6b, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x0b, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x65,
	0x72, 0x22, 0x73, 0x0a, 0x28, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x57, 0x65, 0x65,
	0x6b, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10,
	0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x6f, 0x70, 0x68, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x54, 0x72,
	0x6f, 0x70, 0x68, 0x79, 0x49, 0x64, 0x22, 0x75, 0x0a, 0x2a, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f,
	0x54, 0x41, 0x57, 0x65, 0x65, 0x6b, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x74, 0x72,
	0x6f, 0x70, 0x68, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x54, 0x72, 0x6f, 0x70, 0x68, 0x79, 0x49, 0x64, 0x22, 0xd5, 0x03,
	0x0a, 0x23, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x57, 0x65, 0x65, 0x6b, 0x65, 0x6e,
	0x64, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x56, 0x0a, 0x0b, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x64, 0x6f, 0x74, 0x61,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x57, 0x65, 0x65, 0x6b, 0x65, 0x6e, 0x64,
	0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x0b, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0xb6, 0x02, 0x0a,
	0x0a, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x74,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x73,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x6f, 0x70, 0x68, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x54, 0x72, 0x6f,
	0x70, 0x68, 0x79, 0x49, 0x64, 0x22, 0xbf, 0x04, 0x0a, 0x2a, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f,
	0x54, 0x41, 0x57, 0x65, 0x65, 0x6b, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x57, 0x0a, 0x09, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x57, 0x65, 0x65, 0x6b, 0x65, 0x6e, 0x64, 0x54, 0x6f,
	0x75, 0x72, 0x6e, 0x65, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x97, 0x02,
	0x0a, 0x04, 0x54, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x69, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x69,
	0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x77, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x12,
	0x28, 0x0a, 0x10, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6b, 0x5f, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x32, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x5f, 0x33, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6b, 0x33, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x5f, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6b, 0x5f, 0x34, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x34, 0x12, 0x28, 0x0a,
	0x10, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x5f,
	0x35, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x35, 0x1a, 0x9d, 0x01, 0x0a, 0x08, 0x44, 0x69, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x69, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x05, 0x74, 0x69,
	0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x64, 0x6f, 0x74, 0x61,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x57, 0x65, 0x65, 0x6b, 0x65, 0x6e, 0x64,
	0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x54, 0x69, 0x65, 0x72,
	0x52, 0x05, 0x74, 0x69, 0x65, 0x72, 0x73, 0x2a, 0xb6, 0x04, 0x0a, 0x10, 0x45, 0x54, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x17,
	0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x24, 0x6b, 0x5f, 0x45,
	0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x10, 0x01, 0x12, 0x28, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x10, 0x02, 0x12, 0x22, 0x0a,
	0x1e, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x10,
	0x03, 0x12, 0x23, 0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x69, 0x76, 0x65,
	0x6e, 0x42, 0x79, 0x65, 0x10, 0x04, 0x12, 0x30, 0x0a, 0x2c, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x54, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x42,
	0x79, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x10, 0x05, 0x12, 0x24, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x54,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x54,
	0x65, 0x61, 0x6d, 0x41, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x65, 0x64, 0x10, 0x06, 0x12, 0x2b,
	0x0a, 0x27, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x47, 0x61,
	0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x10, 0x07, 0x12, 0x1f, 0x0a, 0x1b, 0x6b,
	0x5f, 0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x10, 0x08, 0x12, 0x3f, 0x0a, 0x3b,
	0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x5f, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x46, 0x65, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x10, 0x09, 0x12, 0x40, 0x0a,
	0x3c, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x5f, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x46, 0x65, 0x65, 0x46, 0x6f, 0x72, 0x66, 0x65, 0x69, 0x74, 0x10, 0x0a, 0x12,
	0x3f, 0x0a, 0x3b, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x5f,
	0x47, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x56, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x10, 0x0b,
	0x42, 0x05, 0x48, 0x01, 0x80, 0x01, 0x00,
}

var (
	file_dota_gcmessages_client_tournament_proto_rawDescOnce sync.Once
	file_dota_gcmessages_client_tournament_proto_rawDescData = file_dota_gcmessages_client_tournament_proto_rawDesc
)

func file_dota_gcmessages_client_tournament_proto_rawDescGZIP() []byte {
	file_dota_gcmessages_client_tournament_proto_rawDescOnce.Do(func() {
		file_dota_gcmessages_client_tournament_proto_rawDescData = protoimpl.X.CompressGZIP(file_dota_gcmessages_client_tournament_proto_rawDescData)
	})
	return file_dota_gcmessages_client_tournament_proto_rawDescData
}

var file_dota_gcmessages_client_tournament_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_dota_gcmessages_client_tournament_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_dota_gcmessages_client_tournament_proto_goTypes = []interface{}{
	(ETournamentEvent)(0),                                       // 0: dota.ETournamentEvent
	(*CMsgDOTATournamentInfo)(nil),                              // 1: dota.CMsgDOTATournamentInfo
	(*CMsgRequestWeekendTourneySchedule)(nil),                   // 2: dota.CMsgRequestWeekendTourneySchedule
	(*CMsgWeekendTourneySchedule)(nil),                          // 3: dota.CMsgWeekendTourneySchedule
	(*CMsgWeekendTourneyOpts)(nil),                              // 4: dota.CMsgWeekendTourneyOpts
	(*CMsgWeekendTourneyLeave)(nil),                             // 5: dota.CMsgWeekendTourneyLeave
	(*CMsgDOTATournament)(nil),                                  // 6: dota.CMsgDOTATournament
	(*CMsgDOTATournamentStateChange)(nil),                       // 7: dota.CMsgDOTATournamentStateChange
	(*CMsgDOTATournamentRequest)(nil),                           // 8: dota.CMsgDOTATournamentRequest
	(*CMsgDOTATournamentResponse)(nil),                          // 9: dota.CMsgDOTATournamentResponse
	(*CMsgDOTAClearTournamentGame)(nil),                         // 10: dota.CMsgDOTAClearTournamentGame
	(*CMsgDOTAWeekendTourneyPlayerSkillLevelStats)(nil),         // 11: dota.CMsgDOTAWeekendTourneyPlayerSkillLevelStats
	(*CMsgDOTAWeekendTourneyPlayerStats)(nil),                   // 12: dota.CMsgDOTAWeekendTourneyPlayerStats
	(*CMsgDOTAWeekendTourneyPlayerStatsRequest)(nil),            // 13: dota.CMsgDOTAWeekendTourneyPlayerStatsRequest
	(*CMsgDOTAWeekendTourneyPlayerHistoryRequest)(nil),          // 14: dota.CMsgDOTAWeekendTourneyPlayerHistoryRequest
	(*CMsgDOTAWeekendTourneyPlayerHistory)(nil),                 // 15: dota.CMsgDOTAWeekendTourneyPlayerHistory
	(*CMsgDOTAWeekendTourneyParticipationDetails)(nil),          // 16: dota.CMsgDOTAWeekendTourneyParticipationDetails
	(*CMsgDOTATournamentInfo_PhaseGroup)(nil),                   // 17: dota.CMsgDOTATournamentInfo.PhaseGroup
	(*CMsgDOTATournamentInfo_Phase)(nil),                        // 18: dota.CMsgDOTATournamentInfo.Phase
	(*CMsgDOTATournamentInfo_Team)(nil),                         // 19: dota.CMsgDOTATournamentInfo.Team
	(*CMsgDOTATournamentInfo_UpcomingMatch)(nil),                // 20: dota.CMsgDOTATournamentInfo.UpcomingMatch
	(*CMsgDOTATournamentInfo_News)(nil),                         // 21: dota.CMsgDOTATournamentInfo.News
	(*CMsgWeekendTourneySchedule_Division)(nil),                 // 22: dota.CMsgWeekendTourneySchedule.Division
	(*CMsgDOTATournament_Team)(nil),                             // 23: dota.CMsgDOTATournament.Team
	(*CMsgDOTATournament_Game)(nil),                             // 24: dota.CMsgDOTATournament.Game
	(*CMsgDOTATournament_Node)(nil),                             // 25: dota.CMsgDOTATournament.Node
	(*CMsgDOTATournamentStateChange_GameChange)(nil),            // 26: dota.CMsgDOTATournamentStateChange.GameChange
	(*CMsgDOTATournamentStateChange_TeamChange)(nil),            // 27: dota.CMsgDOTATournamentStateChange.TeamChange
	(*CMsgDOTAWeekendTourneyPlayerHistory_Tournament)(nil),      // 28: dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament
	(*CMsgDOTAWeekendTourneyParticipationDetails_Tier)(nil),     // 29: dota.CMsgDOTAWeekendTourneyParticipationDetails.Tier
	(*CMsgDOTAWeekendTourneyParticipationDetails_Division)(nil), // 30: dota.CMsgDOTAWeekendTourneyParticipationDetails.Division
	(ETournamentTemplate)(0),                                    // 31: dota.ETournamentTemplate
	(ETournamentState)(0),                                       // 32: dota.ETournamentState
	(ETournamentGameState)(0),                                   // 33: dota.ETournamentGameState
	(ETournamentNodeState)(0),                                   // 34: dota.ETournamentNodeState
}
var file_dota_gcmessages_client_tournament_proto_depIdxs = []int32{
	18, // 0: dota.CMsgDOTATournamentInfo.phase_list:type_name -> dota.CMsgDOTATournamentInfo.Phase
	19, // 1: dota.CMsgDOTATournamentInfo.teams_list:type_name -> dota.CMsgDOTATournamentInfo.Team
	20, // 2: dota.CMsgDOTATournamentInfo.upcoming_matches_list:type_name -> dota.CMsgDOTATournamentInfo.UpcomingMatch
	21, // 3: dota.CMsgDOTATournamentInfo.news_list:type_name -> dota.CMsgDOTATournamentInfo.News
	22, // 4: dota.CMsgWeekendTourneySchedule.divisions:type_name -> dota.CMsgWeekendTourneySchedule.Division
	31, // 5: dota.CMsgDOTATournament.tournament_template:type_name -> dota.ETournamentTemplate
	32, // 6: dota.CMsgDOTATournament.state:type_name -> dota.ETournamentState
	23, // 7: dota.CMsgDOTATournament.teams:type_name -> dota.CMsgDOTATournament.Team
	24, // 8: dota.CMsgDOTATournament.games:type_name -> dota.CMsgDOTATournament.Game
	25, // 9: dota.CMsgDOTATournament.nodes:type_name -> dota.CMsgDOTATournament.Node
	0,  // 10: dota.CMsgDOTATournamentStateChange.event:type_name -> dota.ETournamentEvent
	32, // 11: dota.CMsgDOTATournamentStateChange.new_tournament_state:type_name -> dota.ETournamentState
	26, // 12: dota.CMsgDOTATournamentStateChange.game_changes:type_name -> dota.CMsgDOTATournamentStateChange.GameChange
	27, // 13: dota.CMsgDOTATournamentStateChange.team_changes:type_name -> dota.CMsgDOTATournamentStateChange.TeamChange
	6,  // 14: dota.CMsgDOTATournamentResponse.tournament:type_name -> dota.CMsgDOTATournament
	11, // 15: dota.CMsgDOTAWeekendTourneyPlayerStats.skill_levels:type_name -> dota.CMsgDOTAWeekendTourneyPlayerSkillLevelStats
	28, // 16: dota.CMsgDOTAWeekendTourneyPlayerHistory.tournaments:type_name -> dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament
	30, // 17: dota.CMsgDOTAWeekendTourneyParticipationDetails.divisions:type_name -> dota.CMsgDOTAWeekendTourneyParticipationDetails.Division
	17, // 18: dota.CMsgDOTATournamentInfo.Phase.group_list:type_name -> dota.CMsgDOTATournamentInfo.PhaseGroup
	33, // 19: dota.CMsgDOTATournament.Game.state:type_name -> dota.ETournamentGameState
	34, // 20: dota.CMsgDOTATournament.Node.node_state:type_name -> dota.ETournamentNodeState
	33, // 21: dota.CMsgDOTATournamentStateChange.GameChange.new_state:type_name -> dota.ETournamentGameState
	29, // 22: dota.CMsgDOTAWeekendTourneyParticipationDetails.Division.tiers:type_name -> dota.CMsgDOTAWeekendTourneyParticipationDetails.Tier
	23, // [23:23] is the sub-list for method output_type
	23, // [23:23] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_dota_gcmessages_client_tournament_proto_init() }
func file_dota_gcmessages_client_tournament_proto_init() {
	if File_dota_gcmessages_client_tournament_proto != nil {
		return
	}
	file_dota_client_enums_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_dota_gcmessages_client_tournament_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTATournamentInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_tournament_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgRequestWeekendTourneySchedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_tournament_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgWeekendTourneySchedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_tournament_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgWeekendTourneyOpts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_tournament_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgWeekendTourneyLeave); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_tournament_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTATournament); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_tournament_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTATournamentStateChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_tournament_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTATournamentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_tournament_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTATournamentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_tournament_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAClearTournamentGame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_tournament_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAWeekendTourneyPlayerSkillLevelStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_tournament_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAWeekendTourneyPlayerStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_tournament_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAWeekendTourneyPlayerStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_tournament_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAWeekendTourneyPlayerHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_tournament_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAWeekendTourneyPlayerHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_tournament_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAWeekendTourneyParticipationDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_tournament_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTATournamentInfo_PhaseGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_tournament_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTATournamentInfo_Phase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_tournament_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTATournamentInfo_Team); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_tournament_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTATournamentInfo_UpcomingMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_tournament_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTATournamentInfo_News); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_tournament_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgWeekendTourneySchedule_Division); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_tournament_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTATournament_Team); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_tournament_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTATournament_Game); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_tournament_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTATournament_Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_tournament_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTATournamentStateChange_GameChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_tournament_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTATournamentStateChange_TeamChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_tournament_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAWeekendTourneyPlayerHistory_Tournament); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_tournament_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAWeekendTourneyParticipationDetails_Tier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_tournament_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAWeekendTourneyParticipationDetails_Division); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dota_gcmessages_client_tournament_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_dota_gcmessages_client_tournament_proto_goTypes,
		DependencyIndexes: file_dota_gcmessages_client_tournament_proto_depIdxs,
		EnumInfos:         file_dota_gcmessages_client_tournament_proto_enumTypes,
		MessageInfos:      file_dota_gcmessages_client_tournament_proto_msgTypes,
	}.Build()
	File_dota_gcmessages_client_tournament_proto = out.File
	file_dota_gcmessages_client_tournament_proto_rawDesc = nil
	file_dota_gcmessages_client_tournament_proto_goTypes = nil
	file_dota_gcmessages_client_tournament_proto_depIdxs = nil
}
