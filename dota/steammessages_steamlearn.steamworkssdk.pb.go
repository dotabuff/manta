// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.5
// source: steammessages_steamlearn.steamworkssdk.proto

package dota

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ESteamLearnDataType int32

const (
	ESteamLearnDataType_STEAMLEARN_DATATYPE_INVALID ESteamLearnDataType = 0
	ESteamLearnDataType_STEAMLEARN_DATATYPE_INT32   ESteamLearnDataType = 1
	ESteamLearnDataType_STEAMLEARN_DATATYPE_FLOAT32 ESteamLearnDataType = 2
	ESteamLearnDataType_STEAMLEARN_DATATYPE_BOOL    ESteamLearnDataType = 3
	ESteamLearnDataType_STEAMLEARN_DATATYPE_STRING  ESteamLearnDataType = 4
	ESteamLearnDataType_STEAMLEARN_DATATYPE_OBJECT  ESteamLearnDataType = 5
)

// Enum value maps for ESteamLearnDataType.
var (
	ESteamLearnDataType_name = map[int32]string{
		0: "STEAMLEARN_DATATYPE_INVALID",
		1: "STEAMLEARN_DATATYPE_INT32",
		2: "STEAMLEARN_DATATYPE_FLOAT32",
		3: "STEAMLEARN_DATATYPE_BOOL",
		4: "STEAMLEARN_DATATYPE_STRING",
		5: "STEAMLEARN_DATATYPE_OBJECT",
	}
	ESteamLearnDataType_value = map[string]int32{
		"STEAMLEARN_DATATYPE_INVALID": 0,
		"STEAMLEARN_DATATYPE_INT32":   1,
		"STEAMLEARN_DATATYPE_FLOAT32": 2,
		"STEAMLEARN_DATATYPE_BOOL":    3,
		"STEAMLEARN_DATATYPE_STRING":  4,
		"STEAMLEARN_DATATYPE_OBJECT":  5,
	}
)

func (x ESteamLearnDataType) Enum() *ESteamLearnDataType {
	p := new(ESteamLearnDataType)
	*p = x
	return p
}

func (x ESteamLearnDataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESteamLearnDataType) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_steamlearn_steamworkssdk_proto_enumTypes[0].Descriptor()
}

func (ESteamLearnDataType) Type() protoreflect.EnumType {
	return &file_steammessages_steamlearn_steamworkssdk_proto_enumTypes[0]
}

func (x ESteamLearnDataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ESteamLearnDataType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ESteamLearnDataType(num)
	return nil
}

// Deprecated: Use ESteamLearnDataType.Descriptor instead.
func (ESteamLearnDataType) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_steamlearn_steamworkssdk_proto_rawDescGZIP(), []int{0}
}

type ESteammLearnRegisterDataSourceResult int32

const (
	ESteammLearnRegisterDataSourceResult_STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_ERROR                   ESteammLearnRegisterDataSourceResult = 0
	ESteammLearnRegisterDataSourceResult_STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_SUCCESS_CREATED         ESteammLearnRegisterDataSourceResult = 1
	ESteammLearnRegisterDataSourceResult_STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_SUCCESS_FOUND           ESteammLearnRegisterDataSourceResult = 2
	ESteammLearnRegisterDataSourceResult_STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_ERROR_GENERIC           ESteammLearnRegisterDataSourceResult = 3
	ESteammLearnRegisterDataSourceResult_STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_ERROR_INVALID_NAME      ESteammLearnRegisterDataSourceResult = 4
	ESteammLearnRegisterDataSourceResult_STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_ERROR_INVALID_VERSION   ESteammLearnRegisterDataSourceResult = 5
	ESteammLearnRegisterDataSourceResult_STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_ERROR_DATA_CHANGED      ESteammLearnRegisterDataSourceResult = 6
	ESteammLearnRegisterDataSourceResult_STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_ERROR_DATA_INVALID      ESteammLearnRegisterDataSourceResult = 7
	ESteammLearnRegisterDataSourceResult_STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_ERROR_FORBIDDEN         ESteammLearnRegisterDataSourceResult = 8
	ESteammLearnRegisterDataSourceResult_STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_ERROR_INVALID_TIMESTAMP ESteammLearnRegisterDataSourceResult = 9
	ESteammLearnRegisterDataSourceResult_STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_DISABLED                ESteammLearnRegisterDataSourceResult = 10
)

// Enum value maps for ESteammLearnRegisterDataSourceResult.
var (
	ESteammLearnRegisterDataSourceResult_name = map[int32]string{
		0:  "STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_ERROR",
		1:  "STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_SUCCESS_CREATED",
		2:  "STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_SUCCESS_FOUND",
		3:  "STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_ERROR_GENERIC",
		4:  "STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_ERROR_INVALID_NAME",
		5:  "STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_ERROR_INVALID_VERSION",
		6:  "STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_ERROR_DATA_CHANGED",
		7:  "STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_ERROR_DATA_INVALID",
		8:  "STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_ERROR_FORBIDDEN",
		9:  "STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_ERROR_INVALID_TIMESTAMP",
		10: "STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_DISABLED",
	}
	ESteammLearnRegisterDataSourceResult_value = map[string]int32{
		"STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_ERROR":                   0,
		"STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_SUCCESS_CREATED":         1,
		"STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_SUCCESS_FOUND":           2,
		"STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_ERROR_GENERIC":           3,
		"STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_ERROR_INVALID_NAME":      4,
		"STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_ERROR_INVALID_VERSION":   5,
		"STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_ERROR_DATA_CHANGED":      6,
		"STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_ERROR_DATA_INVALID":      7,
		"STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_ERROR_FORBIDDEN":         8,
		"STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_ERROR_INVALID_TIMESTAMP": 9,
		"STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_DISABLED":                10,
	}
)

func (x ESteammLearnRegisterDataSourceResult) Enum() *ESteammLearnRegisterDataSourceResult {
	p := new(ESteammLearnRegisterDataSourceResult)
	*p = x
	return p
}

func (x ESteammLearnRegisterDataSourceResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESteammLearnRegisterDataSourceResult) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_steamlearn_steamworkssdk_proto_enumTypes[1].Descriptor()
}

func (ESteammLearnRegisterDataSourceResult) Type() protoreflect.EnumType {
	return &file_steammessages_steamlearn_steamworkssdk_proto_enumTypes[1]
}

func (x ESteammLearnRegisterDataSourceResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ESteammLearnRegisterDataSourceResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ESteammLearnRegisterDataSourceResult(num)
	return nil
}

// Deprecated: Use ESteammLearnRegisterDataSourceResult.Descriptor instead.
func (ESteammLearnRegisterDataSourceResult) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_steamlearn_steamworkssdk_proto_rawDescGZIP(), []int{1}
}

type ESteamLearnCacheDataResult int32

const (
	ESteamLearnCacheDataResult_STEAMLEARN_CACHE_DATA_ERROR                      ESteamLearnCacheDataResult = 0
	ESteamLearnCacheDataResult_STEAMLEARN_CACHE_DATA_SUCCESS                    ESteamLearnCacheDataResult = 1
	ESteamLearnCacheDataResult_STEAMLEARN_CACHE_DATA_ERROR_UNKNOWN_DATA_SOURCE  ESteamLearnCacheDataResult = 2
	ESteamLearnCacheDataResult_STEAMLEARN_CACHE_DATA_ERROR_UNCACHED_DATA_SOURCE ESteamLearnCacheDataResult = 3
	ESteamLearnCacheDataResult_STEAMLEARN_CACHE_DATA_ERROR_INVALID_KEYS         ESteamLearnCacheDataResult = 4
	ESteamLearnCacheDataResult_STEAMLEARN_CACHE_DATA_ERROR_FORBIDDEN            ESteamLearnCacheDataResult = 5
	ESteamLearnCacheDataResult_STEAMLEARN_CACHE_DATA_ERROR_INVALID_TIMESTAMP    ESteamLearnCacheDataResult = 6
	ESteamLearnCacheDataResult_STEAMLEARN_CACHE_DATA_DISABLED                   ESteamLearnCacheDataResult = 7
)

// Enum value maps for ESteamLearnCacheDataResult.
var (
	ESteamLearnCacheDataResult_name = map[int32]string{
		0: "STEAMLEARN_CACHE_DATA_ERROR",
		1: "STEAMLEARN_CACHE_DATA_SUCCESS",
		2: "STEAMLEARN_CACHE_DATA_ERROR_UNKNOWN_DATA_SOURCE",
		3: "STEAMLEARN_CACHE_DATA_ERROR_UNCACHED_DATA_SOURCE",
		4: "STEAMLEARN_CACHE_DATA_ERROR_INVALID_KEYS",
		5: "STEAMLEARN_CACHE_DATA_ERROR_FORBIDDEN",
		6: "STEAMLEARN_CACHE_DATA_ERROR_INVALID_TIMESTAMP",
		7: "STEAMLEARN_CACHE_DATA_DISABLED",
	}
	ESteamLearnCacheDataResult_value = map[string]int32{
		"STEAMLEARN_CACHE_DATA_ERROR":                      0,
		"STEAMLEARN_CACHE_DATA_SUCCESS":                    1,
		"STEAMLEARN_CACHE_DATA_ERROR_UNKNOWN_DATA_SOURCE":  2,
		"STEAMLEARN_CACHE_DATA_ERROR_UNCACHED_DATA_SOURCE": 3,
		"STEAMLEARN_CACHE_DATA_ERROR_INVALID_KEYS":         4,
		"STEAMLEARN_CACHE_DATA_ERROR_FORBIDDEN":            5,
		"STEAMLEARN_CACHE_DATA_ERROR_INVALID_TIMESTAMP":    6,
		"STEAMLEARN_CACHE_DATA_DISABLED":                   7,
	}
)

func (x ESteamLearnCacheDataResult) Enum() *ESteamLearnCacheDataResult {
	p := new(ESteamLearnCacheDataResult)
	*p = x
	return p
}

func (x ESteamLearnCacheDataResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESteamLearnCacheDataResult) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_steamlearn_steamworkssdk_proto_enumTypes[2].Descriptor()
}

func (ESteamLearnCacheDataResult) Type() protoreflect.EnumType {
	return &file_steammessages_steamlearn_steamworkssdk_proto_enumTypes[2]
}

func (x ESteamLearnCacheDataResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ESteamLearnCacheDataResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ESteamLearnCacheDataResult(num)
	return nil
}

// Deprecated: Use ESteamLearnCacheDataResult.Descriptor instead.
func (ESteamLearnCacheDataResult) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_steamlearn_steamworkssdk_proto_rawDescGZIP(), []int{2}
}

type ESteamLearnSnapshotProjectResult int32

const (
	ESteamLearnSnapshotProjectResult_STEAMLEARN_SNAPSHOT_PROJECT_ERROR                            ESteamLearnSnapshotProjectResult = 0
	ESteamLearnSnapshotProjectResult_STEAMLEARN_SNAPSHOT_PROJECT_SUCCESS_STORED                   ESteamLearnSnapshotProjectResult = 1
	ESteamLearnSnapshotProjectResult_STEAMLEARN_SNAPSHOT_PROJECT_SUCCESS_QUEUED                   ESteamLearnSnapshotProjectResult = 2
	ESteamLearnSnapshotProjectResult_STEAMLEARN_SNAPSHOT_PROJECT_ERROR_INVALID_PROJECT_ID         ESteamLearnSnapshotProjectResult = 3
	ESteamLearnSnapshotProjectResult_STEAMLEARN_SNAPSHOT_PROJECT_ERROR_UNKNOWN_DATA_SOURCE        ESteamLearnSnapshotProjectResult = 4
	ESteamLearnSnapshotProjectResult_STEAMLEARN_SNAPSHOT_PROJECT_ERROR_INVALID_DATA_SOURCE_KEY    ESteamLearnSnapshotProjectResult = 5
	ESteamLearnSnapshotProjectResult_STEAMLEARN_SNAPSHOT_PROJECT_ERROR_MISSING_CACHE_DURATION     ESteamLearnSnapshotProjectResult = 6
	ESteamLearnSnapshotProjectResult_STEAMLEARN_SNAPSHOT_PROJECT_ERROR_NO_PUBLISHED_CONFIG        ESteamLearnSnapshotProjectResult = 7
	ESteamLearnSnapshotProjectResult_STEAMLEARN_SNAPSHOT_PROJECT_ERROR_FORBIDDEN                  ESteamLearnSnapshotProjectResult = 8
	ESteamLearnSnapshotProjectResult_STEAMLEARN_SNAPSHOT_PROJECT_ERROR_INVALID_TIMESTAMP          ESteamLearnSnapshotProjectResult = 9
	ESteamLearnSnapshotProjectResult_STEAMLEARN_SNAPSHOT_PROJECT_ERROR_INTERNAL_DATA_SOURCE_ERROR ESteamLearnSnapshotProjectResult = 10
	ESteamLearnSnapshotProjectResult_STEAMLEARN_SNAPSHOT_PROJECT_DISABLED                         ESteamLearnSnapshotProjectResult = 11
	ESteamLearnSnapshotProjectResult_STEAMLEARN_SNAPSHOT_PROJECT_ERROR_INVALID_PUBLISHED_VERSION  ESteamLearnSnapshotProjectResult = 12
)

// Enum value maps for ESteamLearnSnapshotProjectResult.
var (
	ESteamLearnSnapshotProjectResult_name = map[int32]string{
		0:  "STEAMLEARN_SNAPSHOT_PROJECT_ERROR",
		1:  "STEAMLEARN_SNAPSHOT_PROJECT_SUCCESS_STORED",
		2:  "STEAMLEARN_SNAPSHOT_PROJECT_SUCCESS_QUEUED",
		3:  "STEAMLEARN_SNAPSHOT_PROJECT_ERROR_INVALID_PROJECT_ID",
		4:  "STEAMLEARN_SNAPSHOT_PROJECT_ERROR_UNKNOWN_DATA_SOURCE",
		5:  "STEAMLEARN_SNAPSHOT_PROJECT_ERROR_INVALID_DATA_SOURCE_KEY",
		6:  "STEAMLEARN_SNAPSHOT_PROJECT_ERROR_MISSING_CACHE_DURATION",
		7:  "STEAMLEARN_SNAPSHOT_PROJECT_ERROR_NO_PUBLISHED_CONFIG",
		8:  "STEAMLEARN_SNAPSHOT_PROJECT_ERROR_FORBIDDEN",
		9:  "STEAMLEARN_SNAPSHOT_PROJECT_ERROR_INVALID_TIMESTAMP",
		10: "STEAMLEARN_SNAPSHOT_PROJECT_ERROR_INTERNAL_DATA_SOURCE_ERROR",
		11: "STEAMLEARN_SNAPSHOT_PROJECT_DISABLED",
		12: "STEAMLEARN_SNAPSHOT_PROJECT_ERROR_INVALID_PUBLISHED_VERSION",
	}
	ESteamLearnSnapshotProjectResult_value = map[string]int32{
		"STEAMLEARN_SNAPSHOT_PROJECT_ERROR":                            0,
		"STEAMLEARN_SNAPSHOT_PROJECT_SUCCESS_STORED":                   1,
		"STEAMLEARN_SNAPSHOT_PROJECT_SUCCESS_QUEUED":                   2,
		"STEAMLEARN_SNAPSHOT_PROJECT_ERROR_INVALID_PROJECT_ID":         3,
		"STEAMLEARN_SNAPSHOT_PROJECT_ERROR_UNKNOWN_DATA_SOURCE":        4,
		"STEAMLEARN_SNAPSHOT_PROJECT_ERROR_INVALID_DATA_SOURCE_KEY":    5,
		"STEAMLEARN_SNAPSHOT_PROJECT_ERROR_MISSING_CACHE_DURATION":     6,
		"STEAMLEARN_SNAPSHOT_PROJECT_ERROR_NO_PUBLISHED_CONFIG":        7,
		"STEAMLEARN_SNAPSHOT_PROJECT_ERROR_FORBIDDEN":                  8,
		"STEAMLEARN_SNAPSHOT_PROJECT_ERROR_INVALID_TIMESTAMP":          9,
		"STEAMLEARN_SNAPSHOT_PROJECT_ERROR_INTERNAL_DATA_SOURCE_ERROR": 10,
		"STEAMLEARN_SNAPSHOT_PROJECT_DISABLED":                         11,
		"STEAMLEARN_SNAPSHOT_PROJECT_ERROR_INVALID_PUBLISHED_VERSION":  12,
	}
)

func (x ESteamLearnSnapshotProjectResult) Enum() *ESteamLearnSnapshotProjectResult {
	p := new(ESteamLearnSnapshotProjectResult)
	*p = x
	return p
}

func (x ESteamLearnSnapshotProjectResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESteamLearnSnapshotProjectResult) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_steamlearn_steamworkssdk_proto_enumTypes[3].Descriptor()
}

func (ESteamLearnSnapshotProjectResult) Type() protoreflect.EnumType {
	return &file_steammessages_steamlearn_steamworkssdk_proto_enumTypes[3]
}

func (x ESteamLearnSnapshotProjectResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ESteamLearnSnapshotProjectResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ESteamLearnSnapshotProjectResult(num)
	return nil
}

// Deprecated: Use ESteamLearnSnapshotProjectResult.Descriptor instead.
func (ESteamLearnSnapshotProjectResult) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_steamlearn_steamworkssdk_proto_rawDescGZIP(), []int{3}
}

type ESteamLearnGetHMACKeysResult int32

const (
	ESteamLearnGetHMACKeysResult_STEAMLEARN_GET_HMAC_KEYS_SUCCESS ESteamLearnGetHMACKeysResult = 0
)

// Enum value maps for ESteamLearnGetHMACKeysResult.
var (
	ESteamLearnGetHMACKeysResult_name = map[int32]string{
		0: "STEAMLEARN_GET_HMAC_KEYS_SUCCESS",
	}
	ESteamLearnGetHMACKeysResult_value = map[string]int32{
		"STEAMLEARN_GET_HMAC_KEYS_SUCCESS": 0,
	}
)

func (x ESteamLearnGetHMACKeysResult) Enum() *ESteamLearnGetHMACKeysResult {
	p := new(ESteamLearnGetHMACKeysResult)
	*p = x
	return p
}

func (x ESteamLearnGetHMACKeysResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESteamLearnGetHMACKeysResult) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_steamlearn_steamworkssdk_proto_enumTypes[4].Descriptor()
}

func (ESteamLearnGetHMACKeysResult) Type() protoreflect.EnumType {
	return &file_steammessages_steamlearn_steamworkssdk_proto_enumTypes[4]
}

func (x ESteamLearnGetHMACKeysResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ESteamLearnGetHMACKeysResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ESteamLearnGetHMACKeysResult(num)
	return nil
}

// Deprecated: Use ESteamLearnGetHMACKeysResult.Descriptor instead.
func (ESteamLearnGetHMACKeysResult) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_steamlearn_steamworkssdk_proto_rawDescGZIP(), []int{4}
}

type ESteamLearnInferenceResult int32

const (
	ESteamLearnInferenceResult_STEAMLEARN_INFERENCE_ERROR                            ESteamLearnInferenceResult = 0
	ESteamLearnInferenceResult_STEAMLEARN_INFERENCE_SUCCESS                          ESteamLearnInferenceResult = 1
	ESteamLearnInferenceResult_STEAMLEARN_INFERENCE_ERROR_INVALID_PROJECT_ID         ESteamLearnInferenceResult = 2
	ESteamLearnInferenceResult_STEAMLEARN_INFERENCE_ERROR_MISSING_CACHED_SCHEMA_DATA ESteamLearnInferenceResult = 3
	ESteamLearnInferenceResult_STEAMLEARN_INFERENCE_ERROR_NO_PUBLISHED_CONFIG        ESteamLearnInferenceResult = 4
	ESteamLearnInferenceResult_STEAMLEARN_INFERENCE_ERROR_FORBIDDEN                  ESteamLearnInferenceResult = 5
	ESteamLearnInferenceResult_STEAMLEARN_INFERENCE_ERROR_INVALID_TIMESTAMP          ESteamLearnInferenceResult = 6
	ESteamLearnInferenceResult_STEAMLEARN_INFERENCE_ERROR_INVALID_PUBLISHED_VERSION  ESteamLearnInferenceResult = 7
	ESteamLearnInferenceResult_STEAMLEARN_INFERENCE_ERROR_NO_FETCH_ID_FOUND          ESteamLearnInferenceResult = 8
)

// Enum value maps for ESteamLearnInferenceResult.
var (
	ESteamLearnInferenceResult_name = map[int32]string{
		0: "STEAMLEARN_INFERENCE_ERROR",
		1: "STEAMLEARN_INFERENCE_SUCCESS",
		2: "STEAMLEARN_INFERENCE_ERROR_INVALID_PROJECT_ID",
		3: "STEAMLEARN_INFERENCE_ERROR_MISSING_CACHED_SCHEMA_DATA",
		4: "STEAMLEARN_INFERENCE_ERROR_NO_PUBLISHED_CONFIG",
		5: "STEAMLEARN_INFERENCE_ERROR_FORBIDDEN",
		6: "STEAMLEARN_INFERENCE_ERROR_INVALID_TIMESTAMP",
		7: "STEAMLEARN_INFERENCE_ERROR_INVALID_PUBLISHED_VERSION",
		8: "STEAMLEARN_INFERENCE_ERROR_NO_FETCH_ID_FOUND",
	}
	ESteamLearnInferenceResult_value = map[string]int32{
		"STEAMLEARN_INFERENCE_ERROR":                            0,
		"STEAMLEARN_INFERENCE_SUCCESS":                          1,
		"STEAMLEARN_INFERENCE_ERROR_INVALID_PROJECT_ID":         2,
		"STEAMLEARN_INFERENCE_ERROR_MISSING_CACHED_SCHEMA_DATA": 3,
		"STEAMLEARN_INFERENCE_ERROR_NO_PUBLISHED_CONFIG":        4,
		"STEAMLEARN_INFERENCE_ERROR_FORBIDDEN":                  5,
		"STEAMLEARN_INFERENCE_ERROR_INVALID_TIMESTAMP":          6,
		"STEAMLEARN_INFERENCE_ERROR_INVALID_PUBLISHED_VERSION":  7,
		"STEAMLEARN_INFERENCE_ERROR_NO_FETCH_ID_FOUND":          8,
	}
)

func (x ESteamLearnInferenceResult) Enum() *ESteamLearnInferenceResult {
	p := new(ESteamLearnInferenceResult)
	*p = x
	return p
}

func (x ESteamLearnInferenceResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESteamLearnInferenceResult) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_steamlearn_steamworkssdk_proto_enumTypes[5].Descriptor()
}

func (ESteamLearnInferenceResult) Type() protoreflect.EnumType {
	return &file_steammessages_steamlearn_steamworkssdk_proto_enumTypes[5]
}

func (x ESteamLearnInferenceResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ESteamLearnInferenceResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ESteamLearnInferenceResult(num)
	return nil
}

// Deprecated: Use ESteamLearnInferenceResult.Descriptor instead.
func (ESteamLearnInferenceResult) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_steamlearn_steamworkssdk_proto_rawDescGZIP(), []int{5}
}

type CMsgSteamLearnDataSourceDescObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Elements []*CMsgSteamLearnDataSourceDescElement `protobuf:"bytes,1,rep,name=elements" json:"elements,omitempty"`
}

func (x *CMsgSteamLearnDataSourceDescObject) Reset() {
	*x = CMsgSteamLearnDataSourceDescObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamlearn_steamworkssdk_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearnDataSourceDescObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnDataSourceDescObject) ProtoMessage() {}

func (x *CMsgSteamLearnDataSourceDescObject) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamlearn_steamworkssdk_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnDataSourceDescObject.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnDataSourceDescObject) Descriptor() ([]byte, []int) {
	return file_steammessages_steamlearn_steamworkssdk_proto_rawDescGZIP(), []int{0}
}

func (x *CMsgSteamLearnDataSourceDescObject) GetElements() []*CMsgSteamLearnDataSourceDescElement {
	if x != nil {
		return x.Elements
	}
	return nil
}

type CMsgSteamLearnDataSourceDescElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     *string                             `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	DataType *ESteamLearnDataType                `protobuf:"varint,2,opt,name=data_type,json=dataType,enum=dota.ESteamLearnDataType" json:"data_type,omitempty"`
	Object   *CMsgSteamLearnDataSourceDescObject `protobuf:"bytes,3,opt,name=object" json:"object,omitempty"`
	Count    *uint32                             `protobuf:"varint,4,opt,name=count" json:"count,omitempty"`
}

func (x *CMsgSteamLearnDataSourceDescElement) Reset() {
	*x = CMsgSteamLearnDataSourceDescElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamlearn_steamworkssdk_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearnDataSourceDescElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnDataSourceDescElement) ProtoMessage() {}

func (x *CMsgSteamLearnDataSourceDescElement) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamlearn_steamworkssdk_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnDataSourceDescElement.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnDataSourceDescElement) Descriptor() ([]byte, []int) {
	return file_steammessages_steamlearn_steamworkssdk_proto_rawDescGZIP(), []int{1}
}

func (x *CMsgSteamLearnDataSourceDescElement) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CMsgSteamLearnDataSourceDescElement) GetDataType() ESteamLearnDataType {
	if x != nil && x.DataType != nil {
		return *x.DataType
	}
	return ESteamLearnDataType_STEAMLEARN_DATATYPE_INVALID
}

func (x *CMsgSteamLearnDataSourceDescElement) GetObject() *CMsgSteamLearnDataSourceDescObject {
	if x != nil {
		return x.Object
	}
	return nil
}

func (x *CMsgSteamLearnDataSourceDescElement) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type CMsgSteamLearnDataSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   *uint32                             `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name                 *string                             `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Version              *uint32                             `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
	SourceDescription    *string                             `protobuf:"bytes,4,opt,name=source_description,json=sourceDescription" json:"source_description,omitempty"`
	Structure            *CMsgSteamLearnDataSourceDescObject `protobuf:"bytes,5,opt,name=structure" json:"structure,omitempty"`
	StructureCrc         *uint32                             `protobuf:"varint,6,opt,name=structure_crc,json=structureCrc" json:"structure_crc,omitempty"`
	CacheDurationSeconds *uint32                             `protobuf:"varint,7,opt,name=cache_duration_seconds,json=cacheDurationSeconds" json:"cache_duration_seconds,omitempty"`
}

func (x *CMsgSteamLearnDataSource) Reset() {
	*x = CMsgSteamLearnDataSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamlearn_steamworkssdk_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearnDataSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnDataSource) ProtoMessage() {}

func (x *CMsgSteamLearnDataSource) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamlearn_steamworkssdk_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnDataSource.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnDataSource) Descriptor() ([]byte, []int) {
	return file_steammessages_steamlearn_steamworkssdk_proto_rawDescGZIP(), []int{2}
}

func (x *CMsgSteamLearnDataSource) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *CMsgSteamLearnDataSource) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CMsgSteamLearnDataSource) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *CMsgSteamLearnDataSource) GetSourceDescription() string {
	if x != nil && x.SourceDescription != nil {
		return *x.SourceDescription
	}
	return ""
}

func (x *CMsgSteamLearnDataSource) GetStructure() *CMsgSteamLearnDataSourceDescObject {
	if x != nil {
		return x.Structure
	}
	return nil
}

func (x *CMsgSteamLearnDataSource) GetStructureCrc() uint32 {
	if x != nil && x.StructureCrc != nil {
		return *x.StructureCrc
	}
	return 0
}

func (x *CMsgSteamLearnDataSource) GetCacheDurationSeconds() uint32 {
	if x != nil && x.CacheDurationSeconds != nil {
		return *x.CacheDurationSeconds
	}
	return 0
}

type CMsgSteamLearnDataObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Elements []*CMsgSteamLearnDataElement `protobuf:"bytes,1,rep,name=elements" json:"elements,omitempty"`
}

func (x *CMsgSteamLearnDataObject) Reset() {
	*x = CMsgSteamLearnDataObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamlearn_steamworkssdk_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearnDataObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnDataObject) ProtoMessage() {}

func (x *CMsgSteamLearnDataObject) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamlearn_steamworkssdk_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnDataObject.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnDataObject) Descriptor() ([]byte, []int) {
	return file_steammessages_steamlearn_steamworkssdk_proto_rawDescGZIP(), []int{3}
}

func (x *CMsgSteamLearnDataObject) GetElements() []*CMsgSteamLearnDataElement {
	if x != nil {
		return x.Elements
	}
	return nil
}

type CMsgSteamLearnDataElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        *string                     `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	DataInt32S  []int32                     `protobuf:"varint,20,rep,name=data_int32s,json=dataInt32s" json:"data_int32s,omitempty"`
	DataFloats  []float32                   `protobuf:"fixed32,21,rep,name=data_floats,json=dataFloats" json:"data_floats,omitempty"`
	DataBools   []bool                      `protobuf:"varint,22,rep,name=data_bools,json=dataBools" json:"data_bools,omitempty"`
	DataStrings []string                    `protobuf:"bytes,23,rep,name=data_strings,json=dataStrings" json:"data_strings,omitempty"`
	DataObjects []*CMsgSteamLearnDataObject `protobuf:"bytes,24,rep,name=data_objects,json=dataObjects" json:"data_objects,omitempty"`
}

func (x *CMsgSteamLearnDataElement) Reset() {
	*x = CMsgSteamLearnDataElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamlearn_steamworkssdk_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearnDataElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnDataElement) ProtoMessage() {}

func (x *CMsgSteamLearnDataElement) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamlearn_steamworkssdk_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnDataElement.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnDataElement) Descriptor() ([]byte, []int) {
	return file_steammessages_steamlearn_steamworkssdk_proto_rawDescGZIP(), []int{4}
}

func (x *CMsgSteamLearnDataElement) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CMsgSteamLearnDataElement) GetDataInt32S() []int32 {
	if x != nil {
		return x.DataInt32S
	}
	return nil
}

func (x *CMsgSteamLearnDataElement) GetDataFloats() []float32 {
	if x != nil {
		return x.DataFloats
	}
	return nil
}

func (x *CMsgSteamLearnDataElement) GetDataBools() []bool {
	if x != nil {
		return x.DataBools
	}
	return nil
}

func (x *CMsgSteamLearnDataElement) GetDataStrings() []string {
	if x != nil {
		return x.DataStrings
	}
	return nil
}

func (x *CMsgSteamLearnDataElement) GetDataObjects() []*CMsgSteamLearnDataObject {
	if x != nil {
		return x.DataObjects
	}
	return nil
}

type CMsgSteamLearnData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataSourceId *uint32                   `protobuf:"varint,1,opt,name=data_source_id,json=dataSourceId" json:"data_source_id,omitempty"`
	Keys         []uint64                  `protobuf:"varint,2,rep,name=keys" json:"keys,omitempty"`
	DataObject   *CMsgSteamLearnDataObject `protobuf:"bytes,3,opt,name=data_object,json=dataObject" json:"data_object,omitempty"`
}

func (x *CMsgSteamLearnData) Reset() {
	*x = CMsgSteamLearnData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamlearn_steamworkssdk_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearnData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnData) ProtoMessage() {}

func (x *CMsgSteamLearnData) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamlearn_steamworkssdk_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnData.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnData) Descriptor() ([]byte, []int) {
	return file_steammessages_steamlearn_steamworkssdk_proto_rawDescGZIP(), []int{5}
}

func (x *CMsgSteamLearnData) GetDataSourceId() uint32 {
	if x != nil && x.DataSourceId != nil {
		return *x.DataSourceId
	}
	return 0
}

func (x *CMsgSteamLearnData) GetKeys() []uint64 {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *CMsgSteamLearnData) GetDataObject() *CMsgSteamLearnDataObject {
	if x != nil {
		return x.DataObject
	}
	return nil
}

type CMsgSteamLearnDataList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*CMsgSteamLearnData `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
}

func (x *CMsgSteamLearnDataList) Reset() {
	*x = CMsgSteamLearnDataList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamlearn_steamworkssdk_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearnDataList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnDataList) ProtoMessage() {}

func (x *CMsgSteamLearnDataList) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamlearn_steamworkssdk_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnDataList.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnDataList) Descriptor() ([]byte, []int) {
	return file_steammessages_steamlearn_steamworkssdk_proto_rawDescGZIP(), []int{6}
}

func (x *CMsgSteamLearnDataList) GetData() []*CMsgSteamLearnData {
	if x != nil {
		return x.Data
	}
	return nil
}

type CMsgSteamLearn_AccessData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublisherId *uint32 `protobuf:"varint,1,opt,name=publisher_id,json=publisherId" json:"publisher_id,omitempty"`
	Timestamp   *uint32 `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	RandomValue *uint64 `protobuf:"varint,3,opt,name=random_value,json=randomValue" json:"random_value,omitempty"`
}

func (x *CMsgSteamLearn_AccessData) Reset() {
	*x = CMsgSteamLearn_AccessData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamlearn_steamworkssdk_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_AccessData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_AccessData) ProtoMessage() {}

func (x *CMsgSteamLearn_AccessData) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamlearn_steamworkssdk_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_AccessData.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_AccessData) Descriptor() ([]byte, []int) {
	return file_steammessages_steamlearn_steamworkssdk_proto_rawDescGZIP(), []int{7}
}

func (x *CMsgSteamLearn_AccessData) GetPublisherId() uint32 {
	if x != nil && x.PublisherId != nil {
		return *x.PublisherId
	}
	return 0
}

func (x *CMsgSteamLearn_AccessData) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *CMsgSteamLearn_AccessData) GetRandomValue() uint64 {
	if x != nil && x.RandomValue != nil {
		return *x.RandomValue
	}
	return 0
}

type CMsgSteamLearn_RegisterDataSource_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessToken *string                    `protobuf:"bytes,1,opt,name=access_token,json=accessToken" json:"access_token,omitempty"`
	AccessData  *CMsgSteamLearn_AccessData `protobuf:"bytes,2,opt,name=access_data,json=accessData" json:"access_data,omitempty"`
	DataSource  *CMsgSteamLearnDataSource  `protobuf:"bytes,3,opt,name=data_source,json=dataSource" json:"data_source,omitempty"`
}

func (x *CMsgSteamLearn_RegisterDataSource_Request) Reset() {
	*x = CMsgSteamLearn_RegisterDataSource_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamlearn_steamworkssdk_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_RegisterDataSource_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_RegisterDataSource_Request) ProtoMessage() {}

func (x *CMsgSteamLearn_RegisterDataSource_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamlearn_steamworkssdk_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_RegisterDataSource_Request.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_RegisterDataSource_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_steamlearn_steamworkssdk_proto_rawDescGZIP(), []int{8}
}

func (x *CMsgSteamLearn_RegisterDataSource_Request) GetAccessToken() string {
	if x != nil && x.AccessToken != nil {
		return *x.AccessToken
	}
	return ""
}

func (x *CMsgSteamLearn_RegisterDataSource_Request) GetAccessData() *CMsgSteamLearn_AccessData {
	if x != nil {
		return x.AccessData
	}
	return nil
}

func (x *CMsgSteamLearn_RegisterDataSource_Request) GetDataSource() *CMsgSteamLearnDataSource {
	if x != nil {
		return x.DataSource
	}
	return nil
}

type CMsgSteamLearn_RegisterDataSource_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result     *ESteammLearnRegisterDataSourceResult `protobuf:"varint,1,opt,name=result,enum=dota.ESteammLearnRegisterDataSourceResult" json:"result,omitempty"`
	DataSource *CMsgSteamLearnDataSource             `protobuf:"bytes,2,opt,name=data_source,json=dataSource" json:"data_source,omitempty"`
}

func (x *CMsgSteamLearn_RegisterDataSource_Response) Reset() {
	*x = CMsgSteamLearn_RegisterDataSource_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamlearn_steamworkssdk_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_RegisterDataSource_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_RegisterDataSource_Response) ProtoMessage() {}

func (x *CMsgSteamLearn_RegisterDataSource_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamlearn_steamworkssdk_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_RegisterDataSource_Response.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_RegisterDataSource_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_steamlearn_steamworkssdk_proto_rawDescGZIP(), []int{9}
}

func (x *CMsgSteamLearn_RegisterDataSource_Response) GetResult() ESteammLearnRegisterDataSourceResult {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return ESteammLearnRegisterDataSourceResult_STEAMLEARN_REGISTER_DATA_SOURCE_RESULT_ERROR
}

func (x *CMsgSteamLearn_RegisterDataSource_Response) GetDataSource() *CMsgSteamLearnDataSource {
	if x != nil {
		return x.DataSource
	}
	return nil
}

type CMsgSteamLearn_CacheData_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessToken *string                    `protobuf:"bytes,1,opt,name=access_token,json=accessToken" json:"access_token,omitempty"`
	AccessData  *CMsgSteamLearn_AccessData `protobuf:"bytes,2,opt,name=access_data,json=accessData" json:"access_data,omitempty"`
	Data        *CMsgSteamLearnData        `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
}

func (x *CMsgSteamLearn_CacheData_Request) Reset() {
	*x = CMsgSteamLearn_CacheData_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamlearn_steamworkssdk_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_CacheData_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_CacheData_Request) ProtoMessage() {}

func (x *CMsgSteamLearn_CacheData_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamlearn_steamworkssdk_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_CacheData_Request.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_CacheData_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_steamlearn_steamworkssdk_proto_rawDescGZIP(), []int{10}
}

func (x *CMsgSteamLearn_CacheData_Request) GetAccessToken() string {
	if x != nil && x.AccessToken != nil {
		return *x.AccessToken
	}
	return ""
}

func (x *CMsgSteamLearn_CacheData_Request) GetAccessData() *CMsgSteamLearn_AccessData {
	if x != nil {
		return x.AccessData
	}
	return nil
}

func (x *CMsgSteamLearn_CacheData_Request) GetData() *CMsgSteamLearnData {
	if x != nil {
		return x.Data
	}
	return nil
}

type CMsgSteamLearn_CacheData_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CacheDataResult *ESteamLearnCacheDataResult `protobuf:"varint,1,opt,name=cache_data_result,json=cacheDataResult,enum=dota.ESteamLearnCacheDataResult" json:"cache_data_result,omitempty"`
}

func (x *CMsgSteamLearn_CacheData_Response) Reset() {
	*x = CMsgSteamLearn_CacheData_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamlearn_steamworkssdk_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_CacheData_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_CacheData_Response) ProtoMessage() {}

func (x *CMsgSteamLearn_CacheData_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamlearn_steamworkssdk_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_CacheData_Response.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_CacheData_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_steamlearn_steamworkssdk_proto_rawDescGZIP(), []int{11}
}

func (x *CMsgSteamLearn_CacheData_Response) GetCacheDataResult() ESteamLearnCacheDataResult {
	if x != nil && x.CacheDataResult != nil {
		return *x.CacheDataResult
	}
	return ESteamLearnCacheDataResult_STEAMLEARN_CACHE_DATA_ERROR
}

type CMsgSteamLearn_SnapshotProject_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessToken             *string                    `protobuf:"bytes,1,opt,name=access_token,json=accessToken" json:"access_token,omitempty"`
	AccessData              *CMsgSteamLearn_AccessData `protobuf:"bytes,2,opt,name=access_data,json=accessData" json:"access_data,omitempty"`
	ProjectId               *uint32                    `protobuf:"varint,3,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	PublishedVersion        *uint32                    `protobuf:"varint,7,opt,name=published_version,json=publishedVersion" json:"published_version,omitempty"`
	Keys                    []uint64                   `protobuf:"varint,4,rep,name=keys" json:"keys,omitempty"`
	Data                    []*CMsgSteamLearnData      `protobuf:"bytes,5,rep,name=data" json:"data,omitempty"`
	PendingDataLimitSeconds *uint32                    `protobuf:"varint,6,opt,name=pending_data_limit_seconds,json=pendingDataLimitSeconds" json:"pending_data_limit_seconds,omitempty"`
}

func (x *CMsgSteamLearn_SnapshotProject_Request) Reset() {
	*x = CMsgSteamLearn_SnapshotProject_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamlearn_steamworkssdk_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_SnapshotProject_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_SnapshotProject_Request) ProtoMessage() {}

func (x *CMsgSteamLearn_SnapshotProject_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamlearn_steamworkssdk_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_SnapshotProject_Request.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_SnapshotProject_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_steamlearn_steamworkssdk_proto_rawDescGZIP(), []int{12}
}

func (x *CMsgSteamLearn_SnapshotProject_Request) GetAccessToken() string {
	if x != nil && x.AccessToken != nil {
		return *x.AccessToken
	}
	return ""
}

func (x *CMsgSteamLearn_SnapshotProject_Request) GetAccessData() *CMsgSteamLearn_AccessData {
	if x != nil {
		return x.AccessData
	}
	return nil
}

func (x *CMsgSteamLearn_SnapshotProject_Request) GetProjectId() uint32 {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return 0
}

func (x *CMsgSteamLearn_SnapshotProject_Request) GetPublishedVersion() uint32 {
	if x != nil && x.PublishedVersion != nil {
		return *x.PublishedVersion
	}
	return 0
}

func (x *CMsgSteamLearn_SnapshotProject_Request) GetKeys() []uint64 {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *CMsgSteamLearn_SnapshotProject_Request) GetData() []*CMsgSteamLearnData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CMsgSteamLearn_SnapshotProject_Request) GetPendingDataLimitSeconds() uint32 {
	if x != nil && x.PendingDataLimitSeconds != nil {
		return *x.PendingDataLimitSeconds
	}
	return 0
}

type CMsgSteamLearn_SnapshotProject_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SnapshotResult *ESteamLearnSnapshotProjectResult `protobuf:"varint,1,opt,name=snapshot_result,json=snapshotResult,enum=dota.ESteamLearnSnapshotProjectResult" json:"snapshot_result,omitempty"`
}

func (x *CMsgSteamLearn_SnapshotProject_Response) Reset() {
	*x = CMsgSteamLearn_SnapshotProject_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamlearn_steamworkssdk_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_SnapshotProject_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_SnapshotProject_Response) ProtoMessage() {}

func (x *CMsgSteamLearn_SnapshotProject_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamlearn_steamworkssdk_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_SnapshotProject_Response.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_SnapshotProject_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_steamlearn_steamworkssdk_proto_rawDescGZIP(), []int{13}
}

func (x *CMsgSteamLearn_SnapshotProject_Response) GetSnapshotResult() ESteamLearnSnapshotProjectResult {
	if x != nil && x.SnapshotResult != nil {
		return *x.SnapshotResult
	}
	return ESteamLearnSnapshotProjectResult_STEAMLEARN_SNAPSHOT_PROJECT_ERROR
}

type CMsgSteamLearn_BatchOperation_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CacheDataRequests []*CMsgSteamLearn_CacheData_Request       `protobuf:"bytes,1,rep,name=cache_data_requests,json=cacheDataRequests" json:"cache_data_requests,omitempty"`
	SnapshotRequests  []*CMsgSteamLearn_SnapshotProject_Request `protobuf:"bytes,2,rep,name=snapshot_requests,json=snapshotRequests" json:"snapshot_requests,omitempty"`
}

func (x *CMsgSteamLearn_BatchOperation_Request) Reset() {
	*x = CMsgSteamLearn_BatchOperation_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamlearn_steamworkssdk_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_BatchOperation_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_BatchOperation_Request) ProtoMessage() {}

func (x *CMsgSteamLearn_BatchOperation_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamlearn_steamworkssdk_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_BatchOperation_Request.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_BatchOperation_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_steamlearn_steamworkssdk_proto_rawDescGZIP(), []int{14}
}

func (x *CMsgSteamLearn_BatchOperation_Request) GetCacheDataRequests() []*CMsgSteamLearn_CacheData_Request {
	if x != nil {
		return x.CacheDataRequests
	}
	return nil
}

func (x *CMsgSteamLearn_BatchOperation_Request) GetSnapshotRequests() []*CMsgSteamLearn_SnapshotProject_Request {
	if x != nil {
		return x.SnapshotRequests
	}
	return nil
}

type CMsgSteamLearn_BatchOperation_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CacheDataResponses []*CMsgSteamLearn_CacheData_Response       `protobuf:"bytes,1,rep,name=cache_data_responses,json=cacheDataResponses" json:"cache_data_responses,omitempty"`
	SnapshotResponses  []*CMsgSteamLearn_SnapshotProject_Response `protobuf:"bytes,2,rep,name=snapshot_responses,json=snapshotResponses" json:"snapshot_responses,omitempty"`
}

func (x *CMsgSteamLearn_BatchOperation_Response) Reset() {
	*x = CMsgSteamLearn_BatchOperation_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamlearn_steamworkssdk_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_BatchOperation_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_BatchOperation_Response) ProtoMessage() {}

func (x *CMsgSteamLearn_BatchOperation_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamlearn_steamworkssdk_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_BatchOperation_Response.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_BatchOperation_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_steamlearn_steamworkssdk_proto_rawDescGZIP(), []int{15}
}

func (x *CMsgSteamLearn_BatchOperation_Response) GetCacheDataResponses() []*CMsgSteamLearn_CacheData_Response {
	if x != nil {
		return x.CacheDataResponses
	}
	return nil
}

func (x *CMsgSteamLearn_BatchOperation_Response) GetSnapshotResponses() []*CMsgSteamLearn_SnapshotProject_Response {
	if x != nil {
		return x.SnapshotResponses
	}
	return nil
}

type CMsgSteamLearnHMACKeys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegisterDataSourceKey *string                                       `protobuf:"bytes,1,opt,name=register_data_source_key,json=registerDataSourceKey" json:"register_data_source_key,omitempty"`
	CacheDataKeys         []*CMsgSteamLearnHMACKeys_CacheDataKeys       `protobuf:"bytes,2,rep,name=cache_data_keys,json=cacheDataKeys" json:"cache_data_keys,omitempty"`
	SnapshotProjectKeys   []*CMsgSteamLearnHMACKeys_SnapshotProjectKeys `protobuf:"bytes,3,rep,name=snapshot_project_keys,json=snapshotProjectKeys" json:"snapshot_project_keys,omitempty"`
}

func (x *CMsgSteamLearnHMACKeys) Reset() {
	*x = CMsgSteamLearnHMACKeys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamlearn_steamworkssdk_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearnHMACKeys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnHMACKeys) ProtoMessage() {}

func (x *CMsgSteamLearnHMACKeys) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamlearn_steamworkssdk_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnHMACKeys.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnHMACKeys) Descriptor() ([]byte, []int) {
	return file_steammessages_steamlearn_steamworkssdk_proto_rawDescGZIP(), []int{16}
}

func (x *CMsgSteamLearnHMACKeys) GetRegisterDataSourceKey() string {
	if x != nil && x.RegisterDataSourceKey != nil {
		return *x.RegisterDataSourceKey
	}
	return ""
}

func (x *CMsgSteamLearnHMACKeys) GetCacheDataKeys() []*CMsgSteamLearnHMACKeys_CacheDataKeys {
	if x != nil {
		return x.CacheDataKeys
	}
	return nil
}

func (x *CMsgSteamLearnHMACKeys) GetSnapshotProjectKeys() []*CMsgSteamLearnHMACKeys_SnapshotProjectKeys {
	if x != nil {
		return x.SnapshotProjectKeys
	}
	return nil
}

type CMsgSteamLearn_GetHMACKeys_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
}

func (x *CMsgSteamLearn_GetHMACKeys_Request) Reset() {
	*x = CMsgSteamLearn_GetHMACKeys_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamlearn_steamworkssdk_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_GetHMACKeys_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_GetHMACKeys_Request) ProtoMessage() {}

func (x *CMsgSteamLearn_GetHMACKeys_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamlearn_steamworkssdk_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_GetHMACKeys_Request.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_GetHMACKeys_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_steamlearn_steamworkssdk_proto_rawDescGZIP(), []int{17}
}

func (x *CMsgSteamLearn_GetHMACKeys_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

type CMsgSteamLearn_GetHMACKeys_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *ESteamLearnGetHMACKeysResult `protobuf:"varint,1,opt,name=result,enum=dota.ESteamLearnGetHMACKeysResult" json:"result,omitempty"`
	Keys   *CMsgSteamLearnHMACKeys       `protobuf:"bytes,2,opt,name=keys" json:"keys,omitempty"`
}

func (x *CMsgSteamLearn_GetHMACKeys_Response) Reset() {
	*x = CMsgSteamLearn_GetHMACKeys_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamlearn_steamworkssdk_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_GetHMACKeys_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_GetHMACKeys_Response) ProtoMessage() {}

func (x *CMsgSteamLearn_GetHMACKeys_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamlearn_steamworkssdk_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_GetHMACKeys_Response.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_GetHMACKeys_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_steamlearn_steamworkssdk_proto_rawDescGZIP(), []int{18}
}

func (x *CMsgSteamLearn_GetHMACKeys_Response) GetResult() ESteamLearnGetHMACKeysResult {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return ESteamLearnGetHMACKeysResult_STEAMLEARN_GET_HMAC_KEYS_SUCCESS
}

func (x *CMsgSteamLearn_GetHMACKeys_Response) GetKeys() *CMsgSteamLearnHMACKeys {
	if x != nil {
		return x.Keys
	}
	return nil
}

type CMsgSteamLearn_Inference_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessToken      *string                    `protobuf:"bytes,1,opt,name=access_token,json=accessToken" json:"access_token,omitempty"`
	AccessData       *CMsgSteamLearn_AccessData `protobuf:"bytes,2,opt,name=access_data,json=accessData" json:"access_data,omitempty"`
	ProjectId        *uint32                    `protobuf:"varint,3,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	PublishedVersion *uint32                    `protobuf:"varint,4,opt,name=published_version,json=publishedVersion" json:"published_version,omitempty"`
	OverrideTrainId  *uint32                    `protobuf:"varint,5,opt,name=override_train_id,json=overrideTrainId" json:"override_train_id,omitempty"`
	Data             *CMsgSteamLearnDataList    `protobuf:"bytes,6,opt,name=data" json:"data,omitempty"`
	AdditionalData   []float32                  `protobuf:"fixed32,7,rep,name=additional_data,json=additionalData" json:"additional_data,omitempty"`
}

func (x *CMsgSteamLearn_Inference_Request) Reset() {
	*x = CMsgSteamLearn_Inference_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamlearn_steamworkssdk_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_Inference_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_Inference_Request) ProtoMessage() {}

func (x *CMsgSteamLearn_Inference_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamlearn_steamworkssdk_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_Inference_Request.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_Inference_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_steamlearn_steamworkssdk_proto_rawDescGZIP(), []int{19}
}

func (x *CMsgSteamLearn_Inference_Request) GetAccessToken() string {
	if x != nil && x.AccessToken != nil {
		return *x.AccessToken
	}
	return ""
}

func (x *CMsgSteamLearn_Inference_Request) GetAccessData() *CMsgSteamLearn_AccessData {
	if x != nil {
		return x.AccessData
	}
	return nil
}

func (x *CMsgSteamLearn_Inference_Request) GetProjectId() uint32 {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return 0
}

func (x *CMsgSteamLearn_Inference_Request) GetPublishedVersion() uint32 {
	if x != nil && x.PublishedVersion != nil {
		return *x.PublishedVersion
	}
	return 0
}

func (x *CMsgSteamLearn_Inference_Request) GetOverrideTrainId() uint32 {
	if x != nil && x.OverrideTrainId != nil {
		return *x.OverrideTrainId
	}
	return 0
}

func (x *CMsgSteamLearn_Inference_Request) GetData() *CMsgSteamLearnDataList {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CMsgSteamLearn_Inference_Request) GetAdditionalData() []float32 {
	if x != nil {
		return x.AdditionalData
	}
	return nil
}

type CMsgSteamLearn_InferenceBackend_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Outputs []*CMsgSteamLearn_InferenceBackend_Response_Output `protobuf:"bytes,1,rep,name=outputs" json:"outputs,omitempty"`
}

func (x *CMsgSteamLearn_InferenceBackend_Response) Reset() {
	*x = CMsgSteamLearn_InferenceBackend_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamlearn_steamworkssdk_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_InferenceBackend_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_InferenceBackend_Response) ProtoMessage() {}

func (x *CMsgSteamLearn_InferenceBackend_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamlearn_steamworkssdk_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_InferenceBackend_Response.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_InferenceBackend_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_steamlearn_steamworkssdk_proto_rawDescGZIP(), []int{20}
}

func (x *CMsgSteamLearn_InferenceBackend_Response) GetOutputs() []*CMsgSteamLearn_InferenceBackend_Response_Output {
	if x != nil {
		return x.Outputs
	}
	return nil
}

type CMsgSteamLearn_Inference_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InferenceResult *ESteamLearnInferenceResult               `protobuf:"varint,1,opt,name=inference_result,json=inferenceResult,enum=dota.ESteamLearnInferenceResult" json:"inference_result,omitempty"`
	BackendResponse *CMsgSteamLearn_InferenceBackend_Response `protobuf:"bytes,2,opt,name=backend_response,json=backendResponse" json:"backend_response,omitempty"`
}

func (x *CMsgSteamLearn_Inference_Response) Reset() {
	*x = CMsgSteamLearn_Inference_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamlearn_steamworkssdk_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_Inference_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_Inference_Response) ProtoMessage() {}

func (x *CMsgSteamLearn_Inference_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamlearn_steamworkssdk_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_Inference_Response.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_Inference_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_steamlearn_steamworkssdk_proto_rawDescGZIP(), []int{21}
}

func (x *CMsgSteamLearn_Inference_Response) GetInferenceResult() ESteamLearnInferenceResult {
	if x != nil && x.InferenceResult != nil {
		return *x.InferenceResult
	}
	return ESteamLearnInferenceResult_STEAMLEARN_INFERENCE_ERROR
}

func (x *CMsgSteamLearn_Inference_Response) GetBackendResponse() *CMsgSteamLearn_InferenceBackend_Response {
	if x != nil {
		return x.BackendResponse
	}
	return nil
}

type CMsgSteamLearnHMACKeys_CacheDataKeys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataSourceId *uint32 `protobuf:"varint,1,opt,name=data_source_id,json=dataSourceId" json:"data_source_id,omitempty"`
	Version      *uint32 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
	Key          *string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
}

func (x *CMsgSteamLearnHMACKeys_CacheDataKeys) Reset() {
	*x = CMsgSteamLearnHMACKeys_CacheDataKeys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamlearn_steamworkssdk_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearnHMACKeys_CacheDataKeys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnHMACKeys_CacheDataKeys) ProtoMessage() {}

func (x *CMsgSteamLearnHMACKeys_CacheDataKeys) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamlearn_steamworkssdk_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnHMACKeys_CacheDataKeys.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnHMACKeys_CacheDataKeys) Descriptor() ([]byte, []int) {
	return file_steammessages_steamlearn_steamworkssdk_proto_rawDescGZIP(), []int{16, 0}
}

func (x *CMsgSteamLearnHMACKeys_CacheDataKeys) GetDataSourceId() uint32 {
	if x != nil && x.DataSourceId != nil {
		return *x.DataSourceId
	}
	return 0
}

func (x *CMsgSteamLearnHMACKeys_CacheDataKeys) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *CMsgSteamLearnHMACKeys_CacheDataKeys) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

type CMsgSteamLearnHMACKeys_SnapshotProjectKeys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId        *uint32 `protobuf:"varint,1,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	PublishedVersion *uint32 `protobuf:"varint,3,opt,name=published_version,json=publishedVersion" json:"published_version,omitempty"`
	Key              *string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
}

func (x *CMsgSteamLearnHMACKeys_SnapshotProjectKeys) Reset() {
	*x = CMsgSteamLearnHMACKeys_SnapshotProjectKeys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamlearn_steamworkssdk_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearnHMACKeys_SnapshotProjectKeys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearnHMACKeys_SnapshotProjectKeys) ProtoMessage() {}

func (x *CMsgSteamLearnHMACKeys_SnapshotProjectKeys) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamlearn_steamworkssdk_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearnHMACKeys_SnapshotProjectKeys.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearnHMACKeys_SnapshotProjectKeys) Descriptor() ([]byte, []int) {
	return file_steammessages_steamlearn_steamworkssdk_proto_rawDescGZIP(), []int{16, 1}
}

func (x *CMsgSteamLearnHMACKeys_SnapshotProjectKeys) GetProjectId() uint32 {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return 0
}

func (x *CMsgSteamLearnHMACKeys_SnapshotProjectKeys) GetPublishedVersion() uint32 {
	if x != nil && x.PublishedVersion != nil {
		return *x.PublishedVersion
	}
	return 0
}

func (x *CMsgSteamLearnHMACKeys_SnapshotProjectKeys) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

type CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *float32 `protobuf:"fixed32,1,opt,name=value" json:"value,omitempty"`
}

func (x *CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput) Reset() {
	*x = CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamlearn_steamworkssdk_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput) ProtoMessage() {}

func (x *CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamlearn_steamworkssdk_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput) Descriptor() ([]byte, []int) {
	return file_steammessages_steamlearn_steamworkssdk_proto_rawDescGZIP(), []int{20, 0}
}

func (x *CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput) GetValue() float32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

type CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Weight []float32 `protobuf:"fixed32,1,rep,name=weight" json:"weight,omitempty"`
	Value  []float32 `protobuf:"fixed32,2,rep,name=value" json:"value,omitempty"`
}

func (x *CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput) Reset() {
	*x = CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamlearn_steamworkssdk_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput) ProtoMessage() {}

func (x *CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamlearn_steamworkssdk_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput) Descriptor() ([]byte, []int) {
	return file_steammessages_steamlearn_steamworkssdk_proto_rawDescGZIP(), []int{20, 1}
}

func (x *CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput) GetWeight() []float32 {
	if x != nil {
		return x.Weight
	}
	return nil
}

func (x *CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput) GetValue() []float32 {
	if x != nil {
		return x.Value
	}
	return nil
}

type CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Weight []float32 `protobuf:"fixed32,1,rep,name=weight" json:"weight,omitempty"`
	Value  []float32 `protobuf:"fixed32,2,rep,name=value" json:"value,omitempty"`
}

func (x *CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput) Reset() {
	*x = CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamlearn_steamworkssdk_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput) ProtoMessage() {}

func (x *CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamlearn_steamworkssdk_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput) Descriptor() ([]byte, []int) {
	return file_steammessages_steamlearn_steamworkssdk_proto_rawDescGZIP(), []int{20, 2}
}

func (x *CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput) GetWeight() []float32 {
	if x != nil {
		return x.Weight
	}
	return nil
}

func (x *CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput) GetValue() []float32 {
	if x != nil {
		return x.Value
	}
	return nil
}

type CMsgSteamLearn_InferenceBackend_Response_Output struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ResponseType:
	//	*CMsgSteamLearn_InferenceBackend_Response_Output_BinaryCrossentropy
	//	*CMsgSteamLearn_InferenceBackend_Response_Output_CategoricalCrossentropy
	//	*CMsgSteamLearn_InferenceBackend_Response_Output_MultiBinaryCrossentropy
	ResponseType isCMsgSteamLearn_InferenceBackend_Response_Output_ResponseType `protobuf_oneof:"ResponseType"`
}

func (x *CMsgSteamLearn_InferenceBackend_Response_Output) Reset() {
	*x = CMsgSteamLearn_InferenceBackend_Response_Output{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamlearn_steamworkssdk_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamLearn_InferenceBackend_Response_Output) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamLearn_InferenceBackend_Response_Output) ProtoMessage() {}

func (x *CMsgSteamLearn_InferenceBackend_Response_Output) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamlearn_steamworkssdk_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamLearn_InferenceBackend_Response_Output.ProtoReflect.Descriptor instead.
func (*CMsgSteamLearn_InferenceBackend_Response_Output) Descriptor() ([]byte, []int) {
	return file_steammessages_steamlearn_steamworkssdk_proto_rawDescGZIP(), []int{20, 3}
}

func (m *CMsgSteamLearn_InferenceBackend_Response_Output) GetResponseType() isCMsgSteamLearn_InferenceBackend_Response_Output_ResponseType {
	if m != nil {
		return m.ResponseType
	}
	return nil
}

func (x *CMsgSteamLearn_InferenceBackend_Response_Output) GetBinaryCrossentropy() *CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput {
	if x, ok := x.GetResponseType().(*CMsgSteamLearn_InferenceBackend_Response_Output_BinaryCrossentropy); ok {
		return x.BinaryCrossentropy
	}
	return nil
}

func (x *CMsgSteamLearn_InferenceBackend_Response_Output) GetCategoricalCrossentropy() *CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput {
	if x, ok := x.GetResponseType().(*CMsgSteamLearn_InferenceBackend_Response_Output_CategoricalCrossentropy); ok {
		return x.CategoricalCrossentropy
	}
	return nil
}

func (x *CMsgSteamLearn_InferenceBackend_Response_Output) GetMultiBinaryCrossentropy() *CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput {
	if x, ok := x.GetResponseType().(*CMsgSteamLearn_InferenceBackend_Response_Output_MultiBinaryCrossentropy); ok {
		return x.MultiBinaryCrossentropy
	}
	return nil
}

type isCMsgSteamLearn_InferenceBackend_Response_Output_ResponseType interface {
	isCMsgSteamLearn_InferenceBackend_Response_Output_ResponseType()
}

type CMsgSteamLearn_InferenceBackend_Response_Output_BinaryCrossentropy struct {
	BinaryCrossentropy *CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput `protobuf:"bytes,1,opt,name=binary_crossentropy,json=binaryCrossentropy,oneof"`
}

type CMsgSteamLearn_InferenceBackend_Response_Output_CategoricalCrossentropy struct {
	CategoricalCrossentropy *CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput `protobuf:"bytes,2,opt,name=categorical_crossentropy,json=categoricalCrossentropy,oneof"`
}

type CMsgSteamLearn_InferenceBackend_Response_Output_MultiBinaryCrossentropy struct {
	MultiBinaryCrossentropy *CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput `protobuf:"bytes,3,opt,name=multi_binary_crossentropy,json=multiBinaryCrossentropy,oneof"`
}

func (*CMsgSteamLearn_InferenceBackend_Response_Output_BinaryCrossentropy) isCMsgSteamLearn_InferenceBackend_Response_Output_ResponseType() {
}

func (*CMsgSteamLearn_InferenceBackend_Response_Output_CategoricalCrossentropy) isCMsgSteamLearn_InferenceBackend_Response_Output_ResponseType() {
}

func (*CMsgSteamLearn_InferenceBackend_Response_Output_MultiBinaryCrossentropy) isCMsgSteamLearn_InferenceBackend_Response_Output_ResponseType() {
}

var File_steammessages_steamlearn_steamworkssdk_proto protoreflect.FileDescriptor

var file_steammessages_steamlearn_steamworkssdk_proto_rawDesc = []byte{
	0x0a, 0x2c, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04,
	0x64, 0x6f, 0x74, 0x61, 0x1a, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6b, 0x0a, 0x22, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x44, 0x65, 0x73, 0x63, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x45, 0x0a, 0x08, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x64,
	0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61,
	0x72, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x22, 0xc9, 0x01, 0x0a, 0x23, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c,
	0x65, 0x61, 0x72, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65,
	0x73, 0x63, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a,
	0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x19, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65,
	0x61, 0x72, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x64, 0x61, 0x74,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xaa, 0x02,
	0x0a, 0x18, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x64, 0x6f, 0x74,
	0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x09, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x72, 0x63,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x43, 0x72, 0x63, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x63, 0x61, 0x63, 0x68, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x57, 0x0a, 0x18, 0x43, 0x4d,
	0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x44, 0x61, 0x74, 0x61,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x3b, 0x0a, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x22, 0xf6, 0x01, 0x0a, 0x19, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x66,
	0x6c, 0x6f, 0x61, 0x74, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x02, 0x52, 0x0a, 0x64, 0x61, 0x74,
	0x61, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x62, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x08, 0x52, 0x09, 0x64, 0x61, 0x74,
	0x61, 0x42, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x61,
	0x74, 0x61, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x41, 0x0a, 0x0c, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x4c, 0x65, 0x61, 0x72, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x0b, 0x64, 0x61, 0x74, 0x61, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x22, 0x8f, 0x01, 0x0a,
	0x12, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x61, 0x74,
	0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x3f, 0x0a,
	0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x46,
	0x0a, 0x16, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x7f, 0x0a, 0x19, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x72, 0x61, 0x6e, 0x64,
	0x6f, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xd1, 0x01, 0x0a, 0x29, 0x43, 0x4d, 0x73, 0x67,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x40, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65,
	0x61, 0x72, 0x6e, 0x5f, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0b, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x4c, 0x65, 0x61, 0x72, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x0a, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xb1, 0x01, 0x0a, 0x2a,
	0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x64, 0x6f, 0x74,
	0x61, 0x2e, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3f,
	0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22,
	0xb5, 0x01, 0x0a, 0x20, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61,
	0x72, 0x6e, 0x5f, 0x43, 0x61, 0x63, 0x68, 0x65, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x40, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64,
	0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61,
	0x72, 0x6e, 0x5f, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2c, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x71, 0x0a, 0x21, 0x43, 0x4d, 0x73, 0x67, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x43, 0x61, 0x63, 0x68, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x11,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x45,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0f, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xd8, 0x02, 0x0a, 0x26, 0x43,
	0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x40, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65,
	0x61, 0x72, 0x6e, 0x5f, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x04, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x2c, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3b, 0x0a, 0x1a, 0x70, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x70, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x7a, 0x0a, 0x27, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4f, 0x0a, 0x0f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x64, 0x6f, 0x74, 0x61,
	0x2e, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x0e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0xda, 0x01, 0x0a, 0x25, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c,
	0x65, 0x61, 0x72, 0x6e, 0x5f, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x13, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x11, 0x63, 0x61, 0x63, 0x68, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x12, 0x59, 0x0a, 0x11, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c,
	0x65, 0x61, 0x72, 0x6e, 0x5f, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x10, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0xe1,
	0x01, 0x0a, 0x26, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72,
	0x6e, 0x5f, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x14, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x12, 0x63, 0x61, 0x63, 0x68, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x73, 0x12, 0x5c, 0x0a, 0x12, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x11, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x73, 0x22, 0xe3, 0x03, 0x0a, 0x16, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x4c, 0x65, 0x61, 0x72, 0x6e, 0x48, 0x4d, 0x41, 0x43, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x37, 0x0a,
	0x18, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x15, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x52, 0x0a, 0x0f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x4c, 0x65, 0x61, 0x72, 0x6e, 0x48, 0x4d, 0x41, 0x43, 0x4b, 0x65, 0x79, 0x73, 0x2e, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x0d, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x64, 0x0a, 0x15, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6b,
	0x65, 0x79, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x64, 0x6f, 0x74, 0x61,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x48,
	0x4d, 0x41, 0x43, 0x4b, 0x65, 0x79, 0x73, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x13, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x73,
	0x1a, 0x61, 0x0a, 0x0d, 0x43, 0x61, 0x63, 0x68, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79,
	0x73, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x1a, 0x73, 0x0a, 0x13, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x3a, 0x0a, 0x22, 0x43, 0x4d, 0x73, 0x67,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x47, 0x65, 0x74, 0x48, 0x4d,
	0x41, 0x43, 0x4b, 0x65, 0x79, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61,
	0x70, 0x70, 0x69, 0x64, 0x22, 0x93, 0x01, 0x0a, 0x23, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x47, 0x65, 0x74, 0x48, 0x4d, 0x41, 0x43, 0x4b,
	0x65, 0x79, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x64,
	0x6f, 0x74, 0x61, 0x2e, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x47,
	0x65, 0x74, 0x48, 0x4d, 0x41, 0x43, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x48, 0x4d, 0x41, 0x43,
	0x4b, 0x65, 0x79, 0x73, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x22, 0xda, 0x02, 0x0a, 0x20, 0x43,
	0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x49, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x40, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x2a, 0x0a, 0x11, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x65, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x6f, 0x74,
	0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x27,
	0x0a, 0x0f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x07, 0x20, 0x03, 0x28, 0x02, 0x52, 0x0e, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x22, 0xfb, 0x05, 0x0a, 0x28, 0x43, 0x4d, 0x73, 0x67,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x49, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x07, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x73, 0x1a, 0x30, 0x0a, 0x18, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x43,
	0x72, 0x6f, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x6f, 0x70, 0x79, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x4d, 0x0a, 0x1d, 0x4d, 0x75, 0x74, 0x6c, 0x69,
	0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x6f,
	0x70, 0x79, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x02, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x02, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x4d, 0x0a, 0x1d, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x6f, 0x70,
	0x79, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x02, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x02, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xad, 0x03, 0x0a, 0x06, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x12, 0x7a, 0x0a, 0x13, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x72, 0x6f, 0x73, 0x73,
	0x65, 0x6e, 0x74, 0x72, 0x6f, 0x70, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e,
	0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65,
	0x61, 0x72, 0x6e, 0x5f, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42, 0x69,
	0x6e, 0x61, 0x72, 0x79, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x6f, 0x70, 0x79,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x48, 0x00, 0x52, 0x12, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79,
	0x43, 0x72, 0x6f, 0x73, 0x73, 0x65, 0x6e, 0x74, 0x72, 0x6f, 0x70, 0x79, 0x12, 0x89, 0x01, 0x0a,
	0x18, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x63, 0x72, 0x6f,
	0x73, 0x73, 0x65, 0x6e, 0x74, 0x72, 0x6f, 0x70, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x4c, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x72, 0x6f, 0x73, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x6f, 0x70, 0x79, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x48, 0x00, 0x52,
	0x17, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x72, 0x6f, 0x73,
	0x73, 0x65, 0x6e, 0x74, 0x72, 0x6f, 0x70, 0x79, 0x12, 0x8a, 0x01, 0x0a, 0x19, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x5f, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x65,
	0x6e, 0x74, 0x72, 0x6f, 0x70, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x64,
	0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61,
	0x72, 0x6e, 0x5f, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x75, 0x74,
	0x6c, 0x69, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x6f, 0x70, 0x79, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x48, 0x00, 0x52, 0x17, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x65, 0x6e,
	0x74, 0x72, 0x6f, 0x70, 0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xcb, 0x01, 0x0a, 0x21, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x10, 0x69,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x45, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0f, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x59, 0x0a, 0x10, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2a, 0xd4, 0x01, 0x0a, 0x13, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65,
	0x61, 0x72, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x53,
	0x54, 0x45, 0x41, 0x4d, 0x4c, 0x45, 0x41, 0x52, 0x4e, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19,
	0x53, 0x54, 0x45, 0x41, 0x4d, 0x4c, 0x45, 0x41, 0x52, 0x4e, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x33, 0x32, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x53,
	0x54, 0x45, 0x41, 0x4d, 0x4c, 0x45, 0x41, 0x52, 0x4e, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x33, 0x32, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18,
	0x53, 0x54, 0x45, 0x41, 0x4d, 0x4c, 0x45, 0x41, 0x52, 0x4e, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x42, 0x4f, 0x4f, 0x4c, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x54,
	0x45, 0x41, 0x4d, 0x4c, 0x45, 0x41, 0x52, 0x4e, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x54,
	0x45, 0x41, 0x4d, 0x4c, 0x45, 0x41, 0x52, 0x4e, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x05, 0x2a, 0xbc, 0x05, 0x0a, 0x24, 0x45,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x30, 0x0a, 0x2c, 0x53, 0x54, 0x45, 0x41, 0x4d, 0x4c, 0x45, 0x41, 0x52,
	0x4e, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0x00, 0x12, 0x3a, 0x0a, 0x36, 0x53, 0x54, 0x45, 0x41, 0x4d, 0x4c, 0x45,
	0x41, 0x52, 0x4e, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x44, 0x41, 0x54,
	0x41, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f,
	0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x38, 0x0a, 0x34, 0x53, 0x54, 0x45, 0x41, 0x4d, 0x4c, 0x45, 0x41, 0x52, 0x4e, 0x5f,
	0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x53, 0x55, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x38, 0x0a, 0x34, 0x53,
	0x54, 0x45, 0x41, 0x4d, 0x4c, 0x45, 0x41, 0x52, 0x4e, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54,
	0x45, 0x52, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x52,
	0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x47, 0x45, 0x4e, 0x45,
	0x52, 0x49, 0x43, 0x10, 0x03, 0x12, 0x3d, 0x0a, 0x39, 0x53, 0x54, 0x45, 0x41, 0x4d, 0x4c, 0x45,
	0x41, 0x52, 0x4e, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x44, 0x41, 0x54,
	0x41, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4e, 0x41,
	0x4d, 0x45, 0x10, 0x04, 0x12, 0x40, 0x0a, 0x3c, 0x53, 0x54, 0x45, 0x41, 0x4d, 0x4c, 0x45, 0x41,
	0x52, 0x4e, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x44, 0x41, 0x54, 0x41,
	0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x56, 0x45, 0x52,
	0x53, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x3d, 0x0a, 0x39, 0x53, 0x54, 0x45, 0x41, 0x4d, 0x4c,
	0x45, 0x41, 0x52, 0x4e, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x44, 0x41,
	0x54, 0x41, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x43, 0x48, 0x41, 0x4e,
	0x47, 0x45, 0x44, 0x10, 0x06, 0x12, 0x3d, 0x0a, 0x39, 0x53, 0x54, 0x45, 0x41, 0x4d, 0x4c, 0x45,
	0x41, 0x52, 0x4e, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x44, 0x41, 0x54,
	0x41, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x10, 0x07, 0x12, 0x3a, 0x0a, 0x36, 0x53, 0x54, 0x45, 0x41, 0x4d, 0x4c, 0x45, 0x41,
	0x52, 0x4e, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x44, 0x41, 0x54, 0x41,
	0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x46, 0x4f, 0x52, 0x42, 0x49, 0x44, 0x44, 0x45, 0x4e, 0x10, 0x08,
	0x12, 0x42, 0x0a, 0x3e, 0x53, 0x54, 0x45, 0x41, 0x4d, 0x4c, 0x45, 0x41, 0x52, 0x4e, 0x5f, 0x52,
	0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41,
	0x4d, 0x50, 0x10, 0x09, 0x12, 0x33, 0x0a, 0x2f, 0x53, 0x54, 0x45, 0x41, 0x4d, 0x4c, 0x45, 0x41,
	0x52, 0x4e, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x44, 0x41, 0x54, 0x41,
	0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x44,
	0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x0a, 0x2a, 0xfb, 0x02, 0x0a, 0x1a, 0x45, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x54, 0x45, 0x41,
	0x4d, 0x4c, 0x45, 0x41, 0x52, 0x4e, 0x5f, 0x43, 0x41, 0x43, 0x48, 0x45, 0x5f, 0x44, 0x41, 0x54,
	0x41, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x54, 0x45,
	0x41, 0x4d, 0x4c, 0x45, 0x41, 0x52, 0x4e, 0x5f, 0x43, 0x41, 0x43, 0x48, 0x45, 0x5f, 0x44, 0x41,
	0x54, 0x41, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x33, 0x0a, 0x2f,
	0x53, 0x54, 0x45, 0x41, 0x4d, 0x4c, 0x45, 0x41, 0x52, 0x4e, 0x5f, 0x43, 0x41, 0x43, 0x48, 0x45,
	0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10,
	0x02, 0x12, 0x34, 0x0a, 0x30, 0x53, 0x54, 0x45, 0x41, 0x4d, 0x4c, 0x45, 0x41, 0x52, 0x4e, 0x5f,
	0x43, 0x41, 0x43, 0x48, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x55, 0x4e, 0x43, 0x41, 0x43, 0x48, 0x45, 0x44, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x03, 0x12, 0x2c, 0x0a, 0x28, 0x53, 0x54, 0x45, 0x41, 0x4d,
	0x4c, 0x45, 0x41, 0x52, 0x4e, 0x5f, 0x43, 0x41, 0x43, 0x48, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4b,
	0x45, 0x59, 0x53, 0x10, 0x04, 0x12, 0x29, 0x0a, 0x25, 0x53, 0x54, 0x45, 0x41, 0x4d, 0x4c, 0x45,
	0x41, 0x52, 0x4e, 0x5f, 0x43, 0x41, 0x43, 0x48, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x46, 0x4f, 0x52, 0x42, 0x49, 0x44, 0x44, 0x45, 0x4e, 0x10, 0x05,
	0x12, 0x31, 0x0a, 0x2d, 0x53, 0x54, 0x45, 0x41, 0x4d, 0x4c, 0x45, 0x41, 0x52, 0x4e, 0x5f, 0x43,
	0x41, 0x43, 0x48, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d,
	0x50, 0x10, 0x06, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x54, 0x45, 0x41, 0x4d, 0x4c, 0x45, 0x41, 0x52,
	0x4e, 0x5f, 0x43, 0x41, 0x43, 0x48, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x44, 0x49, 0x53,
	0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x07, 0x2a, 0xed, 0x05, 0x0a, 0x20, 0x45, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x25, 0x0a, 0x21,
	0x53, 0x54, 0x45, 0x41, 0x4d, 0x4c, 0x45, 0x41, 0x52, 0x4e, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53,
	0x48, 0x4f, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x00, 0x12, 0x2e, 0x0a, 0x2a, 0x53, 0x54, 0x45, 0x41, 0x4d, 0x4c, 0x45, 0x41, 0x52,
	0x4e, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45,
	0x43, 0x54, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x2e, 0x0a, 0x2a, 0x53, 0x54, 0x45, 0x41, 0x4d, 0x4c, 0x45, 0x41, 0x52,
	0x4e, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45,
	0x43, 0x54, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45,
	0x44, 0x10, 0x02, 0x12, 0x38, 0x0a, 0x34, 0x53, 0x54, 0x45, 0x41, 0x4d, 0x4c, 0x45, 0x41, 0x52,
	0x4e, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45,
	0x43, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x49, 0x44, 0x10, 0x03, 0x12, 0x39, 0x0a,
	0x35, 0x53, 0x54, 0x45, 0x41, 0x4d, 0x4c, 0x45, 0x41, 0x52, 0x4e, 0x5f, 0x53, 0x4e, 0x41, 0x50,
	0x53, 0x48, 0x4f, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x04, 0x12, 0x3d, 0x0a, 0x39, 0x53, 0x54, 0x45, 0x41,
	0x4d, 0x4c, 0x45, 0x41, 0x52, 0x4e, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x5f,
	0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x05, 0x12, 0x3c, 0x0a, 0x38, 0x53, 0x54, 0x45, 0x41, 0x4d,
	0x4c, 0x45, 0x41, 0x52, 0x4e, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x5f, 0x50,
	0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4d, 0x49, 0x53,
	0x53, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x41, 0x43, 0x48, 0x45, 0x5f, 0x44, 0x55, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x06, 0x12, 0x39, 0x0a, 0x35, 0x53, 0x54, 0x45, 0x41, 0x4d, 0x4c, 0x45,
	0x41, 0x52, 0x4e, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x5f, 0x50, 0x52, 0x4f,
	0x4a, 0x45, 0x43, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x5f, 0x50, 0x55,
	0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x07,
	0x12, 0x2f, 0x0a, 0x2b, 0x53, 0x54, 0x45, 0x41, 0x4d, 0x4c, 0x45, 0x41, 0x52, 0x4e, 0x5f, 0x53,
	0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x46, 0x4f, 0x52, 0x42, 0x49, 0x44, 0x44, 0x45, 0x4e, 0x10,
	0x08, 0x12, 0x37, 0x0a, 0x33, 0x53, 0x54, 0x45, 0x41, 0x4d, 0x4c, 0x45, 0x41, 0x52, 0x4e, 0x5f,
	0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x54,
	0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x10, 0x09, 0x12, 0x40, 0x0a, 0x3c, 0x53, 0x54,
	0x45, 0x41, 0x4d, 0x4c, 0x45, 0x41, 0x52, 0x4e, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f,
	0x54, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x0a, 0x12, 0x28, 0x0a, 0x24,
	0x53, 0x54, 0x45, 0x41, 0x4d, 0x4c, 0x45, 0x41, 0x52, 0x4e, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53,
	0x48, 0x4f, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x44, 0x49, 0x53, 0x41,
	0x42, 0x4c, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x3f, 0x0a, 0x3b, 0x53, 0x54, 0x45, 0x41, 0x4d, 0x4c,
	0x45, 0x41, 0x52, 0x4e, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x5f, 0x50, 0x52,
	0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x44, 0x5f, 0x56, 0x45,
	0x52, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x0c, 0x2a, 0x44, 0x0a, 0x1c, 0x45, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x47, 0x65, 0x74, 0x48, 0x4d, 0x41, 0x43, 0x4b, 0x65, 0x79,
	0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x54, 0x45, 0x41, 0x4d,
	0x4c, 0x45, 0x41, 0x52, 0x4e, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x48, 0x4d, 0x41, 0x43, 0x5f, 0x4b,
	0x45, 0x59, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x2a, 0xc8, 0x03,
	0x0a, 0x1a, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x49, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1e, 0x0a, 0x1a,
	0x53, 0x54, 0x45, 0x41, 0x4d, 0x4c, 0x45, 0x41, 0x52, 0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x45, 0x52,
	0x45, 0x4e, 0x43, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c,
	0x53, 0x54, 0x45, 0x41, 0x4d, 0x4c, 0x45, 0x41, 0x52, 0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x45, 0x52,
	0x45, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x31,
	0x0a, 0x2d, 0x53, 0x54, 0x45, 0x41, 0x4d, 0x4c, 0x45, 0x41, 0x52, 0x4e, 0x5f, 0x49, 0x4e, 0x46,
	0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x49, 0x44, 0x10,
	0x02, 0x12, 0x39, 0x0a, 0x35, 0x53, 0x54, 0x45, 0x41, 0x4d, 0x4c, 0x45, 0x41, 0x52, 0x4e, 0x5f,
	0x49, 0x4e, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x41, 0x43, 0x48, 0x45, 0x44, 0x5f, 0x53,
	0x43, 0x48, 0x45, 0x4d, 0x41, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x03, 0x12, 0x32, 0x0a, 0x2e,
	0x53, 0x54, 0x45, 0x41, 0x4d, 0x4c, 0x45, 0x41, 0x52, 0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x45, 0x52,
	0x45, 0x4e, 0x43, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x5f, 0x50, 0x55,
	0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x04,
	0x12, 0x28, 0x0a, 0x24, 0x53, 0x54, 0x45, 0x41, 0x4d, 0x4c, 0x45, 0x41, 0x52, 0x4e, 0x5f, 0x49,
	0x4e, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x46,
	0x4f, 0x52, 0x42, 0x49, 0x44, 0x44, 0x45, 0x4e, 0x10, 0x05, 0x12, 0x30, 0x0a, 0x2c, 0x53, 0x54,
	0x45, 0x41, 0x4d, 0x4c, 0x45, 0x41, 0x52, 0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x45, 0x52, 0x45, 0x4e,
	0x43, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x10, 0x06, 0x12, 0x38, 0x0a, 0x34,
	0x53, 0x54, 0x45, 0x41, 0x4d, 0x4c, 0x45, 0x41, 0x52, 0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x45, 0x52,
	0x45, 0x4e, 0x43, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x44, 0x5f, 0x56, 0x45, 0x52,
	0x53, 0x49, 0x4f, 0x4e, 0x10, 0x07, 0x12, 0x30, 0x0a, 0x2c, 0x53, 0x54, 0x45, 0x41, 0x4d, 0x4c,
	0x45, 0x41, 0x52, 0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x5f, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x49, 0x44,
	0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x08, 0x32, 0x8c, 0x09, 0x0a, 0x0a, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x12, 0xc5, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2f,
	0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c,
	0x65, 0x61, 0x72, 0x6e, 0x5f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x30, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x4c, 0x82, 0xb5, 0x18, 0x48, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x20, 0x61, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x64, 0x65, 0x73, 0x63, 0x20, 0x28, 0x6f, 0x72,
	0x20, 0x66, 0x69, 0x6e, 0x64, 0x73, 0x20, 0x61, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x64, 0x65,
	0x73, 0x63, 0x20, 0x69, 0x66, 0x20, 0x69, 0x74, 0x27, 0x73, 0x20, 0x61, 0x6c, 0x72, 0x65, 0x61,
	0x64, 0x79, 0x20, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x29, 0x2e, 0x12,
	0x7e, 0x0a, 0x09, 0x43, 0x61, 0x63, 0x68, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x26, 0x2e, 0x64,
	0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61,
	0x72, 0x6e, 0x5f, 0x43, 0x61, 0x63, 0x68, 0x65, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20, 0x82,
	0xb5, 0x18, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x20, 0x61, 0x20, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x64, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x12,
	0x9d, 0x01, 0x0a, 0x0f, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x2c, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2d, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x2d, 0x82, 0xb5, 0x18, 0x29, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x64, 0x61, 0x74, 0x61,
	0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x12,
	0xc4, 0x01, 0x0a, 0x0e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2b, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2c, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x57, 0x82,
	0xb5, 0x18, 0x53, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x20, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x65, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x2c, 0x20, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x2c, 0x20, 0x61, 0x6e, 0x64,
	0x20, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x20, 0x69, 0x6e, 0x74, 0x6f, 0x20, 0x61, 0x20, 0x73, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x12, 0xd2, 0x01, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x48, 0x4d,
	0x41, 0x43, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x28, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x47, 0x65, 0x74,
	0x48, 0x4d, 0x41, 0x43, 0x4b, 0x65, 0x79, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x29, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x47, 0x65, 0x74, 0x48, 0x4d, 0x41, 0x43, 0x4b, 0x65,
	0x79, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6e, 0x82, 0xb5, 0x18,
	0x6a, 0x47, 0x65, 0x74, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x48, 0x4d, 0x41, 0x43, 0x20, 0x6b,
	0x65, 0x79, 0x73, 0x20, 0x6e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2c, 0x20, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x6d,
	0x2c, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0xac, 0x01, 0x0a, 0x09,
	0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x26, 0x2e, 0x64, 0x6f, 0x74, 0x61,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f,
	0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x27, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4e, 0x82, 0xb5, 0x18, 0x4a,
	0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x20, 0x75, 0x73, 0x69, 0x6e, 0x67,
	0x20, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x20, 0x64, 0x61, 0x74, 0x61, 0x2c, 0x20,
	0x6f, 0x72, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74,
	0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x6b, 0x65, 0x79, 0x2e, 0x1a, 0x4b, 0x82, 0xb5, 0x18, 0x47,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x73, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x64, 0x61, 0x74, 0x61, 0x2c, 0x20, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x2c, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x69, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x2e, 0x42, 0x25, 0x5a, 0x23, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x74, 0x61, 0x62, 0x75, 0x66, 0x66, 0x2f, 0x6d,
	0x61, 0x6e, 0x74, 0x61, 0x2f, 0x64, 0x6f, 0x74, 0x61, 0x3b, 0x64, 0x6f, 0x74, 0x61,
}

var (
	file_steammessages_steamlearn_steamworkssdk_proto_rawDescOnce sync.Once
	file_steammessages_steamlearn_steamworkssdk_proto_rawDescData = file_steammessages_steamlearn_steamworkssdk_proto_rawDesc
)

func file_steammessages_steamlearn_steamworkssdk_proto_rawDescGZIP() []byte {
	file_steammessages_steamlearn_steamworkssdk_proto_rawDescOnce.Do(func() {
		file_steammessages_steamlearn_steamworkssdk_proto_rawDescData = protoimpl.X.CompressGZIP(file_steammessages_steamlearn_steamworkssdk_proto_rawDescData)
	})
	return file_steammessages_steamlearn_steamworkssdk_proto_rawDescData
}

var file_steammessages_steamlearn_steamworkssdk_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_steammessages_steamlearn_steamworkssdk_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_steammessages_steamlearn_steamworkssdk_proto_goTypes = []interface{}{
	(ESteamLearnDataType)(0),                                                       // 0: dota.ESteamLearnDataType
	(ESteammLearnRegisterDataSourceResult)(0),                                      // 1: dota.ESteammLearnRegisterDataSourceResult
	(ESteamLearnCacheDataResult)(0),                                                // 2: dota.ESteamLearnCacheDataResult
	(ESteamLearnSnapshotProjectResult)(0),                                          // 3: dota.ESteamLearnSnapshotProjectResult
	(ESteamLearnGetHMACKeysResult)(0),                                              // 4: dota.ESteamLearnGetHMACKeysResult
	(ESteamLearnInferenceResult)(0),                                                // 5: dota.ESteamLearnInferenceResult
	(*CMsgSteamLearnDataSourceDescObject)(nil),                                     // 6: dota.CMsgSteamLearnDataSourceDescObject
	(*CMsgSteamLearnDataSourceDescElement)(nil),                                    // 7: dota.CMsgSteamLearnDataSourceDescElement
	(*CMsgSteamLearnDataSource)(nil),                                               // 8: dota.CMsgSteamLearnDataSource
	(*CMsgSteamLearnDataObject)(nil),                                               // 9: dota.CMsgSteamLearnDataObject
	(*CMsgSteamLearnDataElement)(nil),                                              // 10: dota.CMsgSteamLearnDataElement
	(*CMsgSteamLearnData)(nil),                                                     // 11: dota.CMsgSteamLearnData
	(*CMsgSteamLearnDataList)(nil),                                                 // 12: dota.CMsgSteamLearnDataList
	(*CMsgSteamLearn_AccessData)(nil),                                              // 13: dota.CMsgSteamLearn_AccessData
	(*CMsgSteamLearn_RegisterDataSource_Request)(nil),                              // 14: dota.CMsgSteamLearn_RegisterDataSource_Request
	(*CMsgSteamLearn_RegisterDataSource_Response)(nil),                             // 15: dota.CMsgSteamLearn_RegisterDataSource_Response
	(*CMsgSteamLearn_CacheData_Request)(nil),                                       // 16: dota.CMsgSteamLearn_CacheData_Request
	(*CMsgSteamLearn_CacheData_Response)(nil),                                      // 17: dota.CMsgSteamLearn_CacheData_Response
	(*CMsgSteamLearn_SnapshotProject_Request)(nil),                                 // 18: dota.CMsgSteamLearn_SnapshotProject_Request
	(*CMsgSteamLearn_SnapshotProject_Response)(nil),                                // 19: dota.CMsgSteamLearn_SnapshotProject_Response
	(*CMsgSteamLearn_BatchOperation_Request)(nil),                                  // 20: dota.CMsgSteamLearn_BatchOperation_Request
	(*CMsgSteamLearn_BatchOperation_Response)(nil),                                 // 21: dota.CMsgSteamLearn_BatchOperation_Response
	(*CMsgSteamLearnHMACKeys)(nil),                                                 // 22: dota.CMsgSteamLearnHMACKeys
	(*CMsgSteamLearn_GetHMACKeys_Request)(nil),                                     // 23: dota.CMsgSteamLearn_GetHMACKeys_Request
	(*CMsgSteamLearn_GetHMACKeys_Response)(nil),                                    // 24: dota.CMsgSteamLearn_GetHMACKeys_Response
	(*CMsgSteamLearn_Inference_Request)(nil),                                       // 25: dota.CMsgSteamLearn_Inference_Request
	(*CMsgSteamLearn_InferenceBackend_Response)(nil),                               // 26: dota.CMsgSteamLearn_InferenceBackend_Response
	(*CMsgSteamLearn_Inference_Response)(nil),                                      // 27: dota.CMsgSteamLearn_Inference_Response
	(*CMsgSteamLearnHMACKeys_CacheDataKeys)(nil),                                   // 28: dota.CMsgSteamLearnHMACKeys.CacheDataKeys
	(*CMsgSteamLearnHMACKeys_SnapshotProjectKeys)(nil),                             // 29: dota.CMsgSteamLearnHMACKeys.SnapshotProjectKeys
	(*CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput)(nil),      // 30: dota.CMsgSteamLearn_InferenceBackend_Response.BinaryCrossEntropyOutput
	(*CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput)(nil), // 31: dota.CMsgSteamLearn_InferenceBackend_Response.MutliBinaryCrossEntropyOutput
	(*CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput)(nil), // 32: dota.CMsgSteamLearn_InferenceBackend_Response.CategoricalCrossEntropyOutput
	(*CMsgSteamLearn_InferenceBackend_Response_Output)(nil),                        // 33: dota.CMsgSteamLearn_InferenceBackend_Response.Output
}
var file_steammessages_steamlearn_steamworkssdk_proto_depIdxs = []int32{
	7,  // 0: dota.CMsgSteamLearnDataSourceDescObject.elements:type_name -> dota.CMsgSteamLearnDataSourceDescElement
	0,  // 1: dota.CMsgSteamLearnDataSourceDescElement.data_type:type_name -> dota.ESteamLearnDataType
	6,  // 2: dota.CMsgSteamLearnDataSourceDescElement.object:type_name -> dota.CMsgSteamLearnDataSourceDescObject
	6,  // 3: dota.CMsgSteamLearnDataSource.structure:type_name -> dota.CMsgSteamLearnDataSourceDescObject
	10, // 4: dota.CMsgSteamLearnDataObject.elements:type_name -> dota.CMsgSteamLearnDataElement
	9,  // 5: dota.CMsgSteamLearnDataElement.data_objects:type_name -> dota.CMsgSteamLearnDataObject
	9,  // 6: dota.CMsgSteamLearnData.data_object:type_name -> dota.CMsgSteamLearnDataObject
	11, // 7: dota.CMsgSteamLearnDataList.data:type_name -> dota.CMsgSteamLearnData
	13, // 8: dota.CMsgSteamLearn_RegisterDataSource_Request.access_data:type_name -> dota.CMsgSteamLearn_AccessData
	8,  // 9: dota.CMsgSteamLearn_RegisterDataSource_Request.data_source:type_name -> dota.CMsgSteamLearnDataSource
	1,  // 10: dota.CMsgSteamLearn_RegisterDataSource_Response.result:type_name -> dota.ESteammLearnRegisterDataSourceResult
	8,  // 11: dota.CMsgSteamLearn_RegisterDataSource_Response.data_source:type_name -> dota.CMsgSteamLearnDataSource
	13, // 12: dota.CMsgSteamLearn_CacheData_Request.access_data:type_name -> dota.CMsgSteamLearn_AccessData
	11, // 13: dota.CMsgSteamLearn_CacheData_Request.data:type_name -> dota.CMsgSteamLearnData
	2,  // 14: dota.CMsgSteamLearn_CacheData_Response.cache_data_result:type_name -> dota.ESteamLearnCacheDataResult
	13, // 15: dota.CMsgSteamLearn_SnapshotProject_Request.access_data:type_name -> dota.CMsgSteamLearn_AccessData
	11, // 16: dota.CMsgSteamLearn_SnapshotProject_Request.data:type_name -> dota.CMsgSteamLearnData
	3,  // 17: dota.CMsgSteamLearn_SnapshotProject_Response.snapshot_result:type_name -> dota.ESteamLearnSnapshotProjectResult
	16, // 18: dota.CMsgSteamLearn_BatchOperation_Request.cache_data_requests:type_name -> dota.CMsgSteamLearn_CacheData_Request
	18, // 19: dota.CMsgSteamLearn_BatchOperation_Request.snapshot_requests:type_name -> dota.CMsgSteamLearn_SnapshotProject_Request
	17, // 20: dota.CMsgSteamLearn_BatchOperation_Response.cache_data_responses:type_name -> dota.CMsgSteamLearn_CacheData_Response
	19, // 21: dota.CMsgSteamLearn_BatchOperation_Response.snapshot_responses:type_name -> dota.CMsgSteamLearn_SnapshotProject_Response
	28, // 22: dota.CMsgSteamLearnHMACKeys.cache_data_keys:type_name -> dota.CMsgSteamLearnHMACKeys.CacheDataKeys
	29, // 23: dota.CMsgSteamLearnHMACKeys.snapshot_project_keys:type_name -> dota.CMsgSteamLearnHMACKeys.SnapshotProjectKeys
	4,  // 24: dota.CMsgSteamLearn_GetHMACKeys_Response.result:type_name -> dota.ESteamLearnGetHMACKeysResult
	22, // 25: dota.CMsgSteamLearn_GetHMACKeys_Response.keys:type_name -> dota.CMsgSteamLearnHMACKeys
	13, // 26: dota.CMsgSteamLearn_Inference_Request.access_data:type_name -> dota.CMsgSteamLearn_AccessData
	12, // 27: dota.CMsgSteamLearn_Inference_Request.data:type_name -> dota.CMsgSteamLearnDataList
	33, // 28: dota.CMsgSteamLearn_InferenceBackend_Response.outputs:type_name -> dota.CMsgSteamLearn_InferenceBackend_Response.Output
	5,  // 29: dota.CMsgSteamLearn_Inference_Response.inference_result:type_name -> dota.ESteamLearnInferenceResult
	26, // 30: dota.CMsgSteamLearn_Inference_Response.backend_response:type_name -> dota.CMsgSteamLearn_InferenceBackend_Response
	30, // 31: dota.CMsgSteamLearn_InferenceBackend_Response.Output.binary_crossentropy:type_name -> dota.CMsgSteamLearn_InferenceBackend_Response.BinaryCrossEntropyOutput
	32, // 32: dota.CMsgSteamLearn_InferenceBackend_Response.Output.categorical_crossentropy:type_name -> dota.CMsgSteamLearn_InferenceBackend_Response.CategoricalCrossEntropyOutput
	31, // 33: dota.CMsgSteamLearn_InferenceBackend_Response.Output.multi_binary_crossentropy:type_name -> dota.CMsgSteamLearn_InferenceBackend_Response.MutliBinaryCrossEntropyOutput
	14, // 34: dota.SteamLearn.RegisterDataSource:input_type -> dota.CMsgSteamLearn_RegisterDataSource_Request
	16, // 35: dota.SteamLearn.CacheData:input_type -> dota.CMsgSteamLearn_CacheData_Request
	18, // 36: dota.SteamLearn.SnapshotProject:input_type -> dota.CMsgSteamLearn_SnapshotProject_Request
	20, // 37: dota.SteamLearn.BatchOperation:input_type -> dota.CMsgSteamLearn_BatchOperation_Request
	23, // 38: dota.SteamLearn.GetHMACKeys:input_type -> dota.CMsgSteamLearn_GetHMACKeys_Request
	25, // 39: dota.SteamLearn.Inference:input_type -> dota.CMsgSteamLearn_Inference_Request
	15, // 40: dota.SteamLearn.RegisterDataSource:output_type -> dota.CMsgSteamLearn_RegisterDataSource_Response
	17, // 41: dota.SteamLearn.CacheData:output_type -> dota.CMsgSteamLearn_CacheData_Response
	19, // 42: dota.SteamLearn.SnapshotProject:output_type -> dota.CMsgSteamLearn_SnapshotProject_Response
	21, // 43: dota.SteamLearn.BatchOperation:output_type -> dota.CMsgSteamLearn_BatchOperation_Response
	24, // 44: dota.SteamLearn.GetHMACKeys:output_type -> dota.CMsgSteamLearn_GetHMACKeys_Response
	27, // 45: dota.SteamLearn.Inference:output_type -> dota.CMsgSteamLearn_Inference_Response
	40, // [40:46] is the sub-list for method output_type
	34, // [34:40] is the sub-list for method input_type
	34, // [34:34] is the sub-list for extension type_name
	34, // [34:34] is the sub-list for extension extendee
	0,  // [0:34] is the sub-list for field type_name
}

func init() { file_steammessages_steamlearn_steamworkssdk_proto_init() }
func file_steammessages_steamlearn_steamworkssdk_proto_init() {
	if File_steammessages_steamlearn_steamworkssdk_proto != nil {
		return
	}
	file_steammessages_unified_base_steamworkssdk_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_steammessages_steamlearn_steamworkssdk_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSteamLearnDataSourceDescObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamlearn_steamworkssdk_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSteamLearnDataSourceDescElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamlearn_steamworkssdk_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSteamLearnDataSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamlearn_steamworkssdk_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSteamLearnDataObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamlearn_steamworkssdk_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSteamLearnDataElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamlearn_steamworkssdk_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSteamLearnData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamlearn_steamworkssdk_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSteamLearnDataList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamlearn_steamworkssdk_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSteamLearn_AccessData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamlearn_steamworkssdk_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSteamLearn_RegisterDataSource_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamlearn_steamworkssdk_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSteamLearn_RegisterDataSource_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamlearn_steamworkssdk_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSteamLearn_CacheData_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamlearn_steamworkssdk_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSteamLearn_CacheData_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamlearn_steamworkssdk_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSteamLearn_SnapshotProject_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamlearn_steamworkssdk_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSteamLearn_SnapshotProject_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamlearn_steamworkssdk_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSteamLearn_BatchOperation_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamlearn_steamworkssdk_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSteamLearn_BatchOperation_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamlearn_steamworkssdk_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSteamLearnHMACKeys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamlearn_steamworkssdk_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSteamLearn_GetHMACKeys_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamlearn_steamworkssdk_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSteamLearn_GetHMACKeys_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamlearn_steamworkssdk_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSteamLearn_Inference_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamlearn_steamworkssdk_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSteamLearn_InferenceBackend_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamlearn_steamworkssdk_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSteamLearn_Inference_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamlearn_steamworkssdk_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSteamLearnHMACKeys_CacheDataKeys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamlearn_steamworkssdk_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSteamLearnHMACKeys_SnapshotProjectKeys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamlearn_steamworkssdk_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSteamLearn_InferenceBackend_Response_BinaryCrossEntropyOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamlearn_steamworkssdk_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSteamLearn_InferenceBackend_Response_MutliBinaryCrossEntropyOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamlearn_steamworkssdk_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSteamLearn_InferenceBackend_Response_CategoricalCrossEntropyOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamlearn_steamworkssdk_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSteamLearn_InferenceBackend_Response_Output); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_steammessages_steamlearn_steamworkssdk_proto_msgTypes[27].OneofWrappers = []interface{}{
		(*CMsgSteamLearn_InferenceBackend_Response_Output_BinaryCrossentropy)(nil),
		(*CMsgSteamLearn_InferenceBackend_Response_Output_CategoricalCrossentropy)(nil),
		(*CMsgSteamLearn_InferenceBackend_Response_Output_MultiBinaryCrossentropy)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_steammessages_steamlearn_steamworkssdk_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_steammessages_steamlearn_steamworkssdk_proto_goTypes,
		DependencyIndexes: file_steammessages_steamlearn_steamworkssdk_proto_depIdxs,
		EnumInfos:         file_steammessages_steamlearn_steamworkssdk_proto_enumTypes,
		MessageInfos:      file_steammessages_steamlearn_steamworkssdk_proto_msgTypes,
	}.Build()
	File_steammessages_steamlearn_steamworkssdk_proto = out.File
	file_steammessages_steamlearn_steamworkssdk_proto_rawDesc = nil
	file_steammessages_steamlearn_steamworkssdk_proto_goTypes = nil
	file_steammessages_steamlearn_steamworkssdk_proto_depIdxs = nil
}
