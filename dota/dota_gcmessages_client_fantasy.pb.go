// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.6.1
// source: dota_gcmessages_client_fantasy.proto

package dota

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type DOTA_2013PassportSelectionIndices int32

const (
	DOTA_2013PassportSelectionIndices_PP13_SEL_ALLSTAR_PLAYER_0    DOTA_2013PassportSelectionIndices = 0
	DOTA_2013PassportSelectionIndices_PP13_SEL_ALLSTAR_PLAYER_1    DOTA_2013PassportSelectionIndices = 1
	DOTA_2013PassportSelectionIndices_PP13_SEL_ALLSTAR_PLAYER_2    DOTA_2013PassportSelectionIndices = 2
	DOTA_2013PassportSelectionIndices_PP13_SEL_ALLSTAR_PLAYER_3    DOTA_2013PassportSelectionIndices = 3
	DOTA_2013PassportSelectionIndices_PP13_SEL_ALLSTAR_PLAYER_4    DOTA_2013PassportSelectionIndices = 4
	DOTA_2013PassportSelectionIndices_PP13_SEL_ALLSTAR_PLAYER_5    DOTA_2013PassportSelectionIndices = 5
	DOTA_2013PassportSelectionIndices_PP13_SEL_ALLSTAR_PLAYER_6    DOTA_2013PassportSelectionIndices = 6
	DOTA_2013PassportSelectionIndices_PP13_SEL_ALLSTAR_PLAYER_7    DOTA_2013PassportSelectionIndices = 7
	DOTA_2013PassportSelectionIndices_PP13_SEL_ALLSTAR_PLAYER_8    DOTA_2013PassportSelectionIndices = 8
	DOTA_2013PassportSelectionIndices_PP13_SEL_ALLSTAR_PLAYER_9    DOTA_2013PassportSelectionIndices = 9
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_WEST_0     DOTA_2013PassportSelectionIndices = 10
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_WEST_1     DOTA_2013PassportSelectionIndices = 11
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_WEST_2     DOTA_2013PassportSelectionIndices = 12
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_WEST_3     DOTA_2013PassportSelectionIndices = 13
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_WEST_4     DOTA_2013PassportSelectionIndices = 14
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_WEST_5     DOTA_2013PassportSelectionIndices = 15
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_WEST_6     DOTA_2013PassportSelectionIndices = 16
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_WEST_7     DOTA_2013PassportSelectionIndices = 17
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_WEST_8     DOTA_2013PassportSelectionIndices = 18
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_WEST_9     DOTA_2013PassportSelectionIndices = 19
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_WEST_10    DOTA_2013PassportSelectionIndices = 20
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_WEST_11    DOTA_2013PassportSelectionIndices = 21
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_WEST_12    DOTA_2013PassportSelectionIndices = 22
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_WEST_13    DOTA_2013PassportSelectionIndices = 23
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_WEST_14    DOTA_2013PassportSelectionIndices = 24
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_EAST_0     DOTA_2013PassportSelectionIndices = 25
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_EAST_1     DOTA_2013PassportSelectionIndices = 26
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_EAST_2     DOTA_2013PassportSelectionIndices = 27
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_EAST_3     DOTA_2013PassportSelectionIndices = 28
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_EAST_4     DOTA_2013PassportSelectionIndices = 29
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_EAST_5     DOTA_2013PassportSelectionIndices = 30
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_EAST_6     DOTA_2013PassportSelectionIndices = 31
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_EAST_7     DOTA_2013PassportSelectionIndices = 32
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_EAST_8     DOTA_2013PassportSelectionIndices = 33
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_EAST_9     DOTA_2013PassportSelectionIndices = 34
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_EAST_10    DOTA_2013PassportSelectionIndices = 35
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_EAST_11    DOTA_2013PassportSelectionIndices = 36
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_EAST_12    DOTA_2013PassportSelectionIndices = 37
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_EAST_13    DOTA_2013PassportSelectionIndices = 38
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_EAST_14    DOTA_2013PassportSelectionIndices = 39
	DOTA_2013PassportSelectionIndices_PP13_SEL_TEAMCUP_TEAM        DOTA_2013PassportSelectionIndices = 40
	DOTA_2013PassportSelectionIndices_PP13_SEL_TEAMCUP_PLAYER      DOTA_2013PassportSelectionIndices = 41
	DOTA_2013PassportSelectionIndices_PP13_SEL_TEAMCUP_TEAM_LOCK   DOTA_2013PassportSelectionIndices = 42
	DOTA_2013PassportSelectionIndices_PP13_SEL_TEAMCUP_PLAYER_LOCK DOTA_2013PassportSelectionIndices = 43
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_0         DOTA_2013PassportSelectionIndices = 44
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_1         DOTA_2013PassportSelectionIndices = 45
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_2         DOTA_2013PassportSelectionIndices = 46
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_3         DOTA_2013PassportSelectionIndices = 47
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_4         DOTA_2013PassportSelectionIndices = 48
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_5         DOTA_2013PassportSelectionIndices = 49
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_6         DOTA_2013PassportSelectionIndices = 50
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_7         DOTA_2013PassportSelectionIndices = 51
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_8         DOTA_2013PassportSelectionIndices = 52
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_9         DOTA_2013PassportSelectionIndices = 53
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_10        DOTA_2013PassportSelectionIndices = 54
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_11        DOTA_2013PassportSelectionIndices = 55
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_12        DOTA_2013PassportSelectionIndices = 56
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_13        DOTA_2013PassportSelectionIndices = 57
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_14        DOTA_2013PassportSelectionIndices = 58
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_15        DOTA_2013PassportSelectionIndices = 59
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_16        DOTA_2013PassportSelectionIndices = 60
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_17        DOTA_2013PassportSelectionIndices = 61
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_18        DOTA_2013PassportSelectionIndices = 62
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_19        DOTA_2013PassportSelectionIndices = 63
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_20        DOTA_2013PassportSelectionIndices = 64
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_21        DOTA_2013PassportSelectionIndices = 65
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_22        DOTA_2013PassportSelectionIndices = 66
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_23        DOTA_2013PassportSelectionIndices = 67
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_24        DOTA_2013PassportSelectionIndices = 68
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_25        DOTA_2013PassportSelectionIndices = 69
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_26        DOTA_2013PassportSelectionIndices = 70
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_27        DOTA_2013PassportSelectionIndices = 71
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_28        DOTA_2013PassportSelectionIndices = 72
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_29        DOTA_2013PassportSelectionIndices = 73
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_30        DOTA_2013PassportSelectionIndices = 74
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_31        DOTA_2013PassportSelectionIndices = 75
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_32        DOTA_2013PassportSelectionIndices = 76
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_33        DOTA_2013PassportSelectionIndices = 77
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_34        DOTA_2013PassportSelectionIndices = 78
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_35        DOTA_2013PassportSelectionIndices = 79
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_36        DOTA_2013PassportSelectionIndices = 80
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_37        DOTA_2013PassportSelectionIndices = 81
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_38        DOTA_2013PassportSelectionIndices = 82
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_39        DOTA_2013PassportSelectionIndices = 83
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_40        DOTA_2013PassportSelectionIndices = 84
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_41        DOTA_2013PassportSelectionIndices = 85
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_42        DOTA_2013PassportSelectionIndices = 86
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_43        DOTA_2013PassportSelectionIndices = 87
	DOTA_2013PassportSelectionIndices_PP13_SEL_SOLO_0              DOTA_2013PassportSelectionIndices = 88
	DOTA_2013PassportSelectionIndices_PP13_SEL_SOLO_1              DOTA_2013PassportSelectionIndices = 89
	DOTA_2013PassportSelectionIndices_PP13_SEL_SOLO_2              DOTA_2013PassportSelectionIndices = 90
	DOTA_2013PassportSelectionIndices_PP13_SEL_SOLO_3              DOTA_2013PassportSelectionIndices = 91
	DOTA_2013PassportSelectionIndices_PP13_SEL_SOLO_4              DOTA_2013PassportSelectionIndices = 92
	DOTA_2013PassportSelectionIndices_PP13_SEL_SOLO_5              DOTA_2013PassportSelectionIndices = 93
	DOTA_2013PassportSelectionIndices_PP13_SEL_SOLO_6              DOTA_2013PassportSelectionIndices = 94
	DOTA_2013PassportSelectionIndices_PP13_SEL_SOLO_7              DOTA_2013PassportSelectionIndices = 95
)

// Enum value maps for DOTA_2013PassportSelectionIndices.
var (
	DOTA_2013PassportSelectionIndices_name = map[int32]string{
		0:  "PP13_SEL_ALLSTAR_PLAYER_0",
		1:  "PP13_SEL_ALLSTAR_PLAYER_1",
		2:  "PP13_SEL_ALLSTAR_PLAYER_2",
		3:  "PP13_SEL_ALLSTAR_PLAYER_3",
		4:  "PP13_SEL_ALLSTAR_PLAYER_4",
		5:  "PP13_SEL_ALLSTAR_PLAYER_5",
		6:  "PP13_SEL_ALLSTAR_PLAYER_6",
		7:  "PP13_SEL_ALLSTAR_PLAYER_7",
		8:  "PP13_SEL_ALLSTAR_PLAYER_8",
		9:  "PP13_SEL_ALLSTAR_PLAYER_9",
		10: "PP13_SEL_QUALPRED_WEST_0",
		11: "PP13_SEL_QUALPRED_WEST_1",
		12: "PP13_SEL_QUALPRED_WEST_2",
		13: "PP13_SEL_QUALPRED_WEST_3",
		14: "PP13_SEL_QUALPRED_WEST_4",
		15: "PP13_SEL_QUALPRED_WEST_5",
		16: "PP13_SEL_QUALPRED_WEST_6",
		17: "PP13_SEL_QUALPRED_WEST_7",
		18: "PP13_SEL_QUALPRED_WEST_8",
		19: "PP13_SEL_QUALPRED_WEST_9",
		20: "PP13_SEL_QUALPRED_WEST_10",
		21: "PP13_SEL_QUALPRED_WEST_11",
		22: "PP13_SEL_QUALPRED_WEST_12",
		23: "PP13_SEL_QUALPRED_WEST_13",
		24: "PP13_SEL_QUALPRED_WEST_14",
		25: "PP13_SEL_QUALPRED_EAST_0",
		26: "PP13_SEL_QUALPRED_EAST_1",
		27: "PP13_SEL_QUALPRED_EAST_2",
		28: "PP13_SEL_QUALPRED_EAST_3",
		29: "PP13_SEL_QUALPRED_EAST_4",
		30: "PP13_SEL_QUALPRED_EAST_5",
		31: "PP13_SEL_QUALPRED_EAST_6",
		32: "PP13_SEL_QUALPRED_EAST_7",
		33: "PP13_SEL_QUALPRED_EAST_8",
		34: "PP13_SEL_QUALPRED_EAST_9",
		35: "PP13_SEL_QUALPRED_EAST_10",
		36: "PP13_SEL_QUALPRED_EAST_11",
		37: "PP13_SEL_QUALPRED_EAST_12",
		38: "PP13_SEL_QUALPRED_EAST_13",
		39: "PP13_SEL_QUALPRED_EAST_14",
		40: "PP13_SEL_TEAMCUP_TEAM",
		41: "PP13_SEL_TEAMCUP_PLAYER",
		42: "PP13_SEL_TEAMCUP_TEAM_LOCK",
		43: "PP13_SEL_TEAMCUP_PLAYER_LOCK",
		44: "PP13_SEL_EVENTPRED_0",
		45: "PP13_SEL_EVENTPRED_1",
		46: "PP13_SEL_EVENTPRED_2",
		47: "PP13_SEL_EVENTPRED_3",
		48: "PP13_SEL_EVENTPRED_4",
		49: "PP13_SEL_EVENTPRED_5",
		50: "PP13_SEL_EVENTPRED_6",
		51: "PP13_SEL_EVENTPRED_7",
		52: "PP13_SEL_EVENTPRED_8",
		53: "PP13_SEL_EVENTPRED_9",
		54: "PP13_SEL_EVENTPRED_10",
		55: "PP13_SEL_EVENTPRED_11",
		56: "PP13_SEL_EVENTPRED_12",
		57: "PP13_SEL_EVENTPRED_13",
		58: "PP13_SEL_EVENTPRED_14",
		59: "PP13_SEL_EVENTPRED_15",
		60: "PP13_SEL_EVENTPRED_16",
		61: "PP13_SEL_EVENTPRED_17",
		62: "PP13_SEL_EVENTPRED_18",
		63: "PP13_SEL_EVENTPRED_19",
		64: "PP13_SEL_EVENTPRED_20",
		65: "PP13_SEL_EVENTPRED_21",
		66: "PP13_SEL_EVENTPRED_22",
		67: "PP13_SEL_EVENTPRED_23",
		68: "PP13_SEL_EVENTPRED_24",
		69: "PP13_SEL_EVENTPRED_25",
		70: "PP13_SEL_EVENTPRED_26",
		71: "PP13_SEL_EVENTPRED_27",
		72: "PP13_SEL_EVENTPRED_28",
		73: "PP13_SEL_EVENTPRED_29",
		74: "PP13_SEL_EVENTPRED_30",
		75: "PP13_SEL_EVENTPRED_31",
		76: "PP13_SEL_EVENTPRED_32",
		77: "PP13_SEL_EVENTPRED_33",
		78: "PP13_SEL_EVENTPRED_34",
		79: "PP13_SEL_EVENTPRED_35",
		80: "PP13_SEL_EVENTPRED_36",
		81: "PP13_SEL_EVENTPRED_37",
		82: "PP13_SEL_EVENTPRED_38",
		83: "PP13_SEL_EVENTPRED_39",
		84: "PP13_SEL_EVENTPRED_40",
		85: "PP13_SEL_EVENTPRED_41",
		86: "PP13_SEL_EVENTPRED_42",
		87: "PP13_SEL_EVENTPRED_43",
		88: "PP13_SEL_SOLO_0",
		89: "PP13_SEL_SOLO_1",
		90: "PP13_SEL_SOLO_2",
		91: "PP13_SEL_SOLO_3",
		92: "PP13_SEL_SOLO_4",
		93: "PP13_SEL_SOLO_5",
		94: "PP13_SEL_SOLO_6",
		95: "PP13_SEL_SOLO_7",
	}
	DOTA_2013PassportSelectionIndices_value = map[string]int32{
		"PP13_SEL_ALLSTAR_PLAYER_0":    0,
		"PP13_SEL_ALLSTAR_PLAYER_1":    1,
		"PP13_SEL_ALLSTAR_PLAYER_2":    2,
		"PP13_SEL_ALLSTAR_PLAYER_3":    3,
		"PP13_SEL_ALLSTAR_PLAYER_4":    4,
		"PP13_SEL_ALLSTAR_PLAYER_5":    5,
		"PP13_SEL_ALLSTAR_PLAYER_6":    6,
		"PP13_SEL_ALLSTAR_PLAYER_7":    7,
		"PP13_SEL_ALLSTAR_PLAYER_8":    8,
		"PP13_SEL_ALLSTAR_PLAYER_9":    9,
		"PP13_SEL_QUALPRED_WEST_0":     10,
		"PP13_SEL_QUALPRED_WEST_1":     11,
		"PP13_SEL_QUALPRED_WEST_2":     12,
		"PP13_SEL_QUALPRED_WEST_3":     13,
		"PP13_SEL_QUALPRED_WEST_4":     14,
		"PP13_SEL_QUALPRED_WEST_5":     15,
		"PP13_SEL_QUALPRED_WEST_6":     16,
		"PP13_SEL_QUALPRED_WEST_7":     17,
		"PP13_SEL_QUALPRED_WEST_8":     18,
		"PP13_SEL_QUALPRED_WEST_9":     19,
		"PP13_SEL_QUALPRED_WEST_10":    20,
		"PP13_SEL_QUALPRED_WEST_11":    21,
		"PP13_SEL_QUALPRED_WEST_12":    22,
		"PP13_SEL_QUALPRED_WEST_13":    23,
		"PP13_SEL_QUALPRED_WEST_14":    24,
		"PP13_SEL_QUALPRED_EAST_0":     25,
		"PP13_SEL_QUALPRED_EAST_1":     26,
		"PP13_SEL_QUALPRED_EAST_2":     27,
		"PP13_SEL_QUALPRED_EAST_3":     28,
		"PP13_SEL_QUALPRED_EAST_4":     29,
		"PP13_SEL_QUALPRED_EAST_5":     30,
		"PP13_SEL_QUALPRED_EAST_6":     31,
		"PP13_SEL_QUALPRED_EAST_7":     32,
		"PP13_SEL_QUALPRED_EAST_8":     33,
		"PP13_SEL_QUALPRED_EAST_9":     34,
		"PP13_SEL_QUALPRED_EAST_10":    35,
		"PP13_SEL_QUALPRED_EAST_11":    36,
		"PP13_SEL_QUALPRED_EAST_12":    37,
		"PP13_SEL_QUALPRED_EAST_13":    38,
		"PP13_SEL_QUALPRED_EAST_14":    39,
		"PP13_SEL_TEAMCUP_TEAM":        40,
		"PP13_SEL_TEAMCUP_PLAYER":      41,
		"PP13_SEL_TEAMCUP_TEAM_LOCK":   42,
		"PP13_SEL_TEAMCUP_PLAYER_LOCK": 43,
		"PP13_SEL_EVENTPRED_0":         44,
		"PP13_SEL_EVENTPRED_1":         45,
		"PP13_SEL_EVENTPRED_2":         46,
		"PP13_SEL_EVENTPRED_3":         47,
		"PP13_SEL_EVENTPRED_4":         48,
		"PP13_SEL_EVENTPRED_5":         49,
		"PP13_SEL_EVENTPRED_6":         50,
		"PP13_SEL_EVENTPRED_7":         51,
		"PP13_SEL_EVENTPRED_8":         52,
		"PP13_SEL_EVENTPRED_9":         53,
		"PP13_SEL_EVENTPRED_10":        54,
		"PP13_SEL_EVENTPRED_11":        55,
		"PP13_SEL_EVENTPRED_12":        56,
		"PP13_SEL_EVENTPRED_13":        57,
		"PP13_SEL_EVENTPRED_14":        58,
		"PP13_SEL_EVENTPRED_15":        59,
		"PP13_SEL_EVENTPRED_16":        60,
		"PP13_SEL_EVENTPRED_17":        61,
		"PP13_SEL_EVENTPRED_18":        62,
		"PP13_SEL_EVENTPRED_19":        63,
		"PP13_SEL_EVENTPRED_20":        64,
		"PP13_SEL_EVENTPRED_21":        65,
		"PP13_SEL_EVENTPRED_22":        66,
		"PP13_SEL_EVENTPRED_23":        67,
		"PP13_SEL_EVENTPRED_24":        68,
		"PP13_SEL_EVENTPRED_25":        69,
		"PP13_SEL_EVENTPRED_26":        70,
		"PP13_SEL_EVENTPRED_27":        71,
		"PP13_SEL_EVENTPRED_28":        72,
		"PP13_SEL_EVENTPRED_29":        73,
		"PP13_SEL_EVENTPRED_30":        74,
		"PP13_SEL_EVENTPRED_31":        75,
		"PP13_SEL_EVENTPRED_32":        76,
		"PP13_SEL_EVENTPRED_33":        77,
		"PP13_SEL_EVENTPRED_34":        78,
		"PP13_SEL_EVENTPRED_35":        79,
		"PP13_SEL_EVENTPRED_36":        80,
		"PP13_SEL_EVENTPRED_37":        81,
		"PP13_SEL_EVENTPRED_38":        82,
		"PP13_SEL_EVENTPRED_39":        83,
		"PP13_SEL_EVENTPRED_40":        84,
		"PP13_SEL_EVENTPRED_41":        85,
		"PP13_SEL_EVENTPRED_42":        86,
		"PP13_SEL_EVENTPRED_43":        87,
		"PP13_SEL_SOLO_0":              88,
		"PP13_SEL_SOLO_1":              89,
		"PP13_SEL_SOLO_2":              90,
		"PP13_SEL_SOLO_3":              91,
		"PP13_SEL_SOLO_4":              92,
		"PP13_SEL_SOLO_5":              93,
		"PP13_SEL_SOLO_6":              94,
		"PP13_SEL_SOLO_7":              95,
	}
)

func (x DOTA_2013PassportSelectionIndices) Enum() *DOTA_2013PassportSelectionIndices {
	p := new(DOTA_2013PassportSelectionIndices)
	*p = x
	return p
}

func (x DOTA_2013PassportSelectionIndices) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DOTA_2013PassportSelectionIndices) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_fantasy_proto_enumTypes[0].Descriptor()
}

func (DOTA_2013PassportSelectionIndices) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_fantasy_proto_enumTypes[0]
}

func (x DOTA_2013PassportSelectionIndices) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DOTA_2013PassportSelectionIndices) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DOTA_2013PassportSelectionIndices(num)
	return nil
}

// Deprecated: Use DOTA_2013PassportSelectionIndices.Descriptor instead.
func (DOTA_2013PassportSelectionIndices) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{0}
}

type CMsgDOTACreateFantasyLeagueResponse_EResult int32

const (
	CMsgDOTACreateFantasyLeagueResponse_SUCCESS                  CMsgDOTACreateFantasyLeagueResponse_EResult = 0
	CMsgDOTACreateFantasyLeagueResponse_ERROR_UNSPECIFIED        CMsgDOTACreateFantasyLeagueResponse_EResult = 1
	CMsgDOTACreateFantasyLeagueResponse_ERROR_TOO_MANY_LEAGUES   CMsgDOTACreateFantasyLeagueResponse_EResult = 2
	CMsgDOTACreateFantasyLeagueResponse_ERROR_INVALID_TEAM_COUNT CMsgDOTACreateFantasyLeagueResponse_EResult = 3
	CMsgDOTACreateFantasyLeagueResponse_ERROR_CREATION_DISABLED  CMsgDOTACreateFantasyLeagueResponse_EResult = 4
)

// Enum value maps for CMsgDOTACreateFantasyLeagueResponse_EResult.
var (
	CMsgDOTACreateFantasyLeagueResponse_EResult_name = map[int32]string{
		0: "SUCCESS",
		1: "ERROR_UNSPECIFIED",
		2: "ERROR_TOO_MANY_LEAGUES",
		3: "ERROR_INVALID_TEAM_COUNT",
		4: "ERROR_CREATION_DISABLED",
	}
	CMsgDOTACreateFantasyLeagueResponse_EResult_value = map[string]int32{
		"SUCCESS":                  0,
		"ERROR_UNSPECIFIED":        1,
		"ERROR_TOO_MANY_LEAGUES":   2,
		"ERROR_INVALID_TEAM_COUNT": 3,
		"ERROR_CREATION_DISABLED":  4,
	}
)

func (x CMsgDOTACreateFantasyLeagueResponse_EResult) Enum() *CMsgDOTACreateFantasyLeagueResponse_EResult {
	p := new(CMsgDOTACreateFantasyLeagueResponse_EResult)
	*p = x
	return p
}

func (x CMsgDOTACreateFantasyLeagueResponse_EResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgDOTACreateFantasyLeagueResponse_EResult) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_fantasy_proto_enumTypes[1].Descriptor()
}

func (CMsgDOTACreateFantasyLeagueResponse_EResult) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_fantasy_proto_enumTypes[1]
}

func (x CMsgDOTACreateFantasyLeagueResponse_EResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgDOTACreateFantasyLeagueResponse_EResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgDOTACreateFantasyLeagueResponse_EResult(num)
	return nil
}

// Deprecated: Use CMsgDOTACreateFantasyLeagueResponse_EResult.Descriptor instead.
func (CMsgDOTACreateFantasyLeagueResponse_EResult) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{5, 0}
}

type CMsgDOTAFantasyLeagueEditInfoResponse_EResult int32

const (
	CMsgDOTAFantasyLeagueEditInfoResponse_SUCCESS             CMsgDOTAFantasyLeagueEditInfoResponse_EResult = 0
	CMsgDOTAFantasyLeagueEditInfoResponse_ERROR_UNSPECIFIED   CMsgDOTAFantasyLeagueEditInfoResponse_EResult = 1
	CMsgDOTAFantasyLeagueEditInfoResponse_ERROR_NO_PERMISSION CMsgDOTAFantasyLeagueEditInfoResponse_EResult = 2
)

// Enum value maps for CMsgDOTAFantasyLeagueEditInfoResponse_EResult.
var (
	CMsgDOTAFantasyLeagueEditInfoResponse_EResult_name = map[int32]string{
		0: "SUCCESS",
		1: "ERROR_UNSPECIFIED",
		2: "ERROR_NO_PERMISSION",
	}
	CMsgDOTAFantasyLeagueEditInfoResponse_EResult_value = map[string]int32{
		"SUCCESS":             0,
		"ERROR_UNSPECIFIED":   1,
		"ERROR_NO_PERMISSION": 2,
	}
)

func (x CMsgDOTAFantasyLeagueEditInfoResponse_EResult) Enum() *CMsgDOTAFantasyLeagueEditInfoResponse_EResult {
	p := new(CMsgDOTAFantasyLeagueEditInfoResponse_EResult)
	*p = x
	return p
}

func (x CMsgDOTAFantasyLeagueEditInfoResponse_EResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgDOTAFantasyLeagueEditInfoResponse_EResult) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_fantasy_proto_enumTypes[2].Descriptor()
}

func (CMsgDOTAFantasyLeagueEditInfoResponse_EResult) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_fantasy_proto_enumTypes[2]
}

func (x CMsgDOTAFantasyLeagueEditInfoResponse_EResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgDOTAFantasyLeagueEditInfoResponse_EResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgDOTAFantasyLeagueEditInfoResponse_EResult(num)
	return nil
}

// Deprecated: Use CMsgDOTAFantasyLeagueEditInfoResponse_EResult.Descriptor instead.
func (CMsgDOTAFantasyLeagueEditInfoResponse_EResult) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{9, 0}
}

type CMsgDOTAFantasyLeagueFindResponse_EResult int32

const (
	CMsgDOTAFantasyLeagueFindResponse_SUCCESS                CMsgDOTAFantasyLeagueFindResponse_EResult = 0
	CMsgDOTAFantasyLeagueFindResponse_ERROR_LEAGUE_NOT_FOUND CMsgDOTAFantasyLeagueFindResponse_EResult = 1
	CMsgDOTAFantasyLeagueFindResponse_ERROR_BAD_PASSWORD     CMsgDOTAFantasyLeagueFindResponse_EResult = 2
	CMsgDOTAFantasyLeagueFindResponse_ERROR_UNSPECIFIED      CMsgDOTAFantasyLeagueFindResponse_EResult = 3
	CMsgDOTAFantasyLeagueFindResponse_ERROR_FULL             CMsgDOTAFantasyLeagueFindResponse_EResult = 4
	CMsgDOTAFantasyLeagueFindResponse_ERROR_ALREADY_MEMBER   CMsgDOTAFantasyLeagueFindResponse_EResult = 5
	CMsgDOTAFantasyLeagueFindResponse_ERROR_LEAGUE_LOCKED    CMsgDOTAFantasyLeagueFindResponse_EResult = 6
)

// Enum value maps for CMsgDOTAFantasyLeagueFindResponse_EResult.
var (
	CMsgDOTAFantasyLeagueFindResponse_EResult_name = map[int32]string{
		0: "SUCCESS",
		1: "ERROR_LEAGUE_NOT_FOUND",
		2: "ERROR_BAD_PASSWORD",
		3: "ERROR_UNSPECIFIED",
		4: "ERROR_FULL",
		5: "ERROR_ALREADY_MEMBER",
		6: "ERROR_LEAGUE_LOCKED",
	}
	CMsgDOTAFantasyLeagueFindResponse_EResult_value = map[string]int32{
		"SUCCESS":                0,
		"ERROR_LEAGUE_NOT_FOUND": 1,
		"ERROR_BAD_PASSWORD":     2,
		"ERROR_UNSPECIFIED":      3,
		"ERROR_FULL":             4,
		"ERROR_ALREADY_MEMBER":   5,
		"ERROR_LEAGUE_LOCKED":    6,
	}
)

func (x CMsgDOTAFantasyLeagueFindResponse_EResult) Enum() *CMsgDOTAFantasyLeagueFindResponse_EResult {
	p := new(CMsgDOTAFantasyLeagueFindResponse_EResult)
	*p = x
	return p
}

func (x CMsgDOTAFantasyLeagueFindResponse_EResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgDOTAFantasyLeagueFindResponse_EResult) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_fantasy_proto_enumTypes[3].Descriptor()
}

func (CMsgDOTAFantasyLeagueFindResponse_EResult) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_fantasy_proto_enumTypes[3]
}

func (x CMsgDOTAFantasyLeagueFindResponse_EResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgDOTAFantasyLeagueFindResponse_EResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgDOTAFantasyLeagueFindResponse_EResult(num)
	return nil
}

// Deprecated: Use CMsgDOTAFantasyLeagueFindResponse_EResult.Descriptor instead.
func (CMsgDOTAFantasyLeagueFindResponse_EResult) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{11, 0}
}

type CMsgDOTAFantasyLeagueInfoResponse_EResult int32

const (
	CMsgDOTAFantasyLeagueInfoResponse_SUCCESS             CMsgDOTAFantasyLeagueInfoResponse_EResult = 0
	CMsgDOTAFantasyLeagueInfoResponse_ERROR_UNSPECIFIED   CMsgDOTAFantasyLeagueInfoResponse_EResult = 1
	CMsgDOTAFantasyLeagueInfoResponse_ERROR_BAD_LEAGUE_ID CMsgDOTAFantasyLeagueInfoResponse_EResult = 2
)

// Enum value maps for CMsgDOTAFantasyLeagueInfoResponse_EResult.
var (
	CMsgDOTAFantasyLeagueInfoResponse_EResult_name = map[int32]string{
		0: "SUCCESS",
		1: "ERROR_UNSPECIFIED",
		2: "ERROR_BAD_LEAGUE_ID",
	}
	CMsgDOTAFantasyLeagueInfoResponse_EResult_value = map[string]int32{
		"SUCCESS":             0,
		"ERROR_UNSPECIFIED":   1,
		"ERROR_BAD_LEAGUE_ID": 2,
	}
)

func (x CMsgDOTAFantasyLeagueInfoResponse_EResult) Enum() *CMsgDOTAFantasyLeagueInfoResponse_EResult {
	p := new(CMsgDOTAFantasyLeagueInfoResponse_EResult)
	*p = x
	return p
}

func (x CMsgDOTAFantasyLeagueInfoResponse_EResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgDOTAFantasyLeagueInfoResponse_EResult) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_fantasy_proto_enumTypes[4].Descriptor()
}

func (CMsgDOTAFantasyLeagueInfoResponse_EResult) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_fantasy_proto_enumTypes[4]
}

func (x CMsgDOTAFantasyLeagueInfoResponse_EResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgDOTAFantasyLeagueInfoResponse_EResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgDOTAFantasyLeagueInfoResponse_EResult(num)
	return nil
}

// Deprecated: Use CMsgDOTAFantasyLeagueInfoResponse_EResult.Descriptor instead.
func (CMsgDOTAFantasyLeagueInfoResponse_EResult) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{13, 0}
}

type CMsgDOTAFantasyLeagueMatchupsResponse_EResult int32

const (
	CMsgDOTAFantasyLeagueMatchupsResponse_SUCCESS             CMsgDOTAFantasyLeagueMatchupsResponse_EResult = 0
	CMsgDOTAFantasyLeagueMatchupsResponse_ERROR_UNSPECIFIED   CMsgDOTAFantasyLeagueMatchupsResponse_EResult = 1
	CMsgDOTAFantasyLeagueMatchupsResponse_ERROR_BAD_LEAGUE_ID CMsgDOTAFantasyLeagueMatchupsResponse_EResult = 2
	CMsgDOTAFantasyLeagueMatchupsResponse_ERROR_NO_PERMISSION CMsgDOTAFantasyLeagueMatchupsResponse_EResult = 3
)

// Enum value maps for CMsgDOTAFantasyLeagueMatchupsResponse_EResult.
var (
	CMsgDOTAFantasyLeagueMatchupsResponse_EResult_name = map[int32]string{
		0: "SUCCESS",
		1: "ERROR_UNSPECIFIED",
		2: "ERROR_BAD_LEAGUE_ID",
		3: "ERROR_NO_PERMISSION",
	}
	CMsgDOTAFantasyLeagueMatchupsResponse_EResult_value = map[string]int32{
		"SUCCESS":             0,
		"ERROR_UNSPECIFIED":   1,
		"ERROR_BAD_LEAGUE_ID": 2,
		"ERROR_NO_PERMISSION": 3,
	}
)

func (x CMsgDOTAFantasyLeagueMatchupsResponse_EResult) Enum() *CMsgDOTAFantasyLeagueMatchupsResponse_EResult {
	p := new(CMsgDOTAFantasyLeagueMatchupsResponse_EResult)
	*p = x
	return p
}

func (x CMsgDOTAFantasyLeagueMatchupsResponse_EResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgDOTAFantasyLeagueMatchupsResponse_EResult) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_fantasy_proto_enumTypes[5].Descriptor()
}

func (CMsgDOTAFantasyLeagueMatchupsResponse_EResult) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_fantasy_proto_enumTypes[5]
}

func (x CMsgDOTAFantasyLeagueMatchupsResponse_EResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgDOTAFantasyLeagueMatchupsResponse_EResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgDOTAFantasyLeagueMatchupsResponse_EResult(num)
	return nil
}

// Deprecated: Use CMsgDOTAFantasyLeagueMatchupsResponse_EResult.Descriptor instead.
func (CMsgDOTAFantasyLeagueMatchupsResponse_EResult) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{15, 0}
}

type CMsgDOTAEditFantasyTeamResponse_EResult int32

const (
	CMsgDOTAEditFantasyTeamResponse_SUCCESS                  CMsgDOTAEditFantasyTeamResponse_EResult = 0
	CMsgDOTAEditFantasyTeamResponse_ERROR_UNSPECIFIED        CMsgDOTAEditFantasyTeamResponse_EResult = 1
	CMsgDOTAEditFantasyTeamResponse_ERROR_INVALID_TEAM_INFO  CMsgDOTAEditFantasyTeamResponse_EResult = 2
	CMsgDOTAEditFantasyTeamResponse_ERROR_NAME_ALREADY_TAKEN CMsgDOTAEditFantasyTeamResponse_EResult = 3
	CMsgDOTAEditFantasyTeamResponse_ERROR_NO_PERMISSION      CMsgDOTAEditFantasyTeamResponse_EResult = 4
)

// Enum value maps for CMsgDOTAEditFantasyTeamResponse_EResult.
var (
	CMsgDOTAEditFantasyTeamResponse_EResult_name = map[int32]string{
		0: "SUCCESS",
		1: "ERROR_UNSPECIFIED",
		2: "ERROR_INVALID_TEAM_INFO",
		3: "ERROR_NAME_ALREADY_TAKEN",
		4: "ERROR_NO_PERMISSION",
	}
	CMsgDOTAEditFantasyTeamResponse_EResult_value = map[string]int32{
		"SUCCESS":                  0,
		"ERROR_UNSPECIFIED":        1,
		"ERROR_INVALID_TEAM_INFO":  2,
		"ERROR_NAME_ALREADY_TAKEN": 3,
		"ERROR_NO_PERMISSION":      4,
	}
)

func (x CMsgDOTAEditFantasyTeamResponse_EResult) Enum() *CMsgDOTAEditFantasyTeamResponse_EResult {
	p := new(CMsgDOTAEditFantasyTeamResponse_EResult)
	*p = x
	return p
}

func (x CMsgDOTAEditFantasyTeamResponse_EResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgDOTAEditFantasyTeamResponse_EResult) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_fantasy_proto_enumTypes[6].Descriptor()
}

func (CMsgDOTAEditFantasyTeamResponse_EResult) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_fantasy_proto_enumTypes[6]
}

func (x CMsgDOTAEditFantasyTeamResponse_EResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgDOTAEditFantasyTeamResponse_EResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgDOTAEditFantasyTeamResponse_EResult(num)
	return nil
}

// Deprecated: Use CMsgDOTAEditFantasyTeamResponse_EResult.Descriptor instead.
func (CMsgDOTAEditFantasyTeamResponse_EResult) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{17, 0}
}

type CMsgDOTAFantasyTeamScoreResponse_EResult int32

const (
	CMsgDOTAFantasyTeamScoreResponse_SUCCESS                   CMsgDOTAFantasyTeamScoreResponse_EResult = 0
	CMsgDOTAFantasyTeamScoreResponse_ERROR_UNSPECIFIED         CMsgDOTAFantasyTeamScoreResponse_EResult = 1
	CMsgDOTAFantasyTeamScoreResponse_ERROR_NO_PERMISSION       CMsgDOTAFantasyTeamScoreResponse_EResult = 2
	CMsgDOTAFantasyTeamScoreResponse_ERROR_OWNER_NOT_IN_LEAGUE CMsgDOTAFantasyTeamScoreResponse_EResult = 3
)

// Enum value maps for CMsgDOTAFantasyTeamScoreResponse_EResult.
var (
	CMsgDOTAFantasyTeamScoreResponse_EResult_name = map[int32]string{
		0: "SUCCESS",
		1: "ERROR_UNSPECIFIED",
		2: "ERROR_NO_PERMISSION",
		3: "ERROR_OWNER_NOT_IN_LEAGUE",
	}
	CMsgDOTAFantasyTeamScoreResponse_EResult_value = map[string]int32{
		"SUCCESS":                   0,
		"ERROR_UNSPECIFIED":         1,
		"ERROR_NO_PERMISSION":       2,
		"ERROR_OWNER_NOT_IN_LEAGUE": 3,
	}
)

func (x CMsgDOTAFantasyTeamScoreResponse_EResult) Enum() *CMsgDOTAFantasyTeamScoreResponse_EResult {
	p := new(CMsgDOTAFantasyTeamScoreResponse_EResult)
	*p = x
	return p
}

func (x CMsgDOTAFantasyTeamScoreResponse_EResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgDOTAFantasyTeamScoreResponse_EResult) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_fantasy_proto_enumTypes[7].Descriptor()
}

func (CMsgDOTAFantasyTeamScoreResponse_EResult) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_fantasy_proto_enumTypes[7]
}

func (x CMsgDOTAFantasyTeamScoreResponse_EResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgDOTAFantasyTeamScoreResponse_EResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgDOTAFantasyTeamScoreResponse_EResult(num)
	return nil
}

// Deprecated: Use CMsgDOTAFantasyTeamScoreResponse_EResult.Descriptor instead.
func (CMsgDOTAFantasyTeamScoreResponse_EResult) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{23, 0}
}

type CMsgDOTAFantasyTeamStandingsResponse_EResult int32

const (
	CMsgDOTAFantasyTeamStandingsResponse_SUCCESS             CMsgDOTAFantasyTeamStandingsResponse_EResult = 0
	CMsgDOTAFantasyTeamStandingsResponse_ERROR_UNSPECIFIED   CMsgDOTAFantasyTeamStandingsResponse_EResult = 1
	CMsgDOTAFantasyTeamStandingsResponse_ERROR_NO_PERMISSION CMsgDOTAFantasyTeamStandingsResponse_EResult = 2
)

// Enum value maps for CMsgDOTAFantasyTeamStandingsResponse_EResult.
var (
	CMsgDOTAFantasyTeamStandingsResponse_EResult_name = map[int32]string{
		0: "SUCCESS",
		1: "ERROR_UNSPECIFIED",
		2: "ERROR_NO_PERMISSION",
	}
	CMsgDOTAFantasyTeamStandingsResponse_EResult_value = map[string]int32{
		"SUCCESS":             0,
		"ERROR_UNSPECIFIED":   1,
		"ERROR_NO_PERMISSION": 2,
	}
)

func (x CMsgDOTAFantasyTeamStandingsResponse_EResult) Enum() *CMsgDOTAFantasyTeamStandingsResponse_EResult {
	p := new(CMsgDOTAFantasyTeamStandingsResponse_EResult)
	*p = x
	return p
}

func (x CMsgDOTAFantasyTeamStandingsResponse_EResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgDOTAFantasyTeamStandingsResponse_EResult) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_fantasy_proto_enumTypes[8].Descriptor()
}

func (CMsgDOTAFantasyTeamStandingsResponse_EResult) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_fantasy_proto_enumTypes[8]
}

func (x CMsgDOTAFantasyTeamStandingsResponse_EResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgDOTAFantasyTeamStandingsResponse_EResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgDOTAFantasyTeamStandingsResponse_EResult(num)
	return nil
}

// Deprecated: Use CMsgDOTAFantasyTeamStandingsResponse_EResult.Descriptor instead.
func (CMsgDOTAFantasyTeamStandingsResponse_EResult) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{25, 0}
}

type CMsgDOTAFantasyPlayerScoreResponse_EResult int32

const (
	CMsgDOTAFantasyPlayerScoreResponse_SUCCESS             CMsgDOTAFantasyPlayerScoreResponse_EResult = 0
	CMsgDOTAFantasyPlayerScoreResponse_ERROR_UNSPECIFIED   CMsgDOTAFantasyPlayerScoreResponse_EResult = 1
	CMsgDOTAFantasyPlayerScoreResponse_ERROR_NO_PERMISSION CMsgDOTAFantasyPlayerScoreResponse_EResult = 2
)

// Enum value maps for CMsgDOTAFantasyPlayerScoreResponse_EResult.
var (
	CMsgDOTAFantasyPlayerScoreResponse_EResult_name = map[int32]string{
		0: "SUCCESS",
		1: "ERROR_UNSPECIFIED",
		2: "ERROR_NO_PERMISSION",
	}
	CMsgDOTAFantasyPlayerScoreResponse_EResult_value = map[string]int32{
		"SUCCESS":             0,
		"ERROR_UNSPECIFIED":   1,
		"ERROR_NO_PERMISSION": 2,
	}
)

func (x CMsgDOTAFantasyPlayerScoreResponse_EResult) Enum() *CMsgDOTAFantasyPlayerScoreResponse_EResult {
	p := new(CMsgDOTAFantasyPlayerScoreResponse_EResult)
	*p = x
	return p
}

func (x CMsgDOTAFantasyPlayerScoreResponse_EResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgDOTAFantasyPlayerScoreResponse_EResult) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_fantasy_proto_enumTypes[9].Descriptor()
}

func (CMsgDOTAFantasyPlayerScoreResponse_EResult) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_fantasy_proto_enumTypes[9]
}

func (x CMsgDOTAFantasyPlayerScoreResponse_EResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgDOTAFantasyPlayerScoreResponse_EResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgDOTAFantasyPlayerScoreResponse_EResult(num)
	return nil
}

// Deprecated: Use CMsgDOTAFantasyPlayerScoreResponse_EResult.Descriptor instead.
func (CMsgDOTAFantasyPlayerScoreResponse_EResult) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{27, 0}
}

type CMsgDOTAFantasyPlayerStandingsResponse_EResult int32

const (
	CMsgDOTAFantasyPlayerStandingsResponse_SUCCESS             CMsgDOTAFantasyPlayerStandingsResponse_EResult = 0
	CMsgDOTAFantasyPlayerStandingsResponse_ERROR_UNSPECIFIED   CMsgDOTAFantasyPlayerStandingsResponse_EResult = 1
	CMsgDOTAFantasyPlayerStandingsResponse_ERROR_NO_PERMISSION CMsgDOTAFantasyPlayerStandingsResponse_EResult = 2
)

// Enum value maps for CMsgDOTAFantasyPlayerStandingsResponse_EResult.
var (
	CMsgDOTAFantasyPlayerStandingsResponse_EResult_name = map[int32]string{
		0: "SUCCESS",
		1: "ERROR_UNSPECIFIED",
		2: "ERROR_NO_PERMISSION",
	}
	CMsgDOTAFantasyPlayerStandingsResponse_EResult_value = map[string]int32{
		"SUCCESS":             0,
		"ERROR_UNSPECIFIED":   1,
		"ERROR_NO_PERMISSION": 2,
	}
)

func (x CMsgDOTAFantasyPlayerStandingsResponse_EResult) Enum() *CMsgDOTAFantasyPlayerStandingsResponse_EResult {
	p := new(CMsgDOTAFantasyPlayerStandingsResponse_EResult)
	*p = x
	return p
}

func (x CMsgDOTAFantasyPlayerStandingsResponse_EResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgDOTAFantasyPlayerStandingsResponse_EResult) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_fantasy_proto_enumTypes[10].Descriptor()
}

func (CMsgDOTAFantasyPlayerStandingsResponse_EResult) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_fantasy_proto_enumTypes[10]
}

func (x CMsgDOTAFantasyPlayerStandingsResponse_EResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgDOTAFantasyPlayerStandingsResponse_EResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgDOTAFantasyPlayerStandingsResponse_EResult(num)
	return nil
}

// Deprecated: Use CMsgDOTAFantasyPlayerStandingsResponse_EResult.Descriptor instead.
func (CMsgDOTAFantasyPlayerStandingsResponse_EResult) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{29, 0}
}

type CMsgDOTAFantasyLeagueCreateResponse_EResult int32

const (
	CMsgDOTAFantasyLeagueCreateResponse_SUCCESS                  CMsgDOTAFantasyLeagueCreateResponse_EResult = 0
	CMsgDOTAFantasyLeagueCreateResponse_ERROR_NO_PERMISSION      CMsgDOTAFantasyLeagueCreateResponse_EResult = 1
	CMsgDOTAFantasyLeagueCreateResponse_ERROR_BAD_SEASON_ID      CMsgDOTAFantasyLeagueCreateResponse_EResult = 2
	CMsgDOTAFantasyLeagueCreateResponse_ERROR_BAD_LEAGUE_NAME    CMsgDOTAFantasyLeagueCreateResponse_EResult = 3
	CMsgDOTAFantasyLeagueCreateResponse_ERROR_BAD_TEAM_NAME      CMsgDOTAFantasyLeagueCreateResponse_EResult = 4
	CMsgDOTAFantasyLeagueCreateResponse_ERROR_UNSPECIFIED        CMsgDOTAFantasyLeagueCreateResponse_EResult = 5
	CMsgDOTAFantasyLeagueCreateResponse_ERROR_FAILED_LOGO_UPLOAD CMsgDOTAFantasyLeagueCreateResponse_EResult = 6
	CMsgDOTAFantasyLeagueCreateResponse_ERROR_NO_TICKET          CMsgDOTAFantasyLeagueCreateResponse_EResult = 7
)

// Enum value maps for CMsgDOTAFantasyLeagueCreateResponse_EResult.
var (
	CMsgDOTAFantasyLeagueCreateResponse_EResult_name = map[int32]string{
		0: "SUCCESS",
		1: "ERROR_NO_PERMISSION",
		2: "ERROR_BAD_SEASON_ID",
		3: "ERROR_BAD_LEAGUE_NAME",
		4: "ERROR_BAD_TEAM_NAME",
		5: "ERROR_UNSPECIFIED",
		6: "ERROR_FAILED_LOGO_UPLOAD",
		7: "ERROR_NO_TICKET",
	}
	CMsgDOTAFantasyLeagueCreateResponse_EResult_value = map[string]int32{
		"SUCCESS":                  0,
		"ERROR_NO_PERMISSION":      1,
		"ERROR_BAD_SEASON_ID":      2,
		"ERROR_BAD_LEAGUE_NAME":    3,
		"ERROR_BAD_TEAM_NAME":      4,
		"ERROR_UNSPECIFIED":        5,
		"ERROR_FAILED_LOGO_UPLOAD": 6,
		"ERROR_NO_TICKET":          7,
	}
)

func (x CMsgDOTAFantasyLeagueCreateResponse_EResult) Enum() *CMsgDOTAFantasyLeagueCreateResponse_EResult {
	p := new(CMsgDOTAFantasyLeagueCreateResponse_EResult)
	*p = x
	return p
}

func (x CMsgDOTAFantasyLeagueCreateResponse_EResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgDOTAFantasyLeagueCreateResponse_EResult) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_fantasy_proto_enumTypes[11].Descriptor()
}

func (CMsgDOTAFantasyLeagueCreateResponse_EResult) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_fantasy_proto_enumTypes[11]
}

func (x CMsgDOTAFantasyLeagueCreateResponse_EResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgDOTAFantasyLeagueCreateResponse_EResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgDOTAFantasyLeagueCreateResponse_EResult(num)
	return nil
}

// Deprecated: Use CMsgDOTAFantasyLeagueCreateResponse_EResult.Descriptor instead.
func (CMsgDOTAFantasyLeagueCreateResponse_EResult) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{31, 0}
}

type CMsgDOTAFantasyTeamCreateResponse_EResult int32

const (
	CMsgDOTAFantasyTeamCreateResponse_SUCCESS                     CMsgDOTAFantasyTeamCreateResponse_EResult = 0
	CMsgDOTAFantasyTeamCreateResponse_ERROR_NO_PERMISSION         CMsgDOTAFantasyTeamCreateResponse_EResult = 1
	CMsgDOTAFantasyTeamCreateResponse_ERROR_FAILED_LOGO_UPLOAD    CMsgDOTAFantasyTeamCreateResponse_EResult = 2
	CMsgDOTAFantasyTeamCreateResponse_ERROR_BAD_FANTASY_LEAGUE_ID CMsgDOTAFantasyTeamCreateResponse_EResult = 3
	CMsgDOTAFantasyTeamCreateResponse_ERROR_BAD_NAME              CMsgDOTAFantasyTeamCreateResponse_EResult = 4
	CMsgDOTAFantasyTeamCreateResponse_ERROR_FULL                  CMsgDOTAFantasyTeamCreateResponse_EResult = 5
	CMsgDOTAFantasyTeamCreateResponse_ERROR_ALREADY_MEMBER        CMsgDOTAFantasyTeamCreateResponse_EResult = 6
	CMsgDOTAFantasyTeamCreateResponse_ERROR_BAD_PASSWORD          CMsgDOTAFantasyTeamCreateResponse_EResult = 7
	CMsgDOTAFantasyTeamCreateResponse_ERROR_UNSPECIFIED           CMsgDOTAFantasyTeamCreateResponse_EResult = 8
	CMsgDOTAFantasyTeamCreateResponse_ERROR_NO_TICKET             CMsgDOTAFantasyTeamCreateResponse_EResult = 9
	CMsgDOTAFantasyTeamCreateResponse_ERROR_LEAGUE_LOCKED         CMsgDOTAFantasyTeamCreateResponse_EResult = 10
)

// Enum value maps for CMsgDOTAFantasyTeamCreateResponse_EResult.
var (
	CMsgDOTAFantasyTeamCreateResponse_EResult_name = map[int32]string{
		0:  "SUCCESS",
		1:  "ERROR_NO_PERMISSION",
		2:  "ERROR_FAILED_LOGO_UPLOAD",
		3:  "ERROR_BAD_FANTASY_LEAGUE_ID",
		4:  "ERROR_BAD_NAME",
		5:  "ERROR_FULL",
		6:  "ERROR_ALREADY_MEMBER",
		7:  "ERROR_BAD_PASSWORD",
		8:  "ERROR_UNSPECIFIED",
		9:  "ERROR_NO_TICKET",
		10: "ERROR_LEAGUE_LOCKED",
	}
	CMsgDOTAFantasyTeamCreateResponse_EResult_value = map[string]int32{
		"SUCCESS":                     0,
		"ERROR_NO_PERMISSION":         1,
		"ERROR_FAILED_LOGO_UPLOAD":    2,
		"ERROR_BAD_FANTASY_LEAGUE_ID": 3,
		"ERROR_BAD_NAME":              4,
		"ERROR_FULL":                  5,
		"ERROR_ALREADY_MEMBER":        6,
		"ERROR_BAD_PASSWORD":          7,
		"ERROR_UNSPECIFIED":           8,
		"ERROR_NO_TICKET":             9,
		"ERROR_LEAGUE_LOCKED":         10,
	}
)

func (x CMsgDOTAFantasyTeamCreateResponse_EResult) Enum() *CMsgDOTAFantasyTeamCreateResponse_EResult {
	p := new(CMsgDOTAFantasyTeamCreateResponse_EResult)
	*p = x
	return p
}

func (x CMsgDOTAFantasyTeamCreateResponse_EResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgDOTAFantasyTeamCreateResponse_EResult) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_fantasy_proto_enumTypes[12].Descriptor()
}

func (CMsgDOTAFantasyTeamCreateResponse_EResult) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_fantasy_proto_enumTypes[12]
}

func (x CMsgDOTAFantasyTeamCreateResponse_EResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgDOTAFantasyTeamCreateResponse_EResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgDOTAFantasyTeamCreateResponse_EResult(num)
	return nil
}

// Deprecated: Use CMsgDOTAFantasyTeamCreateResponse_EResult.Descriptor instead.
func (CMsgDOTAFantasyTeamCreateResponse_EResult) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{33, 0}
}

type CMsgDOTAFantasyLeagueEditInvitesResponse_EResult int32

const (
	CMsgDOTAFantasyLeagueEditInvitesResponse_SUCCESS           CMsgDOTAFantasyLeagueEditInvitesResponse_EResult = 0
	CMsgDOTAFantasyLeagueEditInvitesResponse_ERROR_UNSPECIFIED CMsgDOTAFantasyLeagueEditInvitesResponse_EResult = 1
)

// Enum value maps for CMsgDOTAFantasyLeagueEditInvitesResponse_EResult.
var (
	CMsgDOTAFantasyLeagueEditInvitesResponse_EResult_name = map[int32]string{
		0: "SUCCESS",
		1: "ERROR_UNSPECIFIED",
	}
	CMsgDOTAFantasyLeagueEditInvitesResponse_EResult_value = map[string]int32{
		"SUCCESS":           0,
		"ERROR_UNSPECIFIED": 1,
	}
)

func (x CMsgDOTAFantasyLeagueEditInvitesResponse_EResult) Enum() *CMsgDOTAFantasyLeagueEditInvitesResponse_EResult {
	p := new(CMsgDOTAFantasyLeagueEditInvitesResponse_EResult)
	*p = x
	return p
}

func (x CMsgDOTAFantasyLeagueEditInvitesResponse_EResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgDOTAFantasyLeagueEditInvitesResponse_EResult) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_fantasy_proto_enumTypes[13].Descriptor()
}

func (CMsgDOTAFantasyLeagueEditInvitesResponse_EResult) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_fantasy_proto_enumTypes[13]
}

func (x CMsgDOTAFantasyLeagueEditInvitesResponse_EResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgDOTAFantasyLeagueEditInvitesResponse_EResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgDOTAFantasyLeagueEditInvitesResponse_EResult(num)
	return nil
}

// Deprecated: Use CMsgDOTAFantasyLeagueEditInvitesResponse_EResult.Descriptor instead.
func (CMsgDOTAFantasyLeagueEditInvitesResponse_EResult) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{35, 0}
}

type CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult int32

const (
	CMsgDOTAFantasyLeagueDraftPlayerResponse_SUCCESS                           CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult = 0
	CMsgDOTAFantasyLeagueDraftPlayerResponse_ERROR_UNSPECIFIED                 CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult = 1
	CMsgDOTAFantasyLeagueDraftPlayerResponse_ERROR_INVALID_FANTASY_LEAGUE      CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult = 2
	CMsgDOTAFantasyLeagueDraftPlayerResponse_ERROR_FANTASY_LEAGUE_NOT_DRAFTING CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult = 3
	CMsgDOTAFantasyLeagueDraftPlayerResponse_ERROR_OWNER_NOT_IN_LEAGUE         CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult = 4
	CMsgDOTAFantasyLeagueDraftPlayerResponse_ERROR_NOT_OWNERS_TURN             CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult = 5
	CMsgDOTAFantasyLeagueDraftPlayerResponse_ERROR_PLAYER_INVALID              CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult = 6
	CMsgDOTAFantasyLeagueDraftPlayerResponse_ERROR_PLAYER_UNAVAILABLE          CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult = 7
	CMsgDOTAFantasyLeagueDraftPlayerResponse_ERROR_PLAYER_NO_VALID_SLOTS       CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult = 8
)

// Enum value maps for CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult.
var (
	CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult_name = map[int32]string{
		0: "SUCCESS",
		1: "ERROR_UNSPECIFIED",
		2: "ERROR_INVALID_FANTASY_LEAGUE",
		3: "ERROR_FANTASY_LEAGUE_NOT_DRAFTING",
		4: "ERROR_OWNER_NOT_IN_LEAGUE",
		5: "ERROR_NOT_OWNERS_TURN",
		6: "ERROR_PLAYER_INVALID",
		7: "ERROR_PLAYER_UNAVAILABLE",
		8: "ERROR_PLAYER_NO_VALID_SLOTS",
	}
	CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult_value = map[string]int32{
		"SUCCESS":                           0,
		"ERROR_UNSPECIFIED":                 1,
		"ERROR_INVALID_FANTASY_LEAGUE":      2,
		"ERROR_FANTASY_LEAGUE_NOT_DRAFTING": 3,
		"ERROR_OWNER_NOT_IN_LEAGUE":         4,
		"ERROR_NOT_OWNERS_TURN":             5,
		"ERROR_PLAYER_INVALID":              6,
		"ERROR_PLAYER_UNAVAILABLE":          7,
		"ERROR_PLAYER_NO_VALID_SLOTS":       8,
	}
)

func (x CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult) Enum() *CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult {
	p := new(CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult)
	*p = x
	return p
}

func (x CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_fantasy_proto_enumTypes[14].Descriptor()
}

func (CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_fantasy_proto_enumTypes[14]
}

func (x CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult(num)
	return nil
}

// Deprecated: Use CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult.Descriptor instead.
func (CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{39, 0}
}

type CMsgDOTAFantasyTeamRosterSwapResponse_EResult int32

const (
	CMsgDOTAFantasyTeamRosterSwapResponse_SUCCESS                   CMsgDOTAFantasyTeamRosterSwapResponse_EResult = 0
	CMsgDOTAFantasyTeamRosterSwapResponse_ERROR_UNSPECIFIED         CMsgDOTAFantasyTeamRosterSwapResponse_EResult = 1
	CMsgDOTAFantasyTeamRosterSwapResponse_ERROR_OWNER_NOT_IN_LEAGUE CMsgDOTAFantasyTeamRosterSwapResponse_EResult = 2
	CMsgDOTAFantasyTeamRosterSwapResponse_ERROR_SLOTS_INVALID       CMsgDOTAFantasyTeamRosterSwapResponse_EResult = 3
	CMsgDOTAFantasyTeamRosterSwapResponse_ERROR_SLOT_LOCKED         CMsgDOTAFantasyTeamRosterSwapResponse_EResult = 4
)

// Enum value maps for CMsgDOTAFantasyTeamRosterSwapResponse_EResult.
var (
	CMsgDOTAFantasyTeamRosterSwapResponse_EResult_name = map[int32]string{
		0: "SUCCESS",
		1: "ERROR_UNSPECIFIED",
		2: "ERROR_OWNER_NOT_IN_LEAGUE",
		3: "ERROR_SLOTS_INVALID",
		4: "ERROR_SLOT_LOCKED",
	}
	CMsgDOTAFantasyTeamRosterSwapResponse_EResult_value = map[string]int32{
		"SUCCESS":                   0,
		"ERROR_UNSPECIFIED":         1,
		"ERROR_OWNER_NOT_IN_LEAGUE": 2,
		"ERROR_SLOTS_INVALID":       3,
		"ERROR_SLOT_LOCKED":         4,
	}
)

func (x CMsgDOTAFantasyTeamRosterSwapResponse_EResult) Enum() *CMsgDOTAFantasyTeamRosterSwapResponse_EResult {
	p := new(CMsgDOTAFantasyTeamRosterSwapResponse_EResult)
	*p = x
	return p
}

func (x CMsgDOTAFantasyTeamRosterSwapResponse_EResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgDOTAFantasyTeamRosterSwapResponse_EResult) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_fantasy_proto_enumTypes[15].Descriptor()
}

func (CMsgDOTAFantasyTeamRosterSwapResponse_EResult) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_fantasy_proto_enumTypes[15]
}

func (x CMsgDOTAFantasyTeamRosterSwapResponse_EResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgDOTAFantasyTeamRosterSwapResponse_EResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgDOTAFantasyTeamRosterSwapResponse_EResult(num)
	return nil
}

// Deprecated: Use CMsgDOTAFantasyTeamRosterSwapResponse_EResult.Descriptor instead.
func (CMsgDOTAFantasyTeamRosterSwapResponse_EResult) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{41, 0}
}

type CMsgDOTAFantasyTeamRosterAddDropResponse_EResult int32

const (
	CMsgDOTAFantasyTeamRosterAddDropResponse_SUCCESS                     CMsgDOTAFantasyTeamRosterAddDropResponse_EResult = 0
	CMsgDOTAFantasyTeamRosterAddDropResponse_ERROR_UNSPECIFIED           CMsgDOTAFantasyTeamRosterAddDropResponse_EResult = 1
	CMsgDOTAFantasyTeamRosterAddDropResponse_ERROR_OWNER_NOT_IN_LEAGUE   CMsgDOTAFantasyTeamRosterAddDropResponse_EResult = 2
	CMsgDOTAFantasyTeamRosterAddDropResponse_ERROR_PLAYER_NOT_AVAILABLE  CMsgDOTAFantasyTeamRosterAddDropResponse_EResult = 3
	CMsgDOTAFantasyTeamRosterAddDropResponse_ERROR_PLAYER_NOT_ON_TEAM    CMsgDOTAFantasyTeamRosterAddDropResponse_EResult = 4
	CMsgDOTAFantasyTeamRosterAddDropResponse_ERROR_TRADE_ALREADY_PENDING CMsgDOTAFantasyTeamRosterAddDropResponse_EResult = 5
)

// Enum value maps for CMsgDOTAFantasyTeamRosterAddDropResponse_EResult.
var (
	CMsgDOTAFantasyTeamRosterAddDropResponse_EResult_name = map[int32]string{
		0: "SUCCESS",
		1: "ERROR_UNSPECIFIED",
		2: "ERROR_OWNER_NOT_IN_LEAGUE",
		3: "ERROR_PLAYER_NOT_AVAILABLE",
		4: "ERROR_PLAYER_NOT_ON_TEAM",
		5: "ERROR_TRADE_ALREADY_PENDING",
	}
	CMsgDOTAFantasyTeamRosterAddDropResponse_EResult_value = map[string]int32{
		"SUCCESS":                     0,
		"ERROR_UNSPECIFIED":           1,
		"ERROR_OWNER_NOT_IN_LEAGUE":   2,
		"ERROR_PLAYER_NOT_AVAILABLE":  3,
		"ERROR_PLAYER_NOT_ON_TEAM":    4,
		"ERROR_TRADE_ALREADY_PENDING": 5,
	}
)

func (x CMsgDOTAFantasyTeamRosterAddDropResponse_EResult) Enum() *CMsgDOTAFantasyTeamRosterAddDropResponse_EResult {
	p := new(CMsgDOTAFantasyTeamRosterAddDropResponse_EResult)
	*p = x
	return p
}

func (x CMsgDOTAFantasyTeamRosterAddDropResponse_EResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgDOTAFantasyTeamRosterAddDropResponse_EResult) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_fantasy_proto_enumTypes[16].Descriptor()
}

func (CMsgDOTAFantasyTeamRosterAddDropResponse_EResult) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_fantasy_proto_enumTypes[16]
}

func (x CMsgDOTAFantasyTeamRosterAddDropResponse_EResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgDOTAFantasyTeamRosterAddDropResponse_EResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgDOTAFantasyTeamRosterAddDropResponse_EResult(num)
	return nil
}

// Deprecated: Use CMsgDOTAFantasyTeamRosterAddDropResponse_EResult.Descriptor instead.
func (CMsgDOTAFantasyTeamRosterAddDropResponse_EResult) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{43, 0}
}

type CMsgDOTAFantasyTeamTradesResponse_EResult int32

const (
	CMsgDOTAFantasyTeamTradesResponse_SUCCESS             CMsgDOTAFantasyTeamTradesResponse_EResult = 0
	CMsgDOTAFantasyTeamTradesResponse_ERROR_UNSPECIFIED   CMsgDOTAFantasyTeamTradesResponse_EResult = 1
	CMsgDOTAFantasyTeamTradesResponse_ERROR_NO_PERMISSION CMsgDOTAFantasyTeamTradesResponse_EResult = 2
)

// Enum value maps for CMsgDOTAFantasyTeamTradesResponse_EResult.
var (
	CMsgDOTAFantasyTeamTradesResponse_EResult_name = map[int32]string{
		0: "SUCCESS",
		1: "ERROR_UNSPECIFIED",
		2: "ERROR_NO_PERMISSION",
	}
	CMsgDOTAFantasyTeamTradesResponse_EResult_value = map[string]int32{
		"SUCCESS":             0,
		"ERROR_UNSPECIFIED":   1,
		"ERROR_NO_PERMISSION": 2,
	}
)

func (x CMsgDOTAFantasyTeamTradesResponse_EResult) Enum() *CMsgDOTAFantasyTeamTradesResponse_EResult {
	p := new(CMsgDOTAFantasyTeamTradesResponse_EResult)
	*p = x
	return p
}

func (x CMsgDOTAFantasyTeamTradesResponse_EResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgDOTAFantasyTeamTradesResponse_EResult) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_fantasy_proto_enumTypes[17].Descriptor()
}

func (CMsgDOTAFantasyTeamTradesResponse_EResult) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_fantasy_proto_enumTypes[17]
}

func (x CMsgDOTAFantasyTeamTradesResponse_EResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgDOTAFantasyTeamTradesResponse_EResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgDOTAFantasyTeamTradesResponse_EResult(num)
	return nil
}

// Deprecated: Use CMsgDOTAFantasyTeamTradesResponse_EResult.Descriptor instead.
func (CMsgDOTAFantasyTeamTradesResponse_EResult) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{45, 0}
}

type CMsgDOTAFantasyTeamTradeCancelResponse_EResult int32

const (
	CMsgDOTAFantasyTeamTradeCancelResponse_SUCCESS             CMsgDOTAFantasyTeamTradeCancelResponse_EResult = 0
	CMsgDOTAFantasyTeamTradeCancelResponse_ERROR_UNSPECIFIED   CMsgDOTAFantasyTeamTradeCancelResponse_EResult = 1
	CMsgDOTAFantasyTeamTradeCancelResponse_ERROR_NO_PERMISSION CMsgDOTAFantasyTeamTradeCancelResponse_EResult = 2
	CMsgDOTAFantasyTeamTradeCancelResponse_ERROR_NO_TRADE      CMsgDOTAFantasyTeamTradeCancelResponse_EResult = 3
)

// Enum value maps for CMsgDOTAFantasyTeamTradeCancelResponse_EResult.
var (
	CMsgDOTAFantasyTeamTradeCancelResponse_EResult_name = map[int32]string{
		0: "SUCCESS",
		1: "ERROR_UNSPECIFIED",
		2: "ERROR_NO_PERMISSION",
		3: "ERROR_NO_TRADE",
	}
	CMsgDOTAFantasyTeamTradeCancelResponse_EResult_value = map[string]int32{
		"SUCCESS":             0,
		"ERROR_UNSPECIFIED":   1,
		"ERROR_NO_PERMISSION": 2,
		"ERROR_NO_TRADE":      3,
	}
)

func (x CMsgDOTAFantasyTeamTradeCancelResponse_EResult) Enum() *CMsgDOTAFantasyTeamTradeCancelResponse_EResult {
	p := new(CMsgDOTAFantasyTeamTradeCancelResponse_EResult)
	*p = x
	return p
}

func (x CMsgDOTAFantasyTeamTradeCancelResponse_EResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgDOTAFantasyTeamTradeCancelResponse_EResult) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_fantasy_proto_enumTypes[18].Descriptor()
}

func (CMsgDOTAFantasyTeamTradeCancelResponse_EResult) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_fantasy_proto_enumTypes[18]
}

func (x CMsgDOTAFantasyTeamTradeCancelResponse_EResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgDOTAFantasyTeamTradeCancelResponse_EResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgDOTAFantasyTeamTradeCancelResponse_EResult(num)
	return nil
}

// Deprecated: Use CMsgDOTAFantasyTeamTradeCancelResponse_EResult.Descriptor instead.
func (CMsgDOTAFantasyTeamTradeCancelResponse_EResult) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{47, 0}
}

type CMsgDOTAFantasyTeamRosterResponse_EResult int32

const (
	CMsgDOTAFantasyTeamRosterResponse_SUCCESS                   CMsgDOTAFantasyTeamRosterResponse_EResult = 0
	CMsgDOTAFantasyTeamRosterResponse_ERROR_UNSPECIFIED         CMsgDOTAFantasyTeamRosterResponse_EResult = 1
	CMsgDOTAFantasyTeamRosterResponse_ERROR_NO_PERMISSION       CMsgDOTAFantasyTeamRosterResponse_EResult = 2
	CMsgDOTAFantasyTeamRosterResponse_ERROR_OWNER_NOT_IN_LEAGUE CMsgDOTAFantasyTeamRosterResponse_EResult = 3
)

// Enum value maps for CMsgDOTAFantasyTeamRosterResponse_EResult.
var (
	CMsgDOTAFantasyTeamRosterResponse_EResult_name = map[int32]string{
		0: "SUCCESS",
		1: "ERROR_UNSPECIFIED",
		2: "ERROR_NO_PERMISSION",
		3: "ERROR_OWNER_NOT_IN_LEAGUE",
	}
	CMsgDOTAFantasyTeamRosterResponse_EResult_value = map[string]int32{
		"SUCCESS":                   0,
		"ERROR_UNSPECIFIED":         1,
		"ERROR_NO_PERMISSION":       2,
		"ERROR_OWNER_NOT_IN_LEAGUE": 3,
	}
)

func (x CMsgDOTAFantasyTeamRosterResponse_EResult) Enum() *CMsgDOTAFantasyTeamRosterResponse_EResult {
	p := new(CMsgDOTAFantasyTeamRosterResponse_EResult)
	*p = x
	return p
}

func (x CMsgDOTAFantasyTeamRosterResponse_EResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgDOTAFantasyTeamRosterResponse_EResult) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_fantasy_proto_enumTypes[19].Descriptor()
}

func (CMsgDOTAFantasyTeamRosterResponse_EResult) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_fantasy_proto_enumTypes[19]
}

func (x CMsgDOTAFantasyTeamRosterResponse_EResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgDOTAFantasyTeamRosterResponse_EResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgDOTAFantasyTeamRosterResponse_EResult(num)
	return nil
}

// Deprecated: Use CMsgDOTAFantasyTeamRosterResponse_EResult.Descriptor instead.
func (CMsgDOTAFantasyTeamRosterResponse_EResult) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{49, 0}
}

type CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult int32

const (
	CMsgDOTAFantasyPlayerHisoricalStatsResponse_SUCCESS             CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult = 0
	CMsgDOTAFantasyPlayerHisoricalStatsResponse_ERROR_UNSPECIFIED   CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult = 1
	CMsgDOTAFantasyPlayerHisoricalStatsResponse_ERROR_NO_PERMISSION CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult = 2
)

// Enum value maps for CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult.
var (
	CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult_name = map[int32]string{
		0: "SUCCESS",
		1: "ERROR_UNSPECIFIED",
		2: "ERROR_NO_PERMISSION",
	}
	CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult_value = map[string]int32{
		"SUCCESS":             0,
		"ERROR_UNSPECIFIED":   1,
		"ERROR_NO_PERMISSION": 2,
	}
)

func (x CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult) Enum() *CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult {
	p := new(CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult)
	*p = x
	return p
}

func (x CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_fantasy_proto_enumTypes[20].Descriptor()
}

func (CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_fantasy_proto_enumTypes[20]
}

func (x CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult(num)
	return nil
}

// Deprecated: Use CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult.Descriptor instead.
func (CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{51, 0}
}

type CMsgDOTAFantasyMessagesResponse_EResult int32

const (
	CMsgDOTAFantasyMessagesResponse_SUCCESS             CMsgDOTAFantasyMessagesResponse_EResult = 0
	CMsgDOTAFantasyMessagesResponse_ERROR_UNSPECIFIED   CMsgDOTAFantasyMessagesResponse_EResult = 1
	CMsgDOTAFantasyMessagesResponse_ERROR_NO_PERMISSION CMsgDOTAFantasyMessagesResponse_EResult = 2
)

// Enum value maps for CMsgDOTAFantasyMessagesResponse_EResult.
var (
	CMsgDOTAFantasyMessagesResponse_EResult_name = map[int32]string{
		0: "SUCCESS",
		1: "ERROR_UNSPECIFIED",
		2: "ERROR_NO_PERMISSION",
	}
	CMsgDOTAFantasyMessagesResponse_EResult_value = map[string]int32{
		"SUCCESS":             0,
		"ERROR_UNSPECIFIED":   1,
		"ERROR_NO_PERMISSION": 2,
	}
)

func (x CMsgDOTAFantasyMessagesResponse_EResult) Enum() *CMsgDOTAFantasyMessagesResponse_EResult {
	p := new(CMsgDOTAFantasyMessagesResponse_EResult)
	*p = x
	return p
}

func (x CMsgDOTAFantasyMessagesResponse_EResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgDOTAFantasyMessagesResponse_EResult) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_fantasy_proto_enumTypes[21].Descriptor()
}

func (CMsgDOTAFantasyMessagesResponse_EResult) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_fantasy_proto_enumTypes[21]
}

func (x CMsgDOTAFantasyMessagesResponse_EResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgDOTAFantasyMessagesResponse_EResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgDOTAFantasyMessagesResponse_EResult(num)
	return nil
}

// Deprecated: Use CMsgDOTAFantasyMessagesResponse_EResult.Descriptor instead.
func (CMsgDOTAFantasyMessagesResponse_EResult) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{54, 0}
}

type CMsgDOTAFantasyRemoveOwnerResponse_EResult int32

const (
	CMsgDOTAFantasyRemoveOwnerResponse_SUCCESS             CMsgDOTAFantasyRemoveOwnerResponse_EResult = 0
	CMsgDOTAFantasyRemoveOwnerResponse_ERROR_UNSPECIFIED   CMsgDOTAFantasyRemoveOwnerResponse_EResult = 1
	CMsgDOTAFantasyRemoveOwnerResponse_ERROR_NO_PERMISSION CMsgDOTAFantasyRemoveOwnerResponse_EResult = 2
	CMsgDOTAFantasyRemoveOwnerResponse_ERROR_LEAGUE_LOCKED CMsgDOTAFantasyRemoveOwnerResponse_EResult = 3
	CMsgDOTAFantasyRemoveOwnerResponse_ERROR_NOT_A_MEMBER  CMsgDOTAFantasyRemoveOwnerResponse_EResult = 4
)

// Enum value maps for CMsgDOTAFantasyRemoveOwnerResponse_EResult.
var (
	CMsgDOTAFantasyRemoveOwnerResponse_EResult_name = map[int32]string{
		0: "SUCCESS",
		1: "ERROR_UNSPECIFIED",
		2: "ERROR_NO_PERMISSION",
		3: "ERROR_LEAGUE_LOCKED",
		4: "ERROR_NOT_A_MEMBER",
	}
	CMsgDOTAFantasyRemoveOwnerResponse_EResult_value = map[string]int32{
		"SUCCESS":             0,
		"ERROR_UNSPECIFIED":   1,
		"ERROR_NO_PERMISSION": 2,
		"ERROR_LEAGUE_LOCKED": 3,
		"ERROR_NOT_A_MEMBER":  4,
	}
)

func (x CMsgDOTAFantasyRemoveOwnerResponse_EResult) Enum() *CMsgDOTAFantasyRemoveOwnerResponse_EResult {
	p := new(CMsgDOTAFantasyRemoveOwnerResponse_EResult)
	*p = x
	return p
}

func (x CMsgDOTAFantasyRemoveOwnerResponse_EResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgDOTAFantasyRemoveOwnerResponse_EResult) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_fantasy_proto_enumTypes[22].Descriptor()
}

func (CMsgDOTAFantasyRemoveOwnerResponse_EResult) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_fantasy_proto_enumTypes[22]
}

func (x CMsgDOTAFantasyRemoveOwnerResponse_EResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgDOTAFantasyRemoveOwnerResponse_EResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgDOTAFantasyRemoveOwnerResponse_EResult(num)
	return nil
}

// Deprecated: Use CMsgDOTAFantasyRemoveOwnerResponse_EResult.Descriptor instead.
func (CMsgDOTAFantasyRemoveOwnerResponse_EResult) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{56, 0}
}

type CMsgDOTAFantasyScheduledMatchesResponse_EResult int32

const (
	CMsgDOTAFantasyScheduledMatchesResponse_SUCCESS           CMsgDOTAFantasyScheduledMatchesResponse_EResult = 0
	CMsgDOTAFantasyScheduledMatchesResponse_ERROR_UNSPECIFIED CMsgDOTAFantasyScheduledMatchesResponse_EResult = 1
)

// Enum value maps for CMsgDOTAFantasyScheduledMatchesResponse_EResult.
var (
	CMsgDOTAFantasyScheduledMatchesResponse_EResult_name = map[int32]string{
		0: "SUCCESS",
		1: "ERROR_UNSPECIFIED",
	}
	CMsgDOTAFantasyScheduledMatchesResponse_EResult_value = map[string]int32{
		"SUCCESS":           0,
		"ERROR_UNSPECIFIED": 1,
	}
)

func (x CMsgDOTAFantasyScheduledMatchesResponse_EResult) Enum() *CMsgDOTAFantasyScheduledMatchesResponse_EResult {
	p := new(CMsgDOTAFantasyScheduledMatchesResponse_EResult)
	*p = x
	return p
}

func (x CMsgDOTAFantasyScheduledMatchesResponse_EResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgDOTAFantasyScheduledMatchesResponse_EResult) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_fantasy_proto_enumTypes[23].Descriptor()
}

func (CMsgDOTAFantasyScheduledMatchesResponse_EResult) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_fantasy_proto_enumTypes[23]
}

func (x CMsgDOTAFantasyScheduledMatchesResponse_EResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgDOTAFantasyScheduledMatchesResponse_EResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgDOTAFantasyScheduledMatchesResponse_EResult(num)
	return nil
}

// Deprecated: Use CMsgDOTAFantasyScheduledMatchesResponse_EResult.Descriptor instead.
func (CMsgDOTAFantasyScheduledMatchesResponse_EResult) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{58, 0}
}

type CMsgDOTAFantasyLeaveLeagueResponse_EResult int32

const (
	CMsgDOTAFantasyLeaveLeagueResponse_SUCCESS                CMsgDOTAFantasyLeaveLeagueResponse_EResult = 0
	CMsgDOTAFantasyLeaveLeagueResponse_ERROR_UNSPECIFIED      CMsgDOTAFantasyLeaveLeagueResponse_EResult = 1
	CMsgDOTAFantasyLeaveLeagueResponse_ERROR_NOT_MEMBER       CMsgDOTAFantasyLeaveLeagueResponse_EResult = 2
	CMsgDOTAFantasyLeaveLeagueResponse_ERROR_LEAGUE_NOT_FOUND CMsgDOTAFantasyLeaveLeagueResponse_EResult = 3
	CMsgDOTAFantasyLeaveLeagueResponse_ERROR_DRAFT_ACTIVE     CMsgDOTAFantasyLeaveLeagueResponse_EResult = 4
)

// Enum value maps for CMsgDOTAFantasyLeaveLeagueResponse_EResult.
var (
	CMsgDOTAFantasyLeaveLeagueResponse_EResult_name = map[int32]string{
		0: "SUCCESS",
		1: "ERROR_UNSPECIFIED",
		2: "ERROR_NOT_MEMBER",
		3: "ERROR_LEAGUE_NOT_FOUND",
		4: "ERROR_DRAFT_ACTIVE",
	}
	CMsgDOTAFantasyLeaveLeagueResponse_EResult_value = map[string]int32{
		"SUCCESS":                0,
		"ERROR_UNSPECIFIED":      1,
		"ERROR_NOT_MEMBER":       2,
		"ERROR_LEAGUE_NOT_FOUND": 3,
		"ERROR_DRAFT_ACTIVE":     4,
	}
)

func (x CMsgDOTAFantasyLeaveLeagueResponse_EResult) Enum() *CMsgDOTAFantasyLeaveLeagueResponse_EResult {
	p := new(CMsgDOTAFantasyLeaveLeagueResponse_EResult)
	*p = x
	return p
}

func (x CMsgDOTAFantasyLeaveLeagueResponse_EResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgDOTAFantasyLeaveLeagueResponse_EResult) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_fantasy_proto_enumTypes[24].Descriptor()
}

func (CMsgDOTAFantasyLeaveLeagueResponse_EResult) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_fantasy_proto_enumTypes[24]
}

func (x CMsgDOTAFantasyLeaveLeagueResponse_EResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgDOTAFantasyLeaveLeagueResponse_EResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgDOTAFantasyLeaveLeagueResponse_EResult(num)
	return nil
}

// Deprecated: Use CMsgDOTAFantasyLeaveLeagueResponse_EResult.Descriptor instead.
func (CMsgDOTAFantasyLeaveLeagueResponse_EResult) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{60, 0}
}

type CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult int32

const (
	CMsgDOTAFantasyPlayerScoreDetailsResponse_SUCCESS           CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult = 0
	CMsgDOTAFantasyPlayerScoreDetailsResponse_ERROR_UNSPECIFIED CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult = 1
	CMsgDOTAFantasyPlayerScoreDetailsResponse_ERROR_NOT_MEMBER  CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult = 2
)

// Enum value maps for CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult.
var (
	CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult_name = map[int32]string{
		0: "SUCCESS",
		1: "ERROR_UNSPECIFIED",
		2: "ERROR_NOT_MEMBER",
	}
	CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult_value = map[string]int32{
		"SUCCESS":           0,
		"ERROR_UNSPECIFIED": 1,
		"ERROR_NOT_MEMBER":  2,
	}
)

func (x CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult) Enum() *CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult {
	p := new(CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult)
	*p = x
	return p
}

func (x CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_fantasy_proto_enumTypes[25].Descriptor()
}

func (CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_fantasy_proto_enumTypes[25]
}

func (x CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult(num)
	return nil
}

// Deprecated: Use CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult.Descriptor instead.
func (CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{62, 0}
}

type CMsgClientToGCGetPlayerCardRosterResponse_Result int32

const (
	CMsgClientToGCGetPlayerCardRosterResponse_SUCCESS                 CMsgClientToGCGetPlayerCardRosterResponse_Result = 0
	CMsgClientToGCGetPlayerCardRosterResponse_ERROR_UNSPECIFIED       CMsgClientToGCGetPlayerCardRosterResponse_Result = 1
	CMsgClientToGCGetPlayerCardRosterResponse_ERROR_INVALID_LEAGUE_ID CMsgClientToGCGetPlayerCardRosterResponse_Result = 2
	CMsgClientToGCGetPlayerCardRosterResponse_ERROR_INVALID_TIMESTAMP CMsgClientToGCGetPlayerCardRosterResponse_Result = 3
)

// Enum value maps for CMsgClientToGCGetPlayerCardRosterResponse_Result.
var (
	CMsgClientToGCGetPlayerCardRosterResponse_Result_name = map[int32]string{
		0: "SUCCESS",
		1: "ERROR_UNSPECIFIED",
		2: "ERROR_INVALID_LEAGUE_ID",
		3: "ERROR_INVALID_TIMESTAMP",
	}
	CMsgClientToGCGetPlayerCardRosterResponse_Result_value = map[string]int32{
		"SUCCESS":                 0,
		"ERROR_UNSPECIFIED":       1,
		"ERROR_INVALID_LEAGUE_ID": 2,
		"ERROR_INVALID_TIMESTAMP": 3,
	}
)

func (x CMsgClientToGCGetPlayerCardRosterResponse_Result) Enum() *CMsgClientToGCGetPlayerCardRosterResponse_Result {
	p := new(CMsgClientToGCGetPlayerCardRosterResponse_Result)
	*p = x
	return p
}

func (x CMsgClientToGCGetPlayerCardRosterResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCGetPlayerCardRosterResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_fantasy_proto_enumTypes[26].Descriptor()
}

func (CMsgClientToGCGetPlayerCardRosterResponse_Result) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_fantasy_proto_enumTypes[26]
}

func (x CMsgClientToGCGetPlayerCardRosterResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCGetPlayerCardRosterResponse_Result) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCGetPlayerCardRosterResponse_Result(num)
	return nil
}

// Deprecated: Use CMsgClientToGCGetPlayerCardRosterResponse_Result.Descriptor instead.
func (CMsgClientToGCGetPlayerCardRosterResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{69, 0}
}

type CMsgClientToGCSetPlayerCardRosterResponse_Result int32

const (
	CMsgClientToGCSetPlayerCardRosterResponse_SUCCESS                     CMsgClientToGCSetPlayerCardRosterResponse_Result = 0
	CMsgClientToGCSetPlayerCardRosterResponse_ERROR_UNSPECIFIED           CMsgClientToGCSetPlayerCardRosterResponse_Result = 1
	CMsgClientToGCSetPlayerCardRosterResponse_ERROR_INVALID_LEAGUE_ID     CMsgClientToGCSetPlayerCardRosterResponse_Result = 2
	CMsgClientToGCSetPlayerCardRosterResponse_ERROR_INVALID_TIMESTAMP     CMsgClientToGCSetPlayerCardRosterResponse_Result = 3
	CMsgClientToGCSetPlayerCardRosterResponse_ERROR_PLAYER_CARD_NOT_OWNED CMsgClientToGCSetPlayerCardRosterResponse_Result = 4
	CMsgClientToGCSetPlayerCardRosterResponse_ERROR_INVALID_SLOT          CMsgClientToGCSetPlayerCardRosterResponse_Result = 5
	CMsgClientToGCSetPlayerCardRosterResponse_ERROR_FAILED_CARD_INFO      CMsgClientToGCSetPlayerCardRosterResponse_Result = 6
	CMsgClientToGCSetPlayerCardRosterResponse_ERROR_ACCOUNT_DUPLICATE     CMsgClientToGCSetPlayerCardRosterResponse_Result = 7
	CMsgClientToGCSetPlayerCardRosterResponse_ERROR_LOCKED_TIMESTAMP      CMsgClientToGCSetPlayerCardRosterResponse_Result = 8
)

// Enum value maps for CMsgClientToGCSetPlayerCardRosterResponse_Result.
var (
	CMsgClientToGCSetPlayerCardRosterResponse_Result_name = map[int32]string{
		0: "SUCCESS",
		1: "ERROR_UNSPECIFIED",
		2: "ERROR_INVALID_LEAGUE_ID",
		3: "ERROR_INVALID_TIMESTAMP",
		4: "ERROR_PLAYER_CARD_NOT_OWNED",
		5: "ERROR_INVALID_SLOT",
		6: "ERROR_FAILED_CARD_INFO",
		7: "ERROR_ACCOUNT_DUPLICATE",
		8: "ERROR_LOCKED_TIMESTAMP",
	}
	CMsgClientToGCSetPlayerCardRosterResponse_Result_value = map[string]int32{
		"SUCCESS":                     0,
		"ERROR_UNSPECIFIED":           1,
		"ERROR_INVALID_LEAGUE_ID":     2,
		"ERROR_INVALID_TIMESTAMP":     3,
		"ERROR_PLAYER_CARD_NOT_OWNED": 4,
		"ERROR_INVALID_SLOT":          5,
		"ERROR_FAILED_CARD_INFO":      6,
		"ERROR_ACCOUNT_DUPLICATE":     7,
		"ERROR_LOCKED_TIMESTAMP":      8,
	}
)

func (x CMsgClientToGCSetPlayerCardRosterResponse_Result) Enum() *CMsgClientToGCSetPlayerCardRosterResponse_Result {
	p := new(CMsgClientToGCSetPlayerCardRosterResponse_Result)
	*p = x
	return p
}

func (x CMsgClientToGCSetPlayerCardRosterResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCSetPlayerCardRosterResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_fantasy_proto_enumTypes[27].Descriptor()
}

func (CMsgClientToGCSetPlayerCardRosterResponse_Result) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_fantasy_proto_enumTypes[27]
}

func (x CMsgClientToGCSetPlayerCardRosterResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCSetPlayerCardRosterResponse_Result) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCSetPlayerCardRosterResponse_Result(num)
	return nil
}

// Deprecated: Use CMsgClientToGCSetPlayerCardRosterResponse_Result.Descriptor instead.
func (CMsgClientToGCSetPlayerCardRosterResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{71, 0}
}

type CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus int32

const (
	CMsgDOTAFantasyDPCLeagueStatus_UNSET     CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus = 0
	CMsgDOTAFantasyDPCLeagueStatus_PARTIAL   CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus = 1
	CMsgDOTAFantasyDPCLeagueStatus_FULL      CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus = 2
	CMsgDOTAFantasyDPCLeagueStatus_CONCLUDED CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus = 3
)

// Enum value maps for CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus.
var (
	CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus_name = map[int32]string{
		0: "UNSET",
		1: "PARTIAL",
		2: "FULL",
		3: "CONCLUDED",
	}
	CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus_value = map[string]int32{
		"UNSET":     0,
		"PARTIAL":   1,
		"FULL":      2,
		"CONCLUDED": 3,
	}
)

func (x CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus) Enum() *CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus {
	p := new(CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus)
	*p = x
	return p
}

func (x CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_fantasy_proto_enumTypes[28].Descriptor()
}

func (CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_fantasy_proto_enumTypes[28]
}

func (x CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus(num)
	return nil
}

// Deprecated: Use CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus.Descriptor instead.
func (CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{72, 0}
}

type CMsgDOTAPlayerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId     *uint32                          `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Name          *string                          `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	CountryCode   *string                          `protobuf:"bytes,3,opt,name=country_code,json=countryCode" json:"country_code,omitempty"`
	FantasyRole   *Fantasy_Roles                   `protobuf:"varint,4,opt,name=fantasy_role,json=fantasyRole,enum=dota.Fantasy_Roles,def=0" json:"fantasy_role,omitempty"`
	TeamId        *uint32                          `protobuf:"varint,5,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	TeamName      *string                          `protobuf:"bytes,6,opt,name=team_name,json=teamName" json:"team_name,omitempty"`
	TeamTag       *string                          `protobuf:"bytes,7,opt,name=team_tag,json=teamTag" json:"team_tag,omitempty"`
	Sponsor       *string                          `protobuf:"bytes,8,opt,name=sponsor" json:"sponsor,omitempty"`
	IsLocked      *bool                            `protobuf:"varint,9,opt,name=is_locked,json=isLocked" json:"is_locked,omitempty"`
	IsPro         *bool                            `protobuf:"varint,10,opt,name=is_pro,json=isPro" json:"is_pro,omitempty"`
	RealName      *string                          `protobuf:"bytes,11,opt,name=real_name,json=realName" json:"real_name,omitempty"`
	Birthdate     *uint32                          `protobuf:"varint,12,opt,name=birthdate" json:"birthdate,omitempty"`
	TotalEarnings *uint32                          `protobuf:"varint,13,opt,name=total_earnings,json=totalEarnings" json:"total_earnings,omitempty"`
	Results       []*CMsgDOTAPlayerInfo_Results    `protobuf:"bytes,14,rep,name=results" json:"results,omitempty"`
	TeamUrlLogo   *string                          `protobuf:"bytes,15,opt,name=team_url_logo,json=teamUrlLogo" json:"team_url_logo,omitempty"`
	AuditEntries  []*CMsgDOTAPlayerInfo_AuditEntry `protobuf:"bytes,16,rep,name=audit_entries,json=auditEntries" json:"audit_entries,omitempty"`
}

// Default values for CMsgDOTAPlayerInfo fields.
const (
	Default_CMsgDOTAPlayerInfo_FantasyRole = Fantasy_Roles_FANTASY_ROLE_UNDEFINED
)

func (x *CMsgDOTAPlayerInfo) Reset() {
	*x = CMsgDOTAPlayerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAPlayerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAPlayerInfo) ProtoMessage() {}

func (x *CMsgDOTAPlayerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAPlayerInfo.ProtoReflect.Descriptor instead.
func (*CMsgDOTAPlayerInfo) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{0}
}

func (x *CMsgDOTAPlayerInfo) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgDOTAPlayerInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CMsgDOTAPlayerInfo) GetCountryCode() string {
	if x != nil && x.CountryCode != nil {
		return *x.CountryCode
	}
	return ""
}

func (x *CMsgDOTAPlayerInfo) GetFantasyRole() Fantasy_Roles {
	if x != nil && x.FantasyRole != nil {
		return *x.FantasyRole
	}
	return Default_CMsgDOTAPlayerInfo_FantasyRole
}

func (x *CMsgDOTAPlayerInfo) GetTeamId() uint32 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

func (x *CMsgDOTAPlayerInfo) GetTeamName() string {
	if x != nil && x.TeamName != nil {
		return *x.TeamName
	}
	return ""
}

func (x *CMsgDOTAPlayerInfo) GetTeamTag() string {
	if x != nil && x.TeamTag != nil {
		return *x.TeamTag
	}
	return ""
}

func (x *CMsgDOTAPlayerInfo) GetSponsor() string {
	if x != nil && x.Sponsor != nil {
		return *x.Sponsor
	}
	return ""
}

func (x *CMsgDOTAPlayerInfo) GetIsLocked() bool {
	if x != nil && x.IsLocked != nil {
		return *x.IsLocked
	}
	return false
}

func (x *CMsgDOTAPlayerInfo) GetIsPro() bool {
	if x != nil && x.IsPro != nil {
		return *x.IsPro
	}
	return false
}

func (x *CMsgDOTAPlayerInfo) GetRealName() string {
	if x != nil && x.RealName != nil {
		return *x.RealName
	}
	return ""
}

func (x *CMsgDOTAPlayerInfo) GetBirthdate() uint32 {
	if x != nil && x.Birthdate != nil {
		return *x.Birthdate
	}
	return 0
}

func (x *CMsgDOTAPlayerInfo) GetTotalEarnings() uint32 {
	if x != nil && x.TotalEarnings != nil {
		return *x.TotalEarnings
	}
	return 0
}

func (x *CMsgDOTAPlayerInfo) GetResults() []*CMsgDOTAPlayerInfo_Results {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *CMsgDOTAPlayerInfo) GetTeamUrlLogo() string {
	if x != nil && x.TeamUrlLogo != nil {
		return *x.TeamUrlLogo
	}
	return ""
}

func (x *CMsgDOTAPlayerInfo) GetAuditEntries() []*CMsgDOTAPlayerInfo_AuditEntry {
	if x != nil {
		return x.AuditEntries
	}
	return nil
}

type CMsgDOTAPlayerInfoList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerInfos []*CMsgDOTAPlayerInfo `protobuf:"bytes,1,rep,name=player_infos,json=playerInfos" json:"player_infos,omitempty"`
}

func (x *CMsgDOTAPlayerInfoList) Reset() {
	*x = CMsgDOTAPlayerInfoList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAPlayerInfoList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAPlayerInfoList) ProtoMessage() {}

func (x *CMsgDOTAPlayerInfoList) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAPlayerInfoList.ProtoReflect.Descriptor instead.
func (*CMsgDOTAPlayerInfoList) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{1}
}

func (x *CMsgDOTAPlayerInfoList) GetPlayerInfos() []*CMsgDOTAPlayerInfo {
	if x != nil {
		return x.PlayerInfos
	}
	return nil
}

type CMsgDOTADPCProfileInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerInfo            *CMsgDOTAPlayerInfo                    `protobuf:"bytes,1,opt,name=player_info,json=playerInfo" json:"player_info,omitempty"`
	PredictionInfo        *CMsgDOTADPCProfileInfo_PredictionInfo `protobuf:"bytes,2,opt,name=prediction_info,json=predictionInfo" json:"prediction_info,omitempty"`
	FantasyInfo           *CMsgDOTADPCProfileInfo_FantasyInfo    `protobuf:"bytes,3,opt,name=fantasy_info,json=fantasyInfo" json:"fantasy_info,omitempty"`
	DisabledNotifications []uint32                               `protobuf:"varint,4,rep,name=disabled_notifications,json=disabledNotifications" json:"disabled_notifications,omitempty"`
}

func (x *CMsgDOTADPCProfileInfo) Reset() {
	*x = CMsgDOTADPCProfileInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTADPCProfileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTADPCProfileInfo) ProtoMessage() {}

func (x *CMsgDOTADPCProfileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTADPCProfileInfo.ProtoReflect.Descriptor instead.
func (*CMsgDOTADPCProfileInfo) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{2}
}

func (x *CMsgDOTADPCProfileInfo) GetPlayerInfo() *CMsgDOTAPlayerInfo {
	if x != nil {
		return x.PlayerInfo
	}
	return nil
}

func (x *CMsgDOTADPCProfileInfo) GetPredictionInfo() *CMsgDOTADPCProfileInfo_PredictionInfo {
	if x != nil {
		return x.PredictionInfo
	}
	return nil
}

func (x *CMsgDOTADPCProfileInfo) GetFantasyInfo() *CMsgDOTADPCProfileInfo_FantasyInfo {
	if x != nil {
		return x.FantasyInfo
	}
	return nil
}

func (x *CMsgDOTADPCProfileInfo) GetDisabledNotifications() []uint32 {
	if x != nil {
		return x.DisabledNotifications
	}
	return nil
}

type CMsgDOTALeaderboards struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Leaderboards []*CMsgDOTALeaderboards_RegionLeaderboard `protobuf:"bytes,2,rep,name=leaderboards" json:"leaderboards,omitempty"`
}

func (x *CMsgDOTALeaderboards) Reset() {
	*x = CMsgDOTALeaderboards{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTALeaderboards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTALeaderboards) ProtoMessage() {}

func (x *CMsgDOTALeaderboards) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTALeaderboards.ProtoReflect.Descriptor instead.
func (*CMsgDOTALeaderboards) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{3}
}

func (x *CMsgDOTALeaderboards) GetLeaderboards() []*CMsgDOTALeaderboards_RegionLeaderboard {
	if x != nil {
		return x.Leaderboards
	}
	return nil
}

type CMsgDOTACreateFantasyLeagueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeagueName    *string                 `protobuf:"bytes,1,opt,name=league_name,json=leagueName" json:"league_name,omitempty"`
	LeagueLogo    *uint64                 `protobuf:"varint,2,opt,name=league_logo,json=leagueLogo" json:"league_logo,omitempty"`
	SelectionMode *Fantasy_Selection_Mode `protobuf:"varint,3,opt,name=selection_mode,json=selectionMode,enum=dota.Fantasy_Selection_Mode,def=0" json:"selection_mode,omitempty"`
	TeamCount     *uint32                 `protobuf:"varint,4,opt,name=team_count,json=teamCount" json:"team_count,omitempty"`
}

// Default values for CMsgDOTACreateFantasyLeagueRequest fields.
const (
	Default_CMsgDOTACreateFantasyLeagueRequest_SelectionMode = Fantasy_Selection_Mode_FANTASY_SELECTION_INVALID
)

func (x *CMsgDOTACreateFantasyLeagueRequest) Reset() {
	*x = CMsgDOTACreateFantasyLeagueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTACreateFantasyLeagueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTACreateFantasyLeagueRequest) ProtoMessage() {}

func (x *CMsgDOTACreateFantasyLeagueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTACreateFantasyLeagueRequest.ProtoReflect.Descriptor instead.
func (*CMsgDOTACreateFantasyLeagueRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{4}
}

func (x *CMsgDOTACreateFantasyLeagueRequest) GetLeagueName() string {
	if x != nil && x.LeagueName != nil {
		return *x.LeagueName
	}
	return ""
}

func (x *CMsgDOTACreateFantasyLeagueRequest) GetLeagueLogo() uint64 {
	if x != nil && x.LeagueLogo != nil {
		return *x.LeagueLogo
	}
	return 0
}

func (x *CMsgDOTACreateFantasyLeagueRequest) GetSelectionMode() Fantasy_Selection_Mode {
	if x != nil && x.SelectionMode != nil {
		return *x.SelectionMode
	}
	return Default_CMsgDOTACreateFantasyLeagueRequest_SelectionMode
}

func (x *CMsgDOTACreateFantasyLeagueRequest) GetTeamCount() uint32 {
	if x != nil && x.TeamCount != nil {
		return *x.TeamCount
	}
	return 0
}

type CMsgDOTACreateFantasyLeagueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *CMsgDOTACreateFantasyLeagueResponse_EResult `protobuf:"varint,1,opt,name=result,enum=dota.CMsgDOTACreateFantasyLeagueResponse_EResult,def=0" json:"result,omitempty"`
}

// Default values for CMsgDOTACreateFantasyLeagueResponse fields.
const (
	Default_CMsgDOTACreateFantasyLeagueResponse_Result = CMsgDOTACreateFantasyLeagueResponse_SUCCESS
)

func (x *CMsgDOTACreateFantasyLeagueResponse) Reset() {
	*x = CMsgDOTACreateFantasyLeagueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTACreateFantasyLeagueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTACreateFantasyLeagueResponse) ProtoMessage() {}

func (x *CMsgDOTACreateFantasyLeagueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTACreateFantasyLeagueResponse.ProtoReflect.Descriptor instead.
func (*CMsgDOTACreateFantasyLeagueResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{5}
}

func (x *CMsgDOTACreateFantasyLeagueResponse) GetResult() CMsgDOTACreateFantasyLeagueResponse_EResult {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgDOTACreateFantasyLeagueResponse_Result
}

type CMsgFantasyLeagueScoring struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level                  *float32 `protobuf:"fixed32,1,opt,name=level" json:"level,omitempty"`
	Kills                  *float32 `protobuf:"fixed32,2,opt,name=kills" json:"kills,omitempty"`
	Deaths                 *float32 `protobuf:"fixed32,3,opt,name=deaths" json:"deaths,omitempty"`
	Assists                *float32 `protobuf:"fixed32,4,opt,name=assists" json:"assists,omitempty"`
	LastHits               *float32 `protobuf:"fixed32,5,opt,name=last_hits,json=lastHits" json:"last_hits,omitempty"`
	Denies                 *float32 `protobuf:"fixed32,6,opt,name=denies" json:"denies,omitempty"`
	Gpm                    *float32 `protobuf:"fixed32,7,opt,name=gpm" json:"gpm,omitempty"`
	Xppm                   *float32 `protobuf:"fixed32,8,opt,name=xppm" json:"xppm,omitempty"`
	Stuns                  *float32 `protobuf:"fixed32,9,opt,name=stuns" json:"stuns,omitempty"`
	Healing                *float32 `protobuf:"fixed32,10,opt,name=healing" json:"healing,omitempty"`
	TowerKills             *float32 `protobuf:"fixed32,11,opt,name=tower_kills,json=towerKills" json:"tower_kills,omitempty"`
	RoshanKills            *float32 `protobuf:"fixed32,12,opt,name=roshan_kills,json=roshanKills" json:"roshan_kills,omitempty"`
	MultiplierPremium      *float32 `protobuf:"fixed32,13,opt,name=multiplier_premium,json=multiplierPremium" json:"multiplier_premium,omitempty"`
	MultiplierProfessional *float32 `protobuf:"fixed32,14,opt,name=multiplier_professional,json=multiplierProfessional" json:"multiplier_professional,omitempty"`
}

func (x *CMsgFantasyLeagueScoring) Reset() {
	*x = CMsgFantasyLeagueScoring{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgFantasyLeagueScoring) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgFantasyLeagueScoring) ProtoMessage() {}

func (x *CMsgFantasyLeagueScoring) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgFantasyLeagueScoring.ProtoReflect.Descriptor instead.
func (*CMsgFantasyLeagueScoring) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{6}
}

func (x *CMsgFantasyLeagueScoring) GetLevel() float32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *CMsgFantasyLeagueScoring) GetKills() float32 {
	if x != nil && x.Kills != nil {
		return *x.Kills
	}
	return 0
}

func (x *CMsgFantasyLeagueScoring) GetDeaths() float32 {
	if x != nil && x.Deaths != nil {
		return *x.Deaths
	}
	return 0
}

func (x *CMsgFantasyLeagueScoring) GetAssists() float32 {
	if x != nil && x.Assists != nil {
		return *x.Assists
	}
	return 0
}

func (x *CMsgFantasyLeagueScoring) GetLastHits() float32 {
	if x != nil && x.LastHits != nil {
		return *x.LastHits
	}
	return 0
}

func (x *CMsgFantasyLeagueScoring) GetDenies() float32 {
	if x != nil && x.Denies != nil {
		return *x.Denies
	}
	return 0
}

func (x *CMsgFantasyLeagueScoring) GetGpm() float32 {
	if x != nil && x.Gpm != nil {
		return *x.Gpm
	}
	return 0
}

func (x *CMsgFantasyLeagueScoring) GetXppm() float32 {
	if x != nil && x.Xppm != nil {
		return *x.Xppm
	}
	return 0
}

func (x *CMsgFantasyLeagueScoring) GetStuns() float32 {
	if x != nil && x.Stuns != nil {
		return *x.Stuns
	}
	return 0
}

func (x *CMsgFantasyLeagueScoring) GetHealing() float32 {
	if x != nil && x.Healing != nil {
		return *x.Healing
	}
	return 0
}

func (x *CMsgFantasyLeagueScoring) GetTowerKills() float32 {
	if x != nil && x.TowerKills != nil {
		return *x.TowerKills
	}
	return 0
}

func (x *CMsgFantasyLeagueScoring) GetRoshanKills() float32 {
	if x != nil && x.RoshanKills != nil {
		return *x.RoshanKills
	}
	return 0
}

func (x *CMsgFantasyLeagueScoring) GetMultiplierPremium() float32 {
	if x != nil && x.MultiplierPremium != nil {
		return *x.MultiplierPremium
	}
	return 0
}

func (x *CMsgFantasyLeagueScoring) GetMultiplierProfessional() float32 {
	if x != nil && x.MultiplierProfessional != nil {
		return *x.MultiplierProfessional
	}
	return 0
}

type CMsgDOTAFantasyLeagueInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FantasyLeagueId       *uint32                                `protobuf:"varint,1,opt,name=fantasy_league_id,json=fantasyLeagueId" json:"fantasy_league_id,omitempty"`
	CommissionerAccountId *uint32                                `protobuf:"varint,2,opt,name=commissioner_account_id,json=commissionerAccountId" json:"commissioner_account_id,omitempty"`
	FantasyLeagueName     *string                                `protobuf:"bytes,3,opt,name=fantasy_league_name,json=fantasyLeagueName" json:"fantasy_league_name,omitempty"`
	SelectionMode         *Fantasy_Selection_Mode                `protobuf:"varint,4,opt,name=selection_mode,json=selectionMode,enum=dota.Fantasy_Selection_Mode,def=0" json:"selection_mode,omitempty"`
	TeamCount             *uint32                                `protobuf:"varint,5,opt,name=team_count,json=teamCount" json:"team_count,omitempty"`
	Logo                  *uint64                                `protobuf:"varint,6,opt,name=logo" json:"logo,omitempty"`
	Scoring               *CMsgFantasyLeagueScoring              `protobuf:"bytes,7,opt,name=scoring" json:"scoring,omitempty"`
	DraftTime             *uint32                                `protobuf:"varint,12,opt,name=draft_time,json=draftTime" json:"draft_time,omitempty"`
	DraftPickTime         *uint32                                `protobuf:"varint,13,opt,name=draft_pick_time,json=draftPickTime" json:"draft_pick_time,omitempty"`
	SeasonStart           *uint32                                `protobuf:"varint,15,opt,name=season_start,json=seasonStart" json:"season_start,omitempty"`
	SeasonLength          *uint32                                `protobuf:"varint,16,opt,name=season_length,json=seasonLength" json:"season_length,omitempty"`
	VetoVotes             *uint32                                `protobuf:"varint,17,opt,name=veto_votes,json=vetoVotes" json:"veto_votes,omitempty"`
	Acquisitions          *uint32                                `protobuf:"varint,18,opt,name=acquisitions" json:"acquisitions,omitempty"`
	Slot_1                *uint32                                `protobuf:"varint,19,opt,name=slot_1,json=slot1" json:"slot_1,omitempty"`
	Slot_2                *uint32                                `protobuf:"varint,20,opt,name=slot_2,json=slot2" json:"slot_2,omitempty"`
	Slot_3                *uint32                                `protobuf:"varint,21,opt,name=slot_3,json=slot3" json:"slot_3,omitempty"`
	Slot_4                *uint32                                `protobuf:"varint,22,opt,name=slot_4,json=slot4" json:"slot_4,omitempty"`
	Slot_5                *uint32                                `protobuf:"varint,23,opt,name=slot_5,json=slot5" json:"slot_5,omitempty"`
	BenchSlots            *uint32                                `protobuf:"varint,24,opt,name=bench_slots,json=benchSlots" json:"bench_slots,omitempty"`
	OwnerInfo             []*CMsgDOTAFantasyLeagueInfo_OwnerInfo `protobuf:"bytes,25,rep,name=owner_info,json=ownerInfo" json:"owner_info,omitempty"`
	Players               []uint32                               `protobuf:"varint,26,rep,name=players" json:"players,omitempty"`
	TimeZone              *uint32                                `protobuf:"varint,27,opt,name=time_zone,json=timeZone" json:"time_zone,omitempty"`
	Season                *uint32                                `protobuf:"varint,28,opt,name=season" json:"season,omitempty"`
	Password              *string                                `protobuf:"bytes,29,opt,name=password" json:"password,omitempty"`
}

// Default values for CMsgDOTAFantasyLeagueInfo fields.
const (
	Default_CMsgDOTAFantasyLeagueInfo_SelectionMode = Fantasy_Selection_Mode_FANTASY_SELECTION_INVALID
)

func (x *CMsgDOTAFantasyLeagueInfo) Reset() {
	*x = CMsgDOTAFantasyLeagueInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAFantasyLeagueInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAFantasyLeagueInfo) ProtoMessage() {}

func (x *CMsgDOTAFantasyLeagueInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAFantasyLeagueInfo.ProtoReflect.Descriptor instead.
func (*CMsgDOTAFantasyLeagueInfo) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{7}
}

func (x *CMsgDOTAFantasyLeagueInfo) GetFantasyLeagueId() uint32 {
	if x != nil && x.FantasyLeagueId != nil {
		return *x.FantasyLeagueId
	}
	return 0
}

func (x *CMsgDOTAFantasyLeagueInfo) GetCommissionerAccountId() uint32 {
	if x != nil && x.CommissionerAccountId != nil {
		return *x.CommissionerAccountId
	}
	return 0
}

func (x *CMsgDOTAFantasyLeagueInfo) GetFantasyLeagueName() string {
	if x != nil && x.FantasyLeagueName != nil {
		return *x.FantasyLeagueName
	}
	return ""
}

func (x *CMsgDOTAFantasyLeagueInfo) GetSelectionMode() Fantasy_Selection_Mode {
	if x != nil && x.SelectionMode != nil {
		return *x.SelectionMode
	}
	return Default_CMsgDOTAFantasyLeagueInfo_SelectionMode
}

func (x *CMsgDOTAFantasyLeagueInfo) GetTeamCount() uint32 {
	if x != nil && x.TeamCount != nil {
		return *x.TeamCount
	}
	return 0
}

func (x *CMsgDOTAFantasyLeagueInfo) GetLogo() uint64 {
	if x != nil && x.Logo != nil {
		return *x.Logo
	}
	return 0
}

func (x *CMsgDOTAFantasyLeagueInfo) GetScoring() *CMsgFantasyLeagueScoring {
	if x != nil {
		return x.Scoring
	}
	return nil
}

func (x *CMsgDOTAFantasyLeagueInfo) GetDraftTime() uint32 {
	if x != nil && x.DraftTime != nil {
		return *x.DraftTime
	}
	return 0
}

func (x *CMsgDOTAFantasyLeagueInfo) GetDraftPickTime() uint32 {
	if x != nil && x.DraftPickTime != nil {
		return *x.DraftPickTime
	}
	return 0
}

func (x *CMsgDOTAFantasyLeagueInfo) GetSeasonStart() uint32 {
	if x != nil && x.SeasonStart != nil {
		return *x.SeasonStart
	}
	return 0
}

func (x *CMsgDOTAFantasyLeagueInfo) GetSeasonLength() uint32 {
	if x != nil && x.SeasonLength != nil {
		return *x.SeasonLength
	}
	return 0
}

func (x *CMsgDOTAFantasyLeagueInfo) GetVetoVotes() uint32 {
	if x != nil && x.VetoVotes != nil {
		return *x.VetoVotes
	}
	return 0
}

func (x *CMsgDOTAFantasyLeagueInfo) GetAcquisitions() uint32 {
	if x != nil && x.Acquisitions != nil {
		return *x.Acquisitions
	}
	return 0
}

func (x *CMsgDOTAFantasyLeagueInfo) GetSlot_1() uint32 {
	if x != nil && x.Slot_1 != nil {
		return *x.Slot_1
	}
	return 0
}

func (x *CMsgDOTAFantasyLeagueInfo) GetSlot_2() uint32 {
	if x != nil && x.Slot_2 != nil {
		return *x.Slot_2
	}
	return 0
}

func (x *CMsgDOTAFantasyLeagueInfo) GetSlot_3() uint32 {
	if x != nil && x.Slot_3 != nil {
		return *x.Slot_3
	}
	return 0
}

func (x *CMsgDOTAFantasyLeagueInfo) GetSlot_4() uint32 {
	if x != nil && x.Slot_4 != nil {
		return *x.Slot_4
	}
	return 0
}

func (x *CMsgDOTAFantasyLeagueInfo) GetSlot_5() uint32 {
	if x != nil && x.Slot_5 != nil {
		return *x.Slot_5
	}
	return 0
}

func (x *CMsgDOTAFantasyLeagueInfo) GetBenchSlots() uint32 {
	if x != nil && x.BenchSlots != nil {
		return *x.BenchSlots
	}
	return 0
}

func (x *CMsgDOTAFantasyLeagueInfo) GetOwnerInfo() []*CMsgDOTAFantasyLeagueInfo_OwnerInfo {
	if x != nil {
		return x.OwnerInfo
	}
	return nil
}

func (x *CMsgDOTAFantasyLeagueInfo) GetPlayers() []uint32 {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *CMsgDOTAFantasyLeagueInfo) GetTimeZone() uint32 {
	if x != nil && x.TimeZone != nil {
		return *x.TimeZone
	}
	return 0
}

func (x *CMsgDOTAFantasyLeagueInfo) GetSeason() uint32 {
	if x != nil && x.Season != nil {
		return *x.Season
	}
	return 0
}

func (x *CMsgDOTAFantasyLeagueInfo) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

type CMsgDOTAFantasyLeagueEditInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FantasyLeagueId *uint32                    `protobuf:"varint,1,opt,name=fantasy_league_id,json=fantasyLeagueId" json:"fantasy_league_id,omitempty"`
	EditInfo        *CMsgDOTAFantasyLeagueInfo `protobuf:"bytes,2,opt,name=edit_info,json=editInfo" json:"edit_info,omitempty"`
}

func (x *CMsgDOTAFantasyLeagueEditInfoRequest) Reset() {
	*x = CMsgDOTAFantasyLeagueEditInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAFantasyLeagueEditInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAFantasyLeagueEditInfoRequest) ProtoMessage() {}

func (x *CMsgDOTAFantasyLeagueEditInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAFantasyLeagueEditInfoRequest.ProtoReflect.Descriptor instead.
func (*CMsgDOTAFantasyLeagueEditInfoRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{8}
}

func (x *CMsgDOTAFantasyLeagueEditInfoRequest) GetFantasyLeagueId() uint32 {
	if x != nil && x.FantasyLeagueId != nil {
		return *x.FantasyLeagueId
	}
	return 0
}

func (x *CMsgDOTAFantasyLeagueEditInfoRequest) GetEditInfo() *CMsgDOTAFantasyLeagueInfo {
	if x != nil {
		return x.EditInfo
	}
	return nil
}

type CMsgDOTAFantasyLeagueEditInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *CMsgDOTAFantasyLeagueEditInfoResponse_EResult `protobuf:"varint,1,opt,name=result,enum=dota.CMsgDOTAFantasyLeagueEditInfoResponse_EResult,def=0" json:"result,omitempty"`
}

// Default values for CMsgDOTAFantasyLeagueEditInfoResponse fields.
const (
	Default_CMsgDOTAFantasyLeagueEditInfoResponse_Result = CMsgDOTAFantasyLeagueEditInfoResponse_SUCCESS
)

func (x *CMsgDOTAFantasyLeagueEditInfoResponse) Reset() {
	*x = CMsgDOTAFantasyLeagueEditInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAFantasyLeagueEditInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAFantasyLeagueEditInfoResponse) ProtoMessage() {}

func (x *CMsgDOTAFantasyLeagueEditInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAFantasyLeagueEditInfoResponse.ProtoReflect.Descriptor instead.
func (*CMsgDOTAFantasyLeagueEditInfoResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{9}
}

func (x *CMsgDOTAFantasyLeagueEditInfoResponse) GetResult() CMsgDOTAFantasyLeagueEditInfoResponse_EResult {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgDOTAFantasyLeagueEditInfoResponse_Result
}

type CMsgDOTAFantasyLeagueFindRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FantasyLeagueId *uint32 `protobuf:"varint,1,opt,name=fantasy_league_id,json=fantasyLeagueId" json:"fantasy_league_id,omitempty"`
	Password        *string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (x *CMsgDOTAFantasyLeagueFindRequest) Reset() {
	*x = CMsgDOTAFantasyLeagueFindRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAFantasyLeagueFindRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAFantasyLeagueFindRequest) ProtoMessage() {}

func (x *CMsgDOTAFantasyLeagueFindRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAFantasyLeagueFindRequest.ProtoReflect.Descriptor instead.
func (*CMsgDOTAFantasyLeagueFindRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{10}
}

func (x *CMsgDOTAFantasyLeagueFindRequest) GetFantasyLeagueId() uint32 {
	if x != nil && x.FantasyLeagueId != nil {
		return *x.FantasyLeagueId
	}
	return 0
}

func (x *CMsgDOTAFantasyLeagueFindRequest) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

type CMsgDOTAFantasyLeagueFindResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result            *CMsgDOTAFantasyLeagueFindResponse_EResult `protobuf:"varint,1,opt,name=result,enum=dota.CMsgDOTAFantasyLeagueFindResponse_EResult,def=0" json:"result,omitempty"`
	FantasyLeagueName *string                                    `protobuf:"bytes,2,opt,name=fantasy_league_name,json=fantasyLeagueName" json:"fantasy_league_name,omitempty"`
	CommissionerName  *string                                    `protobuf:"bytes,3,opt,name=commissioner_name,json=commissionerName" json:"commissioner_name,omitempty"`
}

// Default values for CMsgDOTAFantasyLeagueFindResponse fields.
const (
	Default_CMsgDOTAFantasyLeagueFindResponse_Result = CMsgDOTAFantasyLeagueFindResponse_SUCCESS
)

func (x *CMsgDOTAFantasyLeagueFindResponse) Reset() {
	*x = CMsgDOTAFantasyLeagueFindResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAFantasyLeagueFindResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAFantasyLeagueFindResponse) ProtoMessage() {}

func (x *CMsgDOTAFantasyLeagueFindResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAFantasyLeagueFindResponse.ProtoReflect.Descriptor instead.
func (*CMsgDOTAFantasyLeagueFindResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{11}
}

func (x *CMsgDOTAFantasyLeagueFindResponse) GetResult() CMsgDOTAFantasyLeagueFindResponse_EResult {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgDOTAFantasyLeagueFindResponse_Result
}

func (x *CMsgDOTAFantasyLeagueFindResponse) GetFantasyLeagueName() string {
	if x != nil && x.FantasyLeagueName != nil {
		return *x.FantasyLeagueName
	}
	return ""
}

func (x *CMsgDOTAFantasyLeagueFindResponse) GetCommissionerName() string {
	if x != nil && x.CommissionerName != nil {
		return *x.CommissionerName
	}
	return ""
}

type CMsgDOTAFantasyLeagueInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FantasyLeagueId *uint32 `protobuf:"varint,1,opt,name=fantasy_league_id,json=fantasyLeagueId" json:"fantasy_league_id,omitempty"`
}

func (x *CMsgDOTAFantasyLeagueInfoRequest) Reset() {
	*x = CMsgDOTAFantasyLeagueInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAFantasyLeagueInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAFantasyLeagueInfoRequest) ProtoMessage() {}

func (x *CMsgDOTAFantasyLeagueInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAFantasyLeagueInfoRequest.ProtoReflect.Descriptor instead.
func (*CMsgDOTAFantasyLeagueInfoRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{12}
}

func (x *CMsgDOTAFantasyLeagueInfoRequest) GetFantasyLeagueId() uint32 {
	if x != nil && x.FantasyLeagueId != nil {
		return *x.FantasyLeagueId
	}
	return 0
}

type CMsgDOTAFantasyLeagueInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *CMsgDOTAFantasyLeagueInfoResponse_EResult `protobuf:"varint,1,opt,name=result,enum=dota.CMsgDOTAFantasyLeagueInfoResponse_EResult,def=0" json:"result,omitempty"`
}

// Default values for CMsgDOTAFantasyLeagueInfoResponse fields.
const (
	Default_CMsgDOTAFantasyLeagueInfoResponse_Result = CMsgDOTAFantasyLeagueInfoResponse_SUCCESS
)

func (x *CMsgDOTAFantasyLeagueInfoResponse) Reset() {
	*x = CMsgDOTAFantasyLeagueInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAFantasyLeagueInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAFantasyLeagueInfoResponse) ProtoMessage() {}

func (x *CMsgDOTAFantasyLeagueInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAFantasyLeagueInfoResponse.ProtoReflect.Descriptor instead.
func (*CMsgDOTAFantasyLeagueInfoResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{13}
}

func (x *CMsgDOTAFantasyLeagueInfoResponse) GetResult() CMsgDOTAFantasyLeagueInfoResponse_EResult {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgDOTAFantasyLeagueInfoResponse_Result
}

type CMsgDOTAFantasyLeagueMatchupsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FantasyLeagueId *uint32 `protobuf:"varint,1,opt,name=fantasy_league_id,json=fantasyLeagueId" json:"fantasy_league_id,omitempty"`
}

func (x *CMsgDOTAFantasyLeagueMatchupsRequest) Reset() {
	*x = CMsgDOTAFantasyLeagueMatchupsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAFantasyLeagueMatchupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAFantasyLeagueMatchupsRequest) ProtoMessage() {}

func (x *CMsgDOTAFantasyLeagueMatchupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAFantasyLeagueMatchupsRequest.ProtoReflect.Descriptor instead.
func (*CMsgDOTAFantasyLeagueMatchupsRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{14}
}

func (x *CMsgDOTAFantasyLeagueMatchupsRequest) GetFantasyLeagueId() uint32 {
	if x != nil && x.FantasyLeagueId != nil {
		return *x.FantasyLeagueId
	}
	return 0
}

type CMsgDOTAFantasyLeagueMatchupsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result          *CMsgDOTAFantasyLeagueMatchupsResponse_EResult          `protobuf:"varint,1,opt,name=result,enum=dota.CMsgDOTAFantasyLeagueMatchupsResponse_EResult,def=0" json:"result,omitempty"`
	FantasyLeagueId *uint32                                                 `protobuf:"varint,2,opt,name=fantasy_league_id,json=fantasyLeagueId" json:"fantasy_league_id,omitempty"`
	WeeklyMatchups  []*CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups `protobuf:"bytes,3,rep,name=weekly_matchups,json=weeklyMatchups" json:"weekly_matchups,omitempty"`
}

// Default values for CMsgDOTAFantasyLeagueMatchupsResponse fields.
const (
	Default_CMsgDOTAFantasyLeagueMatchupsResponse_Result = CMsgDOTAFantasyLeagueMatchupsResponse_SUCCESS
)

func (x *CMsgDOTAFantasyLeagueMatchupsResponse) Reset() {
	*x = CMsgDOTAFantasyLeagueMatchupsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAFantasyLeagueMatchupsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAFantasyLeagueMatchupsResponse) ProtoMessage() {}

func (x *CMsgDOTAFantasyLeagueMatchupsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAFantasyLeagueMatchupsResponse.ProtoReflect.Descriptor instead.
func (*CMsgDOTAFantasyLeagueMatchupsResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{15}
}

func (x *CMsgDOTAFantasyLeagueMatchupsResponse) GetResult() CMsgDOTAFantasyLeagueMatchupsResponse_EResult {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgDOTAFantasyLeagueMatchupsResponse_Result
}

func (x *CMsgDOTAFantasyLeagueMatchupsResponse) GetFantasyLeagueId() uint32 {
	if x != nil && x.FantasyLeagueId != nil {
		return *x.FantasyLeagueId
	}
	return 0
}

func (x *CMsgDOTAFantasyLeagueMatchupsResponse) GetWeeklyMatchups() []*CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups {
	if x != nil {
		return x.WeeklyMatchups
	}
	return nil
}

type CMsgDOTAEditFantasyTeamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FantasyLeagueId *uint32 `protobuf:"varint,1,opt,name=fantasy_league_id,json=fantasyLeagueId" json:"fantasy_league_id,omitempty"`
	TeamIndex       *uint32 `protobuf:"varint,2,opt,name=team_index,json=teamIndex" json:"team_index,omitempty"`
	TeamName        *string `protobuf:"bytes,3,opt,name=team_name,json=teamName" json:"team_name,omitempty"`
	TeamLogo        *uint64 `protobuf:"varint,4,opt,name=team_logo,json=teamLogo" json:"team_logo,omitempty"`
}

func (x *CMsgDOTAEditFantasyTeamRequest) Reset() {
	*x = CMsgDOTAEditFantasyTeamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAEditFantasyTeamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAEditFantasyTeamRequest) ProtoMessage() {}

func (x *CMsgDOTAEditFantasyTeamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAEditFantasyTeamRequest.ProtoReflect.Descriptor instead.
func (*CMsgDOTAEditFantasyTeamRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{16}
}

func (x *CMsgDOTAEditFantasyTeamRequest) GetFantasyLeagueId() uint32 {
	if x != nil && x.FantasyLeagueId != nil {
		return *x.FantasyLeagueId
	}
	return 0
}

func (x *CMsgDOTAEditFantasyTeamRequest) GetTeamIndex() uint32 {
	if x != nil && x.TeamIndex != nil {
		return *x.TeamIndex
	}
	return 0
}

func (x *CMsgDOTAEditFantasyTeamRequest) GetTeamName() string {
	if x != nil && x.TeamName != nil {
		return *x.TeamName
	}
	return ""
}

func (x *CMsgDOTAEditFantasyTeamRequest) GetTeamLogo() uint64 {
	if x != nil && x.TeamLogo != nil {
		return *x.TeamLogo
	}
	return 0
}

type CMsgDOTAEditFantasyTeamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *CMsgDOTAEditFantasyTeamResponse_EResult `protobuf:"varint,1,opt,name=result,enum=dota.CMsgDOTAEditFantasyTeamResponse_EResult,def=0" json:"result,omitempty"`
}

// Default values for CMsgDOTAEditFantasyTeamResponse fields.
const (
	Default_CMsgDOTAEditFantasyTeamResponse_Result = CMsgDOTAEditFantasyTeamResponse_SUCCESS
)

func (x *CMsgDOTAEditFantasyTeamResponse) Reset() {
	*x = CMsgDOTAEditFantasyTeamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAEditFantasyTeamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAEditFantasyTeamResponse) ProtoMessage() {}

func (x *CMsgDOTAEditFantasyTeamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAEditFantasyTeamResponse.ProtoReflect.Descriptor instead.
func (*CMsgDOTAEditFantasyTeamResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{17}
}

func (x *CMsgDOTAEditFantasyTeamResponse) GetResult() CMsgDOTAEditFantasyTeamResponse_EResult {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgDOTAEditFantasyTeamResponse_Result
}

type CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FantasyLeagueId *uint32 `protobuf:"varint,1,opt,name=fantasy_league_id,json=fantasyLeagueId" json:"fantasy_league_id,omitempty"`
}

func (x *CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID) Reset() {
	*x = CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID) ProtoMessage() {}

func (x *CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID.ProtoReflect.Descriptor instead.
func (*CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{18}
}

func (x *CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID) GetFantasyLeagueId() uint32 {
	if x != nil && x.FantasyLeagueId != nil {
		return *x.FantasyLeagueId
	}
	return 0
}

type CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerAccountId *uint32 `protobuf:"varint,1,opt,name=owner_account_id,json=ownerAccountId" json:"owner_account_id,omitempty"`
}

func (x *CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID) Reset() {
	*x = CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID) ProtoMessage() {}

func (x *CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID.ProtoReflect.Descriptor instead.
func (*CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{19}
}

func (x *CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID) GetOwnerAccountId() uint32 {
	if x != nil && x.OwnerAccountId != nil {
		return *x.OwnerAccountId
	}
	return 0
}

type CMsgDOTAFantasyTeamInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*CMsgDOTAFantasyTeamInfo `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
}

func (x *CMsgDOTAFantasyTeamInfoResponse) Reset() {
	*x = CMsgDOTAFantasyTeamInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAFantasyTeamInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAFantasyTeamInfoResponse) ProtoMessage() {}

func (x *CMsgDOTAFantasyTeamInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAFantasyTeamInfoResponse.ProtoReflect.Descriptor instead.
func (*CMsgDOTAFantasyTeamInfoResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{20}
}

func (x *CMsgDOTAFantasyTeamInfoResponse) GetResults() []*CMsgDOTAFantasyTeamInfo {
	if x != nil {
		return x.Results
	}
	return nil
}

type CMsgDOTAFantasyTeamInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FantasyLeagueId  *uint32  `protobuf:"varint,1,opt,name=fantasy_league_id,json=fantasyLeagueId" json:"fantasy_league_id,omitempty"`
	OwnerAccountId   *uint32  `protobuf:"varint,2,opt,name=owner_account_id,json=ownerAccountId" json:"owner_account_id,omitempty"`
	FantasyTeamIndex *uint32  `protobuf:"varint,3,opt,name=fantasy_team_index,json=fantasyTeamIndex" json:"fantasy_team_index,omitempty"`
	TeamName         *string  `protobuf:"bytes,4,opt,name=team_name,json=teamName" json:"team_name,omitempty"`
	TeamLogo         *uint64  `protobuf:"varint,5,opt,name=team_logo,json=teamLogo" json:"team_logo,omitempty"`
	Wins             *uint32  `protobuf:"varint,6,opt,name=wins" json:"wins,omitempty"`
	Losses           *uint32  `protobuf:"varint,7,opt,name=losses" json:"losses,omitempty"`
	CurrentRoster    []uint32 `protobuf:"varint,8,rep,name=current_roster,json=currentRoster" json:"current_roster,omitempty"`
}

func (x *CMsgDOTAFantasyTeamInfo) Reset() {
	*x = CMsgDOTAFantasyTeamInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAFantasyTeamInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAFantasyTeamInfo) ProtoMessage() {}

func (x *CMsgDOTAFantasyTeamInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAFantasyTeamInfo.ProtoReflect.Descriptor instead.
func (*CMsgDOTAFantasyTeamInfo) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{21}
}

func (x *CMsgDOTAFantasyTeamInfo) GetFantasyLeagueId() uint32 {
	if x != nil && x.FantasyLeagueId != nil {
		return *x.FantasyLeagueId
	}
	return 0
}

func (x *CMsgDOTAFantasyTeamInfo) GetOwnerAccountId() uint32 {
	if x != nil && x.OwnerAccountId != nil {
		return *x.OwnerAccountId
	}
	return 0
}

func (x *CMsgDOTAFantasyTeamInfo) GetFantasyTeamIndex() uint32 {
	if x != nil && x.FantasyTeamIndex != nil {
		return *x.FantasyTeamIndex
	}
	return 0
}

func (x *CMsgDOTAFantasyTeamInfo) GetTeamName() string {
	if x != nil && x.TeamName != nil {
		return *x.TeamName
	}
	return ""
}

func (x *CMsgDOTAFantasyTeamInfo) GetTeamLogo() uint64 {
	if x != nil && x.TeamLogo != nil {
		return *x.TeamLogo
	}
	return 0
}

func (x *CMsgDOTAFantasyTeamInfo) GetWins() uint32 {
	if x != nil && x.Wins != nil {
		return *x.Wins
	}
	return 0
}

func (x *CMsgDOTAFantasyTeamInfo) GetLosses() uint32 {
	if x != nil && x.Losses != nil {
		return *x.Losses
	}
	return 0
}

func (x *CMsgDOTAFantasyTeamInfo) GetCurrentRoster() []uint32 {
	if x != nil {
		return x.CurrentRoster
	}
	return nil
}

type CMsgDOTAFantasyTeamScoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FantasyLeagueId  *uint32 `protobuf:"varint,1,opt,name=fantasy_league_id,json=fantasyLeagueId" json:"fantasy_league_id,omitempty"`
	OwnerAccountId   *uint32 `protobuf:"varint,2,opt,name=owner_account_id,json=ownerAccountId" json:"owner_account_id,omitempty"`
	FantasyTeamIndex *uint32 `protobuf:"varint,3,opt,name=fantasy_team_index,json=fantasyTeamIndex" json:"fantasy_team_index,omitempty"`
	FilterMatchId    *uint64 `protobuf:"varint,4,opt,name=filter_match_id,json=filterMatchId" json:"filter_match_id,omitempty"`
	FilterStartTime  *uint32 `protobuf:"varint,5,opt,name=filter_start_time,json=filterStartTime" json:"filter_start_time,omitempty"`
	FilterEndTime    *uint32 `protobuf:"varint,6,opt,name=filter_end_time,json=filterEndTime" json:"filter_end_time,omitempty"`
	IncludeBench     *bool   `protobuf:"varint,7,opt,name=include_bench,json=includeBench" json:"include_bench,omitempty"`
}

func (x *CMsgDOTAFantasyTeamScoreRequest) Reset() {
	*x = CMsgDOTAFantasyTeamScoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAFantasyTeamScoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAFantasyTeamScoreRequest) ProtoMessage() {}

func (x *CMsgDOTAFantasyTeamScoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAFantasyTeamScoreRequest.ProtoReflect.Descriptor instead.
func (*CMsgDOTAFantasyTeamScoreRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{22}
}

func (x *CMsgDOTAFantasyTeamScoreRequest) GetFantasyLeagueId() uint32 {
	if x != nil && x.FantasyLeagueId != nil {
		return *x.FantasyLeagueId
	}
	return 0
}

func (x *CMsgDOTAFantasyTeamScoreRequest) GetOwnerAccountId() uint32 {
	if x != nil && x.OwnerAccountId != nil {
		return *x.OwnerAccountId
	}
	return 0
}

func (x *CMsgDOTAFantasyTeamScoreRequest) GetFantasyTeamIndex() uint32 {
	if x != nil && x.FantasyTeamIndex != nil {
		return *x.FantasyTeamIndex
	}
	return 0
}

func (x *CMsgDOTAFantasyTeamScoreRequest) GetFilterMatchId() uint64 {
	if x != nil && x.FilterMatchId != nil {
		return *x.FilterMatchId
	}
	return 0
}

func (x *CMsgDOTAFantasyTeamScoreRequest) GetFilterStartTime() uint32 {
	if x != nil && x.FilterStartTime != nil {
		return *x.FilterStartTime
	}
	return 0
}

func (x *CMsgDOTAFantasyTeamScoreRequest) GetFilterEndTime() uint32 {
	if x != nil && x.FilterEndTime != nil {
		return *x.FilterEndTime
	}
	return 0
}

func (x *CMsgDOTAFantasyTeamScoreRequest) GetIncludeBench() bool {
	if x != nil && x.IncludeBench != nil {
		return *x.IncludeBench
	}
	return false
}

type CMsgDOTAFantasyTeamScoreResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result             *CMsgDOTAFantasyTeamScoreResponse_EResult           `protobuf:"varint,1,opt,name=result,enum=dota.CMsgDOTAFantasyTeamScoreResponse_EResult,def=0" json:"result,omitempty"`
	FantasyTeamScore   *float32                                            `protobuf:"fixed32,2,opt,name=fantasy_team_score,json=fantasyTeamScore" json:"fantasy_team_score,omitempty"`
	FantasyPlayerScore []*CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore `protobuf:"bytes,3,rep,name=fantasy_player_score,json=fantasyPlayerScore" json:"fantasy_player_score,omitempty"`
}

// Default values for CMsgDOTAFantasyTeamScoreResponse fields.
const (
	Default_CMsgDOTAFantasyTeamScoreResponse_Result = CMsgDOTAFantasyTeamScoreResponse_SUCCESS
)

func (x *CMsgDOTAFantasyTeamScoreResponse) Reset() {
	*x = CMsgDOTAFantasyTeamScoreResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAFantasyTeamScoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAFantasyTeamScoreResponse) ProtoMessage() {}

func (x *CMsgDOTAFantasyTeamScoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAFantasyTeamScoreResponse.ProtoReflect.Descriptor instead.
func (*CMsgDOTAFantasyTeamScoreResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{23}
}

func (x *CMsgDOTAFantasyTeamScoreResponse) GetResult() CMsgDOTAFantasyTeamScoreResponse_EResult {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgDOTAFantasyTeamScoreResponse_Result
}

func (x *CMsgDOTAFantasyTeamScoreResponse) GetFantasyTeamScore() float32 {
	if x != nil && x.FantasyTeamScore != nil {
		return *x.FantasyTeamScore
	}
	return 0
}

func (x *CMsgDOTAFantasyTeamScoreResponse) GetFantasyPlayerScore() []*CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore {
	if x != nil {
		return x.FantasyPlayerScore
	}
	return nil
}

type CMsgDOTAFantasyTeamStandingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FantasyLeagueId *uint32 `protobuf:"varint,1,opt,name=fantasy_league_id,json=fantasyLeagueId" json:"fantasy_league_id,omitempty"`
	Count           *uint32 `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	FilterStartTime *uint32 `protobuf:"varint,3,opt,name=filter_start_time,json=filterStartTime" json:"filter_start_time,omitempty"`
	FilterEndTime   *uint32 `protobuf:"varint,4,opt,name=filter_end_time,json=filterEndTime" json:"filter_end_time,omitempty"`
	FilterMatchId   *uint64 `protobuf:"varint,5,opt,name=filter_match_id,json=filterMatchId" json:"filter_match_id,omitempty"`
	FilterLastMatch *bool   `protobuf:"varint,6,opt,name=filter_last_match,json=filterLastMatch" json:"filter_last_match,omitempty"`
	FilterInHall    *bool   `protobuf:"varint,7,opt,name=filter_in_hall,json=filterInHall" json:"filter_in_hall,omitempty"`
}

func (x *CMsgDOTAFantasyTeamStandingsRequest) Reset() {
	*x = CMsgDOTAFantasyTeamStandingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAFantasyTeamStandingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAFantasyTeamStandingsRequest) ProtoMessage() {}

func (x *CMsgDOTAFantasyTeamStandingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAFantasyTeamStandingsRequest.ProtoReflect.Descriptor instead.
func (*CMsgDOTAFantasyTeamStandingsRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{24}
}

func (x *CMsgDOTAFantasyTeamStandingsRequest) GetFantasyLeagueId() uint32 {
	if x != nil && x.FantasyLeagueId != nil {
		return *x.FantasyLeagueId
	}
	return 0
}

func (x *CMsgDOTAFantasyTeamStandingsRequest) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *CMsgDOTAFantasyTeamStandingsRequest) GetFilterStartTime() uint32 {
	if x != nil && x.FilterStartTime != nil {
		return *x.FilterStartTime
	}
	return 0
}

func (x *CMsgDOTAFantasyTeamStandingsRequest) GetFilterEndTime() uint32 {
	if x != nil && x.FilterEndTime != nil {
		return *x.FilterEndTime
	}
	return 0
}

func (x *CMsgDOTAFantasyTeamStandingsRequest) GetFilterMatchId() uint64 {
	if x != nil && x.FilterMatchId != nil {
		return *x.FilterMatchId
	}
	return 0
}

func (x *CMsgDOTAFantasyTeamStandingsRequest) GetFilterLastMatch() bool {
	if x != nil && x.FilterLastMatch != nil {
		return *x.FilterLastMatch
	}
	return false
}

func (x *CMsgDOTAFantasyTeamStandingsRequest) GetFilterInHall() bool {
	if x != nil && x.FilterInHall != nil {
		return *x.FilterInHall
	}
	return false
}

type CMsgDOTAFantasyTeamStandingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result     *CMsgDOTAFantasyTeamStandingsResponse_EResult         `protobuf:"varint,1,opt,name=result,enum=dota.CMsgDOTAFantasyTeamStandingsResponse_EResult,def=0" json:"result,omitempty"`
	TeamScores []*CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore `protobuf:"bytes,3,rep,name=team_scores,json=teamScores" json:"team_scores,omitempty"`
}

// Default values for CMsgDOTAFantasyTeamStandingsResponse fields.
const (
	Default_CMsgDOTAFantasyTeamStandingsResponse_Result = CMsgDOTAFantasyTeamStandingsResponse_SUCCESS
)

func (x *CMsgDOTAFantasyTeamStandingsResponse) Reset() {
	*x = CMsgDOTAFantasyTeamStandingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAFantasyTeamStandingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAFantasyTeamStandingsResponse) ProtoMessage() {}

func (x *CMsgDOTAFantasyTeamStandingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAFantasyTeamStandingsResponse.ProtoReflect.Descriptor instead.
func (*CMsgDOTAFantasyTeamStandingsResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{25}
}

func (x *CMsgDOTAFantasyTeamStandingsResponse) GetResult() CMsgDOTAFantasyTeamStandingsResponse_EResult {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgDOTAFantasyTeamStandingsResponse_Result
}

func (x *CMsgDOTAFantasyTeamStandingsResponse) GetTeamScores() []*CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore {
	if x != nil {
		return x.TeamScores
	}
	return nil
}

type CMsgDOTAFantasyPlayerScoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FantasyLeagueId *uint32 `protobuf:"varint,1,opt,name=fantasy_league_id,json=fantasyLeagueId" json:"fantasy_league_id,omitempty"`
	PlayerAccountId *uint32 `protobuf:"varint,2,opt,name=player_account_id,json=playerAccountId" json:"player_account_id,omitempty"`
	FilterStartTime *uint32 `protobuf:"varint,3,opt,name=filter_start_time,json=filterStartTime" json:"filter_start_time,omitempty"`
	FilterEndTime   *uint32 `protobuf:"varint,4,opt,name=filter_end_time,json=filterEndTime" json:"filter_end_time,omitempty"`
	FilterMatchId   *uint64 `protobuf:"varint,5,opt,name=filter_match_id,json=filterMatchId" json:"filter_match_id,omitempty"`
	FilterLastMatch *bool   `protobuf:"varint,6,opt,name=filter_last_match,json=filterLastMatch" json:"filter_last_match,omitempty"`
}

func (x *CMsgDOTAFantasyPlayerScoreRequest) Reset() {
	*x = CMsgDOTAFantasyPlayerScoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAFantasyPlayerScoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAFantasyPlayerScoreRequest) ProtoMessage() {}

func (x *CMsgDOTAFantasyPlayerScoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAFantasyPlayerScoreRequest.ProtoReflect.Descriptor instead.
func (*CMsgDOTAFantasyPlayerScoreRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{26}
}

func (x *CMsgDOTAFantasyPlayerScoreRequest) GetFantasyLeagueId() uint32 {
	if x != nil && x.FantasyLeagueId != nil {
		return *x.FantasyLeagueId
	}
	return 0
}

func (x *CMsgDOTAFantasyPlayerScoreRequest) GetPlayerAccountId() uint32 {
	if x != nil && x.PlayerAccountId != nil {
		return *x.PlayerAccountId
	}
	return 0
}

func (x *CMsgDOTAFantasyPlayerScoreRequest) GetFilterStartTime() uint32 {
	if x != nil && x.FilterStartTime != nil {
		return *x.FilterStartTime
	}
	return 0
}

func (x *CMsgDOTAFantasyPlayerScoreRequest) GetFilterEndTime() uint32 {
	if x != nil && x.FilterEndTime != nil {
		return *x.FilterEndTime
	}
	return 0
}

func (x *CMsgDOTAFantasyPlayerScoreRequest) GetFilterMatchId() uint64 {
	if x != nil && x.FilterMatchId != nil {
		return *x.FilterMatchId
	}
	return 0
}

func (x *CMsgDOTAFantasyPlayerScoreRequest) GetFilterLastMatch() bool {
	if x != nil && x.FilterLastMatch != nil {
		return *x.FilterLastMatch
	}
	return false
}

type CMsgDOTAFantasyPlayerScoreResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result          *CMsgDOTAFantasyPlayerScoreResponse_EResult `protobuf:"varint,1,opt,name=result,enum=dota.CMsgDOTAFantasyPlayerScoreResponse_EResult,def=0" json:"result,omitempty"`
	FantasyLeagueId *uint32                                     `protobuf:"varint,2,opt,name=fantasy_league_id,json=fantasyLeagueId" json:"fantasy_league_id,omitempty"`
	PlayerAccountId *uint32                                     `protobuf:"varint,3,opt,name=player_account_id,json=playerAccountId" json:"player_account_id,omitempty"`
	PlayerName      *string                                     `protobuf:"bytes,4,opt,name=player_name,json=playerName" json:"player_name,omitempty"`
	Score           *float32                                    `protobuf:"fixed32,5,opt,name=score" json:"score,omitempty"`
}

// Default values for CMsgDOTAFantasyPlayerScoreResponse fields.
const (
	Default_CMsgDOTAFantasyPlayerScoreResponse_Result = CMsgDOTAFantasyPlayerScoreResponse_SUCCESS
)

func (x *CMsgDOTAFantasyPlayerScoreResponse) Reset() {
	*x = CMsgDOTAFantasyPlayerScoreResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAFantasyPlayerScoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAFantasyPlayerScoreResponse) ProtoMessage() {}

func (x *CMsgDOTAFantasyPlayerScoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAFantasyPlayerScoreResponse.ProtoReflect.Descriptor instead.
func (*CMsgDOTAFantasyPlayerScoreResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{27}
}

func (x *CMsgDOTAFantasyPlayerScoreResponse) GetResult() CMsgDOTAFantasyPlayerScoreResponse_EResult {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgDOTAFantasyPlayerScoreResponse_Result
}

func (x *CMsgDOTAFantasyPlayerScoreResponse) GetFantasyLeagueId() uint32 {
	if x != nil && x.FantasyLeagueId != nil {
		return *x.FantasyLeagueId
	}
	return 0
}

func (x *CMsgDOTAFantasyPlayerScoreResponse) GetPlayerAccountId() uint32 {
	if x != nil && x.PlayerAccountId != nil {
		return *x.PlayerAccountId
	}
	return 0
}

func (x *CMsgDOTAFantasyPlayerScoreResponse) GetPlayerName() string {
	if x != nil && x.PlayerName != nil {
		return *x.PlayerName
	}
	return ""
}

func (x *CMsgDOTAFantasyPlayerScoreResponse) GetScore() float32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

type CMsgDOTAFantasyPlayerStandingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FantasyLeagueId *uint32 `protobuf:"varint,1,opt,name=fantasy_league_id,json=fantasyLeagueId" json:"fantasy_league_id,omitempty"`
	Count           *uint32 `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	Role            *uint32 `protobuf:"varint,3,opt,name=role" json:"role,omitempty"`
	FilterStartTime *uint32 `protobuf:"varint,4,opt,name=filter_start_time,json=filterStartTime" json:"filter_start_time,omitempty"`
	FilterEndTime   *uint32 `protobuf:"varint,5,opt,name=filter_end_time,json=filterEndTime" json:"filter_end_time,omitempty"`
	FilterMatchId   *uint64 `protobuf:"varint,6,opt,name=filter_match_id,json=filterMatchId" json:"filter_match_id,omitempty"`
	FilterLastMatch *bool   `protobuf:"varint,7,opt,name=filter_last_match,json=filterLastMatch" json:"filter_last_match,omitempty"`
}

func (x *CMsgDOTAFantasyPlayerStandingsRequest) Reset() {
	*x = CMsgDOTAFantasyPlayerStandingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAFantasyPlayerStandingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAFantasyPlayerStandingsRequest) ProtoMessage() {}

func (x *CMsgDOTAFantasyPlayerStandingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAFantasyPlayerStandingsRequest.ProtoReflect.Descriptor instead.
func (*CMsgDOTAFantasyPlayerStandingsRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{28}
}

func (x *CMsgDOTAFantasyPlayerStandingsRequest) GetFantasyLeagueId() uint32 {
	if x != nil && x.FantasyLeagueId != nil {
		return *x.FantasyLeagueId
	}
	return 0
}

func (x *CMsgDOTAFantasyPlayerStandingsRequest) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *CMsgDOTAFantasyPlayerStandingsRequest) GetRole() uint32 {
	if x != nil && x.Role != nil {
		return *x.Role
	}
	return 0
}

func (x *CMsgDOTAFantasyPlayerStandingsRequest) GetFilterStartTime() uint32 {
	if x != nil && x.FilterStartTime != nil {
		return *x.FilterStartTime
	}
	return 0
}

func (x *CMsgDOTAFantasyPlayerStandingsRequest) GetFilterEndTime() uint32 {
	if x != nil && x.FilterEndTime != nil {
		return *x.FilterEndTime
	}
	return 0
}

func (x *CMsgDOTAFantasyPlayerStandingsRequest) GetFilterMatchId() uint64 {
	if x != nil && x.FilterMatchId != nil {
		return *x.FilterMatchId
	}
	return 0
}

func (x *CMsgDOTAFantasyPlayerStandingsRequest) GetFilterLastMatch() bool {
	if x != nil && x.FilterLastMatch != nil {
		return *x.FilterLastMatch
	}
	return false
}

type CMsgDOTAFantasyPlayerStandingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result          *CMsgDOTAFantasyPlayerStandingsResponse_EResult           `protobuf:"varint,1,opt,name=result,enum=dota.CMsgDOTAFantasyPlayerStandingsResponse_EResult,def=0" json:"result,omitempty"`
	FantasyLeagueId *uint32                                                   `protobuf:"varint,2,opt,name=fantasy_league_id,json=fantasyLeagueId" json:"fantasy_league_id,omitempty"`
	Role            *uint32                                                   `protobuf:"varint,3,opt,name=role" json:"role,omitempty"`
	PlayerScores    []*CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore `protobuf:"bytes,4,rep,name=player_scores,json=playerScores" json:"player_scores,omitempty"`
}

// Default values for CMsgDOTAFantasyPlayerStandingsResponse fields.
const (
	Default_CMsgDOTAFantasyPlayerStandingsResponse_Result = CMsgDOTAFantasyPlayerStandingsResponse_SUCCESS
)

func (x *CMsgDOTAFantasyPlayerStandingsResponse) Reset() {
	*x = CMsgDOTAFantasyPlayerStandingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAFantasyPlayerStandingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAFantasyPlayerStandingsResponse) ProtoMessage() {}

func (x *CMsgDOTAFantasyPlayerStandingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAFantasyPlayerStandingsResponse.ProtoReflect.Descriptor instead.
func (*CMsgDOTAFantasyPlayerStandingsResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{29}
}

func (x *CMsgDOTAFantasyPlayerStandingsResponse) GetResult() CMsgDOTAFantasyPlayerStandingsResponse_EResult {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgDOTAFantasyPlayerStandingsResponse_Result
}

func (x *CMsgDOTAFantasyPlayerStandingsResponse) GetFantasyLeagueId() uint32 {
	if x != nil && x.FantasyLeagueId != nil {
		return *x.FantasyLeagueId
	}
	return 0
}

func (x *CMsgDOTAFantasyPlayerStandingsResponse) GetRole() uint32 {
	if x != nil && x.Role != nil {
		return *x.Role
	}
	return 0
}

func (x *CMsgDOTAFantasyPlayerStandingsResponse) GetPlayerScores() []*CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore {
	if x != nil {
		return x.PlayerScores
	}
	return nil
}

type CMsgDOTAFantasyLeagueCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeasonId          *uint32 `protobuf:"varint,1,opt,name=season_id,json=seasonId" json:"season_id,omitempty"`
	FantasyLeagueName *string `protobuf:"bytes,2,opt,name=fantasy_league_name,json=fantasyLeagueName" json:"fantasy_league_name,omitempty"`
	Password          *string `protobuf:"bytes,3,opt,name=password" json:"password,omitempty"`
	TeamName          *string `protobuf:"bytes,4,opt,name=team_name,json=teamName" json:"team_name,omitempty"`
	Logo              *uint64 `protobuf:"varint,5,opt,name=logo" json:"logo,omitempty"`
	TicketItemId      *uint64 `protobuf:"varint,6,opt,name=ticket_item_id,json=ticketItemId" json:"ticket_item_id,omitempty"`
}

func (x *CMsgDOTAFantasyLeagueCreateRequest) Reset() {
	*x = CMsgDOTAFantasyLeagueCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAFantasyLeagueCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAFantasyLeagueCreateRequest) ProtoMessage() {}

func (x *CMsgDOTAFantasyLeagueCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAFantasyLeagueCreateRequest.ProtoReflect.Descriptor instead.
func (*CMsgDOTAFantasyLeagueCreateRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{30}
}

func (x *CMsgDOTAFantasyLeagueCreateRequest) GetSeasonId() uint32 {
	if x != nil && x.SeasonId != nil {
		return *x.SeasonId
	}
	return 0
}

func (x *CMsgDOTAFantasyLeagueCreateRequest) GetFantasyLeagueName() string {
	if x != nil && x.FantasyLeagueName != nil {
		return *x.FantasyLeagueName
	}
	return ""
}

func (x *CMsgDOTAFantasyLeagueCreateRequest) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

func (x *CMsgDOTAFantasyLeagueCreateRequest) GetTeamName() string {
	if x != nil && x.TeamName != nil {
		return *x.TeamName
	}
	return ""
}

func (x *CMsgDOTAFantasyLeagueCreateRequest) GetLogo() uint64 {
	if x != nil && x.Logo != nil {
		return *x.Logo
	}
	return 0
}

func (x *CMsgDOTAFantasyLeagueCreateRequest) GetTicketItemId() uint64 {
	if x != nil && x.TicketItemId != nil {
		return *x.TicketItemId
	}
	return 0
}

type CMsgDOTAFantasyLeagueCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result          *CMsgDOTAFantasyLeagueCreateResponse_EResult `protobuf:"varint,1,opt,name=result,enum=dota.CMsgDOTAFantasyLeagueCreateResponse_EResult,def=0" json:"result,omitempty"`
	FantasyLeagueId *uint32                                      `protobuf:"varint,2,opt,name=fantasy_league_id,json=fantasyLeagueId" json:"fantasy_league_id,omitempty"`
}

// Default values for CMsgDOTAFantasyLeagueCreateResponse fields.
const (
	Default_CMsgDOTAFantasyLeagueCreateResponse_Result = CMsgDOTAFantasyLeagueCreateResponse_SUCCESS
)

func (x *CMsgDOTAFantasyLeagueCreateResponse) Reset() {
	*x = CMsgDOTAFantasyLeagueCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAFantasyLeagueCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAFantasyLeagueCreateResponse) ProtoMessage() {}

func (x *CMsgDOTAFantasyLeagueCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAFantasyLeagueCreateResponse.ProtoReflect.Descriptor instead.
func (*CMsgDOTAFantasyLeagueCreateResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{31}
}

func (x *CMsgDOTAFantasyLeagueCreateResponse) GetResult() CMsgDOTAFantasyLeagueCreateResponse_EResult {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgDOTAFantasyLeagueCreateResponse_Result
}

func (x *CMsgDOTAFantasyLeagueCreateResponse) GetFantasyLeagueId() uint32 {
	if x != nil && x.FantasyLeagueId != nil {
		return *x.FantasyLeagueId
	}
	return 0
}

type CMsgDOTAFantasyTeamCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FantasyLeagueId *uint32 `protobuf:"varint,1,opt,name=fantasy_league_id,json=fantasyLeagueId" json:"fantasy_league_id,omitempty"`
	Password        *string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
	TeamName        *string `protobuf:"bytes,3,opt,name=team_name,json=teamName" json:"team_name,omitempty"`
	Logo            *uint64 `protobuf:"varint,4,opt,name=logo" json:"logo,omitempty"`
	TicketItemId    *uint64 `protobuf:"varint,5,opt,name=ticket_item_id,json=ticketItemId" json:"ticket_item_id,omitempty"`
}

func (x *CMsgDOTAFantasyTeamCreateRequest) Reset() {
	*x = CMsgDOTAFantasyTeamCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAFantasyTeamCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAFantasyTeamCreateRequest) ProtoMessage() {}

func (x *CMsgDOTAFantasyTeamCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAFantasyTeamCreateRequest.ProtoReflect.Descriptor instead.
func (*CMsgDOTAFantasyTeamCreateRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{32}
}

func (x *CMsgDOTAFantasyTeamCreateRequest) GetFantasyLeagueId() uint32 {
	if x != nil && x.FantasyLeagueId != nil {
		return *x.FantasyLeagueId
	}
	return 0
}

func (x *CMsgDOTAFantasyTeamCreateRequest) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

func (x *CMsgDOTAFantasyTeamCreateRequest) GetTeamName() string {
	if x != nil && x.TeamName != nil {
		return *x.TeamName
	}
	return ""
}

func (x *CMsgDOTAFantasyTeamCreateRequest) GetLogo() uint64 {
	if x != nil && x.Logo != nil {
		return *x.Logo
	}
	return 0
}

func (x *CMsgDOTAFantasyTeamCreateRequest) GetTicketItemId() uint64 {
	if x != nil && x.TicketItemId != nil {
		return *x.TicketItemId
	}
	return 0
}

type CMsgDOTAFantasyTeamCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result           *CMsgDOTAFantasyTeamCreateResponse_EResult `protobuf:"varint,1,opt,name=result,enum=dota.CMsgDOTAFantasyTeamCreateResponse_EResult,def=0" json:"result,omitempty"`
	FantasyTeamIndex *uint32                                    `protobuf:"varint,2,opt,name=fantasy_team_index,json=fantasyTeamIndex" json:"fantasy_team_index,omitempty"`
}

// Default values for CMsgDOTAFantasyTeamCreateResponse fields.
const (
	Default_CMsgDOTAFantasyTeamCreateResponse_Result = CMsgDOTAFantasyTeamCreateResponse_SUCCESS
)

func (x *CMsgDOTAFantasyTeamCreateResponse) Reset() {
	*x = CMsgDOTAFantasyTeamCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAFantasyTeamCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAFantasyTeamCreateResponse) ProtoMessage() {}

func (x *CMsgDOTAFantasyTeamCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAFantasyTeamCreateResponse.ProtoReflect.Descriptor instead.
func (*CMsgDOTAFantasyTeamCreateResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{33}
}

func (x *CMsgDOTAFantasyTeamCreateResponse) GetResult() CMsgDOTAFantasyTeamCreateResponse_EResult {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgDOTAFantasyTeamCreateResponse_Result
}

func (x *CMsgDOTAFantasyTeamCreateResponse) GetFantasyTeamIndex() uint32 {
	if x != nil && x.FantasyTeamIndex != nil {
		return *x.FantasyTeamIndex
	}
	return 0
}

type CMsgDOTAFantasyLeagueEditInvitesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FantasyLeagueId *uint32                                                 `protobuf:"varint,1,opt,name=fantasy_league_id,json=fantasyLeagueId" json:"fantasy_league_id,omitempty"`
	Password        *string                                                 `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
	InviteChange    []*CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange `protobuf:"bytes,3,rep,name=invite_change,json=inviteChange" json:"invite_change,omitempty"`
}

func (x *CMsgDOTAFantasyLeagueEditInvitesRequest) Reset() {
	*x = CMsgDOTAFantasyLeagueEditInvitesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAFantasyLeagueEditInvitesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAFantasyLeagueEditInvitesRequest) ProtoMessage() {}

func (x *CMsgDOTAFantasyLeagueEditInvitesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAFantasyLeagueEditInvitesRequest.ProtoReflect.Descriptor instead.
func (*CMsgDOTAFantasyLeagueEditInvitesRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{34}
}

func (x *CMsgDOTAFantasyLeagueEditInvitesRequest) GetFantasyLeagueId() uint32 {
	if x != nil && x.FantasyLeagueId != nil {
		return *x.FantasyLeagueId
	}
	return 0
}

func (x *CMsgDOTAFantasyLeagueEditInvitesRequest) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

func (x *CMsgDOTAFantasyLeagueEditInvitesRequest) GetInviteChange() []*CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange {
	if x != nil {
		return x.InviteChange
	}
	return nil
}

type CMsgDOTAFantasyLeagueEditInvitesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *CMsgDOTAFantasyLeagueEditInvitesResponse_EResult `protobuf:"varint,1,opt,name=result,enum=dota.CMsgDOTAFantasyLeagueEditInvitesResponse_EResult,def=0" json:"result,omitempty"`
}

// Default values for CMsgDOTAFantasyLeagueEditInvitesResponse fields.
const (
	Default_CMsgDOTAFantasyLeagueEditInvitesResponse_Result = CMsgDOTAFantasyLeagueEditInvitesResponse_SUCCESS
)

func (x *CMsgDOTAFantasyLeagueEditInvitesResponse) Reset() {
	*x = CMsgDOTAFantasyLeagueEditInvitesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAFantasyLeagueEditInvitesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAFantasyLeagueEditInvitesResponse) ProtoMessage() {}

func (x *CMsgDOTAFantasyLeagueEditInvitesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAFantasyLeagueEditInvitesResponse.ProtoReflect.Descriptor instead.
func (*CMsgDOTAFantasyLeagueEditInvitesResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{35}
}

func (x *CMsgDOTAFantasyLeagueEditInvitesResponse) GetResult() CMsgDOTAFantasyLeagueEditInvitesResponse_EResult {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgDOTAFantasyLeagueEditInvitesResponse_Result
}

type CMsgDOTAFantasyLeagueDraftStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FantasyLeagueId *uint32 `protobuf:"varint,1,opt,name=fantasy_league_id,json=fantasyLeagueId" json:"fantasy_league_id,omitempty"`
}

func (x *CMsgDOTAFantasyLeagueDraftStatusRequest) Reset() {
	*x = CMsgDOTAFantasyLeagueDraftStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAFantasyLeagueDraftStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAFantasyLeagueDraftStatusRequest) ProtoMessage() {}

func (x *CMsgDOTAFantasyLeagueDraftStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAFantasyLeagueDraftStatusRequest.ProtoReflect.Descriptor instead.
func (*CMsgDOTAFantasyLeagueDraftStatusRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{36}
}

func (x *CMsgDOTAFantasyLeagueDraftStatusRequest) GetFantasyLeagueId() uint32 {
	if x != nil && x.FantasyLeagueId != nil {
		return *x.FantasyLeagueId
	}
	return 0
}

type CMsgDOTAFantasyLeagueDraftStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FantasyLeagueId  *uint32  `protobuf:"varint,1,opt,name=fantasy_league_id,json=fantasyLeagueId" json:"fantasy_league_id,omitempty"`
	DraftOrder       []uint32 `protobuf:"varint,2,rep,name=draft_order,json=draftOrder" json:"draft_order,omitempty"`
	CurrentPick      *uint32  `protobuf:"varint,3,opt,name=current_pick,json=currentPick" json:"current_pick,omitempty"`
	TimeRemaining    *uint32  `protobuf:"varint,4,opt,name=time_remaining,json=timeRemaining" json:"time_remaining,omitempty"`
	PendingResume    *bool    `protobuf:"varint,5,opt,name=pending_resume,json=pendingResume" json:"pending_resume,omitempty"`
	Completed        *bool    `protobuf:"varint,6,opt,name=completed" json:"completed,omitempty"`
	AvailablePlayers []uint32 `protobuf:"varint,7,rep,name=available_players,json=availablePlayers" json:"available_players,omitempty"`
}

func (x *CMsgDOTAFantasyLeagueDraftStatus) Reset() {
	*x = CMsgDOTAFantasyLeagueDraftStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAFantasyLeagueDraftStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAFantasyLeagueDraftStatus) ProtoMessage() {}

func (x *CMsgDOTAFantasyLeagueDraftStatus) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAFantasyLeagueDraftStatus.ProtoReflect.Descriptor instead.
func (*CMsgDOTAFantasyLeagueDraftStatus) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{37}
}

func (x *CMsgDOTAFantasyLeagueDraftStatus) GetFantasyLeagueId() uint32 {
	if x != nil && x.FantasyLeagueId != nil {
		return *x.FantasyLeagueId
	}
	return 0
}

func (x *CMsgDOTAFantasyLeagueDraftStatus) GetDraftOrder() []uint32 {
	if x != nil {
		return x.DraftOrder
	}
	return nil
}

func (x *CMsgDOTAFantasyLeagueDraftStatus) GetCurrentPick() uint32 {
	if x != nil && x.CurrentPick != nil {
		return *x.CurrentPick
	}
	return 0
}

func (x *CMsgDOTAFantasyLeagueDraftStatus) GetTimeRemaining() uint32 {
	if x != nil && x.TimeRemaining != nil {
		return *x.TimeRemaining
	}
	return 0
}

func (x *CMsgDOTAFantasyLeagueDraftStatus) GetPendingResume() bool {
	if x != nil && x.PendingResume != nil {
		return *x.PendingResume
	}
	return false
}

func (x *CMsgDOTAFantasyLeagueDraftStatus) GetCompleted() bool {
	if x != nil && x.Completed != nil {
		return *x.Completed
	}
	return false
}

func (x *CMsgDOTAFantasyLeagueDraftStatus) GetAvailablePlayers() []uint32 {
	if x != nil {
		return x.AvailablePlayers
	}
	return nil
}

type CMsgDOTAFantasyLeagueDraftPlayerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FantasyLeagueId *uint32 `protobuf:"varint,1,opt,name=fantasy_league_id,json=fantasyLeagueId" json:"fantasy_league_id,omitempty"`
	TeamIndex       *uint32 `protobuf:"varint,2,opt,name=team_index,json=teamIndex" json:"team_index,omitempty"`
	PlayerAccountId *uint32 `protobuf:"varint,3,opt,name=player_account_id,json=playerAccountId" json:"player_account_id,omitempty"`
}

func (x *CMsgDOTAFantasyLeagueDraftPlayerRequest) Reset() {
	*x = CMsgDOTAFantasyLeagueDraftPlayerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAFantasyLeagueDraftPlayerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAFantasyLeagueDraftPlayerRequest) ProtoMessage() {}

func (x *CMsgDOTAFantasyLeagueDraftPlayerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAFantasyLeagueDraftPlayerRequest.ProtoReflect.Descriptor instead.
func (*CMsgDOTAFantasyLeagueDraftPlayerRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{38}
}

func (x *CMsgDOTAFantasyLeagueDraftPlayerRequest) GetFantasyLeagueId() uint32 {
	if x != nil && x.FantasyLeagueId != nil {
		return *x.FantasyLeagueId
	}
	return 0
}

func (x *CMsgDOTAFantasyLeagueDraftPlayerRequest) GetTeamIndex() uint32 {
	if x != nil && x.TeamIndex != nil {
		return *x.TeamIndex
	}
	return 0
}

func (x *CMsgDOTAFantasyLeagueDraftPlayerRequest) GetPlayerAccountId() uint32 {
	if x != nil && x.PlayerAccountId != nil {
		return *x.PlayerAccountId
	}
	return 0
}

type CMsgDOTAFantasyLeagueDraftPlayerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult `protobuf:"varint,1,opt,name=result,enum=dota.CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult,def=0" json:"result,omitempty"`
}

// Default values for CMsgDOTAFantasyLeagueDraftPlayerResponse fields.
const (
	Default_CMsgDOTAFantasyLeagueDraftPlayerResponse_Result = CMsgDOTAFantasyLeagueDraftPlayerResponse_SUCCESS
)

func (x *CMsgDOTAFantasyLeagueDraftPlayerResponse) Reset() {
	*x = CMsgDOTAFantasyLeagueDraftPlayerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAFantasyLeagueDraftPlayerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAFantasyLeagueDraftPlayerResponse) ProtoMessage() {}

func (x *CMsgDOTAFantasyLeagueDraftPlayerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAFantasyLeagueDraftPlayerResponse.ProtoReflect.Descriptor instead.
func (*CMsgDOTAFantasyLeagueDraftPlayerResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{39}
}

func (x *CMsgDOTAFantasyLeagueDraftPlayerResponse) GetResult() CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgDOTAFantasyLeagueDraftPlayerResponse_Result
}

type CMsgDOTAFantasyTeamRosterSwapRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FantasyLeagueId *uint32 `protobuf:"varint,1,opt,name=fantasy_league_id,json=fantasyLeagueId" json:"fantasy_league_id,omitempty"`
	TeamIndex       *uint32 `protobuf:"varint,2,opt,name=team_index,json=teamIndex" json:"team_index,omitempty"`
	Timestamp       *uint32 `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	Slot_1          *uint32 `protobuf:"varint,4,opt,name=slot_1,json=slot1" json:"slot_1,omitempty"`
	Slot_2          *uint32 `protobuf:"varint,5,opt,name=slot_2,json=slot2" json:"slot_2,omitempty"`
}

func (x *CMsgDOTAFantasyTeamRosterSwapRequest) Reset() {
	*x = CMsgDOTAFantasyTeamRosterSwapRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAFantasyTeamRosterSwapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAFantasyTeamRosterSwapRequest) ProtoMessage() {}

func (x *CMsgDOTAFantasyTeamRosterSwapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAFantasyTeamRosterSwapRequest.ProtoReflect.Descriptor instead.
func (*CMsgDOTAFantasyTeamRosterSwapRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{40}
}

func (x *CMsgDOTAFantasyTeamRosterSwapRequest) GetFantasyLeagueId() uint32 {
	if x != nil && x.FantasyLeagueId != nil {
		return *x.FantasyLeagueId
	}
	return 0
}

func (x *CMsgDOTAFantasyTeamRosterSwapRequest) GetTeamIndex() uint32 {
	if x != nil && x.TeamIndex != nil {
		return *x.TeamIndex
	}
	return 0
}

func (x *CMsgDOTAFantasyTeamRosterSwapRequest) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *CMsgDOTAFantasyTeamRosterSwapRequest) GetSlot_1() uint32 {
	if x != nil && x.Slot_1 != nil {
		return *x.Slot_1
	}
	return 0
}

func (x *CMsgDOTAFantasyTeamRosterSwapRequest) GetSlot_2() uint32 {
	if x != nil && x.Slot_2 != nil {
		return *x.Slot_2
	}
	return 0
}

type CMsgDOTAFantasyTeamRosterSwapResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *CMsgDOTAFantasyTeamRosterSwapResponse_EResult `protobuf:"varint,1,opt,name=result,enum=dota.CMsgDOTAFantasyTeamRosterSwapResponse_EResult,def=0" json:"result,omitempty"`
}

// Default values for CMsgDOTAFantasyTeamRosterSwapResponse fields.
const (
	Default_CMsgDOTAFantasyTeamRosterSwapResponse_Result = CMsgDOTAFantasyTeamRosterSwapResponse_SUCCESS
)

func (x *CMsgDOTAFantasyTeamRosterSwapResponse) Reset() {
	*x = CMsgDOTAFantasyTeamRosterSwapResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAFantasyTeamRosterSwapResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAFantasyTeamRosterSwapResponse) ProtoMessage() {}

func (x *CMsgDOTAFantasyTeamRosterSwapResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAFantasyTeamRosterSwapResponse.ProtoReflect.Descriptor instead.
func (*CMsgDOTAFantasyTeamRosterSwapResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{41}
}

func (x *CMsgDOTAFantasyTeamRosterSwapResponse) GetResult() CMsgDOTAFantasyTeamRosterSwapResponse_EResult {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgDOTAFantasyTeamRosterSwapResponse_Result
}

type CMsgDOTAFantasyTeamRosterAddDropRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FantasyLeagueId *uint32 `protobuf:"varint,1,opt,name=fantasy_league_id,json=fantasyLeagueId" json:"fantasy_league_id,omitempty"`
	TeamIndex       *uint32 `protobuf:"varint,2,opt,name=team_index,json=teamIndex" json:"team_index,omitempty"`
	AddAccountId    *uint32 `protobuf:"varint,5,opt,name=add_account_id,json=addAccountId" json:"add_account_id,omitempty"`
	DropAccountId   *uint32 `protobuf:"varint,6,opt,name=drop_account_id,json=dropAccountId" json:"drop_account_id,omitempty"`
}

func (x *CMsgDOTAFantasyTeamRosterAddDropRequest) Reset() {
	*x = CMsgDOTAFantasyTeamRosterAddDropRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAFantasyTeamRosterAddDropRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAFantasyTeamRosterAddDropRequest) ProtoMessage() {}

func (x *CMsgDOTAFantasyTeamRosterAddDropRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAFantasyTeamRosterAddDropRequest.ProtoReflect.Descriptor instead.
func (*CMsgDOTAFantasyTeamRosterAddDropRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{42}
}

func (x *CMsgDOTAFantasyTeamRosterAddDropRequest) GetFantasyLeagueId() uint32 {
	if x != nil && x.FantasyLeagueId != nil {
		return *x.FantasyLeagueId
	}
	return 0
}

func (x *CMsgDOTAFantasyTeamRosterAddDropRequest) GetTeamIndex() uint32 {
	if x != nil && x.TeamIndex != nil {
		return *x.TeamIndex
	}
	return 0
}

func (x *CMsgDOTAFantasyTeamRosterAddDropRequest) GetAddAccountId() uint32 {
	if x != nil && x.AddAccountId != nil {
		return *x.AddAccountId
	}
	return 0
}

func (x *CMsgDOTAFantasyTeamRosterAddDropRequest) GetDropAccountId() uint32 {
	if x != nil && x.DropAccountId != nil {
		return *x.DropAccountId
	}
	return 0
}

type CMsgDOTAFantasyTeamRosterAddDropResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *CMsgDOTAFantasyTeamRosterAddDropResponse_EResult `protobuf:"varint,1,opt,name=result,enum=dota.CMsgDOTAFantasyTeamRosterAddDropResponse_EResult,def=0" json:"result,omitempty"`
}

// Default values for CMsgDOTAFantasyTeamRosterAddDropResponse fields.
const (
	Default_CMsgDOTAFantasyTeamRosterAddDropResponse_Result = CMsgDOTAFantasyTeamRosterAddDropResponse_SUCCESS
)

func (x *CMsgDOTAFantasyTeamRosterAddDropResponse) Reset() {
	*x = CMsgDOTAFantasyTeamRosterAddDropResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAFantasyTeamRosterAddDropResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAFantasyTeamRosterAddDropResponse) ProtoMessage() {}

func (x *CMsgDOTAFantasyTeamRosterAddDropResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAFantasyTeamRosterAddDropResponse.ProtoReflect.Descriptor instead.
func (*CMsgDOTAFantasyTeamRosterAddDropResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{43}
}

func (x *CMsgDOTAFantasyTeamRosterAddDropResponse) GetResult() CMsgDOTAFantasyTeamRosterAddDropResponse_EResult {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgDOTAFantasyTeamRosterAddDropResponse_Result
}

type CMsgDOTAFantasyTeamTradesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FantasyLeagueId *uint32 `protobuf:"varint,1,opt,name=fantasy_league_id,json=fantasyLeagueId" json:"fantasy_league_id,omitempty"`
}

func (x *CMsgDOTAFantasyTeamTradesRequest) Reset() {
	*x = CMsgDOTAFantasyTeamTradesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAFantasyTeamTradesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAFantasyTeamTradesRequest) ProtoMessage() {}

func (x *CMsgDOTAFantasyTeamTradesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAFantasyTeamTradesRequest.ProtoReflect.Descriptor instead.
func (*CMsgDOTAFantasyTeamTradesRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{44}
}

func (x *CMsgDOTAFantasyTeamTradesRequest) GetFantasyLeagueId() uint32 {
	if x != nil && x.FantasyLeagueId != nil {
		return *x.FantasyLeagueId
	}
	return 0
}

type CMsgDOTAFantasyTeamTradesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *CMsgDOTAFantasyTeamTradesResponse_EResult `protobuf:"varint,1,opt,name=result,enum=dota.CMsgDOTAFantasyTeamTradesResponse_EResult,def=0" json:"result,omitempty"`
	Trades []*CMsgDOTAFantasyTeamTradesResponse_Trade `protobuf:"bytes,2,rep,name=trades" json:"trades,omitempty"`
}

// Default values for CMsgDOTAFantasyTeamTradesResponse fields.
const (
	Default_CMsgDOTAFantasyTeamTradesResponse_Result = CMsgDOTAFantasyTeamTradesResponse_SUCCESS
)

func (x *CMsgDOTAFantasyTeamTradesResponse) Reset() {
	*x = CMsgDOTAFantasyTeamTradesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAFantasyTeamTradesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAFantasyTeamTradesResponse) ProtoMessage() {}

func (x *CMsgDOTAFantasyTeamTradesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAFantasyTeamTradesResponse.ProtoReflect.Descriptor instead.
func (*CMsgDOTAFantasyTeamTradesResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{45}
}

func (x *CMsgDOTAFantasyTeamTradesResponse) GetResult() CMsgDOTAFantasyTeamTradesResponse_EResult {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgDOTAFantasyTeamTradesResponse_Result
}

func (x *CMsgDOTAFantasyTeamTradesResponse) GetTrades() []*CMsgDOTAFantasyTeamTradesResponse_Trade {
	if x != nil {
		return x.Trades
	}
	return nil
}

type CMsgDOTAFantasyTeamTradeCancelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FantasyLeagueId  *uint32 `protobuf:"varint,1,opt,name=fantasy_league_id,json=fantasyLeagueId" json:"fantasy_league_id,omitempty"`
	TeamIndex_1      *uint32 `protobuf:"varint,3,opt,name=team_index_1,json=teamIndex1" json:"team_index_1,omitempty"`
	OwnerAccountId_2 *uint32 `protobuf:"varint,4,opt,name=owner_account_id_2,json=ownerAccountId2" json:"owner_account_id_2,omitempty"`
	TeamIndex_2      *uint32 `protobuf:"varint,5,opt,name=team_index_2,json=teamIndex2" json:"team_index_2,omitempty"`
}

func (x *CMsgDOTAFantasyTeamTradeCancelRequest) Reset() {
	*x = CMsgDOTAFantasyTeamTradeCancelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAFantasyTeamTradeCancelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAFantasyTeamTradeCancelRequest) ProtoMessage() {}

func (x *CMsgDOTAFantasyTeamTradeCancelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAFantasyTeamTradeCancelRequest.ProtoReflect.Descriptor instead.
func (*CMsgDOTAFantasyTeamTradeCancelRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{46}
}

func (x *CMsgDOTAFantasyTeamTradeCancelRequest) GetFantasyLeagueId() uint32 {
	if x != nil && x.FantasyLeagueId != nil {
		return *x.FantasyLeagueId
	}
	return 0
}

func (x *CMsgDOTAFantasyTeamTradeCancelRequest) GetTeamIndex_1() uint32 {
	if x != nil && x.TeamIndex_1 != nil {
		return *x.TeamIndex_1
	}
	return 0
}

func (x *CMsgDOTAFantasyTeamTradeCancelRequest) GetOwnerAccountId_2() uint32 {
	if x != nil && x.OwnerAccountId_2 != nil {
		return *x.OwnerAccountId_2
	}
	return 0
}

func (x *CMsgDOTAFantasyTeamTradeCancelRequest) GetTeamIndex_2() uint32 {
	if x != nil && x.TeamIndex_2 != nil {
		return *x.TeamIndex_2
	}
	return 0
}

type CMsgDOTAFantasyTeamTradeCancelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *CMsgDOTAFantasyTeamTradeCancelResponse_EResult `protobuf:"varint,1,opt,name=result,enum=dota.CMsgDOTAFantasyTeamTradeCancelResponse_EResult,def=0" json:"result,omitempty"`
}

// Default values for CMsgDOTAFantasyTeamTradeCancelResponse fields.
const (
	Default_CMsgDOTAFantasyTeamTradeCancelResponse_Result = CMsgDOTAFantasyTeamTradeCancelResponse_SUCCESS
)

func (x *CMsgDOTAFantasyTeamTradeCancelResponse) Reset() {
	*x = CMsgDOTAFantasyTeamTradeCancelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAFantasyTeamTradeCancelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAFantasyTeamTradeCancelResponse) ProtoMessage() {}

func (x *CMsgDOTAFantasyTeamTradeCancelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAFantasyTeamTradeCancelResponse.ProtoReflect.Descriptor instead.
func (*CMsgDOTAFantasyTeamTradeCancelResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{47}
}

func (x *CMsgDOTAFantasyTeamTradeCancelResponse) GetResult() CMsgDOTAFantasyTeamTradeCancelResponse_EResult {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgDOTAFantasyTeamTradeCancelResponse_Result
}

type CMsgDOTAFantasyTeamRosterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FantasyLeagueId *uint32 `protobuf:"varint,1,opt,name=fantasy_league_id,json=fantasyLeagueId" json:"fantasy_league_id,omitempty"`
	TeamIndex       *uint32 `protobuf:"varint,2,opt,name=team_index,json=teamIndex" json:"team_index,omitempty"`
	OwnerAccountId  *uint32 `protobuf:"varint,3,opt,name=owner_account_id,json=ownerAccountId" json:"owner_account_id,omitempty"`
	Timestamp       *uint32 `protobuf:"varint,4,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (x *CMsgDOTAFantasyTeamRosterRequest) Reset() {
	*x = CMsgDOTAFantasyTeamRosterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAFantasyTeamRosterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAFantasyTeamRosterRequest) ProtoMessage() {}

func (x *CMsgDOTAFantasyTeamRosterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAFantasyTeamRosterRequest.ProtoReflect.Descriptor instead.
func (*CMsgDOTAFantasyTeamRosterRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{48}
}

func (x *CMsgDOTAFantasyTeamRosterRequest) GetFantasyLeagueId() uint32 {
	if x != nil && x.FantasyLeagueId != nil {
		return *x.FantasyLeagueId
	}
	return 0
}

func (x *CMsgDOTAFantasyTeamRosterRequest) GetTeamIndex() uint32 {
	if x != nil && x.TeamIndex != nil {
		return *x.TeamIndex
	}
	return 0
}

func (x *CMsgDOTAFantasyTeamRosterRequest) GetOwnerAccountId() uint32 {
	if x != nil && x.OwnerAccountId != nil {
		return *x.OwnerAccountId
	}
	return 0
}

func (x *CMsgDOTAFantasyTeamRosterRequest) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

type CMsgDOTAFantasyTeamRosterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result           *CMsgDOTAFantasyTeamRosterResponse_EResult `protobuf:"varint,1,opt,name=result,enum=dota.CMsgDOTAFantasyTeamRosterResponse_EResult,def=0" json:"result,omitempty"`
	PlayerAccountIds []uint32                                   `protobuf:"varint,2,rep,name=player_account_ids,json=playerAccountIds" json:"player_account_ids,omitempty"`
	PlayerLocked     []bool                                     `protobuf:"varint,3,rep,name=player_locked,json=playerLocked" json:"player_locked,omitempty"`
}

// Default values for CMsgDOTAFantasyTeamRosterResponse fields.
const (
	Default_CMsgDOTAFantasyTeamRosterResponse_Result = CMsgDOTAFantasyTeamRosterResponse_SUCCESS
)

func (x *CMsgDOTAFantasyTeamRosterResponse) Reset() {
	*x = CMsgDOTAFantasyTeamRosterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAFantasyTeamRosterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAFantasyTeamRosterResponse) ProtoMessage() {}

func (x *CMsgDOTAFantasyTeamRosterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAFantasyTeamRosterResponse.ProtoReflect.Descriptor instead.
func (*CMsgDOTAFantasyTeamRosterResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{49}
}

func (x *CMsgDOTAFantasyTeamRosterResponse) GetResult() CMsgDOTAFantasyTeamRosterResponse_EResult {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgDOTAFantasyTeamRosterResponse_Result
}

func (x *CMsgDOTAFantasyTeamRosterResponse) GetPlayerAccountIds() []uint32 {
	if x != nil {
		return x.PlayerAccountIds
	}
	return nil
}

func (x *CMsgDOTAFantasyTeamRosterResponse) GetPlayerLocked() []bool {
	if x != nil {
		return x.PlayerLocked
	}
	return nil
}

type CMsgDOTAFantasyPlayerHisoricalStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FantasyLeagueId *uint32 `protobuf:"varint,1,opt,name=fantasy_league_id,json=fantasyLeagueId" json:"fantasy_league_id,omitempty"`
}

func (x *CMsgDOTAFantasyPlayerHisoricalStatsRequest) Reset() {
	*x = CMsgDOTAFantasyPlayerHisoricalStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAFantasyPlayerHisoricalStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAFantasyPlayerHisoricalStatsRequest) ProtoMessage() {}

func (x *CMsgDOTAFantasyPlayerHisoricalStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAFantasyPlayerHisoricalStatsRequest.ProtoReflect.Descriptor instead.
func (*CMsgDOTAFantasyPlayerHisoricalStatsRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{50}
}

func (x *CMsgDOTAFantasyPlayerHisoricalStatsRequest) GetFantasyLeagueId() uint32 {
	if x != nil && x.FantasyLeagueId != nil {
		return *x.FantasyLeagueId
	}
	return 0
}

type CMsgDOTAFantasyPlayerHisoricalStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult       `protobuf:"varint,1,opt,name=result,enum=dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult,def=0" json:"result,omitempty"`
	Stats  []*CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats `protobuf:"bytes,2,rep,name=stats" json:"stats,omitempty"`
}

// Default values for CMsgDOTAFantasyPlayerHisoricalStatsResponse fields.
const (
	Default_CMsgDOTAFantasyPlayerHisoricalStatsResponse_Result = CMsgDOTAFantasyPlayerHisoricalStatsResponse_SUCCESS
)

func (x *CMsgDOTAFantasyPlayerHisoricalStatsResponse) Reset() {
	*x = CMsgDOTAFantasyPlayerHisoricalStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAFantasyPlayerHisoricalStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAFantasyPlayerHisoricalStatsResponse) ProtoMessage() {}

func (x *CMsgDOTAFantasyPlayerHisoricalStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAFantasyPlayerHisoricalStatsResponse.ProtoReflect.Descriptor instead.
func (*CMsgDOTAFantasyPlayerHisoricalStatsResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{51}
}

func (x *CMsgDOTAFantasyPlayerHisoricalStatsResponse) GetResult() CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgDOTAFantasyPlayerHisoricalStatsResponse_Result
}

func (x *CMsgDOTAFantasyPlayerHisoricalStatsResponse) GetStats() []*CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

type CMsgDOTAFantasyMessageAdd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FantasyLeagueId *uint32 `protobuf:"varint,1,opt,name=fantasy_league_id,json=fantasyLeagueId" json:"fantasy_league_id,omitempty"`
	Message         *string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (x *CMsgDOTAFantasyMessageAdd) Reset() {
	*x = CMsgDOTAFantasyMessageAdd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAFantasyMessageAdd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAFantasyMessageAdd) ProtoMessage() {}

func (x *CMsgDOTAFantasyMessageAdd) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAFantasyMessageAdd.ProtoReflect.Descriptor instead.
func (*CMsgDOTAFantasyMessageAdd) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{52}
}

func (x *CMsgDOTAFantasyMessageAdd) GetFantasyLeagueId() uint32 {
	if x != nil && x.FantasyLeagueId != nil {
		return *x.FantasyLeagueId
	}
	return 0
}

func (x *CMsgDOTAFantasyMessageAdd) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type CMsgDOTAFantasyMessagesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FantasyLeagueId *uint32 `protobuf:"varint,1,opt,name=fantasy_league_id,json=fantasyLeagueId" json:"fantasy_league_id,omitempty"`
	StartMessage    *uint32 `protobuf:"varint,2,opt,name=start_message,json=startMessage" json:"start_message,omitempty"`
	EndMessage      *uint32 `protobuf:"varint,3,opt,name=end_message,json=endMessage" json:"end_message,omitempty"`
}

func (x *CMsgDOTAFantasyMessagesRequest) Reset() {
	*x = CMsgDOTAFantasyMessagesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAFantasyMessagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAFantasyMessagesRequest) ProtoMessage() {}

func (x *CMsgDOTAFantasyMessagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAFantasyMessagesRequest.ProtoReflect.Descriptor instead.
func (*CMsgDOTAFantasyMessagesRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{53}
}

func (x *CMsgDOTAFantasyMessagesRequest) GetFantasyLeagueId() uint32 {
	if x != nil && x.FantasyLeagueId != nil {
		return *x.FantasyLeagueId
	}
	return 0
}

func (x *CMsgDOTAFantasyMessagesRequest) GetStartMessage() uint32 {
	if x != nil && x.StartMessage != nil {
		return *x.StartMessage
	}
	return 0
}

func (x *CMsgDOTAFantasyMessagesRequest) GetEndMessage() uint32 {
	if x != nil && x.EndMessage != nil {
		return *x.EndMessage
	}
	return 0
}

type CMsgDOTAFantasyMessagesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result           *CMsgDOTAFantasyMessagesResponse_EResult   `protobuf:"varint,1,opt,name=result,enum=dota.CMsgDOTAFantasyMessagesResponse_EResult,def=0" json:"result,omitempty"`
	Messages         []*CMsgDOTAFantasyMessagesResponse_Message `protobuf:"bytes,2,rep,name=messages" json:"messages,omitempty"`
	NumTotalMessages *uint32                                    `protobuf:"varint,3,opt,name=num_total_messages,json=numTotalMessages" json:"num_total_messages,omitempty"`
}

// Default values for CMsgDOTAFantasyMessagesResponse fields.
const (
	Default_CMsgDOTAFantasyMessagesResponse_Result = CMsgDOTAFantasyMessagesResponse_SUCCESS
)

func (x *CMsgDOTAFantasyMessagesResponse) Reset() {
	*x = CMsgDOTAFantasyMessagesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAFantasyMessagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAFantasyMessagesResponse) ProtoMessage() {}

func (x *CMsgDOTAFantasyMessagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAFantasyMessagesResponse.ProtoReflect.Descriptor instead.
func (*CMsgDOTAFantasyMessagesResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{54}
}

func (x *CMsgDOTAFantasyMessagesResponse) GetResult() CMsgDOTAFantasyMessagesResponse_EResult {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgDOTAFantasyMessagesResponse_Result
}

func (x *CMsgDOTAFantasyMessagesResponse) GetMessages() []*CMsgDOTAFantasyMessagesResponse_Message {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *CMsgDOTAFantasyMessagesResponse) GetNumTotalMessages() uint32 {
	if x != nil && x.NumTotalMessages != nil {
		return *x.NumTotalMessages
	}
	return 0
}

type CMsgDOTAFantasyRemoveOwner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FantasyLeagueId *uint32 `protobuf:"varint,1,opt,name=fantasy_league_id,json=fantasyLeagueId" json:"fantasy_league_id,omitempty"`
	OwnerAccountId  *uint32 `protobuf:"varint,2,opt,name=owner_account_id,json=ownerAccountId" json:"owner_account_id,omitempty"`
	TeamIndex       *uint32 `protobuf:"varint,3,opt,name=team_index,json=teamIndex" json:"team_index,omitempty"`
}

func (x *CMsgDOTAFantasyRemoveOwner) Reset() {
	*x = CMsgDOTAFantasyRemoveOwner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAFantasyRemoveOwner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAFantasyRemoveOwner) ProtoMessage() {}

func (x *CMsgDOTAFantasyRemoveOwner) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAFantasyRemoveOwner.ProtoReflect.Descriptor instead.
func (*CMsgDOTAFantasyRemoveOwner) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{55}
}

func (x *CMsgDOTAFantasyRemoveOwner) GetFantasyLeagueId() uint32 {
	if x != nil && x.FantasyLeagueId != nil {
		return *x.FantasyLeagueId
	}
	return 0
}

func (x *CMsgDOTAFantasyRemoveOwner) GetOwnerAccountId() uint32 {
	if x != nil && x.OwnerAccountId != nil {
		return *x.OwnerAccountId
	}
	return 0
}

func (x *CMsgDOTAFantasyRemoveOwner) GetTeamIndex() uint32 {
	if x != nil && x.TeamIndex != nil {
		return *x.TeamIndex
	}
	return 0
}

type CMsgDOTAFantasyRemoveOwnerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *CMsgDOTAFantasyRemoveOwnerResponse_EResult `protobuf:"varint,1,opt,name=result,enum=dota.CMsgDOTAFantasyRemoveOwnerResponse_EResult,def=0" json:"result,omitempty"`
}

// Default values for CMsgDOTAFantasyRemoveOwnerResponse fields.
const (
	Default_CMsgDOTAFantasyRemoveOwnerResponse_Result = CMsgDOTAFantasyRemoveOwnerResponse_SUCCESS
)

func (x *CMsgDOTAFantasyRemoveOwnerResponse) Reset() {
	*x = CMsgDOTAFantasyRemoveOwnerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAFantasyRemoveOwnerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAFantasyRemoveOwnerResponse) ProtoMessage() {}

func (x *CMsgDOTAFantasyRemoveOwnerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAFantasyRemoveOwnerResponse.ProtoReflect.Descriptor instead.
func (*CMsgDOTAFantasyRemoveOwnerResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{56}
}

func (x *CMsgDOTAFantasyRemoveOwnerResponse) GetResult() CMsgDOTAFantasyRemoveOwnerResponse_EResult {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgDOTAFantasyRemoveOwnerResponse_Result
}

type CMsgDOTAFantasyScheduledMatchesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FantasyLeagueId *uint32 `protobuf:"varint,1,opt,name=fantasy_league_id,json=fantasyLeagueId" json:"fantasy_league_id,omitempty"`
}

func (x *CMsgDOTAFantasyScheduledMatchesRequest) Reset() {
	*x = CMsgDOTAFantasyScheduledMatchesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAFantasyScheduledMatchesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAFantasyScheduledMatchesRequest) ProtoMessage() {}

func (x *CMsgDOTAFantasyScheduledMatchesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAFantasyScheduledMatchesRequest.ProtoReflect.Descriptor instead.
func (*CMsgDOTAFantasyScheduledMatchesRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{57}
}

func (x *CMsgDOTAFantasyScheduledMatchesRequest) GetFantasyLeagueId() uint32 {
	if x != nil && x.FantasyLeagueId != nil {
		return *x.FantasyLeagueId
	}
	return 0
}

type CMsgDOTAFantasyScheduledMatchesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result             *CMsgDOTAFantasyScheduledMatchesResponse_EResult              `protobuf:"varint,1,opt,name=result,enum=dota.CMsgDOTAFantasyScheduledMatchesResponse_EResult,def=0" json:"result,omitempty"`
	ScheduledMatchDays []*CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays `protobuf:"bytes,2,rep,name=scheduled_match_days,json=scheduledMatchDays" json:"scheduled_match_days,omitempty"`
}

// Default values for CMsgDOTAFantasyScheduledMatchesResponse fields.
const (
	Default_CMsgDOTAFantasyScheduledMatchesResponse_Result = CMsgDOTAFantasyScheduledMatchesResponse_SUCCESS
)

func (x *CMsgDOTAFantasyScheduledMatchesResponse) Reset() {
	*x = CMsgDOTAFantasyScheduledMatchesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAFantasyScheduledMatchesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAFantasyScheduledMatchesResponse) ProtoMessage() {}

func (x *CMsgDOTAFantasyScheduledMatchesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAFantasyScheduledMatchesResponse.ProtoReflect.Descriptor instead.
func (*CMsgDOTAFantasyScheduledMatchesResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{58}
}

func (x *CMsgDOTAFantasyScheduledMatchesResponse) GetResult() CMsgDOTAFantasyScheduledMatchesResponse_EResult {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgDOTAFantasyScheduledMatchesResponse_Result
}

func (x *CMsgDOTAFantasyScheduledMatchesResponse) GetScheduledMatchDays() []*CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays {
	if x != nil {
		return x.ScheduledMatchDays
	}
	return nil
}

type CMsgDOTAFantasyLeaveLeagueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FantasyLeagueId  *uint32 `protobuf:"varint,1,opt,name=fantasy_league_id,json=fantasyLeagueId" json:"fantasy_league_id,omitempty"`
	FantasyTeamIndex *uint32 `protobuf:"varint,2,opt,name=fantasy_team_index,json=fantasyTeamIndex" json:"fantasy_team_index,omitempty"`
}

func (x *CMsgDOTAFantasyLeaveLeagueRequest) Reset() {
	*x = CMsgDOTAFantasyLeaveLeagueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAFantasyLeaveLeagueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAFantasyLeaveLeagueRequest) ProtoMessage() {}

func (x *CMsgDOTAFantasyLeaveLeagueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAFantasyLeaveLeagueRequest.ProtoReflect.Descriptor instead.
func (*CMsgDOTAFantasyLeaveLeagueRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{59}
}

func (x *CMsgDOTAFantasyLeaveLeagueRequest) GetFantasyLeagueId() uint32 {
	if x != nil && x.FantasyLeagueId != nil {
		return *x.FantasyLeagueId
	}
	return 0
}

func (x *CMsgDOTAFantasyLeaveLeagueRequest) GetFantasyTeamIndex() uint32 {
	if x != nil && x.FantasyTeamIndex != nil {
		return *x.FantasyTeamIndex
	}
	return 0
}

type CMsgDOTAFantasyLeaveLeagueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *CMsgDOTAFantasyLeaveLeagueResponse_EResult `protobuf:"varint,1,opt,name=result,enum=dota.CMsgDOTAFantasyLeaveLeagueResponse_EResult,def=0" json:"result,omitempty"`
}

// Default values for CMsgDOTAFantasyLeaveLeagueResponse fields.
const (
	Default_CMsgDOTAFantasyLeaveLeagueResponse_Result = CMsgDOTAFantasyLeaveLeagueResponse_SUCCESS
)

func (x *CMsgDOTAFantasyLeaveLeagueResponse) Reset() {
	*x = CMsgDOTAFantasyLeaveLeagueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAFantasyLeaveLeagueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAFantasyLeaveLeagueResponse) ProtoMessage() {}

func (x *CMsgDOTAFantasyLeaveLeagueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAFantasyLeaveLeagueResponse.ProtoReflect.Descriptor instead.
func (*CMsgDOTAFantasyLeaveLeagueResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{60}
}

func (x *CMsgDOTAFantasyLeaveLeagueResponse) GetResult() CMsgDOTAFantasyLeaveLeagueResponse_EResult {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgDOTAFantasyLeaveLeagueResponse_Result
}

type CMsgDOTAFantasyPlayerScoreDetailsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FantasyLeagueId *uint32 `protobuf:"varint,1,opt,name=fantasy_league_id,json=fantasyLeagueId" json:"fantasy_league_id,omitempty"`
	PlayerAccountId *uint32 `protobuf:"varint,2,opt,name=player_account_id,json=playerAccountId" json:"player_account_id,omitempty"`
	StartTime       *uint32 `protobuf:"varint,3,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	EndTime         *uint32 `protobuf:"varint,4,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
}

func (x *CMsgDOTAFantasyPlayerScoreDetailsRequest) Reset() {
	*x = CMsgDOTAFantasyPlayerScoreDetailsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAFantasyPlayerScoreDetailsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAFantasyPlayerScoreDetailsRequest) ProtoMessage() {}

func (x *CMsgDOTAFantasyPlayerScoreDetailsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAFantasyPlayerScoreDetailsRequest.ProtoReflect.Descriptor instead.
func (*CMsgDOTAFantasyPlayerScoreDetailsRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{61}
}

func (x *CMsgDOTAFantasyPlayerScoreDetailsRequest) GetFantasyLeagueId() uint32 {
	if x != nil && x.FantasyLeagueId != nil {
		return *x.FantasyLeagueId
	}
	return 0
}

func (x *CMsgDOTAFantasyPlayerScoreDetailsRequest) GetPlayerAccountId() uint32 {
	if x != nil && x.PlayerAccountId != nil {
		return *x.PlayerAccountId
	}
	return 0
}

func (x *CMsgDOTAFantasyPlayerScoreDetailsRequest) GetStartTime() uint32 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *CMsgDOTAFantasyPlayerScoreDetailsRequest) GetEndTime() uint32 {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return 0
}

type CMsgDOTAFantasyPlayerScoreDetailsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult           `protobuf:"varint,1,opt,name=result,enum=dota.CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult,def=0" json:"result,omitempty"`
	Data   []*CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData `protobuf:"bytes,2,rep,name=data" json:"data,omitempty"`
}

// Default values for CMsgDOTAFantasyPlayerScoreDetailsResponse fields.
const (
	Default_CMsgDOTAFantasyPlayerScoreDetailsResponse_Result = CMsgDOTAFantasyPlayerScoreDetailsResponse_SUCCESS
)

func (x *CMsgDOTAFantasyPlayerScoreDetailsResponse) Reset() {
	*x = CMsgDOTAFantasyPlayerScoreDetailsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAFantasyPlayerScoreDetailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAFantasyPlayerScoreDetailsResponse) ProtoMessage() {}

func (x *CMsgDOTAFantasyPlayerScoreDetailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAFantasyPlayerScoreDetailsResponse.ProtoReflect.Descriptor instead.
func (*CMsgDOTAFantasyPlayerScoreDetailsResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{62}
}

func (x *CMsgDOTAFantasyPlayerScoreDetailsResponse) GetResult() CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgDOTAFantasyPlayerScoreDetailsResponse_Result
}

func (x *CMsgDOTAFantasyPlayerScoreDetailsResponse) GetData() []*CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData {
	if x != nil {
		return x.Data
	}
	return nil
}

type CMsgDOTAPassportVoteTeamGuess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeagueId   *uint32 `protobuf:"varint,1,opt,name=league_id,json=leagueId" json:"league_id,omitempty"`
	WinnerId   *uint32 `protobuf:"varint,2,opt,name=winner_id,json=winnerId" json:"winner_id,omitempty"`
	RunnerupId *uint32 `protobuf:"varint,3,opt,name=runnerup_id,json=runnerupId" json:"runnerup_id,omitempty"`
}

func (x *CMsgDOTAPassportVoteTeamGuess) Reset() {
	*x = CMsgDOTAPassportVoteTeamGuess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAPassportVoteTeamGuess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAPassportVoteTeamGuess) ProtoMessage() {}

func (x *CMsgDOTAPassportVoteTeamGuess) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAPassportVoteTeamGuess.ProtoReflect.Descriptor instead.
func (*CMsgDOTAPassportVoteTeamGuess) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{63}
}

func (x *CMsgDOTAPassportVoteTeamGuess) GetLeagueId() uint32 {
	if x != nil && x.LeagueId != nil {
		return *x.LeagueId
	}
	return 0
}

func (x *CMsgDOTAPassportVoteTeamGuess) GetWinnerId() uint32 {
	if x != nil && x.WinnerId != nil {
		return *x.WinnerId
	}
	return 0
}

func (x *CMsgDOTAPassportVoteTeamGuess) GetRunnerupId() uint32 {
	if x != nil && x.RunnerupId != nil {
		return *x.RunnerupId
	}
	return 0
}

type CMsgDOTAPassportVoteGenericSelection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelectionIndex *DOTA_2013PassportSelectionIndices `protobuf:"varint,1,opt,name=selection_index,json=selectionIndex,enum=dota.DOTA_2013PassportSelectionIndices,def=0" json:"selection_index,omitempty"`
	Selection      *uint32                            `protobuf:"varint,2,opt,name=selection" json:"selection,omitempty"`
}

// Default values for CMsgDOTAPassportVoteGenericSelection fields.
const (
	Default_CMsgDOTAPassportVoteGenericSelection_SelectionIndex = DOTA_2013PassportSelectionIndices_PP13_SEL_ALLSTAR_PLAYER_0
)

func (x *CMsgDOTAPassportVoteGenericSelection) Reset() {
	*x = CMsgDOTAPassportVoteGenericSelection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAPassportVoteGenericSelection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAPassportVoteGenericSelection) ProtoMessage() {}

func (x *CMsgDOTAPassportVoteGenericSelection) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAPassportVoteGenericSelection.ProtoReflect.Descriptor instead.
func (*CMsgDOTAPassportVoteGenericSelection) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{64}
}

func (x *CMsgDOTAPassportVoteGenericSelection) GetSelectionIndex() DOTA_2013PassportSelectionIndices {
	if x != nil && x.SelectionIndex != nil {
		return *x.SelectionIndex
	}
	return Default_CMsgDOTAPassportVoteGenericSelection_SelectionIndex
}

func (x *CMsgDOTAPassportVoteGenericSelection) GetSelection() uint32 {
	if x != nil && x.Selection != nil {
		return *x.Selection
	}
	return 0
}

type CMsgDOTAPassportStampedPlayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SteamId    *uint64 `protobuf:"varint,1,opt,name=steam_id,json=steamId" json:"steam_id,omitempty"`
	StampLevel *uint32 `protobuf:"varint,2,opt,name=stamp_level,json=stampLevel" json:"stamp_level,omitempty"`
}

func (x *CMsgDOTAPassportStampedPlayer) Reset() {
	*x = CMsgDOTAPassportStampedPlayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAPassportStampedPlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAPassportStampedPlayer) ProtoMessage() {}

func (x *CMsgDOTAPassportStampedPlayer) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAPassportStampedPlayer.ProtoReflect.Descriptor instead.
func (*CMsgDOTAPassportStampedPlayer) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{65}
}

func (x *CMsgDOTAPassportStampedPlayer) GetSteamId() uint64 {
	if x != nil && x.SteamId != nil {
		return *x.SteamId
	}
	return 0
}

func (x *CMsgDOTAPassportStampedPlayer) GetStampLevel() uint32 {
	if x != nil && x.StampLevel != nil {
		return *x.StampLevel
	}
	return 0
}

type CMsgDOTAPassportPlayerCardChallenge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChallengeId *uint32 `protobuf:"varint,1,opt,name=challenge_id,json=challengeId" json:"challenge_id,omitempty"`
}

func (x *CMsgDOTAPassportPlayerCardChallenge) Reset() {
	*x = CMsgDOTAPassportPlayerCardChallenge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAPassportPlayerCardChallenge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAPassportPlayerCardChallenge) ProtoMessage() {}

func (x *CMsgDOTAPassportPlayerCardChallenge) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAPassportPlayerCardChallenge.ProtoReflect.Descriptor instead.
func (*CMsgDOTAPassportPlayerCardChallenge) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{66}
}

func (x *CMsgDOTAPassportPlayerCardChallenge) GetChallengeId() uint32 {
	if x != nil && x.ChallengeId != nil {
		return *x.ChallengeId
	}
	return 0
}

type CMsgDOTAPassportVote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamVotes            []*CMsgDOTAPassportVoteTeamGuess        `protobuf:"bytes,1,rep,name=team_votes,json=teamVotes" json:"team_votes,omitempty"`
	GenericSelections    []*CMsgDOTAPassportVoteGenericSelection `protobuf:"bytes,2,rep,name=generic_selections,json=genericSelections" json:"generic_selections,omitempty"`
	StampedPlayers       []*CMsgDOTAPassportStampedPlayer        `protobuf:"bytes,3,rep,name=stamped_players,json=stampedPlayers" json:"stamped_players,omitempty"`
	PlayerCardChallenges []*CMsgDOTAPassportPlayerCardChallenge  `protobuf:"bytes,4,rep,name=player_card_challenges,json=playerCardChallenges" json:"player_card_challenges,omitempty"`
}

func (x *CMsgDOTAPassportVote) Reset() {
	*x = CMsgDOTAPassportVote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAPassportVote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAPassportVote) ProtoMessage() {}

func (x *CMsgDOTAPassportVote) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAPassportVote.ProtoReflect.Descriptor instead.
func (*CMsgDOTAPassportVote) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{67}
}

func (x *CMsgDOTAPassportVote) GetTeamVotes() []*CMsgDOTAPassportVoteTeamGuess {
	if x != nil {
		return x.TeamVotes
	}
	return nil
}

func (x *CMsgDOTAPassportVote) GetGenericSelections() []*CMsgDOTAPassportVoteGenericSelection {
	if x != nil {
		return x.GenericSelections
	}
	return nil
}

func (x *CMsgDOTAPassportVote) GetStampedPlayers() []*CMsgDOTAPassportStampedPlayer {
	if x != nil {
		return x.StampedPlayers
	}
	return nil
}

func (x *CMsgDOTAPassportVote) GetPlayerCardChallenges() []*CMsgDOTAPassportPlayerCardChallenge {
	if x != nil {
		return x.PlayerCardChallenges
	}
	return nil
}

type CMsgClientToGCGetPlayerCardRosterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeagueId  *uint32 `protobuf:"varint,1,opt,name=league_id,json=leagueId" json:"league_id,omitempty"`
	Timestamp *uint32 `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (x *CMsgClientToGCGetPlayerCardRosterRequest) Reset() {
	*x = CMsgClientToGCGetPlayerCardRosterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCGetPlayerCardRosterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCGetPlayerCardRosterRequest) ProtoMessage() {}

func (x *CMsgClientToGCGetPlayerCardRosterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCGetPlayerCardRosterRequest.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCGetPlayerCardRosterRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{68}
}

func (x *CMsgClientToGCGetPlayerCardRosterRequest) GetLeagueId() uint32 {
	if x != nil && x.LeagueId != nil {
		return *x.LeagueId
	}
	return 0
}

func (x *CMsgClientToGCGetPlayerCardRosterRequest) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

type CMsgClientToGCGetPlayerCardRosterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result           *CMsgClientToGCGetPlayerCardRosterResponse_Result `protobuf:"varint,1,opt,name=result,enum=dota.CMsgClientToGCGetPlayerCardRosterResponse_Result,def=0" json:"result,omitempty"`
	PlayerCardItemId []uint64                                          `protobuf:"varint,2,rep,name=player_card_item_id,json=playerCardItemId" json:"player_card_item_id,omitempty"`
	Score            *float32                                          `protobuf:"fixed32,3,opt,name=score" json:"score,omitempty"`
	Finalized        *bool                                             `protobuf:"varint,4,opt,name=finalized" json:"finalized,omitempty"`
	Percentile       *float32                                          `protobuf:"fixed32,5,opt,name=percentile" json:"percentile,omitempty"`
}

// Default values for CMsgClientToGCGetPlayerCardRosterResponse fields.
const (
	Default_CMsgClientToGCGetPlayerCardRosterResponse_Result = CMsgClientToGCGetPlayerCardRosterResponse_SUCCESS
)

func (x *CMsgClientToGCGetPlayerCardRosterResponse) Reset() {
	*x = CMsgClientToGCGetPlayerCardRosterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCGetPlayerCardRosterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCGetPlayerCardRosterResponse) ProtoMessage() {}

func (x *CMsgClientToGCGetPlayerCardRosterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCGetPlayerCardRosterResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCGetPlayerCardRosterResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{69}
}

func (x *CMsgClientToGCGetPlayerCardRosterResponse) GetResult() CMsgClientToGCGetPlayerCardRosterResponse_Result {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCGetPlayerCardRosterResponse_Result
}

func (x *CMsgClientToGCGetPlayerCardRosterResponse) GetPlayerCardItemId() []uint64 {
	if x != nil {
		return x.PlayerCardItemId
	}
	return nil
}

func (x *CMsgClientToGCGetPlayerCardRosterResponse) GetScore() float32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

func (x *CMsgClientToGCGetPlayerCardRosterResponse) GetFinalized() bool {
	if x != nil && x.Finalized != nil {
		return *x.Finalized
	}
	return false
}

func (x *CMsgClientToGCGetPlayerCardRosterResponse) GetPercentile() float32 {
	if x != nil && x.Percentile != nil {
		return *x.Percentile
	}
	return 0
}

type CMsgClientToGCSetPlayerCardRosterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeagueId         *uint32 `protobuf:"varint,1,opt,name=league_id,json=leagueId" json:"league_id,omitempty"`
	Timestamp        *uint32 `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	Slot             *uint32 `protobuf:"varint,3,opt,name=slot" json:"slot,omitempty"`
	PlayerCardItemId *uint64 `protobuf:"varint,4,opt,name=player_card_item_id,json=playerCardItemId" json:"player_card_item_id,omitempty"`
	EventId          *uint32 `protobuf:"varint,5,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
}

func (x *CMsgClientToGCSetPlayerCardRosterRequest) Reset() {
	*x = CMsgClientToGCSetPlayerCardRosterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCSetPlayerCardRosterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCSetPlayerCardRosterRequest) ProtoMessage() {}

func (x *CMsgClientToGCSetPlayerCardRosterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCSetPlayerCardRosterRequest.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCSetPlayerCardRosterRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{70}
}

func (x *CMsgClientToGCSetPlayerCardRosterRequest) GetLeagueId() uint32 {
	if x != nil && x.LeagueId != nil {
		return *x.LeagueId
	}
	return 0
}

func (x *CMsgClientToGCSetPlayerCardRosterRequest) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *CMsgClientToGCSetPlayerCardRosterRequest) GetSlot() uint32 {
	if x != nil && x.Slot != nil {
		return *x.Slot
	}
	return 0
}

func (x *CMsgClientToGCSetPlayerCardRosterRequest) GetPlayerCardItemId() uint64 {
	if x != nil && x.PlayerCardItemId != nil {
		return *x.PlayerCardItemId
	}
	return 0
}

func (x *CMsgClientToGCSetPlayerCardRosterRequest) GetEventId() uint32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

type CMsgClientToGCSetPlayerCardRosterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *CMsgClientToGCSetPlayerCardRosterResponse_Result `protobuf:"varint,1,opt,name=result,enum=dota.CMsgClientToGCSetPlayerCardRosterResponse_Result,def=0" json:"result,omitempty"`
}

// Default values for CMsgClientToGCSetPlayerCardRosterResponse fields.
const (
	Default_CMsgClientToGCSetPlayerCardRosterResponse_Result = CMsgClientToGCSetPlayerCardRosterResponse_SUCCESS
)

func (x *CMsgClientToGCSetPlayerCardRosterResponse) Reset() {
	*x = CMsgClientToGCSetPlayerCardRosterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCSetPlayerCardRosterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCSetPlayerCardRosterResponse) ProtoMessage() {}

func (x *CMsgClientToGCSetPlayerCardRosterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCSetPlayerCardRosterResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCSetPlayerCardRosterResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{71}
}

func (x *CMsgClientToGCSetPlayerCardRosterResponse) GetResult() CMsgClientToGCSetPlayerCardRosterResponse_Result {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCSetPlayerCardRosterResponse_Result
}

type CMsgDOTAFantasyDPCLeagueStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeagueInfos []*CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo `protobuf:"bytes,1,rep,name=league_infos,json=leagueInfos" json:"league_infos,omitempty"`
}

func (x *CMsgDOTAFantasyDPCLeagueStatus) Reset() {
	*x = CMsgDOTAFantasyDPCLeagueStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAFantasyDPCLeagueStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAFantasyDPCLeagueStatus) ProtoMessage() {}

func (x *CMsgDOTAFantasyDPCLeagueStatus) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAFantasyDPCLeagueStatus.ProtoReflect.Descriptor instead.
func (*CMsgDOTAFantasyDPCLeagueStatus) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{72}
}

func (x *CMsgDOTAFantasyDPCLeagueStatus) GetLeagueInfos() []*CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo {
	if x != nil {
		return x.LeagueInfos
	}
	return nil
}

type CMsgDOTAPlayerInfo_Results struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeagueId  *uint32 `protobuf:"varint,1,opt,name=league_id,json=leagueId" json:"league_id,omitempty"`
	Placement *uint32 `protobuf:"varint,2,opt,name=placement" json:"placement,omitempty"`
	Earnings  *uint32 `protobuf:"varint,3,opt,name=earnings" json:"earnings,omitempty"`
}

func (x *CMsgDOTAPlayerInfo_Results) Reset() {
	*x = CMsgDOTAPlayerInfo_Results{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAPlayerInfo_Results) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAPlayerInfo_Results) ProtoMessage() {}

func (x *CMsgDOTAPlayerInfo_Results) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAPlayerInfo_Results.ProtoReflect.Descriptor instead.
func (*CMsgDOTAPlayerInfo_Results) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{0, 0}
}

func (x *CMsgDOTAPlayerInfo_Results) GetLeagueId() uint32 {
	if x != nil && x.LeagueId != nil {
		return *x.LeagueId
	}
	return 0
}

func (x *CMsgDOTAPlayerInfo_Results) GetPlacement() uint32 {
	if x != nil && x.Placement != nil {
		return *x.Placement
	}
	return 0
}

func (x *CMsgDOTAPlayerInfo_Results) GetEarnings() uint32 {
	if x != nil && x.Earnings != nil {
		return *x.Earnings
	}
	return 0
}

type CMsgDOTAPlayerInfo_AuditEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTimestamp *uint32 `protobuf:"varint,1,opt,name=start_timestamp,json=startTimestamp" json:"start_timestamp,omitempty"`
	EndTimestamp   *uint32 `protobuf:"varint,2,opt,name=end_timestamp,json=endTimestamp" json:"end_timestamp,omitempty"`
	TeamId         *uint32 `protobuf:"varint,3,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	TeamName       *string `protobuf:"bytes,4,opt,name=team_name,json=teamName" json:"team_name,omitempty"`
	TeamTag        *string `protobuf:"bytes,5,opt,name=team_tag,json=teamTag" json:"team_tag,omitempty"`
	TeamUrlLogo    *string `protobuf:"bytes,6,opt,name=team_url_logo,json=teamUrlLogo" json:"team_url_logo,omitempty"`
}

func (x *CMsgDOTAPlayerInfo_AuditEntry) Reset() {
	*x = CMsgDOTAPlayerInfo_AuditEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAPlayerInfo_AuditEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAPlayerInfo_AuditEntry) ProtoMessage() {}

func (x *CMsgDOTAPlayerInfo_AuditEntry) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAPlayerInfo_AuditEntry.ProtoReflect.Descriptor instead.
func (*CMsgDOTAPlayerInfo_AuditEntry) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{0, 1}
}

func (x *CMsgDOTAPlayerInfo_AuditEntry) GetStartTimestamp() uint32 {
	if x != nil && x.StartTimestamp != nil {
		return *x.StartTimestamp
	}
	return 0
}

func (x *CMsgDOTAPlayerInfo_AuditEntry) GetEndTimestamp() uint32 {
	if x != nil && x.EndTimestamp != nil {
		return *x.EndTimestamp
	}
	return 0
}

func (x *CMsgDOTAPlayerInfo_AuditEntry) GetTeamId() uint32 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

func (x *CMsgDOTAPlayerInfo_AuditEntry) GetTeamName() string {
	if x != nil && x.TeamName != nil {
		return *x.TeamName
	}
	return ""
}

func (x *CMsgDOTAPlayerInfo_AuditEntry) GetTeamTag() string {
	if x != nil && x.TeamTag != nil {
		return *x.TeamTag
	}
	return ""
}

func (x *CMsgDOTAPlayerInfo_AuditEntry) GetTeamUrlLogo() string {
	if x != nil && x.TeamUrlLogo != nil {
		return *x.TeamUrlLogo
	}
	return ""
}

type CMsgDOTADPCProfileInfo_PredictionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Percent       *uint32 `protobuf:"varint,1,opt,name=percent" json:"percent,omitempty"`
	ShardWinnings *int32  `protobuf:"varint,2,opt,name=shard_winnings,json=shardWinnings" json:"shard_winnings,omitempty"`
}

func (x *CMsgDOTADPCProfileInfo_PredictionInfo) Reset() {
	*x = CMsgDOTADPCProfileInfo_PredictionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTADPCProfileInfo_PredictionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTADPCProfileInfo_PredictionInfo) ProtoMessage() {}

func (x *CMsgDOTADPCProfileInfo_PredictionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTADPCProfileInfo_PredictionInfo.ProtoReflect.Descriptor instead.
func (*CMsgDOTADPCProfileInfo_PredictionInfo) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{2, 0}
}

func (x *CMsgDOTADPCProfileInfo_PredictionInfo) GetPercent() uint32 {
	if x != nil && x.Percent != nil {
		return *x.Percent
	}
	return 0
}

func (x *CMsgDOTADPCProfileInfo_PredictionInfo) GetShardWinnings() int32 {
	if x != nil && x.ShardWinnings != nil {
		return *x.ShardWinnings
	}
	return 0
}

type CMsgDOTADPCProfileInfo_FantasyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Top_90Finishes *uint32 `protobuf:"varint,1,opt,name=top_90_finishes,json=top90Finishes" json:"top_90_finishes,omitempty"`
	Top_75Finishes *uint32 `protobuf:"varint,2,opt,name=top_75_finishes,json=top75Finishes" json:"top_75_finishes,omitempty"`
	Top_50Finishes *uint32 `protobuf:"varint,3,opt,name=top_50_finishes,json=top50Finishes" json:"top_50_finishes,omitempty"`
	ShardWinnings  *uint32 `protobuf:"varint,4,opt,name=shard_winnings,json=shardWinnings" json:"shard_winnings,omitempty"`
}

func (x *CMsgDOTADPCProfileInfo_FantasyInfo) Reset() {
	*x = CMsgDOTADPCProfileInfo_FantasyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTADPCProfileInfo_FantasyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTADPCProfileInfo_FantasyInfo) ProtoMessage() {}

func (x *CMsgDOTADPCProfileInfo_FantasyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTADPCProfileInfo_FantasyInfo.ProtoReflect.Descriptor instead.
func (*CMsgDOTADPCProfileInfo_FantasyInfo) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{2, 1}
}

func (x *CMsgDOTADPCProfileInfo_FantasyInfo) GetTop_90Finishes() uint32 {
	if x != nil && x.Top_90Finishes != nil {
		return *x.Top_90Finishes
	}
	return 0
}

func (x *CMsgDOTADPCProfileInfo_FantasyInfo) GetTop_75Finishes() uint32 {
	if x != nil && x.Top_75Finishes != nil {
		return *x.Top_75Finishes
	}
	return 0
}

func (x *CMsgDOTADPCProfileInfo_FantasyInfo) GetTop_50Finishes() uint32 {
	if x != nil && x.Top_50Finishes != nil {
		return *x.Top_50Finishes
	}
	return 0
}

func (x *CMsgDOTADPCProfileInfo_FantasyInfo) GetShardWinnings() uint32 {
	if x != nil && x.ShardWinnings != nil {
		return *x.ShardWinnings
	}
	return 0
}

type CMsgDOTALeaderboards_RegionLeaderboard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Division   *uint32  `protobuf:"varint,1,opt,name=division" json:"division,omitempty"`
	AccountIds []uint32 `protobuf:"varint,2,rep,name=account_ids,json=accountIds" json:"account_ids,omitempty"`
}

func (x *CMsgDOTALeaderboards_RegionLeaderboard) Reset() {
	*x = CMsgDOTALeaderboards_RegionLeaderboard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTALeaderboards_RegionLeaderboard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTALeaderboards_RegionLeaderboard) ProtoMessage() {}

func (x *CMsgDOTALeaderboards_RegionLeaderboard) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTALeaderboards_RegionLeaderboard.ProtoReflect.Descriptor instead.
func (*CMsgDOTALeaderboards_RegionLeaderboard) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{3, 0}
}

func (x *CMsgDOTALeaderboards_RegionLeaderboard) GetDivision() uint32 {
	if x != nil && x.Division != nil {
		return *x.Division
	}
	return 0
}

func (x *CMsgDOTALeaderboards_RegionLeaderboard) GetAccountIds() []uint32 {
	if x != nil {
		return x.AccountIds
	}
	return nil
}

type CMsgDOTAFantasyLeagueInfo_OwnerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerAccountId  *uint32  `protobuf:"varint,1,opt,name=owner_account_id,json=ownerAccountId" json:"owner_account_id,omitempty"`
	LeftLeague      *bool    `protobuf:"varint,2,opt,name=left_league,json=leftLeague" json:"left_league,omitempty"`
	PlayerAccountId []uint32 `protobuf:"varint,3,rep,name=player_account_id,json=playerAccountId" json:"player_account_id,omitempty"`
}

func (x *CMsgDOTAFantasyLeagueInfo_OwnerInfo) Reset() {
	*x = CMsgDOTAFantasyLeagueInfo_OwnerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAFantasyLeagueInfo_OwnerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAFantasyLeagueInfo_OwnerInfo) ProtoMessage() {}

func (x *CMsgDOTAFantasyLeagueInfo_OwnerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAFantasyLeagueInfo_OwnerInfo.ProtoReflect.Descriptor instead.
func (*CMsgDOTAFantasyLeagueInfo_OwnerInfo) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{7, 0}
}

func (x *CMsgDOTAFantasyLeagueInfo_OwnerInfo) GetOwnerAccountId() uint32 {
	if x != nil && x.OwnerAccountId != nil {
		return *x.OwnerAccountId
	}
	return 0
}

func (x *CMsgDOTAFantasyLeagueInfo_OwnerInfo) GetLeftLeague() bool {
	if x != nil && x.LeftLeague != nil {
		return *x.LeftLeague
	}
	return false
}

func (x *CMsgDOTAFantasyLeagueInfo_OwnerInfo) GetPlayerAccountId() []uint32 {
	if x != nil {
		return x.PlayerAccountId
	}
	return nil
}

type CMsgDOTAFantasyLeagueMatchupsResponse_Matchup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerAccountId_1 *uint32  `protobuf:"varint,1,opt,name=owner_account_id_1,json=ownerAccountId1" json:"owner_account_id_1,omitempty"`
	OwnerAccountId_2 *uint32  `protobuf:"varint,2,opt,name=owner_account_id_2,json=ownerAccountId2" json:"owner_account_id_2,omitempty"`
	Score_1          *float32 `protobuf:"fixed32,3,opt,name=score_1,json=score1" json:"score_1,omitempty"`
	Score_2          *float32 `protobuf:"fixed32,4,opt,name=score_2,json=score2" json:"score_2,omitempty"`
}

func (x *CMsgDOTAFantasyLeagueMatchupsResponse_Matchup) Reset() {
	*x = CMsgDOTAFantasyLeagueMatchupsResponse_Matchup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAFantasyLeagueMatchupsResponse_Matchup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAFantasyLeagueMatchupsResponse_Matchup) ProtoMessage() {}

func (x *CMsgDOTAFantasyLeagueMatchupsResponse_Matchup) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAFantasyLeagueMatchupsResponse_Matchup.ProtoReflect.Descriptor instead.
func (*CMsgDOTAFantasyLeagueMatchupsResponse_Matchup) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{15, 0}
}

func (x *CMsgDOTAFantasyLeagueMatchupsResponse_Matchup) GetOwnerAccountId_1() uint32 {
	if x != nil && x.OwnerAccountId_1 != nil {
		return *x.OwnerAccountId_1
	}
	return 0
}

func (x *CMsgDOTAFantasyLeagueMatchupsResponse_Matchup) GetOwnerAccountId_2() uint32 {
	if x != nil && x.OwnerAccountId_2 != nil {
		return *x.OwnerAccountId_2
	}
	return 0
}

func (x *CMsgDOTAFantasyLeagueMatchupsResponse_Matchup) GetScore_1() float32 {
	if x != nil && x.Score_1 != nil {
		return *x.Score_1
	}
	return 0
}

func (x *CMsgDOTAFantasyLeagueMatchupsResponse_Matchup) GetScore_2() float32 {
	if x != nil && x.Score_2 != nil {
		return *x.Score_2
	}
	return 0
}

type CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Matchup   []*CMsgDOTAFantasyLeagueMatchupsResponse_Matchup `protobuf:"bytes,1,rep,name=matchup" json:"matchup,omitempty"`
	StartTime *uint32                                          `protobuf:"varint,2,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	EndTime   *uint32                                          `protobuf:"varint,3,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
}

func (x *CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups) Reset() {
	*x = CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups) ProtoMessage() {}

func (x *CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups.ProtoReflect.Descriptor instead.
func (*CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{15, 1}
}

func (x *CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups) GetMatchup() []*CMsgDOTAFantasyLeagueMatchupsResponse_Matchup {
	if x != nil {
		return x.Matchup
	}
	return nil
}

func (x *CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups) GetStartTime() uint32 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups) GetEndTime() uint32 {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return 0
}

type CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId *uint32  `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Score     *float32 `protobuf:"fixed32,2,opt,name=score" json:"score,omitempty"`
}

func (x *CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore) Reset() {
	*x = CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore) ProtoMessage() {}

func (x *CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore.ProtoReflect.Descriptor instead.
func (*CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{23, 0}
}

func (x *CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore) GetScore() float32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

type CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FantasyLeagueId  *uint32  `protobuf:"varint,1,opt,name=fantasy_league_id,json=fantasyLeagueId" json:"fantasy_league_id,omitempty"`
	OwnerAccountId   *uint32  `protobuf:"varint,2,opt,name=owner_account_id,json=ownerAccountId" json:"owner_account_id,omitempty"`
	FantasyTeamIndex *uint32  `protobuf:"varint,3,opt,name=fantasy_team_index,json=fantasyTeamIndex" json:"fantasy_team_index,omitempty"`
	FantasyTeamLogo  *uint64  `protobuf:"varint,4,opt,name=fantasy_team_logo,json=fantasyTeamLogo" json:"fantasy_team_logo,omitempty"`
	OwnerName        *string  `protobuf:"bytes,5,opt,name=owner_name,json=ownerName" json:"owner_name,omitempty"`
	FantasyTeamName  *string  `protobuf:"bytes,6,opt,name=fantasy_team_name,json=fantasyTeamName" json:"fantasy_team_name,omitempty"`
	Score            *float32 `protobuf:"fixed32,7,opt,name=score" json:"score,omitempty"`
	ScoreAgainst     *float32 `protobuf:"fixed32,8,opt,name=score_against,json=scoreAgainst" json:"score_against,omitempty"`
	Wins             *uint32  `protobuf:"varint,9,opt,name=wins" json:"wins,omitempty"`
	Losses           *uint32  `protobuf:"varint,10,opt,name=losses" json:"losses,omitempty"`
	Streak           *int32   `protobuf:"varint,11,opt,name=streak" json:"streak,omitempty"`
}

func (x *CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore) Reset() {
	*x = CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore) ProtoMessage() {}

func (x *CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore.ProtoReflect.Descriptor instead.
func (*CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{25, 0}
}

func (x *CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore) GetFantasyLeagueId() uint32 {
	if x != nil && x.FantasyLeagueId != nil {
		return *x.FantasyLeagueId
	}
	return 0
}

func (x *CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore) GetOwnerAccountId() uint32 {
	if x != nil && x.OwnerAccountId != nil {
		return *x.OwnerAccountId
	}
	return 0
}

func (x *CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore) GetFantasyTeamIndex() uint32 {
	if x != nil && x.FantasyTeamIndex != nil {
		return *x.FantasyTeamIndex
	}
	return 0
}

func (x *CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore) GetFantasyTeamLogo() uint64 {
	if x != nil && x.FantasyTeamLogo != nil {
		return *x.FantasyTeamLogo
	}
	return 0
}

func (x *CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore) GetOwnerName() string {
	if x != nil && x.OwnerName != nil {
		return *x.OwnerName
	}
	return ""
}

func (x *CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore) GetFantasyTeamName() string {
	if x != nil && x.FantasyTeamName != nil {
		return *x.FantasyTeamName
	}
	return ""
}

func (x *CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore) GetScore() float32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

func (x *CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore) GetScoreAgainst() float32 {
	if x != nil && x.ScoreAgainst != nil {
		return *x.ScoreAgainst
	}
	return 0
}

func (x *CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore) GetWins() uint32 {
	if x != nil && x.Wins != nil {
		return *x.Wins
	}
	return 0
}

func (x *CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore) GetLosses() uint32 {
	if x != nil && x.Losses != nil {
		return *x.Losses
	}
	return 0
}

func (x *CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore) GetStreak() int32 {
	if x != nil && x.Streak != nil {
		return *x.Streak
	}
	return 0
}

type CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerAccountId *uint32  `protobuf:"varint,1,opt,name=player_account_id,json=playerAccountId" json:"player_account_id,omitempty"`
	PlayerName      *string  `protobuf:"bytes,2,opt,name=player_name,json=playerName" json:"player_name,omitempty"`
	Score           *float32 `protobuf:"fixed32,3,opt,name=score" json:"score,omitempty"`
}

func (x *CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore) Reset() {
	*x = CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore) ProtoMessage() {}

func (x *CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore.ProtoReflect.Descriptor instead.
func (*CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{29, 0}
}

func (x *CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore) GetPlayerAccountId() uint32 {
	if x != nil && x.PlayerAccountId != nil {
		return *x.PlayerAccountId
	}
	return 0
}

func (x *CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore) GetPlayerName() string {
	if x != nil && x.PlayerName != nil {
		return *x.PlayerName
	}
	return ""
}

func (x *CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore) GetScore() float32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

type CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Invited   *bool   `protobuf:"varint,2,opt,name=invited" json:"invited,omitempty"`
}

func (x *CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange) Reset() {
	*x = CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange) ProtoMessage() {}

func (x *CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange.ProtoReflect.Descriptor instead.
func (*CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{34, 0}
}

func (x *CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange) GetInvited() bool {
	if x != nil && x.Invited != nil {
		return *x.Invited
	}
	return false
}

type CMsgDOTAFantasyTeamTradesResponse_Trade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp         *uint32 `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	OwnerAccountId_1  *uint32 `protobuf:"varint,2,opt,name=owner_account_id_1,json=ownerAccountId1" json:"owner_account_id_1,omitempty"`
	OwnerAccountId_2  *uint32 `protobuf:"varint,3,opt,name=owner_account_id_2,json=ownerAccountId2" json:"owner_account_id_2,omitempty"`
	PlayerAccountId_1 *uint32 `protobuf:"varint,4,opt,name=player_account_id_1,json=playerAccountId1" json:"player_account_id_1,omitempty"`
	PlayerAccountId_2 *uint32 `protobuf:"varint,5,opt,name=player_account_id_2,json=playerAccountId2" json:"player_account_id_2,omitempty"`
	Status            *uint32 `protobuf:"varint,6,opt,name=status" json:"status,omitempty"`
}

func (x *CMsgDOTAFantasyTeamTradesResponse_Trade) Reset() {
	*x = CMsgDOTAFantasyTeamTradesResponse_Trade{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAFantasyTeamTradesResponse_Trade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAFantasyTeamTradesResponse_Trade) ProtoMessage() {}

func (x *CMsgDOTAFantasyTeamTradesResponse_Trade) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAFantasyTeamTradesResponse_Trade.ProtoReflect.Descriptor instead.
func (*CMsgDOTAFantasyTeamTradesResponse_Trade) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{45, 0}
}

func (x *CMsgDOTAFantasyTeamTradesResponse_Trade) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *CMsgDOTAFantasyTeamTradesResponse_Trade) GetOwnerAccountId_1() uint32 {
	if x != nil && x.OwnerAccountId_1 != nil {
		return *x.OwnerAccountId_1
	}
	return 0
}

func (x *CMsgDOTAFantasyTeamTradesResponse_Trade) GetOwnerAccountId_2() uint32 {
	if x != nil && x.OwnerAccountId_2 != nil {
		return *x.OwnerAccountId_2
	}
	return 0
}

func (x *CMsgDOTAFantasyTeamTradesResponse_Trade) GetPlayerAccountId_1() uint32 {
	if x != nil && x.PlayerAccountId_1 != nil {
		return *x.PlayerAccountId_1
	}
	return 0
}

func (x *CMsgDOTAFantasyTeamTradesResponse_Trade) GetPlayerAccountId_2() uint32 {
	if x != nil && x.PlayerAccountId_2 != nil {
		return *x.PlayerAccountId_2
	}
	return 0
}

func (x *CMsgDOTAFantasyTeamTradesResponse_Trade) GetStatus() uint32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

type CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Matches     *uint32  `protobuf:"varint,1,opt,name=matches" json:"matches,omitempty"`
	Levels      *float32 `protobuf:"fixed32,2,opt,name=levels" json:"levels,omitempty"`
	Kills       *float32 `protobuf:"fixed32,3,opt,name=kills" json:"kills,omitempty"`
	Deaths      *float32 `protobuf:"fixed32,4,opt,name=deaths" json:"deaths,omitempty"`
	Assists     *float32 `protobuf:"fixed32,5,opt,name=assists" json:"assists,omitempty"`
	LastHits    *float32 `protobuf:"fixed32,6,opt,name=last_hits,json=lastHits" json:"last_hits,omitempty"`
	Denies      *float32 `protobuf:"fixed32,7,opt,name=denies" json:"denies,omitempty"`
	Gpm         *float32 `protobuf:"fixed32,8,opt,name=gpm" json:"gpm,omitempty"`
	Xppm        *float32 `protobuf:"fixed32,9,opt,name=xppm" json:"xppm,omitempty"`
	Stuns       *float32 `protobuf:"fixed32,10,opt,name=stuns" json:"stuns,omitempty"`
	Healing     *float32 `protobuf:"fixed32,11,opt,name=healing" json:"healing,omitempty"`
	TowerKills  *float32 `protobuf:"fixed32,12,opt,name=tower_kills,json=towerKills" json:"tower_kills,omitempty"`
	RoshanKills *float32 `protobuf:"fixed32,13,opt,name=roshan_kills,json=roshanKills" json:"roshan_kills,omitempty"`
	Score       *float32 `protobuf:"fixed32,14,opt,name=score" json:"score,omitempty"`
}

func (x *CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator) Reset() {
	*x = CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator) ProtoMessage() {}

func (x *CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator.ProtoReflect.Descriptor instead.
func (*CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{51, 0}
}

func (x *CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator) GetMatches() uint32 {
	if x != nil && x.Matches != nil {
		return *x.Matches
	}
	return 0
}

func (x *CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator) GetLevels() float32 {
	if x != nil && x.Levels != nil {
		return *x.Levels
	}
	return 0
}

func (x *CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator) GetKills() float32 {
	if x != nil && x.Kills != nil {
		return *x.Kills
	}
	return 0
}

func (x *CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator) GetDeaths() float32 {
	if x != nil && x.Deaths != nil {
		return *x.Deaths
	}
	return 0
}

func (x *CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator) GetAssists() float32 {
	if x != nil && x.Assists != nil {
		return *x.Assists
	}
	return 0
}

func (x *CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator) GetLastHits() float32 {
	if x != nil && x.LastHits != nil {
		return *x.LastHits
	}
	return 0
}

func (x *CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator) GetDenies() float32 {
	if x != nil && x.Denies != nil {
		return *x.Denies
	}
	return 0
}

func (x *CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator) GetGpm() float32 {
	if x != nil && x.Gpm != nil {
		return *x.Gpm
	}
	return 0
}

func (x *CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator) GetXppm() float32 {
	if x != nil && x.Xppm != nil {
		return *x.Xppm
	}
	return 0
}

func (x *CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator) GetStuns() float32 {
	if x != nil && x.Stuns != nil {
		return *x.Stuns
	}
	return 0
}

func (x *CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator) GetHealing() float32 {
	if x != nil && x.Healing != nil {
		return *x.Healing
	}
	return 0
}

func (x *CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator) GetTowerKills() float32 {
	if x != nil && x.TowerKills != nil {
		return *x.TowerKills
	}
	return 0
}

func (x *CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator) GetRoshanKills() float32 {
	if x != nil && x.RoshanKills != nil {
		return *x.RoshanKills
	}
	return 0
}

func (x *CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator) GetScore() float32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

type CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId         *uint32                                                             `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Weeks             *uint32                                                             `protobuf:"varint,2,opt,name=weeks" json:"weeks,omitempty"`
	StatsPremium      *CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator `protobuf:"bytes,4,opt,name=stats_premium,json=statsPremium" json:"stats_premium,omitempty"`
	StatsProfessional *CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator `protobuf:"bytes,5,opt,name=stats_professional,json=statsProfessional" json:"stats_professional,omitempty"`
}

func (x *CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats) Reset() {
	*x = CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats) ProtoMessage() {}

func (x *CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats.ProtoReflect.Descriptor instead.
func (*CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{51, 1}
}

func (x *CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats) GetWeeks() uint32 {
	if x != nil && x.Weeks != nil {
		return *x.Weeks
	}
	return 0
}

func (x *CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats) GetStatsPremium() *CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator {
	if x != nil {
		return x.StatsPremium
	}
	return nil
}

func (x *CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats) GetStatsProfessional() *CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator {
	if x != nil {
		return x.StatsProfessional
	}
	return nil
}

type CMsgDOTAFantasyMessagesResponse_Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageId       *uint32 `protobuf:"varint,1,opt,name=message_id,json=messageId" json:"message_id,omitempty"`
	Message         *string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	AuthorAccountId *uint32 `protobuf:"varint,3,opt,name=author_account_id,json=authorAccountId" json:"author_account_id,omitempty"`
	Time            *uint32 `protobuf:"varint,4,opt,name=time" json:"time,omitempty"`
}

func (x *CMsgDOTAFantasyMessagesResponse_Message) Reset() {
	*x = CMsgDOTAFantasyMessagesResponse_Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAFantasyMessagesResponse_Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAFantasyMessagesResponse_Message) ProtoMessage() {}

func (x *CMsgDOTAFantasyMessagesResponse_Message) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAFantasyMessagesResponse_Message.ProtoReflect.Descriptor instead.
func (*CMsgDOTAFantasyMessagesResponse_Message) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{54, 0}
}

func (x *CMsgDOTAFantasyMessagesResponse_Message) GetMessageId() uint32 {
	if x != nil && x.MessageId != nil {
		return *x.MessageId
	}
	return 0
}

func (x *CMsgDOTAFantasyMessagesResponse_Message) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *CMsgDOTAFantasyMessagesResponse_Message) GetAuthorAccountId() uint32 {
	if x != nil && x.AuthorAccountId != nil {
		return *x.AuthorAccountId
	}
	return 0
}

func (x *CMsgDOTAFantasyMessagesResponse_Message) GetTime() uint32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

type CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp *uint32  `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	TeamIds   []uint32 `protobuf:"varint,2,rep,name=team_ids,json=teamIds" json:"team_ids,omitempty"`
	LeagueIds []uint32 `protobuf:"varint,3,rep,name=league_ids,json=leagueIds" json:"league_ids,omitempty"`
}

func (x *CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays) Reset() {
	*x = CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays) ProtoMessage() {}

func (x *CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays.ProtoReflect.Descriptor instead.
func (*CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{58, 0}
}

func (x *CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays) GetTeamIds() []uint32 {
	if x != nil {
		return x.TeamIds
	}
	return nil
}

func (x *CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays) GetLeagueIds() []uint32 {
	if x != nil {
		return x.LeagueIds
	}
	return nil
}

type CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId          *uint64 `protobuf:"varint,1,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	SeriesId         *uint32 `protobuf:"varint,2,opt,name=series_id,json=seriesId" json:"series_id,omitempty"`
	SeriesNum        *uint32 `protobuf:"varint,3,opt,name=series_num,json=seriesNum" json:"series_num,omitempty"`
	SeriesType       *uint32 `protobuf:"varint,4,opt,name=series_type,json=seriesType" json:"series_type,omitempty"`
	LeagueTier       *uint32 `protobuf:"varint,5,opt,name=league_tier,json=leagueTier" json:"league_tier,omitempty"`
	LeagueId         *uint32 `protobuf:"varint,6,opt,name=league_id,json=leagueId" json:"league_id,omitempty"`
	OpposingTeamId   *uint32 `protobuf:"varint,7,opt,name=opposing_team_id,json=opposingTeamId" json:"opposing_team_id,omitempty"`
	OpposingTeamLogo *uint64 `protobuf:"varint,8,opt,name=opposing_team_logo,json=opposingTeamLogo" json:"opposing_team_logo,omitempty"`
	OpposingTeamName *string `protobuf:"bytes,9,opt,name=opposing_team_name,json=opposingTeamName" json:"opposing_team_name,omitempty"`
	OwnedBy          *uint32 `protobuf:"varint,11,opt,name=owned_by,json=ownedBy" json:"owned_by,omitempty"`
	Benched          *bool   `protobuf:"varint,12,opt,name=benched" json:"benched,omitempty"`
}

func (x *CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData) Reset() {
	*x = CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData) ProtoMessage() {}

func (x *CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData.ProtoReflect.Descriptor instead.
func (*CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{62, 0}
}

func (x *CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData) GetSeriesId() uint32 {
	if x != nil && x.SeriesId != nil {
		return *x.SeriesId
	}
	return 0
}

func (x *CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData) GetSeriesNum() uint32 {
	if x != nil && x.SeriesNum != nil {
		return *x.SeriesNum
	}
	return 0
}

func (x *CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData) GetSeriesType() uint32 {
	if x != nil && x.SeriesType != nil {
		return *x.SeriesType
	}
	return 0
}

func (x *CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData) GetLeagueTier() uint32 {
	if x != nil && x.LeagueTier != nil {
		return *x.LeagueTier
	}
	return 0
}

func (x *CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData) GetLeagueId() uint32 {
	if x != nil && x.LeagueId != nil {
		return *x.LeagueId
	}
	return 0
}

func (x *CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData) GetOpposingTeamId() uint32 {
	if x != nil && x.OpposingTeamId != nil {
		return *x.OpposingTeamId
	}
	return 0
}

func (x *CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData) GetOpposingTeamLogo() uint64 {
	if x != nil && x.OpposingTeamLogo != nil {
		return *x.OpposingTeamLogo
	}
	return 0
}

func (x *CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData) GetOpposingTeamName() string {
	if x != nil && x.OpposingTeamName != nil {
		return *x.OpposingTeamName
	}
	return ""
}

func (x *CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData) GetOwnedBy() uint32 {
	if x != nil && x.OwnedBy != nil {
		return *x.OwnedBy
	}
	return 0
}

func (x *CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData) GetBenched() bool {
	if x != nil && x.Benched != nil {
		return *x.Benched
	}
	return false
}

type CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeagueId       *uint32                                       `protobuf:"varint,1,opt,name=league_id,json=leagueId" json:"league_id,omitempty"`
	LeagueName     *string                                       `protobuf:"bytes,2,opt,name=league_name,json=leagueName" json:"league_name,omitempty"`
	StartTimestamp *uint32                                       `protobuf:"varint,3,opt,name=start_timestamp,json=startTimestamp" json:"start_timestamp,omitempty"`
	EndTimestamp   *uint32                                       `protobuf:"varint,4,opt,name=end_timestamp,json=endTimestamp" json:"end_timestamp,omitempty"`
	DayTimestamps  []uint32                                      `protobuf:"varint,5,rep,name=day_timestamps,json=dayTimestamps" json:"day_timestamps,omitempty"`
	Status         *CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus `protobuf:"varint,8,opt,name=status,enum=dota.CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus,def=0" json:"status,omitempty"`
}

// Default values for CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo fields.
const (
	Default_CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo_Status = CMsgDOTAFantasyDPCLeagueStatus_UNSET
)

func (x *CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo) Reset() {
	*x = CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo) ProtoMessage() {}

func (x *CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo.ProtoReflect.Descriptor instead.
func (*CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{72, 0}
}

func (x *CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo) GetLeagueId() uint32 {
	if x != nil && x.LeagueId != nil {
		return *x.LeagueId
	}
	return 0
}

func (x *CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo) GetLeagueName() string {
	if x != nil && x.LeagueName != nil {
		return *x.LeagueName
	}
	return ""
}

func (x *CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo) GetStartTimestamp() uint32 {
	if x != nil && x.StartTimestamp != nil {
		return *x.StartTimestamp
	}
	return 0
}

func (x *CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo) GetEndTimestamp() uint32 {
	if x != nil && x.EndTimestamp != nil {
		return *x.EndTimestamp
	}
	return 0
}

func (x *CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo) GetDayTimestamps() []uint32 {
	if x != nil {
		return x.DayTimestamps
	}
	return nil
}

func (x *CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo) GetStatus() CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return Default_CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo_Status
}

var File_dota_gcmessages_client_fantasy_proto protoreflect.FileDescriptor

var file_dota_gcmessages_client_fantasy_proto_rawDesc = []byte{
	0x0a, 0x24, 0x64, 0x6f, 0x74, 0x61, 0x5f, 0x67, 0x63, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x64, 0x6f, 0x74, 0x61, 0x1a, 0x17, 0x64, 0x6f,
	0x74, 0x61, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x99, 0x07, 0x0a, 0x12, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f,
	0x54, 0x41, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x4e, 0x0a, 0x0c, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x5f, 0x72, 0x6f,
	0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e,
	0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x5f, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x3a, 0x16, 0x46,
	0x41, 0x4e, 0x54, 0x41, 0x53, 0x59, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x55, 0x4e, 0x44, 0x45,
	0x46, 0x49, 0x4e, 0x45, 0x44, 0x52, 0x0b, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x52, 0x6f,
	0x6c, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x74, 0x61, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x65, 0x61, 0x6d,
	0x54, 0x61, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x12, 0x1b, 0x0a,
	0x09, 0x69, 0x73, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x69, 0x73, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73,
	0x5f, 0x70, 0x72, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x50, 0x72,
	0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x3a, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x0e,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x44, 0x4f, 0x54, 0x41, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12,
	0x22, 0x0a, 0x0d, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x6c, 0x6f, 0x67, 0x6f,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x65, 0x61, 0x6d, 0x55, 0x72, 0x6c, 0x4c,
	0x6f, 0x67, 0x6f, 0x12, 0x48, 0x0a, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x65, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x6f, 0x74,
	0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0c, 0x61, 0x75, 0x64, 0x69, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x1a, 0x60, 0x0a,
	0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x61, 0x67,
	0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x65, 0x61,
	0x67, 0x75, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x1a,
	0xcf, 0x01, 0x0a, 0x0a, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x27,
	0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x17, 0x0a, 0x07,
	0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74,
	0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x61, 0x67, 0x12, 0x22, 0x0a,
	0x0d, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x65, 0x61, 0x6d, 0x55, 0x72, 0x6c, 0x4c, 0x6f, 0x67,
	0x6f, 0x22, 0x55, 0x0a, 0x16, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0c, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54,
	0x41, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0xaf, 0x04, 0x0a, 0x16, 0x43, 0x4d, 0x73,
	0x67, 0x44, 0x4f, 0x54, 0x41, 0x44, 0x50, 0x43, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x39, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x54,
	0x0a, 0x0f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x44, 0x50, 0x43, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4b, 0x0a, 0x0c, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x64, 0x6f, 0x74,
	0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x44, 0x50, 0x43, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x35, 0x0a, 0x16, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x15, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x51, 0x0a, 0x0e, 0x50, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x77, 0x69,
	0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x68,
	0x61, 0x72, 0x64, 0x57, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0xac, 0x01, 0x0a, 0x0b,
	0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x0f, 0x74,
	0x6f, 0x70, 0x5f, 0x39, 0x30, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x6f, 0x70, 0x39, 0x30, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x6f, 0x70, 0x5f, 0x37, 0x35, 0x5f, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x6f,
	0x70, 0x37, 0x35, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x74,
	0x6f, 0x70, 0x5f, 0x35, 0x30, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x6f, 0x70, 0x35, 0x30, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x77, 0x69, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x68, 0x61,
	0x72, 0x64, 0x57, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x22, 0xba, 0x01, 0x0a, 0x14, 0x43,
	0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x73, 0x12, 0x50, 0x0a, 0x0c, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x64, 0x6f, 0x74, 0x61,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x0c, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x73, 0x1a, 0x50, 0x0a, 0x11, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4c,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x69,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x22, 0xe5, 0x01, 0x0a, 0x22, 0x43, 0x4d, 0x73, 0x67,
	0x44, 0x4f, 0x54, 0x41, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73,
	0x79, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x4c, 0x6f, 0x67, 0x6f,
	0x12, 0x5e, 0x0a, 0x0e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e,
	0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x5f, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x4d, 0x6f, 0x64, 0x65, 0x3a, 0x19, 0x46, 0x41, 0x4e, 0x54, 0x41, 0x53, 0x59, 0x5f,
	0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x52, 0x0d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x80, 0x02, 0x0a, 0x23, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x61, 0x6e,
	0x74, 0x61, 0x73, 0x79, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a, 0x07, 0x53, 0x55, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x84, 0x01, 0x0a, 0x07,
	0x45, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x59, 0x5f, 0x4c, 0x45,
	0x41, 0x47, 0x55, 0x45, 0x53, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43,
	0x52, 0x45, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44,
	0x10, 0x04, 0x22, 0xaf, 0x03, 0x0a, 0x18, 0x43, 0x4d, 0x73, 0x67, 0x46, 0x61, 0x6e, 0x74, 0x61,
	0x73, 0x79, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64,
	0x65, 0x61, 0x74, 0x68, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x64, 0x65, 0x61,
	0x74, 0x68, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x68, 0x69, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x48, 0x69, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65,
	0x6e, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x64, 0x65, 0x6e, 0x69,
	0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x70, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x03, 0x67, 0x70, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x78, 0x70, 0x70, 0x6d, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x04, 0x78, 0x70, 0x70, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x75, 0x6e,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x74, 0x75, 0x6e, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x68, 0x65, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x07, 0x68, 0x65, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x77, 0x65,
	0x72, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x74,
	0x6f, 0x77, 0x65, 0x72, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x6f, 0x73,
	0x68, 0x61, 0x6e, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0b, 0x72, 0x6f, 0x73, 0x68, 0x61, 0x6e, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x2d, 0x0a, 0x12,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x65, 0x6d, 0x69,
	0x75, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x6c, 0x69, 0x65, 0x72, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x12, 0x37, 0x0a, 0x17, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x16, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x22, 0x9c, 0x08, 0x0a, 0x19, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54,
	0x41, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x5f, 0x6c, 0x65,
	0x61, 0x67, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x66,
	0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x64, 0x12, 0x36,
	0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73,
	0x79, 0x5f, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x4c, 0x65, 0x61, 0x67,
	0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x5e, 0x0a, 0x0e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c,
	0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x5f, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4d, 0x6f, 0x64, 0x65, 0x3a, 0x19, 0x46, 0x41,
	0x4e, 0x54, 0x41, 0x53, 0x59, 0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x52, 0x0d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x65, 0x61, 0x6d,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x12, 0x38, 0x0a, 0x07, 0x73, 0x63, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x6f, 0x74,
	0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x4c, 0x65, 0x61,
	0x67, 0x75, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x73, 0x63, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x72, 0x61, 0x66, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x64, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x70, 0x69, 0x63, 0x6b,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x64, 0x72, 0x61,
	0x66, 0x74, 0x50, 0x69, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x65, 0x74, 0x6f, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x73,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x76, 0x65, 0x74, 0x6f, 0x56, 0x6f, 0x74, 0x65,
	0x73, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x61, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x31, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x6c, 0x6f, 0x74, 0x31, 0x12, 0x15, 0x0a, 0x06,
	0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x32, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x6c,
	0x6f, 0x74, 0x32, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x33, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x6c, 0x6f, 0x74, 0x33, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x6c,
	0x6f, 0x74, 0x5f, 0x34, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x6c, 0x6f, 0x74,
	0x34, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x35, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x73, 0x6c, 0x6f, 0x74, 0x35, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x65, 0x6e, 0x63,
	0x68, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x62,
	0x65, 0x6e, 0x63, 0x68, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x48, 0x0a, 0x0a, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x46, 0x61, 0x6e,
	0x74, 0x61, 0x73, 0x79, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x1a,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0x82,
	0x01, 0x0a, 0x09, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a, 0x10,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x6c,
	0x65, 0x61, 0x67, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6c, 0x65, 0x66,
	0x74, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x22, 0x90, 0x01, 0x0a, 0x24, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41,
	0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x45, 0x64, 0x69,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11,
	0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x5f, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79,
	0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x64, 0x69, 0x74,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x6f,
	0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x46, 0x61, 0x6e, 0x74, 0x61,
	0x73, 0x79, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x65, 0x64,
	0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xc5, 0x01, 0x0a, 0x25, 0x43, 0x4d, 0x73, 0x67, 0x44,
	0x4f, 0x54, 0x41, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65,
	0x45, 0x64, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x54, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x33, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41,
	0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x45, 0x64, 0x69,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x46, 0x0a, 0x07, 0x45, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x15,
	0x0a, 0x11, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e,
	0x4f, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x22, 0x6a,
	0x0a, 0x20, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73,
	0x79, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x5f, 0x6c, 0x65,
	0x61, 0x67, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x66,
	0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0xf9, 0x02, 0x0a, 0x21, 0x43,
	0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x4c, 0x65,
	0x61, 0x67, 0x75, 0x65, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x50, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2f, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41,
	0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x46, 0x69, 0x6e,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x3a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x5f, 0x6c, 0x65,
	0x61, 0x67, 0x75, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0xa4, 0x01, 0x0a, 0x07, 0x45, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x53,
	0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x4c, 0x45, 0x41, 0x47, 0x55, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55,
	0x4e, 0x44, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x42, 0x41,
	0x44, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x46, 0x55, 0x4c,
	0x4c, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x41, 0x4c, 0x52,
	0x45, 0x41, 0x44, 0x59, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x05, 0x12, 0x17, 0x0a,
	0x13, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4c, 0x45, 0x41, 0x47, 0x55, 0x45, 0x5f, 0x4c, 0x4f,
	0x43, 0x4b, 0x45, 0x44, 0x10, 0x06, 0x22, 0x4e, 0x0a, 0x20, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f,
	0x54, 0x41, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x61,
	0x6e, 0x74, 0x61, 0x73, 0x79, 0x5f, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x4c, 0x65,
	0x61, 0x67, 0x75, 0x65, 0x49, 0x64, 0x22, 0xbd, 0x01, 0x0a, 0x21, 0x43, 0x4d, 0x73, 0x67, 0x44,
	0x4f, 0x54, 0x41, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x64,
	0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x46, 0x61, 0x6e, 0x74,
	0x61, 0x73, 0x79, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a, 0x07, 0x53,
	0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x46,
	0x0a, 0x07, 0x45, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x01, 0x12, 0x17, 0x0a,
	0x13, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x42, 0x41, 0x44, 0x5f, 0x4c, 0x45, 0x41, 0x47, 0x55,
	0x45, 0x5f, 0x49, 0x44, 0x10, 0x02, 0x22, 0x52, 0x0a, 0x24, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f,
	0x54, 0x41, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a,
	0x0a, 0x11, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x5f, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x66, 0x61, 0x6e, 0x74, 0x61,
	0x73, 0x79, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x64, 0x22, 0xa3, 0x05, 0x0a, 0x25, 0x43,
	0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x4c, 0x65,
	0x61, 0x67, 0x75, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x44, 0x4f, 0x54, 0x41, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x4c, 0x65, 0x61, 0x67, 0x75,
	0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x61,
	0x6e, 0x74, 0x61, 0x73, 0x79, 0x5f, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x4c, 0x65,
	0x61, 0x67, 0x75, 0x65, 0x49, 0x64, 0x12, 0x63, 0x0a, 0x0f, 0x77, 0x65, 0x65, 0x6b, 0x6c, 0x79,
	0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x75, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3a, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x46,
	0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x57, 0x65, 0x65,
	0x6b, 0x6c, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x75, 0x70, 0x73, 0x52, 0x0e, 0x77, 0x65, 0x65,
	0x6b, 0x6c, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x75, 0x70, 0x73, 0x1a, 0x95, 0x01, 0x0a, 0x07,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x75, 0x70, 0x12, 0x2b, 0x0a, 0x12, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x31, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x31, 0x12, 0x2b, 0x0a, 0x12, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x32, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x31, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x31, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x5f, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x32, 0x1a, 0x99, 0x01, 0x0a, 0x0e, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x75, 0x70, 0x73, 0x12, 0x4d, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x75,
	0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x4c, 0x65,
	0x61, 0x67, 0x75, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x75, 0x70, 0x52, 0x07, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x75, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0x5f, 0x0a, 0x07, 0x45, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x01, 0x12, 0x17,
	0x0a, 0x13, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x42, 0x41, 0x44, 0x5f, 0x4c, 0x45, 0x41, 0x47,
	0x55, 0x45, 0x5f, 0x49, 0x44, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x4e, 0x4f, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x03,
	0x22, 0xa5, 0x01, 0x0a, 0x1e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x45, 0x64, 0x69,
	0x74, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x5f, 0x6c,
	0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x65, 0x61, 0x6d, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x74, 0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x67, 0x6f, 0x22, 0xf5, 0x01, 0x0a, 0x1f, 0x43, 0x4d, 0x73,
	0x67, 0x44, 0x4f, 0x54, 0x41, 0x45, 0x64, 0x69, 0x74, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79,
	0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x64,
	0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x45, 0x64, 0x69, 0x74,
	0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a, 0x07, 0x53, 0x55, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x81, 0x01, 0x0a,
	0x07, 0x45, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x54, 0x45,
	0x41, 0x4d, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f,
	0x54, 0x41, 0x4b, 0x45, 0x4e, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x4e, 0x4f, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x04,
	0x22, 0x5d, 0x0a, 0x2f, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x46, 0x61, 0x6e, 0x74,
	0x61, 0x73, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x42, 0x79, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x4c, 0x65, 0x61, 0x67, 0x75,
	0x65, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x5f, 0x6c,
	0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x64, 0x22,
	0x5a, 0x0a, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x46, 0x61, 0x6e, 0x74, 0x61,
	0x73, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x42, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x44, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x5a, 0x0a, 0x1f, 0x43,
	0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x54, 0x65,
	0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37,
	0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x46,
	0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0xaa, 0x02, 0x0a, 0x17, 0x43, 0x4d, 0x73, 0x67,
	0x44, 0x4f, 0x54, 0x41, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x5f, 0x6c,
	0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x64, 0x12,
	0x28, 0x0a, 0x10, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x61, 0x6e,
	0x74, 0x61, 0x73, 0x79, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x54, 0x65,
	0x61, 0x6d, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6c, 0x6f, 0x67,
	0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x67,
	0x6f, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x69, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x77, 0x69, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x73, 0x73, 0x65, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x6f, 0x73, 0x73, 0x65, 0x73, 0x12, 0x25, 0x0a,
	0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f,
	0x73, 0x74, 0x65, 0x72, 0x22, 0xc6, 0x02, 0x0a, 0x1f, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54,
	0x41, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x61, 0x6e, 0x74,
	0x61, 0x73, 0x79, 0x5f, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x4c, 0x65, 0x61, 0x67,
	0x75, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2c,
	0x0a, 0x12, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x66, 0x61, 0x6e, 0x74,
	0x61, 0x73, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x26, 0x0a, 0x0f,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x26, 0x0a, 0x0f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x5f, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x22, 0xba, 0x03,
	0x0a, 0x20, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73,
	0x79, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f,
	0x54, 0x41, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x3a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x5f, 0x74,
	0x65, 0x61, 0x6d, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x10, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x68, 0x0a, 0x14, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x5f, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x36, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x46,
	0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x12, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x1a, 0x46, 0x0a, 0x0f, 0x43,
	0x4d, 0x73, 0x67, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x22, 0x65, 0x0a, 0x07, 0x45, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0b,
	0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x5f, 0x50,
	0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4f, 0x57, 0x4e, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x49,
	0x4e, 0x5f, 0x4c, 0x45, 0x41, 0x47, 0x55, 0x45, 0x10, 0x03, 0x22, 0xb5, 0x02, 0x0a, 0x23, 0x43,
	0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x54, 0x65,
	0x61, 0x6d, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x5f, 0x6c, 0x65,
	0x61, 0x67, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x66,
	0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x26, 0x0a, 0x0f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64,
	0x12, 0x2a, 0x0a, 0x11, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x24, 0x0a, 0x0e,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x5f, 0x68, 0x61, 0x6c, 0x6c, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x48, 0x61,
	0x6c, 0x6c, 0x22, 0xaa, 0x05, 0x0a, 0x24, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x46,
	0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x64, 0x6f,
	0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x46, 0x61, 0x6e, 0x74, 0x61,
	0x73, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a,
	0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x59, 0x0a, 0x0b, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x44, 0x4f, 0x54, 0x41, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x54, 0x65, 0x61, 0x6d,
	0x53, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52,
	0x0a, 0x74, 0x65, 0x61, 0x6d, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x1a, 0x89, 0x03, 0x0a, 0x0d,
	0x43, 0x4d, 0x73, 0x67, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x2a, 0x0a,
	0x11, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x5f, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73,
	0x79, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x5f, 0x74,
	0x65, 0x61, 0x6d, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x10, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x5f, 0x74, 0x65, 0x61,
	0x6d, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x66, 0x61,
	0x6e, 0x74, 0x61, 0x73, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x1d, 0x0a,
	0x0a, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11,
	0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79,
	0x54, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x67, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x41, 0x67, 0x61, 0x69,
	0x6e, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x69, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x77, 0x69, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x73, 0x73, 0x65,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x6f, 0x73, 0x73, 0x65, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x22, 0x46, 0x0a, 0x07, 0x45, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12,
	0x15, 0x0a, 0x11, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x4e, 0x4f, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x22,
	0xa3, 0x02, 0x0a, 0x21, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x46, 0x61, 0x6e, 0x74,
	0x61, 0x73, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79,
	0x5f, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49,
	0x64, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a,
	0x11, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4c, 0x61, 0x73, 0x74,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x22, 0xce, 0x02, 0x0a, 0x22, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f,
	0x54, 0x41, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x64,
	0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x46, 0x61, 0x6e, 0x74,
	0x61, 0x73, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a, 0x07,
	0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x2a, 0x0a, 0x11, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x5f, 0x6c, 0x65, 0x61, 0x67, 0x75,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x66, 0x61, 0x6e, 0x74,
	0x61, 0x73, 0x79, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x46,
	0x0a, 0x07, 0x45, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x01, 0x12, 0x17, 0x0a,
	0x13, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x22, 0xa5, 0x02, 0x0a, 0x25, 0x43, 0x4d, 0x73, 0x67, 0x44,
	0x4f, 0x54, 0x41, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2a, 0x0a, 0x11, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x5f, 0x6c, 0x65, 0x61, 0x67,
	0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x66, 0x61, 0x6e,
	0x74, 0x61, 0x73, 0x79, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x22, 0xe0,
	0x03, 0x0a, 0x26, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x46, 0x61, 0x6e, 0x74, 0x61,
	0x73, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x64, 0x6f, 0x74, 0x61,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a,
	0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x2a, 0x0a, 0x11, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x5f, 0x6c, 0x65, 0x61, 0x67,
	0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x66, 0x61, 0x6e,
	0x74, 0x61, 0x73, 0x79, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65,
	0x12, 0x61, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x73, 0x1a, 0x74, 0x0a, 0x0f, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x46, 0x0a, 0x07, 0x45, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10,
	0x00, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x4e, 0x4f, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10,
	0x02, 0x22, 0xe4, 0x01, 0x0a, 0x22, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x46, 0x61,
	0x6e, 0x74, 0x61, 0x73, 0x79, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79,
	0x5f, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x4c, 0x65, 0x61, 0x67, 0x75,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x6c, 0x6f,
	0x67, 0x6f, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x22, 0xee, 0x02, 0x0a, 0x23, 0x43, 0x4d, 0x73,
	0x67, 0x44, 0x4f, 0x54, 0x41, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x4c, 0x65, 0x61, 0x67,
	0x75, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x52, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x31, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41,
	0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x3a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x5f,
	0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x64,
	0x22, 0xc6, 0x01, 0x0a, 0x07, 0x45, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0b, 0x0a, 0x07,
	0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x42, 0x41, 0x44, 0x5f,
	0x53, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x42, 0x41, 0x44, 0x5f, 0x4c, 0x45, 0x41, 0x47, 0x55, 0x45, 0x5f,
	0x4e, 0x41, 0x4d, 0x45, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x42, 0x41, 0x44, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x04, 0x12,
	0x15, 0x0a, 0x11, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x05, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x4c, 0x4f, 0x47, 0x4f, 0x5f, 0x55, 0x50, 0x4c, 0x4f,
	0x41, 0x44, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x4f,
	0x5f, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x54, 0x10, 0x07, 0x22, 0xc1, 0x01, 0x0a, 0x20, 0x43, 0x4d,
	0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x54, 0x65, 0x61,
	0x6d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a,
	0x0a, 0x11, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x5f, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x66, 0x61, 0x6e, 0x74, 0x61,
	0x73, 0x79, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0c, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x22, 0xaf, 0x03,
	0x0a, 0x21, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73,
	0x79, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44,
	0x4f, 0x54, 0x41, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x3a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79,
	0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x22, 0x89, 0x02, 0x0a, 0x07, 0x45, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x4c, 0x4f, 0x47, 0x4f, 0x5f, 0x55, 0x50, 0x4c, 0x4f, 0x41,
	0x44, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x42, 0x41, 0x44,
	0x5f, 0x46, 0x41, 0x4e, 0x54, 0x41, 0x53, 0x59, 0x5f, 0x4c, 0x45, 0x41, 0x47, 0x55, 0x45, 0x5f,
	0x49, 0x44, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x42, 0x41,
	0x44, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52,
	0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x42, 0x41, 0x44, 0x5f,
	0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x08, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x5f, 0x54, 0x49,
	0x43, 0x4b, 0x45, 0x54, 0x10, 0x09, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x4c, 0x45, 0x41, 0x47, 0x55, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x0a, 0x22,
	0x9b, 0x02, 0x0a, 0x27, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x46, 0x61, 0x6e, 0x74,
	0x61, 0x73, 0x79, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x45, 0x64, 0x69, 0x74, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x66,
	0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x5f, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x4c,
	0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x5f, 0x0a, 0x0d, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x64, 0x6f, 0x74,
	0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73,
	0x79, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x45, 0x64, 0x69, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0c, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x1a, 0x47, 0x0a, 0x0c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x22, 0xb2, 0x01,
	0x0a, 0x28, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73,
	0x79, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x45, 0x64, 0x69, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x64, 0x6f, 0x74,
	0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73,
	0x79, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x45, 0x64, 0x69, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x3a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x2d, 0x0a, 0x07, 0x45, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0b,
	0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x01, 0x22, 0x55, 0x0a, 0x27, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x46, 0x61,
	0x6e, 0x74, 0x61, 0x73, 0x79, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x44, 0x72, 0x61, 0x66, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a,
	0x11, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x5f, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73,
	0x79, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x64, 0x22, 0xab, 0x02, 0x0a, 0x20, 0x43, 0x4d,
	0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x4c, 0x65, 0x61,
	0x67, 0x75, 0x65, 0x44, 0x72, 0x61, 0x66, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a,
	0x0a, 0x11, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x5f, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x66, 0x61, 0x6e, 0x74, 0x61,
	0x73, 0x79, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x72,
	0x61, 0x66, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x0a, 0x64, 0x72, 0x61, 0x66, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x69, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x69, 0x63, 0x6b, 0x12, 0x25,
	0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x61,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x70,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x22, 0xa0, 0x01, 0x0a, 0x27, 0x43, 0x4d, 0x73, 0x67,
	0x44, 0x4f, 0x54, 0x41, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x4c, 0x65, 0x61, 0x67, 0x75,
	0x65, 0x44, 0x72, 0x61, 0x66, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x5f, 0x6c,
	0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2a,
	0x0a, 0x11, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x8f, 0x03, 0x0a, 0x28, 0x43,
	0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x4c, 0x65,
	0x61, 0x67, 0x75, 0x65, 0x44, 0x72, 0x61, 0x66, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x4c, 0x65,
	0x61, 0x67, 0x75, 0x65, 0x44, 0x72, 0x61, 0x66, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a,
	0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x89, 0x02, 0x0a, 0x07, 0x45, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0b, 0x0a, 0x07,
	0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x20, 0x0a, 0x1c, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x46, 0x41, 0x4e, 0x54, 0x41, 0x53, 0x59, 0x5f, 0x4c, 0x45, 0x41, 0x47, 0x55, 0x45,
	0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x46, 0x41, 0x4e, 0x54,
	0x41, 0x53, 0x59, 0x5f, 0x4c, 0x45, 0x41, 0x47, 0x55, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x44,
	0x52, 0x41, 0x46, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x4f, 0x57, 0x4e, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x5f,
	0x4c, 0x45, 0x41, 0x47, 0x55, 0x45, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4f, 0x57, 0x4e, 0x45, 0x52, 0x53, 0x5f, 0x54, 0x55, 0x52,
	0x4e, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x50, 0x4c, 0x41,
	0x59, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x06, 0x12, 0x1c, 0x0a,
	0x18, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x55, 0x4e,
	0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x07, 0x12, 0x1f, 0x0a, 0x1b, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x5f, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x53, 0x4c, 0x4f, 0x54, 0x53, 0x10, 0x08, 0x22, 0xbd, 0x01, 0x0a,
	0x24, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79,
	0x54, 0x65, 0x61, 0x6d, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x53, 0x77, 0x61, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79,
	0x5f, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x15,
	0x0a, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x31, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x73, 0x6c, 0x6f, 0x74, 0x31, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x32, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x6c, 0x6f, 0x74, 0x32, 0x22, 0xfb, 0x01, 0x0a,
	0x25, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79,
	0x54, 0x65, 0x61, 0x6d, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x53, 0x77, 0x61, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x54, 0x65, 0x61,
	0x6d, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x53, 0x77, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a, 0x07, 0x53, 0x55, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x7c, 0x0a, 0x07,
	0x45, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4f, 0x57, 0x4e, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x49,
	0x4e, 0x5f, 0x4c, 0x45, 0x41, 0x47, 0x55, 0x45, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x53, 0x4c, 0x4f, 0x54, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x4c, 0x4f,
	0x54, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x04, 0x22, 0xc2, 0x01, 0x0a, 0x27, 0x43,
	0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x54, 0x65,
	0x61, 0x6d, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x44, 0x72, 0x6f, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73,
	0x79, 0x5f, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x64, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x61, 0x64, 0x64, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x64, 0x72, 0x6f, 0x70, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x64, 0x72, 0x6f, 0x70, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22,
	0xb1, 0x02, 0x0a, 0x28, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x46, 0x61, 0x6e, 0x74,
	0x61, 0x73, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64,
	0x44, 0x72, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x64,
	0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x46, 0x61, 0x6e, 0x74,
	0x61, 0x73, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64,
	0x44, 0x72, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x3a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xab, 0x01, 0x0a, 0x07, 0x45, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x15,
	0x0a, 0x11, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4f,
	0x57, 0x4e, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x4c, 0x45, 0x41, 0x47,
	0x55, 0x45, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x50, 0x4c,
	0x41, 0x59, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42,
	0x4c, 0x45, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x50, 0x4c,
	0x41, 0x59, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4f, 0x4e, 0x5f, 0x54, 0x45, 0x41, 0x4d,
	0x10, 0x04, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x54, 0x52, 0x41, 0x44,
	0x45, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e,
	0x47, 0x10, 0x05, 0x22, 0x4e, 0x0a, 0x20, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x46,
	0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x61, 0x6e, 0x74, 0x61,
	0x73, 0x79, 0x5f, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x4c, 0x65, 0x61, 0x67, 0x75,
	0x65, 0x49, 0x64, 0x22, 0xfc, 0x03, 0x0a, 0x21, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41,
	0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x64, 0x6f, 0x74, 0x61,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79,
	0x54, 0x65, 0x61, 0x6d, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a, 0x07, 0x53, 0x55, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x45, 0x0a, 0x06, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x64, 0x6f,
	0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x46, 0x61, 0x6e, 0x74, 0x61,
	0x73, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x06, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x73, 0x1a, 0xf5, 0x01, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2b, 0x0a, 0x12, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x31,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x31, 0x12, 0x2b, 0x0a, 0x12, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x32, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x32, 0x12, 0x2d, 0x0a, 0x13, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x31, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x31, 0x12, 0x2d, 0x0a, 0x13, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x46, 0x0a, 0x07, 0x45, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x10, 0x02, 0x22, 0xc4, 0x01, 0x0a, 0x25, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x46,
	0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11,
	0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x5f, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79,
	0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x74, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x31, 0x12, 0x2b, 0x0a, 0x12, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x32,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x32, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x65, 0x61, 0x6d, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74,
	0x65, 0x61, 0x6d, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x32, 0x22, 0xdb, 0x01, 0x0a, 0x26, 0x43, 0x4d,
	0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x54, 0x65, 0x61,
	0x6d, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x44, 0x4f, 0x54, 0x41, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a, 0x07, 0x53, 0x55, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x5a, 0x0a, 0x07, 0x45,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x5f,
	0x54, 0x52, 0x41, 0x44, 0x45, 0x10, 0x03, 0x22, 0xb5, 0x01, 0x0a, 0x20, 0x43, 0x4d, 0x73, 0x67,
	0x44, 0x4f, 0x54, 0x41, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x52,
	0x6f, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11,
	0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x5f, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79,
	0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x65,
	0x61, 0x6d, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22,
	0xaf, 0x02, 0x0a, 0x21, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x46, 0x61, 0x6e, 0x74,
	0x61, 0x73, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x44, 0x4f, 0x54, 0x41, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x54, 0x65, 0x61, 0x6d,
	0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x10, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x08, 0x52, 0x0c, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x22, 0x65, 0x0a, 0x07, 0x45, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4f, 0x57, 0x4e, 0x45,
	0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x4c, 0x45, 0x41, 0x47, 0x55, 0x45, 0x10,
	0x03, 0x22, 0x58, 0x0a, 0x2a, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x46, 0x61, 0x6e,
	0x74, 0x61, 0x73, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x69, 0x73, 0x6f, 0x72, 0x69,
	0x63, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2a, 0x0a, 0x11, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x5f, 0x6c, 0x65, 0x61, 0x67, 0x75,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x66, 0x61, 0x6e, 0x74,
	0x61, 0x73, 0x79, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x64, 0x22, 0xcd, 0x07, 0x0a, 0x2b,
	0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x69, 0x73, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x64, 0x6f,
	0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x46, 0x61, 0x6e, 0x74, 0x61,
	0x73, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x69, 0x73, 0x6f, 0x72, 0x69, 0x63, 0x61,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x53, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x48, 0x69, 0x73, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x1a, 0xf7, 0x02, 0x0a,
	0x16, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x41, 0x63, 0x63, 0x75,
	0x6d, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x06, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x69, 0x6c,
	0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x64, 0x65, 0x61, 0x74, 0x68, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x06, 0x64, 0x65, 0x61, 0x74, 0x68, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x68, 0x69, 0x74, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x48, 0x69, 0x74, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06,
	0x64, 0x65, 0x6e, 0x69, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x70, 0x6d, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x03, 0x67, 0x70, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x78, 0x70, 0x70, 0x6d,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x78, 0x70, 0x70, 0x6d, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x75, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x74, 0x75,
	0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x07, 0x68, 0x65, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b,
	0x74, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0a, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x72, 0x6f, 0x73, 0x68, 0x61, 0x6e, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0b, 0x72, 0x6f, 0x73, 0x68, 0x61, 0x6e, 0x4b, 0x69, 0x6c, 0x6c, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x1a, 0xaa, 0x02, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x65, 0x65, 0x6b, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x77, 0x65, 0x65, 0x6b, 0x73, 0x12, 0x6d, 0x0a, 0x0d, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x48, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f,
	0x54, 0x41, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48,
	0x69, 0x73, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x41, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x0c, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x12, 0x77, 0x0a, 0x12, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x48, 0x69, 0x73, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x41, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72,
	0x52, 0x11, 0x73, 0x74, 0x61, 0x74, 0x73, 0x50, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x22, 0x46, 0x0a, 0x07, 0x45, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0b,
	0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x5f, 0x50,
	0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x22, 0x61, 0x0a, 0x19, 0x43,
	0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x64, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x61, 0x6e, 0x74,
	0x61, 0x73, 0x79, 0x5f, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x4c, 0x65, 0x61, 0x67,
	0x75, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x92,
	0x01, 0x0a, 0x1e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x46, 0x61, 0x6e, 0x74, 0x61,
	0x73, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x5f, 0x6c, 0x65, 0x61,
	0x67, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x66, 0x61,
	0x6e, 0x74, 0x61, 0x73, 0x79, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0xb7, 0x03, 0x0a, 0x1f, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41,
	0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x49, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x64, 0x6f, 0x74, 0x61,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x75, 0x6d, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10,
	0x6e, 0x75, 0x6d, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x1a, 0x82, 0x01, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x46, 0x0a, 0x07, 0x45, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x15, 0x0a,
	0x11, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x4f,
	0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x22, 0x91, 0x01,
	0x0a, 0x1a, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73,
	0x79, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x11,
	0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x5f, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79,
	0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x22, 0xf0, 0x01, 0x0a, 0x22, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x46, 0x61,
	0x6e, 0x74, 0x61, 0x73, 0x79, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a, 0x07, 0x53, 0x55, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x77, 0x0a, 0x07, 0x45,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4c, 0x45, 0x41,
	0x47, 0x55, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x5f, 0x4d, 0x45, 0x4d, 0x42,
	0x45, 0x52, 0x10, 0x04, 0x22, 0x54, 0x0a, 0x26, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41,
	0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a,
	0x0a, 0x11, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x5f, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x66, 0x61, 0x6e, 0x74, 0x61,
	0x73, 0x79, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x64, 0x22, 0x92, 0x03, 0x0a, 0x27, 0x43,
	0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a, 0x07, 0x53,
	0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x72,
	0x0a, 0x14, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x64,
	0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x46, 0x61, 0x6e, 0x74,
	0x61, 0x73, 0x79, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x64, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x79, 0x73, 0x52, 0x12,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61,
	0x79, 0x73, 0x1a, 0x6c, 0x0a, 0x12, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x79, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x64, 0x73,
	0x22, 0x2d, 0x0a, 0x07, 0x45, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x53,
	0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x01, 0x22,
	0x7d, 0x0a, 0x21, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x46, 0x61, 0x6e, 0x74, 0x61,
	0x73, 0x79, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x5f,
	0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x64,
	0x12, 0x2c, 0x0a, 0x12, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x5f, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x66, 0x61,
	0x6e, 0x74, 0x61, 0x73, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xf0,
	0x01, 0x0a, 0x22, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x46, 0x61, 0x6e, 0x74, 0x61,
	0x73, 0x79, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x44, 0x4f, 0x54, 0x41, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x4c, 0x65, 0x61, 0x76,
	0x65, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x45, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x77, 0x0a, 0x07, 0x45, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00,
	0x12, 0x15, 0x0a, 0x11, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x02, 0x12, 0x1a, 0x0a,
	0x16, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4c, 0x45, 0x41, 0x47, 0x55, 0x45, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x44, 0x52, 0x41, 0x46, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10,
	0x04, 0x22, 0xbc, 0x01, 0x0a, 0x28, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x46, 0x61,
	0x6e, 0x74, 0x61, 0x73, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a,
	0x0a, 0x11, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x5f, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x66, 0x61, 0x6e, 0x74, 0x61,
	0x73, 0x79, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0xa4, 0x05, 0x0a, 0x29, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x46, 0x61, 0x6e,
	0x74, 0x61, 0x73, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37,
	0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x46, 0x61,
	0x6e, 0x74, 0x61, 0x73, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x45, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x53, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x82, 0x03,
	0x0a, 0x0f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x4e, 0x75, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x65, 0x61,
	0x67, 0x75, 0x65, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x54, 0x69, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65,
	0x61, 0x67, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c,
	0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x70, 0x70, 0x6f, 0x73,
	0x69, 0x6e, 0x67, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x6f, 0x70, 0x70, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x61, 0x6d, 0x49,
	0x64, 0x12, 0x2c, 0x0a, 0x12, 0x6f, 0x70, 0x70, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x65,
	0x61, 0x6d, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x6f,
	0x70, 0x70, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x67, 0x6f, 0x12,
	0x2c, 0x0a, 0x12, 0x6f, 0x70, 0x70, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x70, 0x70,
	0x6f, 0x73, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x42, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x65, 0x6e, 0x63,
	0x68, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x62, 0x65, 0x6e, 0x63, 0x68,
	0x65, 0x64, 0x22, 0x43, 0x0a, 0x07, 0x45, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0b, 0x0a,
	0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4d,
	0x45, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x02, 0x22, 0x7a, 0x0a, 0x1d, 0x43, 0x4d, 0x73, 0x67, 0x44,
	0x4f, 0x54, 0x41, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x54,
	0x65, 0x61, 0x6d, 0x47, 0x75, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x61, 0x67,
	0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x65, 0x61,
	0x67, 0x75, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x75, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x75,
	0x70, 0x49, 0x64, 0x22, 0xb1, 0x01, 0x0a, 0x24, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41,
	0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x69, 0x63, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6b, 0x0a, 0x0f,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x44, 0x4f, 0x54,
	0x41, 0x5f, 0x32, 0x30, 0x31, 0x33, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x3a, 0x19,
	0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x41, 0x4c, 0x4c, 0x53, 0x54, 0x41, 0x52,
	0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x30, 0x52, 0x0e, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5b, 0x0a, 0x1d, 0x43, 0x4d, 0x73, 0x67, 0x44,
	0x4f, 0x54, 0x41, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x6d, 0x70,
	0x65, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x22, 0x48, 0x0a, 0x23, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41,
	0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x61,
	0x72, 0x64, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x22, 0xe4,
	0x02, 0x0a, 0x14, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x50, 0x61, 0x73, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x5f,
	0x76, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x6f,
	0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x50, 0x61, 0x73, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x75, 0x65, 0x73, 0x73,
	0x52, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x59, 0x0a, 0x12, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x56,
	0x6f, 0x74, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4c, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x65,
	0x64, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x50,
	0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x65, 0x64, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x65, 0x64, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x73, 0x12, 0x5f, 0x0a, 0x16, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x44, 0x4f, 0x54, 0x41, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52,
	0x14, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x43, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x73, 0x22, 0x65, 0x0a, 0x28, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x43, 0x61, 0x72, 0x64, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xef, 0x02, 0x0a,
	0x29, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x47,
	0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x52, 0x6f, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x64, 0x6f, 0x74,
	0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43,
	0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x52, 0x6f, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x3a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x2d, 0x0a, 0x13, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04,
	0x52, 0x10, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x6e, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x66, 0x69, 0x6e,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x69, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x22, 0x66, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x15, 0x0a,
	0x11, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4c, 0x45, 0x41, 0x47, 0x55, 0x45, 0x5f, 0x49, 0x44, 0x10,
	0x02, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x10, 0x03, 0x22, 0xc3,
	0x01, 0x0a, 0x28, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47,
	0x43, 0x53, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x52, 0x6f,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6c,
	0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x2d, 0x0a, 0x13, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43,
	0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x22, 0xfb, 0x02, 0x0a, 0x29, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x53, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x43, 0x61, 0x72, 0x64, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x57, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x36, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x53, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x43, 0x61, 0x72, 0x64, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a, 0x07, 0x53, 0x55, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xf4, 0x01, 0x0a, 0x06,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4c, 0x45, 0x41, 0x47,
	0x55, 0x45, 0x5f, 0x49, 0x44, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41,
	0x4d, 0x50, 0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x50, 0x4c,
	0x41, 0x59, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4f, 0x57,
	0x4e, 0x45, 0x44, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x53, 0x4c, 0x4f, 0x54, 0x10, 0x05, 0x12, 0x1a, 0x0a,
	0x16, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x43, 0x41,
	0x52, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x06, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x44, 0x55, 0x50, 0x4c, 0x49,
	0x43, 0x41, 0x54, 0x45, 0x10, 0x07, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50,
	0x10, 0x08, 0x22, 0xcb, 0x03, 0x0a, 0x1e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x46,
	0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x44, 0x50, 0x43, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x52, 0x0a, 0x0c, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x64, 0x6f,
	0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x46, 0x61, 0x6e, 0x74, 0x61,
	0x73, 0x79, 0x44, 0x50, 0x43, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x6c, 0x65,
	0x61, 0x67, 0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x1a, 0x92, 0x02, 0x0a, 0x0a, 0x4c, 0x65,
	0x61, 0x67, 0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x61, 0x67,
	0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x65, 0x61,
	0x67, 0x75, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x65, 0x61, 0x67,
	0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x23, 0x0a, 0x0d, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d, 0x64, 0x61,
	0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x12, 0x51, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x64, 0x6f,
	0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x46, 0x61, 0x6e, 0x74, 0x61,
	0x73, 0x79, 0x44, 0x50, 0x43, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x45, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a,
	0x05, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x40,
	0x0a, 0x0d, 0x45, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x09, 0x0a, 0x05, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x41,
	0x52, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x55, 0x4c, 0x4c, 0x10,
	0x02, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4e, 0x43, 0x4c, 0x55, 0x44, 0x45, 0x44, 0x10, 0x03,
	0x2a, 0xa3, 0x15, 0x0a, 0x21, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x32, 0x30, 0x31, 0x33, 0x50, 0x61,
	0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53,
	0x45, 0x4c, 0x5f, 0x41, 0x4c, 0x4c, 0x53, 0x54, 0x41, 0x52, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45,
	0x52, 0x5f, 0x30, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45,
	0x4c, 0x5f, 0x41, 0x4c, 0x4c, 0x53, 0x54, 0x41, 0x52, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52,
	0x5f, 0x31, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c,
	0x5f, 0x41, 0x4c, 0x4c, 0x53, 0x54, 0x41, 0x52, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f,
	0x32, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f,
	0x41, 0x4c, 0x4c, 0x53, 0x54, 0x41, 0x52, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x33,
	0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x41,
	0x4c, 0x4c, 0x53, 0x54, 0x41, 0x52, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x34, 0x10,
	0x04, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x41, 0x4c,
	0x4c, 0x53, 0x54, 0x41, 0x52, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x35, 0x10, 0x05,
	0x12, 0x1d, 0x0a, 0x19, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x41, 0x4c, 0x4c,
	0x53, 0x54, 0x41, 0x52, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x36, 0x10, 0x06, 0x12,
	0x1d, 0x0a, 0x19, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x41, 0x4c, 0x4c, 0x53,
	0x54, 0x41, 0x52, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x37, 0x10, 0x07, 0x12, 0x1d,
	0x0a, 0x19, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x41, 0x4c, 0x4c, 0x53, 0x54,
	0x41, 0x52, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x38, 0x10, 0x08, 0x12, 0x1d, 0x0a,
	0x19, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x41, 0x4c, 0x4c, 0x53, 0x54, 0x41,
	0x52, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x39, 0x10, 0x09, 0x12, 0x1c, 0x0a, 0x18,
	0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x50, 0x52, 0x45,
	0x44, 0x5f, 0x57, 0x45, 0x53, 0x54, 0x5f, 0x30, 0x10, 0x0a, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x50,
	0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x50, 0x52, 0x45, 0x44, 0x5f,
	0x57, 0x45, 0x53, 0x54, 0x5f, 0x31, 0x10, 0x0b, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x50, 0x31, 0x33,
	0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x50, 0x52, 0x45, 0x44, 0x5f, 0x57, 0x45,
	0x53, 0x54, 0x5f, 0x32, 0x10, 0x0c, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53,
	0x45, 0x4c, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x50, 0x52, 0x45, 0x44, 0x5f, 0x57, 0x45, 0x53, 0x54,
	0x5f, 0x33, 0x10, 0x0d, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c,
	0x5f, 0x51, 0x55, 0x41, 0x4c, 0x50, 0x52, 0x45, 0x44, 0x5f, 0x57, 0x45, 0x53, 0x54, 0x5f, 0x34,
	0x10, 0x0e, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x51,
	0x55, 0x41, 0x4c, 0x50, 0x52, 0x45, 0x44, 0x5f, 0x57, 0x45, 0x53, 0x54, 0x5f, 0x35, 0x10, 0x0f,
	0x12, 0x1c, 0x0a, 0x18, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x51, 0x55, 0x41,
	0x4c, 0x50, 0x52, 0x45, 0x44, 0x5f, 0x57, 0x45, 0x53, 0x54, 0x5f, 0x36, 0x10, 0x10, 0x12, 0x1c,
	0x0a, 0x18, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x50,
	0x52, 0x45, 0x44, 0x5f, 0x57, 0x45, 0x53, 0x54, 0x5f, 0x37, 0x10, 0x11, 0x12, 0x1c, 0x0a, 0x18,
	0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x50, 0x52, 0x45,
	0x44, 0x5f, 0x57, 0x45, 0x53, 0x54, 0x5f, 0x38, 0x10, 0x12, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x50,
	0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x50, 0x52, 0x45, 0x44, 0x5f,
	0x57, 0x45, 0x53, 0x54, 0x5f, 0x39, 0x10, 0x13, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x50, 0x31, 0x33,
	0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x50, 0x52, 0x45, 0x44, 0x5f, 0x57, 0x45,
	0x53, 0x54, 0x5f, 0x31, 0x30, 0x10, 0x14, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x50, 0x31, 0x33, 0x5f,
	0x53, 0x45, 0x4c, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x50, 0x52, 0x45, 0x44, 0x5f, 0x57, 0x45, 0x53,
	0x54, 0x5f, 0x31, 0x31, 0x10, 0x15, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53,
	0x45, 0x4c, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x50, 0x52, 0x45, 0x44, 0x5f, 0x57, 0x45, 0x53, 0x54,
	0x5f, 0x31, 0x32, 0x10, 0x16, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45,
	0x4c, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x50, 0x52, 0x45, 0x44, 0x5f, 0x57, 0x45, 0x53, 0x54, 0x5f,
	0x31, 0x33, 0x10, 0x17, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c,
	0x5f, 0x51, 0x55, 0x41, 0x4c, 0x50, 0x52, 0x45, 0x44, 0x5f, 0x57, 0x45, 0x53, 0x54, 0x5f, 0x31,
	0x34, 0x10, 0x18, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f,
	0x51, 0x55, 0x41, 0x4c, 0x50, 0x52, 0x45, 0x44, 0x5f, 0x45, 0x41, 0x53, 0x54, 0x5f, 0x30, 0x10,
	0x19, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x51, 0x55,
	0x41, 0x4c, 0x50, 0x52, 0x45, 0x44, 0x5f, 0x45, 0x41, 0x53, 0x54, 0x5f, 0x31, 0x10, 0x1a, 0x12,
	0x1c, 0x0a, 0x18, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x51, 0x55, 0x41, 0x4c,
	0x50, 0x52, 0x45, 0x44, 0x5f, 0x45, 0x41, 0x53, 0x54, 0x5f, 0x32, 0x10, 0x1b, 0x12, 0x1c, 0x0a,
	0x18, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x50, 0x52,
	0x45, 0x44, 0x5f, 0x45, 0x41, 0x53, 0x54, 0x5f, 0x33, 0x10, 0x1c, 0x12, 0x1c, 0x0a, 0x18, 0x50,
	0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x50, 0x52, 0x45, 0x44,
	0x5f, 0x45, 0x41, 0x53, 0x54, 0x5f, 0x34, 0x10, 0x1d, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x50, 0x31,
	0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x50, 0x52, 0x45, 0x44, 0x5f, 0x45,
	0x41, 0x53, 0x54, 0x5f, 0x35, 0x10, 0x1e, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x50, 0x31, 0x33, 0x5f,
	0x53, 0x45, 0x4c, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x50, 0x52, 0x45, 0x44, 0x5f, 0x45, 0x41, 0x53,
	0x54, 0x5f, 0x36, 0x10, 0x1f, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45,
	0x4c, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x50, 0x52, 0x45, 0x44, 0x5f, 0x45, 0x41, 0x53, 0x54, 0x5f,
	0x37, 0x10, 0x20, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f,
	0x51, 0x55, 0x41, 0x4c, 0x50, 0x52, 0x45, 0x44, 0x5f, 0x45, 0x41, 0x53, 0x54, 0x5f, 0x38, 0x10,
	0x21, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x51, 0x55,
	0x41, 0x4c, 0x50, 0x52, 0x45, 0x44, 0x5f, 0x45, 0x41, 0x53, 0x54, 0x5f, 0x39, 0x10, 0x22, 0x12,
	0x1d, 0x0a, 0x19, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x51, 0x55, 0x41, 0x4c,
	0x50, 0x52, 0x45, 0x44, 0x5f, 0x45, 0x41, 0x53, 0x54, 0x5f, 0x31, 0x30, 0x10, 0x23, 0x12, 0x1d,
	0x0a, 0x19, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x50,
	0x52, 0x45, 0x44, 0x5f, 0x45, 0x41, 0x53, 0x54, 0x5f, 0x31, 0x31, 0x10, 0x24, 0x12, 0x1d, 0x0a,
	0x19, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x50, 0x52,
	0x45, 0x44, 0x5f, 0x45, 0x41, 0x53, 0x54, 0x5f, 0x31, 0x32, 0x10, 0x25, 0x12, 0x1d, 0x0a, 0x19,
	0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x50, 0x52, 0x45,
	0x44, 0x5f, 0x45, 0x41, 0x53, 0x54, 0x5f, 0x31, 0x33, 0x10, 0x26, 0x12, 0x1d, 0x0a, 0x19, 0x50,
	0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x50, 0x52, 0x45, 0x44,
	0x5f, 0x45, 0x41, 0x53, 0x54, 0x5f, 0x31, 0x34, 0x10, 0x27, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x50,
	0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x43, 0x55, 0x50, 0x5f, 0x54,
	0x45, 0x41, 0x4d, 0x10, 0x28, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45,
	0x4c, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x43, 0x55, 0x50, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52,
	0x10, 0x29, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x54,
	0x45, 0x41, 0x4d, 0x43, 0x55, 0x50, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x4c, 0x4f, 0x43, 0x4b,
	0x10, 0x2a, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x54,
	0x45, 0x41, 0x4d, 0x43, 0x55, 0x50, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x4c, 0x4f,
	0x43, 0x4b, 0x10, 0x2b, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x50, 0x52, 0x45, 0x44, 0x5f, 0x30, 0x10, 0x2c, 0x12, 0x18,
	0x0a, 0x14, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x50, 0x52, 0x45, 0x44, 0x5f, 0x31, 0x10, 0x2d, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x50, 0x31, 0x33,
	0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x50, 0x52, 0x45, 0x44, 0x5f, 0x32,
	0x10, 0x2e, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x50, 0x52, 0x45, 0x44, 0x5f, 0x33, 0x10, 0x2f, 0x12, 0x18, 0x0a, 0x14,
	0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x50, 0x52,
	0x45, 0x44, 0x5f, 0x34, 0x10, 0x30, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53,
	0x45, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x50, 0x52, 0x45, 0x44, 0x5f, 0x35, 0x10, 0x31,
	0x12, 0x18, 0x0a, 0x14, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x50, 0x52, 0x45, 0x44, 0x5f, 0x36, 0x10, 0x32, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x50,
	0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x50, 0x52, 0x45, 0x44,
	0x5f, 0x37, 0x10, 0x33, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x50, 0x52, 0x45, 0x44, 0x5f, 0x38, 0x10, 0x34, 0x12, 0x18,
	0x0a, 0x14, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x50, 0x52, 0x45, 0x44, 0x5f, 0x39, 0x10, 0x35, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x50, 0x31, 0x33,
	0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x50, 0x52, 0x45, 0x44, 0x5f, 0x31,
	0x30, 0x10, 0x36, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x50, 0x52, 0x45, 0x44, 0x5f, 0x31, 0x31, 0x10, 0x37, 0x12, 0x19,
	0x0a, 0x15, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x50, 0x52, 0x45, 0x44, 0x5f, 0x31, 0x32, 0x10, 0x38, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x50, 0x31,
	0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x50, 0x52, 0x45, 0x44, 0x5f,
	0x31, 0x33, 0x10, 0x39, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x50, 0x52, 0x45, 0x44, 0x5f, 0x31, 0x34, 0x10, 0x3a, 0x12,
	0x19, 0x0a, 0x15, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x50, 0x52, 0x45, 0x44, 0x5f, 0x31, 0x35, 0x10, 0x3b, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x50,
	0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x50, 0x52, 0x45, 0x44,
	0x5f, 0x31, 0x36, 0x10, 0x3c, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45,
	0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x50, 0x52, 0x45, 0x44, 0x5f, 0x31, 0x37, 0x10, 0x3d,
	0x12, 0x19, 0x0a, 0x15, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x50, 0x52, 0x45, 0x44, 0x5f, 0x31, 0x38, 0x10, 0x3e, 0x12, 0x19, 0x0a, 0x15, 0x50,
	0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x50, 0x52, 0x45,
	0x44, 0x5f, 0x31, 0x39, 0x10, 0x3f, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53,
	0x45, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x50, 0x52, 0x45, 0x44, 0x5f, 0x32, 0x30, 0x10,
	0x40, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x50, 0x52, 0x45, 0x44, 0x5f, 0x32, 0x31, 0x10, 0x41, 0x12, 0x19, 0x0a, 0x15,
	0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x50, 0x52,
	0x45, 0x44, 0x5f, 0x32, 0x32, 0x10, 0x42, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x50, 0x31, 0x33, 0x5f,
	0x53, 0x45, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x50, 0x52, 0x45, 0x44, 0x5f, 0x32, 0x33,
	0x10, 0x43, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x50, 0x52, 0x45, 0x44, 0x5f, 0x32, 0x34, 0x10, 0x44, 0x12, 0x19, 0x0a,
	0x15, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x50,
	0x52, 0x45, 0x44, 0x5f, 0x32, 0x35, 0x10, 0x45, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x50, 0x31, 0x33,
	0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x50, 0x52, 0x45, 0x44, 0x5f, 0x32,
	0x36, 0x10, 0x46, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x50, 0x52, 0x45, 0x44, 0x5f, 0x32, 0x37, 0x10, 0x47, 0x12, 0x19,
	0x0a, 0x15, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x50, 0x52, 0x45, 0x44, 0x5f, 0x32, 0x38, 0x10, 0x48, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x50, 0x31,
	0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x50, 0x52, 0x45, 0x44, 0x5f,
	0x32, 0x39, 0x10, 0x49, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x50, 0x52, 0x45, 0x44, 0x5f, 0x33, 0x30, 0x10, 0x4a, 0x12,
	0x19, 0x0a, 0x15, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x50, 0x52, 0x45, 0x44, 0x5f, 0x33, 0x31, 0x10, 0x4b, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x50,
	0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x50, 0x52, 0x45, 0x44,
	0x5f, 0x33, 0x32, 0x10, 0x4c, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45,
	0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x50, 0x52, 0x45, 0x44, 0x5f, 0x33, 0x33, 0x10, 0x4d,
	0x12, 0x19, 0x0a, 0x15, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x50, 0x52, 0x45, 0x44, 0x5f, 0x33, 0x34, 0x10, 0x4e, 0x12, 0x19, 0x0a, 0x15, 0x50,
	0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x50, 0x52, 0x45,
	0x44, 0x5f, 0x33, 0x35, 0x10, 0x4f, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53,
	0x45, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x50, 0x52, 0x45, 0x44, 0x5f, 0x33, 0x36, 0x10,
	0x50, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x50, 0x52, 0x45, 0x44, 0x5f, 0x33, 0x37, 0x10, 0x51, 0x12, 0x19, 0x0a, 0x15,
	0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x50, 0x52,
	0x45, 0x44, 0x5f, 0x33, 0x38, 0x10, 0x52, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x50, 0x31, 0x33, 0x5f,
	0x53, 0x45, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x50, 0x52, 0x45, 0x44, 0x5f, 0x33, 0x39,
	0x10, 0x53, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x50, 0x52, 0x45, 0x44, 0x5f, 0x34, 0x30, 0x10, 0x54, 0x12, 0x19, 0x0a,
	0x15, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x50,
	0x52, 0x45, 0x44, 0x5f, 0x34, 0x31, 0x10, 0x55, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x50, 0x31, 0x33,
	0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x50, 0x52, 0x45, 0x44, 0x5f, 0x34,
	0x32, 0x10, 0x56, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x50, 0x52, 0x45, 0x44, 0x5f, 0x34, 0x33, 0x10, 0x57, 0x12, 0x13,
	0x0a, 0x0f, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x53, 0x4f, 0x4c, 0x4f, 0x5f,
	0x30, 0x10, 0x58, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f,
	0x53, 0x4f, 0x4c, 0x4f, 0x5f, 0x31, 0x10, 0x59, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x50, 0x31, 0x33,
	0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x53, 0x4f, 0x4c, 0x4f, 0x5f, 0x32, 0x10, 0x5a, 0x12, 0x13, 0x0a,
	0x0f, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x53, 0x4f, 0x4c, 0x4f, 0x5f, 0x33,
	0x10, 0x5b, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x53,
	0x4f, 0x4c, 0x4f, 0x5f, 0x34, 0x10, 0x5c, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x50, 0x31, 0x33, 0x5f,
	0x53, 0x45, 0x4c, 0x5f, 0x53, 0x4f, 0x4c, 0x4f, 0x5f, 0x35, 0x10, 0x5d, 0x12, 0x13, 0x0a, 0x0f,
	0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x53, 0x4f, 0x4c, 0x4f, 0x5f, 0x36, 0x10,
	0x5e, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x53, 0x4f,
	0x4c, 0x4f, 0x5f, 0x37, 0x10, 0x5f, 0x42, 0x05, 0x48, 0x01, 0x80, 0x01, 0x00,
}

var (
	file_dota_gcmessages_client_fantasy_proto_rawDescOnce sync.Once
	file_dota_gcmessages_client_fantasy_proto_rawDescData = file_dota_gcmessages_client_fantasy_proto_rawDesc
)

func file_dota_gcmessages_client_fantasy_proto_rawDescGZIP() []byte {
	file_dota_gcmessages_client_fantasy_proto_rawDescOnce.Do(func() {
		file_dota_gcmessages_client_fantasy_proto_rawDescData = protoimpl.X.CompressGZIP(file_dota_gcmessages_client_fantasy_proto_rawDescData)
	})
	return file_dota_gcmessages_client_fantasy_proto_rawDescData
}

var file_dota_gcmessages_client_fantasy_proto_enumTypes = make([]protoimpl.EnumInfo, 29)
var file_dota_gcmessages_client_fantasy_proto_msgTypes = make([]protoimpl.MessageInfo, 92)
var file_dota_gcmessages_client_fantasy_proto_goTypes = []interface{}{
	(DOTA_2013PassportSelectionIndices)(0),                                     // 0: dota.DOTA_2013PassportSelectionIndices
	(CMsgDOTACreateFantasyLeagueResponse_EResult)(0),                           // 1: dota.CMsgDOTACreateFantasyLeagueResponse.EResult
	(CMsgDOTAFantasyLeagueEditInfoResponse_EResult)(0),                         // 2: dota.CMsgDOTAFantasyLeagueEditInfoResponse.EResult
	(CMsgDOTAFantasyLeagueFindResponse_EResult)(0),                             // 3: dota.CMsgDOTAFantasyLeagueFindResponse.EResult
	(CMsgDOTAFantasyLeagueInfoResponse_EResult)(0),                             // 4: dota.CMsgDOTAFantasyLeagueInfoResponse.EResult
	(CMsgDOTAFantasyLeagueMatchupsResponse_EResult)(0),                         // 5: dota.CMsgDOTAFantasyLeagueMatchupsResponse.EResult
	(CMsgDOTAEditFantasyTeamResponse_EResult)(0),                               // 6: dota.CMsgDOTAEditFantasyTeamResponse.EResult
	(CMsgDOTAFantasyTeamScoreResponse_EResult)(0),                              // 7: dota.CMsgDOTAFantasyTeamScoreResponse.EResult
	(CMsgDOTAFantasyTeamStandingsResponse_EResult)(0),                          // 8: dota.CMsgDOTAFantasyTeamStandingsResponse.EResult
	(CMsgDOTAFantasyPlayerScoreResponse_EResult)(0),                            // 9: dota.CMsgDOTAFantasyPlayerScoreResponse.EResult
	(CMsgDOTAFantasyPlayerStandingsResponse_EResult)(0),                        // 10: dota.CMsgDOTAFantasyPlayerStandingsResponse.EResult
	(CMsgDOTAFantasyLeagueCreateResponse_EResult)(0),                           // 11: dota.CMsgDOTAFantasyLeagueCreateResponse.EResult
	(CMsgDOTAFantasyTeamCreateResponse_EResult)(0),                             // 12: dota.CMsgDOTAFantasyTeamCreateResponse.EResult
	(CMsgDOTAFantasyLeagueEditInvitesResponse_EResult)(0),                      // 13: dota.CMsgDOTAFantasyLeagueEditInvitesResponse.EResult
	(CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult)(0),                      // 14: dota.CMsgDOTAFantasyLeagueDraftPlayerResponse.EResult
	(CMsgDOTAFantasyTeamRosterSwapResponse_EResult)(0),                         // 15: dota.CMsgDOTAFantasyTeamRosterSwapResponse.EResult
	(CMsgDOTAFantasyTeamRosterAddDropResponse_EResult)(0),                      // 16: dota.CMsgDOTAFantasyTeamRosterAddDropResponse.EResult
	(CMsgDOTAFantasyTeamTradesResponse_EResult)(0),                             // 17: dota.CMsgDOTAFantasyTeamTradesResponse.EResult
	(CMsgDOTAFantasyTeamTradeCancelResponse_EResult)(0),                        // 18: dota.CMsgDOTAFantasyTeamTradeCancelResponse.EResult
	(CMsgDOTAFantasyTeamRosterResponse_EResult)(0),                             // 19: dota.CMsgDOTAFantasyTeamRosterResponse.EResult
	(CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult)(0),                   // 20: dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.EResult
	(CMsgDOTAFantasyMessagesResponse_EResult)(0),                               // 21: dota.CMsgDOTAFantasyMessagesResponse.EResult
	(CMsgDOTAFantasyRemoveOwnerResponse_EResult)(0),                            // 22: dota.CMsgDOTAFantasyRemoveOwnerResponse.EResult
	(CMsgDOTAFantasyScheduledMatchesResponse_EResult)(0),                       // 23: dota.CMsgDOTAFantasyScheduledMatchesResponse.EResult
	(CMsgDOTAFantasyLeaveLeagueResponse_EResult)(0),                            // 24: dota.CMsgDOTAFantasyLeaveLeagueResponse.EResult
	(CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult)(0),                     // 25: dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.EResult
	(CMsgClientToGCGetPlayerCardRosterResponse_Result)(0),                      // 26: dota.CMsgClientToGCGetPlayerCardRosterResponse.Result
	(CMsgClientToGCSetPlayerCardRosterResponse_Result)(0),                      // 27: dota.CMsgClientToGCSetPlayerCardRosterResponse.Result
	(CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus)(0),                          // 28: dota.CMsgDOTAFantasyDPCLeagueStatus.ERosterStatus
	(*CMsgDOTAPlayerInfo)(nil),                                                 // 29: dota.CMsgDOTAPlayerInfo
	(*CMsgDOTAPlayerInfoList)(nil),                                             // 30: dota.CMsgDOTAPlayerInfoList
	(*CMsgDOTADPCProfileInfo)(nil),                                             // 31: dota.CMsgDOTADPCProfileInfo
	(*CMsgDOTALeaderboards)(nil),                                               // 32: dota.CMsgDOTALeaderboards
	(*CMsgDOTACreateFantasyLeagueRequest)(nil),                                 // 33: dota.CMsgDOTACreateFantasyLeagueRequest
	(*CMsgDOTACreateFantasyLeagueResponse)(nil),                                // 34: dota.CMsgDOTACreateFantasyLeagueResponse
	(*CMsgFantasyLeagueScoring)(nil),                                           // 35: dota.CMsgFantasyLeagueScoring
	(*CMsgDOTAFantasyLeagueInfo)(nil),                                          // 36: dota.CMsgDOTAFantasyLeagueInfo
	(*CMsgDOTAFantasyLeagueEditInfoRequest)(nil),                               // 37: dota.CMsgDOTAFantasyLeagueEditInfoRequest
	(*CMsgDOTAFantasyLeagueEditInfoResponse)(nil),                              // 38: dota.CMsgDOTAFantasyLeagueEditInfoResponse
	(*CMsgDOTAFantasyLeagueFindRequest)(nil),                                   // 39: dota.CMsgDOTAFantasyLeagueFindRequest
	(*CMsgDOTAFantasyLeagueFindResponse)(nil),                                  // 40: dota.CMsgDOTAFantasyLeagueFindResponse
	(*CMsgDOTAFantasyLeagueInfoRequest)(nil),                                   // 41: dota.CMsgDOTAFantasyLeagueInfoRequest
	(*CMsgDOTAFantasyLeagueInfoResponse)(nil),                                  // 42: dota.CMsgDOTAFantasyLeagueInfoResponse
	(*CMsgDOTAFantasyLeagueMatchupsRequest)(nil),                               // 43: dota.CMsgDOTAFantasyLeagueMatchupsRequest
	(*CMsgDOTAFantasyLeagueMatchupsResponse)(nil),                              // 44: dota.CMsgDOTAFantasyLeagueMatchupsResponse
	(*CMsgDOTAEditFantasyTeamRequest)(nil),                                     // 45: dota.CMsgDOTAEditFantasyTeamRequest
	(*CMsgDOTAEditFantasyTeamResponse)(nil),                                    // 46: dota.CMsgDOTAEditFantasyTeamResponse
	(*CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID)(nil),                    // 47: dota.CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID
	(*CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID)(nil),                     // 48: dota.CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID
	(*CMsgDOTAFantasyTeamInfoResponse)(nil),                                    // 49: dota.CMsgDOTAFantasyTeamInfoResponse
	(*CMsgDOTAFantasyTeamInfo)(nil),                                            // 50: dota.CMsgDOTAFantasyTeamInfo
	(*CMsgDOTAFantasyTeamScoreRequest)(nil),                                    // 51: dota.CMsgDOTAFantasyTeamScoreRequest
	(*CMsgDOTAFantasyTeamScoreResponse)(nil),                                   // 52: dota.CMsgDOTAFantasyTeamScoreResponse
	(*CMsgDOTAFantasyTeamStandingsRequest)(nil),                                // 53: dota.CMsgDOTAFantasyTeamStandingsRequest
	(*CMsgDOTAFantasyTeamStandingsResponse)(nil),                               // 54: dota.CMsgDOTAFantasyTeamStandingsResponse
	(*CMsgDOTAFantasyPlayerScoreRequest)(nil),                                  // 55: dota.CMsgDOTAFantasyPlayerScoreRequest
	(*CMsgDOTAFantasyPlayerScoreResponse)(nil),                                 // 56: dota.CMsgDOTAFantasyPlayerScoreResponse
	(*CMsgDOTAFantasyPlayerStandingsRequest)(nil),                              // 57: dota.CMsgDOTAFantasyPlayerStandingsRequest
	(*CMsgDOTAFantasyPlayerStandingsResponse)(nil),                             // 58: dota.CMsgDOTAFantasyPlayerStandingsResponse
	(*CMsgDOTAFantasyLeagueCreateRequest)(nil),                                 // 59: dota.CMsgDOTAFantasyLeagueCreateRequest
	(*CMsgDOTAFantasyLeagueCreateResponse)(nil),                                // 60: dota.CMsgDOTAFantasyLeagueCreateResponse
	(*CMsgDOTAFantasyTeamCreateRequest)(nil),                                   // 61: dota.CMsgDOTAFantasyTeamCreateRequest
	(*CMsgDOTAFantasyTeamCreateResponse)(nil),                                  // 62: dota.CMsgDOTAFantasyTeamCreateResponse
	(*CMsgDOTAFantasyLeagueEditInvitesRequest)(nil),                            // 63: dota.CMsgDOTAFantasyLeagueEditInvitesRequest
	(*CMsgDOTAFantasyLeagueEditInvitesResponse)(nil),                           // 64: dota.CMsgDOTAFantasyLeagueEditInvitesResponse
	(*CMsgDOTAFantasyLeagueDraftStatusRequest)(nil),                            // 65: dota.CMsgDOTAFantasyLeagueDraftStatusRequest
	(*CMsgDOTAFantasyLeagueDraftStatus)(nil),                                   // 66: dota.CMsgDOTAFantasyLeagueDraftStatus
	(*CMsgDOTAFantasyLeagueDraftPlayerRequest)(nil),                            // 67: dota.CMsgDOTAFantasyLeagueDraftPlayerRequest
	(*CMsgDOTAFantasyLeagueDraftPlayerResponse)(nil),                           // 68: dota.CMsgDOTAFantasyLeagueDraftPlayerResponse
	(*CMsgDOTAFantasyTeamRosterSwapRequest)(nil),                               // 69: dota.CMsgDOTAFantasyTeamRosterSwapRequest
	(*CMsgDOTAFantasyTeamRosterSwapResponse)(nil),                              // 70: dota.CMsgDOTAFantasyTeamRosterSwapResponse
	(*CMsgDOTAFantasyTeamRosterAddDropRequest)(nil),                            // 71: dota.CMsgDOTAFantasyTeamRosterAddDropRequest
	(*CMsgDOTAFantasyTeamRosterAddDropResponse)(nil),                           // 72: dota.CMsgDOTAFantasyTeamRosterAddDropResponse
	(*CMsgDOTAFantasyTeamTradesRequest)(nil),                                   // 73: dota.CMsgDOTAFantasyTeamTradesRequest
	(*CMsgDOTAFantasyTeamTradesResponse)(nil),                                  // 74: dota.CMsgDOTAFantasyTeamTradesResponse
	(*CMsgDOTAFantasyTeamTradeCancelRequest)(nil),                              // 75: dota.CMsgDOTAFantasyTeamTradeCancelRequest
	(*CMsgDOTAFantasyTeamTradeCancelResponse)(nil),                             // 76: dota.CMsgDOTAFantasyTeamTradeCancelResponse
	(*CMsgDOTAFantasyTeamRosterRequest)(nil),                                   // 77: dota.CMsgDOTAFantasyTeamRosterRequest
	(*CMsgDOTAFantasyTeamRosterResponse)(nil),                                  // 78: dota.CMsgDOTAFantasyTeamRosterResponse
	(*CMsgDOTAFantasyPlayerHisoricalStatsRequest)(nil),                         // 79: dota.CMsgDOTAFantasyPlayerHisoricalStatsRequest
	(*CMsgDOTAFantasyPlayerHisoricalStatsResponse)(nil),                        // 80: dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse
	(*CMsgDOTAFantasyMessageAdd)(nil),                                          // 81: dota.CMsgDOTAFantasyMessageAdd
	(*CMsgDOTAFantasyMessagesRequest)(nil),                                     // 82: dota.CMsgDOTAFantasyMessagesRequest
	(*CMsgDOTAFantasyMessagesResponse)(nil),                                    // 83: dota.CMsgDOTAFantasyMessagesResponse
	(*CMsgDOTAFantasyRemoveOwner)(nil),                                         // 84: dota.CMsgDOTAFantasyRemoveOwner
	(*CMsgDOTAFantasyRemoveOwnerResponse)(nil),                                 // 85: dota.CMsgDOTAFantasyRemoveOwnerResponse
	(*CMsgDOTAFantasyScheduledMatchesRequest)(nil),                             // 86: dota.CMsgDOTAFantasyScheduledMatchesRequest
	(*CMsgDOTAFantasyScheduledMatchesResponse)(nil),                            // 87: dota.CMsgDOTAFantasyScheduledMatchesResponse
	(*CMsgDOTAFantasyLeaveLeagueRequest)(nil),                                  // 88: dota.CMsgDOTAFantasyLeaveLeagueRequest
	(*CMsgDOTAFantasyLeaveLeagueResponse)(nil),                                 // 89: dota.CMsgDOTAFantasyLeaveLeagueResponse
	(*CMsgDOTAFantasyPlayerScoreDetailsRequest)(nil),                           // 90: dota.CMsgDOTAFantasyPlayerScoreDetailsRequest
	(*CMsgDOTAFantasyPlayerScoreDetailsResponse)(nil),                          // 91: dota.CMsgDOTAFantasyPlayerScoreDetailsResponse
	(*CMsgDOTAPassportVoteTeamGuess)(nil),                                      // 92: dota.CMsgDOTAPassportVoteTeamGuess
	(*CMsgDOTAPassportVoteGenericSelection)(nil),                               // 93: dota.CMsgDOTAPassportVoteGenericSelection
	(*CMsgDOTAPassportStampedPlayer)(nil),                                      // 94: dota.CMsgDOTAPassportStampedPlayer
	(*CMsgDOTAPassportPlayerCardChallenge)(nil),                                // 95: dota.CMsgDOTAPassportPlayerCardChallenge
	(*CMsgDOTAPassportVote)(nil),                                               // 96: dota.CMsgDOTAPassportVote
	(*CMsgClientToGCGetPlayerCardRosterRequest)(nil),                           // 97: dota.CMsgClientToGCGetPlayerCardRosterRequest
	(*CMsgClientToGCGetPlayerCardRosterResponse)(nil),                          // 98: dota.CMsgClientToGCGetPlayerCardRosterResponse
	(*CMsgClientToGCSetPlayerCardRosterRequest)(nil),                           // 99: dota.CMsgClientToGCSetPlayerCardRosterRequest
	(*CMsgClientToGCSetPlayerCardRosterResponse)(nil),                          // 100: dota.CMsgClientToGCSetPlayerCardRosterResponse
	(*CMsgDOTAFantasyDPCLeagueStatus)(nil),                                     // 101: dota.CMsgDOTAFantasyDPCLeagueStatus
	(*CMsgDOTAPlayerInfo_Results)(nil),                                         // 102: dota.CMsgDOTAPlayerInfo.Results
	(*CMsgDOTAPlayerInfo_AuditEntry)(nil),                                      // 103: dota.CMsgDOTAPlayerInfo.AuditEntry
	(*CMsgDOTADPCProfileInfo_PredictionInfo)(nil),                              // 104: dota.CMsgDOTADPCProfileInfo.PredictionInfo
	(*CMsgDOTADPCProfileInfo_FantasyInfo)(nil),                                 // 105: dota.CMsgDOTADPCProfileInfo.FantasyInfo
	(*CMsgDOTALeaderboards_RegionLeaderboard)(nil),                             // 106: dota.CMsgDOTALeaderboards.RegionLeaderboard
	(*CMsgDOTAFantasyLeagueInfo_OwnerInfo)(nil),                                // 107: dota.CMsgDOTAFantasyLeagueInfo.OwnerInfo
	(*CMsgDOTAFantasyLeagueMatchupsResponse_Matchup)(nil),                      // 108: dota.CMsgDOTAFantasyLeagueMatchupsResponse.Matchup
	(*CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups)(nil),               // 109: dota.CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups
	(*CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore)(nil),                   // 110: dota.CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore
	(*CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore)(nil),                 // 111: dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore
	(*CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore)(nil),             // 112: dota.CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore
	(*CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange)(nil),               // 113: dota.CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange
	(*CMsgDOTAFantasyTeamTradesResponse_Trade)(nil),                            // 114: dota.CMsgDOTAFantasyTeamTradesResponse.Trade
	(*CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator)(nil), // 115: dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator
	(*CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats)(nil),            // 116: dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats
	(*CMsgDOTAFantasyMessagesResponse_Message)(nil),                            // 117: dota.CMsgDOTAFantasyMessagesResponse.Message
	(*CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays)(nil),         // 118: dota.CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays
	(*CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData)(nil),          // 119: dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData
	(*CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo)(nil),                          // 120: dota.CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo
	(Fantasy_Roles)(0),                                                         // 121: dota.Fantasy_Roles
	(Fantasy_Selection_Mode)(0),                                                // 122: dota.Fantasy_Selection_Mode
}
var file_dota_gcmessages_client_fantasy_proto_depIdxs = []int32{
	121, // 0: dota.CMsgDOTAPlayerInfo.fantasy_role:type_name -> dota.Fantasy_Roles
	102, // 1: dota.CMsgDOTAPlayerInfo.results:type_name -> dota.CMsgDOTAPlayerInfo.Results
	103, // 2: dota.CMsgDOTAPlayerInfo.audit_entries:type_name -> dota.CMsgDOTAPlayerInfo.AuditEntry
	29,  // 3: dota.CMsgDOTAPlayerInfoList.player_infos:type_name -> dota.CMsgDOTAPlayerInfo
	29,  // 4: dota.CMsgDOTADPCProfileInfo.player_info:type_name -> dota.CMsgDOTAPlayerInfo
	104, // 5: dota.CMsgDOTADPCProfileInfo.prediction_info:type_name -> dota.CMsgDOTADPCProfileInfo.PredictionInfo
	105, // 6: dota.CMsgDOTADPCProfileInfo.fantasy_info:type_name -> dota.CMsgDOTADPCProfileInfo.FantasyInfo
	106, // 7: dota.CMsgDOTALeaderboards.leaderboards:type_name -> dota.CMsgDOTALeaderboards.RegionLeaderboard
	122, // 8: dota.CMsgDOTACreateFantasyLeagueRequest.selection_mode:type_name -> dota.Fantasy_Selection_Mode
	1,   // 9: dota.CMsgDOTACreateFantasyLeagueResponse.result:type_name -> dota.CMsgDOTACreateFantasyLeagueResponse.EResult
	122, // 10: dota.CMsgDOTAFantasyLeagueInfo.selection_mode:type_name -> dota.Fantasy_Selection_Mode
	35,  // 11: dota.CMsgDOTAFantasyLeagueInfo.scoring:type_name -> dota.CMsgFantasyLeagueScoring
	107, // 12: dota.CMsgDOTAFantasyLeagueInfo.owner_info:type_name -> dota.CMsgDOTAFantasyLeagueInfo.OwnerInfo
	36,  // 13: dota.CMsgDOTAFantasyLeagueEditInfoRequest.edit_info:type_name -> dota.CMsgDOTAFantasyLeagueInfo
	2,   // 14: dota.CMsgDOTAFantasyLeagueEditInfoResponse.result:type_name -> dota.CMsgDOTAFantasyLeagueEditInfoResponse.EResult
	3,   // 15: dota.CMsgDOTAFantasyLeagueFindResponse.result:type_name -> dota.CMsgDOTAFantasyLeagueFindResponse.EResult
	4,   // 16: dota.CMsgDOTAFantasyLeagueInfoResponse.result:type_name -> dota.CMsgDOTAFantasyLeagueInfoResponse.EResult
	5,   // 17: dota.CMsgDOTAFantasyLeagueMatchupsResponse.result:type_name -> dota.CMsgDOTAFantasyLeagueMatchupsResponse.EResult
	109, // 18: dota.CMsgDOTAFantasyLeagueMatchupsResponse.weekly_matchups:type_name -> dota.CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups
	6,   // 19: dota.CMsgDOTAEditFantasyTeamResponse.result:type_name -> dota.CMsgDOTAEditFantasyTeamResponse.EResult
	50,  // 20: dota.CMsgDOTAFantasyTeamInfoResponse.results:type_name -> dota.CMsgDOTAFantasyTeamInfo
	7,   // 21: dota.CMsgDOTAFantasyTeamScoreResponse.result:type_name -> dota.CMsgDOTAFantasyTeamScoreResponse.EResult
	110, // 22: dota.CMsgDOTAFantasyTeamScoreResponse.fantasy_player_score:type_name -> dota.CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore
	8,   // 23: dota.CMsgDOTAFantasyTeamStandingsResponse.result:type_name -> dota.CMsgDOTAFantasyTeamStandingsResponse.EResult
	111, // 24: dota.CMsgDOTAFantasyTeamStandingsResponse.team_scores:type_name -> dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore
	9,   // 25: dota.CMsgDOTAFantasyPlayerScoreResponse.result:type_name -> dota.CMsgDOTAFantasyPlayerScoreResponse.EResult
	10,  // 26: dota.CMsgDOTAFantasyPlayerStandingsResponse.result:type_name -> dota.CMsgDOTAFantasyPlayerStandingsResponse.EResult
	112, // 27: dota.CMsgDOTAFantasyPlayerStandingsResponse.player_scores:type_name -> dota.CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore
	11,  // 28: dota.CMsgDOTAFantasyLeagueCreateResponse.result:type_name -> dota.CMsgDOTAFantasyLeagueCreateResponse.EResult
	12,  // 29: dota.CMsgDOTAFantasyTeamCreateResponse.result:type_name -> dota.CMsgDOTAFantasyTeamCreateResponse.EResult
	113, // 30: dota.CMsgDOTAFantasyLeagueEditInvitesRequest.invite_change:type_name -> dota.CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange
	13,  // 31: dota.CMsgDOTAFantasyLeagueEditInvitesResponse.result:type_name -> dota.CMsgDOTAFantasyLeagueEditInvitesResponse.EResult
	14,  // 32: dota.CMsgDOTAFantasyLeagueDraftPlayerResponse.result:type_name -> dota.CMsgDOTAFantasyLeagueDraftPlayerResponse.EResult
	15,  // 33: dota.CMsgDOTAFantasyTeamRosterSwapResponse.result:type_name -> dota.CMsgDOTAFantasyTeamRosterSwapResponse.EResult
	16,  // 34: dota.CMsgDOTAFantasyTeamRosterAddDropResponse.result:type_name -> dota.CMsgDOTAFantasyTeamRosterAddDropResponse.EResult
	17,  // 35: dota.CMsgDOTAFantasyTeamTradesResponse.result:type_name -> dota.CMsgDOTAFantasyTeamTradesResponse.EResult
	114, // 36: dota.CMsgDOTAFantasyTeamTradesResponse.trades:type_name -> dota.CMsgDOTAFantasyTeamTradesResponse.Trade
	18,  // 37: dota.CMsgDOTAFantasyTeamTradeCancelResponse.result:type_name -> dota.CMsgDOTAFantasyTeamTradeCancelResponse.EResult
	19,  // 38: dota.CMsgDOTAFantasyTeamRosterResponse.result:type_name -> dota.CMsgDOTAFantasyTeamRosterResponse.EResult
	20,  // 39: dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.result:type_name -> dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.EResult
	116, // 40: dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.stats:type_name -> dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats
	21,  // 41: dota.CMsgDOTAFantasyMessagesResponse.result:type_name -> dota.CMsgDOTAFantasyMessagesResponse.EResult
	117, // 42: dota.CMsgDOTAFantasyMessagesResponse.messages:type_name -> dota.CMsgDOTAFantasyMessagesResponse.Message
	22,  // 43: dota.CMsgDOTAFantasyRemoveOwnerResponse.result:type_name -> dota.CMsgDOTAFantasyRemoveOwnerResponse.EResult
	23,  // 44: dota.CMsgDOTAFantasyScheduledMatchesResponse.result:type_name -> dota.CMsgDOTAFantasyScheduledMatchesResponse.EResult
	118, // 45: dota.CMsgDOTAFantasyScheduledMatchesResponse.scheduled_match_days:type_name -> dota.CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays
	24,  // 46: dota.CMsgDOTAFantasyLeaveLeagueResponse.result:type_name -> dota.CMsgDOTAFantasyLeaveLeagueResponse.EResult
	25,  // 47: dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.result:type_name -> dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.EResult
	119, // 48: dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.data:type_name -> dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData
	0,   // 49: dota.CMsgDOTAPassportVoteGenericSelection.selection_index:type_name -> dota.DOTA_2013PassportSelectionIndices
	92,  // 50: dota.CMsgDOTAPassportVote.team_votes:type_name -> dota.CMsgDOTAPassportVoteTeamGuess
	93,  // 51: dota.CMsgDOTAPassportVote.generic_selections:type_name -> dota.CMsgDOTAPassportVoteGenericSelection
	94,  // 52: dota.CMsgDOTAPassportVote.stamped_players:type_name -> dota.CMsgDOTAPassportStampedPlayer
	95,  // 53: dota.CMsgDOTAPassportVote.player_card_challenges:type_name -> dota.CMsgDOTAPassportPlayerCardChallenge
	26,  // 54: dota.CMsgClientToGCGetPlayerCardRosterResponse.result:type_name -> dota.CMsgClientToGCGetPlayerCardRosterResponse.Result
	27,  // 55: dota.CMsgClientToGCSetPlayerCardRosterResponse.result:type_name -> dota.CMsgClientToGCSetPlayerCardRosterResponse.Result
	120, // 56: dota.CMsgDOTAFantasyDPCLeagueStatus.league_infos:type_name -> dota.CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo
	108, // 57: dota.CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups.matchup:type_name -> dota.CMsgDOTAFantasyLeagueMatchupsResponse.Matchup
	115, // 58: dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats.stats_premium:type_name -> dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator
	115, // 59: dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats.stats_professional:type_name -> dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator
	28,  // 60: dota.CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo.status:type_name -> dota.CMsgDOTAFantasyDPCLeagueStatus.ERosterStatus
	61,  // [61:61] is the sub-list for method output_type
	61,  // [61:61] is the sub-list for method input_type
	61,  // [61:61] is the sub-list for extension type_name
	61,  // [61:61] is the sub-list for extension extendee
	0,   // [0:61] is the sub-list for field type_name
}

func init() { file_dota_gcmessages_client_fantasy_proto_init() }
func file_dota_gcmessages_client_fantasy_proto_init() {
	if File_dota_gcmessages_client_fantasy_proto != nil {
		return
	}
	file_dota_shared_enums_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_dota_gcmessages_client_fantasy_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAPlayerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAPlayerInfoList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTADPCProfileInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTALeaderboards); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTACreateFantasyLeagueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTACreateFantasyLeagueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgFantasyLeagueScoring); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAFantasyLeagueInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAFantasyLeagueEditInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAFantasyLeagueEditInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAFantasyLeagueFindRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAFantasyLeagueFindResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAFantasyLeagueInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAFantasyLeagueInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAFantasyLeagueMatchupsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAFantasyLeagueMatchupsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAEditFantasyTeamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAEditFantasyTeamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAFantasyTeamInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAFantasyTeamInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAFantasyTeamScoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAFantasyTeamScoreResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAFantasyTeamStandingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAFantasyTeamStandingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAFantasyPlayerScoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAFantasyPlayerScoreResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAFantasyPlayerStandingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAFantasyPlayerStandingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAFantasyLeagueCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAFantasyLeagueCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAFantasyTeamCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAFantasyTeamCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAFantasyLeagueEditInvitesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAFantasyLeagueEditInvitesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAFantasyLeagueDraftStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAFantasyLeagueDraftStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAFantasyLeagueDraftPlayerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAFantasyLeagueDraftPlayerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAFantasyTeamRosterSwapRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAFantasyTeamRosterSwapResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAFantasyTeamRosterAddDropRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAFantasyTeamRosterAddDropResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAFantasyTeamTradesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAFantasyTeamTradesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAFantasyTeamTradeCancelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAFantasyTeamTradeCancelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAFantasyTeamRosterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAFantasyTeamRosterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAFantasyPlayerHisoricalStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAFantasyPlayerHisoricalStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAFantasyMessageAdd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAFantasyMessagesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAFantasyMessagesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAFantasyRemoveOwner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAFantasyRemoveOwnerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAFantasyScheduledMatchesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAFantasyScheduledMatchesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAFantasyLeaveLeagueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAFantasyLeaveLeagueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAFantasyPlayerScoreDetailsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAFantasyPlayerScoreDetailsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAPassportVoteTeamGuess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAPassportVoteGenericSelection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAPassportStampedPlayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAPassportPlayerCardChallenge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAPassportVote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCGetPlayerCardRosterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCGetPlayerCardRosterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCSetPlayerCardRosterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCSetPlayerCardRosterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAFantasyDPCLeagueStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAPlayerInfo_Results); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAPlayerInfo_AuditEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTADPCProfileInfo_PredictionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTADPCProfileInfo_FantasyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTALeaderboards_RegionLeaderboard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAFantasyLeagueInfo_OwnerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAFantasyLeagueMatchupsResponse_Matchup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAFantasyTeamTradesResponse_Trade); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAFantasyMessagesResponse_Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dota_gcmessages_client_fantasy_proto_rawDesc,
			NumEnums:      29,
			NumMessages:   92,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_dota_gcmessages_client_fantasy_proto_goTypes,
		DependencyIndexes: file_dota_gcmessages_client_fantasy_proto_depIdxs,
		EnumInfos:         file_dota_gcmessages_client_fantasy_proto_enumTypes,
		MessageInfos:      file_dota_gcmessages_client_fantasy_proto_msgTypes,
	}.Build()
	File_dota_gcmessages_client_fantasy_proto = out.File
	file_dota_gcmessages_client_fantasy_proto_rawDesc = nil
	file_dota_gcmessages_client_fantasy_proto_goTypes = nil
	file_dota_gcmessages_client_fantasy_proto_depIdxs = nil
}
