// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.5
// source: dota_gcmessages_client_fantasy.proto

package dota

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DOTA_2013PassportSelectionIndices int32

const (
	DOTA_2013PassportSelectionIndices_PP13_SEL_ALLSTAR_PLAYER_0    DOTA_2013PassportSelectionIndices = 0
	DOTA_2013PassportSelectionIndices_PP13_SEL_ALLSTAR_PLAYER_1    DOTA_2013PassportSelectionIndices = 1
	DOTA_2013PassportSelectionIndices_PP13_SEL_ALLSTAR_PLAYER_2    DOTA_2013PassportSelectionIndices = 2
	DOTA_2013PassportSelectionIndices_PP13_SEL_ALLSTAR_PLAYER_3    DOTA_2013PassportSelectionIndices = 3
	DOTA_2013PassportSelectionIndices_PP13_SEL_ALLSTAR_PLAYER_4    DOTA_2013PassportSelectionIndices = 4
	DOTA_2013PassportSelectionIndices_PP13_SEL_ALLSTAR_PLAYER_5    DOTA_2013PassportSelectionIndices = 5
	DOTA_2013PassportSelectionIndices_PP13_SEL_ALLSTAR_PLAYER_6    DOTA_2013PassportSelectionIndices = 6
	DOTA_2013PassportSelectionIndices_PP13_SEL_ALLSTAR_PLAYER_7    DOTA_2013PassportSelectionIndices = 7
	DOTA_2013PassportSelectionIndices_PP13_SEL_ALLSTAR_PLAYER_8    DOTA_2013PassportSelectionIndices = 8
	DOTA_2013PassportSelectionIndices_PP13_SEL_ALLSTAR_PLAYER_9    DOTA_2013PassportSelectionIndices = 9
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_WEST_0     DOTA_2013PassportSelectionIndices = 10
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_WEST_1     DOTA_2013PassportSelectionIndices = 11
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_WEST_2     DOTA_2013PassportSelectionIndices = 12
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_WEST_3     DOTA_2013PassportSelectionIndices = 13
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_WEST_4     DOTA_2013PassportSelectionIndices = 14
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_WEST_5     DOTA_2013PassportSelectionIndices = 15
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_WEST_6     DOTA_2013PassportSelectionIndices = 16
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_WEST_7     DOTA_2013PassportSelectionIndices = 17
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_WEST_8     DOTA_2013PassportSelectionIndices = 18
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_WEST_9     DOTA_2013PassportSelectionIndices = 19
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_WEST_10    DOTA_2013PassportSelectionIndices = 20
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_WEST_11    DOTA_2013PassportSelectionIndices = 21
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_WEST_12    DOTA_2013PassportSelectionIndices = 22
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_WEST_13    DOTA_2013PassportSelectionIndices = 23
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_WEST_14    DOTA_2013PassportSelectionIndices = 24
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_EAST_0     DOTA_2013PassportSelectionIndices = 25
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_EAST_1     DOTA_2013PassportSelectionIndices = 26
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_EAST_2     DOTA_2013PassportSelectionIndices = 27
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_EAST_3     DOTA_2013PassportSelectionIndices = 28
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_EAST_4     DOTA_2013PassportSelectionIndices = 29
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_EAST_5     DOTA_2013PassportSelectionIndices = 30
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_EAST_6     DOTA_2013PassportSelectionIndices = 31
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_EAST_7     DOTA_2013PassportSelectionIndices = 32
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_EAST_8     DOTA_2013PassportSelectionIndices = 33
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_EAST_9     DOTA_2013PassportSelectionIndices = 34
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_EAST_10    DOTA_2013PassportSelectionIndices = 35
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_EAST_11    DOTA_2013PassportSelectionIndices = 36
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_EAST_12    DOTA_2013PassportSelectionIndices = 37
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_EAST_13    DOTA_2013PassportSelectionIndices = 38
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_EAST_14    DOTA_2013PassportSelectionIndices = 39
	DOTA_2013PassportSelectionIndices_PP13_SEL_TEAMCUP_TEAM        DOTA_2013PassportSelectionIndices = 40
	DOTA_2013PassportSelectionIndices_PP13_SEL_TEAMCUP_PLAYER      DOTA_2013PassportSelectionIndices = 41
	DOTA_2013PassportSelectionIndices_PP13_SEL_TEAMCUP_TEAM_LOCK   DOTA_2013PassportSelectionIndices = 42
	DOTA_2013PassportSelectionIndices_PP13_SEL_TEAMCUP_PLAYER_LOCK DOTA_2013PassportSelectionIndices = 43
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_0         DOTA_2013PassportSelectionIndices = 44
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_1         DOTA_2013PassportSelectionIndices = 45
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_2         DOTA_2013PassportSelectionIndices = 46
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_3         DOTA_2013PassportSelectionIndices = 47
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_4         DOTA_2013PassportSelectionIndices = 48
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_5         DOTA_2013PassportSelectionIndices = 49
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_6         DOTA_2013PassportSelectionIndices = 50
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_7         DOTA_2013PassportSelectionIndices = 51
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_8         DOTA_2013PassportSelectionIndices = 52
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_9         DOTA_2013PassportSelectionIndices = 53
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_10        DOTA_2013PassportSelectionIndices = 54
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_11        DOTA_2013PassportSelectionIndices = 55
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_12        DOTA_2013PassportSelectionIndices = 56
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_13        DOTA_2013PassportSelectionIndices = 57
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_14        DOTA_2013PassportSelectionIndices = 58
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_15        DOTA_2013PassportSelectionIndices = 59
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_16        DOTA_2013PassportSelectionIndices = 60
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_17        DOTA_2013PassportSelectionIndices = 61
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_18        DOTA_2013PassportSelectionIndices = 62
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_19        DOTA_2013PassportSelectionIndices = 63
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_20        DOTA_2013PassportSelectionIndices = 64
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_21        DOTA_2013PassportSelectionIndices = 65
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_22        DOTA_2013PassportSelectionIndices = 66
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_23        DOTA_2013PassportSelectionIndices = 67
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_24        DOTA_2013PassportSelectionIndices = 68
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_25        DOTA_2013PassportSelectionIndices = 69
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_26        DOTA_2013PassportSelectionIndices = 70
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_27        DOTA_2013PassportSelectionIndices = 71
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_28        DOTA_2013PassportSelectionIndices = 72
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_29        DOTA_2013PassportSelectionIndices = 73
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_30        DOTA_2013PassportSelectionIndices = 74
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_31        DOTA_2013PassportSelectionIndices = 75
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_32        DOTA_2013PassportSelectionIndices = 76
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_33        DOTA_2013PassportSelectionIndices = 77
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_34        DOTA_2013PassportSelectionIndices = 78
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_35        DOTA_2013PassportSelectionIndices = 79
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_36        DOTA_2013PassportSelectionIndices = 80
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_37        DOTA_2013PassportSelectionIndices = 81
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_38        DOTA_2013PassportSelectionIndices = 82
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_39        DOTA_2013PassportSelectionIndices = 83
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_40        DOTA_2013PassportSelectionIndices = 84
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_41        DOTA_2013PassportSelectionIndices = 85
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_42        DOTA_2013PassportSelectionIndices = 86
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_43        DOTA_2013PassportSelectionIndices = 87
	DOTA_2013PassportSelectionIndices_PP13_SEL_SOLO_0              DOTA_2013PassportSelectionIndices = 88
	DOTA_2013PassportSelectionIndices_PP13_SEL_SOLO_1              DOTA_2013PassportSelectionIndices = 89
	DOTA_2013PassportSelectionIndices_PP13_SEL_SOLO_2              DOTA_2013PassportSelectionIndices = 90
	DOTA_2013PassportSelectionIndices_PP13_SEL_SOLO_3              DOTA_2013PassportSelectionIndices = 91
	DOTA_2013PassportSelectionIndices_PP13_SEL_SOLO_4              DOTA_2013PassportSelectionIndices = 92
	DOTA_2013PassportSelectionIndices_PP13_SEL_SOLO_5              DOTA_2013PassportSelectionIndices = 93
	DOTA_2013PassportSelectionIndices_PP13_SEL_SOLO_6              DOTA_2013PassportSelectionIndices = 94
	DOTA_2013PassportSelectionIndices_PP13_SEL_SOLO_7              DOTA_2013PassportSelectionIndices = 95
)

// Enum value maps for DOTA_2013PassportSelectionIndices.
var (
	DOTA_2013PassportSelectionIndices_name = map[int32]string{
		0:  "PP13_SEL_ALLSTAR_PLAYER_0",
		1:  "PP13_SEL_ALLSTAR_PLAYER_1",
		2:  "PP13_SEL_ALLSTAR_PLAYER_2",
		3:  "PP13_SEL_ALLSTAR_PLAYER_3",
		4:  "PP13_SEL_ALLSTAR_PLAYER_4",
		5:  "PP13_SEL_ALLSTAR_PLAYER_5",
		6:  "PP13_SEL_ALLSTAR_PLAYER_6",
		7:  "PP13_SEL_ALLSTAR_PLAYER_7",
		8:  "PP13_SEL_ALLSTAR_PLAYER_8",
		9:  "PP13_SEL_ALLSTAR_PLAYER_9",
		10: "PP13_SEL_QUALPRED_WEST_0",
		11: "PP13_SEL_QUALPRED_WEST_1",
		12: "PP13_SEL_QUALPRED_WEST_2",
		13: "PP13_SEL_QUALPRED_WEST_3",
		14: "PP13_SEL_QUALPRED_WEST_4",
		15: "PP13_SEL_QUALPRED_WEST_5",
		16: "PP13_SEL_QUALPRED_WEST_6",
		17: "PP13_SEL_QUALPRED_WEST_7",
		18: "PP13_SEL_QUALPRED_WEST_8",
		19: "PP13_SEL_QUALPRED_WEST_9",
		20: "PP13_SEL_QUALPRED_WEST_10",
		21: "PP13_SEL_QUALPRED_WEST_11",
		22: "PP13_SEL_QUALPRED_WEST_12",
		23: "PP13_SEL_QUALPRED_WEST_13",
		24: "PP13_SEL_QUALPRED_WEST_14",
		25: "PP13_SEL_QUALPRED_EAST_0",
		26: "PP13_SEL_QUALPRED_EAST_1",
		27: "PP13_SEL_QUALPRED_EAST_2",
		28: "PP13_SEL_QUALPRED_EAST_3",
		29: "PP13_SEL_QUALPRED_EAST_4",
		30: "PP13_SEL_QUALPRED_EAST_5",
		31: "PP13_SEL_QUALPRED_EAST_6",
		32: "PP13_SEL_QUALPRED_EAST_7",
		33: "PP13_SEL_QUALPRED_EAST_8",
		34: "PP13_SEL_QUALPRED_EAST_9",
		35: "PP13_SEL_QUALPRED_EAST_10",
		36: "PP13_SEL_QUALPRED_EAST_11",
		37: "PP13_SEL_QUALPRED_EAST_12",
		38: "PP13_SEL_QUALPRED_EAST_13",
		39: "PP13_SEL_QUALPRED_EAST_14",
		40: "PP13_SEL_TEAMCUP_TEAM",
		41: "PP13_SEL_TEAMCUP_PLAYER",
		42: "PP13_SEL_TEAMCUP_TEAM_LOCK",
		43: "PP13_SEL_TEAMCUP_PLAYER_LOCK",
		44: "PP13_SEL_EVENTPRED_0",
		45: "PP13_SEL_EVENTPRED_1",
		46: "PP13_SEL_EVENTPRED_2",
		47: "PP13_SEL_EVENTPRED_3",
		48: "PP13_SEL_EVENTPRED_4",
		49: "PP13_SEL_EVENTPRED_5",
		50: "PP13_SEL_EVENTPRED_6",
		51: "PP13_SEL_EVENTPRED_7",
		52: "PP13_SEL_EVENTPRED_8",
		53: "PP13_SEL_EVENTPRED_9",
		54: "PP13_SEL_EVENTPRED_10",
		55: "PP13_SEL_EVENTPRED_11",
		56: "PP13_SEL_EVENTPRED_12",
		57: "PP13_SEL_EVENTPRED_13",
		58: "PP13_SEL_EVENTPRED_14",
		59: "PP13_SEL_EVENTPRED_15",
		60: "PP13_SEL_EVENTPRED_16",
		61: "PP13_SEL_EVENTPRED_17",
		62: "PP13_SEL_EVENTPRED_18",
		63: "PP13_SEL_EVENTPRED_19",
		64: "PP13_SEL_EVENTPRED_20",
		65: "PP13_SEL_EVENTPRED_21",
		66: "PP13_SEL_EVENTPRED_22",
		67: "PP13_SEL_EVENTPRED_23",
		68: "PP13_SEL_EVENTPRED_24",
		69: "PP13_SEL_EVENTPRED_25",
		70: "PP13_SEL_EVENTPRED_26",
		71: "PP13_SEL_EVENTPRED_27",
		72: "PP13_SEL_EVENTPRED_28",
		73: "PP13_SEL_EVENTPRED_29",
		74: "PP13_SEL_EVENTPRED_30",
		75: "PP13_SEL_EVENTPRED_31",
		76: "PP13_SEL_EVENTPRED_32",
		77: "PP13_SEL_EVENTPRED_33",
		78: "PP13_SEL_EVENTPRED_34",
		79: "PP13_SEL_EVENTPRED_35",
		80: "PP13_SEL_EVENTPRED_36",
		81: "PP13_SEL_EVENTPRED_37",
		82: "PP13_SEL_EVENTPRED_38",
		83: "PP13_SEL_EVENTPRED_39",
		84: "PP13_SEL_EVENTPRED_40",
		85: "PP13_SEL_EVENTPRED_41",
		86: "PP13_SEL_EVENTPRED_42",
		87: "PP13_SEL_EVENTPRED_43",
		88: "PP13_SEL_SOLO_0",
		89: "PP13_SEL_SOLO_1",
		90: "PP13_SEL_SOLO_2",
		91: "PP13_SEL_SOLO_3",
		92: "PP13_SEL_SOLO_4",
		93: "PP13_SEL_SOLO_5",
		94: "PP13_SEL_SOLO_6",
		95: "PP13_SEL_SOLO_7",
	}
	DOTA_2013PassportSelectionIndices_value = map[string]int32{
		"PP13_SEL_ALLSTAR_PLAYER_0":    0,
		"PP13_SEL_ALLSTAR_PLAYER_1":    1,
		"PP13_SEL_ALLSTAR_PLAYER_2":    2,
		"PP13_SEL_ALLSTAR_PLAYER_3":    3,
		"PP13_SEL_ALLSTAR_PLAYER_4":    4,
		"PP13_SEL_ALLSTAR_PLAYER_5":    5,
		"PP13_SEL_ALLSTAR_PLAYER_6":    6,
		"PP13_SEL_ALLSTAR_PLAYER_7":    7,
		"PP13_SEL_ALLSTAR_PLAYER_8":    8,
		"PP13_SEL_ALLSTAR_PLAYER_9":    9,
		"PP13_SEL_QUALPRED_WEST_0":     10,
		"PP13_SEL_QUALPRED_WEST_1":     11,
		"PP13_SEL_QUALPRED_WEST_2":     12,
		"PP13_SEL_QUALPRED_WEST_3":     13,
		"PP13_SEL_QUALPRED_WEST_4":     14,
		"PP13_SEL_QUALPRED_WEST_5":     15,
		"PP13_SEL_QUALPRED_WEST_6":     16,
		"PP13_SEL_QUALPRED_WEST_7":     17,
		"PP13_SEL_QUALPRED_WEST_8":     18,
		"PP13_SEL_QUALPRED_WEST_9":     19,
		"PP13_SEL_QUALPRED_WEST_10":    20,
		"PP13_SEL_QUALPRED_WEST_11":    21,
		"PP13_SEL_QUALPRED_WEST_12":    22,
		"PP13_SEL_QUALPRED_WEST_13":    23,
		"PP13_SEL_QUALPRED_WEST_14":    24,
		"PP13_SEL_QUALPRED_EAST_0":     25,
		"PP13_SEL_QUALPRED_EAST_1":     26,
		"PP13_SEL_QUALPRED_EAST_2":     27,
		"PP13_SEL_QUALPRED_EAST_3":     28,
		"PP13_SEL_QUALPRED_EAST_4":     29,
		"PP13_SEL_QUALPRED_EAST_5":     30,
		"PP13_SEL_QUALPRED_EAST_6":     31,
		"PP13_SEL_QUALPRED_EAST_7":     32,
		"PP13_SEL_QUALPRED_EAST_8":     33,
		"PP13_SEL_QUALPRED_EAST_9":     34,
		"PP13_SEL_QUALPRED_EAST_10":    35,
		"PP13_SEL_QUALPRED_EAST_11":    36,
		"PP13_SEL_QUALPRED_EAST_12":    37,
		"PP13_SEL_QUALPRED_EAST_13":    38,
		"PP13_SEL_QUALPRED_EAST_14":    39,
		"PP13_SEL_TEAMCUP_TEAM":        40,
		"PP13_SEL_TEAMCUP_PLAYER":      41,
		"PP13_SEL_TEAMCUP_TEAM_LOCK":   42,
		"PP13_SEL_TEAMCUP_PLAYER_LOCK": 43,
		"PP13_SEL_EVENTPRED_0":         44,
		"PP13_SEL_EVENTPRED_1":         45,
		"PP13_SEL_EVENTPRED_2":         46,
		"PP13_SEL_EVENTPRED_3":         47,
		"PP13_SEL_EVENTPRED_4":         48,
		"PP13_SEL_EVENTPRED_5":         49,
		"PP13_SEL_EVENTPRED_6":         50,
		"PP13_SEL_EVENTPRED_7":         51,
		"PP13_SEL_EVENTPRED_8":         52,
		"PP13_SEL_EVENTPRED_9":         53,
		"PP13_SEL_EVENTPRED_10":        54,
		"PP13_SEL_EVENTPRED_11":        55,
		"PP13_SEL_EVENTPRED_12":        56,
		"PP13_SEL_EVENTPRED_13":        57,
		"PP13_SEL_EVENTPRED_14":        58,
		"PP13_SEL_EVENTPRED_15":        59,
		"PP13_SEL_EVENTPRED_16":        60,
		"PP13_SEL_EVENTPRED_17":        61,
		"PP13_SEL_EVENTPRED_18":        62,
		"PP13_SEL_EVENTPRED_19":        63,
		"PP13_SEL_EVENTPRED_20":        64,
		"PP13_SEL_EVENTPRED_21":        65,
		"PP13_SEL_EVENTPRED_22":        66,
		"PP13_SEL_EVENTPRED_23":        67,
		"PP13_SEL_EVENTPRED_24":        68,
		"PP13_SEL_EVENTPRED_25":        69,
		"PP13_SEL_EVENTPRED_26":        70,
		"PP13_SEL_EVENTPRED_27":        71,
		"PP13_SEL_EVENTPRED_28":        72,
		"PP13_SEL_EVENTPRED_29":        73,
		"PP13_SEL_EVENTPRED_30":        74,
		"PP13_SEL_EVENTPRED_31":        75,
		"PP13_SEL_EVENTPRED_32":        76,
		"PP13_SEL_EVENTPRED_33":        77,
		"PP13_SEL_EVENTPRED_34":        78,
		"PP13_SEL_EVENTPRED_35":        79,
		"PP13_SEL_EVENTPRED_36":        80,
		"PP13_SEL_EVENTPRED_37":        81,
		"PP13_SEL_EVENTPRED_38":        82,
		"PP13_SEL_EVENTPRED_39":        83,
		"PP13_SEL_EVENTPRED_40":        84,
		"PP13_SEL_EVENTPRED_41":        85,
		"PP13_SEL_EVENTPRED_42":        86,
		"PP13_SEL_EVENTPRED_43":        87,
		"PP13_SEL_SOLO_0":              88,
		"PP13_SEL_SOLO_1":              89,
		"PP13_SEL_SOLO_2":              90,
		"PP13_SEL_SOLO_3":              91,
		"PP13_SEL_SOLO_4":              92,
		"PP13_SEL_SOLO_5":              93,
		"PP13_SEL_SOLO_6":              94,
		"PP13_SEL_SOLO_7":              95,
	}
)

func (x DOTA_2013PassportSelectionIndices) Enum() *DOTA_2013PassportSelectionIndices {
	p := new(DOTA_2013PassportSelectionIndices)
	*p = x
	return p
}

func (x DOTA_2013PassportSelectionIndices) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DOTA_2013PassportSelectionIndices) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_fantasy_proto_enumTypes[0].Descriptor()
}

func (DOTA_2013PassportSelectionIndices) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_fantasy_proto_enumTypes[0]
}

func (x DOTA_2013PassportSelectionIndices) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DOTA_2013PassportSelectionIndices) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DOTA_2013PassportSelectionIndices(num)
	return nil
}

// Deprecated: Use DOTA_2013PassportSelectionIndices.Descriptor instead.
func (DOTA_2013PassportSelectionIndices) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{0}
}

type CMsgClientToGCGetPlayerCardRosterResponse_Result int32

const (
	CMsgClientToGCGetPlayerCardRosterResponse_SUCCESS                 CMsgClientToGCGetPlayerCardRosterResponse_Result = 0
	CMsgClientToGCGetPlayerCardRosterResponse_ERROR_UNSPECIFIED       CMsgClientToGCGetPlayerCardRosterResponse_Result = 1
	CMsgClientToGCGetPlayerCardRosterResponse_ERROR_INVALID_LEAGUE_ID CMsgClientToGCGetPlayerCardRosterResponse_Result = 2
	CMsgClientToGCGetPlayerCardRosterResponse_ERROR_INVALID_TIMESTAMP CMsgClientToGCGetPlayerCardRosterResponse_Result = 3
)

// Enum value maps for CMsgClientToGCGetPlayerCardRosterResponse_Result.
var (
	CMsgClientToGCGetPlayerCardRosterResponse_Result_name = map[int32]string{
		0: "SUCCESS",
		1: "ERROR_UNSPECIFIED",
		2: "ERROR_INVALID_LEAGUE_ID",
		3: "ERROR_INVALID_TIMESTAMP",
	}
	CMsgClientToGCGetPlayerCardRosterResponse_Result_value = map[string]int32{
		"SUCCESS":                 0,
		"ERROR_UNSPECIFIED":       1,
		"ERROR_INVALID_LEAGUE_ID": 2,
		"ERROR_INVALID_TIMESTAMP": 3,
	}
)

func (x CMsgClientToGCGetPlayerCardRosterResponse_Result) Enum() *CMsgClientToGCGetPlayerCardRosterResponse_Result {
	p := new(CMsgClientToGCGetPlayerCardRosterResponse_Result)
	*p = x
	return p
}

func (x CMsgClientToGCGetPlayerCardRosterResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCGetPlayerCardRosterResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_fantasy_proto_enumTypes[1].Descriptor()
}

func (CMsgClientToGCGetPlayerCardRosterResponse_Result) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_fantasy_proto_enumTypes[1]
}

func (x CMsgClientToGCGetPlayerCardRosterResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCGetPlayerCardRosterResponse_Result) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCGetPlayerCardRosterResponse_Result(num)
	return nil
}

// Deprecated: Use CMsgClientToGCGetPlayerCardRosterResponse_Result.Descriptor instead.
func (CMsgClientToGCGetPlayerCardRosterResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{11, 0}
}

type CMsgClientToGCBatchGetPlayerCardRosterResponse_Result int32

const (
	CMsgClientToGCBatchGetPlayerCardRosterResponse_SUCCESS                 CMsgClientToGCBatchGetPlayerCardRosterResponse_Result = 0
	CMsgClientToGCBatchGetPlayerCardRosterResponse_ERROR_UNSPECIFIED       CMsgClientToGCBatchGetPlayerCardRosterResponse_Result = 1
	CMsgClientToGCBatchGetPlayerCardRosterResponse_ERROR_INVALID_LEAGUE_ID CMsgClientToGCBatchGetPlayerCardRosterResponse_Result = 2
	CMsgClientToGCBatchGetPlayerCardRosterResponse_ERROR_INVALID_TIMESTAMP CMsgClientToGCBatchGetPlayerCardRosterResponse_Result = 3
)

// Enum value maps for CMsgClientToGCBatchGetPlayerCardRosterResponse_Result.
var (
	CMsgClientToGCBatchGetPlayerCardRosterResponse_Result_name = map[int32]string{
		0: "SUCCESS",
		1: "ERROR_UNSPECIFIED",
		2: "ERROR_INVALID_LEAGUE_ID",
		3: "ERROR_INVALID_TIMESTAMP",
	}
	CMsgClientToGCBatchGetPlayerCardRosterResponse_Result_value = map[string]int32{
		"SUCCESS":                 0,
		"ERROR_UNSPECIFIED":       1,
		"ERROR_INVALID_LEAGUE_ID": 2,
		"ERROR_INVALID_TIMESTAMP": 3,
	}
)

func (x CMsgClientToGCBatchGetPlayerCardRosterResponse_Result) Enum() *CMsgClientToGCBatchGetPlayerCardRosterResponse_Result {
	p := new(CMsgClientToGCBatchGetPlayerCardRosterResponse_Result)
	*p = x
	return p
}

func (x CMsgClientToGCBatchGetPlayerCardRosterResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCBatchGetPlayerCardRosterResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_fantasy_proto_enumTypes[2].Descriptor()
}

func (CMsgClientToGCBatchGetPlayerCardRosterResponse_Result) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_fantasy_proto_enumTypes[2]
}

func (x CMsgClientToGCBatchGetPlayerCardRosterResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCBatchGetPlayerCardRosterResponse_Result) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCBatchGetPlayerCardRosterResponse_Result(num)
	return nil
}

// Deprecated: Use CMsgClientToGCBatchGetPlayerCardRosterResponse_Result.Descriptor instead.
func (CMsgClientToGCBatchGetPlayerCardRosterResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{13, 0}
}

type CMsgClientToGCSetPlayerCardRosterResponse_Result int32

const (
	CMsgClientToGCSetPlayerCardRosterResponse_SUCCESS                         CMsgClientToGCSetPlayerCardRosterResponse_Result = 0
	CMsgClientToGCSetPlayerCardRosterResponse_ERROR_UNSPECIFIED               CMsgClientToGCSetPlayerCardRosterResponse_Result = 1
	CMsgClientToGCSetPlayerCardRosterResponse_ERROR_INVALID_LEAGUE_ID         CMsgClientToGCSetPlayerCardRosterResponse_Result = 2
	CMsgClientToGCSetPlayerCardRosterResponse_ERROR_INVALID_TIMESTAMP         CMsgClientToGCSetPlayerCardRosterResponse_Result = 3
	CMsgClientToGCSetPlayerCardRosterResponse_ERROR_PLAYER_CARD_NOT_OWNED     CMsgClientToGCSetPlayerCardRosterResponse_Result = 4
	CMsgClientToGCSetPlayerCardRosterResponse_ERROR_INVALID_SLOT              CMsgClientToGCSetPlayerCardRosterResponse_Result = 5
	CMsgClientToGCSetPlayerCardRosterResponse_ERROR_FAILED_CARD_INFO          CMsgClientToGCSetPlayerCardRosterResponse_Result = 6
	CMsgClientToGCSetPlayerCardRosterResponse_ERROR_ACCOUNT_DUPLICATE         CMsgClientToGCSetPlayerCardRosterResponse_Result = 7
	CMsgClientToGCSetPlayerCardRosterResponse_ERROR_LOCKED_TIMESTAMP          CMsgClientToGCSetPlayerCardRosterResponse_Result = 8
	CMsgClientToGCSetPlayerCardRosterResponse_ERROR_INVALID_LEAGUE_FOR_PERIOD CMsgClientToGCSetPlayerCardRosterResponse_Result = 9
	CMsgClientToGCSetPlayerCardRosterResponse_ERROR_INVALID_EVENT             CMsgClientToGCSetPlayerCardRosterResponse_Result = 10
)

// Enum value maps for CMsgClientToGCSetPlayerCardRosterResponse_Result.
var (
	CMsgClientToGCSetPlayerCardRosterResponse_Result_name = map[int32]string{
		0:  "SUCCESS",
		1:  "ERROR_UNSPECIFIED",
		2:  "ERROR_INVALID_LEAGUE_ID",
		3:  "ERROR_INVALID_TIMESTAMP",
		4:  "ERROR_PLAYER_CARD_NOT_OWNED",
		5:  "ERROR_INVALID_SLOT",
		6:  "ERROR_FAILED_CARD_INFO",
		7:  "ERROR_ACCOUNT_DUPLICATE",
		8:  "ERROR_LOCKED_TIMESTAMP",
		9:  "ERROR_INVALID_LEAGUE_FOR_PERIOD",
		10: "ERROR_INVALID_EVENT",
	}
	CMsgClientToGCSetPlayerCardRosterResponse_Result_value = map[string]int32{
		"SUCCESS":                         0,
		"ERROR_UNSPECIFIED":               1,
		"ERROR_INVALID_LEAGUE_ID":         2,
		"ERROR_INVALID_TIMESTAMP":         3,
		"ERROR_PLAYER_CARD_NOT_OWNED":     4,
		"ERROR_INVALID_SLOT":              5,
		"ERROR_FAILED_CARD_INFO":          6,
		"ERROR_ACCOUNT_DUPLICATE":         7,
		"ERROR_LOCKED_TIMESTAMP":          8,
		"ERROR_INVALID_LEAGUE_FOR_PERIOD": 9,
		"ERROR_INVALID_EVENT":             10,
	}
)

func (x CMsgClientToGCSetPlayerCardRosterResponse_Result) Enum() *CMsgClientToGCSetPlayerCardRosterResponse_Result {
	p := new(CMsgClientToGCSetPlayerCardRosterResponse_Result)
	*p = x
	return p
}

func (x CMsgClientToGCSetPlayerCardRosterResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCSetPlayerCardRosterResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_fantasy_proto_enumTypes[3].Descriptor()
}

func (CMsgClientToGCSetPlayerCardRosterResponse_Result) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_fantasy_proto_enumTypes[3]
}

func (x CMsgClientToGCSetPlayerCardRosterResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCSetPlayerCardRosterResponse_Result) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCSetPlayerCardRosterResponse_Result(num)
	return nil
}

// Deprecated: Use CMsgClientToGCSetPlayerCardRosterResponse_Result.Descriptor instead.
func (CMsgClientToGCSetPlayerCardRosterResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{15, 0}
}

type CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus int32

const (
	CMsgDOTAFantasyDPCLeagueStatus_UNSET     CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus = 0
	CMsgDOTAFantasyDPCLeagueStatus_PARTIAL   CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus = 1
	CMsgDOTAFantasyDPCLeagueStatus_FULL      CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus = 2
	CMsgDOTAFantasyDPCLeagueStatus_CONCLUDED CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus = 3
)

// Enum value maps for CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus.
var (
	CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus_name = map[int32]string{
		0: "UNSET",
		1: "PARTIAL",
		2: "FULL",
		3: "CONCLUDED",
	}
	CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus_value = map[string]int32{
		"UNSET":     0,
		"PARTIAL":   1,
		"FULL":      2,
		"CONCLUDED": 3,
	}
)

func (x CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus) Enum() *CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus {
	p := new(CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus)
	*p = x
	return p
}

func (x CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_fantasy_proto_enumTypes[4].Descriptor()
}

func (CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_fantasy_proto_enumTypes[4]
}

func (x CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus(num)
	return nil
}

// Deprecated: Use CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus.Descriptor instead.
func (CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{16, 0}
}

type CMsgDOTADPCSearchResults_ESearchResultsDesired int32

const (
	CMsgDOTADPCSearchResults_k_ESearchResultsDesired_Players CMsgDOTADPCSearchResults_ESearchResultsDesired = 1
	CMsgDOTADPCSearchResults_k_ESearchResultsDesired_Teams   CMsgDOTADPCSearchResults_ESearchResultsDesired = 2
	CMsgDOTADPCSearchResults_k_ESearchResultsDesired_Leagues CMsgDOTADPCSearchResults_ESearchResultsDesired = 4
	CMsgDOTADPCSearchResults_k_ESearchResultsDesired_All     CMsgDOTADPCSearchResults_ESearchResultsDesired = 7
)

// Enum value maps for CMsgDOTADPCSearchResults_ESearchResultsDesired.
var (
	CMsgDOTADPCSearchResults_ESearchResultsDesired_name = map[int32]string{
		1: "k_ESearchResultsDesired_Players",
		2: "k_ESearchResultsDesired_Teams",
		4: "k_ESearchResultsDesired_Leagues",
		7: "k_ESearchResultsDesired_All",
	}
	CMsgDOTADPCSearchResults_ESearchResultsDesired_value = map[string]int32{
		"k_ESearchResultsDesired_Players": 1,
		"k_ESearchResultsDesired_Teams":   2,
		"k_ESearchResultsDesired_Leagues": 4,
		"k_ESearchResultsDesired_All":     7,
	}
)

func (x CMsgDOTADPCSearchResults_ESearchResultsDesired) Enum() *CMsgDOTADPCSearchResults_ESearchResultsDesired {
	p := new(CMsgDOTADPCSearchResults_ESearchResultsDesired)
	*p = x
	return p
}

func (x CMsgDOTADPCSearchResults_ESearchResultsDesired) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgDOTADPCSearchResults_ESearchResultsDesired) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_fantasy_proto_enumTypes[5].Descriptor()
}

func (CMsgDOTADPCSearchResults_ESearchResultsDesired) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_fantasy_proto_enumTypes[5]
}

func (x CMsgDOTADPCSearchResults_ESearchResultsDesired) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgDOTADPCSearchResults_ESearchResultsDesired) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgDOTADPCSearchResults_ESearchResultsDesired(num)
	return nil
}

// Deprecated: Use CMsgDOTADPCSearchResults_ESearchResultsDesired.Descriptor instead.
func (CMsgDOTADPCSearchResults_ESearchResultsDesired) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{17, 0}
}

type CMsgClientToGCFantasyCraftingGetDataResponse_EResponse int32

const (
	CMsgClientToGCFantasyCraftingGetDataResponse_k_eInternalError CMsgClientToGCFantasyCraftingGetDataResponse_EResponse = 0
	CMsgClientToGCFantasyCraftingGetDataResponse_k_eSuccess       CMsgClientToGCFantasyCraftingGetDataResponse_EResponse = 1
	CMsgClientToGCFantasyCraftingGetDataResponse_k_eTooBusy       CMsgClientToGCFantasyCraftingGetDataResponse_EResponse = 2
	CMsgClientToGCFantasyCraftingGetDataResponse_k_eDisabled      CMsgClientToGCFantasyCraftingGetDataResponse_EResponse = 3
	CMsgClientToGCFantasyCraftingGetDataResponse_k_eTimeout       CMsgClientToGCFantasyCraftingGetDataResponse_EResponse = 4
	CMsgClientToGCFantasyCraftingGetDataResponse_k_eInvalidLeague CMsgClientToGCFantasyCraftingGetDataResponse_EResponse = 5
)

// Enum value maps for CMsgClientToGCFantasyCraftingGetDataResponse_EResponse.
var (
	CMsgClientToGCFantasyCraftingGetDataResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eTooBusy",
		3: "k_eDisabled",
		4: "k_eTimeout",
		5: "k_eInvalidLeague",
	}
	CMsgClientToGCFantasyCraftingGetDataResponse_EResponse_value = map[string]int32{
		"k_eInternalError": 0,
		"k_eSuccess":       1,
		"k_eTooBusy":       2,
		"k_eDisabled":      3,
		"k_eTimeout":       4,
		"k_eInvalidLeague": 5,
	}
)

func (x CMsgClientToGCFantasyCraftingGetDataResponse_EResponse) Enum() *CMsgClientToGCFantasyCraftingGetDataResponse_EResponse {
	p := new(CMsgClientToGCFantasyCraftingGetDataResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCFantasyCraftingGetDataResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCFantasyCraftingGetDataResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_fantasy_proto_enumTypes[6].Descriptor()
}

func (CMsgClientToGCFantasyCraftingGetDataResponse_EResponse) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_fantasy_proto_enumTypes[6]
}

func (x CMsgClientToGCFantasyCraftingGetDataResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCFantasyCraftingGetDataResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCFantasyCraftingGetDataResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCFantasyCraftingGetDataResponse_EResponse.Descriptor instead.
func (CMsgClientToGCFantasyCraftingGetDataResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{24, 0}
}

type CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse int32

const (
	CMsgClientToGCFantasyCraftingPerformOperationResponse_k_eInternalError CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse = 0
	CMsgClientToGCFantasyCraftingPerformOperationResponse_k_eSuccess       CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse = 1
	CMsgClientToGCFantasyCraftingPerformOperationResponse_k_eTooBusy       CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse = 2
	CMsgClientToGCFantasyCraftingPerformOperationResponse_k_eDisabled      CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse = 3
	CMsgClientToGCFantasyCraftingPerformOperationResponse_k_eTimeout       CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse = 4
	CMsgClientToGCFantasyCraftingPerformOperationResponse_k_eInvalidLeague CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse = 5
	CMsgClientToGCFantasyCraftingPerformOperationResponse_k_eNoTokens      CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse = 6
	CMsgClientToGCFantasyCraftingPerformOperationResponse_k_eMoreInfo      CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse = 7
)

// Enum value maps for CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse.
var (
	CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eTooBusy",
		3: "k_eDisabled",
		4: "k_eTimeout",
		5: "k_eInvalidLeague",
		6: "k_eNoTokens",
		7: "k_eMoreInfo",
	}
	CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse_value = map[string]int32{
		"k_eInternalError": 0,
		"k_eSuccess":       1,
		"k_eTooBusy":       2,
		"k_eDisabled":      3,
		"k_eTimeout":       4,
		"k_eInvalidLeague": 5,
		"k_eNoTokens":      6,
		"k_eMoreInfo":      7,
	}
)

func (x CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse) Enum() *CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse {
	p := new(CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_fantasy_proto_enumTypes[7].Descriptor()
}

func (CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_fantasy_proto_enumTypes[7]
}

func (x CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse.Descriptor instead.
func (CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{26, 0}
}

type CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse int32

const (
	CMsgClientToGCFantasyCraftingDevModifyTabletResponse_k_eInternalError CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse = 0
	CMsgClientToGCFantasyCraftingDevModifyTabletResponse_k_eSuccess       CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse = 1
	CMsgClientToGCFantasyCraftingDevModifyTabletResponse_k_eTooBusy       CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse = 2
	CMsgClientToGCFantasyCraftingDevModifyTabletResponse_k_eDisabled      CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse = 3
	CMsgClientToGCFantasyCraftingDevModifyTabletResponse_k_eTimeout       CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse = 4
	CMsgClientToGCFantasyCraftingDevModifyTabletResponse_k_eInvalidLeague CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse = 5
)

// Enum value maps for CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse.
var (
	CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eTooBusy",
		3: "k_eDisabled",
		4: "k_eTimeout",
		5: "k_eInvalidLeague",
	}
	CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse_value = map[string]int32{
		"k_eInternalError": 0,
		"k_eSuccess":       1,
		"k_eTooBusy":       2,
		"k_eDisabled":      3,
		"k_eTimeout":       4,
		"k_eInvalidLeague": 5,
	}
)

func (x CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse) Enum() *CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse {
	p := new(CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_fantasy_proto_enumTypes[8].Descriptor()
}

func (CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_fantasy_proto_enumTypes[8]
}

func (x CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse.Descriptor instead.
func (CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{29, 0}
}

type CMsgClientToGCFantasyCraftingSelectPlayerResponse_EResponse int32

const (
	CMsgClientToGCFantasyCraftingSelectPlayerResponse_k_eInternalError CMsgClientToGCFantasyCraftingSelectPlayerResponse_EResponse = 0
	CMsgClientToGCFantasyCraftingSelectPlayerResponse_k_eSuccess       CMsgClientToGCFantasyCraftingSelectPlayerResponse_EResponse = 1
	CMsgClientToGCFantasyCraftingSelectPlayerResponse_k_eTooBusy       CMsgClientToGCFantasyCraftingSelectPlayerResponse_EResponse = 2
	CMsgClientToGCFantasyCraftingSelectPlayerResponse_k_eDisabled      CMsgClientToGCFantasyCraftingSelectPlayerResponse_EResponse = 3
	CMsgClientToGCFantasyCraftingSelectPlayerResponse_k_eTimeout       CMsgClientToGCFantasyCraftingSelectPlayerResponse_EResponse = 4
	CMsgClientToGCFantasyCraftingSelectPlayerResponse_k_eInvalidLeague CMsgClientToGCFantasyCraftingSelectPlayerResponse_EResponse = 5
	CMsgClientToGCFantasyCraftingSelectPlayerResponse_k_eInvalidPlayer CMsgClientToGCFantasyCraftingSelectPlayerResponse_EResponse = 6
)

// Enum value maps for CMsgClientToGCFantasyCraftingSelectPlayerResponse_EResponse.
var (
	CMsgClientToGCFantasyCraftingSelectPlayerResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eTooBusy",
		3: "k_eDisabled",
		4: "k_eTimeout",
		5: "k_eInvalidLeague",
		6: "k_eInvalidPlayer",
	}
	CMsgClientToGCFantasyCraftingSelectPlayerResponse_EResponse_value = map[string]int32{
		"k_eInternalError": 0,
		"k_eSuccess":       1,
		"k_eTooBusy":       2,
		"k_eDisabled":      3,
		"k_eTimeout":       4,
		"k_eInvalidLeague": 5,
		"k_eInvalidPlayer": 6,
	}
)

func (x CMsgClientToGCFantasyCraftingSelectPlayerResponse_EResponse) Enum() *CMsgClientToGCFantasyCraftingSelectPlayerResponse_EResponse {
	p := new(CMsgClientToGCFantasyCraftingSelectPlayerResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCFantasyCraftingSelectPlayerResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCFantasyCraftingSelectPlayerResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_fantasy_proto_enumTypes[9].Descriptor()
}

func (CMsgClientToGCFantasyCraftingSelectPlayerResponse_EResponse) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_fantasy_proto_enumTypes[9]
}

func (x CMsgClientToGCFantasyCraftingSelectPlayerResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCFantasyCraftingSelectPlayerResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCFantasyCraftingSelectPlayerResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCFantasyCraftingSelectPlayerResponse_EResponse.Descriptor instead.
func (CMsgClientToGCFantasyCraftingSelectPlayerResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{31, 0}
}

type CMsgClientToGCFantasyCraftingGenerateTabletsResponse_EResponse int32

const (
	CMsgClientToGCFantasyCraftingGenerateTabletsResponse_k_eInternalError CMsgClientToGCFantasyCraftingGenerateTabletsResponse_EResponse = 0
	CMsgClientToGCFantasyCraftingGenerateTabletsResponse_k_eSuccess       CMsgClientToGCFantasyCraftingGenerateTabletsResponse_EResponse = 1
	CMsgClientToGCFantasyCraftingGenerateTabletsResponse_k_eTooBusy       CMsgClientToGCFantasyCraftingGenerateTabletsResponse_EResponse = 2
	CMsgClientToGCFantasyCraftingGenerateTabletsResponse_k_eDisabled      CMsgClientToGCFantasyCraftingGenerateTabletsResponse_EResponse = 3
	CMsgClientToGCFantasyCraftingGenerateTabletsResponse_k_eTimeout       CMsgClientToGCFantasyCraftingGenerateTabletsResponse_EResponse = 4
	CMsgClientToGCFantasyCraftingGenerateTabletsResponse_k_eInvalidLeague CMsgClientToGCFantasyCraftingGenerateTabletsResponse_EResponse = 5
	CMsgClientToGCFantasyCraftingGenerateTabletsResponse_k_eInvalidPlayer CMsgClientToGCFantasyCraftingGenerateTabletsResponse_EResponse = 6
)

// Enum value maps for CMsgClientToGCFantasyCraftingGenerateTabletsResponse_EResponse.
var (
	CMsgClientToGCFantasyCraftingGenerateTabletsResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eTooBusy",
		3: "k_eDisabled",
		4: "k_eTimeout",
		5: "k_eInvalidLeague",
		6: "k_eInvalidPlayer",
	}
	CMsgClientToGCFantasyCraftingGenerateTabletsResponse_EResponse_value = map[string]int32{
		"k_eInternalError": 0,
		"k_eSuccess":       1,
		"k_eTooBusy":       2,
		"k_eDisabled":      3,
		"k_eTimeout":       4,
		"k_eInvalidLeague": 5,
		"k_eInvalidPlayer": 6,
	}
)

func (x CMsgClientToGCFantasyCraftingGenerateTabletsResponse_EResponse) Enum() *CMsgClientToGCFantasyCraftingGenerateTabletsResponse_EResponse {
	p := new(CMsgClientToGCFantasyCraftingGenerateTabletsResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCFantasyCraftingGenerateTabletsResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCFantasyCraftingGenerateTabletsResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_fantasy_proto_enumTypes[10].Descriptor()
}

func (CMsgClientToGCFantasyCraftingGenerateTabletsResponse_EResponse) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_fantasy_proto_enumTypes[10]
}

func (x CMsgClientToGCFantasyCraftingGenerateTabletsResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCFantasyCraftingGenerateTabletsResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCFantasyCraftingGenerateTabletsResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCFantasyCraftingGenerateTabletsResponse_EResponse.Descriptor instead.
func (CMsgClientToGCFantasyCraftingGenerateTabletsResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{33, 0}
}

type CMsgClientToGcFantasyCraftingUpgradeTabletsResponse_EResponse int32

const (
	CMsgClientToGcFantasyCraftingUpgradeTabletsResponse_k_eInternalError CMsgClientToGcFantasyCraftingUpgradeTabletsResponse_EResponse = 0
	CMsgClientToGcFantasyCraftingUpgradeTabletsResponse_k_eSuccess       CMsgClientToGcFantasyCraftingUpgradeTabletsResponse_EResponse = 1
	CMsgClientToGcFantasyCraftingUpgradeTabletsResponse_k_eTooBusy       CMsgClientToGcFantasyCraftingUpgradeTabletsResponse_EResponse = 2
	CMsgClientToGcFantasyCraftingUpgradeTabletsResponse_k_eDisabled      CMsgClientToGcFantasyCraftingUpgradeTabletsResponse_EResponse = 3
	CMsgClientToGcFantasyCraftingUpgradeTabletsResponse_k_eTimeout       CMsgClientToGcFantasyCraftingUpgradeTabletsResponse_EResponse = 4
	CMsgClientToGcFantasyCraftingUpgradeTabletsResponse_k_eInvalidLeague CMsgClientToGcFantasyCraftingUpgradeTabletsResponse_EResponse = 5
)

// Enum value maps for CMsgClientToGcFantasyCraftingUpgradeTabletsResponse_EResponse.
var (
	CMsgClientToGcFantasyCraftingUpgradeTabletsResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eTooBusy",
		3: "k_eDisabled",
		4: "k_eTimeout",
		5: "k_eInvalidLeague",
	}
	CMsgClientToGcFantasyCraftingUpgradeTabletsResponse_EResponse_value = map[string]int32{
		"k_eInternalError": 0,
		"k_eSuccess":       1,
		"k_eTooBusy":       2,
		"k_eDisabled":      3,
		"k_eTimeout":       4,
		"k_eInvalidLeague": 5,
	}
)

func (x CMsgClientToGcFantasyCraftingUpgradeTabletsResponse_EResponse) Enum() *CMsgClientToGcFantasyCraftingUpgradeTabletsResponse_EResponse {
	p := new(CMsgClientToGcFantasyCraftingUpgradeTabletsResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGcFantasyCraftingUpgradeTabletsResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGcFantasyCraftingUpgradeTabletsResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_fantasy_proto_enumTypes[11].Descriptor()
}

func (CMsgClientToGcFantasyCraftingUpgradeTabletsResponse_EResponse) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_fantasy_proto_enumTypes[11]
}

func (x CMsgClientToGcFantasyCraftingUpgradeTabletsResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGcFantasyCraftingUpgradeTabletsResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGcFantasyCraftingUpgradeTabletsResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGcFantasyCraftingUpgradeTabletsResponse_EResponse.Descriptor instead.
func (CMsgClientToGcFantasyCraftingUpgradeTabletsResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{35, 0}
}

type CMsgClientToGCFantasyCraftingRerollOptionsResponse_EResponse int32

const (
	CMsgClientToGCFantasyCraftingRerollOptionsResponse_k_eInternalError      CMsgClientToGCFantasyCraftingRerollOptionsResponse_EResponse = 0
	CMsgClientToGCFantasyCraftingRerollOptionsResponse_k_eSuccess            CMsgClientToGCFantasyCraftingRerollOptionsResponse_EResponse = 1
	CMsgClientToGCFantasyCraftingRerollOptionsResponse_k_eTooBusy            CMsgClientToGCFantasyCraftingRerollOptionsResponse_EResponse = 2
	CMsgClientToGCFantasyCraftingRerollOptionsResponse_k_eDisabled           CMsgClientToGCFantasyCraftingRerollOptionsResponse_EResponse = 3
	CMsgClientToGCFantasyCraftingRerollOptionsResponse_k_eTimeout            CMsgClientToGCFantasyCraftingRerollOptionsResponse_EResponse = 4
	CMsgClientToGCFantasyCraftingRerollOptionsResponse_k_eInvalidLeague      CMsgClientToGCFantasyCraftingRerollOptionsResponse_EResponse = 5
	CMsgClientToGCFantasyCraftingRerollOptionsResponse_k_eInsufficientTokens CMsgClientToGCFantasyCraftingRerollOptionsResponse_EResponse = 6
)

// Enum value maps for CMsgClientToGCFantasyCraftingRerollOptionsResponse_EResponse.
var (
	CMsgClientToGCFantasyCraftingRerollOptionsResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eTooBusy",
		3: "k_eDisabled",
		4: "k_eTimeout",
		5: "k_eInvalidLeague",
		6: "k_eInsufficientTokens",
	}
	CMsgClientToGCFantasyCraftingRerollOptionsResponse_EResponse_value = map[string]int32{
		"k_eInternalError":      0,
		"k_eSuccess":            1,
		"k_eTooBusy":            2,
		"k_eDisabled":           3,
		"k_eTimeout":            4,
		"k_eInvalidLeague":      5,
		"k_eInsufficientTokens": 6,
	}
)

func (x CMsgClientToGCFantasyCraftingRerollOptionsResponse_EResponse) Enum() *CMsgClientToGCFantasyCraftingRerollOptionsResponse_EResponse {
	p := new(CMsgClientToGCFantasyCraftingRerollOptionsResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCFantasyCraftingRerollOptionsResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCFantasyCraftingRerollOptionsResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_fantasy_proto_enumTypes[12].Descriptor()
}

func (CMsgClientToGCFantasyCraftingRerollOptionsResponse_EResponse) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_fantasy_proto_enumTypes[12]
}

func (x CMsgClientToGCFantasyCraftingRerollOptionsResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCFantasyCraftingRerollOptionsResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCFantasyCraftingRerollOptionsResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCFantasyCraftingRerollOptionsResponse_EResponse.Descriptor instead.
func (CMsgClientToGCFantasyCraftingRerollOptionsResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{37, 0}
}

type CMsgDOTAPlayerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId        *uint32                          `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Name             *string                          `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	CountryCode      *string                          `protobuf:"bytes,3,opt,name=country_code,json=countryCode" json:"country_code,omitempty"`
	FantasyRole      *Fantasy_Roles                   `protobuf:"varint,4,opt,name=fantasy_role,json=fantasyRole,enum=dota.Fantasy_Roles" json:"fantasy_role,omitempty"`
	TeamId           *uint32                          `protobuf:"varint,5,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	TeamName         *string                          `protobuf:"bytes,6,opt,name=team_name,json=teamName" json:"team_name,omitempty"`
	TeamTag          *string                          `protobuf:"bytes,7,opt,name=team_tag,json=teamTag" json:"team_tag,omitempty"`
	Sponsor          *string                          `protobuf:"bytes,8,opt,name=sponsor" json:"sponsor,omitempty"`
	IsLocked         *bool                            `protobuf:"varint,9,opt,name=is_locked,json=isLocked" json:"is_locked,omitempty"`
	IsPro            *bool                            `protobuf:"varint,10,opt,name=is_pro,json=isPro" json:"is_pro,omitempty"`
	RealName         *string                          `protobuf:"bytes,11,opt,name=real_name,json=realName" json:"real_name,omitempty"`
	TotalEarnings    *uint32                          `protobuf:"varint,13,opt,name=total_earnings,json=totalEarnings" json:"total_earnings,omitempty"`
	Results          []*CMsgDOTAPlayerInfo_Results    `protobuf:"bytes,14,rep,name=results" json:"results,omitempty"`
	TeamUrlLogo      *string                          `protobuf:"bytes,15,opt,name=team_url_logo,json=teamUrlLogo" json:"team_url_logo,omitempty"`
	AuditEntries     []*CMsgDOTAPlayerInfo_AuditEntry `protobuf:"bytes,16,rep,name=audit_entries,json=auditEntries" json:"audit_entries,omitempty"`
	TeamAbbreviation *string                          `protobuf:"bytes,17,opt,name=team_abbreviation,json=teamAbbreviation" json:"team_abbreviation,omitempty"`
}

func (x *CMsgDOTAPlayerInfo) Reset() {
	*x = CMsgDOTAPlayerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAPlayerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAPlayerInfo) ProtoMessage() {}

func (x *CMsgDOTAPlayerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAPlayerInfo.ProtoReflect.Descriptor instead.
func (*CMsgDOTAPlayerInfo) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{0}
}

func (x *CMsgDOTAPlayerInfo) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgDOTAPlayerInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CMsgDOTAPlayerInfo) GetCountryCode() string {
	if x != nil && x.CountryCode != nil {
		return *x.CountryCode
	}
	return ""
}

func (x *CMsgDOTAPlayerInfo) GetFantasyRole() Fantasy_Roles {
	if x != nil && x.FantasyRole != nil {
		return *x.FantasyRole
	}
	return Fantasy_Roles_FANTASY_ROLE_UNDEFINED
}

func (x *CMsgDOTAPlayerInfo) GetTeamId() uint32 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

func (x *CMsgDOTAPlayerInfo) GetTeamName() string {
	if x != nil && x.TeamName != nil {
		return *x.TeamName
	}
	return ""
}

func (x *CMsgDOTAPlayerInfo) GetTeamTag() string {
	if x != nil && x.TeamTag != nil {
		return *x.TeamTag
	}
	return ""
}

func (x *CMsgDOTAPlayerInfo) GetSponsor() string {
	if x != nil && x.Sponsor != nil {
		return *x.Sponsor
	}
	return ""
}

func (x *CMsgDOTAPlayerInfo) GetIsLocked() bool {
	if x != nil && x.IsLocked != nil {
		return *x.IsLocked
	}
	return false
}

func (x *CMsgDOTAPlayerInfo) GetIsPro() bool {
	if x != nil && x.IsPro != nil {
		return *x.IsPro
	}
	return false
}

func (x *CMsgDOTAPlayerInfo) GetRealName() string {
	if x != nil && x.RealName != nil {
		return *x.RealName
	}
	return ""
}

func (x *CMsgDOTAPlayerInfo) GetTotalEarnings() uint32 {
	if x != nil && x.TotalEarnings != nil {
		return *x.TotalEarnings
	}
	return 0
}

func (x *CMsgDOTAPlayerInfo) GetResults() []*CMsgDOTAPlayerInfo_Results {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *CMsgDOTAPlayerInfo) GetTeamUrlLogo() string {
	if x != nil && x.TeamUrlLogo != nil {
		return *x.TeamUrlLogo
	}
	return ""
}

func (x *CMsgDOTAPlayerInfo) GetAuditEntries() []*CMsgDOTAPlayerInfo_AuditEntry {
	if x != nil {
		return x.AuditEntries
	}
	return nil
}

func (x *CMsgDOTAPlayerInfo) GetTeamAbbreviation() string {
	if x != nil && x.TeamAbbreviation != nil {
		return *x.TeamAbbreviation
	}
	return ""
}

type CMsgDOTAPlayerInfoList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerInfos []*CMsgDOTAPlayerInfo `protobuf:"bytes,1,rep,name=player_infos,json=playerInfos" json:"player_infos,omitempty"`
}

func (x *CMsgDOTAPlayerInfoList) Reset() {
	*x = CMsgDOTAPlayerInfoList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAPlayerInfoList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAPlayerInfoList) ProtoMessage() {}

func (x *CMsgDOTAPlayerInfoList) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAPlayerInfoList.ProtoReflect.Descriptor instead.
func (*CMsgDOTAPlayerInfoList) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{1}
}

func (x *CMsgDOTAPlayerInfoList) GetPlayerInfos() []*CMsgDOTAPlayerInfo {
	if x != nil {
		return x.PlayerInfos
	}
	return nil
}

type CMsgDOTATeamRoster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp        *uint32  `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	TeamId           *uint32  `protobuf:"varint,2,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	MemberAccountIds []uint32 `protobuf:"varint,3,rep,name=member_account_ids,json=memberAccountIds" json:"member_account_ids,omitempty"`
	CoachAccountId   *uint32  `protobuf:"varint,4,opt,name=coach_account_id,json=coachAccountId" json:"coach_account_id,omitempty"`
}

func (x *CMsgDOTATeamRoster) Reset() {
	*x = CMsgDOTATeamRoster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTATeamRoster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTATeamRoster) ProtoMessage() {}

func (x *CMsgDOTATeamRoster) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTATeamRoster.ProtoReflect.Descriptor instead.
func (*CMsgDOTATeamRoster) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{2}
}

func (x *CMsgDOTATeamRoster) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *CMsgDOTATeamRoster) GetTeamId() uint32 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

func (x *CMsgDOTATeamRoster) GetMemberAccountIds() []uint32 {
	if x != nil {
		return x.MemberAccountIds
	}
	return nil
}

func (x *CMsgDOTATeamRoster) GetCoachAccountId() uint32 {
	if x != nil && x.CoachAccountId != nil {
		return *x.CoachAccountId
	}
	return 0
}

type CMsgDOTADPCProfileInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerInfo            *CMsgDOTAPlayerInfo                    `protobuf:"bytes,1,opt,name=player_info,json=playerInfo" json:"player_info,omitempty"`
	PredictionInfo        *CMsgDOTADPCProfileInfo_PredictionInfo `protobuf:"bytes,2,opt,name=prediction_info,json=predictionInfo" json:"prediction_info,omitempty"`
	FantasyInfo           *CMsgDOTADPCProfileInfo_FantasyInfo    `protobuf:"bytes,3,opt,name=fantasy_info,json=fantasyInfo" json:"fantasy_info,omitempty"`
	DisabledNotifications []uint32                               `protobuf:"varint,4,rep,name=disabled_notifications,json=disabledNotifications" json:"disabled_notifications,omitempty"`
}

func (x *CMsgDOTADPCProfileInfo) Reset() {
	*x = CMsgDOTADPCProfileInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTADPCProfileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTADPCProfileInfo) ProtoMessage() {}

func (x *CMsgDOTADPCProfileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTADPCProfileInfo.ProtoReflect.Descriptor instead.
func (*CMsgDOTADPCProfileInfo) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{3}
}

func (x *CMsgDOTADPCProfileInfo) GetPlayerInfo() *CMsgDOTAPlayerInfo {
	if x != nil {
		return x.PlayerInfo
	}
	return nil
}

func (x *CMsgDOTADPCProfileInfo) GetPredictionInfo() *CMsgDOTADPCProfileInfo_PredictionInfo {
	if x != nil {
		return x.PredictionInfo
	}
	return nil
}

func (x *CMsgDOTADPCProfileInfo) GetFantasyInfo() *CMsgDOTADPCProfileInfo_FantasyInfo {
	if x != nil {
		return x.FantasyInfo
	}
	return nil
}

func (x *CMsgDOTADPCProfileInfo) GetDisabledNotifications() []uint32 {
	if x != nil {
		return x.DisabledNotifications
	}
	return nil
}

type CMsgDOTALeaderboards struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Leaderboards []*CMsgDOTALeaderboards_RegionLeaderboard `protobuf:"bytes,2,rep,name=leaderboards" json:"leaderboards,omitempty"`
}

func (x *CMsgDOTALeaderboards) Reset() {
	*x = CMsgDOTALeaderboards{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTALeaderboards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTALeaderboards) ProtoMessage() {}

func (x *CMsgDOTALeaderboards) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTALeaderboards.ProtoReflect.Descriptor instead.
func (*CMsgDOTALeaderboards) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{4}
}

func (x *CMsgDOTALeaderboards) GetLeaderboards() []*CMsgDOTALeaderboards_RegionLeaderboard {
	if x != nil {
		return x.Leaderboards
	}
	return nil
}

type CMsgDOTAPassportVoteTeamGuess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeagueId   *uint32 `protobuf:"varint,1,opt,name=league_id,json=leagueId" json:"league_id,omitempty"`
	WinnerId   *uint32 `protobuf:"varint,2,opt,name=winner_id,json=winnerId" json:"winner_id,omitempty"`
	RunnerupId *uint32 `protobuf:"varint,3,opt,name=runnerup_id,json=runnerupId" json:"runnerup_id,omitempty"`
}

func (x *CMsgDOTAPassportVoteTeamGuess) Reset() {
	*x = CMsgDOTAPassportVoteTeamGuess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAPassportVoteTeamGuess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAPassportVoteTeamGuess) ProtoMessage() {}

func (x *CMsgDOTAPassportVoteTeamGuess) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAPassportVoteTeamGuess.ProtoReflect.Descriptor instead.
func (*CMsgDOTAPassportVoteTeamGuess) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{5}
}

func (x *CMsgDOTAPassportVoteTeamGuess) GetLeagueId() uint32 {
	if x != nil && x.LeagueId != nil {
		return *x.LeagueId
	}
	return 0
}

func (x *CMsgDOTAPassportVoteTeamGuess) GetWinnerId() uint32 {
	if x != nil && x.WinnerId != nil {
		return *x.WinnerId
	}
	return 0
}

func (x *CMsgDOTAPassportVoteTeamGuess) GetRunnerupId() uint32 {
	if x != nil && x.RunnerupId != nil {
		return *x.RunnerupId
	}
	return 0
}

type CMsgDOTAPassportVoteGenericSelection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelectionIndex *DOTA_2013PassportSelectionIndices `protobuf:"varint,1,opt,name=selection_index,json=selectionIndex,enum=dota.DOTA_2013PassportSelectionIndices" json:"selection_index,omitempty"`
	Selection      *uint32                            `protobuf:"varint,2,opt,name=selection" json:"selection,omitempty"`
}

func (x *CMsgDOTAPassportVoteGenericSelection) Reset() {
	*x = CMsgDOTAPassportVoteGenericSelection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAPassportVoteGenericSelection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAPassportVoteGenericSelection) ProtoMessage() {}

func (x *CMsgDOTAPassportVoteGenericSelection) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAPassportVoteGenericSelection.ProtoReflect.Descriptor instead.
func (*CMsgDOTAPassportVoteGenericSelection) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{6}
}

func (x *CMsgDOTAPassportVoteGenericSelection) GetSelectionIndex() DOTA_2013PassportSelectionIndices {
	if x != nil && x.SelectionIndex != nil {
		return *x.SelectionIndex
	}
	return DOTA_2013PassportSelectionIndices_PP13_SEL_ALLSTAR_PLAYER_0
}

func (x *CMsgDOTAPassportVoteGenericSelection) GetSelection() uint32 {
	if x != nil && x.Selection != nil {
		return *x.Selection
	}
	return 0
}

type CMsgDOTAPassportStampedPlayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SteamId    *uint64 `protobuf:"varint,1,opt,name=steam_id,json=steamId" json:"steam_id,omitempty"`
	StampLevel *uint32 `protobuf:"varint,2,opt,name=stamp_level,json=stampLevel" json:"stamp_level,omitempty"`
}

func (x *CMsgDOTAPassportStampedPlayer) Reset() {
	*x = CMsgDOTAPassportStampedPlayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAPassportStampedPlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAPassportStampedPlayer) ProtoMessage() {}

func (x *CMsgDOTAPassportStampedPlayer) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAPassportStampedPlayer.ProtoReflect.Descriptor instead.
func (*CMsgDOTAPassportStampedPlayer) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{7}
}

func (x *CMsgDOTAPassportStampedPlayer) GetSteamId() uint64 {
	if x != nil && x.SteamId != nil {
		return *x.SteamId
	}
	return 0
}

func (x *CMsgDOTAPassportStampedPlayer) GetStampLevel() uint32 {
	if x != nil && x.StampLevel != nil {
		return *x.StampLevel
	}
	return 0
}

type CMsgDOTAPassportPlayerCardChallenge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChallengeId *uint32 `protobuf:"varint,1,opt,name=challenge_id,json=challengeId" json:"challenge_id,omitempty"`
}

func (x *CMsgDOTAPassportPlayerCardChallenge) Reset() {
	*x = CMsgDOTAPassportPlayerCardChallenge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAPassportPlayerCardChallenge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAPassportPlayerCardChallenge) ProtoMessage() {}

func (x *CMsgDOTAPassportPlayerCardChallenge) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAPassportPlayerCardChallenge.ProtoReflect.Descriptor instead.
func (*CMsgDOTAPassportPlayerCardChallenge) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{8}
}

func (x *CMsgDOTAPassportPlayerCardChallenge) GetChallengeId() uint32 {
	if x != nil && x.ChallengeId != nil {
		return *x.ChallengeId
	}
	return 0
}

type CMsgDOTAPassportVote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamVotes            []*CMsgDOTAPassportVoteTeamGuess        `protobuf:"bytes,1,rep,name=team_votes,json=teamVotes" json:"team_votes,omitempty"`
	GenericSelections    []*CMsgDOTAPassportVoteGenericSelection `protobuf:"bytes,2,rep,name=generic_selections,json=genericSelections" json:"generic_selections,omitempty"`
	StampedPlayers       []*CMsgDOTAPassportStampedPlayer        `protobuf:"bytes,3,rep,name=stamped_players,json=stampedPlayers" json:"stamped_players,omitempty"`
	PlayerCardChallenges []*CMsgDOTAPassportPlayerCardChallenge  `protobuf:"bytes,4,rep,name=player_card_challenges,json=playerCardChallenges" json:"player_card_challenges,omitempty"`
}

func (x *CMsgDOTAPassportVote) Reset() {
	*x = CMsgDOTAPassportVote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAPassportVote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAPassportVote) ProtoMessage() {}

func (x *CMsgDOTAPassportVote) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAPassportVote.ProtoReflect.Descriptor instead.
func (*CMsgDOTAPassportVote) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{9}
}

func (x *CMsgDOTAPassportVote) GetTeamVotes() []*CMsgDOTAPassportVoteTeamGuess {
	if x != nil {
		return x.TeamVotes
	}
	return nil
}

func (x *CMsgDOTAPassportVote) GetGenericSelections() []*CMsgDOTAPassportVoteGenericSelection {
	if x != nil {
		return x.GenericSelections
	}
	return nil
}

func (x *CMsgDOTAPassportVote) GetStampedPlayers() []*CMsgDOTAPassportStampedPlayer {
	if x != nil {
		return x.StampedPlayers
	}
	return nil
}

func (x *CMsgDOTAPassportVote) GetPlayerCardChallenges() []*CMsgDOTAPassportPlayerCardChallenge {
	if x != nil {
		return x.PlayerCardChallenges
	}
	return nil
}

type CMsgClientToGCGetPlayerCardRosterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeagueId      *uint32 `protobuf:"varint,1,opt,name=league_id,json=leagueId" json:"league_id,omitempty"`
	FantasyPeriod *uint32 `protobuf:"varint,3,opt,name=fantasy_period,json=fantasyPeriod" json:"fantasy_period,omitempty"`
}

func (x *CMsgClientToGCGetPlayerCardRosterRequest) Reset() {
	*x = CMsgClientToGCGetPlayerCardRosterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCGetPlayerCardRosterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCGetPlayerCardRosterRequest) ProtoMessage() {}

func (x *CMsgClientToGCGetPlayerCardRosterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCGetPlayerCardRosterRequest.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCGetPlayerCardRosterRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{10}
}

func (x *CMsgClientToGCGetPlayerCardRosterRequest) GetLeagueId() uint32 {
	if x != nil && x.LeagueId != nil {
		return *x.LeagueId
	}
	return 0
}

func (x *CMsgClientToGCGetPlayerCardRosterRequest) GetFantasyPeriod() uint32 {
	if x != nil && x.FantasyPeriod != nil {
		return *x.FantasyPeriod
	}
	return 0
}

type CMsgClientToGCGetPlayerCardRosterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result           *CMsgClientToGCGetPlayerCardRosterResponse_Result `protobuf:"varint,1,opt,name=result,enum=dota.CMsgClientToGCGetPlayerCardRosterResponse_Result" json:"result,omitempty"`
	PlayerCardItemId []uint64                                          `protobuf:"varint,2,rep,name=player_card_item_id,json=playerCardItemId" json:"player_card_item_id,omitempty"`
	Score            *float32                                          `protobuf:"fixed32,3,opt,name=score" json:"score,omitempty"`
	Finalized        *bool                                             `protobuf:"varint,4,opt,name=finalized" json:"finalized,omitempty"`
	Percentile       *float32                                          `protobuf:"fixed32,5,opt,name=percentile" json:"percentile,omitempty"`
}

func (x *CMsgClientToGCGetPlayerCardRosterResponse) Reset() {
	*x = CMsgClientToGCGetPlayerCardRosterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCGetPlayerCardRosterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCGetPlayerCardRosterResponse) ProtoMessage() {}

func (x *CMsgClientToGCGetPlayerCardRosterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCGetPlayerCardRosterResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCGetPlayerCardRosterResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{11}
}

func (x *CMsgClientToGCGetPlayerCardRosterResponse) GetResult() CMsgClientToGCGetPlayerCardRosterResponse_Result {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return CMsgClientToGCGetPlayerCardRosterResponse_SUCCESS
}

func (x *CMsgClientToGCGetPlayerCardRosterResponse) GetPlayerCardItemId() []uint64 {
	if x != nil {
		return x.PlayerCardItemId
	}
	return nil
}

func (x *CMsgClientToGCGetPlayerCardRosterResponse) GetScore() float32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

func (x *CMsgClientToGCGetPlayerCardRosterResponse) GetFinalized() bool {
	if x != nil && x.Finalized != nil {
		return *x.Finalized
	}
	return false
}

func (x *CMsgClientToGCGetPlayerCardRosterResponse) GetPercentile() float32 {
	if x != nil && x.Percentile != nil {
		return *x.Percentile
	}
	return 0
}

type CMsgClientToGCBatchGetPlayerCardRosterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeagueTimestamps []*CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp `protobuf:"bytes,1,rep,name=league_timestamps,json=leagueTimestamps" json:"league_timestamps,omitempty"`
}

func (x *CMsgClientToGCBatchGetPlayerCardRosterRequest) Reset() {
	*x = CMsgClientToGCBatchGetPlayerCardRosterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCBatchGetPlayerCardRosterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCBatchGetPlayerCardRosterRequest) ProtoMessage() {}

func (x *CMsgClientToGCBatchGetPlayerCardRosterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCBatchGetPlayerCardRosterRequest.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCBatchGetPlayerCardRosterRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{12}
}

func (x *CMsgClientToGCBatchGetPlayerCardRosterRequest) GetLeagueTimestamps() []*CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp {
	if x != nil {
		return x.LeagueTimestamps
	}
	return nil
}

type CMsgClientToGCBatchGetPlayerCardRosterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Responses []*CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse `protobuf:"bytes,1,rep,name=responses" json:"responses,omitempty"`
}

func (x *CMsgClientToGCBatchGetPlayerCardRosterResponse) Reset() {
	*x = CMsgClientToGCBatchGetPlayerCardRosterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCBatchGetPlayerCardRosterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCBatchGetPlayerCardRosterResponse) ProtoMessage() {}

func (x *CMsgClientToGCBatchGetPlayerCardRosterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCBatchGetPlayerCardRosterResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCBatchGetPlayerCardRosterResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{13}
}

func (x *CMsgClientToGCBatchGetPlayerCardRosterResponse) GetResponses() []*CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

type CMsgClientToGCSetPlayerCardRosterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeagueId            *uint32 `protobuf:"varint,1,opt,name=league_id,json=leagueId" json:"league_id,omitempty"`
	DeprecatedTimestamp *uint32 `protobuf:"varint,2,opt,name=deprecated_timestamp,json=deprecatedTimestamp" json:"deprecated_timestamp,omitempty"`
	Slot                *uint32 `protobuf:"varint,3,opt,name=slot" json:"slot,omitempty"`
	PlayerCardItemId    *uint64 `protobuf:"varint,4,opt,name=player_card_item_id,json=playerCardItemId" json:"player_card_item_id,omitempty"`
	EventId             *uint32 `protobuf:"varint,5,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	FantasyPeriod       *uint32 `protobuf:"varint,6,opt,name=fantasy_period,json=fantasyPeriod" json:"fantasy_period,omitempty"`
}

func (x *CMsgClientToGCSetPlayerCardRosterRequest) Reset() {
	*x = CMsgClientToGCSetPlayerCardRosterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCSetPlayerCardRosterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCSetPlayerCardRosterRequest) ProtoMessage() {}

func (x *CMsgClientToGCSetPlayerCardRosterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCSetPlayerCardRosterRequest.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCSetPlayerCardRosterRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{14}
}

func (x *CMsgClientToGCSetPlayerCardRosterRequest) GetLeagueId() uint32 {
	if x != nil && x.LeagueId != nil {
		return *x.LeagueId
	}
	return 0
}

func (x *CMsgClientToGCSetPlayerCardRosterRequest) GetDeprecatedTimestamp() uint32 {
	if x != nil && x.DeprecatedTimestamp != nil {
		return *x.DeprecatedTimestamp
	}
	return 0
}

func (x *CMsgClientToGCSetPlayerCardRosterRequest) GetSlot() uint32 {
	if x != nil && x.Slot != nil {
		return *x.Slot
	}
	return 0
}

func (x *CMsgClientToGCSetPlayerCardRosterRequest) GetPlayerCardItemId() uint64 {
	if x != nil && x.PlayerCardItemId != nil {
		return *x.PlayerCardItemId
	}
	return 0
}

func (x *CMsgClientToGCSetPlayerCardRosterRequest) GetEventId() uint32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

func (x *CMsgClientToGCSetPlayerCardRosterRequest) GetFantasyPeriod() uint32 {
	if x != nil && x.FantasyPeriod != nil {
		return *x.FantasyPeriod
	}
	return 0
}

type CMsgClientToGCSetPlayerCardRosterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *CMsgClientToGCSetPlayerCardRosterResponse_Result `protobuf:"varint,1,opt,name=result,enum=dota.CMsgClientToGCSetPlayerCardRosterResponse_Result" json:"result,omitempty"`
}

func (x *CMsgClientToGCSetPlayerCardRosterResponse) Reset() {
	*x = CMsgClientToGCSetPlayerCardRosterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCSetPlayerCardRosterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCSetPlayerCardRosterResponse) ProtoMessage() {}

func (x *CMsgClientToGCSetPlayerCardRosterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCSetPlayerCardRosterResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCSetPlayerCardRosterResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{15}
}

func (x *CMsgClientToGCSetPlayerCardRosterResponse) GetResult() CMsgClientToGCSetPlayerCardRosterResponse_Result {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return CMsgClientToGCSetPlayerCardRosterResponse_SUCCESS
}

type CMsgDOTAFantasyDPCLeagueStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeagueInfos []*CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo `protobuf:"bytes,1,rep,name=league_infos,json=leagueInfos" json:"league_infos,omitempty"`
}

func (x *CMsgDOTAFantasyDPCLeagueStatus) Reset() {
	*x = CMsgDOTAFantasyDPCLeagueStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAFantasyDPCLeagueStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAFantasyDPCLeagueStatus) ProtoMessage() {}

func (x *CMsgDOTAFantasyDPCLeagueStatus) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAFantasyDPCLeagueStatus.ProtoReflect.Descriptor instead.
func (*CMsgDOTAFantasyDPCLeagueStatus) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{16}
}

func (x *CMsgDOTAFantasyDPCLeagueStatus) GetLeagueInfos() []*CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo {
	if x != nil {
		return x.LeagueInfos
	}
	return nil
}

type CMsgDOTADPCSearchResults struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Players []*CMsgDOTADPCSearchResults_Player `protobuf:"bytes,1,rep,name=players" json:"players,omitempty"`
	Teams   []*CMsgDOTADPCSearchResults_Team   `protobuf:"bytes,2,rep,name=teams" json:"teams,omitempty"`
	Leagues []*CMsgDOTADPCSearchResults_League `protobuf:"bytes,3,rep,name=leagues" json:"leagues,omitempty"`
}

func (x *CMsgDOTADPCSearchResults) Reset() {
	*x = CMsgDOTADPCSearchResults{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTADPCSearchResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTADPCSearchResults) ProtoMessage() {}

func (x *CMsgDOTADPCSearchResults) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTADPCSearchResults.ProtoReflect.Descriptor instead.
func (*CMsgDOTADPCSearchResults) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{17}
}

func (x *CMsgDOTADPCSearchResults) GetPlayers() []*CMsgDOTADPCSearchResults_Player {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *CMsgDOTADPCSearchResults) GetTeams() []*CMsgDOTADPCSearchResults_Team {
	if x != nil {
		return x.Teams
	}
	return nil
}

func (x *CMsgDOTADPCSearchResults) GetLeagues() []*CMsgDOTADPCSearchResults_League {
	if x != nil {
		return x.Leagues
	}
	return nil
}

type CMsgDOTADPCTeamFavoriteRankings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Teams []*CMsgDOTADPCTeamFavoriteRankings_Team `protobuf:"bytes,1,rep,name=teams" json:"teams,omitempty"`
}

func (x *CMsgDOTADPCTeamFavoriteRankings) Reset() {
	*x = CMsgDOTADPCTeamFavoriteRankings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTADPCTeamFavoriteRankings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTADPCTeamFavoriteRankings) ProtoMessage() {}

func (x *CMsgDOTADPCTeamFavoriteRankings) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTADPCTeamFavoriteRankings.ProtoReflect.Descriptor instead.
func (*CMsgDOTADPCTeamFavoriteRankings) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{18}
}

func (x *CMsgDOTADPCTeamFavoriteRankings) GetTeams() []*CMsgDOTADPCTeamFavoriteRankings_Team {
	if x != nil {
		return x.Teams
	}
	return nil
}

type CMsgDotaFantasyCraftingTabletPeriodData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FantasyPeriod *uint32                                           `protobuf:"varint,1,opt,name=fantasy_period,json=fantasyPeriod" json:"fantasy_period,omitempty"`
	Tablets       []*CMsgDotaFantasyCraftingTabletPeriodData_Tablet `protobuf:"bytes,2,rep,name=tablets" json:"tablets,omitempty"`
}

func (x *CMsgDotaFantasyCraftingTabletPeriodData) Reset() {
	*x = CMsgDotaFantasyCraftingTabletPeriodData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDotaFantasyCraftingTabletPeriodData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDotaFantasyCraftingTabletPeriodData) ProtoMessage() {}

func (x *CMsgDotaFantasyCraftingTabletPeriodData) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDotaFantasyCraftingTabletPeriodData.ProtoReflect.Descriptor instead.
func (*CMsgDotaFantasyCraftingTabletPeriodData) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{19}
}

func (x *CMsgDotaFantasyCraftingTabletPeriodData) GetFantasyPeriod() uint32 {
	if x != nil && x.FantasyPeriod != nil {
		return *x.FantasyPeriod
	}
	return 0
}

func (x *CMsgDotaFantasyCraftingTabletPeriodData) GetTablets() []*CMsgDotaFantasyCraftingTabletPeriodData_Tablet {
	if x != nil {
		return x.Tablets
	}
	return nil
}

type CMsgDotaFantasyCraftingTabletData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TabletPeriodData []*CMsgDotaFantasyCraftingTabletData_TabletPeriodDataEntry `protobuf:"bytes,1,rep,name=tablet_period_data,json=tabletPeriodData" json:"tablet_period_data,omitempty"`
}

func (x *CMsgDotaFantasyCraftingTabletData) Reset() {
	*x = CMsgDotaFantasyCraftingTabletData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDotaFantasyCraftingTabletData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDotaFantasyCraftingTabletData) ProtoMessage() {}

func (x *CMsgDotaFantasyCraftingTabletData) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDotaFantasyCraftingTabletData.ProtoReflect.Descriptor instead.
func (*CMsgDotaFantasyCraftingTabletData) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{20}
}

func (x *CMsgDotaFantasyCraftingTabletData) GetTabletPeriodData() []*CMsgDotaFantasyCraftingTabletData_TabletPeriodDataEntry {
	if x != nil {
		return x.TabletPeriodData
	}
	return nil
}

type CMsgDotaFantasyCraftingUserData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvailableRolls   []uint32                                                 `protobuf:"varint,1,rep,name=available_rolls,json=availableRolls" json:"available_rolls,omitempty"`
	PeriodRollTokens []*CMsgDotaFantasyCraftingUserData_PeriodRollTokensEntry `protobuf:"bytes,2,rep,name=period_roll_tokens,json=periodRollTokens" json:"period_roll_tokens,omitempty"`
	PeriodScores     []*CMsgDotaFantasyCraftingUserData_PeriodScoresEntry     `protobuf:"bytes,3,rep,name=period_scores,json=periodScores" json:"period_scores,omitempty"`
}

func (x *CMsgDotaFantasyCraftingUserData) Reset() {
	*x = CMsgDotaFantasyCraftingUserData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDotaFantasyCraftingUserData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDotaFantasyCraftingUserData) ProtoMessage() {}

func (x *CMsgDotaFantasyCraftingUserData) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDotaFantasyCraftingUserData.ProtoReflect.Descriptor instead.
func (*CMsgDotaFantasyCraftingUserData) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{21}
}

func (x *CMsgDotaFantasyCraftingUserData) GetAvailableRolls() []uint32 {
	if x != nil {
		return x.AvailableRolls
	}
	return nil
}

func (x *CMsgDotaFantasyCraftingUserData) GetPeriodRollTokens() []*CMsgDotaFantasyCraftingUserData_PeriodRollTokensEntry {
	if x != nil {
		return x.PeriodRollTokens
	}
	return nil
}

func (x *CMsgDotaFantasyCraftingUserData) GetPeriodScores() []*CMsgDotaFantasyCraftingUserData_PeriodScoresEntry {
	if x != nil {
		return x.PeriodScores
	}
	return nil
}

type CMsgDotaFantasyCraftingDataCache struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CacheEntries []*CMsgDotaFantasyCraftingDataCache_CacheEntry `protobuf:"bytes,1,rep,name=cache_entries,json=cacheEntries" json:"cache_entries,omitempty"`
}

func (x *CMsgDotaFantasyCraftingDataCache) Reset() {
	*x = CMsgDotaFantasyCraftingDataCache{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDotaFantasyCraftingDataCache) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDotaFantasyCraftingDataCache) ProtoMessage() {}

func (x *CMsgDotaFantasyCraftingDataCache) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDotaFantasyCraftingDataCache.ProtoReflect.Descriptor instead.
func (*CMsgDotaFantasyCraftingDataCache) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{22}
}

func (x *CMsgDotaFantasyCraftingDataCache) GetCacheEntries() []*CMsgDotaFantasyCraftingDataCache_CacheEntry {
	if x != nil {
		return x.CacheEntries
	}
	return nil
}

type CMsgClientToGCFantasyCraftingGetData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FantasyLeague *uint32 `protobuf:"varint,1,opt,name=fantasy_league,json=fantasyLeague" json:"fantasy_league,omitempty"`
	AccountId     *uint32 `protobuf:"varint,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
}

func (x *CMsgClientToGCFantasyCraftingGetData) Reset() {
	*x = CMsgClientToGCFantasyCraftingGetData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCFantasyCraftingGetData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCFantasyCraftingGetData) ProtoMessage() {}

func (x *CMsgClientToGCFantasyCraftingGetData) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCFantasyCraftingGetData.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCFantasyCraftingGetData) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{23}
}

func (x *CMsgClientToGCFantasyCraftingGetData) GetFantasyLeague() uint32 {
	if x != nil && x.FantasyLeague != nil {
		return *x.FantasyLeague
	}
	return 0
}

func (x *CMsgClientToGCFantasyCraftingGetData) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

type CMsgClientToGCFantasyCraftingGetDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response   *CMsgClientToGCFantasyCraftingGetDataResponse_EResponse `protobuf:"varint,1,opt,name=response,enum=dota.CMsgClientToGCFantasyCraftingGetDataResponse_EResponse" json:"response,omitempty"`
	UserData   *CMsgDotaFantasyCraftingUserData                        `protobuf:"bytes,2,opt,name=user_data,json=userData" json:"user_data,omitempty"`
	TabletData *CMsgDotaFantasyCraftingTabletData                      `protobuf:"bytes,4,opt,name=tablet_data,json=tabletData" json:"tablet_data,omitempty"`
}

func (x *CMsgClientToGCFantasyCraftingGetDataResponse) Reset() {
	*x = CMsgClientToGCFantasyCraftingGetDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCFantasyCraftingGetDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCFantasyCraftingGetDataResponse) ProtoMessage() {}

func (x *CMsgClientToGCFantasyCraftingGetDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCFantasyCraftingGetDataResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCFantasyCraftingGetDataResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{24}
}

func (x *CMsgClientToGCFantasyCraftingGetDataResponse) GetResponse() CMsgClientToGCFantasyCraftingGetDataResponse_EResponse {
	if x != nil && x.Response != nil {
		return *x.Response
	}
	return CMsgClientToGCFantasyCraftingGetDataResponse_k_eInternalError
}

func (x *CMsgClientToGCFantasyCraftingGetDataResponse) GetUserData() *CMsgDotaFantasyCraftingUserData {
	if x != nil {
		return x.UserData
	}
	return nil
}

func (x *CMsgClientToGCFantasyCraftingGetDataResponse) GetTabletData() *CMsgDotaFantasyCraftingTabletData {
	if x != nil {
		return x.TabletData
	}
	return nil
}

type CMsgClientToGCFantasyCraftingPerformOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FantasyLeague *uint32 `protobuf:"varint,1,opt,name=fantasy_league,json=fantasyLeague" json:"fantasy_league,omitempty"`
	TabletId      *uint32 `protobuf:"varint,2,opt,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	OperationId   *uint32 `protobuf:"varint,3,opt,name=operation_id,json=operationId" json:"operation_id,omitempty"`
	ExtraData     *uint64 `protobuf:"varint,4,opt,name=extra_data,json=extraData" json:"extra_data,omitempty"`
}

func (x *CMsgClientToGCFantasyCraftingPerformOperation) Reset() {
	*x = CMsgClientToGCFantasyCraftingPerformOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCFantasyCraftingPerformOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCFantasyCraftingPerformOperation) ProtoMessage() {}

func (x *CMsgClientToGCFantasyCraftingPerformOperation) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCFantasyCraftingPerformOperation.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCFantasyCraftingPerformOperation) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{25}
}

func (x *CMsgClientToGCFantasyCraftingPerformOperation) GetFantasyLeague() uint32 {
	if x != nil && x.FantasyLeague != nil {
		return *x.FantasyLeague
	}
	return 0
}

func (x *CMsgClientToGCFantasyCraftingPerformOperation) GetTabletId() uint32 {
	if x != nil && x.TabletId != nil {
		return *x.TabletId
	}
	return 0
}

func (x *CMsgClientToGCFantasyCraftingPerformOperation) GetOperationId() uint32 {
	if x != nil && x.OperationId != nil {
		return *x.OperationId
	}
	return 0
}

func (x *CMsgClientToGCFantasyCraftingPerformOperation) GetExtraData() uint64 {
	if x != nil && x.ExtraData != nil {
		return *x.ExtraData
	}
	return 0
}

type CMsgClientToGCFantasyCraftingPerformOperationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response      *CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse     `protobuf:"varint,1,opt,name=response,enum=dota.CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse" json:"response,omitempty"`
	OperationId   *uint32                                                              `protobuf:"varint,2,opt,name=operation_id,json=operationId" json:"operation_id,omitempty"`
	TabletId      *uint32                                                              `protobuf:"varint,7,opt,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	UserData      *CMsgDotaFantasyCraftingUserData                                     `protobuf:"bytes,8,opt,name=user_data,json=userData" json:"user_data,omitempty"`
	TabletData    *CMsgDotaFantasyCraftingTabletData                                   `protobuf:"bytes,9,opt,name=tablet_data,json=tabletData" json:"tablet_data,omitempty"`
	PlayerChoices []uint32                                                             `protobuf:"varint,3,rep,name=player_choices,json=playerChoices" json:"player_choices,omitempty"`
	PrefixChoices []uint32                                                             `protobuf:"varint,4,rep,name=prefix_choices,json=prefixChoices" json:"prefix_choices,omitempty"`
	SuffixChoices []uint32                                                             `protobuf:"varint,5,rep,name=suffix_choices,json=suffixChoices" json:"suffix_choices,omitempty"`
	TitleChoices  []*CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice `protobuf:"bytes,6,rep,name=title_choices,json=titleChoices" json:"title_choices,omitempty"`
}

func (x *CMsgClientToGCFantasyCraftingPerformOperationResponse) Reset() {
	*x = CMsgClientToGCFantasyCraftingPerformOperationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCFantasyCraftingPerformOperationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCFantasyCraftingPerformOperationResponse) ProtoMessage() {}

func (x *CMsgClientToGCFantasyCraftingPerformOperationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCFantasyCraftingPerformOperationResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCFantasyCraftingPerformOperationResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{26}
}

func (x *CMsgClientToGCFantasyCraftingPerformOperationResponse) GetResponse() CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse {
	if x != nil && x.Response != nil {
		return *x.Response
	}
	return CMsgClientToGCFantasyCraftingPerformOperationResponse_k_eInternalError
}

func (x *CMsgClientToGCFantasyCraftingPerformOperationResponse) GetOperationId() uint32 {
	if x != nil && x.OperationId != nil {
		return *x.OperationId
	}
	return 0
}

func (x *CMsgClientToGCFantasyCraftingPerformOperationResponse) GetTabletId() uint32 {
	if x != nil && x.TabletId != nil {
		return *x.TabletId
	}
	return 0
}

func (x *CMsgClientToGCFantasyCraftingPerformOperationResponse) GetUserData() *CMsgDotaFantasyCraftingUserData {
	if x != nil {
		return x.UserData
	}
	return nil
}

func (x *CMsgClientToGCFantasyCraftingPerformOperationResponse) GetTabletData() *CMsgDotaFantasyCraftingTabletData {
	if x != nil {
		return x.TabletData
	}
	return nil
}

func (x *CMsgClientToGCFantasyCraftingPerformOperationResponse) GetPlayerChoices() []uint32 {
	if x != nil {
		return x.PlayerChoices
	}
	return nil
}

func (x *CMsgClientToGCFantasyCraftingPerformOperationResponse) GetPrefixChoices() []uint32 {
	if x != nil {
		return x.PrefixChoices
	}
	return nil
}

func (x *CMsgClientToGCFantasyCraftingPerformOperationResponse) GetSuffixChoices() []uint32 {
	if x != nil {
		return x.SuffixChoices
	}
	return nil
}

func (x *CMsgClientToGCFantasyCraftingPerformOperationResponse) GetTitleChoices() []*CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice {
	if x != nil {
		return x.TitleChoices
	}
	return nil
}

type CMsgGCToClientFantasyCraftingDataUpdated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FantasyLeague *uint32                            `protobuf:"varint,1,opt,name=fantasy_league,json=fantasyLeague" json:"fantasy_league,omitempty"`
	UserData      *CMsgDotaFantasyCraftingUserData   `protobuf:"bytes,2,opt,name=user_data,json=userData" json:"user_data,omitempty"`
	TabletData    *CMsgDotaFantasyCraftingTabletData `protobuf:"bytes,4,opt,name=tablet_data,json=tabletData" json:"tablet_data,omitempty"`
}

func (x *CMsgGCToClientFantasyCraftingDataUpdated) Reset() {
	*x = CMsgGCToClientFantasyCraftingDataUpdated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCToClientFantasyCraftingDataUpdated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientFantasyCraftingDataUpdated) ProtoMessage() {}

func (x *CMsgGCToClientFantasyCraftingDataUpdated) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientFantasyCraftingDataUpdated.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientFantasyCraftingDataUpdated) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{27}
}

func (x *CMsgGCToClientFantasyCraftingDataUpdated) GetFantasyLeague() uint32 {
	if x != nil && x.FantasyLeague != nil {
		return *x.FantasyLeague
	}
	return 0
}

func (x *CMsgGCToClientFantasyCraftingDataUpdated) GetUserData() *CMsgDotaFantasyCraftingUserData {
	if x != nil {
		return x.UserData
	}
	return nil
}

func (x *CMsgGCToClientFantasyCraftingDataUpdated) GetTabletData() *CMsgDotaFantasyCraftingTabletData {
	if x != nil {
		return x.TabletData
	}
	return nil
}

type CMsgClientToGCFantasyCraftingDevModifyTablet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FantasyLeague  *uint32 `protobuf:"varint,1,opt,name=fantasy_league,json=fantasyLeague" json:"fantasy_league,omitempty"`
	ResetTablet    *bool   `protobuf:"varint,2,opt,name=reset_tablet,json=resetTablet" json:"reset_tablet,omitempty"`
	ModifyTokens   *uint32 `protobuf:"varint,3,opt,name=modify_tokens,json=modifyTokens" json:"modify_tokens,omitempty"`
	UpgradeTablets *bool   `protobuf:"varint,6,opt,name=upgrade_tablets,json=upgradeTablets" json:"upgrade_tablets,omitempty"`
	FantasyPeriod  *uint32 `protobuf:"varint,5,opt,name=fantasy_period,json=fantasyPeriod" json:"fantasy_period,omitempty"`
}

func (x *CMsgClientToGCFantasyCraftingDevModifyTablet) Reset() {
	*x = CMsgClientToGCFantasyCraftingDevModifyTablet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCFantasyCraftingDevModifyTablet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCFantasyCraftingDevModifyTablet) ProtoMessage() {}

func (x *CMsgClientToGCFantasyCraftingDevModifyTablet) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCFantasyCraftingDevModifyTablet.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCFantasyCraftingDevModifyTablet) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{28}
}

func (x *CMsgClientToGCFantasyCraftingDevModifyTablet) GetFantasyLeague() uint32 {
	if x != nil && x.FantasyLeague != nil {
		return *x.FantasyLeague
	}
	return 0
}

func (x *CMsgClientToGCFantasyCraftingDevModifyTablet) GetResetTablet() bool {
	if x != nil && x.ResetTablet != nil {
		return *x.ResetTablet
	}
	return false
}

func (x *CMsgClientToGCFantasyCraftingDevModifyTablet) GetModifyTokens() uint32 {
	if x != nil && x.ModifyTokens != nil {
		return *x.ModifyTokens
	}
	return 0
}

func (x *CMsgClientToGCFantasyCraftingDevModifyTablet) GetUpgradeTablets() bool {
	if x != nil && x.UpgradeTablets != nil {
		return *x.UpgradeTablets
	}
	return false
}

func (x *CMsgClientToGCFantasyCraftingDevModifyTablet) GetFantasyPeriod() uint32 {
	if x != nil && x.FantasyPeriod != nil {
		return *x.FantasyPeriod
	}
	return 0
}

type CMsgClientToGCFantasyCraftingDevModifyTabletResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response   *CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse `protobuf:"varint,1,opt,name=response,enum=dota.CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse" json:"response,omitempty"`
	UserData   *CMsgDotaFantasyCraftingUserData                                `protobuf:"bytes,2,opt,name=user_data,json=userData" json:"user_data,omitempty"`
	TabletData *CMsgDotaFantasyCraftingTabletData                              `protobuf:"bytes,3,opt,name=tablet_data,json=tabletData" json:"tablet_data,omitempty"`
}

func (x *CMsgClientToGCFantasyCraftingDevModifyTabletResponse) Reset() {
	*x = CMsgClientToGCFantasyCraftingDevModifyTabletResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCFantasyCraftingDevModifyTabletResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCFantasyCraftingDevModifyTabletResponse) ProtoMessage() {}

func (x *CMsgClientToGCFantasyCraftingDevModifyTabletResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCFantasyCraftingDevModifyTabletResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCFantasyCraftingDevModifyTabletResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{29}
}

func (x *CMsgClientToGCFantasyCraftingDevModifyTabletResponse) GetResponse() CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse {
	if x != nil && x.Response != nil {
		return *x.Response
	}
	return CMsgClientToGCFantasyCraftingDevModifyTabletResponse_k_eInternalError
}

func (x *CMsgClientToGCFantasyCraftingDevModifyTabletResponse) GetUserData() *CMsgDotaFantasyCraftingUserData {
	if x != nil {
		return x.UserData
	}
	return nil
}

func (x *CMsgClientToGCFantasyCraftingDevModifyTabletResponse) GetTabletData() *CMsgDotaFantasyCraftingTabletData {
	if x != nil {
		return x.TabletData
	}
	return nil
}

type CMsgClientToGCFantasyCraftingSelectPlayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FantasyLeague *uint32 `protobuf:"varint,1,opt,name=fantasy_league,json=fantasyLeague" json:"fantasy_league,omitempty"`
	AccountId     *uint32 `protobuf:"varint,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
}

func (x *CMsgClientToGCFantasyCraftingSelectPlayer) Reset() {
	*x = CMsgClientToGCFantasyCraftingSelectPlayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCFantasyCraftingSelectPlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCFantasyCraftingSelectPlayer) ProtoMessage() {}

func (x *CMsgClientToGCFantasyCraftingSelectPlayer) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCFantasyCraftingSelectPlayer.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCFantasyCraftingSelectPlayer) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{30}
}

func (x *CMsgClientToGCFantasyCraftingSelectPlayer) GetFantasyLeague() uint32 {
	if x != nil && x.FantasyLeague != nil {
		return *x.FantasyLeague
	}
	return 0
}

func (x *CMsgClientToGCFantasyCraftingSelectPlayer) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

type CMsgClientToGCFantasyCraftingSelectPlayerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response   *CMsgClientToGCFantasyCraftingSelectPlayerResponse_EResponse `protobuf:"varint,1,opt,name=response,enum=dota.CMsgClientToGCFantasyCraftingSelectPlayerResponse_EResponse" json:"response,omitempty"`
	TabletData *CMsgDotaFantasyCraftingTabletData                           `protobuf:"bytes,2,opt,name=tablet_data,json=tabletData" json:"tablet_data,omitempty"`
}

func (x *CMsgClientToGCFantasyCraftingSelectPlayerResponse) Reset() {
	*x = CMsgClientToGCFantasyCraftingSelectPlayerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCFantasyCraftingSelectPlayerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCFantasyCraftingSelectPlayerResponse) ProtoMessage() {}

func (x *CMsgClientToGCFantasyCraftingSelectPlayerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCFantasyCraftingSelectPlayerResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCFantasyCraftingSelectPlayerResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{31}
}

func (x *CMsgClientToGCFantasyCraftingSelectPlayerResponse) GetResponse() CMsgClientToGCFantasyCraftingSelectPlayerResponse_EResponse {
	if x != nil && x.Response != nil {
		return *x.Response
	}
	return CMsgClientToGCFantasyCraftingSelectPlayerResponse_k_eInternalError
}

func (x *CMsgClientToGCFantasyCraftingSelectPlayerResponse) GetTabletData() *CMsgDotaFantasyCraftingTabletData {
	if x != nil {
		return x.TabletData
	}
	return nil
}

type CMsgClientToGCFantasyCraftingGenerateTablets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FantasyLeague *uint32  `protobuf:"varint,1,opt,name=fantasy_league,json=fantasyLeague" json:"fantasy_league,omitempty"`
	AccountIds    []uint32 `protobuf:"varint,2,rep,name=account_ids,json=accountIds" json:"account_ids,omitempty"`
}

func (x *CMsgClientToGCFantasyCraftingGenerateTablets) Reset() {
	*x = CMsgClientToGCFantasyCraftingGenerateTablets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCFantasyCraftingGenerateTablets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCFantasyCraftingGenerateTablets) ProtoMessage() {}

func (x *CMsgClientToGCFantasyCraftingGenerateTablets) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCFantasyCraftingGenerateTablets.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCFantasyCraftingGenerateTablets) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{32}
}

func (x *CMsgClientToGCFantasyCraftingGenerateTablets) GetFantasyLeague() uint32 {
	if x != nil && x.FantasyLeague != nil {
		return *x.FantasyLeague
	}
	return 0
}

func (x *CMsgClientToGCFantasyCraftingGenerateTablets) GetAccountIds() []uint32 {
	if x != nil {
		return x.AccountIds
	}
	return nil
}

type CMsgClientToGCFantasyCraftingGenerateTabletsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response   *CMsgClientToGCFantasyCraftingGenerateTabletsResponse_EResponse `protobuf:"varint,1,opt,name=response,enum=dota.CMsgClientToGCFantasyCraftingGenerateTabletsResponse_EResponse" json:"response,omitempty"`
	UserData   *CMsgDotaFantasyCraftingUserData                                `protobuf:"bytes,2,opt,name=user_data,json=userData" json:"user_data,omitempty"`
	TabletData *CMsgDotaFantasyCraftingTabletData                              `protobuf:"bytes,3,opt,name=tablet_data,json=tabletData" json:"tablet_data,omitempty"`
}

func (x *CMsgClientToGCFantasyCraftingGenerateTabletsResponse) Reset() {
	*x = CMsgClientToGCFantasyCraftingGenerateTabletsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCFantasyCraftingGenerateTabletsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCFantasyCraftingGenerateTabletsResponse) ProtoMessage() {}

func (x *CMsgClientToGCFantasyCraftingGenerateTabletsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCFantasyCraftingGenerateTabletsResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCFantasyCraftingGenerateTabletsResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{33}
}

func (x *CMsgClientToGCFantasyCraftingGenerateTabletsResponse) GetResponse() CMsgClientToGCFantasyCraftingGenerateTabletsResponse_EResponse {
	if x != nil && x.Response != nil {
		return *x.Response
	}
	return CMsgClientToGCFantasyCraftingGenerateTabletsResponse_k_eInternalError
}

func (x *CMsgClientToGCFantasyCraftingGenerateTabletsResponse) GetUserData() *CMsgDotaFantasyCraftingUserData {
	if x != nil {
		return x.UserData
	}
	return nil
}

func (x *CMsgClientToGCFantasyCraftingGenerateTabletsResponse) GetTabletData() *CMsgDotaFantasyCraftingTabletData {
	if x != nil {
		return x.TabletData
	}
	return nil
}

type CMsgClientToGcFantasyCraftingUpgradeTablets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FantasyLeague *uint32 `protobuf:"varint,1,opt,name=fantasy_league,json=fantasyLeague" json:"fantasy_league,omitempty"`
}

func (x *CMsgClientToGcFantasyCraftingUpgradeTablets) Reset() {
	*x = CMsgClientToGcFantasyCraftingUpgradeTablets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGcFantasyCraftingUpgradeTablets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGcFantasyCraftingUpgradeTablets) ProtoMessage() {}

func (x *CMsgClientToGcFantasyCraftingUpgradeTablets) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGcFantasyCraftingUpgradeTablets.ProtoReflect.Descriptor instead.
func (*CMsgClientToGcFantasyCraftingUpgradeTablets) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{34}
}

func (x *CMsgClientToGcFantasyCraftingUpgradeTablets) GetFantasyLeague() uint32 {
	if x != nil && x.FantasyLeague != nil {
		return *x.FantasyLeague
	}
	return 0
}

type CMsgClientToGcFantasyCraftingUpgradeTabletsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response   *CMsgClientToGcFantasyCraftingUpgradeTabletsResponse_EResponse `protobuf:"varint,1,opt,name=response,enum=dota.CMsgClientToGcFantasyCraftingUpgradeTabletsResponse_EResponse" json:"response,omitempty"`
	TabletData *CMsgDotaFantasyCraftingTabletData                             `protobuf:"bytes,3,opt,name=tablet_data,json=tabletData" json:"tablet_data,omitempty"`
}

func (x *CMsgClientToGcFantasyCraftingUpgradeTabletsResponse) Reset() {
	*x = CMsgClientToGcFantasyCraftingUpgradeTabletsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGcFantasyCraftingUpgradeTabletsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGcFantasyCraftingUpgradeTabletsResponse) ProtoMessage() {}

func (x *CMsgClientToGcFantasyCraftingUpgradeTabletsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGcFantasyCraftingUpgradeTabletsResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGcFantasyCraftingUpgradeTabletsResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{35}
}

func (x *CMsgClientToGcFantasyCraftingUpgradeTabletsResponse) GetResponse() CMsgClientToGcFantasyCraftingUpgradeTabletsResponse_EResponse {
	if x != nil && x.Response != nil {
		return *x.Response
	}
	return CMsgClientToGcFantasyCraftingUpgradeTabletsResponse_k_eInternalError
}

func (x *CMsgClientToGcFantasyCraftingUpgradeTabletsResponse) GetTabletData() *CMsgDotaFantasyCraftingTabletData {
	if x != nil {
		return x.TabletData
	}
	return nil
}

type CMsgClientToGCFantasyCraftingRerollOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FantasyLeague *uint32 `protobuf:"varint,1,opt,name=fantasy_league,json=fantasyLeague" json:"fantasy_league,omitempty"`
}

func (x *CMsgClientToGCFantasyCraftingRerollOptions) Reset() {
	*x = CMsgClientToGCFantasyCraftingRerollOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCFantasyCraftingRerollOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCFantasyCraftingRerollOptions) ProtoMessage() {}

func (x *CMsgClientToGCFantasyCraftingRerollOptions) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCFantasyCraftingRerollOptions.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCFantasyCraftingRerollOptions) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{36}
}

func (x *CMsgClientToGCFantasyCraftingRerollOptions) GetFantasyLeague() uint32 {
	if x != nil && x.FantasyLeague != nil {
		return *x.FantasyLeague
	}
	return 0
}

type CMsgClientToGCFantasyCraftingRerollOptionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *CMsgClientToGCFantasyCraftingRerollOptionsResponse_EResponse `protobuf:"varint,1,opt,name=response,enum=dota.CMsgClientToGCFantasyCraftingRerollOptionsResponse_EResponse" json:"response,omitempty"`
	UserData *CMsgDotaFantasyCraftingUserData                              `protobuf:"bytes,2,opt,name=user_data,json=userData" json:"user_data,omitempty"`
}

func (x *CMsgClientToGCFantasyCraftingRerollOptionsResponse) Reset() {
	*x = CMsgClientToGCFantasyCraftingRerollOptionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCFantasyCraftingRerollOptionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCFantasyCraftingRerollOptionsResponse) ProtoMessage() {}

func (x *CMsgClientToGCFantasyCraftingRerollOptionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCFantasyCraftingRerollOptionsResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCFantasyCraftingRerollOptionsResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{37}
}

func (x *CMsgClientToGCFantasyCraftingRerollOptionsResponse) GetResponse() CMsgClientToGCFantasyCraftingRerollOptionsResponse_EResponse {
	if x != nil && x.Response != nil {
		return *x.Response
	}
	return CMsgClientToGCFantasyCraftingRerollOptionsResponse_k_eInternalError
}

func (x *CMsgClientToGCFantasyCraftingRerollOptionsResponse) GetUserData() *CMsgDotaFantasyCraftingUserData {
	if x != nil {
		return x.UserData
	}
	return nil
}

type CMsgDOTAPlayerInfo_Results struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeagueId  *uint32 `protobuf:"varint,1,opt,name=league_id,json=leagueId" json:"league_id,omitempty"`
	Placement *uint32 `protobuf:"varint,2,opt,name=placement" json:"placement,omitempty"`
	Earnings  *uint32 `protobuf:"varint,3,opt,name=earnings" json:"earnings,omitempty"`
}

func (x *CMsgDOTAPlayerInfo_Results) Reset() {
	*x = CMsgDOTAPlayerInfo_Results{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAPlayerInfo_Results) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAPlayerInfo_Results) ProtoMessage() {}

func (x *CMsgDOTAPlayerInfo_Results) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAPlayerInfo_Results.ProtoReflect.Descriptor instead.
func (*CMsgDOTAPlayerInfo_Results) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{0, 0}
}

func (x *CMsgDOTAPlayerInfo_Results) GetLeagueId() uint32 {
	if x != nil && x.LeagueId != nil {
		return *x.LeagueId
	}
	return 0
}

func (x *CMsgDOTAPlayerInfo_Results) GetPlacement() uint32 {
	if x != nil && x.Placement != nil {
		return *x.Placement
	}
	return 0
}

func (x *CMsgDOTAPlayerInfo_Results) GetEarnings() uint32 {
	if x != nil && x.Earnings != nil {
		return *x.Earnings
	}
	return 0
}

type CMsgDOTAPlayerInfo_AuditEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTimestamp *uint32 `protobuf:"varint,1,opt,name=start_timestamp,json=startTimestamp" json:"start_timestamp,omitempty"`
	EndTimestamp   *uint32 `protobuf:"varint,2,opt,name=end_timestamp,json=endTimestamp" json:"end_timestamp,omitempty"`
	TeamId         *uint32 `protobuf:"varint,3,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	TeamName       *string `protobuf:"bytes,4,opt,name=team_name,json=teamName" json:"team_name,omitempty"`
	TeamTag        *string `protobuf:"bytes,5,opt,name=team_tag,json=teamTag" json:"team_tag,omitempty"`
	TeamUrlLogo    *string `protobuf:"bytes,6,opt,name=team_url_logo,json=teamUrlLogo" json:"team_url_logo,omitempty"`
}

func (x *CMsgDOTAPlayerInfo_AuditEntry) Reset() {
	*x = CMsgDOTAPlayerInfo_AuditEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAPlayerInfo_AuditEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAPlayerInfo_AuditEntry) ProtoMessage() {}

func (x *CMsgDOTAPlayerInfo_AuditEntry) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAPlayerInfo_AuditEntry.ProtoReflect.Descriptor instead.
func (*CMsgDOTAPlayerInfo_AuditEntry) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{0, 1}
}

func (x *CMsgDOTAPlayerInfo_AuditEntry) GetStartTimestamp() uint32 {
	if x != nil && x.StartTimestamp != nil {
		return *x.StartTimestamp
	}
	return 0
}

func (x *CMsgDOTAPlayerInfo_AuditEntry) GetEndTimestamp() uint32 {
	if x != nil && x.EndTimestamp != nil {
		return *x.EndTimestamp
	}
	return 0
}

func (x *CMsgDOTAPlayerInfo_AuditEntry) GetTeamId() uint32 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

func (x *CMsgDOTAPlayerInfo_AuditEntry) GetTeamName() string {
	if x != nil && x.TeamName != nil {
		return *x.TeamName
	}
	return ""
}

func (x *CMsgDOTAPlayerInfo_AuditEntry) GetTeamTag() string {
	if x != nil && x.TeamTag != nil {
		return *x.TeamTag
	}
	return ""
}

func (x *CMsgDOTAPlayerInfo_AuditEntry) GetTeamUrlLogo() string {
	if x != nil && x.TeamUrlLogo != nil {
		return *x.TeamUrlLogo
	}
	return ""
}

type CMsgDOTADPCProfileInfo_PredictionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Percent       *uint32 `protobuf:"varint,1,opt,name=percent" json:"percent,omitempty"`
	ShardWinnings *int32  `protobuf:"varint,2,opt,name=shard_winnings,json=shardWinnings" json:"shard_winnings,omitempty"`
}

func (x *CMsgDOTADPCProfileInfo_PredictionInfo) Reset() {
	*x = CMsgDOTADPCProfileInfo_PredictionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTADPCProfileInfo_PredictionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTADPCProfileInfo_PredictionInfo) ProtoMessage() {}

func (x *CMsgDOTADPCProfileInfo_PredictionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTADPCProfileInfo_PredictionInfo.ProtoReflect.Descriptor instead.
func (*CMsgDOTADPCProfileInfo_PredictionInfo) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{3, 0}
}

func (x *CMsgDOTADPCProfileInfo_PredictionInfo) GetPercent() uint32 {
	if x != nil && x.Percent != nil {
		return *x.Percent
	}
	return 0
}

func (x *CMsgDOTADPCProfileInfo_PredictionInfo) GetShardWinnings() int32 {
	if x != nil && x.ShardWinnings != nil {
		return *x.ShardWinnings
	}
	return 0
}

type CMsgDOTADPCProfileInfo_FantasyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Top_90Finishes *uint32 `protobuf:"varint,1,opt,name=top_90_finishes,json=top90Finishes" json:"top_90_finishes,omitempty"`
	Top_75Finishes *uint32 `protobuf:"varint,2,opt,name=top_75_finishes,json=top75Finishes" json:"top_75_finishes,omitempty"`
	Top_50Finishes *uint32 `protobuf:"varint,3,opt,name=top_50_finishes,json=top50Finishes" json:"top_50_finishes,omitempty"`
	ShardWinnings  *uint32 `protobuf:"varint,4,opt,name=shard_winnings,json=shardWinnings" json:"shard_winnings,omitempty"`
}

func (x *CMsgDOTADPCProfileInfo_FantasyInfo) Reset() {
	*x = CMsgDOTADPCProfileInfo_FantasyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTADPCProfileInfo_FantasyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTADPCProfileInfo_FantasyInfo) ProtoMessage() {}

func (x *CMsgDOTADPCProfileInfo_FantasyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTADPCProfileInfo_FantasyInfo.ProtoReflect.Descriptor instead.
func (*CMsgDOTADPCProfileInfo_FantasyInfo) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{3, 1}
}

func (x *CMsgDOTADPCProfileInfo_FantasyInfo) GetTop_90Finishes() uint32 {
	if x != nil && x.Top_90Finishes != nil {
		return *x.Top_90Finishes
	}
	return 0
}

func (x *CMsgDOTADPCProfileInfo_FantasyInfo) GetTop_75Finishes() uint32 {
	if x != nil && x.Top_75Finishes != nil {
		return *x.Top_75Finishes
	}
	return 0
}

func (x *CMsgDOTADPCProfileInfo_FantasyInfo) GetTop_50Finishes() uint32 {
	if x != nil && x.Top_50Finishes != nil {
		return *x.Top_50Finishes
	}
	return 0
}

func (x *CMsgDOTADPCProfileInfo_FantasyInfo) GetShardWinnings() uint32 {
	if x != nil && x.ShardWinnings != nil {
		return *x.ShardWinnings
	}
	return 0
}

type CMsgDOTALeaderboards_RegionLeaderboard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Division   *uint32  `protobuf:"varint,1,opt,name=division" json:"division,omitempty"`
	AccountIds []uint32 `protobuf:"varint,2,rep,name=account_ids,json=accountIds" json:"account_ids,omitempty"`
}

func (x *CMsgDOTALeaderboards_RegionLeaderboard) Reset() {
	*x = CMsgDOTALeaderboards_RegionLeaderboard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTALeaderboards_RegionLeaderboard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTALeaderboards_RegionLeaderboard) ProtoMessage() {}

func (x *CMsgDOTALeaderboards_RegionLeaderboard) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTALeaderboards_RegionLeaderboard.ProtoReflect.Descriptor instead.
func (*CMsgDOTALeaderboards_RegionLeaderboard) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{4, 0}
}

func (x *CMsgDOTALeaderboards_RegionLeaderboard) GetDivision() uint32 {
	if x != nil && x.Division != nil {
		return *x.Division
	}
	return 0
}

func (x *CMsgDOTALeaderboards_RegionLeaderboard) GetAccountIds() []uint32 {
	if x != nil {
		return x.AccountIds
	}
	return nil
}

type CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeagueId      *uint32 `protobuf:"varint,1,opt,name=league_id,json=leagueId" json:"league_id,omitempty"`
	FantasyPeriod *uint32 `protobuf:"varint,3,opt,name=fantasy_period,json=fantasyPeriod" json:"fantasy_period,omitempty"`
}

func (x *CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp) Reset() {
	*x = CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp) ProtoMessage() {}

func (x *CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{12, 0}
}

func (x *CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp) GetLeagueId() uint32 {
	if x != nil && x.LeagueId != nil {
		return *x.LeagueId
	}
	return 0
}

func (x *CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp) GetFantasyPeriod() uint32 {
	if x != nil && x.FantasyPeriod != nil {
		return *x.FantasyPeriod
	}
	return 0
}

type CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeagueId            *uint32                                                `protobuf:"varint,1,opt,name=league_id,json=leagueId" json:"league_id,omitempty"`
	DeprecatedTimestamp *uint32                                                `protobuf:"varint,2,opt,name=deprecated_timestamp,json=deprecatedTimestamp" json:"deprecated_timestamp,omitempty"`
	Result              *CMsgClientToGCBatchGetPlayerCardRosterResponse_Result `protobuf:"varint,3,opt,name=result,enum=dota.CMsgClientToGCBatchGetPlayerCardRosterResponse_Result" json:"result,omitempty"`
	PlayerCardItemId    []uint64                                               `protobuf:"varint,4,rep,name=player_card_item_id,json=playerCardItemId" json:"player_card_item_id,omitempty"`
	Score               *float32                                               `protobuf:"fixed32,5,opt,name=score" json:"score,omitempty"`
	Finalized           *bool                                                  `protobuf:"varint,6,opt,name=finalized" json:"finalized,omitempty"`
	Percentile          *float32                                               `protobuf:"fixed32,7,opt,name=percentile" json:"percentile,omitempty"`
	FantasyPeriod       *uint32                                                `protobuf:"varint,8,opt,name=fantasy_period,json=fantasyPeriod" json:"fantasy_period,omitempty"`
}

func (x *CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse) Reset() {
	*x = CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse) ProtoMessage() {}

func (x *CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{13, 0}
}

func (x *CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse) GetLeagueId() uint32 {
	if x != nil && x.LeagueId != nil {
		return *x.LeagueId
	}
	return 0
}

func (x *CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse) GetDeprecatedTimestamp() uint32 {
	if x != nil && x.DeprecatedTimestamp != nil {
		return *x.DeprecatedTimestamp
	}
	return 0
}

func (x *CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse) GetResult() CMsgClientToGCBatchGetPlayerCardRosterResponse_Result {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return CMsgClientToGCBatchGetPlayerCardRosterResponse_SUCCESS
}

func (x *CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse) GetPlayerCardItemId() []uint64 {
	if x != nil {
		return x.PlayerCardItemId
	}
	return nil
}

func (x *CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse) GetScore() float32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

func (x *CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse) GetFinalized() bool {
	if x != nil && x.Finalized != nil {
		return *x.Finalized
	}
	return false
}

func (x *CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse) GetPercentile() float32 {
	if x != nil && x.Percentile != nil {
		return *x.Percentile
	}
	return 0
}

func (x *CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse) GetFantasyPeriod() uint32 {
	if x != nil && x.FantasyPeriod != nil {
		return *x.FantasyPeriod
	}
	return 0
}

type CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeagueId       *uint32                                       `protobuf:"varint,1,opt,name=league_id,json=leagueId" json:"league_id,omitempty"`
	LeagueName     *string                                       `protobuf:"bytes,2,opt,name=league_name,json=leagueName" json:"league_name,omitempty"`
	StartTimestamp *uint32                                       `protobuf:"varint,3,opt,name=start_timestamp,json=startTimestamp" json:"start_timestamp,omitempty"`
	EndTimestamp   *uint32                                       `protobuf:"varint,4,opt,name=end_timestamp,json=endTimestamp" json:"end_timestamp,omitempty"`
	DayTimestamps  []uint32                                      `protobuf:"varint,5,rep,name=day_timestamps,json=dayTimestamps" json:"day_timestamps,omitempty"`
	Status         *CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus `protobuf:"varint,8,opt,name=status,enum=dota.CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus" json:"status,omitempty"`
}

func (x *CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo) Reset() {
	*x = CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo) ProtoMessage() {}

func (x *CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo.ProtoReflect.Descriptor instead.
func (*CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{16, 0}
}

func (x *CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo) GetLeagueId() uint32 {
	if x != nil && x.LeagueId != nil {
		return *x.LeagueId
	}
	return 0
}

func (x *CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo) GetLeagueName() string {
	if x != nil && x.LeagueName != nil {
		return *x.LeagueName
	}
	return ""
}

func (x *CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo) GetStartTimestamp() uint32 {
	if x != nil && x.StartTimestamp != nil {
		return *x.StartTimestamp
	}
	return 0
}

func (x *CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo) GetEndTimestamp() uint32 {
	if x != nil && x.EndTimestamp != nil {
		return *x.EndTimestamp
	}
	return 0
}

func (x *CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo) GetDayTimestamps() []uint32 {
	if x != nil {
		return x.DayTimestamps
	}
	return nil
}

func (x *CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo) GetStatus() CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return CMsgDOTAFantasyDPCLeagueStatus_UNSET
}

type CMsgDOTADPCSearchResults_Player struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       *uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name     *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	RealName *string `protobuf:"bytes,3,opt,name=real_name,json=realName" json:"real_name,omitempty"`
}

func (x *CMsgDOTADPCSearchResults_Player) Reset() {
	*x = CMsgDOTADPCSearchResults_Player{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTADPCSearchResults_Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTADPCSearchResults_Player) ProtoMessage() {}

func (x *CMsgDOTADPCSearchResults_Player) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTADPCSearchResults_Player.ProtoReflect.Descriptor instead.
func (*CMsgDOTADPCSearchResults_Player) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{17, 0}
}

func (x *CMsgDOTADPCSearchResults_Player) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *CMsgDOTADPCSearchResults_Player) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CMsgDOTADPCSearchResults_Player) GetRealName() string {
	if x != nil && x.RealName != nil {
		return *x.RealName
	}
	return ""
}

type CMsgDOTADPCSearchResults_Team struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   *uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Url  *string `protobuf:"bytes,3,opt,name=url" json:"url,omitempty"`
}

func (x *CMsgDOTADPCSearchResults_Team) Reset() {
	*x = CMsgDOTADPCSearchResults_Team{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTADPCSearchResults_Team) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTADPCSearchResults_Team) ProtoMessage() {}

func (x *CMsgDOTADPCSearchResults_Team) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTADPCSearchResults_Team.ProtoReflect.Descriptor instead.
func (*CMsgDOTADPCSearchResults_Team) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{17, 1}
}

func (x *CMsgDOTADPCSearchResults_Team) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *CMsgDOTADPCSearchResults_Team) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CMsgDOTADPCSearchResults_Team) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

type CMsgDOTADPCSearchResults_League struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   *uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (x *CMsgDOTADPCSearchResults_League) Reset() {
	*x = CMsgDOTADPCSearchResults_League{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTADPCSearchResults_League) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTADPCSearchResults_League) ProtoMessage() {}

func (x *CMsgDOTADPCSearchResults_League) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTADPCSearchResults_League.ProtoReflect.Descriptor instead.
func (*CMsgDOTADPCSearchResults_League) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{17, 2}
}

func (x *CMsgDOTADPCSearchResults_League) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *CMsgDOTADPCSearchResults_League) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type CMsgDOTADPCTeamFavoriteRankings_Team struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamId    *uint32 `protobuf:"varint,1,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	Favorites *uint32 `protobuf:"varint,2,opt,name=favorites" json:"favorites,omitempty"`
}

func (x *CMsgDOTADPCTeamFavoriteRankings_Team) Reset() {
	*x = CMsgDOTADPCTeamFavoriteRankings_Team{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTADPCTeamFavoriteRankings_Team) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTADPCTeamFavoriteRankings_Team) ProtoMessage() {}

func (x *CMsgDOTADPCTeamFavoriteRankings_Team) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTADPCTeamFavoriteRankings_Team.ProtoReflect.Descriptor instead.
func (*CMsgDOTADPCTeamFavoriteRankings_Team) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{18, 0}
}

func (x *CMsgDOTADPCTeamFavoriteRankings_Team) GetTeamId() uint32 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

func (x *CMsgDOTADPCTeamFavoriteRankings_Team) GetFavorites() uint32 {
	if x != nil && x.Favorites != nil {
		return *x.Favorites
	}
	return 0
}

type CMsgDotaFantasyCraftingTabletPeriodData_Gem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    *Fantasy_Gem_Type `protobuf:"varint,1,opt,name=type,enum=dota.Fantasy_Gem_Type" json:"type,omitempty"`
	Slot    *uint32           `protobuf:"varint,2,opt,name=slot" json:"slot,omitempty"`
	Shape   *uint32           `protobuf:"varint,3,opt,name=shape" json:"shape,omitempty"`
	Quality *uint32           `protobuf:"varint,4,opt,name=quality" json:"quality,omitempty"`
	Stat    *Fantasy_Scoring  `protobuf:"varint,5,opt,name=stat,enum=dota.Fantasy_Scoring" json:"stat,omitempty"`
}

func (x *CMsgDotaFantasyCraftingTabletPeriodData_Gem) Reset() {
	*x = CMsgDotaFantasyCraftingTabletPeriodData_Gem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDotaFantasyCraftingTabletPeriodData_Gem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDotaFantasyCraftingTabletPeriodData_Gem) ProtoMessage() {}

func (x *CMsgDotaFantasyCraftingTabletPeriodData_Gem) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDotaFantasyCraftingTabletPeriodData_Gem.ProtoReflect.Descriptor instead.
func (*CMsgDotaFantasyCraftingTabletPeriodData_Gem) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{19, 0}
}

func (x *CMsgDotaFantasyCraftingTabletPeriodData_Gem) GetType() Fantasy_Gem_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Fantasy_Gem_Type_FANTASY_GEM_TYPE_RUBY
}

func (x *CMsgDotaFantasyCraftingTabletPeriodData_Gem) GetSlot() uint32 {
	if x != nil && x.Slot != nil {
		return *x.Slot
	}
	return 0
}

func (x *CMsgDotaFantasyCraftingTabletPeriodData_Gem) GetShape() uint32 {
	if x != nil && x.Shape != nil {
		return *x.Shape
	}
	return 0
}

func (x *CMsgDotaFantasyCraftingTabletPeriodData_Gem) GetQuality() uint32 {
	if x != nil && x.Quality != nil {
		return *x.Quality
	}
	return 0
}

func (x *CMsgDotaFantasyCraftingTabletPeriodData_Gem) GetStat() Fantasy_Scoring {
	if x != nil && x.Stat != nil {
		return *x.Stat
	}
	return Fantasy_Scoring_FANTASY_SCORING_KILLS
}

type CMsgDotaFantasyCraftingTabletPeriodData_Tablet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TabletId    *uint32                                        `protobuf:"varint,1,opt,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	TabletLevel *uint32                                        `protobuf:"varint,2,opt,name=tablet_level,json=tabletLevel" json:"tablet_level,omitempty"`
	FantasyRole *Fantasy_Roles                                 `protobuf:"varint,3,opt,name=fantasy_role,json=fantasyRole,enum=dota.Fantasy_Roles" json:"fantasy_role,omitempty"`
	AccountId   *uint32                                        `protobuf:"varint,4,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Prefix      *uint32                                        `protobuf:"varint,5,opt,name=prefix" json:"prefix,omitempty"`
	Suffix      *uint32                                        `protobuf:"varint,6,opt,name=suffix" json:"suffix,omitempty"`
	Gems        []*CMsgDotaFantasyCraftingTabletPeriodData_Gem `protobuf:"bytes,7,rep,name=gems" json:"gems,omitempty"`
	Score       *float32                                       `protobuf:"fixed32,8,opt,name=score" json:"score,omitempty"`
	BestSeries  *uint32                                        `protobuf:"varint,9,opt,name=best_series,json=bestSeries" json:"best_series,omitempty"`
}

func (x *CMsgDotaFantasyCraftingTabletPeriodData_Tablet) Reset() {
	*x = CMsgDotaFantasyCraftingTabletPeriodData_Tablet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDotaFantasyCraftingTabletPeriodData_Tablet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDotaFantasyCraftingTabletPeriodData_Tablet) ProtoMessage() {}

func (x *CMsgDotaFantasyCraftingTabletPeriodData_Tablet) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDotaFantasyCraftingTabletPeriodData_Tablet.ProtoReflect.Descriptor instead.
func (*CMsgDotaFantasyCraftingTabletPeriodData_Tablet) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{19, 1}
}

func (x *CMsgDotaFantasyCraftingTabletPeriodData_Tablet) GetTabletId() uint32 {
	if x != nil && x.TabletId != nil {
		return *x.TabletId
	}
	return 0
}

func (x *CMsgDotaFantasyCraftingTabletPeriodData_Tablet) GetTabletLevel() uint32 {
	if x != nil && x.TabletLevel != nil {
		return *x.TabletLevel
	}
	return 0
}

func (x *CMsgDotaFantasyCraftingTabletPeriodData_Tablet) GetFantasyRole() Fantasy_Roles {
	if x != nil && x.FantasyRole != nil {
		return *x.FantasyRole
	}
	return Fantasy_Roles_FANTASY_ROLE_UNDEFINED
}

func (x *CMsgDotaFantasyCraftingTabletPeriodData_Tablet) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgDotaFantasyCraftingTabletPeriodData_Tablet) GetPrefix() uint32 {
	if x != nil && x.Prefix != nil {
		return *x.Prefix
	}
	return 0
}

func (x *CMsgDotaFantasyCraftingTabletPeriodData_Tablet) GetSuffix() uint32 {
	if x != nil && x.Suffix != nil {
		return *x.Suffix
	}
	return 0
}

func (x *CMsgDotaFantasyCraftingTabletPeriodData_Tablet) GetGems() []*CMsgDotaFantasyCraftingTabletPeriodData_Gem {
	if x != nil {
		return x.Gems
	}
	return nil
}

func (x *CMsgDotaFantasyCraftingTabletPeriodData_Tablet) GetScore() float32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

func (x *CMsgDotaFantasyCraftingTabletPeriodData_Tablet) GetBestSeries() uint32 {
	if x != nil && x.BestSeries != nil {
		return *x.BestSeries
	}
	return 0
}

type CMsgDotaFantasyCraftingTabletData_TabletPeriodDataEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *uint32                                  `protobuf:"varint,1,opt,name=key" json:"key,omitempty"`
	Value *CMsgDotaFantasyCraftingTabletPeriodData `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (x *CMsgDotaFantasyCraftingTabletData_TabletPeriodDataEntry) Reset() {
	*x = CMsgDotaFantasyCraftingTabletData_TabletPeriodDataEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDotaFantasyCraftingTabletData_TabletPeriodDataEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDotaFantasyCraftingTabletData_TabletPeriodDataEntry) ProtoMessage() {}

func (x *CMsgDotaFantasyCraftingTabletData_TabletPeriodDataEntry) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDotaFantasyCraftingTabletData_TabletPeriodDataEntry.ProtoReflect.Descriptor instead.
func (*CMsgDotaFantasyCraftingTabletData_TabletPeriodDataEntry) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{20, 0}
}

func (x *CMsgDotaFantasyCraftingTabletData_TabletPeriodDataEntry) GetKey() uint32 {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return 0
}

func (x *CMsgDotaFantasyCraftingTabletData_TabletPeriodDataEntry) GetValue() *CMsgDotaFantasyCraftingTabletPeriodData {
	if x != nil {
		return x.Value
	}
	return nil
}

type CMsgDotaFantasyCraftingUserData_PeriodScore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalScore *float32 `protobuf:"fixed32,1,opt,name=total_score,json=totalScore" json:"total_score,omitempty"`
	Percentile *float32 `protobuf:"fixed32,2,opt,name=percentile" json:"percentile,omitempty"`
}

func (x *CMsgDotaFantasyCraftingUserData_PeriodScore) Reset() {
	*x = CMsgDotaFantasyCraftingUserData_PeriodScore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDotaFantasyCraftingUserData_PeriodScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDotaFantasyCraftingUserData_PeriodScore) ProtoMessage() {}

func (x *CMsgDotaFantasyCraftingUserData_PeriodScore) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDotaFantasyCraftingUserData_PeriodScore.ProtoReflect.Descriptor instead.
func (*CMsgDotaFantasyCraftingUserData_PeriodScore) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{21, 0}
}

func (x *CMsgDotaFantasyCraftingUserData_PeriodScore) GetTotalScore() float32 {
	if x != nil && x.TotalScore != nil {
		return *x.TotalScore
	}
	return 0
}

func (x *CMsgDotaFantasyCraftingUserData_PeriodScore) GetPercentile() float32 {
	if x != nil && x.Percentile != nil {
		return *x.Percentile
	}
	return 0
}

type CMsgDotaFantasyCraftingUserData_PeriodRollTokensEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *uint32 `protobuf:"varint,1,opt,name=key" json:"key,omitempty"`
	Value *uint32 `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`
}

func (x *CMsgDotaFantasyCraftingUserData_PeriodRollTokensEntry) Reset() {
	*x = CMsgDotaFantasyCraftingUserData_PeriodRollTokensEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDotaFantasyCraftingUserData_PeriodRollTokensEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDotaFantasyCraftingUserData_PeriodRollTokensEntry) ProtoMessage() {}

func (x *CMsgDotaFantasyCraftingUserData_PeriodRollTokensEntry) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDotaFantasyCraftingUserData_PeriodRollTokensEntry.ProtoReflect.Descriptor instead.
func (*CMsgDotaFantasyCraftingUserData_PeriodRollTokensEntry) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{21, 1}
}

func (x *CMsgDotaFantasyCraftingUserData_PeriodRollTokensEntry) GetKey() uint32 {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return 0
}

func (x *CMsgDotaFantasyCraftingUserData_PeriodRollTokensEntry) GetValue() uint32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

type CMsgDotaFantasyCraftingUserData_PeriodScoresEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *uint32                                      `protobuf:"varint,1,opt,name=key" json:"key,omitempty"`
	Value *CMsgDotaFantasyCraftingUserData_PeriodScore `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (x *CMsgDotaFantasyCraftingUserData_PeriodScoresEntry) Reset() {
	*x = CMsgDotaFantasyCraftingUserData_PeriodScoresEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDotaFantasyCraftingUserData_PeriodScoresEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDotaFantasyCraftingUserData_PeriodScoresEntry) ProtoMessage() {}

func (x *CMsgDotaFantasyCraftingUserData_PeriodScoresEntry) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDotaFantasyCraftingUserData_PeriodScoresEntry.ProtoReflect.Descriptor instead.
func (*CMsgDotaFantasyCraftingUserData_PeriodScoresEntry) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{21, 2}
}

func (x *CMsgDotaFantasyCraftingUserData_PeriodScoresEntry) GetKey() uint32 {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return 0
}

func (x *CMsgDotaFantasyCraftingUserData_PeriodScoresEntry) GetValue() *CMsgDotaFantasyCraftingUserData_PeriodScore {
	if x != nil {
		return x.Value
	}
	return nil
}

type CMsgDotaFantasyCraftingDataCache_CacheEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId     *uint32                                   `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	FantasyLeague *uint32                                   `protobuf:"varint,2,opt,name=fantasy_league,json=fantasyLeague" json:"fantasy_league,omitempty"`
	CacheData     *CMsgGCToClientFantasyCraftingDataUpdated `protobuf:"bytes,3,opt,name=cache_data,json=cacheData" json:"cache_data,omitempty"`
}

func (x *CMsgDotaFantasyCraftingDataCache_CacheEntry) Reset() {
	*x = CMsgDotaFantasyCraftingDataCache_CacheEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDotaFantasyCraftingDataCache_CacheEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDotaFantasyCraftingDataCache_CacheEntry) ProtoMessage() {}

func (x *CMsgDotaFantasyCraftingDataCache_CacheEntry) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDotaFantasyCraftingDataCache_CacheEntry.ProtoReflect.Descriptor instead.
func (*CMsgDotaFantasyCraftingDataCache_CacheEntry) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{22, 0}
}

func (x *CMsgDotaFantasyCraftingDataCache_CacheEntry) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgDotaFantasyCraftingDataCache_CacheEntry) GetFantasyLeague() uint32 {
	if x != nil && x.FantasyLeague != nil {
		return *x.FantasyLeague
	}
	return 0
}

func (x *CMsgDotaFantasyCraftingDataCache_CacheEntry) GetCacheData() *CMsgGCToClientFantasyCraftingDataUpdated {
	if x != nil {
		return x.CacheData
	}
	return nil
}

type CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrefixChoice *uint32 `protobuf:"varint,1,opt,name=prefix_choice,json=prefixChoice" json:"prefix_choice,omitempty"`
	SuffixChoice *uint32 `protobuf:"varint,2,opt,name=suffix_choice,json=suffixChoice" json:"suffix_choice,omitempty"`
}

func (x *CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice) Reset() {
	*x = CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice) ProtoMessage() {}

func (x *CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_fantasy_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_fantasy_proto_rawDescGZIP(), []int{26, 0}
}

func (x *CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice) GetPrefixChoice() uint32 {
	if x != nil && x.PrefixChoice != nil {
		return *x.PrefixChoice
	}
	return 0
}

func (x *CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice) GetSuffixChoice() uint32 {
	if x != nil && x.SuffixChoice != nil {
		return *x.SuffixChoice
	}
	return 0
}

var File_dota_gcmessages_client_fantasy_proto protoreflect.FileDescriptor

var file_dota_gcmessages_client_fantasy_proto_rawDesc = []byte{
	0x0a, 0x24, 0x64, 0x6f, 0x74, 0x61, 0x5f, 0x67, 0x63, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x64, 0x6f, 0x74, 0x61, 0x1a, 0x17, 0x64, 0x6f,
	0x74, 0x61, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x90, 0x07, 0x0a, 0x12, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f,
	0x54, 0x41, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x36, 0x0a, 0x0c, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x5f, 0x72, 0x6f,
	0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e,
	0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x5f, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x52, 0x0b, 0x66,
	0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65,
	0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x65, 0x61,
	0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x61, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x61,
	0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65,
	0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x3a, 0x0a,
	0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x65, 0x61,
	0x6d, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x74, 0x65, 0x61, 0x6d, 0x55, 0x72, 0x6c, 0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x48, 0x0a,
	0x0d, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x10,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x44, 0x4f, 0x54, 0x41, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x41,
	0x75, 0x64, 0x69, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x65, 0x61, 0x6d, 0x5f,
	0x61, 0x62, 0x62, 0x72, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x74, 0x65, 0x61, 0x6d, 0x41, 0x62, 0x62, 0x72, 0x65, 0x76, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x60, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x65, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0xcf, 0x01, 0x0a, 0x0a, 0x41, 0x75, 0x64, 0x69, 0x74,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x23,
	0x0a, 0x0d, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x65, 0x61,
	0x6d, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x65, 0x61,
	0x6d, 0x54, 0x61, 0x67, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x72, 0x6c,
	0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x65, 0x61,
	0x6d, 0x55, 0x72, 0x6c, 0x4c, 0x6f, 0x67, 0x6f, 0x22, 0x55, 0x0a, 0x16, 0x43, 0x4d, 0x73, 0x67,
	0x44, 0x4f, 0x54, 0x41, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22,
	0xa3, 0x01, 0x0a, 0x12, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x54, 0x65, 0x61, 0x6d,
	0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x2c, 0x0a,
	0x12, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x10, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x63,
	0x6f, 0x61, 0x63, 0x68, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x6f, 0x61, 0x63, 0x68, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xaf, 0x04, 0x0a, 0x16, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f,
	0x54, 0x41, 0x44, 0x50, 0x43, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x39, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x44, 0x4f, 0x54, 0x41, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x54, 0x0a, 0x0f, 0x70,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x44, 0x4f, 0x54, 0x41, 0x44, 0x50, 0x43, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x4b, 0x0a, 0x0c, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x44, 0x50, 0x43, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0b, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x35,
	0x0a, 0x16, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x15,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x51, 0x0a, 0x0e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x77, 0x69, 0x6e, 0x6e, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x64,
	0x57, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0xac, 0x01, 0x0a, 0x0b, 0x46, 0x61, 0x6e,
	0x74, 0x61, 0x73, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x6f, 0x70, 0x5f,
	0x39, 0x30, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x74, 0x6f, 0x70, 0x39, 0x30, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x73,
	0x12, 0x26, 0x0a, 0x0f, 0x74, 0x6f, 0x70, 0x5f, 0x37, 0x35, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x6f, 0x70, 0x37, 0x35,
	0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x6f, 0x70, 0x5f,
	0x35, 0x30, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x74, 0x6f, 0x70, 0x35, 0x30, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x73,
	0x12, 0x25, 0x0a, 0x0e, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x77, 0x69, 0x6e, 0x6e, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x64, 0x57,
	0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x22, 0xba, 0x01, 0x0a, 0x14, 0x43, 0x4d, 0x73, 0x67,
	0x44, 0x4f, 0x54, 0x41, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73,
	0x12, 0x50, 0x0a, 0x0c, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x52, 0x0c, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x73, 0x1a, 0x50, 0x0a, 0x11, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x69, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x73, 0x22, 0x7a, 0x0a, 0x1d, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41,
	0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d,
	0x47, 0x75, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x75, 0x70, 0x49, 0x64,
	0x22, 0x96, 0x01, 0x0a, 0x24, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x50, 0x61, 0x73,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x0f, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x27, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x32,
	0x30, 0x31, 0x33, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x52, 0x0e, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5b, 0x0a, 0x1d, 0x43, 0x4d, 0x73,
	0x67, 0x44, 0x4f, 0x54, 0x41, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61,
	0x6d, 0x70, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x48, 0x0a, 0x23, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f,
	0x54, 0x41, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x43, 0x61, 0x72, 0x64, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x64,
	0x22, 0xe4, 0x02, 0x0a, 0x14, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x50, 0x61, 0x73,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x0a, 0x74, 0x65, 0x61,
	0x6d, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x50, 0x61, 0x73,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x75, 0x65,
	0x73, 0x73, 0x52, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x59, 0x0a,
	0x12, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x64, 0x6f, 0x74, 0x61,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x56, 0x6f, 0x74, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4c, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x65, 0x64, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54,
	0x41, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x65, 0x64,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x65, 0x64, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x5f, 0x0a, 0x16, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x52, 0x14, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x43, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x22, 0x6e, 0x0a, 0x28, 0x43, 0x4d, 0x73, 0x67, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x64,
	0x12, 0x25, 0x0a, 0x0e, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73,
	0x79, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x22, 0xe6, 0x02, 0x0a, 0x29, 0x43, 0x4d, 0x73, 0x67,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2d, 0x0a, 0x13, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x04, 0x52, 0x10, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x49, 0x74,
	0x65, 0x6d, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69,
	0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x66,
	0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x22, 0x66, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12,
	0x15, 0x0a, 0x11, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4c, 0x45, 0x41, 0x47, 0x55, 0x45, 0x5f, 0x49,
	0x44, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x10, 0x03,
	0x22, 0xf8, 0x01, 0x0a, 0x2d, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x6f, 0x47, 0x43, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x43, 0x61, 0x72, 0x64, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x70, 0x0a, 0x11, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e,
	0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x6f, 0x47, 0x43, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x43, 0x61, 0x72, 0x64, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x10, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x73, 0x1a, 0x55, 0x0a, 0x0f, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x61, 0x67, 0x75,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x65, 0x61, 0x67,
	0x75, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x5f,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x66, 0x61,
	0x6e, 0x74, 0x61, 0x73, 0x79, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x22, 0xdd, 0x04, 0x0a, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64,
	0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61,
	0x0a, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x43, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x73, 0x1a, 0xdf, 0x02, 0x0a, 0x0e, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49,
	0x64, 0x12, 0x31, 0x0a, 0x14, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x13, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x53, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47,
	0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x52, 0x6f, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2d, 0x0a, 0x13, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x04, 0x52, 0x10, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x61,
	0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x22, 0x66, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0b, 0x0a,
	0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x4c, 0x45, 0x41, 0x47, 0x55, 0x45, 0x5f, 0x49, 0x44, 0x10, 0x02, 0x12, 0x1b,
	0x0a, 0x17, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x10, 0x03, 0x22, 0xff, 0x01, 0x0a, 0x28,
	0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x53, 0x65,
	0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x52, 0x6f, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x61, 0x67,
	0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x65, 0x61,
	0x67, 0x75, 0x65, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x14, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x13, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x2d, 0x0a, 0x13,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x43, 0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73,
	0x79, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x22, 0xb0, 0x03,
	0x0a, 0x29, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43,
	0x53, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x52, 0x6f, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x64, 0x6f,
	0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47,
	0x43, 0x53, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x52, 0x6f,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xb2, 0x02, 0x0a, 0x06,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4c, 0x45, 0x41, 0x47,
	0x55, 0x45, 0x5f, 0x49, 0x44, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41,
	0x4d, 0x50, 0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x50, 0x4c,
	0x41, 0x59, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4f, 0x57,
	0x4e, 0x45, 0x44, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x53, 0x4c, 0x4f, 0x54, 0x10, 0x05, 0x12, 0x1a, 0x0a,
	0x16, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x43, 0x41,
	0x52, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x06, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x44, 0x55, 0x50, 0x4c, 0x49,
	0x43, 0x41, 0x54, 0x45, 0x10, 0x07, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50,
	0x10, 0x08, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x4c, 0x45, 0x41, 0x47, 0x55, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x50,
	0x45, 0x52, 0x49, 0x4f, 0x44, 0x10, 0x09, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x0a,
	0x22, 0xc4, 0x03, 0x0a, 0x1e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x46, 0x61, 0x6e,
	0x74, 0x61, 0x73, 0x79, 0x44, 0x50, 0x43, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x52, 0x0a, 0x0c, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x64, 0x6f, 0x74, 0x61,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79,
	0x44, 0x50, 0x43, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x6c, 0x65, 0x61, 0x67,
	0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x1a, 0x8b, 0x02, 0x0a, 0x0a, 0x4c, 0x65, 0x61, 0x67,
	0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x65, 0x61, 0x67, 0x75,
	0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x23, 0x0a,
	0x0d, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d, 0x64, 0x61, 0x79, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x12, 0x4a, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x64, 0x6f, 0x74, 0x61,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79,
	0x44, 0x50, 0x43, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x45, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x40, 0x0a, 0x0d, 0x45, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x09, 0x0a, 0x05, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x08,
	0x0a, 0x04, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4e, 0x43,
	0x4c, 0x55, 0x44, 0x45, 0x44, 0x10, 0x03, 0x22, 0xb6, 0x04, 0x0a, 0x18, 0x43, 0x4d, 0x73, 0x67,
	0x44, 0x4f, 0x54, 0x41, 0x44, 0x50, 0x43, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x12, 0x3f, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x44, 0x4f, 0x54, 0x41, 0x44, 0x50, 0x43, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x07, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x39, 0x0a, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x44, 0x4f, 0x54, 0x41, 0x44, 0x50, 0x43, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73,
	0x12, 0x3f, 0x0a, 0x07, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54,
	0x41, 0x44, 0x50, 0x43, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x2e, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x52, 0x07, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65,
	0x73, 0x1a, 0x49, 0x0a, 0x06, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x3c, 0x0a, 0x04,
	0x54, 0x65, 0x61, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x1a, 0x2c, 0x0a, 0x06, 0x4c, 0x65,
	0x61, 0x67, 0x75, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xa5, 0x01, 0x0a, 0x15, 0x45, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x44, 0x65, 0x73, 0x69, 0x72,
	0x65, 0x64, 0x12, 0x23, 0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x73, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x44, 0x65, 0x73, 0x69, 0x72,
	0x65, 0x64, 0x5f, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x6b, 0x5f,
	0x45, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x44, 0x65,
	0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x73, 0x10, 0x04, 0x12,
	0x1f, 0x0a, 0x1b, 0x6b, 0x5f, 0x45, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x41, 0x6c, 0x6c, 0x10, 0x07,
	0x22, 0xa2, 0x01, 0x0a, 0x1f, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x44, 0x50, 0x43,
	0x54, 0x65, 0x61, 0x6d, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x6b,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x40, 0x0a, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44,
	0x4f, 0x54, 0x41, 0x44, 0x50, 0x43, 0x54, 0x65, 0x61, 0x6d, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69,
	0x74, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52,
	0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x1a, 0x3d, 0x0a, 0x04, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x17,
	0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x61, 0x76, 0x6f, 0x72,
	0x69, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x66, 0x61, 0x76, 0x6f,
	0x72, 0x69, 0x74, 0x65, 0x73, 0x22, 0x93, 0x05, 0x0a, 0x27, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x6f,
	0x74, 0x61, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x43, 0x72, 0x61, 0x66, 0x74, 0x69, 0x6e,
	0x67, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x5f, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x66, 0x61, 0x6e, 0x74, 0x61,
	0x73, 0x79, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x4e, 0x0a, 0x07, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x64, 0x6f, 0x74, 0x61,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x6f, 0x74, 0x61, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79,
	0x43, 0x72, 0x61, 0x66, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x52,
	0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x1a, 0xa0, 0x01, 0x0a, 0x03, 0x47, 0x65, 0x6d,
	0x12, 0x2a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x5f, 0x47, 0x65,
	0x6d, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x6c, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x73, 0x68, 0x61, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0x29, 0x0a, 0x04, 0x73, 0x74, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15,
	0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x5f, 0x53, 0x63,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x73, 0x74, 0x61, 0x74, 0x1a, 0xcd, 0x02, 0x0a, 0x06,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x36, 0x0a, 0x0c, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73,
	0x79, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x64,
	0x6f, 0x74, 0x61, 0x2e, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x5f, 0x52, 0x6f, 0x6c, 0x65,
	0x73, 0x52, 0x0b, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x45, 0x0a,
	0x04, 0x67, 0x65, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x64, 0x6f,
	0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x6f, 0x74, 0x61, 0x46, 0x61, 0x6e, 0x74, 0x61,
	0x73, 0x79, 0x43, 0x72, 0x61, 0x66, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x6d, 0x52, 0x04,
	0x67, 0x65, 0x6d, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x65,
	0x73, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x62, 0x65, 0x73, 0x74, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x22, 0x80, 0x02, 0x0a, 0x21,
	0x43, 0x4d, 0x73, 0x67, 0x44, 0x6f, 0x74, 0x61, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x43,
	0x72, 0x61, 0x66, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x6b, 0x0a, 0x12, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e,
	0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x6f, 0x74, 0x61, 0x46, 0x61, 0x6e,
	0x74, 0x61, 0x73, 0x79, 0x43, 0x72, 0x61, 0x66, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x6e,
	0x0a, 0x15, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x43, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x44, 0x6f, 0x74, 0x61, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x43,
	0x72, 0x61, 0x66, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x94,
	0x04, 0x0a, 0x1f, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x6f, 0x74, 0x61, 0x46, 0x61, 0x6e, 0x74, 0x61,
	0x73, 0x79, 0x43, 0x72, 0x61, 0x66, 0x74, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0e, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x6c, 0x6c, 0x73, 0x12, 0x69, 0x0a, 0x12, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x72, 0x6f, 0x6c, 0x6c, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x44, 0x6f, 0x74, 0x61, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x43, 0x72,
	0x61, 0x66, 0x74, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x6f, 0x6c, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x6f, 0x6c, 0x6c,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x5c, 0x0a, 0x0d, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x6f, 0x74, 0x61, 0x46, 0x61, 0x6e,
	0x74, 0x61, 0x73, 0x79, 0x43, 0x72, 0x61, 0x66, 0x74, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x73, 0x1a, 0x4e, 0x0a, 0x0b, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x69,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x69, 0x6c, 0x65, 0x1a, 0x3f, 0x0a, 0x15, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x6f,
	0x6c, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x6e, 0x0a, 0x11, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x47, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x64, 0x6f,
	0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x6f, 0x74, 0x61, 0x46, 0x61, 0x6e, 0x74, 0x61,
	0x73, 0x79, 0x43, 0x72, 0x61, 0x66, 0x74, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x9e, 0x02, 0x0a, 0x20, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x6f,
	0x74, 0x61, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x43, 0x72, 0x61, 0x66, 0x74, 0x69, 0x6e,
	0x67, 0x44, 0x61, 0x74, 0x61, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x56, 0x0a, 0x0d, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x6f, 0x74,
	0x61, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x43, 0x72, 0x61, 0x66, 0x74, 0x69, 0x6e, 0x67,
	0x44, 0x61, 0x74, 0x61, 0x43, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x63, 0x61, 0x63, 0x68, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x1a, 0xa1, 0x01, 0x0a, 0x0a, 0x43, 0x61, 0x63, 0x68, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x25, 0x0a, 0x0e, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x5f, 0x6c, 0x65, 0x61, 0x67,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73,
	0x79, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x12, 0x4d, 0x0a, 0x0a, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x64, 0x6f,
	0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x43, 0x72, 0x61, 0x66, 0x74, 0x69, 0x6e, 0x67,
	0x44, 0x61, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x52, 0x09, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x6c, 0x0a, 0x24, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x43,
	0x72, 0x61, 0x66, 0x74, 0x69, 0x6e, 0x67, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x25,
	0x0a, 0x0e, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x5f, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x4c,
	0x65, 0x61, 0x67, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x22, 0x90, 0x03, 0x0a, 0x2c, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x43, 0x72,
	0x61, 0x66, 0x74, 0x69, 0x6e, 0x67, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x46, 0x61, 0x6e,
	0x74, 0x61, 0x73, 0x79, 0x43, 0x72, 0x61, 0x66, 0x74, 0x69, 0x6e, 0x67, 0x47, 0x65, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x42, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x6f,
	0x74, 0x61, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x43, 0x72, 0x61, 0x66, 0x74, 0x69, 0x6e,
	0x67, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x48, 0x0a, 0x0b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x44, 0x6f, 0x74, 0x61, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x43,
	0x72, 0x61, 0x66, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0x78, 0x0a,
	0x09, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f,
	0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00,
	0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01,
	0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x6f, 0x42, 0x75, 0x73, 0x79, 0x10, 0x02,
	0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10,
	0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10,
	0x04, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4c,
	0x65, 0x61, 0x67, 0x75, 0x65, 0x10, 0x05, 0x22, 0xb5, 0x01, 0x0a, 0x2d, 0x43, 0x4d, 0x73, 0x67,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73,
	0x79, 0x43, 0x72, 0x61, 0x66, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x61, 0x6e,
	0x74, 0x61, 0x73, 0x79, 0x5f, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x22,
	0xc1, 0x06, 0x0a, 0x35, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f,
	0x47, 0x43, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x43, 0x72, 0x61, 0x66, 0x74, 0x69, 0x6e,
	0x67, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x45, 0x2e, 0x64, 0x6f,
	0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47,
	0x43, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x43, 0x72, 0x61, 0x66, 0x74, 0x69, 0x6e, 0x67,
	0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x6f, 0x74, 0x61, 0x46,
	0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x43, 0x72, 0x61, 0x66, 0x74, 0x69, 0x6e, 0x67, 0x55, 0x73,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x48, 0x0a, 0x0b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x44, 0x6f, 0x74, 0x61, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x43, 0x72, 0x61, 0x66,
	0x74, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x73, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x75, 0x66, 0x66,
	0x69, 0x78, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x0d, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x12,
	0x6c, 0x0a, 0x0d, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x46, 0x61, 0x6e, 0x74,
	0x61, 0x73, 0x79, 0x43, 0x72, 0x61, 0x66, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x52,
	0x0c, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x1a, 0x57, 0x0a,
	0x0b, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x43, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x5f, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78,
	0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x9a, 0x01, 0x0a, 0x09, 0x45, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f,
	0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f,
	0x65, 0x54, 0x6f, 0x6f, 0x42, 0x75, 0x73, 0x79, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f,
	0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x6b,
	0x5f, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x6b,
	0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x10,
	0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x4e, 0x6f, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73,
	0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x4d, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x10, 0x07, 0x22, 0xdf, 0x01, 0x0a, 0x28, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x43, 0x72, 0x61,
	0x66, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x25, 0x0a, 0x0e, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x5f, 0x6c, 0x65, 0x61, 0x67,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73,
	0x79, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x12, 0x42, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x64, 0x6f, 0x74,
	0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x6f, 0x74, 0x61, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73,
	0x79, 0x43, 0x72, 0x61, 0x66, 0x74, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x48, 0x0a, 0x0b, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x6f, 0x74, 0x61,
	0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x43, 0x72, 0x61, 0x66, 0x74, 0x69, 0x6e, 0x67, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0xed, 0x01, 0x0a, 0x2c, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x43,
	0x72, 0x61, 0x66, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x76, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73,
	0x79, 0x5f, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x12, 0x25,
	0x0a, 0x0e, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x22, 0xa0, 0x03, 0x0a, 0x34, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x43,
	0x72, 0x61, 0x66, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x76, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60,
	0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x44, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x43, 0x72, 0x61,
	0x66, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x76, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x42, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44,
	0x6f, 0x74, 0x61, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x43, 0x72, 0x61, 0x66, 0x74, 0x69,
	0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x48, 0x0a, 0x0b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x64, 0x6f, 0x74, 0x61,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x6f, 0x74, 0x61, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79,
	0x43, 0x72, 0x61, 0x66, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0x78,
	0x0a, 0x09, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b,
	0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10,
	0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10,
	0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x6f, 0x42, 0x75, 0x73, 0x79, 0x10,
	0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x10, 0x05, 0x22, 0x71, 0x0a, 0x29, 0x43, 0x4d, 0x73, 0x67,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73,
	0x79, 0x43, 0x72, 0x61, 0x66, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79,
	0x5f, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x66,
	0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xed, 0x02, 0x0a, 0x31,
	0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x46, 0x61,
	0x6e, 0x74, 0x61, 0x73, 0x79, 0x43, 0x72, 0x61, 0x66, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x5d, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x41, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79,
	0x43, 0x72, 0x61, 0x66, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x48, 0x0a, 0x0b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x44, 0x6f, 0x74, 0x61, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x43, 0x72, 0x61, 0x66,
	0x74, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0x8e, 0x01, 0x0a, 0x09, 0x45,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e,
	0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x0e,
	0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x6f, 0x42, 0x75, 0x73, 0x79, 0x10, 0x02, 0x12, 0x0f,
	0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x03, 0x12,
	0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10, 0x04, 0x12,
	0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4c, 0x65, 0x61,
	0x67, 0x75, 0x65, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x10, 0x06, 0x22, 0x76, 0x0a, 0x2c, 0x43,
	0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x46, 0x61, 0x6e,
	0x74, 0x61, 0x73, 0x79, 0x43, 0x72, 0x61, 0x66, 0x74, 0x69, 0x6e, 0x67, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x66,
	0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x5f, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x4c, 0x65, 0x61, 0x67,
	0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x73, 0x22, 0xb7, 0x03, 0x0a, 0x34, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x43, 0x72, 0x61,
	0x66, 0x74, 0x69, 0x6e, 0x67, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x08,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x44,
	0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x47, 0x43, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x43, 0x72, 0x61, 0x66, 0x74,
	0x69, 0x6e, 0x67, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42,
	0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x6f, 0x74,
	0x61, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x43, 0x72, 0x61, 0x66, 0x74, 0x69, 0x6e, 0x67,
	0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x48, 0x0a, 0x0b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x44, 0x6f, 0x74, 0x61, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x43, 0x72,
	0x61, 0x66, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0x8e, 0x01, 0x0a,
	0x09, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f,
	0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00,
	0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01,
	0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x6f, 0x42, 0x75, 0x73, 0x79, 0x10, 0x02,
	0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10,
	0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10,
	0x04, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4c,
	0x65, 0x61, 0x67, 0x75, 0x65, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x10, 0x06, 0x22, 0x54, 0x0a,
	0x2b, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x63, 0x46,
	0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x43, 0x72, 0x61, 0x66, 0x74, 0x69, 0x6e, 0x67, 0x55, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e,
	0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x5f, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x4c, 0x65, 0x61,
	0x67, 0x75, 0x65, 0x22, 0xda, 0x02, 0x0a, 0x33, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x47, 0x63, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x43, 0x72, 0x61,
	0x66, 0x74, 0x69, 0x6e, 0x67, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x43, 0x2e,
	0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x6f, 0x47, 0x63, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x43, 0x72, 0x61, 0x66, 0x74, 0x69,
	0x6e, 0x67, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x0b,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x6f, 0x74,
	0x61, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x43, 0x72, 0x61, 0x66, 0x74, 0x69, 0x6e, 0x67,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0x78, 0x0a, 0x09, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65,
	0x54, 0x6f, 0x6f, 0x42, 0x75, 0x73, 0x79, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f,
	0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x10, 0x05,
	0x22, 0x53, 0x0a, 0x2a, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f,
	0x47, 0x43, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x43, 0x72, 0x61, 0x66, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x72, 0x6f, 0x6c, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25,
	0x0a, 0x0e, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x5f, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x4c,
	0x65, 0x61, 0x67, 0x75, 0x65, 0x22, 0xee, 0x02, 0x0a, 0x32, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x43,
	0x72, 0x61, 0x66, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x72, 0x6f, 0x6c, 0x6c, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x08,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42,
	0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x47, 0x43, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x43, 0x72, 0x61, 0x66, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x72, 0x6f, 0x6c, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x6f, 0x74, 0x61, 0x46,
	0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x43, 0x72, 0x61, 0x66, 0x74, 0x69, 0x6e, 0x67, 0x55, 0x73,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x22, 0x93, 0x01, 0x0a, 0x09, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14,
	0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x6f, 0x42, 0x75,
	0x73, 0x79, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x6b,
	0x5f, 0x65, 0x49, 0x6e, 0x73, 0x75, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x73, 0x10, 0x06, 0x2a, 0xa3, 0x15, 0x0a, 0x21, 0x44, 0x4f, 0x54, 0x41, 0x5f,
	0x32, 0x30, 0x31, 0x33, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x19,
	0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x41, 0x4c, 0x4c, 0x53, 0x54, 0x41, 0x52,
	0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x30, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x50,
	0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x41, 0x4c, 0x4c, 0x53, 0x54, 0x41, 0x52, 0x5f,
	0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x31, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x50,
	0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x41, 0x4c, 0x4c, 0x53, 0x54, 0x41, 0x52, 0x5f, 0x50,
	0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x32, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x50, 0x31,
	0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x41, 0x4c, 0x4c, 0x53, 0x54, 0x41, 0x52, 0x5f, 0x50, 0x4c,
	0x41, 0x59, 0x45, 0x52, 0x5f, 0x33, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x50, 0x31, 0x33,
	0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x41, 0x4c, 0x4c, 0x53, 0x54, 0x41, 0x52, 0x5f, 0x50, 0x4c, 0x41,
	0x59, 0x45, 0x52, 0x5f, 0x34, 0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x50, 0x31, 0x33, 0x5f,
	0x53, 0x45, 0x4c, 0x5f, 0x41, 0x4c, 0x4c, 0x53, 0x54, 0x41, 0x52, 0x5f, 0x50, 0x4c, 0x41, 0x59,
	0x45, 0x52, 0x5f, 0x35, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53,
	0x45, 0x4c, 0x5f, 0x41, 0x4c, 0x4c, 0x53, 0x54, 0x41, 0x52, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45,
	0x52, 0x5f, 0x36, 0x10, 0x06, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45,
	0x4c, 0x5f, 0x41, 0x4c, 0x4c, 0x53, 0x54, 0x41, 0x52, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52,
	0x5f, 0x37, 0x10, 0x07, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c,
	0x5f, 0x41, 0x4c, 0x4c, 0x53, 0x54, 0x41, 0x52, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f,
	0x38, 0x10, 0x08, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f,
	0x41, 0x4c, 0x4c, 0x53, 0x54, 0x41, 0x52, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x39,
	0x10, 0x09, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x51,
	0x55, 0x41, 0x4c, 0x50, 0x52, 0x45, 0x44, 0x5f, 0x57, 0x45, 0x53, 0x54, 0x5f, 0x30, 0x10, 0x0a,
	0x12, 0x1c, 0x0a, 0x18, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x51, 0x55, 0x41,
	0x4c, 0x50, 0x52, 0x45, 0x44, 0x5f, 0x57, 0x45, 0x53, 0x54, 0x5f, 0x31, 0x10, 0x0b, 0x12, 0x1c,
	0x0a, 0x18, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x50,
	0x52, 0x45, 0x44, 0x5f, 0x57, 0x45, 0x53, 0x54, 0x5f, 0x32, 0x10, 0x0c, 0x12, 0x1c, 0x0a, 0x18,
	0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x50, 0x52, 0x45,
	0x44, 0x5f, 0x57, 0x45, 0x53, 0x54, 0x5f, 0x33, 0x10, 0x0d, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x50,
	0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x50, 0x52, 0x45, 0x44, 0x5f,
	0x57, 0x45, 0x53, 0x54, 0x5f, 0x34, 0x10, 0x0e, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x50, 0x31, 0x33,
	0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x50, 0x52, 0x45, 0x44, 0x5f, 0x57, 0x45,
	0x53, 0x54, 0x5f, 0x35, 0x10, 0x0f, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53,
	0x45, 0x4c, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x50, 0x52, 0x45, 0x44, 0x5f, 0x57, 0x45, 0x53, 0x54,
	0x5f, 0x36, 0x10, 0x10, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c,
	0x5f, 0x51, 0x55, 0x41, 0x4c, 0x50, 0x52, 0x45, 0x44, 0x5f, 0x57, 0x45, 0x53, 0x54, 0x5f, 0x37,
	0x10, 0x11, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x51,
	0x55, 0x41, 0x4c, 0x50, 0x52, 0x45, 0x44, 0x5f, 0x57, 0x45, 0x53, 0x54, 0x5f, 0x38, 0x10, 0x12,
	0x12, 0x1c, 0x0a, 0x18, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x51, 0x55, 0x41,
	0x4c, 0x50, 0x52, 0x45, 0x44, 0x5f, 0x57, 0x45, 0x53, 0x54, 0x5f, 0x39, 0x10, 0x13, 0x12, 0x1d,
	0x0a, 0x19, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x50,
	0x52, 0x45, 0x44, 0x5f, 0x57, 0x45, 0x53, 0x54, 0x5f, 0x31, 0x30, 0x10, 0x14, 0x12, 0x1d, 0x0a,
	0x19, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x50, 0x52,
	0x45, 0x44, 0x5f, 0x57, 0x45, 0x53, 0x54, 0x5f, 0x31, 0x31, 0x10, 0x15, 0x12, 0x1d, 0x0a, 0x19,
	0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x50, 0x52, 0x45,
	0x44, 0x5f, 0x57, 0x45, 0x53, 0x54, 0x5f, 0x31, 0x32, 0x10, 0x16, 0x12, 0x1d, 0x0a, 0x19, 0x50,
	0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x50, 0x52, 0x45, 0x44,
	0x5f, 0x57, 0x45, 0x53, 0x54, 0x5f, 0x31, 0x33, 0x10, 0x17, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x50,
	0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x50, 0x52, 0x45, 0x44, 0x5f,
	0x57, 0x45, 0x53, 0x54, 0x5f, 0x31, 0x34, 0x10, 0x18, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x50, 0x31,
	0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x50, 0x52, 0x45, 0x44, 0x5f, 0x45,
	0x41, 0x53, 0x54, 0x5f, 0x30, 0x10, 0x19, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x50, 0x31, 0x33, 0x5f,
	0x53, 0x45, 0x4c, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x50, 0x52, 0x45, 0x44, 0x5f, 0x45, 0x41, 0x53,
	0x54, 0x5f, 0x31, 0x10, 0x1a, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45,
	0x4c, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x50, 0x52, 0x45, 0x44, 0x5f, 0x45, 0x41, 0x53, 0x54, 0x5f,
	0x32, 0x10, 0x1b, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f,
	0x51, 0x55, 0x41, 0x4c, 0x50, 0x52, 0x45, 0x44, 0x5f, 0x45, 0x41, 0x53, 0x54, 0x5f, 0x33, 0x10,
	0x1c, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x51, 0x55,
	0x41, 0x4c, 0x50, 0x52, 0x45, 0x44, 0x5f, 0x45, 0x41, 0x53, 0x54, 0x5f, 0x34, 0x10, 0x1d, 0x12,
	0x1c, 0x0a, 0x18, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x51, 0x55, 0x41, 0x4c,
	0x50, 0x52, 0x45, 0x44, 0x5f, 0x45, 0x41, 0x53, 0x54, 0x5f, 0x35, 0x10, 0x1e, 0x12, 0x1c, 0x0a,
	0x18, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x50, 0x52,
	0x45, 0x44, 0x5f, 0x45, 0x41, 0x53, 0x54, 0x5f, 0x36, 0x10, 0x1f, 0x12, 0x1c, 0x0a, 0x18, 0x50,
	0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x50, 0x52, 0x45, 0x44,
	0x5f, 0x45, 0x41, 0x53, 0x54, 0x5f, 0x37, 0x10, 0x20, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x50, 0x31,
	0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x50, 0x52, 0x45, 0x44, 0x5f, 0x45,
	0x41, 0x53, 0x54, 0x5f, 0x38, 0x10, 0x21, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x50, 0x31, 0x33, 0x5f,
	0x53, 0x45, 0x4c, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x50, 0x52, 0x45, 0x44, 0x5f, 0x45, 0x41, 0x53,
	0x54, 0x5f, 0x39, 0x10, 0x22, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45,
	0x4c, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x50, 0x52, 0x45, 0x44, 0x5f, 0x45, 0x41, 0x53, 0x54, 0x5f,
	0x31, 0x30, 0x10, 0x23, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c,
	0x5f, 0x51, 0x55, 0x41, 0x4c, 0x50, 0x52, 0x45, 0x44, 0x5f, 0x45, 0x41, 0x53, 0x54, 0x5f, 0x31,
	0x31, 0x10, 0x24, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f,
	0x51, 0x55, 0x41, 0x4c, 0x50, 0x52, 0x45, 0x44, 0x5f, 0x45, 0x41, 0x53, 0x54, 0x5f, 0x31, 0x32,
	0x10, 0x25, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x51,
	0x55, 0x41, 0x4c, 0x50, 0x52, 0x45, 0x44, 0x5f, 0x45, 0x41, 0x53, 0x54, 0x5f, 0x31, 0x33, 0x10,
	0x26, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x51, 0x55,
	0x41, 0x4c, 0x50, 0x52, 0x45, 0x44, 0x5f, 0x45, 0x41, 0x53, 0x54, 0x5f, 0x31, 0x34, 0x10, 0x27,
	0x12, 0x19, 0x0a, 0x15, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x54, 0x45, 0x41,
	0x4d, 0x43, 0x55, 0x50, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x10, 0x28, 0x12, 0x1b, 0x0a, 0x17, 0x50,
	0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x43, 0x55, 0x50, 0x5f,
	0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x10, 0x29, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x50, 0x31, 0x33,
	0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x43, 0x55, 0x50, 0x5f, 0x54, 0x45, 0x41,
	0x4d, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x2a, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x50, 0x31, 0x33,
	0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x43, 0x55, 0x50, 0x5f, 0x50, 0x4c, 0x41,
	0x59, 0x45, 0x52, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x2b, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x50,
	0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x50, 0x52, 0x45, 0x44,
	0x5f, 0x30, 0x10, 0x2c, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x50, 0x52, 0x45, 0x44, 0x5f, 0x31, 0x10, 0x2d, 0x12, 0x18,
	0x0a, 0x14, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x50, 0x52, 0x45, 0x44, 0x5f, 0x32, 0x10, 0x2e, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x50, 0x31, 0x33,
	0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x50, 0x52, 0x45, 0x44, 0x5f, 0x33,
	0x10, 0x2f, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x50, 0x52, 0x45, 0x44, 0x5f, 0x34, 0x10, 0x30, 0x12, 0x18, 0x0a, 0x14,
	0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x50, 0x52,
	0x45, 0x44, 0x5f, 0x35, 0x10, 0x31, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53,
	0x45, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x50, 0x52, 0x45, 0x44, 0x5f, 0x36, 0x10, 0x32,
	0x12, 0x18, 0x0a, 0x14, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x50, 0x52, 0x45, 0x44, 0x5f, 0x37, 0x10, 0x33, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x50,
	0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x50, 0x52, 0x45, 0x44,
	0x5f, 0x38, 0x10, 0x34, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x50, 0x52, 0x45, 0x44, 0x5f, 0x39, 0x10, 0x35, 0x12, 0x19,
	0x0a, 0x15, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x50, 0x52, 0x45, 0x44, 0x5f, 0x31, 0x30, 0x10, 0x36, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x50, 0x31,
	0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x50, 0x52, 0x45, 0x44, 0x5f,
	0x31, 0x31, 0x10, 0x37, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x50, 0x52, 0x45, 0x44, 0x5f, 0x31, 0x32, 0x10, 0x38, 0x12,
	0x19, 0x0a, 0x15, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x50, 0x52, 0x45, 0x44, 0x5f, 0x31, 0x33, 0x10, 0x39, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x50,
	0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x50, 0x52, 0x45, 0x44,
	0x5f, 0x31, 0x34, 0x10, 0x3a, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45,
	0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x50, 0x52, 0x45, 0x44, 0x5f, 0x31, 0x35, 0x10, 0x3b,
	0x12, 0x19, 0x0a, 0x15, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x50, 0x52, 0x45, 0x44, 0x5f, 0x31, 0x36, 0x10, 0x3c, 0x12, 0x19, 0x0a, 0x15, 0x50,
	0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x50, 0x52, 0x45,
	0x44, 0x5f, 0x31, 0x37, 0x10, 0x3d, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53,
	0x45, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x50, 0x52, 0x45, 0x44, 0x5f, 0x31, 0x38, 0x10,
	0x3e, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x50, 0x52, 0x45, 0x44, 0x5f, 0x31, 0x39, 0x10, 0x3f, 0x12, 0x19, 0x0a, 0x15,
	0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x50, 0x52,
	0x45, 0x44, 0x5f, 0x32, 0x30, 0x10, 0x40, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x50, 0x31, 0x33, 0x5f,
	0x53, 0x45, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x50, 0x52, 0x45, 0x44, 0x5f, 0x32, 0x31,
	0x10, 0x41, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x50, 0x52, 0x45, 0x44, 0x5f, 0x32, 0x32, 0x10, 0x42, 0x12, 0x19, 0x0a,
	0x15, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x50,
	0x52, 0x45, 0x44, 0x5f, 0x32, 0x33, 0x10, 0x43, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x50, 0x31, 0x33,
	0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x50, 0x52, 0x45, 0x44, 0x5f, 0x32,
	0x34, 0x10, 0x44, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x50, 0x52, 0x45, 0x44, 0x5f, 0x32, 0x35, 0x10, 0x45, 0x12, 0x19,
	0x0a, 0x15, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x50, 0x52, 0x45, 0x44, 0x5f, 0x32, 0x36, 0x10, 0x46, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x50, 0x31,
	0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x50, 0x52, 0x45, 0x44, 0x5f,
	0x32, 0x37, 0x10, 0x47, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x50, 0x52, 0x45, 0x44, 0x5f, 0x32, 0x38, 0x10, 0x48, 0x12,
	0x19, 0x0a, 0x15, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x50, 0x52, 0x45, 0x44, 0x5f, 0x32, 0x39, 0x10, 0x49, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x50,
	0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x50, 0x52, 0x45, 0x44,
	0x5f, 0x33, 0x30, 0x10, 0x4a, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45,
	0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x50, 0x52, 0x45, 0x44, 0x5f, 0x33, 0x31, 0x10, 0x4b,
	0x12, 0x19, 0x0a, 0x15, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x50, 0x52, 0x45, 0x44, 0x5f, 0x33, 0x32, 0x10, 0x4c, 0x12, 0x19, 0x0a, 0x15, 0x50,
	0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x50, 0x52, 0x45,
	0x44, 0x5f, 0x33, 0x33, 0x10, 0x4d, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53,
	0x45, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x50, 0x52, 0x45, 0x44, 0x5f, 0x33, 0x34, 0x10,
	0x4e, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x50, 0x52, 0x45, 0x44, 0x5f, 0x33, 0x35, 0x10, 0x4f, 0x12, 0x19, 0x0a, 0x15,
	0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x50, 0x52,
	0x45, 0x44, 0x5f, 0x33, 0x36, 0x10, 0x50, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x50, 0x31, 0x33, 0x5f,
	0x53, 0x45, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x50, 0x52, 0x45, 0x44, 0x5f, 0x33, 0x37,
	0x10, 0x51, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x50, 0x52, 0x45, 0x44, 0x5f, 0x33, 0x38, 0x10, 0x52, 0x12, 0x19, 0x0a,
	0x15, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x50,
	0x52, 0x45, 0x44, 0x5f, 0x33, 0x39, 0x10, 0x53, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x50, 0x31, 0x33,
	0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x50, 0x52, 0x45, 0x44, 0x5f, 0x34,
	0x30, 0x10, 0x54, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x50, 0x52, 0x45, 0x44, 0x5f, 0x34, 0x31, 0x10, 0x55, 0x12, 0x19,
	0x0a, 0x15, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x50, 0x52, 0x45, 0x44, 0x5f, 0x34, 0x32, 0x10, 0x56, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x50, 0x31,
	0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x50, 0x52, 0x45, 0x44, 0x5f,
	0x34, 0x33, 0x10, 0x57, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c,
	0x5f, 0x53, 0x4f, 0x4c, 0x4f, 0x5f, 0x30, 0x10, 0x58, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x50, 0x31,
	0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x53, 0x4f, 0x4c, 0x4f, 0x5f, 0x31, 0x10, 0x59, 0x12, 0x13,
	0x0a, 0x0f, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x53, 0x4f, 0x4c, 0x4f, 0x5f,
	0x32, 0x10, 0x5a, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f,
	0x53, 0x4f, 0x4c, 0x4f, 0x5f, 0x33, 0x10, 0x5b, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x50, 0x31, 0x33,
	0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x53, 0x4f, 0x4c, 0x4f, 0x5f, 0x34, 0x10, 0x5c, 0x12, 0x13, 0x0a,
	0x0f, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x53, 0x4f, 0x4c, 0x4f, 0x5f, 0x35,
	0x10, 0x5d, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x50, 0x31, 0x33, 0x5f, 0x53, 0x45, 0x4c, 0x5f, 0x53,
	0x4f, 0x4c, 0x4f, 0x5f, 0x36, 0x10, 0x5e, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x50, 0x31, 0x33, 0x5f,
	0x53, 0x45, 0x4c, 0x5f, 0x53, 0x4f, 0x4c, 0x4f, 0x5f, 0x37, 0x10, 0x5f, 0x42, 0x25, 0x5a, 0x23,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x74, 0x61, 0x62,
	0x75, 0x66, 0x66, 0x2f, 0x6d, 0x61, 0x6e, 0x74, 0x61, 0x2f, 0x64, 0x6f, 0x74, 0x61, 0x3b, 0x64,
	0x6f, 0x74, 0x61,
}

var (
	file_dota_gcmessages_client_fantasy_proto_rawDescOnce sync.Once
	file_dota_gcmessages_client_fantasy_proto_rawDescData = file_dota_gcmessages_client_fantasy_proto_rawDesc
)

func file_dota_gcmessages_client_fantasy_proto_rawDescGZIP() []byte {
	file_dota_gcmessages_client_fantasy_proto_rawDescOnce.Do(func() {
		file_dota_gcmessages_client_fantasy_proto_rawDescData = protoimpl.X.CompressGZIP(file_dota_gcmessages_client_fantasy_proto_rawDescData)
	})
	return file_dota_gcmessages_client_fantasy_proto_rawDescData
}

var file_dota_gcmessages_client_fantasy_proto_enumTypes = make([]protoimpl.EnumInfo, 13)
var file_dota_gcmessages_client_fantasy_proto_msgTypes = make([]protoimpl.MessageInfo, 58)
var file_dota_gcmessages_client_fantasy_proto_goTypes = []interface{}{
	(DOTA_2013PassportSelectionIndices)(0),                                    // 0: dota.DOTA_2013PassportSelectionIndices
	(CMsgClientToGCGetPlayerCardRosterResponse_Result)(0),                     // 1: dota.CMsgClientToGCGetPlayerCardRosterResponse.Result
	(CMsgClientToGCBatchGetPlayerCardRosterResponse_Result)(0),                // 2: dota.CMsgClientToGCBatchGetPlayerCardRosterResponse.Result
	(CMsgClientToGCSetPlayerCardRosterResponse_Result)(0),                     // 3: dota.CMsgClientToGCSetPlayerCardRosterResponse.Result
	(CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus)(0),                         // 4: dota.CMsgDOTAFantasyDPCLeagueStatus.ERosterStatus
	(CMsgDOTADPCSearchResults_ESearchResultsDesired)(0),                       // 5: dota.CMsgDOTADPCSearchResults.ESearchResultsDesired
	(CMsgClientToGCFantasyCraftingGetDataResponse_EResponse)(0),               // 6: dota.CMsgClientToGCFantasyCraftingGetDataResponse.EResponse
	(CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse)(0),      // 7: dota.CMsgClientToGCFantasyCraftingPerformOperationResponse.EResponse
	(CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse)(0),       // 8: dota.CMsgClientToGCFantasyCraftingDevModifyTabletResponse.EResponse
	(CMsgClientToGCFantasyCraftingSelectPlayerResponse_EResponse)(0),          // 9: dota.CMsgClientToGCFantasyCraftingSelectPlayerResponse.EResponse
	(CMsgClientToGCFantasyCraftingGenerateTabletsResponse_EResponse)(0),       // 10: dota.CMsgClientToGCFantasyCraftingGenerateTabletsResponse.EResponse
	(CMsgClientToGcFantasyCraftingUpgradeTabletsResponse_EResponse)(0),        // 11: dota.CMsgClientToGcFantasyCraftingUpgradeTabletsResponse.EResponse
	(CMsgClientToGCFantasyCraftingRerollOptionsResponse_EResponse)(0),         // 12: dota.CMsgClientToGCFantasyCraftingRerollOptionsResponse.EResponse
	(*CMsgDOTAPlayerInfo)(nil),                                                // 13: dota.CMsgDOTAPlayerInfo
	(*CMsgDOTAPlayerInfoList)(nil),                                            // 14: dota.CMsgDOTAPlayerInfoList
	(*CMsgDOTATeamRoster)(nil),                                                // 15: dota.CMsgDOTATeamRoster
	(*CMsgDOTADPCProfileInfo)(nil),                                            // 16: dota.CMsgDOTADPCProfileInfo
	(*CMsgDOTALeaderboards)(nil),                                              // 17: dota.CMsgDOTALeaderboards
	(*CMsgDOTAPassportVoteTeamGuess)(nil),                                     // 18: dota.CMsgDOTAPassportVoteTeamGuess
	(*CMsgDOTAPassportVoteGenericSelection)(nil),                              // 19: dota.CMsgDOTAPassportVoteGenericSelection
	(*CMsgDOTAPassportStampedPlayer)(nil),                                     // 20: dota.CMsgDOTAPassportStampedPlayer
	(*CMsgDOTAPassportPlayerCardChallenge)(nil),                               // 21: dota.CMsgDOTAPassportPlayerCardChallenge
	(*CMsgDOTAPassportVote)(nil),                                              // 22: dota.CMsgDOTAPassportVote
	(*CMsgClientToGCGetPlayerCardRosterRequest)(nil),                          // 23: dota.CMsgClientToGCGetPlayerCardRosterRequest
	(*CMsgClientToGCGetPlayerCardRosterResponse)(nil),                         // 24: dota.CMsgClientToGCGetPlayerCardRosterResponse
	(*CMsgClientToGCBatchGetPlayerCardRosterRequest)(nil),                     // 25: dota.CMsgClientToGCBatchGetPlayerCardRosterRequest
	(*CMsgClientToGCBatchGetPlayerCardRosterResponse)(nil),                    // 26: dota.CMsgClientToGCBatchGetPlayerCardRosterResponse
	(*CMsgClientToGCSetPlayerCardRosterRequest)(nil),                          // 27: dota.CMsgClientToGCSetPlayerCardRosterRequest
	(*CMsgClientToGCSetPlayerCardRosterResponse)(nil),                         // 28: dota.CMsgClientToGCSetPlayerCardRosterResponse
	(*CMsgDOTAFantasyDPCLeagueStatus)(nil),                                    // 29: dota.CMsgDOTAFantasyDPCLeagueStatus
	(*CMsgDOTADPCSearchResults)(nil),                                          // 30: dota.CMsgDOTADPCSearchResults
	(*CMsgDOTADPCTeamFavoriteRankings)(nil),                                   // 31: dota.CMsgDOTADPCTeamFavoriteRankings
	(*CMsgDotaFantasyCraftingTabletPeriodData)(nil),                           // 32: dota.CMsgDotaFantasyCraftingTabletPeriodData
	(*CMsgDotaFantasyCraftingTabletData)(nil),                                 // 33: dota.CMsgDotaFantasyCraftingTabletData
	(*CMsgDotaFantasyCraftingUserData)(nil),                                   // 34: dota.CMsgDotaFantasyCraftingUserData
	(*CMsgDotaFantasyCraftingDataCache)(nil),                                  // 35: dota.CMsgDotaFantasyCraftingDataCache
	(*CMsgClientToGCFantasyCraftingGetData)(nil),                              // 36: dota.CMsgClientToGCFantasyCraftingGetData
	(*CMsgClientToGCFantasyCraftingGetDataResponse)(nil),                      // 37: dota.CMsgClientToGCFantasyCraftingGetDataResponse
	(*CMsgClientToGCFantasyCraftingPerformOperation)(nil),                     // 38: dota.CMsgClientToGCFantasyCraftingPerformOperation
	(*CMsgClientToGCFantasyCraftingPerformOperationResponse)(nil),             // 39: dota.CMsgClientToGCFantasyCraftingPerformOperationResponse
	(*CMsgGCToClientFantasyCraftingDataUpdated)(nil),                          // 40: dota.CMsgGCToClientFantasyCraftingDataUpdated
	(*CMsgClientToGCFantasyCraftingDevModifyTablet)(nil),                      // 41: dota.CMsgClientToGCFantasyCraftingDevModifyTablet
	(*CMsgClientToGCFantasyCraftingDevModifyTabletResponse)(nil),              // 42: dota.CMsgClientToGCFantasyCraftingDevModifyTabletResponse
	(*CMsgClientToGCFantasyCraftingSelectPlayer)(nil),                         // 43: dota.CMsgClientToGCFantasyCraftingSelectPlayer
	(*CMsgClientToGCFantasyCraftingSelectPlayerResponse)(nil),                 // 44: dota.CMsgClientToGCFantasyCraftingSelectPlayerResponse
	(*CMsgClientToGCFantasyCraftingGenerateTablets)(nil),                      // 45: dota.CMsgClientToGCFantasyCraftingGenerateTablets
	(*CMsgClientToGCFantasyCraftingGenerateTabletsResponse)(nil),              // 46: dota.CMsgClientToGCFantasyCraftingGenerateTabletsResponse
	(*CMsgClientToGcFantasyCraftingUpgradeTablets)(nil),                       // 47: dota.CMsgClientToGcFantasyCraftingUpgradeTablets
	(*CMsgClientToGcFantasyCraftingUpgradeTabletsResponse)(nil),               // 48: dota.CMsgClientToGcFantasyCraftingUpgradeTabletsResponse
	(*CMsgClientToGCFantasyCraftingRerollOptions)(nil),                        // 49: dota.CMsgClientToGCFantasyCraftingRerollOptions
	(*CMsgClientToGCFantasyCraftingRerollOptionsResponse)(nil),                // 50: dota.CMsgClientToGCFantasyCraftingRerollOptionsResponse
	(*CMsgDOTAPlayerInfo_Results)(nil),                                        // 51: dota.CMsgDOTAPlayerInfo.Results
	(*CMsgDOTAPlayerInfo_AuditEntry)(nil),                                     // 52: dota.CMsgDOTAPlayerInfo.AuditEntry
	(*CMsgDOTADPCProfileInfo_PredictionInfo)(nil),                             // 53: dota.CMsgDOTADPCProfileInfo.PredictionInfo
	(*CMsgDOTADPCProfileInfo_FantasyInfo)(nil),                                // 54: dota.CMsgDOTADPCProfileInfo.FantasyInfo
	(*CMsgDOTALeaderboards_RegionLeaderboard)(nil),                            // 55: dota.CMsgDOTALeaderboards.RegionLeaderboard
	(*CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp)(nil),     // 56: dota.CMsgClientToGCBatchGetPlayerCardRosterRequest.LeagueTimestamp
	(*CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse)(nil),     // 57: dota.CMsgClientToGCBatchGetPlayerCardRosterResponse.RosterResponse
	(*CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo)(nil),                         // 58: dota.CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo
	(*CMsgDOTADPCSearchResults_Player)(nil),                                   // 59: dota.CMsgDOTADPCSearchResults.Player
	(*CMsgDOTADPCSearchResults_Team)(nil),                                     // 60: dota.CMsgDOTADPCSearchResults.Team
	(*CMsgDOTADPCSearchResults_League)(nil),                                   // 61: dota.CMsgDOTADPCSearchResults.League
	(*CMsgDOTADPCTeamFavoriteRankings_Team)(nil),                              // 62: dota.CMsgDOTADPCTeamFavoriteRankings.Team
	(*CMsgDotaFantasyCraftingTabletPeriodData_Gem)(nil),                       // 63: dota.CMsgDotaFantasyCraftingTabletPeriodData.Gem
	(*CMsgDotaFantasyCraftingTabletPeriodData_Tablet)(nil),                    // 64: dota.CMsgDotaFantasyCraftingTabletPeriodData.Tablet
	(*CMsgDotaFantasyCraftingTabletData_TabletPeriodDataEntry)(nil),           // 65: dota.CMsgDotaFantasyCraftingTabletData.TabletPeriodDataEntry
	(*CMsgDotaFantasyCraftingUserData_PeriodScore)(nil),                       // 66: dota.CMsgDotaFantasyCraftingUserData.PeriodScore
	(*CMsgDotaFantasyCraftingUserData_PeriodRollTokensEntry)(nil),             // 67: dota.CMsgDotaFantasyCraftingUserData.PeriodRollTokensEntry
	(*CMsgDotaFantasyCraftingUserData_PeriodScoresEntry)(nil),                 // 68: dota.CMsgDotaFantasyCraftingUserData.PeriodScoresEntry
	(*CMsgDotaFantasyCraftingDataCache_CacheEntry)(nil),                       // 69: dota.CMsgDotaFantasyCraftingDataCache.CacheEntry
	(*CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice)(nil), // 70: dota.CMsgClientToGCFantasyCraftingPerformOperationResponse.TitleChoice
	(Fantasy_Roles)(0),    // 71: dota.Fantasy_Roles
	(Fantasy_Gem_Type)(0), // 72: dota.Fantasy_Gem_Type
	(Fantasy_Scoring)(0),  // 73: dota.Fantasy_Scoring
}
var file_dota_gcmessages_client_fantasy_proto_depIdxs = []int32{
	71, // 0: dota.CMsgDOTAPlayerInfo.fantasy_role:type_name -> dota.Fantasy_Roles
	51, // 1: dota.CMsgDOTAPlayerInfo.results:type_name -> dota.CMsgDOTAPlayerInfo.Results
	52, // 2: dota.CMsgDOTAPlayerInfo.audit_entries:type_name -> dota.CMsgDOTAPlayerInfo.AuditEntry
	13, // 3: dota.CMsgDOTAPlayerInfoList.player_infos:type_name -> dota.CMsgDOTAPlayerInfo
	13, // 4: dota.CMsgDOTADPCProfileInfo.player_info:type_name -> dota.CMsgDOTAPlayerInfo
	53, // 5: dota.CMsgDOTADPCProfileInfo.prediction_info:type_name -> dota.CMsgDOTADPCProfileInfo.PredictionInfo
	54, // 6: dota.CMsgDOTADPCProfileInfo.fantasy_info:type_name -> dota.CMsgDOTADPCProfileInfo.FantasyInfo
	55, // 7: dota.CMsgDOTALeaderboards.leaderboards:type_name -> dota.CMsgDOTALeaderboards.RegionLeaderboard
	0,  // 8: dota.CMsgDOTAPassportVoteGenericSelection.selection_index:type_name -> dota.DOTA_2013PassportSelectionIndices
	18, // 9: dota.CMsgDOTAPassportVote.team_votes:type_name -> dota.CMsgDOTAPassportVoteTeamGuess
	19, // 10: dota.CMsgDOTAPassportVote.generic_selections:type_name -> dota.CMsgDOTAPassportVoteGenericSelection
	20, // 11: dota.CMsgDOTAPassportVote.stamped_players:type_name -> dota.CMsgDOTAPassportStampedPlayer
	21, // 12: dota.CMsgDOTAPassportVote.player_card_challenges:type_name -> dota.CMsgDOTAPassportPlayerCardChallenge
	1,  // 13: dota.CMsgClientToGCGetPlayerCardRosterResponse.result:type_name -> dota.CMsgClientToGCGetPlayerCardRosterResponse.Result
	56, // 14: dota.CMsgClientToGCBatchGetPlayerCardRosterRequest.league_timestamps:type_name -> dota.CMsgClientToGCBatchGetPlayerCardRosterRequest.LeagueTimestamp
	57, // 15: dota.CMsgClientToGCBatchGetPlayerCardRosterResponse.responses:type_name -> dota.CMsgClientToGCBatchGetPlayerCardRosterResponse.RosterResponse
	3,  // 16: dota.CMsgClientToGCSetPlayerCardRosterResponse.result:type_name -> dota.CMsgClientToGCSetPlayerCardRosterResponse.Result
	58, // 17: dota.CMsgDOTAFantasyDPCLeagueStatus.league_infos:type_name -> dota.CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo
	59, // 18: dota.CMsgDOTADPCSearchResults.players:type_name -> dota.CMsgDOTADPCSearchResults.Player
	60, // 19: dota.CMsgDOTADPCSearchResults.teams:type_name -> dota.CMsgDOTADPCSearchResults.Team
	61, // 20: dota.CMsgDOTADPCSearchResults.leagues:type_name -> dota.CMsgDOTADPCSearchResults.League
	62, // 21: dota.CMsgDOTADPCTeamFavoriteRankings.teams:type_name -> dota.CMsgDOTADPCTeamFavoriteRankings.Team
	64, // 22: dota.CMsgDotaFantasyCraftingTabletPeriodData.tablets:type_name -> dota.CMsgDotaFantasyCraftingTabletPeriodData.Tablet
	65, // 23: dota.CMsgDotaFantasyCraftingTabletData.tablet_period_data:type_name -> dota.CMsgDotaFantasyCraftingTabletData.TabletPeriodDataEntry
	67, // 24: dota.CMsgDotaFantasyCraftingUserData.period_roll_tokens:type_name -> dota.CMsgDotaFantasyCraftingUserData.PeriodRollTokensEntry
	68, // 25: dota.CMsgDotaFantasyCraftingUserData.period_scores:type_name -> dota.CMsgDotaFantasyCraftingUserData.PeriodScoresEntry
	69, // 26: dota.CMsgDotaFantasyCraftingDataCache.cache_entries:type_name -> dota.CMsgDotaFantasyCraftingDataCache.CacheEntry
	6,  // 27: dota.CMsgClientToGCFantasyCraftingGetDataResponse.response:type_name -> dota.CMsgClientToGCFantasyCraftingGetDataResponse.EResponse
	34, // 28: dota.CMsgClientToGCFantasyCraftingGetDataResponse.user_data:type_name -> dota.CMsgDotaFantasyCraftingUserData
	33, // 29: dota.CMsgClientToGCFantasyCraftingGetDataResponse.tablet_data:type_name -> dota.CMsgDotaFantasyCraftingTabletData
	7,  // 30: dota.CMsgClientToGCFantasyCraftingPerformOperationResponse.response:type_name -> dota.CMsgClientToGCFantasyCraftingPerformOperationResponse.EResponse
	34, // 31: dota.CMsgClientToGCFantasyCraftingPerformOperationResponse.user_data:type_name -> dota.CMsgDotaFantasyCraftingUserData
	33, // 32: dota.CMsgClientToGCFantasyCraftingPerformOperationResponse.tablet_data:type_name -> dota.CMsgDotaFantasyCraftingTabletData
	70, // 33: dota.CMsgClientToGCFantasyCraftingPerformOperationResponse.title_choices:type_name -> dota.CMsgClientToGCFantasyCraftingPerformOperationResponse.TitleChoice
	34, // 34: dota.CMsgGCToClientFantasyCraftingDataUpdated.user_data:type_name -> dota.CMsgDotaFantasyCraftingUserData
	33, // 35: dota.CMsgGCToClientFantasyCraftingDataUpdated.tablet_data:type_name -> dota.CMsgDotaFantasyCraftingTabletData
	8,  // 36: dota.CMsgClientToGCFantasyCraftingDevModifyTabletResponse.response:type_name -> dota.CMsgClientToGCFantasyCraftingDevModifyTabletResponse.EResponse
	34, // 37: dota.CMsgClientToGCFantasyCraftingDevModifyTabletResponse.user_data:type_name -> dota.CMsgDotaFantasyCraftingUserData
	33, // 38: dota.CMsgClientToGCFantasyCraftingDevModifyTabletResponse.tablet_data:type_name -> dota.CMsgDotaFantasyCraftingTabletData
	9,  // 39: dota.CMsgClientToGCFantasyCraftingSelectPlayerResponse.response:type_name -> dota.CMsgClientToGCFantasyCraftingSelectPlayerResponse.EResponse
	33, // 40: dota.CMsgClientToGCFantasyCraftingSelectPlayerResponse.tablet_data:type_name -> dota.CMsgDotaFantasyCraftingTabletData
	10, // 41: dota.CMsgClientToGCFantasyCraftingGenerateTabletsResponse.response:type_name -> dota.CMsgClientToGCFantasyCraftingGenerateTabletsResponse.EResponse
	34, // 42: dota.CMsgClientToGCFantasyCraftingGenerateTabletsResponse.user_data:type_name -> dota.CMsgDotaFantasyCraftingUserData
	33, // 43: dota.CMsgClientToGCFantasyCraftingGenerateTabletsResponse.tablet_data:type_name -> dota.CMsgDotaFantasyCraftingTabletData
	11, // 44: dota.CMsgClientToGcFantasyCraftingUpgradeTabletsResponse.response:type_name -> dota.CMsgClientToGcFantasyCraftingUpgradeTabletsResponse.EResponse
	33, // 45: dota.CMsgClientToGcFantasyCraftingUpgradeTabletsResponse.tablet_data:type_name -> dota.CMsgDotaFantasyCraftingTabletData
	12, // 46: dota.CMsgClientToGCFantasyCraftingRerollOptionsResponse.response:type_name -> dota.CMsgClientToGCFantasyCraftingRerollOptionsResponse.EResponse
	34, // 47: dota.CMsgClientToGCFantasyCraftingRerollOptionsResponse.user_data:type_name -> dota.CMsgDotaFantasyCraftingUserData
	2,  // 48: dota.CMsgClientToGCBatchGetPlayerCardRosterResponse.RosterResponse.result:type_name -> dota.CMsgClientToGCBatchGetPlayerCardRosterResponse.Result
	4,  // 49: dota.CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo.status:type_name -> dota.CMsgDOTAFantasyDPCLeagueStatus.ERosterStatus
	72, // 50: dota.CMsgDotaFantasyCraftingTabletPeriodData.Gem.type:type_name -> dota.Fantasy_Gem_Type
	73, // 51: dota.CMsgDotaFantasyCraftingTabletPeriodData.Gem.stat:type_name -> dota.Fantasy_Scoring
	71, // 52: dota.CMsgDotaFantasyCraftingTabletPeriodData.Tablet.fantasy_role:type_name -> dota.Fantasy_Roles
	63, // 53: dota.CMsgDotaFantasyCraftingTabletPeriodData.Tablet.gems:type_name -> dota.CMsgDotaFantasyCraftingTabletPeriodData.Gem
	32, // 54: dota.CMsgDotaFantasyCraftingTabletData.TabletPeriodDataEntry.value:type_name -> dota.CMsgDotaFantasyCraftingTabletPeriodData
	66, // 55: dota.CMsgDotaFantasyCraftingUserData.PeriodScoresEntry.value:type_name -> dota.CMsgDotaFantasyCraftingUserData.PeriodScore
	40, // 56: dota.CMsgDotaFantasyCraftingDataCache.CacheEntry.cache_data:type_name -> dota.CMsgGCToClientFantasyCraftingDataUpdated
	57, // [57:57] is the sub-list for method output_type
	57, // [57:57] is the sub-list for method input_type
	57, // [57:57] is the sub-list for extension type_name
	57, // [57:57] is the sub-list for extension extendee
	0,  // [0:57] is the sub-list for field type_name
}

func init() { file_dota_gcmessages_client_fantasy_proto_init() }
func file_dota_gcmessages_client_fantasy_proto_init() {
	if File_dota_gcmessages_client_fantasy_proto != nil {
		return
	}
	file_dota_shared_enums_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_dota_gcmessages_client_fantasy_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAPlayerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAPlayerInfoList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTATeamRoster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTADPCProfileInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTALeaderboards); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAPassportVoteTeamGuess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAPassportVoteGenericSelection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAPassportStampedPlayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAPassportPlayerCardChallenge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAPassportVote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCGetPlayerCardRosterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCGetPlayerCardRosterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCBatchGetPlayerCardRosterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCBatchGetPlayerCardRosterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCSetPlayerCardRosterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCSetPlayerCardRosterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAFantasyDPCLeagueStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTADPCSearchResults); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTADPCTeamFavoriteRankings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDotaFantasyCraftingTabletPeriodData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDotaFantasyCraftingTabletData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDotaFantasyCraftingUserData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDotaFantasyCraftingDataCache); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCFantasyCraftingGetData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCFantasyCraftingGetDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCFantasyCraftingPerformOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCFantasyCraftingPerformOperationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCToClientFantasyCraftingDataUpdated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCFantasyCraftingDevModifyTablet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCFantasyCraftingDevModifyTabletResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCFantasyCraftingSelectPlayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCFantasyCraftingSelectPlayerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCFantasyCraftingGenerateTablets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCFantasyCraftingGenerateTabletsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGcFantasyCraftingUpgradeTablets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGcFantasyCraftingUpgradeTabletsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCFantasyCraftingRerollOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCFantasyCraftingRerollOptionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAPlayerInfo_Results); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAPlayerInfo_AuditEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTADPCProfileInfo_PredictionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTADPCProfileInfo_FantasyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTALeaderboards_RegionLeaderboard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTADPCSearchResults_Player); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTADPCSearchResults_Team); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTADPCSearchResults_League); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTADPCTeamFavoriteRankings_Team); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDotaFantasyCraftingTabletPeriodData_Gem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDotaFantasyCraftingTabletPeriodData_Tablet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDotaFantasyCraftingTabletData_TabletPeriodDataEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDotaFantasyCraftingUserData_PeriodScore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDotaFantasyCraftingUserData_PeriodRollTokensEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDotaFantasyCraftingUserData_PeriodScoresEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDotaFantasyCraftingDataCache_CacheEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_fantasy_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dota_gcmessages_client_fantasy_proto_rawDesc,
			NumEnums:      13,
			NumMessages:   58,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_dota_gcmessages_client_fantasy_proto_goTypes,
		DependencyIndexes: file_dota_gcmessages_client_fantasy_proto_depIdxs,
		EnumInfos:         file_dota_gcmessages_client_fantasy_proto_enumTypes,
		MessageInfos:      file_dota_gcmessages_client_fantasy_proto_msgTypes,
	}.Build()
	File_dota_gcmessages_client_fantasy_proto = out.File
	file_dota_gcmessages_client_fantasy_proto_rawDesc = nil
	file_dota_gcmessages_client_fantasy_proto_goTypes = nil
	file_dota_gcmessages_client_fantasy_proto_depIdxs = nil
}
