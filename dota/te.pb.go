// Code generated by protoc-gen-go.
// source: te.proto
// DO NOT EDIT!

package dota

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ETEProtobufIds int32

const (
	ETEProtobufIds_TE_EffectDispatchId ETEProtobufIds = 400
	ETEProtobufIds_TE_ArmorRicochetId  ETEProtobufIds = 401
	ETEProtobufIds_TE_BeamEntPointId   ETEProtobufIds = 402
	ETEProtobufIds_TE_BeamEntsId       ETEProtobufIds = 403
	ETEProtobufIds_TE_BeamPointsId     ETEProtobufIds = 404
	ETEProtobufIds_TE_BeamRingId       ETEProtobufIds = 405
	ETEProtobufIds_TE_BreakModelId     ETEProtobufIds = 406
	ETEProtobufIds_TE_BSPDecalId       ETEProtobufIds = 407
	ETEProtobufIds_TE_BubblesId        ETEProtobufIds = 408
	ETEProtobufIds_TE_BubbleTrailId    ETEProtobufIds = 409
	ETEProtobufIds_TE_DecalId          ETEProtobufIds = 410
	ETEProtobufIds_TE_WorldDecalId     ETEProtobufIds = 411
	ETEProtobufIds_TE_EnergySplashId   ETEProtobufIds = 412
	ETEProtobufIds_TE_FizzId           ETEProtobufIds = 413
	ETEProtobufIds_TE_ShatterSurfaceId ETEProtobufIds = 414
	ETEProtobufIds_TE_GlowSpriteId     ETEProtobufIds = 415
	ETEProtobufIds_TE_ImpactId         ETEProtobufIds = 416
	ETEProtobufIds_TE_MuzzleFlashId    ETEProtobufIds = 417
	ETEProtobufIds_TE_BloodStreamId    ETEProtobufIds = 418
	ETEProtobufIds_TE_ExplosionId      ETEProtobufIds = 419
	ETEProtobufIds_TE_DustId           ETEProtobufIds = 420
	ETEProtobufIds_TE_LargeFunnelId    ETEProtobufIds = 421
	ETEProtobufIds_TE_SparksId         ETEProtobufIds = 422
	ETEProtobufIds_TE_PhysicsPropId    ETEProtobufIds = 423
	ETEProtobufIds_TE_PlayerDecalId    ETEProtobufIds = 424
	ETEProtobufIds_TE_ProjectedDecalId ETEProtobufIds = 425
	ETEProtobufIds_TE_SmokeId          ETEProtobufIds = 426
)

var ETEProtobufIds_name = map[int32]string{
	400: "TE_EffectDispatchId",
	401: "TE_ArmorRicochetId",
	402: "TE_BeamEntPointId",
	403: "TE_BeamEntsId",
	404: "TE_BeamPointsId",
	405: "TE_BeamRingId",
	406: "TE_BreakModelId",
	407: "TE_BSPDecalId",
	408: "TE_BubblesId",
	409: "TE_BubbleTrailId",
	410: "TE_DecalId",
	411: "TE_WorldDecalId",
	412: "TE_EnergySplashId",
	413: "TE_FizzId",
	414: "TE_ShatterSurfaceId",
	415: "TE_GlowSpriteId",
	416: "TE_ImpactId",
	417: "TE_MuzzleFlashId",
	418: "TE_BloodStreamId",
	419: "TE_ExplosionId",
	420: "TE_DustId",
	421: "TE_LargeFunnelId",
	422: "TE_SparksId",
	423: "TE_PhysicsPropId",
	424: "TE_PlayerDecalId",
	425: "TE_ProjectedDecalId",
	426: "TE_SmokeId",
}
var ETEProtobufIds_value = map[string]int32{
	"TE_EffectDispatchId": 400,
	"TE_ArmorRicochetId":  401,
	"TE_BeamEntPointId":   402,
	"TE_BeamEntsId":       403,
	"TE_BeamPointsId":     404,
	"TE_BeamRingId":       405,
	"TE_BreakModelId":     406,
	"TE_BSPDecalId":       407,
	"TE_BubblesId":        408,
	"TE_BubbleTrailId":    409,
	"TE_DecalId":          410,
	"TE_WorldDecalId":     411,
	"TE_EnergySplashId":   412,
	"TE_FizzId":           413,
	"TE_ShatterSurfaceId": 414,
	"TE_GlowSpriteId":     415,
	"TE_ImpactId":         416,
	"TE_MuzzleFlashId":    417,
	"TE_BloodStreamId":    418,
	"TE_ExplosionId":      419,
	"TE_DustId":           420,
	"TE_LargeFunnelId":    421,
	"TE_SparksId":         422,
	"TE_PhysicsPropId":    423,
	"TE_PlayerDecalId":    424,
	"TE_ProjectedDecalId": 425,
	"TE_SmokeId":          426,
}

func (x ETEProtobufIds) Enum() *ETEProtobufIds {
	p := new(ETEProtobufIds)
	*p = x
	return p
}
func (x ETEProtobufIds) String() string {
	return proto.EnumName(ETEProtobufIds_name, int32(x))
}
func (x *ETEProtobufIds) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ETEProtobufIds_value, data, "ETEProtobufIds")
	if err != nil {
		return err
	}
	*x = ETEProtobufIds(value)
	return nil
}
func (ETEProtobufIds) EnumDescriptor() ([]byte, []int) { return fileDescriptor41, []int{0} }

type CMsgTEArmorRicochet struct {
	Pos              *CMsgVector `protobuf:"bytes,1,opt,name=pos" json:"pos,omitempty"`
	Dir              *CMsgVector `protobuf:"bytes,2,opt,name=dir" json:"dir,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *CMsgTEArmorRicochet) Reset()                    { *m = CMsgTEArmorRicochet{} }
func (m *CMsgTEArmorRicochet) String() string            { return proto.CompactTextString(m) }
func (*CMsgTEArmorRicochet) ProtoMessage()               {}
func (*CMsgTEArmorRicochet) Descriptor() ([]byte, []int) { return fileDescriptor41, []int{0} }

func (m *CMsgTEArmorRicochet) GetPos() *CMsgVector {
	if m != nil {
		return m.Pos
	}
	return nil
}

func (m *CMsgTEArmorRicochet) GetDir() *CMsgVector {
	if m != nil {
		return m.Dir
	}
	return nil
}

type CMsgTEBaseBeam struct {
	Modelindex       *uint64  `protobuf:"fixed64,1,opt,name=modelindex" json:"modelindex,omitempty"`
	Haloindex        *uint64  `protobuf:"fixed64,2,opt,name=haloindex" json:"haloindex,omitempty"`
	Startframe       *uint32  `protobuf:"varint,3,opt,name=startframe" json:"startframe,omitempty"`
	Framerate        *uint32  `protobuf:"varint,4,opt,name=framerate" json:"framerate,omitempty"`
	Life             *float32 `protobuf:"fixed32,5,opt,name=life" json:"life,omitempty"`
	Width            *float32 `protobuf:"fixed32,6,opt,name=width" json:"width,omitempty"`
	Endwidth         *float32 `protobuf:"fixed32,7,opt,name=endwidth" json:"endwidth,omitempty"`
	Fadelength       *uint32  `protobuf:"varint,8,opt,name=fadelength" json:"fadelength,omitempty"`
	Amplitude        *float32 `protobuf:"fixed32,9,opt,name=amplitude" json:"amplitude,omitempty"`
	Color            *uint32  `protobuf:"fixed32,10,opt,name=color" json:"color,omitempty"`
	Speed            *uint32  `protobuf:"varint,11,opt,name=speed" json:"speed,omitempty"`
	Flags            *uint32  `protobuf:"varint,12,opt,name=flags" json:"flags,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CMsgTEBaseBeam) Reset()                    { *m = CMsgTEBaseBeam{} }
func (m *CMsgTEBaseBeam) String() string            { return proto.CompactTextString(m) }
func (*CMsgTEBaseBeam) ProtoMessage()               {}
func (*CMsgTEBaseBeam) Descriptor() ([]byte, []int) { return fileDescriptor41, []int{1} }

func (m *CMsgTEBaseBeam) GetModelindex() uint64 {
	if m != nil && m.Modelindex != nil {
		return *m.Modelindex
	}
	return 0
}

func (m *CMsgTEBaseBeam) GetHaloindex() uint64 {
	if m != nil && m.Haloindex != nil {
		return *m.Haloindex
	}
	return 0
}

func (m *CMsgTEBaseBeam) GetStartframe() uint32 {
	if m != nil && m.Startframe != nil {
		return *m.Startframe
	}
	return 0
}

func (m *CMsgTEBaseBeam) GetFramerate() uint32 {
	if m != nil && m.Framerate != nil {
		return *m.Framerate
	}
	return 0
}

func (m *CMsgTEBaseBeam) GetLife() float32 {
	if m != nil && m.Life != nil {
		return *m.Life
	}
	return 0
}

func (m *CMsgTEBaseBeam) GetWidth() float32 {
	if m != nil && m.Width != nil {
		return *m.Width
	}
	return 0
}

func (m *CMsgTEBaseBeam) GetEndwidth() float32 {
	if m != nil && m.Endwidth != nil {
		return *m.Endwidth
	}
	return 0
}

func (m *CMsgTEBaseBeam) GetFadelength() uint32 {
	if m != nil && m.Fadelength != nil {
		return *m.Fadelength
	}
	return 0
}

func (m *CMsgTEBaseBeam) GetAmplitude() float32 {
	if m != nil && m.Amplitude != nil {
		return *m.Amplitude
	}
	return 0
}

func (m *CMsgTEBaseBeam) GetColor() uint32 {
	if m != nil && m.Color != nil {
		return *m.Color
	}
	return 0
}

func (m *CMsgTEBaseBeam) GetSpeed() uint32 {
	if m != nil && m.Speed != nil {
		return *m.Speed
	}
	return 0
}

func (m *CMsgTEBaseBeam) GetFlags() uint32 {
	if m != nil && m.Flags != nil {
		return *m.Flags
	}
	return 0
}

type CMsgTEBeamEntPoint struct {
	Base             *CMsgTEBaseBeam `protobuf:"bytes,1,opt,name=base" json:"base,omitempty"`
	Startentity      *uint32         `protobuf:"varint,2,opt,name=startentity" json:"startentity,omitempty"`
	Endentity        *uint32         `protobuf:"varint,3,opt,name=endentity" json:"endentity,omitempty"`
	Start            *CMsgVector     `protobuf:"bytes,4,opt,name=start" json:"start,omitempty"`
	End              *CMsgVector     `protobuf:"bytes,5,opt,name=end" json:"end,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *CMsgTEBeamEntPoint) Reset()                    { *m = CMsgTEBeamEntPoint{} }
func (m *CMsgTEBeamEntPoint) String() string            { return proto.CompactTextString(m) }
func (*CMsgTEBeamEntPoint) ProtoMessage()               {}
func (*CMsgTEBeamEntPoint) Descriptor() ([]byte, []int) { return fileDescriptor41, []int{2} }

func (m *CMsgTEBeamEntPoint) GetBase() *CMsgTEBaseBeam {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *CMsgTEBeamEntPoint) GetStartentity() uint32 {
	if m != nil && m.Startentity != nil {
		return *m.Startentity
	}
	return 0
}

func (m *CMsgTEBeamEntPoint) GetEndentity() uint32 {
	if m != nil && m.Endentity != nil {
		return *m.Endentity
	}
	return 0
}

func (m *CMsgTEBeamEntPoint) GetStart() *CMsgVector {
	if m != nil {
		return m.Start
	}
	return nil
}

func (m *CMsgTEBeamEntPoint) GetEnd() *CMsgVector {
	if m != nil {
		return m.End
	}
	return nil
}

type CMsgTEBeamEnts struct {
	Base             *CMsgTEBaseBeam `protobuf:"bytes,1,opt,name=base" json:"base,omitempty"`
	Startentity      *uint32         `protobuf:"varint,2,opt,name=startentity" json:"startentity,omitempty"`
	Endentity        *uint32         `protobuf:"varint,3,opt,name=endentity" json:"endentity,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *CMsgTEBeamEnts) Reset()                    { *m = CMsgTEBeamEnts{} }
func (m *CMsgTEBeamEnts) String() string            { return proto.CompactTextString(m) }
func (*CMsgTEBeamEnts) ProtoMessage()               {}
func (*CMsgTEBeamEnts) Descriptor() ([]byte, []int) { return fileDescriptor41, []int{3} }

func (m *CMsgTEBeamEnts) GetBase() *CMsgTEBaseBeam {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *CMsgTEBeamEnts) GetStartentity() uint32 {
	if m != nil && m.Startentity != nil {
		return *m.Startentity
	}
	return 0
}

func (m *CMsgTEBeamEnts) GetEndentity() uint32 {
	if m != nil && m.Endentity != nil {
		return *m.Endentity
	}
	return 0
}

type CMsgTEBeamPoints struct {
	Base             *CMsgTEBaseBeam `protobuf:"bytes,1,opt,name=base" json:"base,omitempty"`
	Start            *CMsgVector     `protobuf:"bytes,2,opt,name=start" json:"start,omitempty"`
	End              *CMsgVector     `protobuf:"bytes,3,opt,name=end" json:"end,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *CMsgTEBeamPoints) Reset()                    { *m = CMsgTEBeamPoints{} }
func (m *CMsgTEBeamPoints) String() string            { return proto.CompactTextString(m) }
func (*CMsgTEBeamPoints) ProtoMessage()               {}
func (*CMsgTEBeamPoints) Descriptor() ([]byte, []int) { return fileDescriptor41, []int{4} }

func (m *CMsgTEBeamPoints) GetBase() *CMsgTEBaseBeam {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *CMsgTEBeamPoints) GetStart() *CMsgVector {
	if m != nil {
		return m.Start
	}
	return nil
}

func (m *CMsgTEBeamPoints) GetEnd() *CMsgVector {
	if m != nil {
		return m.End
	}
	return nil
}

type CMsgTEBeamRing struct {
	Base             *CMsgTEBaseBeam `protobuf:"bytes,1,opt,name=base" json:"base,omitempty"`
	Startentity      *uint32         `protobuf:"varint,2,opt,name=startentity" json:"startentity,omitempty"`
	Endentity        *uint32         `protobuf:"varint,3,opt,name=endentity" json:"endentity,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *CMsgTEBeamRing) Reset()                    { *m = CMsgTEBeamRing{} }
func (m *CMsgTEBeamRing) String() string            { return proto.CompactTextString(m) }
func (*CMsgTEBeamRing) ProtoMessage()               {}
func (*CMsgTEBeamRing) Descriptor() ([]byte, []int) { return fileDescriptor41, []int{5} }

func (m *CMsgTEBeamRing) GetBase() *CMsgTEBaseBeam {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *CMsgTEBeamRing) GetStartentity() uint32 {
	if m != nil && m.Startentity != nil {
		return *m.Startentity
	}
	return 0
}

func (m *CMsgTEBeamRing) GetEndentity() uint32 {
	if m != nil && m.Endentity != nil {
		return *m.Endentity
	}
	return 0
}

type CMsgTEBreakModel struct {
	Origin           *CMsgVector `protobuf:"bytes,1,opt,name=origin" json:"origin,omitempty"`
	Angles           *CMsgQAngle `protobuf:"bytes,2,opt,name=angles" json:"angles,omitempty"`
	Size             *CMsgVector `protobuf:"bytes,3,opt,name=size" json:"size,omitempty"`
	Velocity         *CMsgVector `protobuf:"bytes,4,opt,name=velocity" json:"velocity,omitempty"`
	Randomization    *uint32     `protobuf:"varint,5,opt,name=randomization" json:"randomization,omitempty"`
	Modelindex       *uint64     `protobuf:"fixed64,6,opt,name=modelindex" json:"modelindex,omitempty"`
	Count            *uint32     `protobuf:"varint,7,opt,name=count" json:"count,omitempty"`
	Time             *float32    `protobuf:"fixed32,8,opt,name=time" json:"time,omitempty"`
	Flags            *uint32     `protobuf:"varint,9,opt,name=flags" json:"flags,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *CMsgTEBreakModel) Reset()                    { *m = CMsgTEBreakModel{} }
func (m *CMsgTEBreakModel) String() string            { return proto.CompactTextString(m) }
func (*CMsgTEBreakModel) ProtoMessage()               {}
func (*CMsgTEBreakModel) Descriptor() ([]byte, []int) { return fileDescriptor41, []int{6} }

func (m *CMsgTEBreakModel) GetOrigin() *CMsgVector {
	if m != nil {
		return m.Origin
	}
	return nil
}

func (m *CMsgTEBreakModel) GetAngles() *CMsgQAngle {
	if m != nil {
		return m.Angles
	}
	return nil
}

func (m *CMsgTEBreakModel) GetSize() *CMsgVector {
	if m != nil {
		return m.Size
	}
	return nil
}

func (m *CMsgTEBreakModel) GetVelocity() *CMsgVector {
	if m != nil {
		return m.Velocity
	}
	return nil
}

func (m *CMsgTEBreakModel) GetRandomization() uint32 {
	if m != nil && m.Randomization != nil {
		return *m.Randomization
	}
	return 0
}

func (m *CMsgTEBreakModel) GetModelindex() uint64 {
	if m != nil && m.Modelindex != nil {
		return *m.Modelindex
	}
	return 0
}

func (m *CMsgTEBreakModel) GetCount() uint32 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

func (m *CMsgTEBreakModel) GetTime() float32 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

func (m *CMsgTEBreakModel) GetFlags() uint32 {
	if m != nil && m.Flags != nil {
		return *m.Flags
	}
	return 0
}

type CMsgTEBSPDecal struct {
	Origin           *CMsgVector `protobuf:"bytes,1,opt,name=origin" json:"origin,omitempty"`
	Normal           *CMsgVector `protobuf:"bytes,2,opt,name=normal" json:"normal,omitempty"`
	Saxis            *CMsgVector `protobuf:"bytes,3,opt,name=saxis" json:"saxis,omitempty"`
	Entity           *uint32     `protobuf:"varint,4,opt,name=entity" json:"entity,omitempty"`
	Index            *uint32     `protobuf:"varint,5,opt,name=index" json:"index,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *CMsgTEBSPDecal) Reset()                    { *m = CMsgTEBSPDecal{} }
func (m *CMsgTEBSPDecal) String() string            { return proto.CompactTextString(m) }
func (*CMsgTEBSPDecal) ProtoMessage()               {}
func (*CMsgTEBSPDecal) Descriptor() ([]byte, []int) { return fileDescriptor41, []int{7} }

func (m *CMsgTEBSPDecal) GetOrigin() *CMsgVector {
	if m != nil {
		return m.Origin
	}
	return nil
}

func (m *CMsgTEBSPDecal) GetNormal() *CMsgVector {
	if m != nil {
		return m.Normal
	}
	return nil
}

func (m *CMsgTEBSPDecal) GetSaxis() *CMsgVector {
	if m != nil {
		return m.Saxis
	}
	return nil
}

func (m *CMsgTEBSPDecal) GetEntity() uint32 {
	if m != nil && m.Entity != nil {
		return *m.Entity
	}
	return 0
}

func (m *CMsgTEBSPDecal) GetIndex() uint32 {
	if m != nil && m.Index != nil {
		return *m.Index
	}
	return 0
}

type CMsgTEBubbles struct {
	Mins             *CMsgVector `protobuf:"bytes,1,opt,name=mins" json:"mins,omitempty"`
	Maxs             *CMsgVector `protobuf:"bytes,2,opt,name=maxs" json:"maxs,omitempty"`
	Height           *float32    `protobuf:"fixed32,3,opt,name=height" json:"height,omitempty"`
	Count            *uint32     `protobuf:"varint,4,opt,name=count" json:"count,omitempty"`
	Speed            *float32    `protobuf:"fixed32,5,opt,name=speed" json:"speed,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *CMsgTEBubbles) Reset()                    { *m = CMsgTEBubbles{} }
func (m *CMsgTEBubbles) String() string            { return proto.CompactTextString(m) }
func (*CMsgTEBubbles) ProtoMessage()               {}
func (*CMsgTEBubbles) Descriptor() ([]byte, []int) { return fileDescriptor41, []int{8} }

func (m *CMsgTEBubbles) GetMins() *CMsgVector {
	if m != nil {
		return m.Mins
	}
	return nil
}

func (m *CMsgTEBubbles) GetMaxs() *CMsgVector {
	if m != nil {
		return m.Maxs
	}
	return nil
}

func (m *CMsgTEBubbles) GetHeight() float32 {
	if m != nil && m.Height != nil {
		return *m.Height
	}
	return 0
}

func (m *CMsgTEBubbles) GetCount() uint32 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

func (m *CMsgTEBubbles) GetSpeed() float32 {
	if m != nil && m.Speed != nil {
		return *m.Speed
	}
	return 0
}

type CMsgTEBubbleTrail struct {
	Mins             *CMsgVector `protobuf:"bytes,1,opt,name=mins" json:"mins,omitempty"`
	Maxs             *CMsgVector `protobuf:"bytes,2,opt,name=maxs" json:"maxs,omitempty"`
	Waterz           *float32    `protobuf:"fixed32,3,opt,name=waterz" json:"waterz,omitempty"`
	Count            *uint32     `protobuf:"varint,4,opt,name=count" json:"count,omitempty"`
	Speed            *float32    `protobuf:"fixed32,5,opt,name=speed" json:"speed,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *CMsgTEBubbleTrail) Reset()                    { *m = CMsgTEBubbleTrail{} }
func (m *CMsgTEBubbleTrail) String() string            { return proto.CompactTextString(m) }
func (*CMsgTEBubbleTrail) ProtoMessage()               {}
func (*CMsgTEBubbleTrail) Descriptor() ([]byte, []int) { return fileDescriptor41, []int{9} }

func (m *CMsgTEBubbleTrail) GetMins() *CMsgVector {
	if m != nil {
		return m.Mins
	}
	return nil
}

func (m *CMsgTEBubbleTrail) GetMaxs() *CMsgVector {
	if m != nil {
		return m.Maxs
	}
	return nil
}

func (m *CMsgTEBubbleTrail) GetWaterz() float32 {
	if m != nil && m.Waterz != nil {
		return *m.Waterz
	}
	return 0
}

func (m *CMsgTEBubbleTrail) GetCount() uint32 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

func (m *CMsgTEBubbleTrail) GetSpeed() float32 {
	if m != nil && m.Speed != nil {
		return *m.Speed
	}
	return 0
}

type CMsgTEDecal struct {
	Origin           *CMsgVector `protobuf:"bytes,1,opt,name=origin" json:"origin,omitempty"`
	Start            *CMsgVector `protobuf:"bytes,2,opt,name=start" json:"start,omitempty"`
	Entity           *uint32     `protobuf:"varint,3,opt,name=entity" json:"entity,omitempty"`
	Hitbox           *uint32     `protobuf:"varint,4,opt,name=hitbox" json:"hitbox,omitempty"`
	Index            *uint32     `protobuf:"varint,5,opt,name=index" json:"index,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *CMsgTEDecal) Reset()                    { *m = CMsgTEDecal{} }
func (m *CMsgTEDecal) String() string            { return proto.CompactTextString(m) }
func (*CMsgTEDecal) ProtoMessage()               {}
func (*CMsgTEDecal) Descriptor() ([]byte, []int) { return fileDescriptor41, []int{10} }

func (m *CMsgTEDecal) GetOrigin() *CMsgVector {
	if m != nil {
		return m.Origin
	}
	return nil
}

func (m *CMsgTEDecal) GetStart() *CMsgVector {
	if m != nil {
		return m.Start
	}
	return nil
}

func (m *CMsgTEDecal) GetEntity() uint32 {
	if m != nil && m.Entity != nil {
		return *m.Entity
	}
	return 0
}

func (m *CMsgTEDecal) GetHitbox() uint32 {
	if m != nil && m.Hitbox != nil {
		return *m.Hitbox
	}
	return 0
}

func (m *CMsgTEDecal) GetIndex() uint32 {
	if m != nil && m.Index != nil {
		return *m.Index
	}
	return 0
}

type CMsgEffectData struct {
	Origin           *CMsgVector `protobuf:"bytes,1,opt,name=origin" json:"origin,omitempty"`
	Start            *CMsgVector `protobuf:"bytes,2,opt,name=start" json:"start,omitempty"`
	Normal           *CMsgVector `protobuf:"bytes,3,opt,name=normal" json:"normal,omitempty"`
	Angles           *CMsgQAngle `protobuf:"bytes,4,opt,name=angles" json:"angles,omitempty"`
	Entity           *uint32     `protobuf:"fixed32,5,opt,name=entity" json:"entity,omitempty"`
	Otherentity      *uint32     `protobuf:"fixed32,6,opt,name=otherentity" json:"otherentity,omitempty"`
	Scale            *float32    `protobuf:"fixed32,7,opt,name=scale" json:"scale,omitempty"`
	Magnitude        *float32    `protobuf:"fixed32,8,opt,name=magnitude" json:"magnitude,omitempty"`
	Radius           *float32    `protobuf:"fixed32,9,opt,name=radius" json:"radius,omitempty"`
	Surfaceprop      *uint32     `protobuf:"fixed32,10,opt,name=surfaceprop" json:"surfaceprop,omitempty"`
	Effectindex      *uint64     `protobuf:"fixed64,11,opt,name=effectindex" json:"effectindex,omitempty"`
	Damagetype       *uint32     `protobuf:"varint,12,opt,name=damagetype" json:"damagetype,omitempty"`
	Material         *uint32     `protobuf:"varint,13,opt,name=material" json:"material,omitempty"`
	Hitbox           *uint32     `protobuf:"varint,14,opt,name=hitbox" json:"hitbox,omitempty"`
	Color            *uint32     `protobuf:"varint,15,opt,name=color" json:"color,omitempty"`
	Flags            *uint32     `protobuf:"varint,16,opt,name=flags" json:"flags,omitempty"`
	Attachmentindex  *int32      `protobuf:"varint,17,opt,name=attachmentindex" json:"attachmentindex,omitempty"`
	Effectname       *uint32     `protobuf:"varint,18,opt,name=effectname" json:"effectname,omitempty"`
	Attachmentname   *uint32     `protobuf:"varint,19,opt,name=attachmentname" json:"attachmentname,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *CMsgEffectData) Reset()                    { *m = CMsgEffectData{} }
func (m *CMsgEffectData) String() string            { return proto.CompactTextString(m) }
func (*CMsgEffectData) ProtoMessage()               {}
func (*CMsgEffectData) Descriptor() ([]byte, []int) { return fileDescriptor41, []int{11} }

func (m *CMsgEffectData) GetOrigin() *CMsgVector {
	if m != nil {
		return m.Origin
	}
	return nil
}

func (m *CMsgEffectData) GetStart() *CMsgVector {
	if m != nil {
		return m.Start
	}
	return nil
}

func (m *CMsgEffectData) GetNormal() *CMsgVector {
	if m != nil {
		return m.Normal
	}
	return nil
}

func (m *CMsgEffectData) GetAngles() *CMsgQAngle {
	if m != nil {
		return m.Angles
	}
	return nil
}

func (m *CMsgEffectData) GetEntity() uint32 {
	if m != nil && m.Entity != nil {
		return *m.Entity
	}
	return 0
}

func (m *CMsgEffectData) GetOtherentity() uint32 {
	if m != nil && m.Otherentity != nil {
		return *m.Otherentity
	}
	return 0
}

func (m *CMsgEffectData) GetScale() float32 {
	if m != nil && m.Scale != nil {
		return *m.Scale
	}
	return 0
}

func (m *CMsgEffectData) GetMagnitude() float32 {
	if m != nil && m.Magnitude != nil {
		return *m.Magnitude
	}
	return 0
}

func (m *CMsgEffectData) GetRadius() float32 {
	if m != nil && m.Radius != nil {
		return *m.Radius
	}
	return 0
}

func (m *CMsgEffectData) GetSurfaceprop() uint32 {
	if m != nil && m.Surfaceprop != nil {
		return *m.Surfaceprop
	}
	return 0
}

func (m *CMsgEffectData) GetEffectindex() uint64 {
	if m != nil && m.Effectindex != nil {
		return *m.Effectindex
	}
	return 0
}

func (m *CMsgEffectData) GetDamagetype() uint32 {
	if m != nil && m.Damagetype != nil {
		return *m.Damagetype
	}
	return 0
}

func (m *CMsgEffectData) GetMaterial() uint32 {
	if m != nil && m.Material != nil {
		return *m.Material
	}
	return 0
}

func (m *CMsgEffectData) GetHitbox() uint32 {
	if m != nil && m.Hitbox != nil {
		return *m.Hitbox
	}
	return 0
}

func (m *CMsgEffectData) GetColor() uint32 {
	if m != nil && m.Color != nil {
		return *m.Color
	}
	return 0
}

func (m *CMsgEffectData) GetFlags() uint32 {
	if m != nil && m.Flags != nil {
		return *m.Flags
	}
	return 0
}

func (m *CMsgEffectData) GetAttachmentindex() int32 {
	if m != nil && m.Attachmentindex != nil {
		return *m.Attachmentindex
	}
	return 0
}

func (m *CMsgEffectData) GetEffectname() uint32 {
	if m != nil && m.Effectname != nil {
		return *m.Effectname
	}
	return 0
}

func (m *CMsgEffectData) GetAttachmentname() uint32 {
	if m != nil && m.Attachmentname != nil {
		return *m.Attachmentname
	}
	return 0
}

type CMsgTEEffectDispatch struct {
	Effectdata       *CMsgEffectData `protobuf:"bytes,1,opt,name=effectdata" json:"effectdata,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *CMsgTEEffectDispatch) Reset()                    { *m = CMsgTEEffectDispatch{} }
func (m *CMsgTEEffectDispatch) String() string            { return proto.CompactTextString(m) }
func (*CMsgTEEffectDispatch) ProtoMessage()               {}
func (*CMsgTEEffectDispatch) Descriptor() ([]byte, []int) { return fileDescriptor41, []int{12} }

func (m *CMsgTEEffectDispatch) GetEffectdata() *CMsgEffectData {
	if m != nil {
		return m.Effectdata
	}
	return nil
}

type CMsgTEEnergySplash struct {
	Pos              *CMsgVector `protobuf:"bytes,1,opt,name=pos" json:"pos,omitempty"`
	Dir              *CMsgVector `protobuf:"bytes,2,opt,name=dir" json:"dir,omitempty"`
	Explosive        *bool       `protobuf:"varint,3,opt,name=explosive" json:"explosive,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *CMsgTEEnergySplash) Reset()                    { *m = CMsgTEEnergySplash{} }
func (m *CMsgTEEnergySplash) String() string            { return proto.CompactTextString(m) }
func (*CMsgTEEnergySplash) ProtoMessage()               {}
func (*CMsgTEEnergySplash) Descriptor() ([]byte, []int) { return fileDescriptor41, []int{13} }

func (m *CMsgTEEnergySplash) GetPos() *CMsgVector {
	if m != nil {
		return m.Pos
	}
	return nil
}

func (m *CMsgTEEnergySplash) GetDir() *CMsgVector {
	if m != nil {
		return m.Dir
	}
	return nil
}

func (m *CMsgTEEnergySplash) GetExplosive() bool {
	if m != nil && m.Explosive != nil {
		return *m.Explosive
	}
	return false
}

type CMsgTEFizz struct {
	Entity           *uint32 `protobuf:"varint,1,opt,name=entity" json:"entity,omitempty"`
	Density          *uint32 `protobuf:"varint,2,opt,name=density" json:"density,omitempty"`
	Current          *int32  `protobuf:"varint,3,opt,name=current" json:"current,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgTEFizz) Reset()                    { *m = CMsgTEFizz{} }
func (m *CMsgTEFizz) String() string            { return proto.CompactTextString(m) }
func (*CMsgTEFizz) ProtoMessage()               {}
func (*CMsgTEFizz) Descriptor() ([]byte, []int) { return fileDescriptor41, []int{14} }

func (m *CMsgTEFizz) GetEntity() uint32 {
	if m != nil && m.Entity != nil {
		return *m.Entity
	}
	return 0
}

func (m *CMsgTEFizz) GetDensity() uint32 {
	if m != nil && m.Density != nil {
		return *m.Density
	}
	return 0
}

func (m *CMsgTEFizz) GetCurrent() int32 {
	if m != nil && m.Current != nil {
		return *m.Current
	}
	return 0
}

type CMsgTEShatterSurface struct {
	Origin           *CMsgVector `protobuf:"bytes,1,opt,name=origin" json:"origin,omitempty"`
	Angles           *CMsgQAngle `protobuf:"bytes,2,opt,name=angles" json:"angles,omitempty"`
	Force            *CMsgVector `protobuf:"bytes,3,opt,name=force" json:"force,omitempty"`
	Forcepos         *CMsgVector `protobuf:"bytes,4,opt,name=forcepos" json:"forcepos,omitempty"`
	Width            *float32    `protobuf:"fixed32,5,opt,name=width" json:"width,omitempty"`
	Height           *float32    `protobuf:"fixed32,6,opt,name=height" json:"height,omitempty"`
	Shardsize        *float32    `protobuf:"fixed32,7,opt,name=shardsize" json:"shardsize,omitempty"`
	Surfacetype      *uint32     `protobuf:"varint,8,opt,name=surfacetype" json:"surfacetype,omitempty"`
	Frontcolor       *uint32     `protobuf:"fixed32,9,opt,name=frontcolor" json:"frontcolor,omitempty"`
	Backcolor        *uint32     `protobuf:"fixed32,10,opt,name=backcolor" json:"backcolor,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *CMsgTEShatterSurface) Reset()                    { *m = CMsgTEShatterSurface{} }
func (m *CMsgTEShatterSurface) String() string            { return proto.CompactTextString(m) }
func (*CMsgTEShatterSurface) ProtoMessage()               {}
func (*CMsgTEShatterSurface) Descriptor() ([]byte, []int) { return fileDescriptor41, []int{15} }

func (m *CMsgTEShatterSurface) GetOrigin() *CMsgVector {
	if m != nil {
		return m.Origin
	}
	return nil
}

func (m *CMsgTEShatterSurface) GetAngles() *CMsgQAngle {
	if m != nil {
		return m.Angles
	}
	return nil
}

func (m *CMsgTEShatterSurface) GetForce() *CMsgVector {
	if m != nil {
		return m.Force
	}
	return nil
}

func (m *CMsgTEShatterSurface) GetForcepos() *CMsgVector {
	if m != nil {
		return m.Forcepos
	}
	return nil
}

func (m *CMsgTEShatterSurface) GetWidth() float32 {
	if m != nil && m.Width != nil {
		return *m.Width
	}
	return 0
}

func (m *CMsgTEShatterSurface) GetHeight() float32 {
	if m != nil && m.Height != nil {
		return *m.Height
	}
	return 0
}

func (m *CMsgTEShatterSurface) GetShardsize() float32 {
	if m != nil && m.Shardsize != nil {
		return *m.Shardsize
	}
	return 0
}

func (m *CMsgTEShatterSurface) GetSurfacetype() uint32 {
	if m != nil && m.Surfacetype != nil {
		return *m.Surfacetype
	}
	return 0
}

func (m *CMsgTEShatterSurface) GetFrontcolor() uint32 {
	if m != nil && m.Frontcolor != nil {
		return *m.Frontcolor
	}
	return 0
}

func (m *CMsgTEShatterSurface) GetBackcolor() uint32 {
	if m != nil && m.Backcolor != nil {
		return *m.Backcolor
	}
	return 0
}

type CMsgTEGlowSprite struct {
	Origin           *CMsgVector `protobuf:"bytes,1,opt,name=origin" json:"origin,omitempty"`
	Scale            *float32    `protobuf:"fixed32,2,opt,name=scale" json:"scale,omitempty"`
	Life             *float32    `protobuf:"fixed32,3,opt,name=life" json:"life,omitempty"`
	Brightness       *uint32     `protobuf:"varint,4,opt,name=brightness" json:"brightness,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *CMsgTEGlowSprite) Reset()                    { *m = CMsgTEGlowSprite{} }
func (m *CMsgTEGlowSprite) String() string            { return proto.CompactTextString(m) }
func (*CMsgTEGlowSprite) ProtoMessage()               {}
func (*CMsgTEGlowSprite) Descriptor() ([]byte, []int) { return fileDescriptor41, []int{16} }

func (m *CMsgTEGlowSprite) GetOrigin() *CMsgVector {
	if m != nil {
		return m.Origin
	}
	return nil
}

func (m *CMsgTEGlowSprite) GetScale() float32 {
	if m != nil && m.Scale != nil {
		return *m.Scale
	}
	return 0
}

func (m *CMsgTEGlowSprite) GetLife() float32 {
	if m != nil && m.Life != nil {
		return *m.Life
	}
	return 0
}

func (m *CMsgTEGlowSprite) GetBrightness() uint32 {
	if m != nil && m.Brightness != nil {
		return *m.Brightness
	}
	return 0
}

type CMsgTEImpact struct {
	Origin           *CMsgVector `protobuf:"bytes,1,opt,name=origin" json:"origin,omitempty"`
	Normal           *CMsgVector `protobuf:"bytes,2,opt,name=normal" json:"normal,omitempty"`
	Type             *uint32     `protobuf:"varint,3,opt,name=type" json:"type,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *CMsgTEImpact) Reset()                    { *m = CMsgTEImpact{} }
func (m *CMsgTEImpact) String() string            { return proto.CompactTextString(m) }
func (*CMsgTEImpact) ProtoMessage()               {}
func (*CMsgTEImpact) Descriptor() ([]byte, []int) { return fileDescriptor41, []int{17} }

func (m *CMsgTEImpact) GetOrigin() *CMsgVector {
	if m != nil {
		return m.Origin
	}
	return nil
}

func (m *CMsgTEImpact) GetNormal() *CMsgVector {
	if m != nil {
		return m.Normal
	}
	return nil
}

func (m *CMsgTEImpact) GetType() uint32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

type CMsgTEMuzzleFlash struct {
	Origin           *CMsgVector `protobuf:"bytes,1,opt,name=origin" json:"origin,omitempty"`
	Angles           *CMsgQAngle `protobuf:"bytes,2,opt,name=angles" json:"angles,omitempty"`
	Scale            *float32    `protobuf:"fixed32,3,opt,name=scale" json:"scale,omitempty"`
	Type             *uint32     `protobuf:"varint,4,opt,name=type" json:"type,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *CMsgTEMuzzleFlash) Reset()                    { *m = CMsgTEMuzzleFlash{} }
func (m *CMsgTEMuzzleFlash) String() string            { return proto.CompactTextString(m) }
func (*CMsgTEMuzzleFlash) ProtoMessage()               {}
func (*CMsgTEMuzzleFlash) Descriptor() ([]byte, []int) { return fileDescriptor41, []int{18} }

func (m *CMsgTEMuzzleFlash) GetOrigin() *CMsgVector {
	if m != nil {
		return m.Origin
	}
	return nil
}

func (m *CMsgTEMuzzleFlash) GetAngles() *CMsgQAngle {
	if m != nil {
		return m.Angles
	}
	return nil
}

func (m *CMsgTEMuzzleFlash) GetScale() float32 {
	if m != nil && m.Scale != nil {
		return *m.Scale
	}
	return 0
}

func (m *CMsgTEMuzzleFlash) GetType() uint32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

type CMsgTEBloodStream struct {
	Origin           *CMsgVector `protobuf:"bytes,1,opt,name=origin" json:"origin,omitempty"`
	Direction        *CMsgVector `protobuf:"bytes,2,opt,name=direction" json:"direction,omitempty"`
	Color            *uint32     `protobuf:"fixed32,3,opt,name=color" json:"color,omitempty"`
	Amount           *uint32     `protobuf:"varint,4,opt,name=amount" json:"amount,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *CMsgTEBloodStream) Reset()                    { *m = CMsgTEBloodStream{} }
func (m *CMsgTEBloodStream) String() string            { return proto.CompactTextString(m) }
func (*CMsgTEBloodStream) ProtoMessage()               {}
func (*CMsgTEBloodStream) Descriptor() ([]byte, []int) { return fileDescriptor41, []int{19} }

func (m *CMsgTEBloodStream) GetOrigin() *CMsgVector {
	if m != nil {
		return m.Origin
	}
	return nil
}

func (m *CMsgTEBloodStream) GetDirection() *CMsgVector {
	if m != nil {
		return m.Direction
	}
	return nil
}

func (m *CMsgTEBloodStream) GetColor() uint32 {
	if m != nil && m.Color != nil {
		return *m.Color
	}
	return 0
}

func (m *CMsgTEBloodStream) GetAmount() uint32 {
	if m != nil && m.Amount != nil {
		return *m.Amount
	}
	return 0
}

type CMsgTEExplosion struct {
	Origin           *CMsgVector `protobuf:"bytes,1,opt,name=origin" json:"origin,omitempty"`
	Framerate        *uint32     `protobuf:"varint,2,opt,name=framerate" json:"framerate,omitempty"`
	Flags            *uint32     `protobuf:"varint,3,opt,name=flags" json:"flags,omitempty"`
	Normal           *CMsgVector `protobuf:"bytes,4,opt,name=normal" json:"normal,omitempty"`
	Materialtype     *uint32     `protobuf:"varint,5,opt,name=materialtype" json:"materialtype,omitempty"`
	Radius           *uint32     `protobuf:"varint,6,opt,name=radius" json:"radius,omitempty"`
	Magnitude        *uint32     `protobuf:"varint,7,opt,name=magnitude" json:"magnitude,omitempty"`
	Scale            *float32    `protobuf:"fixed32,8,opt,name=scale" json:"scale,omitempty"`
	AffectRagdolls   *bool       `protobuf:"varint,9,opt,name=affect_ragdolls,json=affectRagdolls" json:"affect_ragdolls,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *CMsgTEExplosion) Reset()                    { *m = CMsgTEExplosion{} }
func (m *CMsgTEExplosion) String() string            { return proto.CompactTextString(m) }
func (*CMsgTEExplosion) ProtoMessage()               {}
func (*CMsgTEExplosion) Descriptor() ([]byte, []int) { return fileDescriptor41, []int{20} }

func (m *CMsgTEExplosion) GetOrigin() *CMsgVector {
	if m != nil {
		return m.Origin
	}
	return nil
}

func (m *CMsgTEExplosion) GetFramerate() uint32 {
	if m != nil && m.Framerate != nil {
		return *m.Framerate
	}
	return 0
}

func (m *CMsgTEExplosion) GetFlags() uint32 {
	if m != nil && m.Flags != nil {
		return *m.Flags
	}
	return 0
}

func (m *CMsgTEExplosion) GetNormal() *CMsgVector {
	if m != nil {
		return m.Normal
	}
	return nil
}

func (m *CMsgTEExplosion) GetMaterialtype() uint32 {
	if m != nil && m.Materialtype != nil {
		return *m.Materialtype
	}
	return 0
}

func (m *CMsgTEExplosion) GetRadius() uint32 {
	if m != nil && m.Radius != nil {
		return *m.Radius
	}
	return 0
}

func (m *CMsgTEExplosion) GetMagnitude() uint32 {
	if m != nil && m.Magnitude != nil {
		return *m.Magnitude
	}
	return 0
}

func (m *CMsgTEExplosion) GetScale() float32 {
	if m != nil && m.Scale != nil {
		return *m.Scale
	}
	return 0
}

func (m *CMsgTEExplosion) GetAffectRagdolls() bool {
	if m != nil && m.AffectRagdolls != nil {
		return *m.AffectRagdolls
	}
	return false
}

type CMsgTEDust struct {
	Origin           *CMsgVector `protobuf:"bytes,1,opt,name=origin" json:"origin,omitempty"`
	Size             *float32    `protobuf:"fixed32,2,opt,name=size" json:"size,omitempty"`
	Speed            *float32    `protobuf:"fixed32,3,opt,name=speed" json:"speed,omitempty"`
	Direction        *CMsgVector `protobuf:"bytes,4,opt,name=direction" json:"direction,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *CMsgTEDust) Reset()                    { *m = CMsgTEDust{} }
func (m *CMsgTEDust) String() string            { return proto.CompactTextString(m) }
func (*CMsgTEDust) ProtoMessage()               {}
func (*CMsgTEDust) Descriptor() ([]byte, []int) { return fileDescriptor41, []int{21} }

func (m *CMsgTEDust) GetOrigin() *CMsgVector {
	if m != nil {
		return m.Origin
	}
	return nil
}

func (m *CMsgTEDust) GetSize() float32 {
	if m != nil && m.Size != nil {
		return *m.Size
	}
	return 0
}

func (m *CMsgTEDust) GetSpeed() float32 {
	if m != nil && m.Speed != nil {
		return *m.Speed
	}
	return 0
}

func (m *CMsgTEDust) GetDirection() *CMsgVector {
	if m != nil {
		return m.Direction
	}
	return nil
}

type CMsgTELargeFunnel struct {
	Origin           *CMsgVector `protobuf:"bytes,1,opt,name=origin" json:"origin,omitempty"`
	Reversed         *uint32     `protobuf:"varint,2,opt,name=reversed" json:"reversed,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *CMsgTELargeFunnel) Reset()                    { *m = CMsgTELargeFunnel{} }
func (m *CMsgTELargeFunnel) String() string            { return proto.CompactTextString(m) }
func (*CMsgTELargeFunnel) ProtoMessage()               {}
func (*CMsgTELargeFunnel) Descriptor() ([]byte, []int) { return fileDescriptor41, []int{22} }

func (m *CMsgTELargeFunnel) GetOrigin() *CMsgVector {
	if m != nil {
		return m.Origin
	}
	return nil
}

func (m *CMsgTELargeFunnel) GetReversed() uint32 {
	if m != nil && m.Reversed != nil {
		return *m.Reversed
	}
	return 0
}

type CMsgTESparks struct {
	Origin           *CMsgVector `protobuf:"bytes,1,opt,name=origin" json:"origin,omitempty"`
	Magnitude        *uint32     `protobuf:"varint,2,opt,name=magnitude" json:"magnitude,omitempty"`
	Length           *uint32     `protobuf:"varint,3,opt,name=length" json:"length,omitempty"`
	Direction        *CMsgVector `protobuf:"bytes,4,opt,name=direction" json:"direction,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *CMsgTESparks) Reset()                    { *m = CMsgTESparks{} }
func (m *CMsgTESparks) String() string            { return proto.CompactTextString(m) }
func (*CMsgTESparks) ProtoMessage()               {}
func (*CMsgTESparks) Descriptor() ([]byte, []int) { return fileDescriptor41, []int{23} }

func (m *CMsgTESparks) GetOrigin() *CMsgVector {
	if m != nil {
		return m.Origin
	}
	return nil
}

func (m *CMsgTESparks) GetMagnitude() uint32 {
	if m != nil && m.Magnitude != nil {
		return *m.Magnitude
	}
	return 0
}

func (m *CMsgTESparks) GetLength() uint32 {
	if m != nil && m.Length != nil {
		return *m.Length
	}
	return 0
}

func (m *CMsgTESparks) GetDirection() *CMsgVector {
	if m != nil {
		return m.Direction
	}
	return nil
}

type CMsgTEPhysicsProp struct {
	Origin               *CMsgVector `protobuf:"bytes,1,opt,name=origin" json:"origin,omitempty"`
	Velocity             *CMsgVector `protobuf:"bytes,2,opt,name=velocity" json:"velocity,omitempty"`
	Angles               *CMsgQAngle `protobuf:"bytes,3,opt,name=angles" json:"angles,omitempty"`
	Skin                 *uint32     `protobuf:"fixed32,4,opt,name=skin" json:"skin,omitempty"`
	Flags                *uint32     `protobuf:"varint,5,opt,name=flags" json:"flags,omitempty"`
	Effects              *uint32     `protobuf:"varint,6,opt,name=effects" json:"effects,omitempty"`
	Color                *uint32     `protobuf:"fixed32,7,opt,name=color" json:"color,omitempty"`
	Modelindex           *uint64     `protobuf:"fixed64,8,opt,name=modelindex" json:"modelindex,omitempty"`
	Breakmodelsnottomake *uint32     `protobuf:"varint,9,opt,name=breakmodelsnottomake" json:"breakmodelsnottomake,omitempty"`
	Scale                *float32    `protobuf:"fixed32,10,opt,name=scale" json:"scale,omitempty"`
	XXX_unrecognized     []byte      `json:"-"`
}

func (m *CMsgTEPhysicsProp) Reset()                    { *m = CMsgTEPhysicsProp{} }
func (m *CMsgTEPhysicsProp) String() string            { return proto.CompactTextString(m) }
func (*CMsgTEPhysicsProp) ProtoMessage()               {}
func (*CMsgTEPhysicsProp) Descriptor() ([]byte, []int) { return fileDescriptor41, []int{24} }

func (m *CMsgTEPhysicsProp) GetOrigin() *CMsgVector {
	if m != nil {
		return m.Origin
	}
	return nil
}

func (m *CMsgTEPhysicsProp) GetVelocity() *CMsgVector {
	if m != nil {
		return m.Velocity
	}
	return nil
}

func (m *CMsgTEPhysicsProp) GetAngles() *CMsgQAngle {
	if m != nil {
		return m.Angles
	}
	return nil
}

func (m *CMsgTEPhysicsProp) GetSkin() uint32 {
	if m != nil && m.Skin != nil {
		return *m.Skin
	}
	return 0
}

func (m *CMsgTEPhysicsProp) GetFlags() uint32 {
	if m != nil && m.Flags != nil {
		return *m.Flags
	}
	return 0
}

func (m *CMsgTEPhysicsProp) GetEffects() uint32 {
	if m != nil && m.Effects != nil {
		return *m.Effects
	}
	return 0
}

func (m *CMsgTEPhysicsProp) GetColor() uint32 {
	if m != nil && m.Color != nil {
		return *m.Color
	}
	return 0
}

func (m *CMsgTEPhysicsProp) GetModelindex() uint64 {
	if m != nil && m.Modelindex != nil {
		return *m.Modelindex
	}
	return 0
}

func (m *CMsgTEPhysicsProp) GetBreakmodelsnottomake() uint32 {
	if m != nil && m.Breakmodelsnottomake != nil {
		return *m.Breakmodelsnottomake
	}
	return 0
}

func (m *CMsgTEPhysicsProp) GetScale() float32 {
	if m != nil && m.Scale != nil {
		return *m.Scale
	}
	return 0
}

type CMsgTEPlayerDecal struct {
	Origin           *CMsgVector `protobuf:"bytes,1,opt,name=origin" json:"origin,omitempty"`
	Player           *uint32     `protobuf:"varint,2,opt,name=player" json:"player,omitempty"`
	Entity           *uint32     `protobuf:"varint,3,opt,name=entity" json:"entity,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *CMsgTEPlayerDecal) Reset()                    { *m = CMsgTEPlayerDecal{} }
func (m *CMsgTEPlayerDecal) String() string            { return proto.CompactTextString(m) }
func (*CMsgTEPlayerDecal) ProtoMessage()               {}
func (*CMsgTEPlayerDecal) Descriptor() ([]byte, []int) { return fileDescriptor41, []int{25} }

func (m *CMsgTEPlayerDecal) GetOrigin() *CMsgVector {
	if m != nil {
		return m.Origin
	}
	return nil
}

func (m *CMsgTEPlayerDecal) GetPlayer() uint32 {
	if m != nil && m.Player != nil {
		return *m.Player
	}
	return 0
}

func (m *CMsgTEPlayerDecal) GetEntity() uint32 {
	if m != nil && m.Entity != nil {
		return *m.Entity
	}
	return 0
}

type CMsgTEProjectedDecal struct {
	Origin           *CMsgVector `protobuf:"bytes,1,opt,name=origin" json:"origin,omitempty"`
	Angles           *CMsgQAngle `protobuf:"bytes,2,opt,name=angles" json:"angles,omitempty"`
	Index            *uint32     `protobuf:"varint,3,opt,name=index" json:"index,omitempty"`
	Distance         *float32    `protobuf:"fixed32,4,opt,name=distance" json:"distance,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *CMsgTEProjectedDecal) Reset()                    { *m = CMsgTEProjectedDecal{} }
func (m *CMsgTEProjectedDecal) String() string            { return proto.CompactTextString(m) }
func (*CMsgTEProjectedDecal) ProtoMessage()               {}
func (*CMsgTEProjectedDecal) Descriptor() ([]byte, []int) { return fileDescriptor41, []int{26} }

func (m *CMsgTEProjectedDecal) GetOrigin() *CMsgVector {
	if m != nil {
		return m.Origin
	}
	return nil
}

func (m *CMsgTEProjectedDecal) GetAngles() *CMsgQAngle {
	if m != nil {
		return m.Angles
	}
	return nil
}

func (m *CMsgTEProjectedDecal) GetIndex() uint32 {
	if m != nil && m.Index != nil {
		return *m.Index
	}
	return 0
}

func (m *CMsgTEProjectedDecal) GetDistance() float32 {
	if m != nil && m.Distance != nil {
		return *m.Distance
	}
	return 0
}

type CMsgTESmoke struct {
	Origin           *CMsgVector `protobuf:"bytes,1,opt,name=origin" json:"origin,omitempty"`
	Scale            *float32    `protobuf:"fixed32,2,opt,name=scale" json:"scale,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *CMsgTESmoke) Reset()                    { *m = CMsgTESmoke{} }
func (m *CMsgTESmoke) String() string            { return proto.CompactTextString(m) }
func (*CMsgTESmoke) ProtoMessage()               {}
func (*CMsgTESmoke) Descriptor() ([]byte, []int) { return fileDescriptor41, []int{27} }

func (m *CMsgTESmoke) GetOrigin() *CMsgVector {
	if m != nil {
		return m.Origin
	}
	return nil
}

func (m *CMsgTESmoke) GetScale() float32 {
	if m != nil && m.Scale != nil {
		return *m.Scale
	}
	return 0
}

type CMsgTEWorldDecal struct {
	Origin           *CMsgVector `protobuf:"bytes,1,opt,name=origin" json:"origin,omitempty"`
	Normal           *CMsgVector `protobuf:"bytes,2,opt,name=normal" json:"normal,omitempty"`
	Index            *uint32     `protobuf:"varint,3,opt,name=index" json:"index,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *CMsgTEWorldDecal) Reset()                    { *m = CMsgTEWorldDecal{} }
func (m *CMsgTEWorldDecal) String() string            { return proto.CompactTextString(m) }
func (*CMsgTEWorldDecal) ProtoMessage()               {}
func (*CMsgTEWorldDecal) Descriptor() ([]byte, []int) { return fileDescriptor41, []int{28} }

func (m *CMsgTEWorldDecal) GetOrigin() *CMsgVector {
	if m != nil {
		return m.Origin
	}
	return nil
}

func (m *CMsgTEWorldDecal) GetNormal() *CMsgVector {
	if m != nil {
		return m.Normal
	}
	return nil
}

func (m *CMsgTEWorldDecal) GetIndex() uint32 {
	if m != nil && m.Index != nil {
		return *m.Index
	}
	return 0
}

func init() {
	proto.RegisterType((*CMsgTEArmorRicochet)(nil), "dota.CMsgTEArmorRicochet")
	proto.RegisterType((*CMsgTEBaseBeam)(nil), "dota.CMsgTEBaseBeam")
	proto.RegisterType((*CMsgTEBeamEntPoint)(nil), "dota.CMsgTEBeamEntPoint")
	proto.RegisterType((*CMsgTEBeamEnts)(nil), "dota.CMsgTEBeamEnts")
	proto.RegisterType((*CMsgTEBeamPoints)(nil), "dota.CMsgTEBeamPoints")
	proto.RegisterType((*CMsgTEBeamRing)(nil), "dota.CMsgTEBeamRing")
	proto.RegisterType((*CMsgTEBreakModel)(nil), "dota.CMsgTEBreakModel")
	proto.RegisterType((*CMsgTEBSPDecal)(nil), "dota.CMsgTEBSPDecal")
	proto.RegisterType((*CMsgTEBubbles)(nil), "dota.CMsgTEBubbles")
	proto.RegisterType((*CMsgTEBubbleTrail)(nil), "dota.CMsgTEBubbleTrail")
	proto.RegisterType((*CMsgTEDecal)(nil), "dota.CMsgTEDecal")
	proto.RegisterType((*CMsgEffectData)(nil), "dota.CMsgEffectData")
	proto.RegisterType((*CMsgTEEffectDispatch)(nil), "dota.CMsgTEEffectDispatch")
	proto.RegisterType((*CMsgTEEnergySplash)(nil), "dota.CMsgTEEnergySplash")
	proto.RegisterType((*CMsgTEFizz)(nil), "dota.CMsgTEFizz")
	proto.RegisterType((*CMsgTEShatterSurface)(nil), "dota.CMsgTEShatterSurface")
	proto.RegisterType((*CMsgTEGlowSprite)(nil), "dota.CMsgTEGlowSprite")
	proto.RegisterType((*CMsgTEImpact)(nil), "dota.CMsgTEImpact")
	proto.RegisterType((*CMsgTEMuzzleFlash)(nil), "dota.CMsgTEMuzzleFlash")
	proto.RegisterType((*CMsgTEBloodStream)(nil), "dota.CMsgTEBloodStream")
	proto.RegisterType((*CMsgTEExplosion)(nil), "dota.CMsgTEExplosion")
	proto.RegisterType((*CMsgTEDust)(nil), "dota.CMsgTEDust")
	proto.RegisterType((*CMsgTELargeFunnel)(nil), "dota.CMsgTELargeFunnel")
	proto.RegisterType((*CMsgTESparks)(nil), "dota.CMsgTESparks")
	proto.RegisterType((*CMsgTEPhysicsProp)(nil), "dota.CMsgTEPhysicsProp")
	proto.RegisterType((*CMsgTEPlayerDecal)(nil), "dota.CMsgTEPlayerDecal")
	proto.RegisterType((*CMsgTEProjectedDecal)(nil), "dota.CMsgTEProjectedDecal")
	proto.RegisterType((*CMsgTESmoke)(nil), "dota.CMsgTESmoke")
	proto.RegisterType((*CMsgTEWorldDecal)(nil), "dota.CMsgTEWorldDecal")
	proto.RegisterEnum("dota.ETEProtobufIds", ETEProtobufIds_name, ETEProtobufIds_value)
}

func init() { proto.RegisterFile("te.proto", fileDescriptor41) }

var fileDescriptor41 = []byte{
	// 1823 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xbc, 0x58, 0x4b, 0x6f, 0x23, 0x49,
	0x1d, 0xa7, 0xbb, 0x6d, 0xc7, 0xa9, 0x8c, 0x93, 0x9e, 0x9a, 0x10, 0xac, 0xd1, 0x6a, 0x15, 0xb5,
	0x56, 0x83, 0x85, 0xd0, 0x1c, 0x56, 0x7c, 0x81, 0x1d, 0xc6, 0x03, 0x2d, 0xed, 0x48, 0xa1, 0x6d,
	0xf1, 0x38, 0xa0, 0xa8, 0xdc, 0x55, 0xb6, 0x8b, 0x74, 0x77, 0x59, 0xd5, 0xe5, 0x49, 0x62, 0x71,
	0xe0, 0x84, 0x38, 0xee, 0xf2, 0x86, 0x5d, 0x76, 0x81, 0x65, 0x79, 0x1d, 0x39, 0x72, 0xe2, 0xcc,
	0x11, 0x4e, 0x7c, 0x07, 0x4e, 0x7c, 0x02, 0x54, 0xaf, 0xae, 0x72, 0x12, 0x2b, 0x31, 0x6c, 0xf6,
	0xd6, 0xff, 0x47, 0x77, 0xfd, 0xeb, 0xf7, 0x7f, 0x37, 0xe8, 0x0a, 0xf2, 0x74, 0xc1, 0x99, 0x60,
	0xb0, 0x85, 0x99, 0x40, 0x8f, 0x8f, 0x2a, 0x22, 0xce, 0x19, 0x3f, 0x9b, 0xa0, 0x9a, 0x88, 0xcb,
	0x05, 0xa9, 0xb5, 0x34, 0xf9, 0x36, 0x78, 0xf4, 0xe5, 0x97, 0xf5, 0x6c, 0x3c, 0x7c, 0x8b, 0x97,
	0x8c, 0x67, 0x34, 0x67, 0xf9, 0x9c, 0x08, 0x98, 0x80, 0x68, 0xc1, 0xea, 0x7e, 0x70, 0x1c, 0x0c,
	0xf6, 0xde, 0x8c, 0x9f, 0xca, 0x4f, 0x3c, 0x95, 0x7a, 0x5f, 0x27, 0xb9, 0x60, 0x3c, 0x93, 0x42,
	0xa9, 0x83, 0x29, 0xef, 0x87, 0x9b, 0x74, 0x30, 0xe5, 0xc9, 0x3f, 0x42, 0xb0, 0xaf, 0xbf, 0xff,
	0x0c, 0xd5, 0xe4, 0x19, 0x41, 0x25, 0x7c, 0x1d, 0x80, 0x92, 0x61, 0x52, 0xd0, 0x0a, 0x93, 0x0b,
	0x75, 0x42, 0x27, 0xf3, 0x38, 0xf0, 0x35, 0xb0, 0x3b, 0x47, 0x05, 0xd3, 0xe2, 0x50, 0x89, 0x1d,
	0x43, 0xbe, 0x5d, 0x0b, 0xc4, 0xc5, 0x94, 0xa3, 0x92, 0xf4, 0xa3, 0xe3, 0x60, 0xd0, 0xcb, 0x3c,
	0x8e, 0x7c, 0x5b, 0x3d, 0x70, 0x24, 0x48, 0xbf, 0xa5, 0xc4, 0x8e, 0x01, 0x21, 0x68, 0x15, 0x74,
	0x4a, 0xfa, 0xed, 0xe3, 0x60, 0x10, 0x66, 0xea, 0x19, 0x1e, 0x82, 0xf6, 0x39, 0xc5, 0x62, 0xde,
	0xef, 0x28, 0xa6, 0x26, 0xe0, 0x63, 0xd0, 0x25, 0x15, 0xd6, 0x82, 0x1d, 0x25, 0x68, 0x68, 0x69,
	0xc3, 0x14, 0x61, 0x52, 0x90, 0x6a, 0x26, 0xe6, 0xfd, 0xae, 0xb6, 0xc1, 0x71, 0xa4, 0x0d, 0xa8,
	0x5c, 0x14, 0x54, 0x2c, 0x31, 0xe9, 0xef, 0xaa, 0x97, 0x1d, 0x43, 0x9e, 0x97, 0xb3, 0x82, 0xf1,
	0x3e, 0x38, 0x0e, 0x06, 0x3b, 0x99, 0x26, 0x24, 0xb7, 0x5e, 0x10, 0x82, 0xfb, 0x7b, 0xea, 0x73,
	0x9a, 0x90, 0xdc, 0x69, 0x81, 0x66, 0x75, 0xff, 0x81, 0xe6, 0x2a, 0x22, 0xf9, 0x7b, 0x00, 0xa0,
	0x01, 0x95, 0xa0, 0x72, 0x58, 0x89, 0x13, 0x46, 0x2b, 0x01, 0x07, 0xa0, 0x25, 0xbd, 0x6b, 0x9c,
	0x76, 0xe8, 0x1c, 0xe2, 0xc0, 0xcf, 0x94, 0x06, 0x3c, 0x06, 0x7b, 0x0a, 0x32, 0x52, 0x09, 0x2a,
	0x2e, 0x15, 0xc8, 0xbd, 0xcc, 0x67, 0xc9, 0x2b, 0x90, 0x0a, 0x1b, 0xb9, 0x46, 0xd9, 0x31, 0xe0,
	0x13, 0xd0, 0x56, 0xca, 0x0a, 0xe0, 0x9b, 0x7c, 0xaf, 0xc5, 0x32, 0x42, 0x48, 0x85, 0x15, 0xda,
	0x37, 0x46, 0x08, 0xa9, 0x70, 0xb2, 0x6a, 0x02, 0x44, 0xdf, 0xa5, 0xfe, 0xf4, 0xee, 0x91, 0xfc,
	0x20, 0x00, 0xb1, 0x3b, 0x5c, 0xa1, 0xb8, 0xcd, 0xf1, 0x0d, 0x0c, 0xe1, 0x9d, 0x60, 0x88, 0xee,
	0x0c, 0x43, 0x46, 0xab, 0xd9, 0xa7, 0x08, 0xc3, 0xdf, 0xc2, 0x06, 0x06, 0x4e, 0xd0, 0xd9, 0x4b,
	0x99, 0x8b, 0x70, 0x00, 0x3a, 0x8c, 0xd3, 0x19, 0xad, 0x36, 0x16, 0x01, 0x23, 0x97, 0x9a, 0xa8,
	0x9a, 0x15, 0xa4, 0xbe, 0x8e, 0xc3, 0xd7, 0xde, 0x92, 0x82, 0xcc, 0xc8, 0xe1, 0x1b, 0xa0, 0x55,
	0xd3, 0x15, 0xd9, 0x88, 0x84, 0x92, 0xc2, 0x2f, 0x82, 0xee, 0x2b, 0x52, 0xb0, 0x5c, 0xda, 0xba,
	0x29, 0xc0, 0x1a, 0x0d, 0xf8, 0x06, 0xe8, 0x71, 0x54, 0x61, 0x56, 0xd2, 0x15, 0x12, 0x94, 0x55,
	0x2a, 0xda, 0x7a, 0xd9, 0x3a, 0xf3, 0x4a, 0xd1, 0xe9, 0x5c, 0x2b, 0x3a, 0x2a, 0x29, 0x97, 0x95,
	0x50, 0xb9, 0xde, 0xcb, 0x34, 0x21, 0xcb, 0x85, 0xa0, 0x25, 0x51, 0x29, 0x1e, 0x66, 0xea, 0xd9,
	0xa5, 0xe4, 0xae, 0x9f, 0x92, 0x7f, 0x0d, 0x1a, 0xff, 0x8d, 0x4e, 0x9e, 0x93, 0x1c, 0x6d, 0x09,
	0x60, 0xc5, 0x78, 0x89, 0x8a, 0x8d, 0x81, 0x64, 0xe4, 0x2a, 0xe2, 0xd0, 0x05, 0xad, 0x37, 0x22,
	0xa8, 0xc5, 0xf0, 0x08, 0x74, 0x8c, 0xb3, 0x75, 0x09, 0x34, 0x94, 0x34, 0x5e, 0x23, 0xa0, 0x41,
	0xd2, 0x44, 0xf2, 0x61, 0x00, 0x7a, 0xc6, 0xf8, 0xe5, 0x64, 0x62, 0x1c, 0x55, 0xd2, 0x6a, 0x73,
	0xfd, 0x57, 0x52, 0xa5, 0x85, 0x2e, 0xea, 0x8d, 0x56, 0x2b, 0xa9, 0xb4, 0x65, 0x4e, 0xe8, 0x6c,
	0x2e, 0x94, 0xd1, 0x61, 0x66, 0x28, 0x07, 0x79, 0xcb, 0x87, 0xbc, 0xa9, 0x83, 0xba, 0x44, 0x6b,
	0x22, 0xf9, 0x28, 0x00, 0x0f, 0x7d, 0x0b, 0xc7, 0x1c, 0xd1, 0xe2, 0x93, 0xb6, 0xf2, 0x1c, 0x09,
	0xc2, 0x57, 0xd6, 0x4a, 0x4d, 0x6d, 0x65, 0xe5, 0xc7, 0x01, 0xd8, 0xd3, 0x56, 0x6e, 0x1b, 0x01,
	0x77, 0xad, 0x24, 0xce, 0xaf, 0xd1, 0x9a, 0x5f, 0x25, 0xc6, 0x54, 0x4c, 0xd8, 0x85, 0xf5, 0xb7,
	0xa6, 0x36, 0xf8, 0xfb, 0x3f, 0x2d, 0x1d, 0xac, 0xc3, 0xe9, 0x94, 0xe4, 0xe2, 0x39, 0x12, 0xe8,
	0x1e, 0x4c, 0x75, 0x41, 0x1d, 0xdd, 0x12, 0xd4, 0xae, 0x7e, 0xb4, 0x6e, 0xa9, 0x1f, 0xee, 0xfa,
	0x6d, 0xd5, 0x3b, 0xed, 0xf5, 0x8f, 0xc1, 0x1e, 0x13, 0x73, 0xc2, 0x8d, 0xb0, 0xa3, 0x84, 0x3e,
	0x4b, 0x39, 0x2c, 0x47, 0x05, 0x31, 0xbd, 0x5c, 0x13, 0xb2, 0x2c, 0x96, 0x68, 0x56, 0xe9, 0x46,
	0xad, 0x93, 0xdc, 0x31, 0xe4, 0x69, 0x1c, 0x61, 0xba, 0xac, 0x4d, 0x0f, 0x37, 0x94, 0x2a, 0xb7,
	0x4b, 0x3e, 0x45, 0x39, 0x59, 0x70, 0xb6, 0x30, 0x6d, 0xdc, 0x67, 0x49, 0x0d, 0xa2, 0xb0, 0xd5,
	0xe0, 0xef, 0xa9, 0x72, 0xe3, 0xb3, 0x64, 0x3d, 0xc2, 0xa8, 0x44, 0x33, 0x35, 0x8b, 0x99, 0xee,
	0xee, 0x71, 0xe4, 0xf8, 0x51, 0xca, 0x00, 0xa4, 0xa8, 0xe8, 0xf7, 0x94, 0xb4, 0xa1, 0x3d, 0x67,
	0xef, 0x5f, 0x75, 0xb6, 0x1e, 0x2c, 0x0e, 0x6c, 0xa8, 0x9a, 0xc1, 0x42, 0xd7, 0xab, 0xd8, 0xab,
	0x57, 0x70, 0x00, 0x0e, 0x90, 0x10, 0x28, 0x9f, 0x97, 0x12, 0x20, 0x65, 0xe5, 0xc3, 0xe3, 0x60,
	0xd0, 0xce, 0xae, 0xb2, 0xa5, 0xa5, 0xda, 0xf0, 0x4a, 0x0e, 0x5c, 0x50, 0x5b, 0xea, 0x38, 0xf0,
	0x09, 0xd8, 0x77, 0xaf, 0x28, 0x9d, 0x47, 0x4a, 0xe7, 0x0a, 0x37, 0x79, 0x1b, 0x1c, 0xea, 0xdc,
	0x30, 0x51, 0x47, 0xeb, 0x05, 0x12, 0xf9, 0x1c, 0x7e, 0xc9, 0x7e, 0x1f, 0x23, 0x81, 0xae, 0x37,
	0x3b, 0x17, 0xa3, 0x99, 0xa7, 0x97, 0xac, 0xec, 0x04, 0x34, 0xac, 0x08, 0x9f, 0x5d, 0x8e, 0x16,
	0x05, 0xaa, 0xe7, 0x9f, 0xd4, 0xd4, 0xaa, 0xda, 0xe5, 0xc5, 0xa2, 0x60, 0x35, 0x7d, 0xa5, 0x9b,
	0x55, 0x37, 0x73, 0x8c, 0xe4, 0x9b, 0x00, 0xe8, 0xb3, 0x5f, 0xd0, 0xd5, 0xca, 0x8b, 0xc9, 0x60,
	0x2d, 0x25, 0xfb, 0x60, 0x07, 0x93, 0xaa, 0x76, 0x0d, 0xd9, 0x92, 0x52, 0x92, 0x2f, 0xb9, 0x8c,
	0x4c, 0xf5, 0xed, 0x76, 0x66, 0xc9, 0xe4, 0xdf, 0xa1, 0x05, 0x69, 0x34, 0x47, 0x42, 0x10, 0x3e,
	0xd2, 0x41, 0x75, 0x2f, 0xcd, 0xf8, 0x09, 0x68, 0x4f, 0x19, 0xcf, 0x37, 0x77, 0x63, 0x2d, 0x96,
	0xed, 0x58, 0x3d, 0x48, 0x64, 0x37, 0xb6, 0x63, 0xab, 0xe1, 0xa6, 0xe9, 0xb6, 0x3f, 0x4d, 0xbb,
	0x1e, 0xd0, 0x59, 0xeb, 0x01, 0xaf, 0x81, 0xdd, 0x7a, 0x8e, 0x38, 0x56, 0x53, 0x81, 0x4e, 0x4d,
	0xc7, 0xf0, 0x12, 0x4d, 0x65, 0x49, 0xd7, 0xcc, 0x35, 0x8e, 0xa5, 0x26, 0x71, 0xce, 0x2a, 0xa1,
	0xe3, 0x7e, 0x57, 0x65, 0xa2, 0xc7, 0x91, 0xdf, 0x9f, 0xa0, 0xfc, 0xcc, 0x9f, 0xb7, 0x1d, 0x23,
	0xf9, 0x7e, 0x33, 0xfe, 0x7d, 0xa5, 0x60, 0xe7, 0xa3, 0x05, 0xa7, 0x62, 0x1b, 0xa8, 0x9b, 0x9a,
	0x12, 0xfa, 0x35, 0xc5, 0xae, 0x18, 0x91, 0xb7, 0x62, 0xbc, 0x0e, 0xc0, 0x84, 0xcb, 0x0b, 0x57,
	0xa4, 0xae, 0x4d, 0x89, 0xf6, 0x38, 0xc9, 0x2b, 0xf0, 0x40, 0xdb, 0x91, 0x96, 0x0b, 0x94, 0x8b,
	0x7b, 0x19, 0x1d, 0xe4, 0x2c, 0x23, 0x51, 0xd4, 0x8d, 0x43, 0x3d, 0x27, 0xef, 0x36, 0x6d, 0xf5,
	0xe5, 0x72, 0xb5, 0x2a, 0xc8, 0x0b, 0x95, 0x45, 0xf7, 0x11, 0x6c, 0x0d, 0x56, 0xd1, 0x15, 0xac,
	0x94, 0x4d, 0x2d, 0xcf, 0xa6, 0xf7, 0x5c, 0xab, 0x2f, 0x18, 0xc3, 0x23, 0xc1, 0xe5, 0xd2, 0x78,
	0x77, 0x9b, 0x9e, 0x82, 0x5d, 0x4c, 0xb9, 0x2c, 0xb4, 0xac, 0xda, 0x08, 0x8a, 0x53, 0x71, 0x55,
	0x33, 0xf2, 0xd7, 0xb1, 0x23, 0xd0, 0x41, 0xa5, 0xd7, 0xf7, 0x0d, 0x95, 0xfc, 0x25, 0x04, 0x07,
	0xa6, 0xf0, 0xe8, 0x7a, 0xc0, 0xaa, 0x2d, 0x6c, 0x5b, 0x5b, 0x4e, 0xc3, 0xab, 0xcb, 0x69, 0x53,
	0xa9, 0xa3, 0xf5, 0x4a, 0x6d, 0x3d, 0xdc, 0xba, 0xc5, 0xc3, 0x09, 0x78, 0x60, 0x7b, 0x84, 0x42,
	0x55, 0xf7, 0xfc, 0x35, 0x9e, 0xd7, 0xd3, 0x3a, 0xfa, 0x5e, 0xa6, 0xa7, 0xad, 0x75, 0x42, 0x3d,
	0x03, 0x7b, 0x9d, 0xb0, 0xf1, 0x5e, 0xd7, 0xf7, 0xde, 0xe7, 0xc1, 0x01, 0x52, 0x15, 0xf9, 0x94,
	0xa3, 0x19, 0x66, 0x45, 0xa1, 0x1b, 0x65, 0x37, 0xdb, 0xd7, 0xec, 0xcc, 0x70, 0x93, 0x77, 0x02,
	0x5b, 0x31, 0x9f, 0x2f, 0xeb, 0x6d, 0xa2, 0x1b, 0x9a, 0x7d, 0x41, 0x27, 0x98, 0xde, 0x0e, 0x9a,
	0xd1, 0x2b, 0xf2, 0x46, 0xaf, 0x75, 0xaf, 0xb7, 0x6e, 0xf5, 0x7a, 0xf2, 0x2d, 0x1b, 0x64, 0x6f,
	0x23, 0x3e, 0x23, 0x2f, 0x96, 0x55, 0xb5, 0xd5, 0xca, 0xf3, 0x18, 0x74, 0x39, 0x79, 0x45, 0x78,
	0x4d, 0xb0, 0xf1, 0x63, 0x43, 0x27, 0x1f, 0x04, 0x36, 0x9b, 0x47, 0x0b, 0xc4, 0xcf, 0xea, 0xed,
	0xe2, 0xc3, 0x79, 0x21, 0xbc, 0xea, 0x85, 0x23, 0xd0, 0x31, 0xbf, 0x1c, 0xcc, 0xf0, 0x67, 0x7e,
	0x37, 0x6c, 0x7b, 0xf7, 0x7f, 0x85, 0xf6, 0xf2, 0x27, 0xf3, 0xcb, 0x9a, 0xe6, 0xf5, 0x89, 0x9c,
	0x59, 0xee, 0x6e, 0xa5, 0xbf, 0x9f, 0x85, 0xb7, 0xee, 0x67, 0xae, 0x46, 0x44, 0xb7, 0xd4, 0x08,
	0xe9, 0xed, 0x33, 0xaa, 0xaf, 0xb0, 0x93, 0xa9, 0x67, 0x97, 0x13, 0x6d, 0x3f, 0x27, 0xfa, 0x60,
	0x47, 0xcf, 0x02, 0x36, 0x8c, 0x2d, 0xe9, 0xb2, 0x79, 0xc7, 0xcf, 0xe6, 0xf5, 0xed, 0xaf, 0x7b,
	0x6d, 0xfb, 0x7b, 0x13, 0x1c, 0x4e, 0xe4, 0xe6, 0xab, 0x58, 0x75, 0xc5, 0x84, 0x60, 0x25, 0x3a,
	0x23, 0x66, 0xc5, 0xbb, 0x51, 0xe6, 0x72, 0x02, 0x78, 0x39, 0x91, 0x94, 0x0d, 0xb4, 0x05, 0xba,
	0x24, 0x7c, 0xdb, 0x3d, 0xe0, 0x08, 0x74, 0x16, 0xea, 0x45, 0xe3, 0x7d, 0x43, 0x6d, 0x9a, 0xfb,
	0x93, 0xf7, 0x03, 0x3b, 0x30, 0x9c, 0x70, 0xf6, 0x1d, 0x92, 0x0b, 0x82, 0xff, 0x87, 0xe5, 0xf3,
	0xee, 0x35, 0x5c, 0x03, 0x18, 0x79, 0xcb, 0x84, 0x4c, 0x05, 0x4c, 0x6b, 0x81, 0xaa, 0x5c, 0xd7,
	0xf1, 0x30, 0x6b, 0xe8, 0xe4, 0xa5, 0xdd, 0x87, 0x46, 0x25, 0x3b, 0xfb, 0xbf, 0x5b, 0x6b, 0xf2,
	0x5d, 0xdb, 0xae, 0xbf, 0xc1, 0x78, 0x81, 0xef, 0x6f, 0xcb, 0xbe, 0xf1, 0xa2, 0x5f, 0xf8, 0x67,
	0x0b, 0xec, 0x0f, 0x15, 0xd0, 0x82, 0x4d, 0x96, 0xd3, 0x14, 0xcb, 0x38, 0x7c, 0x34, 0x1e, 0x9e,
	0xae, 0x0f, 0xb4, 0x29, 0x8e, 0xdf, 0x89, 0xe0, 0xe7, 0x00, 0x1c, 0x0f, 0x4f, 0xd7, 0xfe, 0xa9,
	0xa6, 0x38, 0x7e, 0x37, 0x82, 0x47, 0xe0, 0xe1, 0x78, 0x78, 0xea, 0xff, 0xb7, 0x4b, 0x71, 0xfc,
	0xc3, 0x08, 0x42, 0xd0, 0x73, 0xfc, 0x3a, 0xc5, 0xf1, 0x8f, 0x22, 0x78, 0x08, 0x0e, 0x0c, 0x4f,
	0xff, 0x9a, 0x4a, 0x71, 0xfc, 0x63, 0x5f, 0x33, 0xa3, 0xd5, 0x2c, 0xc5, 0xf1, 0x4f, 0x1a, 0xcd,
	0xe6, 0xef, 0x4d, 0x8a, 0xe3, 0x9f, 0x36, 0x9a, 0xe6, 0x87, 0x44, 0x8a, 0xe3, 0x9f, 0x45, 0xf0,
	0x21, 0x78, 0x20, 0x79, 0x7a, 0xcf, 0x4f, 0x71, 0xfc, 0xf3, 0x08, 0x7e, 0x16, 0xc4, 0x0d, 0x4b,
	0x2d, 0xd6, 0x29, 0x8e, 0x7f, 0x11, 0xc1, 0x03, 0x00, 0xc6, 0xc3, 0x53, 0xfb, 0xea, 0x2f, 0xed,
	0x21, 0x0e, 0xfb, 0x14, 0xc7, 0xef, 0xd9, 0x0b, 0xf9, 0x63, 0x78, 0x8a, 0xe3, 0xf7, 0x23, 0xb8,
	0x0f, 0x76, 0xc7, 0xc3, 0x53, 0x39, 0x22, 0xa7, 0x38, 0xfe, 0x55, 0x64, 0xb0, 0x5a, 0x9f, 0x6b,
	0x53, 0x1c, 0x7f, 0x60, 0xbf, 0xeb, 0x46, 0xb0, 0x14, 0xc7, 0x1f, 0x46, 0x30, 0x06, 0x7b, 0xe3,
	0xe1, 0xa9, 0x1e, 0x88, 0x52, 0x1c, 0xff, 0xda, 0xda, 0xe9, 0x4d, 0x2a, 0x29, 0x8e, 0x7f, 0xd3,
	0x98, 0xef, 0x86, 0x85, 0x14, 0xc7, 0xbf, 0x8d, 0xe0, 0x23, 0xb0, 0x2f, 0xed, 0xb2, 0x5d, 0x3a,
	0xc5, 0xf1, 0x47, 0xd6, 0x28, 0xd9, 0x85, 0x52, 0x1c, 0xff, 0xce, 0xbe, 0xeb, 0xf5, 0x80, 0x14,
	0xc7, 0x1f, 0xdb, 0xb3, 0x75, 0xf9, 0x4e, 0x71, 0xfc, 0x7b, 0xab, 0xe8, 0xd5, 0xcb, 0x14, 0xc7,
	0x7f, 0x68, 0xd8, 0x2e, 0xd7, 0x53, 0x1c, 0xff, 0xd1, 0xde, 0x75, 0x3d, 0x25, 0x53, 0x1c, 0xff,
	0xc9, 0x82, 0xaa, 0xd2, 0x21, 0xc5, 0xf1, 0x9f, 0xa3, 0x67, 0xed, 0xaf, 0x06, 0xdf, 0x0b, 0x3e,
	0xf3, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc8, 0xf9, 0x70, 0xf0, 0xaf, 0x17, 0x00, 0x00,
}
