// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.5
// source: dota_gcmessages_client_battle_report.proto

package dota

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CMsgBattleReport_HighlightType int32

const (
	CMsgBattleReport_HighlightType_k_eHighlightTypeInvalid            CMsgBattleReport_HighlightType = -1
	CMsgBattleReport_HighlightType_k_eGameWinrate                     CMsgBattleReport_HighlightType = 0
	CMsgBattleReport_HighlightType_k_eLaneWinrate                     CMsgBattleReport_HighlightType = 1
	CMsgBattleReport_HighlightType_k_eMMRDelta                        CMsgBattleReport_HighlightType = 2
	CMsgBattleReport_HighlightType_k_eNumHeroesPlayed                 CMsgBattleReport_HighlightType = 3
	CMsgBattleReport_HighlightType_k_eNumGamesPlayed                  CMsgBattleReport_HighlightType = 4
	CMsgBattleReport_HighlightType_k_eAveragePowerRunesTaken          CMsgBattleReport_HighlightType = 5
	CMsgBattleReport_HighlightType_k_eAverageBountyRunesTaken         CMsgBattleReport_HighlightType = 6
	CMsgBattleReport_HighlightType_k_eTotalKillEnemyT1First           CMsgBattleReport_HighlightType = 7
	CMsgBattleReport_HighlightType_k_eTotalRoshanKills                CMsgBattleReport_HighlightType = 8
	CMsgBattleReport_HighlightType_k_eTotalDewards                    CMsgBattleReport_HighlightType = 9
	CMsgBattleReport_HighlightType_k_eTotalCampsStacked               CMsgBattleReport_HighlightType = 10
	CMsgBattleReport_HighlightType_k_eMaxWinstreak                    CMsgBattleReport_HighlightType = 11
	CMsgBattleReport_HighlightType_k_eAverageDewards                  CMsgBattleReport_HighlightType = 12
	CMsgBattleReport_HighlightType_k_eAverageKills                    CMsgBattleReport_HighlightType = 13
	CMsgBattleReport_HighlightType_k_eMaxKills                        CMsgBattleReport_HighlightType = 14
	CMsgBattleReport_HighlightType_k_eAverageAssists                  CMsgBattleReport_HighlightType = 15
	CMsgBattleReport_HighlightType_k_eMaxAssists                      CMsgBattleReport_HighlightType = 16
	CMsgBattleReport_HighlightType_k_eAverageDeaths                   CMsgBattleReport_HighlightType = 17
	CMsgBattleReport_HighlightType_k_eMinDeaths                       CMsgBattleReport_HighlightType = 18
	CMsgBattleReport_HighlightType_k_eAverageCampsStacked             CMsgBattleReport_HighlightType = 19
	CMsgBattleReport_HighlightType_k_eTotalLastHits                   CMsgBattleReport_HighlightType = 20
	CMsgBattleReport_HighlightType_k_eAverageLastHits                 CMsgBattleReport_HighlightType = 21
	CMsgBattleReport_HighlightType_k_eTotalDenies                     CMsgBattleReport_HighlightType = 22
	CMsgBattleReport_HighlightType_k_eAverageDenies                   CMsgBattleReport_HighlightType = 23
	CMsgBattleReport_HighlightType_k_eTotalGamesWithRoshanAdvantage   CMsgBattleReport_HighlightType = 24
	CMsgBattleReport_HighlightType_k_ePercentGamesWithRoshanAdvantage CMsgBattleReport_HighlightType = 25
	CMsgBattleReport_HighlightType_k_eAverageStunDuration             CMsgBattleReport_HighlightType = 26
	CMsgBattleReport_HighlightType_k_eTotalStunDuration               CMsgBattleReport_HighlightType = 27
	CMsgBattleReport_HighlightType_k_eAverageTeleportsUsed            CMsgBattleReport_HighlightType = 28
	CMsgBattleReport_HighlightType_k_eTotalTeleportsUsed              CMsgBattleReport_HighlightType = 29
	CMsgBattleReport_HighlightType_k_eAverageHeroDamage               CMsgBattleReport_HighlightType = 30
	CMsgBattleReport_HighlightType_k_eTotalHeroDamage                 CMsgBattleReport_HighlightType = 31
	CMsgBattleReport_HighlightType_k_eAverageHeroHealing              CMsgBattleReport_HighlightType = 32
	CMsgBattleReport_HighlightType_k_eTotalHeroHealing                CMsgBattleReport_HighlightType = 33
	CMsgBattleReport_HighlightType_k_eAverageTowerDamage              CMsgBattleReport_HighlightType = 34
	CMsgBattleReport_HighlightType_k_eTotalTowerDamage                CMsgBattleReport_HighlightType = 35
	CMsgBattleReport_HighlightType_k_eMaxLossStreak                   CMsgBattleReport_HighlightType = 36
	CMsgBattleReport_HighlightType_k_eAverageGameDuration             CMsgBattleReport_HighlightType = 37
	CMsgBattleReport_HighlightType_k_eMaxGameDuration                 CMsgBattleReport_HighlightType = 38
	CMsgBattleReport_HighlightType_k_eMinGameDuration                 CMsgBattleReport_HighlightType = 39
	CMsgBattleReport_HighlightType_k_eAverageWinDuration              CMsgBattleReport_HighlightType = 40
	CMsgBattleReport_HighlightType_k_eMaxWinDuration                  CMsgBattleReport_HighlightType = 41
	CMsgBattleReport_HighlightType_k_eMinWinDuration                  CMsgBattleReport_HighlightType = 42
	CMsgBattleReport_HighlightType_k_eAverageLossDuration             CMsgBattleReport_HighlightType = 43
	CMsgBattleReport_HighlightType_k_eMaxLossDuration                 CMsgBattleReport_HighlightType = 44
	CMsgBattleReport_HighlightType_k_eMinLossDuration                 CMsgBattleReport_HighlightType = 45
	CMsgBattleReport_HighlightType_k_ePctGamesEnemyT1TakenFirst       CMsgBattleReport_HighlightType = 46
	CMsgBattleReport_HighlightType_k_eMaxCampsStacked                 CMsgBattleReport_HighlightType = 47
	CMsgBattleReport_HighlightType_k_eMaxDewards                      CMsgBattleReport_HighlightType = 48
	CMsgBattleReport_HighlightType_k_eMaxRoshanKills                  CMsgBattleReport_HighlightType = 49
	CMsgBattleReport_HighlightType_k_eMaxBountyRunesTaken             CMsgBattleReport_HighlightType = 50
	CMsgBattleReport_HighlightType_k_eMaxPowerRunesTaken              CMsgBattleReport_HighlightType = 51
	CMsgBattleReport_HighlightType_k_eMaxDeaths                       CMsgBattleReport_HighlightType = 52
	CMsgBattleReport_HighlightType_k_eMaxLastHits                     CMsgBattleReport_HighlightType = 53
	CMsgBattleReport_HighlightType_k_eMaxDenies                       CMsgBattleReport_HighlightType = 54
	CMsgBattleReport_HighlightType_k_eRadiantWinRate                  CMsgBattleReport_HighlightType = 55
	CMsgBattleReport_HighlightType_k_eDireWinRate                     CMsgBattleReport_HighlightType = 56
	CMsgBattleReport_HighlightType_k_eRadiantGameCount                CMsgBattleReport_HighlightType = 57
	CMsgBattleReport_HighlightType_k_eDireGameCount                   CMsgBattleReport_HighlightType = 58
	CMsgBattleReport_HighlightType_k_eMaxDamage                       CMsgBattleReport_HighlightType = 59
	CMsgBattleReport_HighlightType_k_eMaxHealing                      CMsgBattleReport_HighlightType = 60
	CMsgBattleReport_HighlightType_k_eMaxTowerDamage                  CMsgBattleReport_HighlightType = 61
	CMsgBattleReport_HighlightType_k_eAverageGPM                      CMsgBattleReport_HighlightType = 62
	CMsgBattleReport_HighlightType_k_eMaxGPM                          CMsgBattleReport_HighlightType = 63
	CMsgBattleReport_HighlightType_k_eAverageXPM                      CMsgBattleReport_HighlightType = 64
	CMsgBattleReport_HighlightType_k_eMaxXPM                          CMsgBattleReport_HighlightType = 65
)

// Enum value maps for CMsgBattleReport_HighlightType.
var (
	CMsgBattleReport_HighlightType_name = map[int32]string{
		-1: "k_eHighlightTypeInvalid",
		0:  "k_eGameWinrate",
		1:  "k_eLaneWinrate",
		2:  "k_eMMRDelta",
		3:  "k_eNumHeroesPlayed",
		4:  "k_eNumGamesPlayed",
		5:  "k_eAveragePowerRunesTaken",
		6:  "k_eAverageBountyRunesTaken",
		7:  "k_eTotalKillEnemyT1First",
		8:  "k_eTotalRoshanKills",
		9:  "k_eTotalDewards",
		10: "k_eTotalCampsStacked",
		11: "k_eMaxWinstreak",
		12: "k_eAverageDewards",
		13: "k_eAverageKills",
		14: "k_eMaxKills",
		15: "k_eAverageAssists",
		16: "k_eMaxAssists",
		17: "k_eAverageDeaths",
		18: "k_eMinDeaths",
		19: "k_eAverageCampsStacked",
		20: "k_eTotalLastHits",
		21: "k_eAverageLastHits",
		22: "k_eTotalDenies",
		23: "k_eAverageDenies",
		24: "k_eTotalGamesWithRoshanAdvantage",
		25: "k_ePercentGamesWithRoshanAdvantage",
		26: "k_eAverageStunDuration",
		27: "k_eTotalStunDuration",
		28: "k_eAverageTeleportsUsed",
		29: "k_eTotalTeleportsUsed",
		30: "k_eAverageHeroDamage",
		31: "k_eTotalHeroDamage",
		32: "k_eAverageHeroHealing",
		33: "k_eTotalHeroHealing",
		34: "k_eAverageTowerDamage",
		35: "k_eTotalTowerDamage",
		36: "k_eMaxLossStreak",
		37: "k_eAverageGameDuration",
		38: "k_eMaxGameDuration",
		39: "k_eMinGameDuration",
		40: "k_eAverageWinDuration",
		41: "k_eMaxWinDuration",
		42: "k_eMinWinDuration",
		43: "k_eAverageLossDuration",
		44: "k_eMaxLossDuration",
		45: "k_eMinLossDuration",
		46: "k_ePctGamesEnemyT1TakenFirst",
		47: "k_eMaxCampsStacked",
		48: "k_eMaxDewards",
		49: "k_eMaxRoshanKills",
		50: "k_eMaxBountyRunesTaken",
		51: "k_eMaxPowerRunesTaken",
		52: "k_eMaxDeaths",
		53: "k_eMaxLastHits",
		54: "k_eMaxDenies",
		55: "k_eRadiantWinRate",
		56: "k_eDireWinRate",
		57: "k_eRadiantGameCount",
		58: "k_eDireGameCount",
		59: "k_eMaxDamage",
		60: "k_eMaxHealing",
		61: "k_eMaxTowerDamage",
		62: "k_eAverageGPM",
		63: "k_eMaxGPM",
		64: "k_eAverageXPM",
		65: "k_eMaxXPM",
	}
	CMsgBattleReport_HighlightType_value = map[string]int32{
		"k_eHighlightTypeInvalid":            -1,
		"k_eGameWinrate":                     0,
		"k_eLaneWinrate":                     1,
		"k_eMMRDelta":                        2,
		"k_eNumHeroesPlayed":                 3,
		"k_eNumGamesPlayed":                  4,
		"k_eAveragePowerRunesTaken":          5,
		"k_eAverageBountyRunesTaken":         6,
		"k_eTotalKillEnemyT1First":           7,
		"k_eTotalRoshanKills":                8,
		"k_eTotalDewards":                    9,
		"k_eTotalCampsStacked":               10,
		"k_eMaxWinstreak":                    11,
		"k_eAverageDewards":                  12,
		"k_eAverageKills":                    13,
		"k_eMaxKills":                        14,
		"k_eAverageAssists":                  15,
		"k_eMaxAssists":                      16,
		"k_eAverageDeaths":                   17,
		"k_eMinDeaths":                       18,
		"k_eAverageCampsStacked":             19,
		"k_eTotalLastHits":                   20,
		"k_eAverageLastHits":                 21,
		"k_eTotalDenies":                     22,
		"k_eAverageDenies":                   23,
		"k_eTotalGamesWithRoshanAdvantage":   24,
		"k_ePercentGamesWithRoshanAdvantage": 25,
		"k_eAverageStunDuration":             26,
		"k_eTotalStunDuration":               27,
		"k_eAverageTeleportsUsed":            28,
		"k_eTotalTeleportsUsed":              29,
		"k_eAverageHeroDamage":               30,
		"k_eTotalHeroDamage":                 31,
		"k_eAverageHeroHealing":              32,
		"k_eTotalHeroHealing":                33,
		"k_eAverageTowerDamage":              34,
		"k_eTotalTowerDamage":                35,
		"k_eMaxLossStreak":                   36,
		"k_eAverageGameDuration":             37,
		"k_eMaxGameDuration":                 38,
		"k_eMinGameDuration":                 39,
		"k_eAverageWinDuration":              40,
		"k_eMaxWinDuration":                  41,
		"k_eMinWinDuration":                  42,
		"k_eAverageLossDuration":             43,
		"k_eMaxLossDuration":                 44,
		"k_eMinLossDuration":                 45,
		"k_ePctGamesEnemyT1TakenFirst":       46,
		"k_eMaxCampsStacked":                 47,
		"k_eMaxDewards":                      48,
		"k_eMaxRoshanKills":                  49,
		"k_eMaxBountyRunesTaken":             50,
		"k_eMaxPowerRunesTaken":              51,
		"k_eMaxDeaths":                       52,
		"k_eMaxLastHits":                     53,
		"k_eMaxDenies":                       54,
		"k_eRadiantWinRate":                  55,
		"k_eDireWinRate":                     56,
		"k_eRadiantGameCount":                57,
		"k_eDireGameCount":                   58,
		"k_eMaxDamage":                       59,
		"k_eMaxHealing":                      60,
		"k_eMaxTowerDamage":                  61,
		"k_eAverageGPM":                      62,
		"k_eMaxGPM":                          63,
		"k_eAverageXPM":                      64,
		"k_eMaxXPM":                          65,
	}
)

func (x CMsgBattleReport_HighlightType) Enum() *CMsgBattleReport_HighlightType {
	p := new(CMsgBattleReport_HighlightType)
	*p = x
	return p
}

func (x CMsgBattleReport_HighlightType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgBattleReport_HighlightType) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_battle_report_proto_enumTypes[0].Descriptor()
}

func (CMsgBattleReport_HighlightType) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_battle_report_proto_enumTypes[0]
}

func (x CMsgBattleReport_HighlightType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgBattleReport_HighlightType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgBattleReport_HighlightType(num)
	return nil
}

// Deprecated: Use CMsgBattleReport_HighlightType.Descriptor instead.
func (CMsgBattleReport_HighlightType) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_battle_report_proto_rawDescGZIP(), []int{0}
}

type CMsgBattleReport_HighlightCategory int32

const (
	CMsgBattleReport_HighlightCategory_k_eHighlightGeneral CMsgBattleReport_HighlightCategory = 0
	CMsgBattleReport_HighlightCategory_k_eHighlightHero    CMsgBattleReport_HighlightCategory = 1
	CMsgBattleReport_HighlightCategory_k_eHighlightRole    CMsgBattleReport_HighlightCategory = 2
)

// Enum value maps for CMsgBattleReport_HighlightCategory.
var (
	CMsgBattleReport_HighlightCategory_name = map[int32]string{
		0: "k_eHighlightGeneral",
		1: "k_eHighlightHero",
		2: "k_eHighlightRole",
	}
	CMsgBattleReport_HighlightCategory_value = map[string]int32{
		"k_eHighlightGeneral": 0,
		"k_eHighlightHero":    1,
		"k_eHighlightRole":    2,
	}
)

func (x CMsgBattleReport_HighlightCategory) Enum() *CMsgBattleReport_HighlightCategory {
	p := new(CMsgBattleReport_HighlightCategory)
	*p = x
	return p
}

func (x CMsgBattleReport_HighlightCategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgBattleReport_HighlightCategory) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_battle_report_proto_enumTypes[1].Descriptor()
}

func (CMsgBattleReport_HighlightCategory) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_battle_report_proto_enumTypes[1]
}

func (x CMsgBattleReport_HighlightCategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgBattleReport_HighlightCategory) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgBattleReport_HighlightCategory(num)
	return nil
}

// Deprecated: Use CMsgBattleReport_HighlightCategory.Descriptor instead.
func (CMsgBattleReport_HighlightCategory) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_battle_report_proto_rawDescGZIP(), []int{1}
}

type CMsgBattleReport_Role int32

const (
	CMsgBattleReport_Role_k_eUnknownRole CMsgBattleReport_Role = -1
	CMsgBattleReport_Role_k_eSafelane    CMsgBattleReport_Role = 0
	CMsgBattleReport_Role_k_eMidlane     CMsgBattleReport_Role = 1
	CMsgBattleReport_Role_k_eOfflane     CMsgBattleReport_Role = 2
	CMsgBattleReport_Role_k_eSoftSupport CMsgBattleReport_Role = 3
	CMsgBattleReport_Role_k_eHardSupport CMsgBattleReport_Role = 4
)

// Enum value maps for CMsgBattleReport_Role.
var (
	CMsgBattleReport_Role_name = map[int32]string{
		-1: "k_eUnknownRole",
		0:  "k_eSafelane",
		1:  "k_eMidlane",
		2:  "k_eOfflane",
		3:  "k_eSoftSupport",
		4:  "k_eHardSupport",
	}
	CMsgBattleReport_Role_value = map[string]int32{
		"k_eUnknownRole": -1,
		"k_eSafelane":    0,
		"k_eMidlane":     1,
		"k_eOfflane":     2,
		"k_eSoftSupport": 3,
		"k_eHardSupport": 4,
	}
)

func (x CMsgBattleReport_Role) Enum() *CMsgBattleReport_Role {
	p := new(CMsgBattleReport_Role)
	*p = x
	return p
}

func (x CMsgBattleReport_Role) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgBattleReport_Role) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_battle_report_proto_enumTypes[2].Descriptor()
}

func (CMsgBattleReport_Role) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_battle_report_proto_enumTypes[2]
}

func (x CMsgBattleReport_Role) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgBattleReport_Role) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgBattleReport_Role(num)
	return nil
}

// Deprecated: Use CMsgBattleReport_Role.Descriptor instead.
func (CMsgBattleReport_Role) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_battle_report_proto_rawDescGZIP(), []int{2}
}

type CMsgBattleReport_CompareContext int32

const (
	CMsgBattleReport_CompareContext_k_eCompareContextInvalid  CMsgBattleReport_CompareContext = -1
	CMsgBattleReport_CompareContext_k_eAbsoluteValue          CMsgBattleReport_CompareContext = 0
	CMsgBattleReport_CompareContext_k_ePlayersOfSimilarRank   CMsgBattleReport_CompareContext = 1
	CMsgBattleReport_CompareContext_k_eAllPlayers             CMsgBattleReport_CompareContext = 2
	CMsgBattleReport_CompareContext_k_ePlayersPersonalHistory CMsgBattleReport_CompareContext = 3
)

// Enum value maps for CMsgBattleReport_CompareContext.
var (
	CMsgBattleReport_CompareContext_name = map[int32]string{
		-1: "k_eCompareContextInvalid",
		0:  "k_eAbsoluteValue",
		1:  "k_ePlayersOfSimilarRank",
		2:  "k_eAllPlayers",
		3:  "k_ePlayersPersonalHistory",
	}
	CMsgBattleReport_CompareContext_value = map[string]int32{
		"k_eCompareContextInvalid":  -1,
		"k_eAbsoluteValue":          0,
		"k_ePlayersOfSimilarRank":   1,
		"k_eAllPlayers":             2,
		"k_ePlayersPersonalHistory": 3,
	}
)

func (x CMsgBattleReport_CompareContext) Enum() *CMsgBattleReport_CompareContext {
	p := new(CMsgBattleReport_CompareContext)
	*p = x
	return p
}

func (x CMsgBattleReport_CompareContext) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgBattleReport_CompareContext) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_battle_report_proto_enumTypes[3].Descriptor()
}

func (CMsgBattleReport_CompareContext) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_battle_report_proto_enumTypes[3]
}

func (x CMsgBattleReport_CompareContext) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgBattleReport_CompareContext) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgBattleReport_CompareContext(num)
	return nil
}

// Deprecated: Use CMsgBattleReport_CompareContext.Descriptor instead.
func (CMsgBattleReport_CompareContext) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_battle_report_proto_rawDescGZIP(), []int{3}
}

type CMsgBattleReport_HighlightTier int32

const (
	CMsgBattleReport_HighlightTier_k_eHighlightTierLow    CMsgBattleReport_HighlightTier = -1
	CMsgBattleReport_HighlightTier_k_eHighlightTierNone   CMsgBattleReport_HighlightTier = 0
	CMsgBattleReport_HighlightTier_k_eHighlightTier1      CMsgBattleReport_HighlightTier = 1
	CMsgBattleReport_HighlightTier_k_eHighlightTier2      CMsgBattleReport_HighlightTier = 2
	CMsgBattleReport_HighlightTier_k_eHighlightTier3      CMsgBattleReport_HighlightTier = 3
	CMsgBattleReport_HighlightTier_k_eHighlightTierCustom CMsgBattleReport_HighlightTier = 4
)

// Enum value maps for CMsgBattleReport_HighlightTier.
var (
	CMsgBattleReport_HighlightTier_name = map[int32]string{
		-1: "k_eHighlightTierLow",
		0:  "k_eHighlightTierNone",
		1:  "k_eHighlightTier1",
		2:  "k_eHighlightTier2",
		3:  "k_eHighlightTier3",
		4:  "k_eHighlightTierCustom",
	}
	CMsgBattleReport_HighlightTier_value = map[string]int32{
		"k_eHighlightTierLow":    -1,
		"k_eHighlightTierNone":   0,
		"k_eHighlightTier1":      1,
		"k_eHighlightTier2":      2,
		"k_eHighlightTier3":      3,
		"k_eHighlightTierCustom": 4,
	}
)

func (x CMsgBattleReport_HighlightTier) Enum() *CMsgBattleReport_HighlightTier {
	p := new(CMsgBattleReport_HighlightTier)
	*p = x
	return p
}

func (x CMsgBattleReport_HighlightTier) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgBattleReport_HighlightTier) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_battle_report_proto_enumTypes[4].Descriptor()
}

func (CMsgBattleReport_HighlightTier) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_battle_report_proto_enumTypes[4]
}

func (x CMsgBattleReport_HighlightTier) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgBattleReport_HighlightTier) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgBattleReport_HighlightTier(num)
	return nil
}

// Deprecated: Use CMsgBattleReport_HighlightTier.Descriptor instead.
func (CMsgBattleReport_HighlightTier) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_battle_report_proto_rawDescGZIP(), []int{4}
}

type CMsgBattleReport_HighlightRarity int32

const (
	CMsgBattleReport_HighlightRarity_k_eHighlightCommon   CMsgBattleReport_HighlightRarity = 0
	CMsgBattleReport_HighlightRarity_k_eHighlightUncommon CMsgBattleReport_HighlightRarity = 1
	CMsgBattleReport_HighlightRarity_k_eHighlightRare     CMsgBattleReport_HighlightRarity = 2
)

// Enum value maps for CMsgBattleReport_HighlightRarity.
var (
	CMsgBattleReport_HighlightRarity_name = map[int32]string{
		0: "k_eHighlightCommon",
		1: "k_eHighlightUncommon",
		2: "k_eHighlightRare",
	}
	CMsgBattleReport_HighlightRarity_value = map[string]int32{
		"k_eHighlightCommon":   0,
		"k_eHighlightUncommon": 1,
		"k_eHighlightRare":     2,
	}
)

func (x CMsgBattleReport_HighlightRarity) Enum() *CMsgBattleReport_HighlightRarity {
	p := new(CMsgBattleReport_HighlightRarity)
	*p = x
	return p
}

func (x CMsgBattleReport_HighlightRarity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgBattleReport_HighlightRarity) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_battle_report_proto_enumTypes[5].Descriptor()
}

func (CMsgBattleReport_HighlightRarity) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_battle_report_proto_enumTypes[5]
}

func (x CMsgBattleReport_HighlightRarity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgBattleReport_HighlightRarity) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgBattleReport_HighlightRarity(num)
	return nil
}

// Deprecated: Use CMsgBattleReport_HighlightRarity.Descriptor instead.
func (CMsgBattleReport_HighlightRarity) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_battle_report_proto_rawDescGZIP(), []int{5}
}

type CMsgBattleReport_EOutcome int32

const (
	CMsgBattleReport_EOutcome_k_eWin  CMsgBattleReport_EOutcome = 0
	CMsgBattleReport_EOutcome_k_eLoss CMsgBattleReport_EOutcome = 1
)

// Enum value maps for CMsgBattleReport_EOutcome.
var (
	CMsgBattleReport_EOutcome_name = map[int32]string{
		0: "k_eWin",
		1: "k_eLoss",
	}
	CMsgBattleReport_EOutcome_value = map[string]int32{
		"k_eWin":  0,
		"k_eLoss": 1,
	}
)

func (x CMsgBattleReport_EOutcome) Enum() *CMsgBattleReport_EOutcome {
	p := new(CMsgBattleReport_EOutcome)
	*p = x
	return p
}

func (x CMsgBattleReport_EOutcome) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgBattleReport_EOutcome) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_battle_report_proto_enumTypes[6].Descriptor()
}

func (CMsgBattleReport_EOutcome) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_battle_report_proto_enumTypes[6]
}

func (x CMsgBattleReport_EOutcome) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgBattleReport_EOutcome) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgBattleReport_EOutcome(num)
	return nil
}

// Deprecated: Use CMsgBattleReport_EOutcome.Descriptor instead.
func (CMsgBattleReport_EOutcome) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_battle_report_proto_rawDescGZIP(), []int{6}
}

type CMsgBattleReport_ELaneOutcome int32

const (
	CMsgBattleReport_ELaneOutcome_k_eUnknownLaneOutcome CMsgBattleReport_ELaneOutcome = -1
	CMsgBattleReport_ELaneOutcome_k_eWonLane            CMsgBattleReport_ELaneOutcome = 0
	CMsgBattleReport_ELaneOutcome_k_eLostLane           CMsgBattleReport_ELaneOutcome = 1
	CMsgBattleReport_ELaneOutcome_k_eEvenLane           CMsgBattleReport_ELaneOutcome = 2
)

// Enum value maps for CMsgBattleReport_ELaneOutcome.
var (
	CMsgBattleReport_ELaneOutcome_name = map[int32]string{
		-1: "k_eUnknownLaneOutcome",
		0:  "k_eWonLane",
		1:  "k_eLostLane",
		2:  "k_eEvenLane",
	}
	CMsgBattleReport_ELaneOutcome_value = map[string]int32{
		"k_eUnknownLaneOutcome": -1,
		"k_eWonLane":            0,
		"k_eLostLane":           1,
		"k_eEvenLane":           2,
	}
)

func (x CMsgBattleReport_ELaneOutcome) Enum() *CMsgBattleReport_ELaneOutcome {
	p := new(CMsgBattleReport_ELaneOutcome)
	*p = x
	return p
}

func (x CMsgBattleReport_ELaneOutcome) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgBattleReport_ELaneOutcome) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_battle_report_proto_enumTypes[7].Descriptor()
}

func (CMsgBattleReport_ELaneOutcome) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_battle_report_proto_enumTypes[7]
}

func (x CMsgBattleReport_ELaneOutcome) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgBattleReport_ELaneOutcome) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgBattleReport_ELaneOutcome(num)
	return nil
}

// Deprecated: Use CMsgBattleReport_ELaneOutcome.Descriptor instead.
func (CMsgBattleReport_ELaneOutcome) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_battle_report_proto_rawDescGZIP(), []int{7}
}

type CMsgClientToGCGetBattleReportResponse_EResponse int32

const (
	CMsgClientToGCGetBattleReportResponse_k_eInternalError            CMsgClientToGCGetBattleReportResponse_EResponse = 0
	CMsgClientToGCGetBattleReportResponse_k_eSuccess                  CMsgClientToGCGetBattleReportResponse_EResponse = 1
	CMsgClientToGCGetBattleReportResponse_k_eTooBusy                  CMsgClientToGCGetBattleReportResponse_EResponse = 2
	CMsgClientToGCGetBattleReportResponse_k_eDisabled                 CMsgClientToGCGetBattleReportResponse_EResponse = 3
	CMsgClientToGCGetBattleReportResponse_k_ePermissionDenied         CMsgClientToGCGetBattleReportResponse_EResponse = 4
	CMsgClientToGCGetBattleReportResponse_k_eNotSubscribedToDotaPlus  CMsgClientToGCGetBattleReportResponse_EResponse = 5
	CMsgClientToGCGetBattleReportResponse_k_eInvalidParameters        CMsgClientToGCGetBattleReportResponse_EResponse = 6
	CMsgClientToGCGetBattleReportResponse_k_eUnableToGetPlusSubInfo   CMsgClientToGCGetBattleReportResponse_EResponse = 7
	CMsgClientToGCGetBattleReportResponse_k_eUnableToLoadBattleReport CMsgClientToGCGetBattleReportResponse_EResponse = 8
	CMsgClientToGCGetBattleReportResponse_k_eUnableToSaveBattleReport CMsgClientToGCGetBattleReportResponse_EResponse = 9
	CMsgClientToGCGetBattleReportResponse_k_eUnableToGetAggregates    CMsgClientToGCGetBattleReportResponse_EResponse = 10
	CMsgClientToGCGetBattleReportResponse_k_eNotEnoughGamesPlayed     CMsgClientToGCGetBattleReportResponse_EResponse = 11
)

// Enum value maps for CMsgClientToGCGetBattleReportResponse_EResponse.
var (
	CMsgClientToGCGetBattleReportResponse_EResponse_name = map[int32]string{
		0:  "k_eInternalError",
		1:  "k_eSuccess",
		2:  "k_eTooBusy",
		3:  "k_eDisabled",
		4:  "k_ePermissionDenied",
		5:  "k_eNotSubscribedToDotaPlus",
		6:  "k_eInvalidParameters",
		7:  "k_eUnableToGetPlusSubInfo",
		8:  "k_eUnableToLoadBattleReport",
		9:  "k_eUnableToSaveBattleReport",
		10: "k_eUnableToGetAggregates",
		11: "k_eNotEnoughGamesPlayed",
	}
	CMsgClientToGCGetBattleReportResponse_EResponse_value = map[string]int32{
		"k_eInternalError":            0,
		"k_eSuccess":                  1,
		"k_eTooBusy":                  2,
		"k_eDisabled":                 3,
		"k_ePermissionDenied":         4,
		"k_eNotSubscribedToDotaPlus":  5,
		"k_eInvalidParameters":        6,
		"k_eUnableToGetPlusSubInfo":   7,
		"k_eUnableToLoadBattleReport": 8,
		"k_eUnableToSaveBattleReport": 9,
		"k_eUnableToGetAggregates":    10,
		"k_eNotEnoughGamesPlayed":     11,
	}
)

func (x CMsgClientToGCGetBattleReportResponse_EResponse) Enum() *CMsgClientToGCGetBattleReportResponse_EResponse {
	p := new(CMsgClientToGCGetBattleReportResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCGetBattleReportResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCGetBattleReportResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_battle_report_proto_enumTypes[8].Descriptor()
}

func (CMsgClientToGCGetBattleReportResponse_EResponse) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_battle_report_proto_enumTypes[8]
}

func (x CMsgClientToGCGetBattleReportResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCGetBattleReportResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCGetBattleReportResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCGetBattleReportResponse_EResponse.Descriptor instead.
func (CMsgClientToGCGetBattleReportResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_battle_report_proto_rawDescGZIP(), []int{9, 0}
}

type CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse int32

const (
	CMsgClientToGCGetBattleReportAggregateStatsResponse_k_eInternalError           CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse = 0
	CMsgClientToGCGetBattleReportAggregateStatsResponse_k_eSuccess                 CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse = 1
	CMsgClientToGCGetBattleReportAggregateStatsResponse_k_eTooBusy                 CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse = 2
	CMsgClientToGCGetBattleReportAggregateStatsResponse_k_eDisabled                CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse = 3
	CMsgClientToGCGetBattleReportAggregateStatsResponse_k_ePermissionDenied        CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse = 4
	CMsgClientToGCGetBattleReportAggregateStatsResponse_k_eInvalidParams           CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse = 5
	CMsgClientToGCGetBattleReportAggregateStatsResponse_k_eNotSubscribedToDotaPlus CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse = 6
)

// Enum value maps for CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse.
var (
	CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eTooBusy",
		3: "k_eDisabled",
		4: "k_ePermissionDenied",
		5: "k_eInvalidParams",
		6: "k_eNotSubscribedToDotaPlus",
	}
	CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse_value = map[string]int32{
		"k_eInternalError":           0,
		"k_eSuccess":                 1,
		"k_eTooBusy":                 2,
		"k_eDisabled":                3,
		"k_ePermissionDenied":        4,
		"k_eInvalidParams":           5,
		"k_eNotSubscribedToDotaPlus": 6,
	}
)

func (x CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse) Enum() *CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse {
	p := new(CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_battle_report_proto_enumTypes[9].Descriptor()
}

func (CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_battle_report_proto_enumTypes[9]
}

func (x CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse.Descriptor instead.
func (CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_battle_report_proto_rawDescGZIP(), []int{11, 0}
}

type CMsgClientToGCGetBattleReportInfoResponse_EResponse int32

const (
	CMsgClientToGCGetBattleReportInfoResponse_k_eInternalError           CMsgClientToGCGetBattleReportInfoResponse_EResponse = 0
	CMsgClientToGCGetBattleReportInfoResponse_k_eSuccess                 CMsgClientToGCGetBattleReportInfoResponse_EResponse = 1
	CMsgClientToGCGetBattleReportInfoResponse_k_eTooBusy                 CMsgClientToGCGetBattleReportInfoResponse_EResponse = 2
	CMsgClientToGCGetBattleReportInfoResponse_k_eDisabled                CMsgClientToGCGetBattleReportInfoResponse_EResponse = 3
	CMsgClientToGCGetBattleReportInfoResponse_k_ePermissionDenied        CMsgClientToGCGetBattleReportInfoResponse_EResponse = 4
	CMsgClientToGCGetBattleReportInfoResponse_k_eNotSubscribedToDotaPlus CMsgClientToGCGetBattleReportInfoResponse_EResponse = 5
)

// Enum value maps for CMsgClientToGCGetBattleReportInfoResponse_EResponse.
var (
	CMsgClientToGCGetBattleReportInfoResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eTooBusy",
		3: "k_eDisabled",
		4: "k_ePermissionDenied",
		5: "k_eNotSubscribedToDotaPlus",
	}
	CMsgClientToGCGetBattleReportInfoResponse_EResponse_value = map[string]int32{
		"k_eInternalError":           0,
		"k_eSuccess":                 1,
		"k_eTooBusy":                 2,
		"k_eDisabled":                3,
		"k_ePermissionDenied":        4,
		"k_eNotSubscribedToDotaPlus": 5,
	}
)

func (x CMsgClientToGCGetBattleReportInfoResponse_EResponse) Enum() *CMsgClientToGCGetBattleReportInfoResponse_EResponse {
	p := new(CMsgClientToGCGetBattleReportInfoResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCGetBattleReportInfoResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCGetBattleReportInfoResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_battle_report_proto_enumTypes[10].Descriptor()
}

func (CMsgClientToGCGetBattleReportInfoResponse_EResponse) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_battle_report_proto_enumTypes[10]
}

func (x CMsgClientToGCGetBattleReportInfoResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCGetBattleReportInfoResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCGetBattleReportInfoResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCGetBattleReportInfoResponse_EResponse.Descriptor instead.
func (CMsgClientToGCGetBattleReportInfoResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_battle_report_proto_rawDescGZIP(), []int{13, 0}
}

type CMsgClientToGCAcknowledgeBattleReportResponse_EResponse int32

const (
	CMsgClientToGCAcknowledgeBattleReportResponse_k_eInternalError            CMsgClientToGCAcknowledgeBattleReportResponse_EResponse = 0
	CMsgClientToGCAcknowledgeBattleReportResponse_k_eSuccess                  CMsgClientToGCAcknowledgeBattleReportResponse_EResponse = 1
	CMsgClientToGCAcknowledgeBattleReportResponse_k_eTooBusy                  CMsgClientToGCAcknowledgeBattleReportResponse_EResponse = 2
	CMsgClientToGCAcknowledgeBattleReportResponse_k_eDisabled                 CMsgClientToGCAcknowledgeBattleReportResponse_EResponse = 3
	CMsgClientToGCAcknowledgeBattleReportResponse_k_eTimeout                  CMsgClientToGCAcknowledgeBattleReportResponse_EResponse = 4
	CMsgClientToGCAcknowledgeBattleReportResponse_k_ePermissionDenied         CMsgClientToGCAcknowledgeBattleReportResponse_EResponse = 5
	CMsgClientToGCAcknowledgeBattleReportResponse_k_eUnableToLoadBattleReport CMsgClientToGCAcknowledgeBattleReportResponse_EResponse = 6
	CMsgClientToGCAcknowledgeBattleReportResponse_k_eAlreadyAcknowledged      CMsgClientToGCAcknowledgeBattleReportResponse_EResponse = 7
	CMsgClientToGCAcknowledgeBattleReportResponse_k_eUnknownReport            CMsgClientToGCAcknowledgeBattleReportResponse_EResponse = 8
	CMsgClientToGCAcknowledgeBattleReportResponse_k_eNotSubscribedToDotaPlus  CMsgClientToGCAcknowledgeBattleReportResponse_EResponse = 9
	CMsgClientToGCAcknowledgeBattleReportResponse_k_eNotEnoughGamesPlayed     CMsgClientToGCAcknowledgeBattleReportResponse_EResponse = 10
)

// Enum value maps for CMsgClientToGCAcknowledgeBattleReportResponse_EResponse.
var (
	CMsgClientToGCAcknowledgeBattleReportResponse_EResponse_name = map[int32]string{
		0:  "k_eInternalError",
		1:  "k_eSuccess",
		2:  "k_eTooBusy",
		3:  "k_eDisabled",
		4:  "k_eTimeout",
		5:  "k_ePermissionDenied",
		6:  "k_eUnableToLoadBattleReport",
		7:  "k_eAlreadyAcknowledged",
		8:  "k_eUnknownReport",
		9:  "k_eNotSubscribedToDotaPlus",
		10: "k_eNotEnoughGamesPlayed",
	}
	CMsgClientToGCAcknowledgeBattleReportResponse_EResponse_value = map[string]int32{
		"k_eInternalError":            0,
		"k_eSuccess":                  1,
		"k_eTooBusy":                  2,
		"k_eDisabled":                 3,
		"k_eTimeout":                  4,
		"k_ePermissionDenied":         5,
		"k_eUnableToLoadBattleReport": 6,
		"k_eAlreadyAcknowledged":      7,
		"k_eUnknownReport":            8,
		"k_eNotSubscribedToDotaPlus":  9,
		"k_eNotEnoughGamesPlayed":     10,
	}
)

func (x CMsgClientToGCAcknowledgeBattleReportResponse_EResponse) Enum() *CMsgClientToGCAcknowledgeBattleReportResponse_EResponse {
	p := new(CMsgClientToGCAcknowledgeBattleReportResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCAcknowledgeBattleReportResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCAcknowledgeBattleReportResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_battle_report_proto_enumTypes[11].Descriptor()
}

func (CMsgClientToGCAcknowledgeBattleReportResponse_EResponse) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_battle_report_proto_enumTypes[11]
}

func (x CMsgClientToGCAcknowledgeBattleReportResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCAcknowledgeBattleReportResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCAcknowledgeBattleReportResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCAcknowledgeBattleReportResponse_EResponse.Descriptor instead.
func (CMsgClientToGCAcknowledgeBattleReportResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_battle_report_proto_rawDescGZIP(), []int{15, 0}
}

type CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse int32

const (
	CMsgClientToGCGetBattleReportMatchHistoryResponse_k_eInternalError           CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse = 0
	CMsgClientToGCGetBattleReportMatchHistoryResponse_k_eSuccess                 CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse = 1
	CMsgClientToGCGetBattleReportMatchHistoryResponse_k_eTooBusy                 CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse = 2
	CMsgClientToGCGetBattleReportMatchHistoryResponse_k_eDisabled                CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse = 3
	CMsgClientToGCGetBattleReportMatchHistoryResponse_k_eTimeout                 CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse = 4
	CMsgClientToGCGetBattleReportMatchHistoryResponse_k_ePermissionDenied        CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse = 5
	CMsgClientToGCGetBattleReportMatchHistoryResponse_k_eNotSubscribedToDotaPlus CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse = 6
)

// Enum value maps for CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse.
var (
	CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eTooBusy",
		3: "k_eDisabled",
		4: "k_eTimeout",
		5: "k_ePermissionDenied",
		6: "k_eNotSubscribedToDotaPlus",
	}
	CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse_value = map[string]int32{
		"k_eInternalError":           0,
		"k_eSuccess":                 1,
		"k_eTooBusy":                 2,
		"k_eDisabled":                3,
		"k_eTimeout":                 4,
		"k_ePermissionDenied":        5,
		"k_eNotSubscribedToDotaPlus": 6,
	}
)

func (x CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse) Enum() *CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse {
	p := new(CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_battle_report_proto_enumTypes[12].Descriptor()
}

func (CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_battle_report_proto_enumTypes[12]
}

func (x CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse.Descriptor instead.
func (CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_battle_report_proto_rawDescGZIP(), []int{17, 0}
}

type CMsgClientToGCGetBattleReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Timestamp *uint32 `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	Duration  *uint32 `protobuf:"varint,3,opt,name=duration" json:"duration,omitempty"`
}

func (x *CMsgClientToGCGetBattleReport) Reset() {
	*x = CMsgClientToGCGetBattleReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_battle_report_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCGetBattleReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCGetBattleReport) ProtoMessage() {}

func (x *CMsgClientToGCGetBattleReport) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_battle_report_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCGetBattleReport.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCGetBattleReport) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_battle_report_proto_rawDescGZIP(), []int{0}
}

func (x *CMsgClientToGCGetBattleReport) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgClientToGCGetBattleReport) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *CMsgClientToGCGetBattleReport) GetDuration() uint32 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

type CMsgBattleReport_Game struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeroId                       *uint32                        `protobuf:"varint,1,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	Kills                        *uint32                        `protobuf:"varint,2,opt,name=kills" json:"kills,omitempty"`
	Deaths                       *uint32                        `protobuf:"varint,3,opt,name=deaths" json:"deaths,omitempty"`
	Assists                      *uint32                        `protobuf:"varint,4,opt,name=assists" json:"assists,omitempty"`
	RankChange                   *int32                         `protobuf:"varint,5,opt,name=rank_change,json=rankChange" json:"rank_change,omitempty"`
	LastHits                     *uint32                        `protobuf:"varint,6,opt,name=last_hits,json=lastHits" json:"last_hits,omitempty"`
	Denies                       *uint32                        `protobuf:"varint,21,opt,name=denies" json:"denies,omitempty"`
	Gpm                          *uint32                        `protobuf:"varint,7,opt,name=gpm" json:"gpm,omitempty"`
	Xpm                          *uint32                        `protobuf:"varint,8,opt,name=xpm" json:"xpm,omitempty"`
	Role                         *CMsgBattleReport_Role         `protobuf:"varint,9,opt,name=role,enum=dota.CMsgBattleReport_Role" json:"role,omitempty"`
	Outcome                      *CMsgBattleReport_EOutcome     `protobuf:"varint,10,opt,name=outcome,enum=dota.CMsgBattleReport_EOutcome" json:"outcome,omitempty"`
	LaneOutcome                  *CMsgBattleReport_ELaneOutcome `protobuf:"varint,11,opt,name=lane_outcome,json=laneOutcome,enum=dota.CMsgBattleReport_ELaneOutcome" json:"lane_outcome,omitempty"`
	Ranked                       *bool                          `protobuf:"varint,12,opt,name=ranked" json:"ranked,omitempty"`
	MatchId                      *uint64                        `protobuf:"varint,13,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	LaneSelectionFlags           *uint32                        `protobuf:"varint,14,opt,name=lane_selection_flags,json=laneSelectionFlags" json:"lane_selection_flags,omitempty"`
	PredictedPosition            *uint32                        `protobuf:"varint,15,opt,name=predicted_position,json=predictedPosition" json:"predicted_position,omitempty"`
	SecondsDead                  *uint32                        `protobuf:"varint,16,opt,name=seconds_dead,json=secondsDead" json:"seconds_dead,omitempty"`
	WinningTeam                  *uint32                        `protobuf:"varint,17,opt,name=winning_team,json=winningTeam" json:"winning_team,omitempty"`
	PlayerSlot                   *uint32                        `protobuf:"varint,28,opt,name=player_slot,json=playerSlot" json:"player_slot,omitempty"`
	PartyGame                    *bool                          `protobuf:"varint,19,opt,name=party_game,json=partyGame" json:"party_game,omitempty"`
	StartTime                    *uint32                        `protobuf:"varint,20,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	BountyRunes                  *uint32                        `protobuf:"varint,22,opt,name=bounty_runes,json=bountyRunes" json:"bounty_runes,omitempty"`
	WaterRunes                   *uint32                        `protobuf:"varint,23,opt,name=water_runes,json=waterRunes" json:"water_runes,omitempty"`
	PowerRunes                   *uint32                        `protobuf:"varint,24,opt,name=power_runes,json=powerRunes" json:"power_runes,omitempty"`
	TimeEnemyT1TowerDestroyed    *uint32                        `protobuf:"varint,25,opt,name=time_enemy_t1_tower_destroyed,json=timeEnemyT1TowerDestroyed" json:"time_enemy_t1_tower_destroyed,omitempty"`
	TimeFriendlyT1TowerDestroyed *uint32                        `protobuf:"varint,26,opt,name=time_friendly_t1_tower_destroyed,json=timeFriendlyT1TowerDestroyed" json:"time_friendly_t1_tower_destroyed,omitempty"`
	EnemyRoshanKills             *uint32                        `protobuf:"varint,27,opt,name=enemy_roshan_kills,json=enemyRoshanKills" json:"enemy_roshan_kills,omitempty"`
	TeleportsUsed                *uint32                        `protobuf:"varint,29,opt,name=teleports_used,json=teleportsUsed" json:"teleports_used,omitempty"`
	Dewards                      *uint32                        `protobuf:"varint,30,opt,name=dewards" json:"dewards,omitempty"`
	CampsStacked                 *uint32                        `protobuf:"varint,31,opt,name=camps_stacked,json=campsStacked" json:"camps_stacked,omitempty"`
	SupportGold                  *uint32                        `protobuf:"varint,32,opt,name=support_gold,json=supportGold" json:"support_gold,omitempty"`
	HeroDamage                   *uint32                        `protobuf:"varint,33,opt,name=hero_damage,json=heroDamage" json:"hero_damage,omitempty"`
	HeroHealing                  *uint32                        `protobuf:"varint,34,opt,name=hero_healing,json=heroHealing" json:"hero_healing,omitempty"`
	TowerDamage                  *uint32                        `protobuf:"varint,35,opt,name=tower_damage,json=towerDamage" json:"tower_damage,omitempty"`
	SuccessfulSmokes             *uint32                        `protobuf:"varint,36,opt,name=successful_smokes,json=successfulSmokes" json:"successful_smokes,omitempty"`
	StunDuration                 *uint32                        `protobuf:"varint,37,opt,name=stun_duration,json=stunDuration" json:"stun_duration,omitempty"`
	Duration                     *uint32                        `protobuf:"varint,38,opt,name=duration" json:"duration,omitempty"`
	FriendlyRoshanKills          *uint32                        `protobuf:"varint,39,opt,name=friendly_roshan_kills,json=friendlyRoshanKills" json:"friendly_roshan_kills,omitempty"`
	PreviousRank                 *int32                         `protobuf:"varint,40,opt,name=previous_rank,json=previousRank" json:"previous_rank,omitempty"`
	GameMode                     *uint32                        `protobuf:"varint,41,opt,name=game_mode,json=gameMode" json:"game_mode,omitempty"`
	LobbyType                    *uint32                        `protobuf:"varint,42,opt,name=lobby_type,json=lobbyType" json:"lobby_type,omitempty"`
	TimePurchasedShard           *float32                       `protobuf:"fixed32,43,opt,name=time_purchased_shard,json=timePurchasedShard" json:"time_purchased_shard,omitempty"`
	TimePurchasedScepter         *float32                       `protobuf:"fixed32,44,opt,name=time_purchased_scepter,json=timePurchasedScepter" json:"time_purchased_scepter,omitempty"`
	Item0                        *int32                         `protobuf:"varint,45,opt,name=item0" json:"item0,omitempty"`
	Item1                        *int32                         `protobuf:"varint,46,opt,name=item1" json:"item1,omitempty"`
	Item2                        *int32                         `protobuf:"varint,47,opt,name=item2" json:"item2,omitempty"`
	Item3                        *int32                         `protobuf:"varint,48,opt,name=item3" json:"item3,omitempty"`
	Item4                        *int32                         `protobuf:"varint,49,opt,name=item4" json:"item4,omitempty"`
	Item5                        *int32                         `protobuf:"varint,50,opt,name=item5" json:"item5,omitempty"`
}

func (x *CMsgBattleReport_Game) Reset() {
	*x = CMsgBattleReport_Game{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_battle_report_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgBattleReport_Game) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBattleReport_Game) ProtoMessage() {}

func (x *CMsgBattleReport_Game) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_battle_report_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBattleReport_Game.ProtoReflect.Descriptor instead.
func (*CMsgBattleReport_Game) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_battle_report_proto_rawDescGZIP(), []int{1}
}

func (x *CMsgBattleReport_Game) GetHeroId() uint32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CMsgBattleReport_Game) GetKills() uint32 {
	if x != nil && x.Kills != nil {
		return *x.Kills
	}
	return 0
}

func (x *CMsgBattleReport_Game) GetDeaths() uint32 {
	if x != nil && x.Deaths != nil {
		return *x.Deaths
	}
	return 0
}

func (x *CMsgBattleReport_Game) GetAssists() uint32 {
	if x != nil && x.Assists != nil {
		return *x.Assists
	}
	return 0
}

func (x *CMsgBattleReport_Game) GetRankChange() int32 {
	if x != nil && x.RankChange != nil {
		return *x.RankChange
	}
	return 0
}

func (x *CMsgBattleReport_Game) GetLastHits() uint32 {
	if x != nil && x.LastHits != nil {
		return *x.LastHits
	}
	return 0
}

func (x *CMsgBattleReport_Game) GetDenies() uint32 {
	if x != nil && x.Denies != nil {
		return *x.Denies
	}
	return 0
}

func (x *CMsgBattleReport_Game) GetGpm() uint32 {
	if x != nil && x.Gpm != nil {
		return *x.Gpm
	}
	return 0
}

func (x *CMsgBattleReport_Game) GetXpm() uint32 {
	if x != nil && x.Xpm != nil {
		return *x.Xpm
	}
	return 0
}

func (x *CMsgBattleReport_Game) GetRole() CMsgBattleReport_Role {
	if x != nil && x.Role != nil {
		return *x.Role
	}
	return CMsgBattleReport_Role_k_eUnknownRole
}

func (x *CMsgBattleReport_Game) GetOutcome() CMsgBattleReport_EOutcome {
	if x != nil && x.Outcome != nil {
		return *x.Outcome
	}
	return CMsgBattleReport_EOutcome_k_eWin
}

func (x *CMsgBattleReport_Game) GetLaneOutcome() CMsgBattleReport_ELaneOutcome {
	if x != nil && x.LaneOutcome != nil {
		return *x.LaneOutcome
	}
	return CMsgBattleReport_ELaneOutcome_k_eUnknownLaneOutcome
}

func (x *CMsgBattleReport_Game) GetRanked() bool {
	if x != nil && x.Ranked != nil {
		return *x.Ranked
	}
	return false
}

func (x *CMsgBattleReport_Game) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgBattleReport_Game) GetLaneSelectionFlags() uint32 {
	if x != nil && x.LaneSelectionFlags != nil {
		return *x.LaneSelectionFlags
	}
	return 0
}

func (x *CMsgBattleReport_Game) GetPredictedPosition() uint32 {
	if x != nil && x.PredictedPosition != nil {
		return *x.PredictedPosition
	}
	return 0
}

func (x *CMsgBattleReport_Game) GetSecondsDead() uint32 {
	if x != nil && x.SecondsDead != nil {
		return *x.SecondsDead
	}
	return 0
}

func (x *CMsgBattleReport_Game) GetWinningTeam() uint32 {
	if x != nil && x.WinningTeam != nil {
		return *x.WinningTeam
	}
	return 0
}

func (x *CMsgBattleReport_Game) GetPlayerSlot() uint32 {
	if x != nil && x.PlayerSlot != nil {
		return *x.PlayerSlot
	}
	return 0
}

func (x *CMsgBattleReport_Game) GetPartyGame() bool {
	if x != nil && x.PartyGame != nil {
		return *x.PartyGame
	}
	return false
}

func (x *CMsgBattleReport_Game) GetStartTime() uint32 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *CMsgBattleReport_Game) GetBountyRunes() uint32 {
	if x != nil && x.BountyRunes != nil {
		return *x.BountyRunes
	}
	return 0
}

func (x *CMsgBattleReport_Game) GetWaterRunes() uint32 {
	if x != nil && x.WaterRunes != nil {
		return *x.WaterRunes
	}
	return 0
}

func (x *CMsgBattleReport_Game) GetPowerRunes() uint32 {
	if x != nil && x.PowerRunes != nil {
		return *x.PowerRunes
	}
	return 0
}

func (x *CMsgBattleReport_Game) GetTimeEnemyT1TowerDestroyed() uint32 {
	if x != nil && x.TimeEnemyT1TowerDestroyed != nil {
		return *x.TimeEnemyT1TowerDestroyed
	}
	return 0
}

func (x *CMsgBattleReport_Game) GetTimeFriendlyT1TowerDestroyed() uint32 {
	if x != nil && x.TimeFriendlyT1TowerDestroyed != nil {
		return *x.TimeFriendlyT1TowerDestroyed
	}
	return 0
}

func (x *CMsgBattleReport_Game) GetEnemyRoshanKills() uint32 {
	if x != nil && x.EnemyRoshanKills != nil {
		return *x.EnemyRoshanKills
	}
	return 0
}

func (x *CMsgBattleReport_Game) GetTeleportsUsed() uint32 {
	if x != nil && x.TeleportsUsed != nil {
		return *x.TeleportsUsed
	}
	return 0
}

func (x *CMsgBattleReport_Game) GetDewards() uint32 {
	if x != nil && x.Dewards != nil {
		return *x.Dewards
	}
	return 0
}

func (x *CMsgBattleReport_Game) GetCampsStacked() uint32 {
	if x != nil && x.CampsStacked != nil {
		return *x.CampsStacked
	}
	return 0
}

func (x *CMsgBattleReport_Game) GetSupportGold() uint32 {
	if x != nil && x.SupportGold != nil {
		return *x.SupportGold
	}
	return 0
}

func (x *CMsgBattleReport_Game) GetHeroDamage() uint32 {
	if x != nil && x.HeroDamage != nil {
		return *x.HeroDamage
	}
	return 0
}

func (x *CMsgBattleReport_Game) GetHeroHealing() uint32 {
	if x != nil && x.HeroHealing != nil {
		return *x.HeroHealing
	}
	return 0
}

func (x *CMsgBattleReport_Game) GetTowerDamage() uint32 {
	if x != nil && x.TowerDamage != nil {
		return *x.TowerDamage
	}
	return 0
}

func (x *CMsgBattleReport_Game) GetSuccessfulSmokes() uint32 {
	if x != nil && x.SuccessfulSmokes != nil {
		return *x.SuccessfulSmokes
	}
	return 0
}

func (x *CMsgBattleReport_Game) GetStunDuration() uint32 {
	if x != nil && x.StunDuration != nil {
		return *x.StunDuration
	}
	return 0
}

func (x *CMsgBattleReport_Game) GetDuration() uint32 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

func (x *CMsgBattleReport_Game) GetFriendlyRoshanKills() uint32 {
	if x != nil && x.FriendlyRoshanKills != nil {
		return *x.FriendlyRoshanKills
	}
	return 0
}

func (x *CMsgBattleReport_Game) GetPreviousRank() int32 {
	if x != nil && x.PreviousRank != nil {
		return *x.PreviousRank
	}
	return 0
}

func (x *CMsgBattleReport_Game) GetGameMode() uint32 {
	if x != nil && x.GameMode != nil {
		return *x.GameMode
	}
	return 0
}

func (x *CMsgBattleReport_Game) GetLobbyType() uint32 {
	if x != nil && x.LobbyType != nil {
		return *x.LobbyType
	}
	return 0
}

func (x *CMsgBattleReport_Game) GetTimePurchasedShard() float32 {
	if x != nil && x.TimePurchasedShard != nil {
		return *x.TimePurchasedShard
	}
	return 0
}

func (x *CMsgBattleReport_Game) GetTimePurchasedScepter() float32 {
	if x != nil && x.TimePurchasedScepter != nil {
		return *x.TimePurchasedScepter
	}
	return 0
}

func (x *CMsgBattleReport_Game) GetItem0() int32 {
	if x != nil && x.Item0 != nil {
		return *x.Item0
	}
	return 0
}

func (x *CMsgBattleReport_Game) GetItem1() int32 {
	if x != nil && x.Item1 != nil {
		return *x.Item1
	}
	return 0
}

func (x *CMsgBattleReport_Game) GetItem2() int32 {
	if x != nil && x.Item2 != nil {
		return *x.Item2
	}
	return 0
}

func (x *CMsgBattleReport_Game) GetItem3() int32 {
	if x != nil && x.Item3 != nil {
		return *x.Item3
	}
	return 0
}

func (x *CMsgBattleReport_Game) GetItem4() int32 {
	if x != nil && x.Item4 != nil {
		return *x.Item4
	}
	return 0
}

func (x *CMsgBattleReport_Game) GetItem5() int32 {
	if x != nil && x.Item5 != nil {
		return *x.Item5
	}
	return 0
}

type CMsgBattleReport_GameList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Games []*CMsgBattleReport_Game `protobuf:"bytes,1,rep,name=games" json:"games,omitempty"`
}

func (x *CMsgBattleReport_GameList) Reset() {
	*x = CMsgBattleReport_GameList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_battle_report_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgBattleReport_GameList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBattleReport_GameList) ProtoMessage() {}

func (x *CMsgBattleReport_GameList) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_battle_report_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBattleReport_GameList.ProtoReflect.Descriptor instead.
func (*CMsgBattleReport_GameList) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_battle_report_proto_rawDescGZIP(), []int{2}
}

func (x *CMsgBattleReport_GameList) GetGames() []*CMsgBattleReport_Game {
	if x != nil {
		return x.Games
	}
	return nil
}

type CMsgBattleReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Games      []*CMsgBattleReport_Game    `protobuf:"bytes,1,rep,name=games" json:"games,omitempty"`
	Highlights *CMsgBattleReportHighlights `protobuf:"bytes,3,opt,name=highlights" json:"highlights,omitempty"`
}

func (x *CMsgBattleReport) Reset() {
	*x = CMsgBattleReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_battle_report_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgBattleReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBattleReport) ProtoMessage() {}

func (x *CMsgBattleReport) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_battle_report_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBattleReport.ProtoReflect.Descriptor instead.
func (*CMsgBattleReport) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_battle_report_proto_rawDescGZIP(), []int{3}
}

func (x *CMsgBattleReport) GetGames() []*CMsgBattleReport_Game {
	if x != nil {
		return x.Games
	}
	return nil
}

func (x *CMsgBattleReport) GetHighlights() *CMsgBattleReportHighlights {
	if x != nil {
		return x.Highlights
	}
	return nil
}

type CMsgBattleReportInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp        *uint32  `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	Duration         *uint32  `protobuf:"varint,2,opt,name=duration" json:"duration,omitempty"`
	Acknowledged     *bool    `protobuf:"varint,3,opt,name=acknowledged" json:"acknowledged,omitempty"`
	FeaturedHeroId   *uint32  `protobuf:"varint,4,opt,name=featured_hero_id,json=featuredHeroId" json:"featured_hero_id,omitempty"`
	FeaturedPosition *uint32  `protobuf:"varint,5,opt,name=featured_position,json=featuredPosition" json:"featured_position,omitempty"`
	GamesPlayed      *uint32  `protobuf:"varint,6,opt,name=games_played,json=gamesPlayed" json:"games_played,omitempty"`
	MedalCounts      []uint32 `protobuf:"varint,7,rep,name=medal_counts,json=medalCounts" json:"medal_counts,omitempty"`
}

func (x *CMsgBattleReportInfo) Reset() {
	*x = CMsgBattleReportInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_battle_report_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgBattleReportInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBattleReportInfo) ProtoMessage() {}

func (x *CMsgBattleReportInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_battle_report_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBattleReportInfo.ProtoReflect.Descriptor instead.
func (*CMsgBattleReportInfo) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_battle_report_proto_rawDescGZIP(), []int{4}
}

func (x *CMsgBattleReportInfo) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *CMsgBattleReportInfo) GetDuration() uint32 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

func (x *CMsgBattleReportInfo) GetAcknowledged() bool {
	if x != nil && x.Acknowledged != nil {
		return *x.Acknowledged
	}
	return false
}

func (x *CMsgBattleReportInfo) GetFeaturedHeroId() uint32 {
	if x != nil && x.FeaturedHeroId != nil {
		return *x.FeaturedHeroId
	}
	return 0
}

func (x *CMsgBattleReportInfo) GetFeaturedPosition() uint32 {
	if x != nil && x.FeaturedPosition != nil {
		return *x.FeaturedPosition
	}
	return 0
}

func (x *CMsgBattleReportInfo) GetGamesPlayed() uint32 {
	if x != nil && x.GamesPlayed != nil {
		return *x.GamesPlayed
	}
	return 0
}

func (x *CMsgBattleReportInfo) GetMedalCounts() []uint32 {
	if x != nil {
		return x.MedalCounts
	}
	return nil
}

type CMsgBattleReportInfoList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BattleReportInfo []*CMsgBattleReportInfo `protobuf:"bytes,1,rep,name=battle_report_info,json=battleReportInfo" json:"battle_report_info,omitempty"`
}

func (x *CMsgBattleReportInfoList) Reset() {
	*x = CMsgBattleReportInfoList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_battle_report_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgBattleReportInfoList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBattleReportInfoList) ProtoMessage() {}

func (x *CMsgBattleReportInfoList) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_battle_report_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBattleReportInfoList.ProtoReflect.Descriptor instead.
func (*CMsgBattleReportInfoList) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_battle_report_proto_rawDescGZIP(), []int{5}
}

func (x *CMsgBattleReportInfoList) GetBattleReportInfo() []*CMsgBattleReportInfo {
	if x != nil {
		return x.BattleReportInfo
	}
	return nil
}

type CMsgBattleReportHighlights struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Highlights []*CMsgBattleReport_Highlight `protobuf:"bytes,1,rep,name=highlights" json:"highlights,omitempty"`
}

func (x *CMsgBattleReportHighlights) Reset() {
	*x = CMsgBattleReportHighlights{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_battle_report_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgBattleReportHighlights) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBattleReportHighlights) ProtoMessage() {}

func (x *CMsgBattleReportHighlights) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_battle_report_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBattleReportHighlights.ProtoReflect.Descriptor instead.
func (*CMsgBattleReportHighlights) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_battle_report_proto_rawDescGZIP(), []int{6}
}

func (x *CMsgBattleReportHighlights) GetHighlights() []*CMsgBattleReport_Highlight {
	if x != nil {
		return x.Highlights
	}
	return nil
}

type CMsgBattleReportAggregateStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []*CMsgBattleReportAggregateStats_CMsgBattleReportAggregate `protobuf:"bytes,1,rep,name=result" json:"result,omitempty"`
}

func (x *CMsgBattleReportAggregateStats) Reset() {
	*x = CMsgBattleReportAggregateStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_battle_report_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgBattleReportAggregateStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBattleReportAggregateStats) ProtoMessage() {}

func (x *CMsgBattleReportAggregateStats) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_battle_report_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBattleReportAggregateStats.ProtoReflect.Descriptor instead.
func (*CMsgBattleReportAggregateStats) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_battle_report_proto_rawDescGZIP(), []int{7}
}

func (x *CMsgBattleReportAggregateStats) GetResult() []*CMsgBattleReportAggregateStats_CMsgBattleReportAggregate {
	if x != nil {
		return x.Result
	}
	return nil
}

type CMsgBattleReportAggregatedGeneralStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgBattleReportAggregatedGeneralStats) Reset() {
	*x = CMsgBattleReportAggregatedGeneralStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_battle_report_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgBattleReportAggregatedGeneralStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBattleReportAggregatedGeneralStats) ProtoMessage() {}

func (x *CMsgBattleReportAggregatedGeneralStats) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_battle_report_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBattleReportAggregatedGeneralStats.ProtoReflect.Descriptor instead.
func (*CMsgBattleReportAggregatedGeneralStats) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_battle_report_proto_rawDescGZIP(), []int{8}
}

type CMsgClientToGCGetBattleReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Report         *CMsgBattleReport                                `protobuf:"bytes,1,opt,name=report" json:"report,omitempty"`
	Response       *CMsgClientToGCGetBattleReportResponse_EResponse `protobuf:"varint,2,opt,name=response,enum=dota.CMsgClientToGCGetBattleReportResponse_EResponse" json:"response,omitempty"`
	AggregateStats *CMsgBattleReportAggregateStats                  `protobuf:"bytes,3,opt,name=aggregate_stats,json=aggregateStats" json:"aggregate_stats,omitempty"`
	Info           *CMsgBattleReportInfo                            `protobuf:"bytes,4,opt,name=info" json:"info,omitempty"`
}

func (x *CMsgClientToGCGetBattleReportResponse) Reset() {
	*x = CMsgClientToGCGetBattleReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_battle_report_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCGetBattleReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCGetBattleReportResponse) ProtoMessage() {}

func (x *CMsgClientToGCGetBattleReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_battle_report_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCGetBattleReportResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCGetBattleReportResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_battle_report_proto_rawDescGZIP(), []int{9}
}

func (x *CMsgClientToGCGetBattleReportResponse) GetReport() *CMsgBattleReport {
	if x != nil {
		return x.Report
	}
	return nil
}

func (x *CMsgClientToGCGetBattleReportResponse) GetResponse() CMsgClientToGCGetBattleReportResponse_EResponse {
	if x != nil && x.Response != nil {
		return *x.Response
	}
	return CMsgClientToGCGetBattleReportResponse_k_eInternalError
}

func (x *CMsgClientToGCGetBattleReportResponse) GetAggregateStats() *CMsgBattleReportAggregateStats {
	if x != nil {
		return x.AggregateStats
	}
	return nil
}

func (x *CMsgClientToGCGetBattleReportResponse) GetInfo() *CMsgBattleReportInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type CMsgClientToGCGetBattleReportAggregateStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AggregateKeys []*CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey `protobuf:"bytes,1,rep,name=aggregate_keys,json=aggregateKeys" json:"aggregate_keys,omitempty"`
	Timestamp     *uint32                                                                     `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	Duration      *uint32                                                                     `protobuf:"varint,3,opt,name=duration" json:"duration,omitempty"`
	Rank          *uint32                                                                     `protobuf:"varint,4,opt,name=rank" json:"rank,omitempty"`
}

func (x *CMsgClientToGCGetBattleReportAggregateStats) Reset() {
	*x = CMsgClientToGCGetBattleReportAggregateStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_battle_report_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCGetBattleReportAggregateStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCGetBattleReportAggregateStats) ProtoMessage() {}

func (x *CMsgClientToGCGetBattleReportAggregateStats) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_battle_report_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCGetBattleReportAggregateStats.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCGetBattleReportAggregateStats) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_battle_report_proto_rawDescGZIP(), []int{10}
}

func (x *CMsgClientToGCGetBattleReportAggregateStats) GetAggregateKeys() []*CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey {
	if x != nil {
		return x.AggregateKeys
	}
	return nil
}

func (x *CMsgClientToGCGetBattleReportAggregateStats) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *CMsgClientToGCGetBattleReportAggregateStats) GetDuration() uint32 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

func (x *CMsgClientToGCGetBattleReportAggregateStats) GetRank() uint32 {
	if x != nil && x.Rank != nil {
		return *x.Rank
	}
	return 0
}

type CMsgClientToGCGetBattleReportAggregateStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AggregateStats *CMsgBattleReportAggregateStats                                `protobuf:"bytes,1,opt,name=aggregate_stats,json=aggregateStats" json:"aggregate_stats,omitempty"`
	Response       *CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse `protobuf:"varint,2,opt,name=response,enum=dota.CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse" json:"response,omitempty"`
}

func (x *CMsgClientToGCGetBattleReportAggregateStatsResponse) Reset() {
	*x = CMsgClientToGCGetBattleReportAggregateStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_battle_report_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCGetBattleReportAggregateStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCGetBattleReportAggregateStatsResponse) ProtoMessage() {}

func (x *CMsgClientToGCGetBattleReportAggregateStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_battle_report_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCGetBattleReportAggregateStatsResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCGetBattleReportAggregateStatsResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_battle_report_proto_rawDescGZIP(), []int{11}
}

func (x *CMsgClientToGCGetBattleReportAggregateStatsResponse) GetAggregateStats() *CMsgBattleReportAggregateStats {
	if x != nil {
		return x.AggregateStats
	}
	return nil
}

func (x *CMsgClientToGCGetBattleReportAggregateStatsResponse) GetResponse() CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse {
	if x != nil && x.Response != nil {
		return *x.Response
	}
	return CMsgClientToGCGetBattleReportAggregateStatsResponse_k_eInternalError
}

type CMsgClientToGCGetBattleReportInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
}

func (x *CMsgClientToGCGetBattleReportInfo) Reset() {
	*x = CMsgClientToGCGetBattleReportInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_battle_report_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCGetBattleReportInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCGetBattleReportInfo) ProtoMessage() {}

func (x *CMsgClientToGCGetBattleReportInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_battle_report_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCGetBattleReportInfo.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCGetBattleReportInfo) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_battle_report_proto_rawDescGZIP(), []int{12}
}

func (x *CMsgClientToGCGetBattleReportInfo) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

type CMsgClientToGCGetBattleReportInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BattleReportInfoList *CMsgBattleReportInfoList                            `protobuf:"bytes,1,opt,name=battle_report_info_list,json=battleReportInfoList" json:"battle_report_info_list,omitempty"`
	Response             *CMsgClientToGCGetBattleReportInfoResponse_EResponse `protobuf:"varint,2,opt,name=response,enum=dota.CMsgClientToGCGetBattleReportInfoResponse_EResponse" json:"response,omitempty"`
}

func (x *CMsgClientToGCGetBattleReportInfoResponse) Reset() {
	*x = CMsgClientToGCGetBattleReportInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_battle_report_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCGetBattleReportInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCGetBattleReportInfoResponse) ProtoMessage() {}

func (x *CMsgClientToGCGetBattleReportInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_battle_report_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCGetBattleReportInfoResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCGetBattleReportInfoResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_battle_report_proto_rawDescGZIP(), []int{13}
}

func (x *CMsgClientToGCGetBattleReportInfoResponse) GetBattleReportInfoList() *CMsgBattleReportInfoList {
	if x != nil {
		return x.BattleReportInfoList
	}
	return nil
}

func (x *CMsgClientToGCGetBattleReportInfoResponse) GetResponse() CMsgClientToGCGetBattleReportInfoResponse_EResponse {
	if x != nil && x.Response != nil {
		return *x.Response
	}
	return CMsgClientToGCGetBattleReportInfoResponse_k_eInternalError
}

type CMsgClientToGCAcknowledgeBattleReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Timestamp *uint32 `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	Duration  *uint32 `protobuf:"varint,3,opt,name=duration" json:"duration,omitempty"`
}

func (x *CMsgClientToGCAcknowledgeBattleReport) Reset() {
	*x = CMsgClientToGCAcknowledgeBattleReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_battle_report_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCAcknowledgeBattleReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCAcknowledgeBattleReport) ProtoMessage() {}

func (x *CMsgClientToGCAcknowledgeBattleReport) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_battle_report_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCAcknowledgeBattleReport.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCAcknowledgeBattleReport) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_battle_report_proto_rawDescGZIP(), []int{14}
}

func (x *CMsgClientToGCAcknowledgeBattleReport) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgClientToGCAcknowledgeBattleReport) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *CMsgClientToGCAcknowledgeBattleReport) GetDuration() uint32 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

type CMsgClientToGCAcknowledgeBattleReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response      *CMsgClientToGCAcknowledgeBattleReportResponse_EResponse `protobuf:"varint,1,opt,name=response,enum=dota.CMsgClientToGCAcknowledgeBattleReportResponse_EResponse" json:"response,omitempty"`
	ShardsAwarded *uint32                                                  `protobuf:"varint,2,opt,name=shards_awarded,json=shardsAwarded" json:"shards_awarded,omitempty"`
}

func (x *CMsgClientToGCAcknowledgeBattleReportResponse) Reset() {
	*x = CMsgClientToGCAcknowledgeBattleReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_battle_report_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCAcknowledgeBattleReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCAcknowledgeBattleReportResponse) ProtoMessage() {}

func (x *CMsgClientToGCAcknowledgeBattleReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_battle_report_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCAcknowledgeBattleReportResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCAcknowledgeBattleReportResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_battle_report_proto_rawDescGZIP(), []int{15}
}

func (x *CMsgClientToGCAcknowledgeBattleReportResponse) GetResponse() CMsgClientToGCAcknowledgeBattleReportResponse_EResponse {
	if x != nil && x.Response != nil {
		return *x.Response
	}
	return CMsgClientToGCAcknowledgeBattleReportResponse_k_eInternalError
}

func (x *CMsgClientToGCAcknowledgeBattleReportResponse) GetShardsAwarded() uint32 {
	if x != nil && x.ShardsAwarded != nil {
		return *x.ShardsAwarded
	}
	return 0
}

type CMsgClientToGCGetBattleReportMatchHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Timestamp *uint32 `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	Duration  *uint32 `protobuf:"varint,3,opt,name=duration" json:"duration,omitempty"`
}

func (x *CMsgClientToGCGetBattleReportMatchHistory) Reset() {
	*x = CMsgClientToGCGetBattleReportMatchHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_battle_report_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCGetBattleReportMatchHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCGetBattleReportMatchHistory) ProtoMessage() {}

func (x *CMsgClientToGCGetBattleReportMatchHistory) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_battle_report_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCGetBattleReportMatchHistory.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCGetBattleReportMatchHistory) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_battle_report_proto_rawDescGZIP(), []int{16}
}

func (x *CMsgClientToGCGetBattleReportMatchHistory) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgClientToGCGetBattleReportMatchHistory) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *CMsgClientToGCGetBattleReportMatchHistory) GetDuration() uint32 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

type CMsgClientToGCGetBattleReportMatchHistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse `protobuf:"varint,1,opt,name=response,enum=dota.CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse" json:"response,omitempty"`
	Games    *CMsgBattleReport_GameList                                   `protobuf:"bytes,2,opt,name=games" json:"games,omitempty"`
}

func (x *CMsgClientToGCGetBattleReportMatchHistoryResponse) Reset() {
	*x = CMsgClientToGCGetBattleReportMatchHistoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_battle_report_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCGetBattleReportMatchHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCGetBattleReportMatchHistoryResponse) ProtoMessage() {}

func (x *CMsgClientToGCGetBattleReportMatchHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_battle_report_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCGetBattleReportMatchHistoryResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCGetBattleReportMatchHistoryResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_battle_report_proto_rawDescGZIP(), []int{17}
}

func (x *CMsgClientToGCGetBattleReportMatchHistoryResponse) GetResponse() CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse {
	if x != nil && x.Response != nil {
		return *x.Response
	}
	return CMsgClientToGCGetBattleReportMatchHistoryResponse_k_eInternalError
}

func (x *CMsgClientToGCGetBattleReportMatchHistoryResponse) GetGames() *CMsgBattleReport_GameList {
	if x != nil {
		return x.Games
	}
	return nil
}

type CMsgBattleReport_HighlightGeneral struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WinLossWindow  *int32   `protobuf:"varint,1,opt,name=win_loss_window,json=winLossWindow" json:"win_loss_window,omitempty"`
	WinPercent     *float32 `protobuf:"fixed32,2,opt,name=win_percent,json=winPercent" json:"win_percent,omitempty"`
	MmrDelta       *int32   `protobuf:"varint,3,opt,name=mmr_delta,json=mmrDelta" json:"mmr_delta,omitempty"`
	HighlightScore *float32 `protobuf:"fixed32,4,opt,name=highlight_score,json=highlightScore" json:"highlight_score,omitempty"`
}

func (x *CMsgBattleReport_HighlightGeneral) Reset() {
	*x = CMsgBattleReport_HighlightGeneral{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_battle_report_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgBattleReport_HighlightGeneral) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBattleReport_HighlightGeneral) ProtoMessage() {}

func (x *CMsgBattleReport_HighlightGeneral) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_battle_report_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBattleReport_HighlightGeneral.ProtoReflect.Descriptor instead.
func (*CMsgBattleReport_HighlightGeneral) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_battle_report_proto_rawDescGZIP(), []int{3, 0}
}

func (x *CMsgBattleReport_HighlightGeneral) GetWinLossWindow() int32 {
	if x != nil && x.WinLossWindow != nil {
		return *x.WinLossWindow
	}
	return 0
}

func (x *CMsgBattleReport_HighlightGeneral) GetWinPercent() float32 {
	if x != nil && x.WinPercent != nil {
		return *x.WinPercent
	}
	return 0
}

func (x *CMsgBattleReport_HighlightGeneral) GetMmrDelta() int32 {
	if x != nil && x.MmrDelta != nil {
		return *x.MmrDelta
	}
	return 0
}

func (x *CMsgBattleReport_HighlightGeneral) GetHighlightScore() float32 {
	if x != nil && x.HighlightScore != nil {
		return *x.HighlightScore
	}
	return 0
}

type CMsgBattleReport_Highlight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HighlightId          *uint32                             `protobuf:"varint,1,req,name=highlight_id,json=highlightId" json:"highlight_id,omitempty"`
	Category             *CMsgBattleReport_HighlightCategory `protobuf:"varint,2,req,name=category,enum=dota.CMsgBattleReport_HighlightCategory" json:"category,omitempty"`
	Tier                 *CMsgBattleReport_HighlightTier     `protobuf:"varint,3,opt,name=tier,enum=dota.CMsgBattleReport_HighlightTier" json:"tier,omitempty"`
	Rarity               *CMsgBattleReport_HighlightRarity   `protobuf:"varint,4,opt,name=rarity,enum=dota.CMsgBattleReport_HighlightRarity" json:"rarity,omitempty"`
	Score                *float32                            `protobuf:"fixed32,5,opt,name=score" json:"score,omitempty"`
	Confidence           *float32                            `protobuf:"fixed32,6,opt,name=confidence" json:"confidence,omitempty"`
	HeroId               *uint32                             `protobuf:"varint,7,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	Role                 *CMsgBattleReport_Role              `protobuf:"varint,8,opt,name=role,enum=dota.CMsgBattleReport_Role" json:"role,omitempty"`
	ComparisonDeltaValue *float32                            `protobuf:"fixed32,9,opt,name=comparison_delta_value,json=comparisonDeltaValue" json:"comparison_delta_value,omitempty"`
	Context              *CMsgBattleReport_CompareContext    `protobuf:"varint,10,opt,name=context,enum=dota.CMsgBattleReport_CompareContext" json:"context,omitempty"`
}

func (x *CMsgBattleReport_Highlight) Reset() {
	*x = CMsgBattleReport_Highlight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_battle_report_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgBattleReport_Highlight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBattleReport_Highlight) ProtoMessage() {}

func (x *CMsgBattleReport_Highlight) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_battle_report_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBattleReport_Highlight.ProtoReflect.Descriptor instead.
func (*CMsgBattleReport_Highlight) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_battle_report_proto_rawDescGZIP(), []int{3, 1}
}

func (x *CMsgBattleReport_Highlight) GetHighlightId() uint32 {
	if x != nil && x.HighlightId != nil {
		return *x.HighlightId
	}
	return 0
}

func (x *CMsgBattleReport_Highlight) GetCategory() CMsgBattleReport_HighlightCategory {
	if x != nil && x.Category != nil {
		return *x.Category
	}
	return CMsgBattleReport_HighlightCategory_k_eHighlightGeneral
}

func (x *CMsgBattleReport_Highlight) GetTier() CMsgBattleReport_HighlightTier {
	if x != nil && x.Tier != nil {
		return *x.Tier
	}
	return CMsgBattleReport_HighlightTier_k_eHighlightTierLow
}

func (x *CMsgBattleReport_Highlight) GetRarity() CMsgBattleReport_HighlightRarity {
	if x != nil && x.Rarity != nil {
		return *x.Rarity
	}
	return CMsgBattleReport_HighlightRarity_k_eHighlightCommon
}

func (x *CMsgBattleReport_Highlight) GetScore() float32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

func (x *CMsgBattleReport_Highlight) GetConfidence() float32 {
	if x != nil && x.Confidence != nil {
		return *x.Confidence
	}
	return 0
}

func (x *CMsgBattleReport_Highlight) GetHeroId() uint32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CMsgBattleReport_Highlight) GetRole() CMsgBattleReport_Role {
	if x != nil && x.Role != nil {
		return *x.Role
	}
	return CMsgBattleReport_Role_k_eUnknownRole
}

func (x *CMsgBattleReport_Highlight) GetComparisonDeltaValue() float32 {
	if x != nil && x.ComparisonDeltaValue != nil {
		return *x.ComparisonDeltaValue
	}
	return 0
}

func (x *CMsgBattleReport_Highlight) GetContext() CMsgBattleReport_CompareContext {
	if x != nil && x.Context != nil {
		return *x.Context
	}
	return CMsgBattleReport_CompareContext_k_eCompareContextInvalid
}

type CMsgBattleReportAggregateStats_CMsgBattleReportStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mean  *float32 `protobuf:"fixed32,1,opt,name=mean" json:"mean,omitempty"`
	Stdev *float32 `protobuf:"fixed32,2,opt,name=stdev" json:"stdev,omitempty"`
}

func (x *CMsgBattleReportAggregateStats_CMsgBattleReportStat) Reset() {
	*x = CMsgBattleReportAggregateStats_CMsgBattleReportStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_battle_report_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgBattleReportAggregateStats_CMsgBattleReportStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBattleReportAggregateStats_CMsgBattleReportStat) ProtoMessage() {}

func (x *CMsgBattleReportAggregateStats_CMsgBattleReportStat) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_battle_report_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBattleReportAggregateStats_CMsgBattleReportStat.ProtoReflect.Descriptor instead.
func (*CMsgBattleReportAggregateStats_CMsgBattleReportStat) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_battle_report_proto_rawDescGZIP(), []int{7, 0}
}

func (x *CMsgBattleReportAggregateStats_CMsgBattleReportStat) GetMean() float32 {
	if x != nil && x.Mean != nil {
		return *x.Mean
	}
	return 0
}

func (x *CMsgBattleReportAggregateStats_CMsgBattleReportStat) GetStdev() float32 {
	if x != nil && x.Stdev != nil {
		return *x.Stdev
	}
	return 0
}

type CMsgBattleReportAggregateStats_CMsgBattleReportAggregate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeroId                       *uint32                                              `protobuf:"varint,1,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	PredictedPosition            *uint32                                              `protobuf:"varint,2,opt,name=predicted_position,json=predictedPosition" json:"predicted_position,omitempty"`
	GameCount                    *uint32                                              `protobuf:"varint,3,opt,name=game_count,json=gameCount" json:"game_count,omitempty"`
	WinCount                     *uint32                                              `protobuf:"varint,4,opt,name=win_count,json=winCount" json:"win_count,omitempty"`
	LaneWinCount                 *uint32                                              `protobuf:"varint,5,opt,name=lane_win_count,json=laneWinCount" json:"lane_win_count,omitempty"`
	Kills                        *CMsgBattleReportAggregateStats_CMsgBattleReportStat `protobuf:"bytes,6,opt,name=kills" json:"kills,omitempty"`
	Deaths                       *CMsgBattleReportAggregateStats_CMsgBattleReportStat `protobuf:"bytes,7,opt,name=deaths" json:"deaths,omitempty"`
	Assists                      *CMsgBattleReportAggregateStats_CMsgBattleReportStat `protobuf:"bytes,8,opt,name=assists" json:"assists,omitempty"`
	RankChange                   *CMsgBattleReportAggregateStats_CMsgBattleReportStat `protobuf:"bytes,9,opt,name=rank_change,json=rankChange" json:"rank_change,omitempty"`
	LastHits                     *CMsgBattleReportAggregateStats_CMsgBattleReportStat `protobuf:"bytes,10,opt,name=last_hits,json=lastHits" json:"last_hits,omitempty"`
	Denies                       *CMsgBattleReportAggregateStats_CMsgBattleReportStat `protobuf:"bytes,11,opt,name=denies" json:"denies,omitempty"`
	Gpm                          *CMsgBattleReportAggregateStats_CMsgBattleReportStat `protobuf:"bytes,12,opt,name=gpm" json:"gpm,omitempty"`
	Xpm                          *CMsgBattleReportAggregateStats_CMsgBattleReportStat `protobuf:"bytes,13,opt,name=xpm" json:"xpm,omitempty"`
	SecondsDead                  *CMsgBattleReportAggregateStats_CMsgBattleReportStat `protobuf:"bytes,14,opt,name=seconds_dead,json=secondsDead" json:"seconds_dead,omitempty"`
	BountyRunes                  *CMsgBattleReportAggregateStats_CMsgBattleReportStat `protobuf:"bytes,15,opt,name=bounty_runes,json=bountyRunes" json:"bounty_runes,omitempty"`
	WaterRunes                   *CMsgBattleReportAggregateStats_CMsgBattleReportStat `protobuf:"bytes,16,opt,name=water_runes,json=waterRunes" json:"water_runes,omitempty"`
	PowerRunes                   *CMsgBattleReportAggregateStats_CMsgBattleReportStat `protobuf:"bytes,17,opt,name=power_runes,json=powerRunes" json:"power_runes,omitempty"`
	TimeEnemyT1TowerDestroyed    *CMsgBattleReportAggregateStats_CMsgBattleReportStat `protobuf:"bytes,18,opt,name=time_enemy_t1_tower_destroyed,json=timeEnemyT1TowerDestroyed" json:"time_enemy_t1_tower_destroyed,omitempty"`
	TimeFriendlyT1TowerDestroyed *CMsgBattleReportAggregateStats_CMsgBattleReportStat `protobuf:"bytes,19,opt,name=time_friendly_t1_tower_destroyed,json=timeFriendlyT1TowerDestroyed" json:"time_friendly_t1_tower_destroyed,omitempty"`
	EnemyRoshanKills             *CMsgBattleReportAggregateStats_CMsgBattleReportStat `protobuf:"bytes,20,opt,name=enemy_roshan_kills,json=enemyRoshanKills" json:"enemy_roshan_kills,omitempty"`
	TeleportsUsed                *CMsgBattleReportAggregateStats_CMsgBattleReportStat `protobuf:"bytes,21,opt,name=teleports_used,json=teleportsUsed" json:"teleports_used,omitempty"`
	Dewards                      *CMsgBattleReportAggregateStats_CMsgBattleReportStat `protobuf:"bytes,22,opt,name=dewards" json:"dewards,omitempty"`
	CampsStacked                 *CMsgBattleReportAggregateStats_CMsgBattleReportStat `protobuf:"bytes,23,opt,name=camps_stacked,json=campsStacked" json:"camps_stacked,omitempty"`
	SupportGold                  *CMsgBattleReportAggregateStats_CMsgBattleReportStat `protobuf:"bytes,24,opt,name=support_gold,json=supportGold" json:"support_gold,omitempty"`
	HeroDamage                   *CMsgBattleReportAggregateStats_CMsgBattleReportStat `protobuf:"bytes,25,opt,name=hero_damage,json=heroDamage" json:"hero_damage,omitempty"`
	HeroHealing                  *CMsgBattleReportAggregateStats_CMsgBattleReportStat `protobuf:"bytes,26,opt,name=hero_healing,json=heroHealing" json:"hero_healing,omitempty"`
	TowerDamage                  *CMsgBattleReportAggregateStats_CMsgBattleReportStat `protobuf:"bytes,27,opt,name=tower_damage,json=towerDamage" json:"tower_damage,omitempty"`
	SuccessfulSmokes             *CMsgBattleReportAggregateStats_CMsgBattleReportStat `protobuf:"bytes,28,opt,name=successful_smokes,json=successfulSmokes" json:"successful_smokes,omitempty"`
	StunDuration                 *CMsgBattleReportAggregateStats_CMsgBattleReportStat `protobuf:"bytes,29,opt,name=stun_duration,json=stunDuration" json:"stun_duration,omitempty"`
	Duration                     *CMsgBattleReportAggregateStats_CMsgBattleReportStat `protobuf:"bytes,30,opt,name=duration" json:"duration,omitempty"`
	FriendlyRoshanKills          *CMsgBattleReportAggregateStats_CMsgBattleReportStat `protobuf:"bytes,31,opt,name=friendly_roshan_kills,json=friendlyRoshanKills" json:"friendly_roshan_kills,omitempty"`
}

func (x *CMsgBattleReportAggregateStats_CMsgBattleReportAggregate) Reset() {
	*x = CMsgBattleReportAggregateStats_CMsgBattleReportAggregate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_battle_report_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgBattleReportAggregateStats_CMsgBattleReportAggregate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBattleReportAggregateStats_CMsgBattleReportAggregate) ProtoMessage() {}

func (x *CMsgBattleReportAggregateStats_CMsgBattleReportAggregate) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_battle_report_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBattleReportAggregateStats_CMsgBattleReportAggregate.ProtoReflect.Descriptor instead.
func (*CMsgBattleReportAggregateStats_CMsgBattleReportAggregate) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_battle_report_proto_rawDescGZIP(), []int{7, 1}
}

func (x *CMsgBattleReportAggregateStats_CMsgBattleReportAggregate) GetHeroId() uint32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CMsgBattleReportAggregateStats_CMsgBattleReportAggregate) GetPredictedPosition() uint32 {
	if x != nil && x.PredictedPosition != nil {
		return *x.PredictedPosition
	}
	return 0
}

func (x *CMsgBattleReportAggregateStats_CMsgBattleReportAggregate) GetGameCount() uint32 {
	if x != nil && x.GameCount != nil {
		return *x.GameCount
	}
	return 0
}

func (x *CMsgBattleReportAggregateStats_CMsgBattleReportAggregate) GetWinCount() uint32 {
	if x != nil && x.WinCount != nil {
		return *x.WinCount
	}
	return 0
}

func (x *CMsgBattleReportAggregateStats_CMsgBattleReportAggregate) GetLaneWinCount() uint32 {
	if x != nil && x.LaneWinCount != nil {
		return *x.LaneWinCount
	}
	return 0
}

func (x *CMsgBattleReportAggregateStats_CMsgBattleReportAggregate) GetKills() *CMsgBattleReportAggregateStats_CMsgBattleReportStat {
	if x != nil {
		return x.Kills
	}
	return nil
}

func (x *CMsgBattleReportAggregateStats_CMsgBattleReportAggregate) GetDeaths() *CMsgBattleReportAggregateStats_CMsgBattleReportStat {
	if x != nil {
		return x.Deaths
	}
	return nil
}

func (x *CMsgBattleReportAggregateStats_CMsgBattleReportAggregate) GetAssists() *CMsgBattleReportAggregateStats_CMsgBattleReportStat {
	if x != nil {
		return x.Assists
	}
	return nil
}

func (x *CMsgBattleReportAggregateStats_CMsgBattleReportAggregate) GetRankChange() *CMsgBattleReportAggregateStats_CMsgBattleReportStat {
	if x != nil {
		return x.RankChange
	}
	return nil
}

func (x *CMsgBattleReportAggregateStats_CMsgBattleReportAggregate) GetLastHits() *CMsgBattleReportAggregateStats_CMsgBattleReportStat {
	if x != nil {
		return x.LastHits
	}
	return nil
}

func (x *CMsgBattleReportAggregateStats_CMsgBattleReportAggregate) GetDenies() *CMsgBattleReportAggregateStats_CMsgBattleReportStat {
	if x != nil {
		return x.Denies
	}
	return nil
}

func (x *CMsgBattleReportAggregateStats_CMsgBattleReportAggregate) GetGpm() *CMsgBattleReportAggregateStats_CMsgBattleReportStat {
	if x != nil {
		return x.Gpm
	}
	return nil
}

func (x *CMsgBattleReportAggregateStats_CMsgBattleReportAggregate) GetXpm() *CMsgBattleReportAggregateStats_CMsgBattleReportStat {
	if x != nil {
		return x.Xpm
	}
	return nil
}

func (x *CMsgBattleReportAggregateStats_CMsgBattleReportAggregate) GetSecondsDead() *CMsgBattleReportAggregateStats_CMsgBattleReportStat {
	if x != nil {
		return x.SecondsDead
	}
	return nil
}

func (x *CMsgBattleReportAggregateStats_CMsgBattleReportAggregate) GetBountyRunes() *CMsgBattleReportAggregateStats_CMsgBattleReportStat {
	if x != nil {
		return x.BountyRunes
	}
	return nil
}

func (x *CMsgBattleReportAggregateStats_CMsgBattleReportAggregate) GetWaterRunes() *CMsgBattleReportAggregateStats_CMsgBattleReportStat {
	if x != nil {
		return x.WaterRunes
	}
	return nil
}

func (x *CMsgBattleReportAggregateStats_CMsgBattleReportAggregate) GetPowerRunes() *CMsgBattleReportAggregateStats_CMsgBattleReportStat {
	if x != nil {
		return x.PowerRunes
	}
	return nil
}

func (x *CMsgBattleReportAggregateStats_CMsgBattleReportAggregate) GetTimeEnemyT1TowerDestroyed() *CMsgBattleReportAggregateStats_CMsgBattleReportStat {
	if x != nil {
		return x.TimeEnemyT1TowerDestroyed
	}
	return nil
}

func (x *CMsgBattleReportAggregateStats_CMsgBattleReportAggregate) GetTimeFriendlyT1TowerDestroyed() *CMsgBattleReportAggregateStats_CMsgBattleReportStat {
	if x != nil {
		return x.TimeFriendlyT1TowerDestroyed
	}
	return nil
}

func (x *CMsgBattleReportAggregateStats_CMsgBattleReportAggregate) GetEnemyRoshanKills() *CMsgBattleReportAggregateStats_CMsgBattleReportStat {
	if x != nil {
		return x.EnemyRoshanKills
	}
	return nil
}

func (x *CMsgBattleReportAggregateStats_CMsgBattleReportAggregate) GetTeleportsUsed() *CMsgBattleReportAggregateStats_CMsgBattleReportStat {
	if x != nil {
		return x.TeleportsUsed
	}
	return nil
}

func (x *CMsgBattleReportAggregateStats_CMsgBattleReportAggregate) GetDewards() *CMsgBattleReportAggregateStats_CMsgBattleReportStat {
	if x != nil {
		return x.Dewards
	}
	return nil
}

func (x *CMsgBattleReportAggregateStats_CMsgBattleReportAggregate) GetCampsStacked() *CMsgBattleReportAggregateStats_CMsgBattleReportStat {
	if x != nil {
		return x.CampsStacked
	}
	return nil
}

func (x *CMsgBattleReportAggregateStats_CMsgBattleReportAggregate) GetSupportGold() *CMsgBattleReportAggregateStats_CMsgBattleReportStat {
	if x != nil {
		return x.SupportGold
	}
	return nil
}

func (x *CMsgBattleReportAggregateStats_CMsgBattleReportAggregate) GetHeroDamage() *CMsgBattleReportAggregateStats_CMsgBattleReportStat {
	if x != nil {
		return x.HeroDamage
	}
	return nil
}

func (x *CMsgBattleReportAggregateStats_CMsgBattleReportAggregate) GetHeroHealing() *CMsgBattleReportAggregateStats_CMsgBattleReportStat {
	if x != nil {
		return x.HeroHealing
	}
	return nil
}

func (x *CMsgBattleReportAggregateStats_CMsgBattleReportAggregate) GetTowerDamage() *CMsgBattleReportAggregateStats_CMsgBattleReportStat {
	if x != nil {
		return x.TowerDamage
	}
	return nil
}

func (x *CMsgBattleReportAggregateStats_CMsgBattleReportAggregate) GetSuccessfulSmokes() *CMsgBattleReportAggregateStats_CMsgBattleReportStat {
	if x != nil {
		return x.SuccessfulSmokes
	}
	return nil
}

func (x *CMsgBattleReportAggregateStats_CMsgBattleReportAggregate) GetStunDuration() *CMsgBattleReportAggregateStats_CMsgBattleReportStat {
	if x != nil {
		return x.StunDuration
	}
	return nil
}

func (x *CMsgBattleReportAggregateStats_CMsgBattleReportAggregate) GetDuration() *CMsgBattleReportAggregateStats_CMsgBattleReportStat {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *CMsgBattleReportAggregateStats_CMsgBattleReportAggregate) GetFriendlyRoshanKills() *CMsgBattleReportAggregateStats_CMsgBattleReportStat {
	if x != nil {
		return x.FriendlyRoshanKills
	}
	return nil
}

type CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeroId            *uint32 `protobuf:"varint,1,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	PredictedPosition *uint32 `protobuf:"varint,2,opt,name=predicted_position,json=predictedPosition" json:"predicted_position,omitempty"`
}

func (x *CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey) Reset() {
	*x = CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_battle_report_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey) ProtoMessage() {}

func (x *CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_battle_report_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_battle_report_proto_rawDescGZIP(), []int{10, 0}
}

func (x *CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey) GetHeroId() uint32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey) GetPredictedPosition() uint32 {
	if x != nil && x.PredictedPosition != nil {
		return *x.PredictedPosition
	}
	return 0
}

var File_dota_gcmessages_client_battle_report_proto protoreflect.FileDescriptor

var file_dota_gcmessages_client_battle_report_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x64, 0x6f, 0x74, 0x61, 0x5f, 0x67, 0x63, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x64, 0x6f,
	0x74, 0x61, 0x1a, 0x13, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x64, 0x6f, 0x74, 0x61, 0x5f, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1c, 0x64, 0x6f, 0x74, 0x61, 0x5f, 0x67, 0x63, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x64, 0x6f, 0x74, 0x61, 0x5f, 0x67, 0x63, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x77, 0x65, 0x62, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x67, 0x63,
	0x73, 0x64, 0x6b, 0x5f, 0x67, 0x63, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x67, 0x63, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x65, 0x63, 0x6f,
	0x6e, 0x5f, 0x67, 0x63, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1c, 0x64, 0x6f, 0x74, 0x61, 0x5f, 0x67, 0x63, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x15, 0x76, 0x61, 0x6c, 0x76, 0x65, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x78, 0x0a, 0x1d, 0x43, 0x4d, 0x73, 0x67, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74, 0x42, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xdb, 0x0d, 0x0a, 0x15, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x68,
	0x65, 0x72, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65,
	0x72, 0x6f, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65,
	0x61, 0x74, 0x68, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x65, 0x61, 0x74,
	0x68, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x72, 0x61, 0x6e, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x68, 0x69, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x48, 0x69, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65,
	0x6e, 0x69, 0x65, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x65, 0x6e, 0x69,
	0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x70, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x67, 0x70, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x78, 0x70, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x78, 0x70, 0x6d, 0x12, 0x2f, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x52, 0x6f, 0x6c,
	0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x39, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f,
	0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x45, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f,
	0x6d, 0x65, 0x12, 0x46, 0x0a, 0x0c, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x63, 0x6f,
	0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x45, 0x4c, 0x61, 0x6e, 0x65, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x52, 0x0b, 0x6c,
	0x61, 0x6e, 0x65, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61,
	0x6e, 0x6b, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x61, 0x6e, 0x6b,
	0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x30, 0x0a,
	0x14, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6c, 0x61, 0x6e,
	0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12,
	0x2d, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x70, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21,
	0x0a, 0x0c, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x44, 0x65, 0x61,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x65, 0x61,
	0x6d, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x77, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x54, 0x65, 0x61, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73,
	0x6c, 0x6f, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x67,
	0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x47, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x5f, 0x72, 0x75,
	0x6e, 0x65, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x62, 0x6f, 0x75, 0x6e, 0x74,
	0x79, 0x52, 0x75, 0x6e, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x61, 0x74, 0x65, 0x72, 0x5f,
	0x72, 0x75, 0x6e, 0x65, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x77, 0x61, 0x74,
	0x65, 0x72, 0x52, 0x75, 0x6e, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x5f, 0x72, 0x75, 0x6e, 0x65, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x1d, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x5f, 0x74, 0x31, 0x5f, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x5f,
	0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x65, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x19, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x65, 0x6d, 0x79, 0x54, 0x31, 0x54, 0x6f, 0x77, 0x65,
	0x72, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x65, 0x64, 0x12, 0x46, 0x0a, 0x20, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x5f, 0x74, 0x31, 0x5f, 0x74,
	0x6f, 0x77, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x65, 0x64, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x6c, 0x79, 0x54, 0x31, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79,
	0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x5f, 0x72, 0x6f, 0x73, 0x68,
	0x61, 0x6e, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10,
	0x65, 0x6e, 0x65, 0x6d, 0x79, 0x52, 0x6f, 0x73, 0x68, 0x61, 0x6e, 0x4b, 0x69, 0x6c, 0x6c, 0x73,
	0x12, 0x25, 0x0a, 0x0e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x75, 0x73,
	0x65, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x64, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x6d, 0x70, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b,
	0x65, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x61, 0x6d, 0x70, 0x73, 0x53,
	0x74, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x65, 0x72,
	0x6f, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x68, 0x65, 0x72, 0x6f, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x65,
	0x72, 0x6f, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x68, 0x65, 0x72, 0x6f, 0x48, 0x65, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a,
	0x0c, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x23, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x2b, 0x0a, 0x11, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x5f, 0x73,
	0x6d, 0x6f, 0x6b, 0x65, 0x73, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x53, 0x6d, 0x6f, 0x6b, 0x65, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x73, 0x74, 0x75, 0x6e, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x25,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x74, 0x75, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x26,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32,
	0x0a, 0x15, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x5f, 0x72, 0x6f, 0x73, 0x68, 0x61,
	0x6e, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x66,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x52, 0x6f, 0x73, 0x68, 0x61, 0x6e, 0x4b, 0x69, 0x6c,
	0x6c, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x72,
	0x61, 0x6e, 0x6b, 0x18, 0x28, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x6f, 0x75, 0x73, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x18, 0x2b, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64,
	0x53, 0x68, 0x61, 0x72, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x63, 0x65, 0x70, 0x74, 0x65, 0x72, 0x18,
	0x2c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x64, 0x53, 0x63, 0x65, 0x70, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x30, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x30, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x31, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x31, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x32,
	0x18, 0x2f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x32, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x33, 0x18, 0x30, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x33, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x34, 0x18, 0x31, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x34, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x35, 0x18, 0x32, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x35, 0x22,
	0x4e, 0x0a, 0x19, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x05,
	0x67, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x6f,
	0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x05, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x22,
	0x93, 0x06, 0x0a, 0x10, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x31, 0x0a, 0x05, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x47, 0x61, 0x6d, 0x65,
	0x52, 0x05, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x0a, 0x68, 0x69, 0x67, 0x68, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x6f,
	0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x0a, 0x68,
	0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x1a, 0xa1, 0x01, 0x0a, 0x10, 0x48, 0x69,
	0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x26,
	0x0a, 0x0f, 0x77, 0x69, 0x6e, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x77, 0x69, 0x6e, 0x4c, 0x6f, 0x73, 0x73,
	0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x69, 0x6e, 0x5f, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x77, 0x69, 0x6e,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x6d, 0x72, 0x5f, 0x64,
	0x65, 0x6c, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x6d, 0x72, 0x44,
	0x65, 0x6c, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x0f, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x68,
	0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x1a, 0xe5, 0x03,
	0x0a, 0x09, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x68,
	0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0d, 0x52, 0x0b, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x49, 0x64, 0x12, 0x44,
	0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e,
	0x32, 0x28, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x24, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x48, 0x69, 0x67, 0x68, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x54, 0x69, 0x65, 0x72, 0x52, 0x04, 0x74, 0x69, 0x65, 0x72, 0x12, 0x3e,
	0x0a, 0x06, 0x72, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26,
	0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x52, 0x61, 0x72, 0x69, 0x74, 0x79, 0x52, 0x06, 0x72, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x12, 0x2f, 0x0a,
	0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x64, 0x6f,
	0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x34,
	0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x6c,
	0x74, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x3f, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x91, 0x02, 0x0a, 0x14, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x6b, 0x6e,
	0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x10,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64,
	0x48, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x73,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x61, 0x6c, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x65,
	0x64, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0x64, 0x0a, 0x18, 0x43, 0x4d, 0x73,
	0x67, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x12, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x62,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x5e, 0x0a, 0x1a, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x40, 0x0a,
	0x0a, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x52, 0x0a, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x22,
	0x95, 0x16, 0x0a, 0x1e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x56, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x1a, 0x40, 0x0a, 0x14, 0x43, 0x4d,
	0x73, 0x67, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x04, 0x6d, 0x65, 0x61, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x64, 0x65, 0x76, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x74, 0x64, 0x65, 0x76, 0x1a, 0xd8, 0x14, 0x0a,
	0x19, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x65,
	0x72, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x72,
	0x6f, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x65, 0x64,
	0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x11, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x77, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24,
	0x0a, 0x0e, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x77, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6c, 0x61, 0x6e, 0x65, 0x57, 0x69, 0x6e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4f, 0x0a, 0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x52, 0x05,
	0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x51, 0x0a, 0x06, 0x64, 0x65, 0x61, 0x74, 0x68, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x52, 0x06, 0x64, 0x65, 0x61, 0x74, 0x68, 0x73, 0x12, 0x53, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x69,
	0x73, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x64, 0x6f, 0x74, 0x61,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x52, 0x07, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x12, 0x5a, 0x0a,
	0x0b, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x39, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x52, 0x0a, 0x72,
	0x61, 0x6e, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x56, 0x0a, 0x09, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x68, 0x69, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x64,
	0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x48, 0x69, 0x74,
	0x73, 0x12, 0x51, 0x0a, 0x06, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x39, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x52, 0x06, 0x64, 0x65,
	0x6e, 0x69, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x03, 0x67, 0x70, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x39, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x52, 0x03, 0x67, 0x70,
	0x6d, 0x12, 0x4b, 0x0a, 0x03, 0x78, 0x70, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39,
	0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x52, 0x03, 0x78, 0x70, 0x6d, 0x12, 0x5c,
	0x0a, 0x0c, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x52,
	0x0b, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x44, 0x65, 0x61, 0x64, 0x12, 0x5c, 0x0a, 0x0c,
	0x62, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x5f, 0x72, 0x75, 0x6e, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x39, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x52, 0x0b, 0x62,
	0x6f, 0x75, 0x6e, 0x74, 0x79, 0x52, 0x75, 0x6e, 0x65, 0x73, 0x12, 0x5a, 0x0a, 0x0b, 0x77, 0x61,
	0x74, 0x65, 0x72, 0x5f, 0x72, 0x75, 0x6e, 0x65, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x39, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x52, 0x0a, 0x77, 0x61, 0x74, 0x65,
	0x72, 0x52, 0x75, 0x6e, 0x65, 0x73, 0x12, 0x5a, 0x0a, 0x0b, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f,
	0x72, 0x75, 0x6e, 0x65, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x64, 0x6f,
	0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x52, 0x0a, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x75, 0x6e,
	0x65, 0x73, 0x12, 0x7b, 0x0a, 0x1d, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x65, 0x6d, 0x79,
	0x5f, 0x74, 0x31, 0x5f, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f,
	0x79, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x64, 0x6f, 0x74, 0x61,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x52, 0x19, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x65, 0x6d, 0x79, 0x54,
	0x31, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x65, 0x64, 0x12,
	0x81, 0x01, 0x0a, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c,
	0x79, 0x5f, 0x74, 0x31, 0x5f, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x72,
	0x6f, 0x79, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x64, 0x6f, 0x74,
	0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x52, 0x1c, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x6c, 0x79, 0x54, 0x31, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f,
	0x79, 0x65, 0x64, 0x12, 0x67, 0x0a, 0x12, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x5f, 0x72, 0x6f, 0x73,
	0x68, 0x61, 0x6e, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x39, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x52, 0x10, 0x65, 0x6e, 0x65, 0x6d,
	0x79, 0x52, 0x6f, 0x73, 0x68, 0x61, 0x6e, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x60, 0x0a, 0x0e,
	0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x52,
	0x0d, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x53,
	0x0a, 0x07, 0x64, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x39, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x52, 0x07, 0x64, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x12, 0x5e, 0x0a, 0x0d, 0x63, 0x61, 0x6d, 0x70, 0x73, 0x5f, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x65, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x64, 0x6f, 0x74,
	0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x52, 0x0c, 0x63, 0x61, 0x6d, 0x70, 0x73, 0x53, 0x74, 0x61, 0x63,
	0x6b, 0x65, 0x64, 0x12, 0x5c, 0x0a, 0x0c, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x67,
	0x6f, 0x6c, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x64, 0x6f, 0x74, 0x61,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x52, 0x0b, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x6f, 0x6c,
	0x64, 0x12, 0x5a, 0x0a, 0x0b, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x52, 0x0a, 0x68, 0x65, 0x72, 0x6f, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x5c, 0x0a,
	0x0c, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x52, 0x0b,
	0x68, 0x65, 0x72, 0x6f, 0x48, 0x65, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x5c, 0x0a, 0x0c, 0x74,
	0x6f, 0x77, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x39, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x52, 0x0b, 0x74, 0x6f,
	0x77, 0x65, 0x72, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x66, 0x0a, 0x11, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x5f, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x73, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x52,
	0x10, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x53, 0x6d, 0x6f, 0x6b, 0x65,
	0x73, 0x12, 0x5e, 0x0a, 0x0d, 0x73, 0x74, 0x75, 0x6e, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x52, 0x0c, 0x73, 0x74, 0x75, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x55, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x52, 0x08,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6d, 0x0a, 0x15, 0x66, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x6c, 0x79, 0x5f, 0x72, 0x6f, 0x73, 0x68, 0x61, 0x6e, 0x5f, 0x6b, 0x69, 0x6c, 0x6c,
	0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x52, 0x13, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x52, 0x6f, 0x73, 0x68,
	0x61, 0x6e, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x22, 0x28, 0x0a, 0x26, 0x43, 0x4d, 0x73, 0x67, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x22, 0xed, 0x04, 0x0a, 0x25, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x6f,
	0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x51, 0x0a, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e,
	0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x6f, 0x47, 0x43, 0x47, 0x65, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d,
	0x0a, 0x0f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0e, 0x61,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x2e, 0x0a,
	0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x6f,
	0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xc1, 0x02,
	0x0a, 0x09, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b,
	0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10,
	0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10,
	0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x6f, 0x42, 0x75, 0x73, 0x79, 0x10,
	0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x6b, 0x5f, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x6b,
	0x5f, 0x65, 0x4e, 0x6f, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x54,
	0x6f, 0x44, 0x6f, 0x74, 0x61, 0x50, 0x6c, 0x75, 0x73, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x6b,
	0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x10, 0x06, 0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x5f, 0x65, 0x55, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x54, 0x6f, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x75, 0x73, 0x53, 0x75, 0x62, 0x49, 0x6e,
	0x66, 0x6f, 0x10, 0x07, 0x12, 0x1f, 0x0a, 0x1b, 0x6b, 0x5f, 0x65, 0x55, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x54, 0x6f, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x10, 0x08, 0x12, 0x1f, 0x0a, 0x1b, 0x6b, 0x5f, 0x65, 0x55, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x54, 0x6f, 0x53, 0x61, 0x76, 0x65, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x10, 0x09, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x5f, 0x65, 0x55, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x54, 0x6f, 0x47, 0x65, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x73, 0x10, 0x0a, 0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x5f, 0x65, 0x4e, 0x6f, 0x74, 0x45, 0x6e,
	0x6f, 0x75, 0x67, 0x68, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x10,
	0x0b, 0x22, 0xda, 0x02, 0x0a, 0x2b, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x75, 0x0a, 0x0e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x6b,
	0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x64, 0x6f, 0x74, 0x61,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x47,
	0x65, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x0d, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x1a, 0x66, 0x0a, 0x1c, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x12,
	0x2d, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x70, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x89,
	0x03, 0x0a, 0x33, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47,
	0x43, 0x47, 0x65, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x5f, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x43, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74,
	0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa1, 0x01, 0x0a, 0x09, 0x45, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f,
	0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f,
	0x65, 0x54, 0x6f, 0x6f, 0x42, 0x75, 0x73, 0x79, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f,
	0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x6b,
	0x5f, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6e, 0x69,
	0x65, 0x64, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x10, 0x05, 0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x5f,
	0x65, 0x4e, 0x6f, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x54, 0x6f,
	0x44, 0x6f, 0x74, 0x61, 0x50, 0x6c, 0x75, 0x73, 0x10, 0x06, 0x22, 0x42, 0x0a, 0x21, 0x43, 0x4d,
	0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xe7,
	0x02, 0x0a, 0x29, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47,
	0x43, 0x47, 0x65, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x17,
	0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x14, 0x62,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8b, 0x01, 0x0a, 0x09, 0x45,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e,
	0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x0e,
	0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x6f, 0x42, 0x75, 0x73, 0x79, 0x10, 0x02, 0x12, 0x0f,
	0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x03, 0x12,
	0x17, 0x0a, 0x13, 0x6b, 0x5f, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x5f, 0x65, 0x4e,
	0x6f, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x54, 0x6f, 0x44, 0x6f,
	0x74, 0x61, 0x50, 0x6c, 0x75, 0x73, 0x10, 0x05, 0x22, 0x80, 0x01, 0x0a, 0x25, 0x43, 0x4d, 0x73,
	0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x41, 0x63, 0x6b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xbf, 0x03, 0x0a, 0x2d,
	0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x41, 0x63,
	0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x3d, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x47, 0x43, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x68, 0x61, 0x72,
	0x64, 0x73, 0x5f, 0x61, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x64, 0x73, 0x41, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x22,
	0x8b, 0x02, 0x0a, 0x09, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a,
	0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x6f, 0x42, 0x75, 0x73,
	0x79, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x6b, 0x5f, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x10, 0x05, 0x12, 0x1f, 0x0a,
	0x1b, 0x6b, 0x5f, 0x65, 0x55, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x4c, 0x6f, 0x61, 0x64,
	0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x10, 0x06, 0x12, 0x1a,
	0x0a, 0x16, 0x6b, 0x5f, 0x65, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x41, 0x63, 0x6b, 0x6e,
	0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x64, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f,
	0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x10, 0x08,
	0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x5f, 0x65, 0x4e, 0x6f, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x64, 0x54, 0x6f, 0x44, 0x6f, 0x74, 0x61, 0x50, 0x6c, 0x75, 0x73, 0x10, 0x09,
	0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x5f, 0x65, 0x4e, 0x6f, 0x74, 0x45, 0x6e, 0x6f, 0x75, 0x67, 0x68,
	0x47, 0x61, 0x6d, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x10, 0x0a, 0x22, 0x84, 0x01,
	0x0a, 0x29, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43,
	0x47, 0x65, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe7, 0x02, 0x0a, 0x31, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x08, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x41, 0x2e, 0x64,
	0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f,
	0x47, 0x43, 0x47, 0x65, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x67, 0x61, 0x6d,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x67, 0x61, 0x6d, 0x65, 0x73,
	0x22, 0x9b, 0x01, 0x0a, 0x09, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14,
	0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x6f, 0x42, 0x75,
	0x73, 0x79, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x6b, 0x5f, 0x65, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x10, 0x05, 0x12, 0x1e,
	0x0a, 0x1a, 0x6b, 0x5f, 0x65, 0x4e, 0x6f, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x64, 0x54, 0x6f, 0x44, 0x6f, 0x74, 0x61, 0x50, 0x6c, 0x75, 0x73, 0x10, 0x06, 0x2a, 0xe5,
	0x0c, 0x0a, 0x1e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x24, 0x0a, 0x17, 0x6b, 0x5f, 0x65, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x6b, 0x5f, 0x65, 0x47, 0x61,
	0x6d, 0x65, 0x57, 0x69, 0x6e, 0x72, 0x61, 0x74, 0x65, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x6b,
	0x5f, 0x65, 0x4c, 0x61, 0x6e, 0x65, 0x57, 0x69, 0x6e, 0x72, 0x61, 0x74, 0x65, 0x10, 0x01, 0x12,
	0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x4d, 0x4d, 0x52, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x10, 0x02,
	0x12, 0x16, 0x0a, 0x12, 0x6b, 0x5f, 0x65, 0x4e, 0x75, 0x6d, 0x48, 0x65, 0x72, 0x6f, 0x65, 0x73,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x65, 0x4e,
	0x75, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x10, 0x04, 0x12,
	0x1d, 0x0a, 0x19, 0x6b, 0x5f, 0x65, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x52, 0x75, 0x6e, 0x65, 0x73, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x10, 0x05, 0x12, 0x1e,
	0x0a, 0x1a, 0x6b, 0x5f, 0x65, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x75, 0x6e,
	0x74, 0x79, 0x52, 0x75, 0x6e, 0x65, 0x73, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x10, 0x06, 0x12, 0x1c,
	0x0a, 0x18, 0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x6e,
	0x65, 0x6d, 0x79, 0x54, 0x31, 0x46, 0x69, 0x72, 0x73, 0x74, 0x10, 0x07, 0x12, 0x17, 0x0a, 0x13,
	0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x6f, 0x73, 0x68, 0x61, 0x6e, 0x4b, 0x69,
	0x6c, 0x6c, 0x73, 0x10, 0x08, 0x12, 0x13, 0x0a, 0x0f, 0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x44, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x10, 0x09, 0x12, 0x18, 0x0a, 0x14, 0x6b, 0x5f,
	0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x61, 0x6d, 0x70, 0x73, 0x53, 0x74, 0x61, 0x63, 0x6b,
	0x65, 0x64, 0x10, 0x0a, 0x12, 0x13, 0x0a, 0x0f, 0x6b, 0x5f, 0x65, 0x4d, 0x61, 0x78, 0x57, 0x69,
	0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x10, 0x0b, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x65,
	0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x44, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x10, 0x0c,
	0x12, 0x13, 0x0a, 0x0f, 0x6b, 0x5f, 0x65, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x4b, 0x69,
	0x6c, 0x6c, 0x73, 0x10, 0x0d, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x4d, 0x61, 0x78, 0x4b,
	0x69, 0x6c, 0x6c, 0x73, 0x10, 0x0e, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x65, 0x41, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x10, 0x0f, 0x12, 0x11, 0x0a,
	0x0d, 0x6b, 0x5f, 0x65, 0x4d, 0x61, 0x78, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x10, 0x10,
	0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x44, 0x65,
	0x61, 0x74, 0x68, 0x73, 0x10, 0x11, 0x12, 0x10, 0x0a, 0x0c, 0x6b, 0x5f, 0x65, 0x4d, 0x69, 0x6e,
	0x44, 0x65, 0x61, 0x74, 0x68, 0x73, 0x10, 0x12, 0x12, 0x1a, 0x0a, 0x16, 0x6b, 0x5f, 0x65, 0x41,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x43, 0x61, 0x6d, 0x70, 0x73, 0x53, 0x74, 0x61, 0x63, 0x6b,
	0x65, 0x64, 0x10, 0x13, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x4c, 0x61, 0x73, 0x74, 0x48, 0x69, 0x74, 0x73, 0x10, 0x14, 0x12, 0x16, 0x0a, 0x12, 0x6b, 0x5f,
	0x65, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x48, 0x69, 0x74, 0x73,
	0x10, 0x15, 0x12, 0x12, 0x0a, 0x0e, 0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x65,
	0x6e, 0x69, 0x65, 0x73, 0x10, 0x16, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x41, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x44, 0x65, 0x6e, 0x69, 0x65, 0x73, 0x10, 0x17, 0x12, 0x24, 0x0a, 0x20,
	0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x57, 0x69, 0x74,
	0x68, 0x52, 0x6f, 0x73, 0x68, 0x61, 0x6e, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x10, 0x18, 0x12, 0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x47, 0x61, 0x6d, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x52, 0x6f, 0x73, 0x68, 0x61, 0x6e, 0x41,
	0x64, 0x76, 0x61, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x10, 0x19, 0x12, 0x1a, 0x0a, 0x16, 0x6b, 0x5f,
	0x65, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x53, 0x74, 0x75, 0x6e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x10, 0x1a, 0x12, 0x18, 0x0a, 0x14, 0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x53, 0x74, 0x75, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x1b,
	0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x5f, 0x65, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x54, 0x65,
	0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x55, 0x73, 0x65, 0x64, 0x10, 0x1c, 0x12, 0x19, 0x0a,
	0x15, 0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x55, 0x73, 0x65, 0x64, 0x10, 0x1d, 0x12, 0x18, 0x0a, 0x14, 0x6b, 0x5f, 0x65, 0x41,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x48, 0x65, 0x72, 0x6f, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65,
	0x10, 0x1e, 0x12, 0x16, 0x0a, 0x12, 0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x48, 0x65,
	0x72, 0x6f, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x10, 0x1f, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x5f,
	0x65, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x48, 0x65, 0x72, 0x6f, 0x48, 0x65, 0x61, 0x6c,
	0x69, 0x6e, 0x67, 0x10, 0x20, 0x12, 0x17, 0x0a, 0x13, 0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x48, 0x65, 0x72, 0x6f, 0x48, 0x65, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x10, 0x21, 0x12, 0x19,
	0x0a, 0x15, 0x6b, 0x5f, 0x65, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x77, 0x65,
	0x72, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x10, 0x22, 0x12, 0x17, 0x0a, 0x13, 0x6b, 0x5f, 0x65,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65,
	0x10, 0x23, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x4d, 0x61, 0x78, 0x4c, 0x6f, 0x73, 0x73,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x10, 0x24, 0x12, 0x1a, 0x0a, 0x16, 0x6b, 0x5f, 0x65, 0x41,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x10, 0x25, 0x12, 0x16, 0x0a, 0x12, 0x6b, 0x5f, 0x65, 0x4d, 0x61, 0x78, 0x47, 0x61,
	0x6d, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x26, 0x12, 0x16, 0x0a, 0x12,
	0x6b, 0x5f, 0x65, 0x4d, 0x69, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x10, 0x27, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x5f, 0x65, 0x41, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x57, 0x69, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x28, 0x12,
	0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x65, 0x4d, 0x61, 0x78, 0x57, 0x69, 0x6e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x10, 0x29, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x65, 0x4d, 0x69, 0x6e,
	0x57, 0x69, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x2a, 0x12, 0x1a, 0x0a,
	0x16, 0x6b, 0x5f, 0x65, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x73, 0x73, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x2b, 0x12, 0x16, 0x0a, 0x12, 0x6b, 0x5f, 0x65,
	0x4d, 0x61, 0x78, 0x4c, 0x6f, 0x73, 0x73, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10,
	0x2c, 0x12, 0x16, 0x0a, 0x12, 0x6b, 0x5f, 0x65, 0x4d, 0x69, 0x6e, 0x4c, 0x6f, 0x73, 0x73, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x2d, 0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x65,
	0x50, 0x63, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x45, 0x6e, 0x65, 0x6d, 0x79, 0x54, 0x31, 0x54,
	0x61, 0x6b, 0x65, 0x6e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x10, 0x2e, 0x12, 0x16, 0x0a, 0x12, 0x6b,
	0x5f, 0x65, 0x4d, 0x61, 0x78, 0x43, 0x61, 0x6d, 0x70, 0x73, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x65,
	0x64, 0x10, 0x2f, 0x12, 0x11, 0x0a, 0x0d, 0x6b, 0x5f, 0x65, 0x4d, 0x61, 0x78, 0x44, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x10, 0x30, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x65, 0x4d, 0x61, 0x78,
	0x52, 0x6f, 0x73, 0x68, 0x61, 0x6e, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x10, 0x31, 0x12, 0x1a, 0x0a,
	0x16, 0x6b, 0x5f, 0x65, 0x4d, 0x61, 0x78, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x52, 0x75, 0x6e,
	0x65, 0x73, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x10, 0x32, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x5f, 0x65,
	0x4d, 0x61, 0x78, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x65, 0x73, 0x54, 0x61, 0x6b,
	0x65, 0x6e, 0x10, 0x33, 0x12, 0x10, 0x0a, 0x0c, 0x6b, 0x5f, 0x65, 0x4d, 0x61, 0x78, 0x44, 0x65,
	0x61, 0x74, 0x68, 0x73, 0x10, 0x34, 0x12, 0x12, 0x0a, 0x0e, 0x6b, 0x5f, 0x65, 0x4d, 0x61, 0x78,
	0x4c, 0x61, 0x73, 0x74, 0x48, 0x69, 0x74, 0x73, 0x10, 0x35, 0x12, 0x10, 0x0a, 0x0c, 0x6b, 0x5f,
	0x65, 0x4d, 0x61, 0x78, 0x44, 0x65, 0x6e, 0x69, 0x65, 0x73, 0x10, 0x36, 0x12, 0x15, 0x0a, 0x11,
	0x6b, 0x5f, 0x65, 0x52, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x57, 0x69, 0x6e, 0x52, 0x61, 0x74,
	0x65, 0x10, 0x37, 0x12, 0x12, 0x0a, 0x0e, 0x6b, 0x5f, 0x65, 0x44, 0x69, 0x72, 0x65, 0x57, 0x69,
	0x6e, 0x52, 0x61, 0x74, 0x65, 0x10, 0x38, 0x12, 0x17, 0x0a, 0x13, 0x6b, 0x5f, 0x65, 0x52, 0x61,
	0x64, 0x69, 0x61, 0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0x39,
	0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x44, 0x69, 0x72, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x10, 0x3a, 0x12, 0x10, 0x0a, 0x0c, 0x6b, 0x5f, 0x65, 0x4d, 0x61, 0x78,
	0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x10, 0x3b, 0x12, 0x11, 0x0a, 0x0d, 0x6b, 0x5f, 0x65, 0x4d,
	0x61, 0x78, 0x48, 0x65, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x10, 0x3c, 0x12, 0x15, 0x0a, 0x11, 0x6b,
	0x5f, 0x65, 0x4d, 0x61, 0x78, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65,
	0x10, 0x3d, 0x12, 0x11, 0x0a, 0x0d, 0x6b, 0x5f, 0x65, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x47, 0x50, 0x4d, 0x10, 0x3e, 0x12, 0x0d, 0x0a, 0x09, 0x6b, 0x5f, 0x65, 0x4d, 0x61, 0x78, 0x47,
	0x50, 0x4d, 0x10, 0x3f, 0x12, 0x11, 0x0a, 0x0d, 0x6b, 0x5f, 0x65, 0x41, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x58, 0x50, 0x4d, 0x10, 0x40, 0x12, 0x0d, 0x0a, 0x09, 0x6b, 0x5f, 0x65, 0x4d, 0x61,
	0x78, 0x58, 0x50, 0x4d, 0x10, 0x41, 0x2a, 0x69, 0x0a, 0x22, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x48, 0x69, 0x67, 0x68, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x17, 0x0a, 0x13,
	0x6b, 0x5f, 0x65, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x6c, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x48, 0x69, 0x67, 0x68,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x48, 0x65, 0x72, 0x6f, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x6b,
	0x5f, 0x65, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x10,
	0x02, 0x2a, 0x8d, 0x01, 0x0a, 0x15, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x0e, 0x6b,
	0x5f, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x10, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x53,
	0x61, 0x66, 0x65, 0x6c, 0x61, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65,
	0x4d, 0x69, 0x64, 0x6c, 0x61, 0x6e, 0x65, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65,
	0x4f, 0x66, 0x66, 0x6c, 0x61, 0x6e, 0x65, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x6b, 0x5f, 0x65,
	0x53, 0x6f, 0x66, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x10, 0x03, 0x12, 0x12, 0x0a,
	0x0e, 0x6b, 0x5f, 0x65, 0x48, 0x61, 0x72, 0x64, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x10,
	0x04, 0x2a, 0xad, 0x01, 0x0a, 0x1f, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x25, 0x0a, 0x18, 0x6b, 0x5f, 0x65, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x14, 0x0a, 0x10,
	0x6b, 0x5f, 0x65, 0x41, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x5f, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73,
	0x4f, 0x66, 0x53, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x10, 0x01, 0x12,
	0x11, 0x0a, 0x0d, 0x6b, 0x5f, 0x65, 0x41, 0x6c, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73,
	0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x5f, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x10,
	0x03, 0x2a, 0xbd, 0x01, 0x0a, 0x1e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x54, 0x69, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x13, 0x6b, 0x5f, 0x65, 0x48, 0x69, 0x67, 0x68, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x54, 0x69, 0x65, 0x72, 0x4c, 0x6f, 0x77, 0x10, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x6b, 0x5f, 0x65, 0x48, 0x69, 0x67,
	0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x54, 0x69, 0x65, 0x72, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00,
	0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x65, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x54, 0x69, 0x65, 0x72, 0x31, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x65, 0x48, 0x69,
	0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x54, 0x69, 0x65, 0x72, 0x32, 0x10, 0x02, 0x12, 0x15,
	0x0a, 0x11, 0x6b, 0x5f, 0x65, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x54, 0x69,
	0x65, 0x72, 0x33, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x6b, 0x5f, 0x65, 0x48, 0x69, 0x67, 0x68,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x54, 0x69, 0x65, 0x72, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x10,
	0x04, 0x2a, 0x6a, 0x0a, 0x20, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x52,
	0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x12, 0x6b, 0x5f, 0x65, 0x48, 0x69, 0x67, 0x68,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x10, 0x00, 0x12, 0x18, 0x0a,
	0x14, 0x6b, 0x5f, 0x65, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x55, 0x6e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x48, 0x69,
	0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x52, 0x61, 0x72, 0x65, 0x10, 0x02, 0x2a, 0x34, 0x0a,
	0x19, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x45, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x6b, 0x5f,
	0x65, 0x57, 0x69, 0x6e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x6b, 0x5f, 0x65, 0x4c, 0x6f, 0x73,
	0x73, 0x10, 0x01, 0x2a, 0x75, 0x0a, 0x1d, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x45, 0x4c, 0x61, 0x6e, 0x65, 0x4f, 0x75, 0x74,
	0x63, 0x6f, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x15, 0x6b, 0x5f, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x4c, 0x61, 0x6e, 0x65, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x10, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x57,
	0x6f, 0x6e, 0x4c, 0x61, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x4c,
	0x6f, 0x73, 0x74, 0x4c, 0x61, 0x6e, 0x65, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x4c, 0x61, 0x6e, 0x65, 0x10, 0x02, 0x42, 0x25, 0x5a, 0x23, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x74, 0x61, 0x62, 0x75, 0x66,
	0x66, 0x2f, 0x6d, 0x61, 0x6e, 0x74, 0x61, 0x2f, 0x64, 0x6f, 0x74, 0x61, 0x3b, 0x64, 0x6f, 0x74,
	0x61,
}

var (
	file_dota_gcmessages_client_battle_report_proto_rawDescOnce sync.Once
	file_dota_gcmessages_client_battle_report_proto_rawDescData = file_dota_gcmessages_client_battle_report_proto_rawDesc
)

func file_dota_gcmessages_client_battle_report_proto_rawDescGZIP() []byte {
	file_dota_gcmessages_client_battle_report_proto_rawDescOnce.Do(func() {
		file_dota_gcmessages_client_battle_report_proto_rawDescData = protoimpl.X.CompressGZIP(file_dota_gcmessages_client_battle_report_proto_rawDescData)
	})
	return file_dota_gcmessages_client_battle_report_proto_rawDescData
}

var file_dota_gcmessages_client_battle_report_proto_enumTypes = make([]protoimpl.EnumInfo, 13)
var file_dota_gcmessages_client_battle_report_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_dota_gcmessages_client_battle_report_proto_goTypes = []interface{}{
	(CMsgBattleReport_HighlightType)(0),                                              // 0: dota.CMsgBattleReport_HighlightType
	(CMsgBattleReport_HighlightCategory)(0),                                          // 1: dota.CMsgBattleReport_HighlightCategory
	(CMsgBattleReport_Role)(0),                                                       // 2: dota.CMsgBattleReport_Role
	(CMsgBattleReport_CompareContext)(0),                                             // 3: dota.CMsgBattleReport_CompareContext
	(CMsgBattleReport_HighlightTier)(0),                                              // 4: dota.CMsgBattleReport_HighlightTier
	(CMsgBattleReport_HighlightRarity)(0),                                            // 5: dota.CMsgBattleReport_HighlightRarity
	(CMsgBattleReport_EOutcome)(0),                                                   // 6: dota.CMsgBattleReport_EOutcome
	(CMsgBattleReport_ELaneOutcome)(0),                                               // 7: dota.CMsgBattleReport_ELaneOutcome
	(CMsgClientToGCGetBattleReportResponse_EResponse)(0),                             // 8: dota.CMsgClientToGCGetBattleReportResponse.EResponse
	(CMsgClientToGCGetBattleReportAggregateStatsResponse_EResponse)(0),               // 9: dota.CMsgClientToGCGetBattleReportAggregateStatsResponse.EResponse
	(CMsgClientToGCGetBattleReportInfoResponse_EResponse)(0),                         // 10: dota.CMsgClientToGCGetBattleReportInfoResponse.EResponse
	(CMsgClientToGCAcknowledgeBattleReportResponse_EResponse)(0),                     // 11: dota.CMsgClientToGCAcknowledgeBattleReportResponse.EResponse
	(CMsgClientToGCGetBattleReportMatchHistoryResponse_EResponse)(0),                 // 12: dota.CMsgClientToGCGetBattleReportMatchHistoryResponse.EResponse
	(*CMsgClientToGCGetBattleReport)(nil),                                            // 13: dota.CMsgClientToGCGetBattleReport
	(*CMsgBattleReport_Game)(nil),                                                    // 14: dota.CMsgBattleReport_Game
	(*CMsgBattleReport_GameList)(nil),                                                // 15: dota.CMsgBattleReport_GameList
	(*CMsgBattleReport)(nil),                                                         // 16: dota.CMsgBattleReport
	(*CMsgBattleReportInfo)(nil),                                                     // 17: dota.CMsgBattleReportInfo
	(*CMsgBattleReportInfoList)(nil),                                                 // 18: dota.CMsgBattleReportInfoList
	(*CMsgBattleReportHighlights)(nil),                                               // 19: dota.CMsgBattleReportHighlights
	(*CMsgBattleReportAggregateStats)(nil),                                           // 20: dota.CMsgBattleReportAggregateStats
	(*CMsgBattleReportAggregatedGeneralStats)(nil),                                   // 21: dota.CMsgBattleReportAggregatedGeneralStats
	(*CMsgClientToGCGetBattleReportResponse)(nil),                                    // 22: dota.CMsgClientToGCGetBattleReportResponse
	(*CMsgClientToGCGetBattleReportAggregateStats)(nil),                              // 23: dota.CMsgClientToGCGetBattleReportAggregateStats
	(*CMsgClientToGCGetBattleReportAggregateStatsResponse)(nil),                      // 24: dota.CMsgClientToGCGetBattleReportAggregateStatsResponse
	(*CMsgClientToGCGetBattleReportInfo)(nil),                                        // 25: dota.CMsgClientToGCGetBattleReportInfo
	(*CMsgClientToGCGetBattleReportInfoResponse)(nil),                                // 26: dota.CMsgClientToGCGetBattleReportInfoResponse
	(*CMsgClientToGCAcknowledgeBattleReport)(nil),                                    // 27: dota.CMsgClientToGCAcknowledgeBattleReport
	(*CMsgClientToGCAcknowledgeBattleReportResponse)(nil),                            // 28: dota.CMsgClientToGCAcknowledgeBattleReportResponse
	(*CMsgClientToGCGetBattleReportMatchHistory)(nil),                                // 29: dota.CMsgClientToGCGetBattleReportMatchHistory
	(*CMsgClientToGCGetBattleReportMatchHistoryResponse)(nil),                        // 30: dota.CMsgClientToGCGetBattleReportMatchHistoryResponse
	(*CMsgBattleReport_HighlightGeneral)(nil),                                        // 31: dota.CMsgBattleReport.HighlightGeneral
	(*CMsgBattleReport_Highlight)(nil),                                               // 32: dota.CMsgBattleReport.Highlight
	(*CMsgBattleReportAggregateStats_CMsgBattleReportStat)(nil),                      // 33: dota.CMsgBattleReportAggregateStats.CMsgBattleReportStat
	(*CMsgBattleReportAggregateStats_CMsgBattleReportAggregate)(nil),                 // 34: dota.CMsgBattleReportAggregateStats.CMsgBattleReportAggregate
	(*CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey)(nil), // 35: dota.CMsgClientToGCGetBattleReportAggregateStats.CMsgBattleReportAggregateKey
}
var file_dota_gcmessages_client_battle_report_proto_depIdxs = []int32{
	2,  // 0: dota.CMsgBattleReport_Game.role:type_name -> dota.CMsgBattleReport_Role
	6,  // 1: dota.CMsgBattleReport_Game.outcome:type_name -> dota.CMsgBattleReport_EOutcome
	7,  // 2: dota.CMsgBattleReport_Game.lane_outcome:type_name -> dota.CMsgBattleReport_ELaneOutcome
	14, // 3: dota.CMsgBattleReport_GameList.games:type_name -> dota.CMsgBattleReport_Game
	14, // 4: dota.CMsgBattleReport.games:type_name -> dota.CMsgBattleReport_Game
	19, // 5: dota.CMsgBattleReport.highlights:type_name -> dota.CMsgBattleReportHighlights
	17, // 6: dota.CMsgBattleReportInfoList.battle_report_info:type_name -> dota.CMsgBattleReportInfo
	32, // 7: dota.CMsgBattleReportHighlights.highlights:type_name -> dota.CMsgBattleReport.Highlight
	34, // 8: dota.CMsgBattleReportAggregateStats.result:type_name -> dota.CMsgBattleReportAggregateStats.CMsgBattleReportAggregate
	16, // 9: dota.CMsgClientToGCGetBattleReportResponse.report:type_name -> dota.CMsgBattleReport
	8,  // 10: dota.CMsgClientToGCGetBattleReportResponse.response:type_name -> dota.CMsgClientToGCGetBattleReportResponse.EResponse
	20, // 11: dota.CMsgClientToGCGetBattleReportResponse.aggregate_stats:type_name -> dota.CMsgBattleReportAggregateStats
	17, // 12: dota.CMsgClientToGCGetBattleReportResponse.info:type_name -> dota.CMsgBattleReportInfo
	35, // 13: dota.CMsgClientToGCGetBattleReportAggregateStats.aggregate_keys:type_name -> dota.CMsgClientToGCGetBattleReportAggregateStats.CMsgBattleReportAggregateKey
	20, // 14: dota.CMsgClientToGCGetBattleReportAggregateStatsResponse.aggregate_stats:type_name -> dota.CMsgBattleReportAggregateStats
	9,  // 15: dota.CMsgClientToGCGetBattleReportAggregateStatsResponse.response:type_name -> dota.CMsgClientToGCGetBattleReportAggregateStatsResponse.EResponse
	18, // 16: dota.CMsgClientToGCGetBattleReportInfoResponse.battle_report_info_list:type_name -> dota.CMsgBattleReportInfoList
	10, // 17: dota.CMsgClientToGCGetBattleReportInfoResponse.response:type_name -> dota.CMsgClientToGCGetBattleReportInfoResponse.EResponse
	11, // 18: dota.CMsgClientToGCAcknowledgeBattleReportResponse.response:type_name -> dota.CMsgClientToGCAcknowledgeBattleReportResponse.EResponse
	12, // 19: dota.CMsgClientToGCGetBattleReportMatchHistoryResponse.response:type_name -> dota.CMsgClientToGCGetBattleReportMatchHistoryResponse.EResponse
	15, // 20: dota.CMsgClientToGCGetBattleReportMatchHistoryResponse.games:type_name -> dota.CMsgBattleReport_GameList
	1,  // 21: dota.CMsgBattleReport.Highlight.category:type_name -> dota.CMsgBattleReport_HighlightCategory
	4,  // 22: dota.CMsgBattleReport.Highlight.tier:type_name -> dota.CMsgBattleReport_HighlightTier
	5,  // 23: dota.CMsgBattleReport.Highlight.rarity:type_name -> dota.CMsgBattleReport_HighlightRarity
	2,  // 24: dota.CMsgBattleReport.Highlight.role:type_name -> dota.CMsgBattleReport_Role
	3,  // 25: dota.CMsgBattleReport.Highlight.context:type_name -> dota.CMsgBattleReport_CompareContext
	33, // 26: dota.CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.kills:type_name -> dota.CMsgBattleReportAggregateStats.CMsgBattleReportStat
	33, // 27: dota.CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.deaths:type_name -> dota.CMsgBattleReportAggregateStats.CMsgBattleReportStat
	33, // 28: dota.CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.assists:type_name -> dota.CMsgBattleReportAggregateStats.CMsgBattleReportStat
	33, // 29: dota.CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.rank_change:type_name -> dota.CMsgBattleReportAggregateStats.CMsgBattleReportStat
	33, // 30: dota.CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.last_hits:type_name -> dota.CMsgBattleReportAggregateStats.CMsgBattleReportStat
	33, // 31: dota.CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.denies:type_name -> dota.CMsgBattleReportAggregateStats.CMsgBattleReportStat
	33, // 32: dota.CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.gpm:type_name -> dota.CMsgBattleReportAggregateStats.CMsgBattleReportStat
	33, // 33: dota.CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.xpm:type_name -> dota.CMsgBattleReportAggregateStats.CMsgBattleReportStat
	33, // 34: dota.CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.seconds_dead:type_name -> dota.CMsgBattleReportAggregateStats.CMsgBattleReportStat
	33, // 35: dota.CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.bounty_runes:type_name -> dota.CMsgBattleReportAggregateStats.CMsgBattleReportStat
	33, // 36: dota.CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.water_runes:type_name -> dota.CMsgBattleReportAggregateStats.CMsgBattleReportStat
	33, // 37: dota.CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.power_runes:type_name -> dota.CMsgBattleReportAggregateStats.CMsgBattleReportStat
	33, // 38: dota.CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.time_enemy_t1_tower_destroyed:type_name -> dota.CMsgBattleReportAggregateStats.CMsgBattleReportStat
	33, // 39: dota.CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.time_friendly_t1_tower_destroyed:type_name -> dota.CMsgBattleReportAggregateStats.CMsgBattleReportStat
	33, // 40: dota.CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.enemy_roshan_kills:type_name -> dota.CMsgBattleReportAggregateStats.CMsgBattleReportStat
	33, // 41: dota.CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.teleports_used:type_name -> dota.CMsgBattleReportAggregateStats.CMsgBattleReportStat
	33, // 42: dota.CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.dewards:type_name -> dota.CMsgBattleReportAggregateStats.CMsgBattleReportStat
	33, // 43: dota.CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.camps_stacked:type_name -> dota.CMsgBattleReportAggregateStats.CMsgBattleReportStat
	33, // 44: dota.CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.support_gold:type_name -> dota.CMsgBattleReportAggregateStats.CMsgBattleReportStat
	33, // 45: dota.CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.hero_damage:type_name -> dota.CMsgBattleReportAggregateStats.CMsgBattleReportStat
	33, // 46: dota.CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.hero_healing:type_name -> dota.CMsgBattleReportAggregateStats.CMsgBattleReportStat
	33, // 47: dota.CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.tower_damage:type_name -> dota.CMsgBattleReportAggregateStats.CMsgBattleReportStat
	33, // 48: dota.CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.successful_smokes:type_name -> dota.CMsgBattleReportAggregateStats.CMsgBattleReportStat
	33, // 49: dota.CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.stun_duration:type_name -> dota.CMsgBattleReportAggregateStats.CMsgBattleReportStat
	33, // 50: dota.CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.duration:type_name -> dota.CMsgBattleReportAggregateStats.CMsgBattleReportStat
	33, // 51: dota.CMsgBattleReportAggregateStats.CMsgBattleReportAggregate.friendly_roshan_kills:type_name -> dota.CMsgBattleReportAggregateStats.CMsgBattleReportStat
	52, // [52:52] is the sub-list for method output_type
	52, // [52:52] is the sub-list for method input_type
	52, // [52:52] is the sub-list for extension type_name
	52, // [52:52] is the sub-list for extension extendee
	0,  // [0:52] is the sub-list for field type_name
}

func init() { file_dota_gcmessages_client_battle_report_proto_init() }
func file_dota_gcmessages_client_battle_report_proto_init() {
	if File_dota_gcmessages_client_battle_report_proto != nil {
		return
	}
	file_steammessages_proto_init()
	file_dota_shared_enums_proto_init()
	file_dota_gcmessages_common_proto_init()
	file_dota_gcmessages_webapi_proto_init()
	file_gcsdk_gcmessages_proto_init()
	file_base_gcmessages_proto_init()
	file_econ_gcmessages_proto_init()
	file_dota_gcmessages_client_proto_init()
	file_valveextensions_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_dota_gcmessages_client_battle_report_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCGetBattleReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_battle_report_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgBattleReport_Game); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_battle_report_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgBattleReport_GameList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_battle_report_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgBattleReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_battle_report_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgBattleReportInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_battle_report_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgBattleReportInfoList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_battle_report_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgBattleReportHighlights); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_battle_report_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgBattleReportAggregateStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_battle_report_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgBattleReportAggregatedGeneralStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_battle_report_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCGetBattleReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_battle_report_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCGetBattleReportAggregateStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_battle_report_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCGetBattleReportAggregateStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_battle_report_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCGetBattleReportInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_battle_report_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCGetBattleReportInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_battle_report_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCAcknowledgeBattleReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_battle_report_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCAcknowledgeBattleReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_battle_report_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCGetBattleReportMatchHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_battle_report_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCGetBattleReportMatchHistoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_battle_report_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgBattleReport_HighlightGeneral); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_battle_report_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgBattleReport_Highlight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_battle_report_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgBattleReportAggregateStats_CMsgBattleReportStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_battle_report_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgBattleReportAggregateStats_CMsgBattleReportAggregate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_battle_report_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCGetBattleReportAggregateStats_CMsgBattleReportAggregateKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dota_gcmessages_client_battle_report_proto_rawDesc,
			NumEnums:      13,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_dota_gcmessages_client_battle_report_proto_goTypes,
		DependencyIndexes: file_dota_gcmessages_client_battle_report_proto_depIdxs,
		EnumInfos:         file_dota_gcmessages_client_battle_report_proto_enumTypes,
		MessageInfos:      file_dota_gcmessages_client_battle_report_proto_msgTypes,
	}.Build()
	File_dota_gcmessages_client_battle_report_proto = out.File
	file_dota_gcmessages_client_battle_report_proto_rawDesc = nil
	file_dota_gcmessages_client_battle_report_proto_goTypes = nil
	file_dota_gcmessages_client_battle_report_proto_depIdxs = nil
}
