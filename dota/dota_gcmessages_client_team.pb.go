// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.5
// source: dota_gcmessages_client_team.proto

package dota

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ETeamInviteResult int32

const (
	ETeamInviteResult_TEAM_INVITE_SUCCESS                              ETeamInviteResult = 0
	ETeamInviteResult_TEAM_INVITE_FAILURE_INVITE_REJECTED              ETeamInviteResult = 1
	ETeamInviteResult_TEAM_INVITE_FAILURE_INVITE_TIMEOUT               ETeamInviteResult = 2
	ETeamInviteResult_TEAM_INVITE_ERROR_TEAM_AT_MEMBER_LIMIT           ETeamInviteResult = 3
	ETeamInviteResult_TEAM_INVITE_ERROR_TEAM_LOCKED                    ETeamInviteResult = 4
	ETeamInviteResult_TEAM_INVITE_ERROR_INVITEE_NOT_AVAILABLE          ETeamInviteResult = 5
	ETeamInviteResult_TEAM_INVITE_ERROR_INVITEE_BUSY                   ETeamInviteResult = 6
	ETeamInviteResult_TEAM_INVITE_ERROR_INVITEE_ALREADY_MEMBER         ETeamInviteResult = 7
	ETeamInviteResult_TEAM_INVITE_ERROR_INVITEE_AT_TEAM_LIMIT          ETeamInviteResult = 8
	ETeamInviteResult_TEAM_INVITE_ERROR_INVITEE_INSUFFICIENT_PLAY_TIME ETeamInviteResult = 9
	ETeamInviteResult_TEAM_INVITE_ERROR_INVITER_INVALID_ACCOUNT_TYPE   ETeamInviteResult = 10
	ETeamInviteResult_TEAM_INVITE_ERROR_INVITER_NOT_ADMIN              ETeamInviteResult = 11
	ETeamInviteResult_TEAM_INVITE_ERROR_INCORRECT_USER_RESPONDED       ETeamInviteResult = 12
	ETeamInviteResult_TEAM_INVITE_ERROR_UNSPECIFIED                    ETeamInviteResult = 13
)

// Enum value maps for ETeamInviteResult.
var (
	ETeamInviteResult_name = map[int32]string{
		0:  "TEAM_INVITE_SUCCESS",
		1:  "TEAM_INVITE_FAILURE_INVITE_REJECTED",
		2:  "TEAM_INVITE_FAILURE_INVITE_TIMEOUT",
		3:  "TEAM_INVITE_ERROR_TEAM_AT_MEMBER_LIMIT",
		4:  "TEAM_INVITE_ERROR_TEAM_LOCKED",
		5:  "TEAM_INVITE_ERROR_INVITEE_NOT_AVAILABLE",
		6:  "TEAM_INVITE_ERROR_INVITEE_BUSY",
		7:  "TEAM_INVITE_ERROR_INVITEE_ALREADY_MEMBER",
		8:  "TEAM_INVITE_ERROR_INVITEE_AT_TEAM_LIMIT",
		9:  "TEAM_INVITE_ERROR_INVITEE_INSUFFICIENT_PLAY_TIME",
		10: "TEAM_INVITE_ERROR_INVITER_INVALID_ACCOUNT_TYPE",
		11: "TEAM_INVITE_ERROR_INVITER_NOT_ADMIN",
		12: "TEAM_INVITE_ERROR_INCORRECT_USER_RESPONDED",
		13: "TEAM_INVITE_ERROR_UNSPECIFIED",
	}
	ETeamInviteResult_value = map[string]int32{
		"TEAM_INVITE_SUCCESS":                              0,
		"TEAM_INVITE_FAILURE_INVITE_REJECTED":              1,
		"TEAM_INVITE_FAILURE_INVITE_TIMEOUT":               2,
		"TEAM_INVITE_ERROR_TEAM_AT_MEMBER_LIMIT":           3,
		"TEAM_INVITE_ERROR_TEAM_LOCKED":                    4,
		"TEAM_INVITE_ERROR_INVITEE_NOT_AVAILABLE":          5,
		"TEAM_INVITE_ERROR_INVITEE_BUSY":                   6,
		"TEAM_INVITE_ERROR_INVITEE_ALREADY_MEMBER":         7,
		"TEAM_INVITE_ERROR_INVITEE_AT_TEAM_LIMIT":          8,
		"TEAM_INVITE_ERROR_INVITEE_INSUFFICIENT_PLAY_TIME": 9,
		"TEAM_INVITE_ERROR_INVITER_INVALID_ACCOUNT_TYPE":   10,
		"TEAM_INVITE_ERROR_INVITER_NOT_ADMIN":              11,
		"TEAM_INVITE_ERROR_INCORRECT_USER_RESPONDED":       12,
		"TEAM_INVITE_ERROR_UNSPECIFIED":                    13,
	}
)

func (x ETeamInviteResult) Enum() *ETeamInviteResult {
	p := new(ETeamInviteResult)
	*p = x
	return p
}

func (x ETeamInviteResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ETeamInviteResult) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_team_proto_enumTypes[0].Descriptor()
}

func (ETeamInviteResult) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_team_proto_enumTypes[0]
}

func (x ETeamInviteResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ETeamInviteResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ETeamInviteResult(num)
	return nil
}

// Deprecated: Use ETeamInviteResult.Descriptor instead.
func (ETeamInviteResult) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_team_proto_rawDescGZIP(), []int{0}
}

type CMsgDOTACreateTeamResponse_Result int32

const (
	CMsgDOTACreateTeamResponse_INVALID                        CMsgDOTACreateTeamResponse_Result = -1
	CMsgDOTACreateTeamResponse_SUCCESS                        CMsgDOTACreateTeamResponse_Result = 0
	CMsgDOTACreateTeamResponse_NAME_EMPTY                     CMsgDOTACreateTeamResponse_Result = 1
	CMsgDOTACreateTeamResponse_NAME_BAD_CHARACTERS            CMsgDOTACreateTeamResponse_Result = 2
	CMsgDOTACreateTeamResponse_NAME_TAKEN                     CMsgDOTACreateTeamResponse_Result = 3
	CMsgDOTACreateTeamResponse_NAME_TOO_LONG                  CMsgDOTACreateTeamResponse_Result = 4
	CMsgDOTACreateTeamResponse_TAG_EMPTY                      CMsgDOTACreateTeamResponse_Result = 5
	CMsgDOTACreateTeamResponse_TAG_BAD_CHARACTERS             CMsgDOTACreateTeamResponse_Result = 6
	CMsgDOTACreateTeamResponse_TAG_TAKEN                      CMsgDOTACreateTeamResponse_Result = 7
	CMsgDOTACreateTeamResponse_TAG_TOO_LONG                   CMsgDOTACreateTeamResponse_Result = 8
	CMsgDOTACreateTeamResponse_CREATOR_BUSY                   CMsgDOTACreateTeamResponse_Result = 9
	CMsgDOTACreateTeamResponse_UNSPECIFIED_ERROR              CMsgDOTACreateTeamResponse_Result = 10
	CMsgDOTACreateTeamResponse_CREATOR_TEAM_LIMIT_REACHED     CMsgDOTACreateTeamResponse_Result = 11
	CMsgDOTACreateTeamResponse_NO_LOGO                        CMsgDOTACreateTeamResponse_Result = 12
	CMsgDOTACreateTeamResponse_CREATOR_TEAM_CREATION_COOLDOWN CMsgDOTACreateTeamResponse_Result = 13
	CMsgDOTACreateTeamResponse_LOGO_UPLOAD_FAILED             CMsgDOTACreateTeamResponse_Result = 14
	CMsgDOTACreateTeamResponse_NAME_CHANGED_TOO_RECENTLY      CMsgDOTACreateTeamResponse_Result = 15
	CMsgDOTACreateTeamResponse_CREATOR_INSUFFICIENT_LEVEL     CMsgDOTACreateTeamResponse_Result = 16
	CMsgDOTACreateTeamResponse_INVALID_ACCOUNT_TYPE           CMsgDOTACreateTeamResponse_Result = 17
)

// Enum value maps for CMsgDOTACreateTeamResponse_Result.
var (
	CMsgDOTACreateTeamResponse_Result_name = map[int32]string{
		-1: "INVALID",
		0:  "SUCCESS",
		1:  "NAME_EMPTY",
		2:  "NAME_BAD_CHARACTERS",
		3:  "NAME_TAKEN",
		4:  "NAME_TOO_LONG",
		5:  "TAG_EMPTY",
		6:  "TAG_BAD_CHARACTERS",
		7:  "TAG_TAKEN",
		8:  "TAG_TOO_LONG",
		9:  "CREATOR_BUSY",
		10: "UNSPECIFIED_ERROR",
		11: "CREATOR_TEAM_LIMIT_REACHED",
		12: "NO_LOGO",
		13: "CREATOR_TEAM_CREATION_COOLDOWN",
		14: "LOGO_UPLOAD_FAILED",
		15: "NAME_CHANGED_TOO_RECENTLY",
		16: "CREATOR_INSUFFICIENT_LEVEL",
		17: "INVALID_ACCOUNT_TYPE",
	}
	CMsgDOTACreateTeamResponse_Result_value = map[string]int32{
		"INVALID":                        -1,
		"SUCCESS":                        0,
		"NAME_EMPTY":                     1,
		"NAME_BAD_CHARACTERS":            2,
		"NAME_TAKEN":                     3,
		"NAME_TOO_LONG":                  4,
		"TAG_EMPTY":                      5,
		"TAG_BAD_CHARACTERS":             6,
		"TAG_TAKEN":                      7,
		"TAG_TOO_LONG":                   8,
		"CREATOR_BUSY":                   9,
		"UNSPECIFIED_ERROR":              10,
		"CREATOR_TEAM_LIMIT_REACHED":     11,
		"NO_LOGO":                        12,
		"CREATOR_TEAM_CREATION_COOLDOWN": 13,
		"LOGO_UPLOAD_FAILED":             14,
		"NAME_CHANGED_TOO_RECENTLY":      15,
		"CREATOR_INSUFFICIENT_LEVEL":     16,
		"INVALID_ACCOUNT_TYPE":           17,
	}
)

func (x CMsgDOTACreateTeamResponse_Result) Enum() *CMsgDOTACreateTeamResponse_Result {
	p := new(CMsgDOTACreateTeamResponse_Result)
	*p = x
	return p
}

func (x CMsgDOTACreateTeamResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgDOTACreateTeamResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_team_proto_enumTypes[1].Descriptor()
}

func (CMsgDOTACreateTeamResponse_Result) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_team_proto_enumTypes[1]
}

func (x CMsgDOTACreateTeamResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgDOTACreateTeamResponse_Result) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgDOTACreateTeamResponse_Result(num)
	return nil
}

// Deprecated: Use CMsgDOTACreateTeamResponse_Result.Descriptor instead.
func (CMsgDOTACreateTeamResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_team_proto_rawDescGZIP(), []int{6, 0}
}

type CMsgDOTAEditTeamDetailsResponse_Result int32

const (
	CMsgDOTAEditTeamDetailsResponse_SUCCESS                      CMsgDOTAEditTeamDetailsResponse_Result = 0
	CMsgDOTAEditTeamDetailsResponse_FAILURE_INVALID_ACCOUNT_TYPE CMsgDOTAEditTeamDetailsResponse_Result = 1
	CMsgDOTAEditTeamDetailsResponse_FAILURE_NOT_MEMBER           CMsgDOTAEditTeamDetailsResponse_Result = 2
	CMsgDOTAEditTeamDetailsResponse_FAILURE_TEAM_LOCKED          CMsgDOTAEditTeamDetailsResponse_Result = 3
	CMsgDOTAEditTeamDetailsResponse_FAILURE_UNSPECIFIED_ERROR    CMsgDOTAEditTeamDetailsResponse_Result = 4
)

// Enum value maps for CMsgDOTAEditTeamDetailsResponse_Result.
var (
	CMsgDOTAEditTeamDetailsResponse_Result_name = map[int32]string{
		0: "SUCCESS",
		1: "FAILURE_INVALID_ACCOUNT_TYPE",
		2: "FAILURE_NOT_MEMBER",
		3: "FAILURE_TEAM_LOCKED",
		4: "FAILURE_UNSPECIFIED_ERROR",
	}
	CMsgDOTAEditTeamDetailsResponse_Result_value = map[string]int32{
		"SUCCESS":                      0,
		"FAILURE_INVALID_ACCOUNT_TYPE": 1,
		"FAILURE_NOT_MEMBER":           2,
		"FAILURE_TEAM_LOCKED":          3,
		"FAILURE_UNSPECIFIED_ERROR":    4,
	}
)

func (x CMsgDOTAEditTeamDetailsResponse_Result) Enum() *CMsgDOTAEditTeamDetailsResponse_Result {
	p := new(CMsgDOTAEditTeamDetailsResponse_Result)
	*p = x
	return p
}

func (x CMsgDOTAEditTeamDetailsResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgDOTAEditTeamDetailsResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_team_proto_enumTypes[2].Descriptor()
}

func (CMsgDOTAEditTeamDetailsResponse_Result) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_team_proto_enumTypes[2]
}

func (x CMsgDOTAEditTeamDetailsResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgDOTAEditTeamDetailsResponse_Result) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgDOTAEditTeamDetailsResponse_Result(num)
	return nil
}

// Deprecated: Use CMsgDOTAEditTeamDetailsResponse_Result.Descriptor instead.
func (CMsgDOTAEditTeamDetailsResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_team_proto_rawDescGZIP(), []int{8, 0}
}

type CMsgDOTAKickTeamMemberResponse_Result int32

const (
	CMsgDOTAKickTeamMemberResponse_SUCCESS                      CMsgDOTAKickTeamMemberResponse_Result = 0
	CMsgDOTAKickTeamMemberResponse_FAILURE_INVALID_ACCOUNT_TYPE CMsgDOTAKickTeamMemberResponse_Result = 1
	CMsgDOTAKickTeamMemberResponse_FAILURE_KICKER_NOT_ADMIN     CMsgDOTAKickTeamMemberResponse_Result = 2
	CMsgDOTAKickTeamMemberResponse_FAILURE_KICKEE_NOT_MEMBER    CMsgDOTAKickTeamMemberResponse_Result = 3
	CMsgDOTAKickTeamMemberResponse_FAILURE_TEAM_LOCKED          CMsgDOTAKickTeamMemberResponse_Result = 4
	CMsgDOTAKickTeamMemberResponse_FAILURE_UNSPECIFIED_ERROR    CMsgDOTAKickTeamMemberResponse_Result = 5
)

// Enum value maps for CMsgDOTAKickTeamMemberResponse_Result.
var (
	CMsgDOTAKickTeamMemberResponse_Result_name = map[int32]string{
		0: "SUCCESS",
		1: "FAILURE_INVALID_ACCOUNT_TYPE",
		2: "FAILURE_KICKER_NOT_ADMIN",
		3: "FAILURE_KICKEE_NOT_MEMBER",
		4: "FAILURE_TEAM_LOCKED",
		5: "FAILURE_UNSPECIFIED_ERROR",
	}
	CMsgDOTAKickTeamMemberResponse_Result_value = map[string]int32{
		"SUCCESS":                      0,
		"FAILURE_INVALID_ACCOUNT_TYPE": 1,
		"FAILURE_KICKER_NOT_ADMIN":     2,
		"FAILURE_KICKEE_NOT_MEMBER":    3,
		"FAILURE_TEAM_LOCKED":          4,
		"FAILURE_UNSPECIFIED_ERROR":    5,
	}
)

func (x CMsgDOTAKickTeamMemberResponse_Result) Enum() *CMsgDOTAKickTeamMemberResponse_Result {
	p := new(CMsgDOTAKickTeamMemberResponse_Result)
	*p = x
	return p
}

func (x CMsgDOTAKickTeamMemberResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgDOTAKickTeamMemberResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_team_proto_enumTypes[3].Descriptor()
}

func (CMsgDOTAKickTeamMemberResponse_Result) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_team_proto_enumTypes[3]
}

func (x CMsgDOTAKickTeamMemberResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgDOTAKickTeamMemberResponse_Result) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgDOTAKickTeamMemberResponse_Result(num)
	return nil
}

// Deprecated: Use CMsgDOTAKickTeamMemberResponse_Result.Descriptor instead.
func (CMsgDOTAKickTeamMemberResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_team_proto_rawDescGZIP(), []int{16, 0}
}

type CMsgDOTATransferTeamAdminResponse_Result int32

const (
	CMsgDOTATransferTeamAdminResponse_SUCCESS                      CMsgDOTATransferTeamAdminResponse_Result = 0
	CMsgDOTATransferTeamAdminResponse_FAILURE_INVALID_ACCOUNT_TYPE CMsgDOTATransferTeamAdminResponse_Result = 1
	CMsgDOTATransferTeamAdminResponse_FAILURE_NOT_ADMIN            CMsgDOTATransferTeamAdminResponse_Result = 2
	CMsgDOTATransferTeamAdminResponse_FAILURE_SAME_ACCOUNT         CMsgDOTATransferTeamAdminResponse_Result = 3
	CMsgDOTATransferTeamAdminResponse_FAILURE_NOT_MEMBER           CMsgDOTATransferTeamAdminResponse_Result = 4
	CMsgDOTATransferTeamAdminResponse_FAILURE_UNSPECIFIED_ERROR    CMsgDOTATransferTeamAdminResponse_Result = 5
)

// Enum value maps for CMsgDOTATransferTeamAdminResponse_Result.
var (
	CMsgDOTATransferTeamAdminResponse_Result_name = map[int32]string{
		0: "SUCCESS",
		1: "FAILURE_INVALID_ACCOUNT_TYPE",
		2: "FAILURE_NOT_ADMIN",
		3: "FAILURE_SAME_ACCOUNT",
		4: "FAILURE_NOT_MEMBER",
		5: "FAILURE_UNSPECIFIED_ERROR",
	}
	CMsgDOTATransferTeamAdminResponse_Result_value = map[string]int32{
		"SUCCESS":                      0,
		"FAILURE_INVALID_ACCOUNT_TYPE": 1,
		"FAILURE_NOT_ADMIN":            2,
		"FAILURE_SAME_ACCOUNT":         3,
		"FAILURE_NOT_MEMBER":           4,
		"FAILURE_UNSPECIFIED_ERROR":    5,
	}
)

func (x CMsgDOTATransferTeamAdminResponse_Result) Enum() *CMsgDOTATransferTeamAdminResponse_Result {
	p := new(CMsgDOTATransferTeamAdminResponse_Result)
	*p = x
	return p
}

func (x CMsgDOTATransferTeamAdminResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgDOTATransferTeamAdminResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_team_proto_enumTypes[4].Descriptor()
}

func (CMsgDOTATransferTeamAdminResponse_Result) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_team_proto_enumTypes[4]
}

func (x CMsgDOTATransferTeamAdminResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgDOTATransferTeamAdminResponse_Result) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgDOTATransferTeamAdminResponse_Result(num)
	return nil
}

// Deprecated: Use CMsgDOTATransferTeamAdminResponse_Result.Descriptor instead.
func (CMsgDOTATransferTeamAdminResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_team_proto_rawDescGZIP(), []int{18, 0}
}

type CMsgDOTALeaveTeamResponse_Result int32

const (
	CMsgDOTALeaveTeamResponse_SUCCESS                   CMsgDOTALeaveTeamResponse_Result = 0
	CMsgDOTALeaveTeamResponse_FAILURE_NOT_MEMBER        CMsgDOTALeaveTeamResponse_Result = 1
	CMsgDOTALeaveTeamResponse_FAILURE_TEAM_LOCKED       CMsgDOTALeaveTeamResponse_Result = 2
	CMsgDOTALeaveTeamResponse_FAILURE_UNSPECIFIED_ERROR CMsgDOTALeaveTeamResponse_Result = 3
)

// Enum value maps for CMsgDOTALeaveTeamResponse_Result.
var (
	CMsgDOTALeaveTeamResponse_Result_name = map[int32]string{
		0: "SUCCESS",
		1: "FAILURE_NOT_MEMBER",
		2: "FAILURE_TEAM_LOCKED",
		3: "FAILURE_UNSPECIFIED_ERROR",
	}
	CMsgDOTALeaveTeamResponse_Result_value = map[string]int32{
		"SUCCESS":                   0,
		"FAILURE_NOT_MEMBER":        1,
		"FAILURE_TEAM_LOCKED":       2,
		"FAILURE_UNSPECIFIED_ERROR": 3,
	}
)

func (x CMsgDOTALeaveTeamResponse_Result) Enum() *CMsgDOTALeaveTeamResponse_Result {
	p := new(CMsgDOTALeaveTeamResponse_Result)
	*p = x
	return p
}

func (x CMsgDOTALeaveTeamResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgDOTALeaveTeamResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_team_proto_enumTypes[5].Descriptor()
}

func (CMsgDOTALeaveTeamResponse_Result) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_team_proto_enumTypes[5]
}

func (x CMsgDOTALeaveTeamResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgDOTALeaveTeamResponse_Result) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgDOTALeaveTeamResponse_Result(num)
	return nil
}

// Deprecated: Use CMsgDOTALeaveTeamResponse_Result.Descriptor instead.
func (CMsgDOTALeaveTeamResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_team_proto_rawDescGZIP(), []int{20, 0}
}

type CMsgDOTATeamInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Members                    []*CMsgDOTATeamInfo_Member      `protobuf:"bytes,1,rep,name=members" json:"members,omitempty"`
	TeamId                     *uint32                         `protobuf:"varint,2,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	Name                       *string                         `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Tag                        *string                         `protobuf:"bytes,4,opt,name=tag" json:"tag,omitempty"`
	TimeCreated                *uint32                         `protobuf:"varint,5,opt,name=time_created,json=timeCreated" json:"time_created,omitempty"`
	Pro                        *bool                           `protobuf:"varint,6,opt,name=pro" json:"pro,omitempty"`
	PickupTeam                 *bool                           `protobuf:"varint,8,opt,name=pickup_team,json=pickupTeam" json:"pickup_team,omitempty"`
	UgcLogo                    *uint64                         `protobuf:"varint,9,opt,name=ugc_logo,json=ugcLogo" json:"ugc_logo,omitempty"`
	UgcBaseLogo                *uint64                         `protobuf:"varint,10,opt,name=ugc_base_logo,json=ugcBaseLogo" json:"ugc_base_logo,omitempty"`
	UgcBannerLogo              *uint64                         `protobuf:"varint,11,opt,name=ugc_banner_logo,json=ugcBannerLogo" json:"ugc_banner_logo,omitempty"`
	UgcSponsorLogo             *uint64                         `protobuf:"varint,12,opt,name=ugc_sponsor_logo,json=ugcSponsorLogo" json:"ugc_sponsor_logo,omitempty"`
	CountryCode                *string                         `protobuf:"bytes,13,opt,name=country_code,json=countryCode" json:"country_code,omitempty"`
	Url                        *string                         `protobuf:"bytes,14,opt,name=url" json:"url,omitempty"`
	Wins                       *uint32                         `protobuf:"varint,15,opt,name=wins" json:"wins,omitempty"`
	Losses                     *uint32                         `protobuf:"varint,16,opt,name=losses" json:"losses,omitempty"`
	GamesPlayedTotal           *uint32                         `protobuf:"varint,19,opt,name=games_played_total,json=gamesPlayedTotal" json:"games_played_total,omitempty"`
	GamesPlayedMatchmaking     *uint32                         `protobuf:"varint,20,opt,name=games_played_matchmaking,json=gamesPlayedMatchmaking" json:"games_played_matchmaking,omitempty"`
	UrlLogo                    *string                         `protobuf:"bytes,24,opt,name=url_logo,json=urlLogo" json:"url_logo,omitempty"`
	RegisteredMemberAccountIds []uint32                        `protobuf:"varint,30,rep,name=registered_member_account_ids,json=registeredMemberAccountIds" json:"registered_member_account_ids,omitempty"`
	CoachAccountId             *uint32                         `protobuf:"varint,36,opt,name=coach_account_id,json=coachAccountId" json:"coach_account_id,omitempty"`
	AuditEntries               []*CMsgDOTATeamInfo_AuditEntry  `protobuf:"bytes,31,rep,name=audit_entries,json=auditEntries" json:"audit_entries,omitempty"`
	Region                     *ELeagueRegion                  `protobuf:"varint,29,opt,name=region,enum=dota.ELeagueRegion" json:"region,omitempty"`
	Abbreviation               *string                         `protobuf:"bytes,32,opt,name=abbreviation" json:"abbreviation,omitempty"`
	MemberStats                []*CMsgDOTATeamInfo_MemberStats `protobuf:"bytes,33,rep,name=member_stats,json=memberStats" json:"member_stats,omitempty"`
	TeamStats                  *CMsgDOTATeamInfo_TeamStats     `protobuf:"bytes,34,opt,name=team_stats,json=teamStats" json:"team_stats,omitempty"`
	DpcResults                 []*CMsgDOTATeamInfo_DPCResult   `protobuf:"bytes,35,rep,name=dpc_results,json=dpcResults" json:"dpc_results,omitempty"`
	ColorPrimary               *string                         `protobuf:"bytes,37,opt,name=color_primary,json=colorPrimary" json:"color_primary,omitempty"`
	ColorSecondary             *string                         `protobuf:"bytes,38,opt,name=color_secondary,json=colorSecondary" json:"color_secondary,omitempty"`
	TeamCaptain                *uint32                         `protobuf:"varint,39,opt,name=team_captain,json=teamCaptain" json:"team_captain,omitempty"`
}

func (x *CMsgDOTATeamInfo) Reset() {
	*x = CMsgDOTATeamInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_team_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTATeamInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTATeamInfo) ProtoMessage() {}

func (x *CMsgDOTATeamInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_team_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTATeamInfo.ProtoReflect.Descriptor instead.
func (*CMsgDOTATeamInfo) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_team_proto_rawDescGZIP(), []int{0}
}

func (x *CMsgDOTATeamInfo) GetMembers() []*CMsgDOTATeamInfo_Member {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *CMsgDOTATeamInfo) GetTeamId() uint32 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

func (x *CMsgDOTATeamInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CMsgDOTATeamInfo) GetTag() string {
	if x != nil && x.Tag != nil {
		return *x.Tag
	}
	return ""
}

func (x *CMsgDOTATeamInfo) GetTimeCreated() uint32 {
	if x != nil && x.TimeCreated != nil {
		return *x.TimeCreated
	}
	return 0
}

func (x *CMsgDOTATeamInfo) GetPro() bool {
	if x != nil && x.Pro != nil {
		return *x.Pro
	}
	return false
}

func (x *CMsgDOTATeamInfo) GetPickupTeam() bool {
	if x != nil && x.PickupTeam != nil {
		return *x.PickupTeam
	}
	return false
}

func (x *CMsgDOTATeamInfo) GetUgcLogo() uint64 {
	if x != nil && x.UgcLogo != nil {
		return *x.UgcLogo
	}
	return 0
}

func (x *CMsgDOTATeamInfo) GetUgcBaseLogo() uint64 {
	if x != nil && x.UgcBaseLogo != nil {
		return *x.UgcBaseLogo
	}
	return 0
}

func (x *CMsgDOTATeamInfo) GetUgcBannerLogo() uint64 {
	if x != nil && x.UgcBannerLogo != nil {
		return *x.UgcBannerLogo
	}
	return 0
}

func (x *CMsgDOTATeamInfo) GetUgcSponsorLogo() uint64 {
	if x != nil && x.UgcSponsorLogo != nil {
		return *x.UgcSponsorLogo
	}
	return 0
}

func (x *CMsgDOTATeamInfo) GetCountryCode() string {
	if x != nil && x.CountryCode != nil {
		return *x.CountryCode
	}
	return ""
}

func (x *CMsgDOTATeamInfo) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *CMsgDOTATeamInfo) GetWins() uint32 {
	if x != nil && x.Wins != nil {
		return *x.Wins
	}
	return 0
}

func (x *CMsgDOTATeamInfo) GetLosses() uint32 {
	if x != nil && x.Losses != nil {
		return *x.Losses
	}
	return 0
}

func (x *CMsgDOTATeamInfo) GetGamesPlayedTotal() uint32 {
	if x != nil && x.GamesPlayedTotal != nil {
		return *x.GamesPlayedTotal
	}
	return 0
}

func (x *CMsgDOTATeamInfo) GetGamesPlayedMatchmaking() uint32 {
	if x != nil && x.GamesPlayedMatchmaking != nil {
		return *x.GamesPlayedMatchmaking
	}
	return 0
}

func (x *CMsgDOTATeamInfo) GetUrlLogo() string {
	if x != nil && x.UrlLogo != nil {
		return *x.UrlLogo
	}
	return ""
}

func (x *CMsgDOTATeamInfo) GetRegisteredMemberAccountIds() []uint32 {
	if x != nil {
		return x.RegisteredMemberAccountIds
	}
	return nil
}

func (x *CMsgDOTATeamInfo) GetCoachAccountId() uint32 {
	if x != nil && x.CoachAccountId != nil {
		return *x.CoachAccountId
	}
	return 0
}

func (x *CMsgDOTATeamInfo) GetAuditEntries() []*CMsgDOTATeamInfo_AuditEntry {
	if x != nil {
		return x.AuditEntries
	}
	return nil
}

func (x *CMsgDOTATeamInfo) GetRegion() ELeagueRegion {
	if x != nil && x.Region != nil {
		return *x.Region
	}
	return ELeagueRegion_LEAGUE_REGION_UNSET
}

func (x *CMsgDOTATeamInfo) GetAbbreviation() string {
	if x != nil && x.Abbreviation != nil {
		return *x.Abbreviation
	}
	return ""
}

func (x *CMsgDOTATeamInfo) GetMemberStats() []*CMsgDOTATeamInfo_MemberStats {
	if x != nil {
		return x.MemberStats
	}
	return nil
}

func (x *CMsgDOTATeamInfo) GetTeamStats() *CMsgDOTATeamInfo_TeamStats {
	if x != nil {
		return x.TeamStats
	}
	return nil
}

func (x *CMsgDOTATeamInfo) GetDpcResults() []*CMsgDOTATeamInfo_DPCResult {
	if x != nil {
		return x.DpcResults
	}
	return nil
}

func (x *CMsgDOTATeamInfo) GetColorPrimary() string {
	if x != nil && x.ColorPrimary != nil {
		return *x.ColorPrimary
	}
	return ""
}

func (x *CMsgDOTATeamInfo) GetColorSecondary() string {
	if x != nil && x.ColorSecondary != nil {
		return *x.ColorSecondary
	}
	return ""
}

func (x *CMsgDOTATeamInfo) GetTeamCaptain() uint32 {
	if x != nil && x.TeamCaptain != nil {
		return *x.TeamCaptain
	}
	return 0
}

type CMsgDOTATeamsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeagueId *uint32             `protobuf:"varint,1,opt,name=league_id,json=leagueId" json:"league_id,omitempty"`
	Teams    []*CMsgDOTATeamInfo `protobuf:"bytes,2,rep,name=teams" json:"teams,omitempty"`
}

func (x *CMsgDOTATeamsInfo) Reset() {
	*x = CMsgDOTATeamsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_team_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTATeamsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTATeamsInfo) ProtoMessage() {}

func (x *CMsgDOTATeamsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_team_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTATeamsInfo.ProtoReflect.Descriptor instead.
func (*CMsgDOTATeamsInfo) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_team_proto_rawDescGZIP(), []int{1}
}

func (x *CMsgDOTATeamsInfo) GetLeagueId() uint32 {
	if x != nil && x.LeagueId != nil {
		return *x.LeagueId
	}
	return 0
}

func (x *CMsgDOTATeamsInfo) GetTeams() []*CMsgDOTATeamInfo {
	if x != nil {
		return x.Teams
	}
	return nil
}

type CMsgDOTATeamInfoList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Teams []*CMsgDOTATeamInfo `protobuf:"bytes,1,rep,name=teams" json:"teams,omitempty"`
}

func (x *CMsgDOTATeamInfoList) Reset() {
	*x = CMsgDOTATeamInfoList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_team_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTATeamInfoList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTATeamInfoList) ProtoMessage() {}

func (x *CMsgDOTATeamInfoList) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_team_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTATeamInfoList.ProtoReflect.Descriptor instead.
func (*CMsgDOTATeamInfoList) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_team_proto_rawDescGZIP(), []int{2}
}

func (x *CMsgDOTATeamInfoList) GetTeams() []*CMsgDOTATeamInfo {
	if x != nil {
		return x.Teams
	}
	return nil
}

type CMsgDOTATeamInfoCache struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CacheTimestamp *uint32               `protobuf:"varint,1,opt,name=cache_timestamp,json=cacheTimestamp" json:"cache_timestamp,omitempty"`
	TeamList       *CMsgDOTATeamInfoList `protobuf:"bytes,2,opt,name=team_list,json=teamList" json:"team_list,omitempty"`
}

func (x *CMsgDOTATeamInfoCache) Reset() {
	*x = CMsgDOTATeamInfoCache{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_team_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTATeamInfoCache) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTATeamInfoCache) ProtoMessage() {}

func (x *CMsgDOTATeamInfoCache) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_team_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTATeamInfoCache.ProtoReflect.Descriptor instead.
func (*CMsgDOTATeamInfoCache) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_team_proto_rawDescGZIP(), []int{3}
}

func (x *CMsgDOTATeamInfoCache) GetCacheTimestamp() uint32 {
	if x != nil && x.CacheTimestamp != nil {
		return *x.CacheTimestamp
	}
	return 0
}

func (x *CMsgDOTATeamInfoCache) GetTeamList() *CMsgDOTATeamInfoList {
	if x != nil {
		return x.TeamList
	}
	return nil
}

type CMsgDOTAMyTeamInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgDOTAMyTeamInfoRequest) Reset() {
	*x = CMsgDOTAMyTeamInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_team_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAMyTeamInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAMyTeamInfoRequest) ProtoMessage() {}

func (x *CMsgDOTAMyTeamInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_team_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAMyTeamInfoRequest.ProtoReflect.Descriptor instead.
func (*CMsgDOTAMyTeamInfoRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_team_proto_rawDescGZIP(), []int{4}
}

type CMsgDOTACreateTeam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Tag          *string `protobuf:"bytes,2,opt,name=tag" json:"tag,omitempty"`
	Logo         *uint64 `protobuf:"varint,3,opt,name=logo" json:"logo,omitempty"`
	BaseLogo     *uint64 `protobuf:"varint,4,opt,name=base_logo,json=baseLogo" json:"base_logo,omitempty"`
	BannerLogo   *uint64 `protobuf:"varint,5,opt,name=banner_logo,json=bannerLogo" json:"banner_logo,omitempty"`
	SponsorLogo  *uint64 `protobuf:"varint,6,opt,name=sponsor_logo,json=sponsorLogo" json:"sponsor_logo,omitempty"`
	CountryCode  *string `protobuf:"bytes,7,opt,name=country_code,json=countryCode" json:"country_code,omitempty"`
	Url          *string `protobuf:"bytes,8,opt,name=url" json:"url,omitempty"`
	PickupTeam   *bool   `protobuf:"varint,9,opt,name=pickup_team,json=pickupTeam" json:"pickup_team,omitempty"`
	Abbreviation *string `protobuf:"bytes,10,opt,name=abbreviation" json:"abbreviation,omitempty"`
}

func (x *CMsgDOTACreateTeam) Reset() {
	*x = CMsgDOTACreateTeam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_team_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTACreateTeam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTACreateTeam) ProtoMessage() {}

func (x *CMsgDOTACreateTeam) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_team_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTACreateTeam.ProtoReflect.Descriptor instead.
func (*CMsgDOTACreateTeam) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_team_proto_rawDescGZIP(), []int{5}
}

func (x *CMsgDOTACreateTeam) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CMsgDOTACreateTeam) GetTag() string {
	if x != nil && x.Tag != nil {
		return *x.Tag
	}
	return ""
}

func (x *CMsgDOTACreateTeam) GetLogo() uint64 {
	if x != nil && x.Logo != nil {
		return *x.Logo
	}
	return 0
}

func (x *CMsgDOTACreateTeam) GetBaseLogo() uint64 {
	if x != nil && x.BaseLogo != nil {
		return *x.BaseLogo
	}
	return 0
}

func (x *CMsgDOTACreateTeam) GetBannerLogo() uint64 {
	if x != nil && x.BannerLogo != nil {
		return *x.BannerLogo
	}
	return 0
}

func (x *CMsgDOTACreateTeam) GetSponsorLogo() uint64 {
	if x != nil && x.SponsorLogo != nil {
		return *x.SponsorLogo
	}
	return 0
}

func (x *CMsgDOTACreateTeam) GetCountryCode() string {
	if x != nil && x.CountryCode != nil {
		return *x.CountryCode
	}
	return ""
}

func (x *CMsgDOTACreateTeam) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *CMsgDOTACreateTeam) GetPickupTeam() bool {
	if x != nil && x.PickupTeam != nil {
		return *x.PickupTeam
	}
	return false
}

func (x *CMsgDOTACreateTeam) GetAbbreviation() string {
	if x != nil && x.Abbreviation != nil {
		return *x.Abbreviation
	}
	return ""
}

type CMsgDOTACreateTeamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *CMsgDOTACreateTeamResponse_Result `protobuf:"varint,1,opt,name=result,enum=dota.CMsgDOTACreateTeamResponse_Result" json:"result,omitempty"`
	TeamId *uint32                            `protobuf:"varint,2,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
}

func (x *CMsgDOTACreateTeamResponse) Reset() {
	*x = CMsgDOTACreateTeamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_team_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTACreateTeamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTACreateTeamResponse) ProtoMessage() {}

func (x *CMsgDOTACreateTeamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_team_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTACreateTeamResponse.ProtoReflect.Descriptor instead.
func (*CMsgDOTACreateTeamResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_team_proto_rawDescGZIP(), []int{6}
}

func (x *CMsgDOTACreateTeamResponse) GetResult() CMsgDOTACreateTeamResponse_Result {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return CMsgDOTACreateTeamResponse_INVALID
}

func (x *CMsgDOTACreateTeamResponse) GetTeamId() uint32 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

type CMsgDOTAEditTeamDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamId       *uint32 `protobuf:"varint,1,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	Name         *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Tag          *string `protobuf:"bytes,3,opt,name=tag" json:"tag,omitempty"`
	Logo         *uint64 `protobuf:"varint,4,opt,name=logo" json:"logo,omitempty"`
	BaseLogo     *uint64 `protobuf:"varint,5,opt,name=base_logo,json=baseLogo" json:"base_logo,omitempty"`
	BannerLogo   *uint64 `protobuf:"varint,6,opt,name=banner_logo,json=bannerLogo" json:"banner_logo,omitempty"`
	SponsorLogo  *uint64 `protobuf:"varint,7,opt,name=sponsor_logo,json=sponsorLogo" json:"sponsor_logo,omitempty"`
	CountryCode  *string `protobuf:"bytes,8,opt,name=country_code,json=countryCode" json:"country_code,omitempty"`
	Url          *string `protobuf:"bytes,9,opt,name=url" json:"url,omitempty"`
	InUseByParty *bool   `protobuf:"varint,10,opt,name=in_use_by_party,json=inUseByParty" json:"in_use_by_party,omitempty"`
	Abbreviation *string `protobuf:"bytes,11,opt,name=abbreviation" json:"abbreviation,omitempty"`
}

func (x *CMsgDOTAEditTeamDetails) Reset() {
	*x = CMsgDOTAEditTeamDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_team_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAEditTeamDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAEditTeamDetails) ProtoMessage() {}

func (x *CMsgDOTAEditTeamDetails) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_team_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAEditTeamDetails.ProtoReflect.Descriptor instead.
func (*CMsgDOTAEditTeamDetails) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_team_proto_rawDescGZIP(), []int{7}
}

func (x *CMsgDOTAEditTeamDetails) GetTeamId() uint32 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

func (x *CMsgDOTAEditTeamDetails) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CMsgDOTAEditTeamDetails) GetTag() string {
	if x != nil && x.Tag != nil {
		return *x.Tag
	}
	return ""
}

func (x *CMsgDOTAEditTeamDetails) GetLogo() uint64 {
	if x != nil && x.Logo != nil {
		return *x.Logo
	}
	return 0
}

func (x *CMsgDOTAEditTeamDetails) GetBaseLogo() uint64 {
	if x != nil && x.BaseLogo != nil {
		return *x.BaseLogo
	}
	return 0
}

func (x *CMsgDOTAEditTeamDetails) GetBannerLogo() uint64 {
	if x != nil && x.BannerLogo != nil {
		return *x.BannerLogo
	}
	return 0
}

func (x *CMsgDOTAEditTeamDetails) GetSponsorLogo() uint64 {
	if x != nil && x.SponsorLogo != nil {
		return *x.SponsorLogo
	}
	return 0
}

func (x *CMsgDOTAEditTeamDetails) GetCountryCode() string {
	if x != nil && x.CountryCode != nil {
		return *x.CountryCode
	}
	return ""
}

func (x *CMsgDOTAEditTeamDetails) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *CMsgDOTAEditTeamDetails) GetInUseByParty() bool {
	if x != nil && x.InUseByParty != nil {
		return *x.InUseByParty
	}
	return false
}

func (x *CMsgDOTAEditTeamDetails) GetAbbreviation() string {
	if x != nil && x.Abbreviation != nil {
		return *x.Abbreviation
	}
	return ""
}

type CMsgDOTAEditTeamDetailsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *CMsgDOTAEditTeamDetailsResponse_Result `protobuf:"varint,1,opt,name=result,enum=dota.CMsgDOTAEditTeamDetailsResponse_Result" json:"result,omitempty"`
}

func (x *CMsgDOTAEditTeamDetailsResponse) Reset() {
	*x = CMsgDOTAEditTeamDetailsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_team_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAEditTeamDetailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAEditTeamDetailsResponse) ProtoMessage() {}

func (x *CMsgDOTAEditTeamDetailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_team_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAEditTeamDetailsResponse.ProtoReflect.Descriptor instead.
func (*CMsgDOTAEditTeamDetailsResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_team_proto_rawDescGZIP(), []int{8}
}

func (x *CMsgDOTAEditTeamDetailsResponse) GetResult() CMsgDOTAEditTeamDetailsResponse_Result {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return CMsgDOTAEditTeamDetailsResponse_SUCCESS
}

type CMsgDOTATeamInvite_InviterToGC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	TeamId    *uint32 `protobuf:"varint,2,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
}

func (x *CMsgDOTATeamInvite_InviterToGC) Reset() {
	*x = CMsgDOTATeamInvite_InviterToGC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_team_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTATeamInvite_InviterToGC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTATeamInvite_InviterToGC) ProtoMessage() {}

func (x *CMsgDOTATeamInvite_InviterToGC) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_team_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTATeamInvite_InviterToGC.ProtoReflect.Descriptor instead.
func (*CMsgDOTATeamInvite_InviterToGC) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_team_proto_rawDescGZIP(), []int{9}
}

func (x *CMsgDOTATeamInvite_InviterToGC) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgDOTATeamInvite_InviterToGC) GetTeamId() uint32 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

type CMsgDOTATeamInvite_GCImmediateResponseToInviter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result           *ETeamInviteResult `protobuf:"varint,1,opt,name=result,enum=dota.ETeamInviteResult" json:"result,omitempty"`
	InviteeName      *string            `protobuf:"bytes,2,opt,name=invitee_name,json=inviteeName" json:"invitee_name,omitempty"`
	RequiredPlayTime *uint32            `protobuf:"varint,3,opt,name=required_play_time,json=requiredPlayTime" json:"required_play_time,omitempty"`
}

func (x *CMsgDOTATeamInvite_GCImmediateResponseToInviter) Reset() {
	*x = CMsgDOTATeamInvite_GCImmediateResponseToInviter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_team_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTATeamInvite_GCImmediateResponseToInviter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTATeamInvite_GCImmediateResponseToInviter) ProtoMessage() {}

func (x *CMsgDOTATeamInvite_GCImmediateResponseToInviter) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_team_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTATeamInvite_GCImmediateResponseToInviter.ProtoReflect.Descriptor instead.
func (*CMsgDOTATeamInvite_GCImmediateResponseToInviter) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_team_proto_rawDescGZIP(), []int{10}
}

func (x *CMsgDOTATeamInvite_GCImmediateResponseToInviter) GetResult() ETeamInviteResult {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return ETeamInviteResult_TEAM_INVITE_SUCCESS
}

func (x *CMsgDOTATeamInvite_GCImmediateResponseToInviter) GetInviteeName() string {
	if x != nil && x.InviteeName != nil {
		return *x.InviteeName
	}
	return ""
}

func (x *CMsgDOTATeamInvite_GCImmediateResponseToInviter) GetRequiredPlayTime() uint32 {
	if x != nil && x.RequiredPlayTime != nil {
		return *x.RequiredPlayTime
	}
	return 0
}

type CMsgDOTATeamInvite_GCRequestToInvitee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InviterAccountId *uint32 `protobuf:"varint,1,opt,name=inviter_account_id,json=inviterAccountId" json:"inviter_account_id,omitempty"`
	TeamName         *string `protobuf:"bytes,2,opt,name=team_name,json=teamName" json:"team_name,omitempty"`
	TeamTag          *string `protobuf:"bytes,3,opt,name=team_tag,json=teamTag" json:"team_tag,omitempty"`
	Logo             *uint64 `protobuf:"varint,4,opt,name=logo" json:"logo,omitempty"`
}

func (x *CMsgDOTATeamInvite_GCRequestToInvitee) Reset() {
	*x = CMsgDOTATeamInvite_GCRequestToInvitee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_team_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTATeamInvite_GCRequestToInvitee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTATeamInvite_GCRequestToInvitee) ProtoMessage() {}

func (x *CMsgDOTATeamInvite_GCRequestToInvitee) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_team_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTATeamInvite_GCRequestToInvitee.ProtoReflect.Descriptor instead.
func (*CMsgDOTATeamInvite_GCRequestToInvitee) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_team_proto_rawDescGZIP(), []int{11}
}

func (x *CMsgDOTATeamInvite_GCRequestToInvitee) GetInviterAccountId() uint32 {
	if x != nil && x.InviterAccountId != nil {
		return *x.InviterAccountId
	}
	return 0
}

func (x *CMsgDOTATeamInvite_GCRequestToInvitee) GetTeamName() string {
	if x != nil && x.TeamName != nil {
		return *x.TeamName
	}
	return ""
}

func (x *CMsgDOTATeamInvite_GCRequestToInvitee) GetTeamTag() string {
	if x != nil && x.TeamTag != nil {
		return *x.TeamTag
	}
	return ""
}

func (x *CMsgDOTATeamInvite_GCRequestToInvitee) GetLogo() uint64 {
	if x != nil && x.Logo != nil {
		return *x.Logo
	}
	return 0
}

type CMsgDOTATeamInvite_InviteeResponseToGC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *ETeamInviteResult `protobuf:"varint,1,opt,name=result,enum=dota.ETeamInviteResult" json:"result,omitempty"`
}

func (x *CMsgDOTATeamInvite_InviteeResponseToGC) Reset() {
	*x = CMsgDOTATeamInvite_InviteeResponseToGC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_team_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTATeamInvite_InviteeResponseToGC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTATeamInvite_InviteeResponseToGC) ProtoMessage() {}

func (x *CMsgDOTATeamInvite_InviteeResponseToGC) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_team_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTATeamInvite_InviteeResponseToGC.ProtoReflect.Descriptor instead.
func (*CMsgDOTATeamInvite_InviteeResponseToGC) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_team_proto_rawDescGZIP(), []int{12}
}

func (x *CMsgDOTATeamInvite_InviteeResponseToGC) GetResult() ETeamInviteResult {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return ETeamInviteResult_TEAM_INVITE_SUCCESS
}

type CMsgDOTATeamInvite_GCResponseToInviter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result      *ETeamInviteResult `protobuf:"varint,1,opt,name=result,enum=dota.ETeamInviteResult" json:"result,omitempty"`
	InviteeName *string            `protobuf:"bytes,2,opt,name=invitee_name,json=inviteeName" json:"invitee_name,omitempty"`
}

func (x *CMsgDOTATeamInvite_GCResponseToInviter) Reset() {
	*x = CMsgDOTATeamInvite_GCResponseToInviter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_team_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTATeamInvite_GCResponseToInviter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTATeamInvite_GCResponseToInviter) ProtoMessage() {}

func (x *CMsgDOTATeamInvite_GCResponseToInviter) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_team_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTATeamInvite_GCResponseToInviter.ProtoReflect.Descriptor instead.
func (*CMsgDOTATeamInvite_GCResponseToInviter) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_team_proto_rawDescGZIP(), []int{13}
}

func (x *CMsgDOTATeamInvite_GCResponseToInviter) GetResult() ETeamInviteResult {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return ETeamInviteResult_TEAM_INVITE_SUCCESS
}

func (x *CMsgDOTATeamInvite_GCResponseToInviter) GetInviteeName() string {
	if x != nil && x.InviteeName != nil {
		return *x.InviteeName
	}
	return ""
}

type CMsgDOTATeamInvite_GCResponseToInvitee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result   *ETeamInviteResult `protobuf:"varint,1,opt,name=result,enum=dota.ETeamInviteResult" json:"result,omitempty"`
	TeamName *string            `protobuf:"bytes,2,opt,name=team_name,json=teamName" json:"team_name,omitempty"`
}

func (x *CMsgDOTATeamInvite_GCResponseToInvitee) Reset() {
	*x = CMsgDOTATeamInvite_GCResponseToInvitee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_team_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTATeamInvite_GCResponseToInvitee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTATeamInvite_GCResponseToInvitee) ProtoMessage() {}

func (x *CMsgDOTATeamInvite_GCResponseToInvitee) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_team_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTATeamInvite_GCResponseToInvitee.ProtoReflect.Descriptor instead.
func (*CMsgDOTATeamInvite_GCResponseToInvitee) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_team_proto_rawDescGZIP(), []int{14}
}

func (x *CMsgDOTATeamInvite_GCResponseToInvitee) GetResult() ETeamInviteResult {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return ETeamInviteResult_TEAM_INVITE_SUCCESS
}

func (x *CMsgDOTATeamInvite_GCResponseToInvitee) GetTeamName() string {
	if x != nil && x.TeamName != nil {
		return *x.TeamName
	}
	return ""
}

type CMsgDOTAKickTeamMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	TeamId    *uint32 `protobuf:"varint,2,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
}

func (x *CMsgDOTAKickTeamMember) Reset() {
	*x = CMsgDOTAKickTeamMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_team_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAKickTeamMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAKickTeamMember) ProtoMessage() {}

func (x *CMsgDOTAKickTeamMember) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_team_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAKickTeamMember.ProtoReflect.Descriptor instead.
func (*CMsgDOTAKickTeamMember) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_team_proto_rawDescGZIP(), []int{15}
}

func (x *CMsgDOTAKickTeamMember) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgDOTAKickTeamMember) GetTeamId() uint32 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

type CMsgDOTAKickTeamMemberResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *CMsgDOTAKickTeamMemberResponse_Result `protobuf:"varint,1,opt,name=result,enum=dota.CMsgDOTAKickTeamMemberResponse_Result" json:"result,omitempty"`
}

func (x *CMsgDOTAKickTeamMemberResponse) Reset() {
	*x = CMsgDOTAKickTeamMemberResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_team_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAKickTeamMemberResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAKickTeamMemberResponse) ProtoMessage() {}

func (x *CMsgDOTAKickTeamMemberResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_team_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAKickTeamMemberResponse.ProtoReflect.Descriptor instead.
func (*CMsgDOTAKickTeamMemberResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_team_proto_rawDescGZIP(), []int{16}
}

func (x *CMsgDOTAKickTeamMemberResponse) GetResult() CMsgDOTAKickTeamMemberResponse_Result {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return CMsgDOTAKickTeamMemberResponse_SUCCESS
}

type CMsgDOTATransferTeamAdmin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewAdminAccountId *uint32 `protobuf:"varint,1,opt,name=new_admin_account_id,json=newAdminAccountId" json:"new_admin_account_id,omitempty"`
	TeamId            *uint32 `protobuf:"varint,2,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
}

func (x *CMsgDOTATransferTeamAdmin) Reset() {
	*x = CMsgDOTATransferTeamAdmin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_team_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTATransferTeamAdmin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTATransferTeamAdmin) ProtoMessage() {}

func (x *CMsgDOTATransferTeamAdmin) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_team_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTATransferTeamAdmin.ProtoReflect.Descriptor instead.
func (*CMsgDOTATransferTeamAdmin) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_team_proto_rawDescGZIP(), []int{17}
}

func (x *CMsgDOTATransferTeamAdmin) GetNewAdminAccountId() uint32 {
	if x != nil && x.NewAdminAccountId != nil {
		return *x.NewAdminAccountId
	}
	return 0
}

func (x *CMsgDOTATransferTeamAdmin) GetTeamId() uint32 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

type CMsgDOTATransferTeamAdminResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *CMsgDOTATransferTeamAdminResponse_Result `protobuf:"varint,1,opt,name=result,enum=dota.CMsgDOTATransferTeamAdminResponse_Result" json:"result,omitempty"`
}

func (x *CMsgDOTATransferTeamAdminResponse) Reset() {
	*x = CMsgDOTATransferTeamAdminResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_team_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTATransferTeamAdminResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTATransferTeamAdminResponse) ProtoMessage() {}

func (x *CMsgDOTATransferTeamAdminResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_team_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTATransferTeamAdminResponse.ProtoReflect.Descriptor instead.
func (*CMsgDOTATransferTeamAdminResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_team_proto_rawDescGZIP(), []int{18}
}

func (x *CMsgDOTATransferTeamAdminResponse) GetResult() CMsgDOTATransferTeamAdminResponse_Result {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return CMsgDOTATransferTeamAdminResponse_SUCCESS
}

type CMsgDOTALeaveTeam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamId *uint32 `protobuf:"varint,1,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
}

func (x *CMsgDOTALeaveTeam) Reset() {
	*x = CMsgDOTALeaveTeam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_team_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTALeaveTeam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTALeaveTeam) ProtoMessage() {}

func (x *CMsgDOTALeaveTeam) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_team_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTALeaveTeam.ProtoReflect.Descriptor instead.
func (*CMsgDOTALeaveTeam) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_team_proto_rawDescGZIP(), []int{19}
}

func (x *CMsgDOTALeaveTeam) GetTeamId() uint32 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

type CMsgDOTALeaveTeamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *CMsgDOTALeaveTeamResponse_Result `protobuf:"varint,1,opt,name=result,enum=dota.CMsgDOTALeaveTeamResponse_Result" json:"result,omitempty"`
}

func (x *CMsgDOTALeaveTeamResponse) Reset() {
	*x = CMsgDOTALeaveTeamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_team_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTALeaveTeamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTALeaveTeamResponse) ProtoMessage() {}

func (x *CMsgDOTALeaveTeamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_team_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTALeaveTeamResponse.ProtoReflect.Descriptor instead.
func (*CMsgDOTALeaveTeamResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_team_proto_rawDescGZIP(), []int{20}
}

func (x *CMsgDOTALeaveTeamResponse) GetResult() CMsgDOTALeaveTeamResponse_Result {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return CMsgDOTALeaveTeamResponse_SUCCESS
}

type CMsgDOTABetaParticipation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessRights *uint32 `protobuf:"varint,1,opt,name=access_rights,json=accessRights" json:"access_rights,omitempty"`
}

func (x *CMsgDOTABetaParticipation) Reset() {
	*x = CMsgDOTABetaParticipation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_team_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTABetaParticipation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTABetaParticipation) ProtoMessage() {}

func (x *CMsgDOTABetaParticipation) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_team_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTABetaParticipation.ProtoReflect.Descriptor instead.
func (*CMsgDOTABetaParticipation) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_team_proto_rawDescGZIP(), []int{21}
}

func (x *CMsgDOTABetaParticipation) GetAccessRights() uint32 {
	if x != nil && x.AccessRights != nil {
		return *x.AccessRights
	}
	return 0
}

type CMsgDOTATeamInfo_HeroStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeroId     *uint32  `protobuf:"varint,1,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	Picks      *uint32  `protobuf:"varint,2,opt,name=picks" json:"picks,omitempty"`
	Wins       *uint32  `protobuf:"varint,3,opt,name=wins" json:"wins,omitempty"`
	Bans       *uint32  `protobuf:"varint,4,opt,name=bans" json:"bans,omitempty"`
	AvgKills   *float32 `protobuf:"fixed32,5,opt,name=avg_kills,json=avgKills" json:"avg_kills,omitempty"`
	AvgDeaths  *float32 `protobuf:"fixed32,6,opt,name=avg_deaths,json=avgDeaths" json:"avg_deaths,omitempty"`
	AvgAssists *float32 `protobuf:"fixed32,7,opt,name=avg_assists,json=avgAssists" json:"avg_assists,omitempty"`
	AvgGpm     *float32 `protobuf:"fixed32,8,opt,name=avg_gpm,json=avgGpm" json:"avg_gpm,omitempty"`
	AvgXpm     *float32 `protobuf:"fixed32,9,opt,name=avg_xpm,json=avgXpm" json:"avg_xpm,omitempty"`
}

func (x *CMsgDOTATeamInfo_HeroStats) Reset() {
	*x = CMsgDOTATeamInfo_HeroStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_team_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTATeamInfo_HeroStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTATeamInfo_HeroStats) ProtoMessage() {}

func (x *CMsgDOTATeamInfo_HeroStats) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_team_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTATeamInfo_HeroStats.ProtoReflect.Descriptor instead.
func (*CMsgDOTATeamInfo_HeroStats) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_team_proto_rawDescGZIP(), []int{0, 0}
}

func (x *CMsgDOTATeamInfo_HeroStats) GetHeroId() uint32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CMsgDOTATeamInfo_HeroStats) GetPicks() uint32 {
	if x != nil && x.Picks != nil {
		return *x.Picks
	}
	return 0
}

func (x *CMsgDOTATeamInfo_HeroStats) GetWins() uint32 {
	if x != nil && x.Wins != nil {
		return *x.Wins
	}
	return 0
}

func (x *CMsgDOTATeamInfo_HeroStats) GetBans() uint32 {
	if x != nil && x.Bans != nil {
		return *x.Bans
	}
	return 0
}

func (x *CMsgDOTATeamInfo_HeroStats) GetAvgKills() float32 {
	if x != nil && x.AvgKills != nil {
		return *x.AvgKills
	}
	return 0
}

func (x *CMsgDOTATeamInfo_HeroStats) GetAvgDeaths() float32 {
	if x != nil && x.AvgDeaths != nil {
		return *x.AvgDeaths
	}
	return 0
}

func (x *CMsgDOTATeamInfo_HeroStats) GetAvgAssists() float32 {
	if x != nil && x.AvgAssists != nil {
		return *x.AvgAssists
	}
	return 0
}

func (x *CMsgDOTATeamInfo_HeroStats) GetAvgGpm() float32 {
	if x != nil && x.AvgGpm != nil {
		return *x.AvgGpm
	}
	return 0
}

func (x *CMsgDOTATeamInfo_HeroStats) GetAvgXpm() float32 {
	if x != nil && x.AvgXpm != nil {
		return *x.AvgXpm
	}
	return 0
}

type CMsgDOTATeamInfo_MemberStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId      *uint32                       `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	WinsWithTeam   *uint32                       `protobuf:"varint,2,opt,name=wins_with_team,json=winsWithTeam" json:"wins_with_team,omitempty"`
	LossesWithTeam *uint32                       `protobuf:"varint,3,opt,name=losses_with_team,json=lossesWithTeam" json:"losses_with_team,omitempty"`
	TopHeroes      []*CMsgDOTATeamInfo_HeroStats `protobuf:"bytes,4,rep,name=top_heroes,json=topHeroes" json:"top_heroes,omitempty"`
	AvgKills       *float32                      `protobuf:"fixed32,5,opt,name=avg_kills,json=avgKills" json:"avg_kills,omitempty"`
	AvgDeaths      *float32                      `protobuf:"fixed32,6,opt,name=avg_deaths,json=avgDeaths" json:"avg_deaths,omitempty"`
	AvgAssists     *float32                      `protobuf:"fixed32,7,opt,name=avg_assists,json=avgAssists" json:"avg_assists,omitempty"`
}

func (x *CMsgDOTATeamInfo_MemberStats) Reset() {
	*x = CMsgDOTATeamInfo_MemberStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_team_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTATeamInfo_MemberStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTATeamInfo_MemberStats) ProtoMessage() {}

func (x *CMsgDOTATeamInfo_MemberStats) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_team_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTATeamInfo_MemberStats.ProtoReflect.Descriptor instead.
func (*CMsgDOTATeamInfo_MemberStats) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_team_proto_rawDescGZIP(), []int{0, 1}
}

func (x *CMsgDOTATeamInfo_MemberStats) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgDOTATeamInfo_MemberStats) GetWinsWithTeam() uint32 {
	if x != nil && x.WinsWithTeam != nil {
		return *x.WinsWithTeam
	}
	return 0
}

func (x *CMsgDOTATeamInfo_MemberStats) GetLossesWithTeam() uint32 {
	if x != nil && x.LossesWithTeam != nil {
		return *x.LossesWithTeam
	}
	return 0
}

func (x *CMsgDOTATeamInfo_MemberStats) GetTopHeroes() []*CMsgDOTATeamInfo_HeroStats {
	if x != nil {
		return x.TopHeroes
	}
	return nil
}

func (x *CMsgDOTATeamInfo_MemberStats) GetAvgKills() float32 {
	if x != nil && x.AvgKills != nil {
		return *x.AvgKills
	}
	return 0
}

func (x *CMsgDOTATeamInfo_MemberStats) GetAvgDeaths() float32 {
	if x != nil && x.AvgDeaths != nil {
		return *x.AvgDeaths
	}
	return 0
}

func (x *CMsgDOTATeamInfo_MemberStats) GetAvgAssists() float32 {
	if x != nil && x.AvgAssists != nil {
		return *x.AvgAssists
	}
	return 0
}

type CMsgDOTATeamInfo_TeamStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayedHeroes []*CMsgDOTATeamInfo_HeroStats `protobuf:"bytes,1,rep,name=played_heroes,json=playedHeroes" json:"played_heroes,omitempty"`
	Farming      *float32                      `protobuf:"fixed32,2,opt,name=farming" json:"farming,omitempty"`
	Fighting     *float32                      `protobuf:"fixed32,3,opt,name=fighting" json:"fighting,omitempty"`
	Versatility  *float32                      `protobuf:"fixed32,4,opt,name=versatility" json:"versatility,omitempty"`
	AvgKills     *float32                      `protobuf:"fixed32,5,opt,name=avg_kills,json=avgKills" json:"avg_kills,omitempty"`
	AvgDeaths    *float32                      `protobuf:"fixed32,6,opt,name=avg_deaths,json=avgDeaths" json:"avg_deaths,omitempty"`
	AvgDuration  *float32                      `protobuf:"fixed32,7,opt,name=avg_duration,json=avgDuration" json:"avg_duration,omitempty"`
}

func (x *CMsgDOTATeamInfo_TeamStats) Reset() {
	*x = CMsgDOTATeamInfo_TeamStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_team_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTATeamInfo_TeamStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTATeamInfo_TeamStats) ProtoMessage() {}

func (x *CMsgDOTATeamInfo_TeamStats) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_team_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTATeamInfo_TeamStats.ProtoReflect.Descriptor instead.
func (*CMsgDOTATeamInfo_TeamStats) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_team_proto_rawDescGZIP(), []int{0, 2}
}

func (x *CMsgDOTATeamInfo_TeamStats) GetPlayedHeroes() []*CMsgDOTATeamInfo_HeroStats {
	if x != nil {
		return x.PlayedHeroes
	}
	return nil
}

func (x *CMsgDOTATeamInfo_TeamStats) GetFarming() float32 {
	if x != nil && x.Farming != nil {
		return *x.Farming
	}
	return 0
}

func (x *CMsgDOTATeamInfo_TeamStats) GetFighting() float32 {
	if x != nil && x.Fighting != nil {
		return *x.Fighting
	}
	return 0
}

func (x *CMsgDOTATeamInfo_TeamStats) GetVersatility() float32 {
	if x != nil && x.Versatility != nil {
		return *x.Versatility
	}
	return 0
}

func (x *CMsgDOTATeamInfo_TeamStats) GetAvgKills() float32 {
	if x != nil && x.AvgKills != nil {
		return *x.AvgKills
	}
	return 0
}

func (x *CMsgDOTATeamInfo_TeamStats) GetAvgDeaths() float32 {
	if x != nil && x.AvgDeaths != nil {
		return *x.AvgDeaths
	}
	return 0
}

func (x *CMsgDOTATeamInfo_TeamStats) GetAvgDuration() float32 {
	if x != nil && x.AvgDuration != nil {
		return *x.AvgDuration
	}
	return 0
}

type CMsgDOTATeamInfo_DPCResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeagueId  *uint32 `protobuf:"varint,1,opt,name=league_id,json=leagueId" json:"league_id,omitempty"`
	Standing  *uint32 `protobuf:"varint,2,opt,name=standing" json:"standing,omitempty"`
	Points    *uint32 `protobuf:"varint,3,opt,name=points" json:"points,omitempty"`
	Earnings  *uint32 `protobuf:"varint,4,opt,name=earnings" json:"earnings,omitempty"`
	Timestamp *uint32 `protobuf:"varint,5,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (x *CMsgDOTATeamInfo_DPCResult) Reset() {
	*x = CMsgDOTATeamInfo_DPCResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_team_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTATeamInfo_DPCResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTATeamInfo_DPCResult) ProtoMessage() {}

func (x *CMsgDOTATeamInfo_DPCResult) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_team_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTATeamInfo_DPCResult.ProtoReflect.Descriptor instead.
func (*CMsgDOTATeamInfo_DPCResult) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_team_proto_rawDescGZIP(), []int{0, 3}
}

func (x *CMsgDOTATeamInfo_DPCResult) GetLeagueId() uint32 {
	if x != nil && x.LeagueId != nil {
		return *x.LeagueId
	}
	return 0
}

func (x *CMsgDOTATeamInfo_DPCResult) GetStanding() uint32 {
	if x != nil && x.Standing != nil {
		return *x.Standing
	}
	return 0
}

func (x *CMsgDOTATeamInfo_DPCResult) GetPoints() uint32 {
	if x != nil && x.Points != nil {
		return *x.Points
	}
	return 0
}

func (x *CMsgDOTATeamInfo_DPCResult) GetEarnings() uint32 {
	if x != nil && x.Earnings != nil {
		return *x.Earnings
	}
	return 0
}

func (x *CMsgDOTATeamInfo_DPCResult) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

type CMsgDOTATeamInfo_Member struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId  *uint32        `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	TimeJoined *uint32        `protobuf:"varint,2,opt,name=time_joined,json=timeJoined" json:"time_joined,omitempty"`
	Admin      *bool          `protobuf:"varint,3,opt,name=admin" json:"admin,omitempty"`
	ProName    *string        `protobuf:"bytes,6,opt,name=pro_name,json=proName" json:"pro_name,omitempty"`
	Role       *Fantasy_Roles `protobuf:"varint,8,opt,name=role,enum=dota.Fantasy_Roles" json:"role,omitempty"`
	RealName   *string        `protobuf:"bytes,9,opt,name=real_name,json=realName" json:"real_name,omitempty"`
}

func (x *CMsgDOTATeamInfo_Member) Reset() {
	*x = CMsgDOTATeamInfo_Member{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_team_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTATeamInfo_Member) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTATeamInfo_Member) ProtoMessage() {}

func (x *CMsgDOTATeamInfo_Member) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_team_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTATeamInfo_Member.ProtoReflect.Descriptor instead.
func (*CMsgDOTATeamInfo_Member) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_team_proto_rawDescGZIP(), []int{0, 4}
}

func (x *CMsgDOTATeamInfo_Member) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgDOTATeamInfo_Member) GetTimeJoined() uint32 {
	if x != nil && x.TimeJoined != nil {
		return *x.TimeJoined
	}
	return 0
}

func (x *CMsgDOTATeamInfo_Member) GetAdmin() bool {
	if x != nil && x.Admin != nil {
		return *x.Admin
	}
	return false
}

func (x *CMsgDOTATeamInfo_Member) GetProName() string {
	if x != nil && x.ProName != nil {
		return *x.ProName
	}
	return ""
}

func (x *CMsgDOTATeamInfo_Member) GetRole() Fantasy_Roles {
	if x != nil && x.Role != nil {
		return *x.Role
	}
	return Fantasy_Roles_FANTASY_ROLE_UNDEFINED
}

func (x *CMsgDOTATeamInfo_Member) GetRealName() string {
	if x != nil && x.RealName != nil {
		return *x.RealName
	}
	return ""
}

type CMsgDOTATeamInfo_AuditEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuditAction *uint32 `protobuf:"varint,1,opt,name=audit_action,json=auditAction" json:"audit_action,omitempty"`
	Timestamp   *uint32 `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	AccountId   *uint32 `protobuf:"varint,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
}

func (x *CMsgDOTATeamInfo_AuditEntry) Reset() {
	*x = CMsgDOTATeamInfo_AuditEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_team_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTATeamInfo_AuditEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTATeamInfo_AuditEntry) ProtoMessage() {}

func (x *CMsgDOTATeamInfo_AuditEntry) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_team_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTATeamInfo_AuditEntry.ProtoReflect.Descriptor instead.
func (*CMsgDOTATeamInfo_AuditEntry) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_team_proto_rawDescGZIP(), []int{0, 5}
}

func (x *CMsgDOTATeamInfo_AuditEntry) GetAuditAction() uint32 {
	if x != nil && x.AuditAction != nil {
		return *x.AuditAction
	}
	return 0
}

func (x *CMsgDOTATeamInfo_AuditEntry) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *CMsgDOTATeamInfo_AuditEntry) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

var File_dota_gcmessages_client_team_proto protoreflect.FileDescriptor

var file_dota_gcmessages_client_team_proto_rawDesc = []byte{
	0x0a, 0x21, 0x64, 0x6f, 0x74, 0x61, 0x5f, 0x67, 0x63, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x04, 0x64, 0x6f, 0x74, 0x61, 0x1a, 0x17, 0x64, 0x6f, 0x74, 0x61, 0x5f,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xfd, 0x12, 0x0a, 0x10, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x54,
	0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x37, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x74, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12,
	0x21, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x72, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x03, 0x70, 0x72, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x74,
	0x65, 0x61, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x70, 0x69, 0x63, 0x6b, 0x75,
	0x70, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x67, 0x63, 0x5f, 0x6c, 0x6f, 0x67,
	0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x75, 0x67, 0x63, 0x4c, 0x6f, 0x67, 0x6f,
	0x12, 0x22, 0x0a, 0x0d, 0x75, 0x67, 0x63, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6c, 0x6f, 0x67,
	0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x75, 0x67, 0x63, 0x42, 0x61, 0x73, 0x65,
	0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x67, 0x63, 0x5f, 0x62, 0x61, 0x6e, 0x6e,
	0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x75,
	0x67, 0x63, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x28, 0x0a, 0x10,
	0x75, 0x67, 0x63, 0x5f, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x6f,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x75, 0x67, 0x63, 0x53, 0x70, 0x6f, 0x6e, 0x73,
	0x6f, 0x72, 0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x77,
	0x69, 0x6e, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x77, 0x69, 0x6e, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x73, 0x73, 0x65, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x6c, 0x6f, 0x73, 0x73, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x67, 0x61, 0x6d, 0x65, 0x73,
	0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x10, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x38, 0x0a, 0x18, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x64, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x12,
	0x19, 0x0a, 0x08, 0x75, 0x72, 0x6c, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x75, 0x72, 0x6c, 0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x41, 0x0a, 0x1d, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x1a, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x28, 0x0a,
	0x10, 0x63, 0x6f, 0x61, 0x63, 0x68, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x6f, 0x61, 0x63, 0x68, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x54, 0x65,
	0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12,
	0x2b, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x45, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c,
	0x61, 0x62, 0x62, 0x72, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x61, 0x62, 0x62, 0x72, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x45, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x3f, 0x0a, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x6f,
	0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x54, 0x65, 0x61, 0x6d, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x09, 0x74,
	0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x41, 0x0a, 0x0b, 0x64, 0x70, 0x63, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x23, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x54, 0x65, 0x61,
	0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x44, 0x50, 0x43, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x0a, 0x64, 0x70, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x25, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x61, 0x72, 0x79, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x65, 0x61,
	0x6d, 0x5f, 0x63, 0x61, 0x70, 0x74, 0x61, 0x69, 0x6e, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x61, 0x70, 0x74, 0x61, 0x69, 0x6e, 0x1a, 0xf1, 0x01, 0x0a,
	0x09, 0x48, 0x65, 0x72, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x65,
	0x72, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x72,
	0x6f, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x69, 0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x70, 0x69, 0x63, 0x6b, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x69, 0x6e,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x77, 0x69, 0x6e, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x62, 0x61, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x62, 0x61, 0x6e,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x76, 0x67, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x61, 0x76, 0x67, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x76, 0x67, 0x5f, 0x64, 0x65, 0x61, 0x74, 0x68, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x09, 0x61, 0x76, 0x67, 0x44, 0x65, 0x61, 0x74, 0x68, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x61, 0x76, 0x67, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0a, 0x61, 0x76, 0x67, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x12, 0x17,
	0x0a, 0x07, 0x61, 0x76, 0x67, 0x5f, 0x67, 0x70, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x06, 0x61, 0x76, 0x67, 0x47, 0x70, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x76, 0x67, 0x5f, 0x78,
	0x70, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x61, 0x76, 0x67, 0x58, 0x70, 0x6d,
	0x1a, 0x9a, 0x02, 0x0a, 0x0b, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x24, 0x0a, 0x0e, 0x77, 0x69, 0x6e, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x74, 0x65, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x77, 0x69, 0x6e, 0x73, 0x57, 0x69, 0x74,
	0x68, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x6f, 0x73, 0x73, 0x65, 0x73, 0x5f,
	0x77, 0x69, 0x74, 0x68, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x6c, 0x6f, 0x73, 0x73, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x54, 0x65, 0x61, 0x6d, 0x12,
	0x3f, 0x0a, 0x0a, 0x74, 0x6f, 0x70, 0x5f, 0x68, 0x65, 0x72, 0x6f, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44,
	0x4f, 0x54, 0x41, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x65, 0x72, 0x6f,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x09, 0x74, 0x6f, 0x70, 0x48, 0x65, 0x72, 0x6f, 0x65, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x61, 0x76, 0x67, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x08, 0x61, 0x76, 0x67, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x76, 0x67, 0x5f, 0x64, 0x65, 0x61, 0x74, 0x68, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x09, 0x61, 0x76, 0x67, 0x44, 0x65, 0x61, 0x74, 0x68, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x61, 0x76, 0x67, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0a, 0x61, 0x76, 0x67, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x1a, 0x89, 0x02,
	0x0a, 0x09, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x45, 0x0a, 0x0d, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x64, 0x5f, 0x68, 0x65, 0x72, 0x6f, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f,
	0x54, 0x41, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x65, 0x72, 0x6f, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x48, 0x65, 0x72, 0x6f,
	0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x61, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x07, 0x66, 0x61, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08,
	0x66, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08,
	0x66, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x76,
	0x67, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x61,
	0x76, 0x67, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x76, 0x67, 0x5f, 0x64,
	0x65, 0x61, 0x74, 0x68, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x61, 0x76, 0x67,
	0x44, 0x65, 0x61, 0x74, 0x68, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x76, 0x67, 0x5f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x61, 0x76,
	0x67, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x96, 0x01, 0x0a, 0x09, 0x44, 0x50,
	0x43, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x61, 0x67, 0x75,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x65, 0x61, 0x67,
	0x75, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x65, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x1a, 0xbf, 0x01, 0x0a, 0x06, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27,
	0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x64,
	0x6f, 0x74, 0x61, 0x2e, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x5f, 0x52, 0x6f, 0x6c, 0x65,
	0x73, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x6c, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x61, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x6c, 0x0a, 0x0a, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x61, 0x75, 0x64, 0x69, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x22, 0x5e, 0x0a, 0x11, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x54, 0x65,
	0x61, 0x6d, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x61, 0x67, 0x75,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x65, 0x61, 0x67,
	0x75, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44,
	0x4f, 0x54, 0x41, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x74, 0x65, 0x61,
	0x6d, 0x73, 0x22, 0x44, 0x0a, 0x14, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x54, 0x65,
	0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x05, 0x74, 0x65,
	0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x6f, 0x74, 0x61,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x22, 0x79, 0x0a, 0x15, 0x43, 0x4d, 0x73, 0x67,
	0x44, 0x4f, 0x54, 0x41, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x37, 0x0a, 0x09, 0x74, 0x65,
	0x61, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x54, 0x65, 0x61,
	0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x1b, 0x0a, 0x19, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x4d,
	0x79, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0xa9, 0x02, 0x0a, 0x12, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74,
	0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x12, 0x0a,
	0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x6c, 0x6f, 0x67,
	0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x1f,
	0x0a, 0x0b, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x6f, 0x12,
	0x21, 0x0a, 0x0c, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x4c, 0x6f,
	0x67, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x69, 0x63, 0x6b, 0x75,
	0x70, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x70, 0x69,
	0x63, 0x6b, 0x75, 0x70, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x62, 0x62, 0x72,
	0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x61, 0x62, 0x62, 0x72, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa3, 0x04, 0x0a,
	0x1a, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x64, 0x6f,
	0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74,
	0x65, 0x61, 0x6d, 0x49, 0x64, 0x22, 0xaa, 0x03, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x14, 0x0a, 0x07, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x45, 0x4d, 0x50, 0x54,
	0x59, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x42, 0x41, 0x44, 0x5f,
	0x43, 0x48, 0x41, 0x52, 0x41, 0x43, 0x54, 0x45, 0x52, 0x53, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a,
	0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x41, 0x4b, 0x45, 0x4e, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d,
	0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x10, 0x04, 0x12,
	0x0d, 0x0a, 0x09, 0x54, 0x41, 0x47, 0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x10, 0x05, 0x12, 0x16,
	0x0a, 0x12, 0x54, 0x41, 0x47, 0x5f, 0x42, 0x41, 0x44, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x41, 0x43,
	0x54, 0x45, 0x52, 0x53, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x41, 0x47, 0x5f, 0x54, 0x41,
	0x4b, 0x45, 0x4e, 0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x41, 0x47, 0x5f, 0x54, 0x4f, 0x4f,
	0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x10, 0x08, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x52, 0x45, 0x41, 0x54,
	0x4f, 0x52, 0x5f, 0x42, 0x55, 0x53, 0x59, 0x10, 0x09, 0x12, 0x15, 0x0a, 0x11, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x0a,
	0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x52, 0x45, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x45, 0x41, 0x4d,
	0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x45, 0x44, 0x10, 0x0b,
	0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x4f, 0x5f, 0x4c, 0x4f, 0x47, 0x4f, 0x10, 0x0c, 0x12, 0x22, 0x0a,
	0x1e, 0x43, 0x52, 0x45, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4f, 0x4c, 0x44, 0x4f, 0x57, 0x4e, 0x10,
	0x0d, 0x12, 0x16, 0x0a, 0x12, 0x4c, 0x4f, 0x47, 0x4f, 0x5f, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x0e, 0x12, 0x1d, 0x0a, 0x19, 0x4e, 0x41, 0x4d,
	0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x52, 0x45,
	0x43, 0x45, 0x4e, 0x54, 0x4c, 0x59, 0x10, 0x0f, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x52, 0x45, 0x41,
	0x54, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x53, 0x55, 0x46, 0x46, 0x49, 0x43, 0x49, 0x45, 0x4e, 0x54,
	0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x10, 0x10, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x10, 0x11, 0x22, 0xcd, 0x02, 0x0a, 0x17, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x45,
	0x64, 0x69, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x17,
	0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74,
	0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x12, 0x0a,
	0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x6c, 0x6f, 0x67,
	0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x1f,
	0x0a, 0x0b, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x6f, 0x12,
	0x21, 0x0a, 0x0c, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x4c, 0x6f,
	0x67, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x25, 0x0a, 0x0f, 0x69, 0x6e, 0x5f, 0x75, 0x73,
	0x65, 0x5f, 0x62, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x42, 0x79, 0x50, 0x61, 0x72, 0x74, 0x79, 0x12, 0x22,
	0x0a, 0x0c, 0x61, 0x62, 0x62, 0x72, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x62, 0x62, 0x72, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xf1, 0x01, 0x0a, 0x1f, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x45,
	0x64, 0x69, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x45, 0x64, 0x69, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x87, 0x01, 0x0a,
	0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52,
	0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x02, 0x12, 0x17,
	0x0a, 0x13, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x4c,
	0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x46, 0x41, 0x49, 0x4c, 0x55,
	0x52, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x22, 0x58, 0x0a, 0x1e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f,
	0x54, 0x41, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x43, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64,
	0x22, 0xb3, 0x01, 0x0a, 0x2f, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x54, 0x65, 0x61,
	0x6d, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x47, 0x43, 0x49, 0x6d, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x6f, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x45, 0x54, 0x65, 0x61,
	0x6d, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x50, 0x6c,
	0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xa1, 0x01, 0x0a, 0x25, 0x43, 0x4d, 0x73, 0x67, 0x44,
	0x4f, 0x54, 0x41, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x47, 0x43,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x6f, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x65,
	0x12, 0x2c, 0x0a, 0x12, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x69, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74,
	0x65, 0x61, 0x6d, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74,
	0x65, 0x61, 0x6d, 0x54, 0x61, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x22, 0x59, 0x0a, 0x26, 0x43, 0x4d,
	0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x5f, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x54, 0x6f, 0x47, 0x43, 0x12, 0x2f, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x45, 0x54, 0x65, 0x61,
	0x6d, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x7c, 0x0a, 0x26, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54,
	0x41, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x47, 0x43, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x6f, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x12,
	0x2f, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x17, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x45, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x76, 0x0a, 0x26, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x54,
	0x65, 0x61, 0x6d, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x47, 0x43, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x54, 0x6f, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x65, 0x12, 0x2f, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e,
	0x64, 0x6f, 0x74, 0x61, 0x2e, 0x45, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x50, 0x0a, 0x16, 0x43,
	0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x4b, 0x69, 0x63, 0x6b, 0x54, 0x65, 0x61, 0x6d, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x22, 0x94, 0x02,
	0x0a, 0x1e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x4b, 0x69, 0x63, 0x6b, 0x54, 0x65,
	0x61, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x43, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2b, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41,
	0x4b, 0x69, 0x63, 0x6b, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xac, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x20, 0x0a,
	0x1c, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x01, 0x12,
	0x1c, 0x0a, 0x18, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x4b, 0x49, 0x43, 0x4b, 0x45,
	0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x10, 0x02, 0x12, 0x1d, 0x0a,
	0x19, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x4b, 0x49, 0x43, 0x4b, 0x45, 0x45, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13,
	0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x4c, 0x4f, 0x43,
	0x4b, 0x45, 0x44, 0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x05, 0x22, 0x65, 0x0a, 0x19, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x12, 0x2f, 0x0a, 0x14, 0x6e, 0x65, 0x77, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x11, 0x6e, 0x65, 0x77, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x22, 0x8d, 0x02, 0x0a, 0x21,
	0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x54, 0x65, 0x61, 0x6d, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x46, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2e, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54,
	0x41, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x9f, 0x01, 0x0a, 0x06, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10,
	0x00, 0x12, 0x20, 0x0a, 0x1c, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x46, 0x41,
	0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x53, 0x41, 0x4d, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19,
	0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x22, 0x2c, 0x0a, 0x11, 0x43,
	0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x54, 0x65, 0x61, 0x6d,
	0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x22, 0xc2, 0x01, 0x0a, 0x19, 0x43, 0x4d,
	0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x54, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x65, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x16,
	0x0a, 0x12, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4d, 0x45,
	0x4d, 0x42, 0x45, 0x52, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52,
	0x45, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x1d, 0x0a, 0x19, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x22, 0x40,
	0x0a, 0x19, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x42, 0x65, 0x74, 0x61, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73,
	0x2a, 0xde, 0x04, 0x0a, 0x11, 0x45, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x49,
	0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12,
	0x27, 0x0a, 0x23, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x52, 0x45,
	0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x54, 0x45, 0x41, 0x4d,
	0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f,
	0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x02,
	0x12, 0x2a, 0x0a, 0x26, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x41, 0x54, 0x5f, 0x4d, 0x45,
	0x4d, 0x42, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d,
	0x54, 0x45, 0x41, 0x4d, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x04, 0x12,
	0x2b, 0x0a, 0x27, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x45, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x05, 0x12, 0x22, 0x0a, 0x1e,
	0x54, 0x45, 0x41, 0x4d, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x45, 0x5f, 0x42, 0x55, 0x53, 0x59, 0x10, 0x06,
	0x12, 0x2c, 0x0a, 0x28, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x45, 0x5f, 0x41, 0x4c,
	0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x07, 0x12, 0x2b,
	0x0a, 0x27, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x45, 0x5f, 0x41, 0x54, 0x5f, 0x54,
	0x45, 0x41, 0x4d, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x08, 0x12, 0x34, 0x0a, 0x30, 0x54,
	0x45, 0x41, 0x4d, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x45, 0x5f, 0x49, 0x4e, 0x53, 0x55, 0x46, 0x46, 0x49,
	0x43, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10,
	0x09, 0x12, 0x32, 0x0a, 0x2e, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x52, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x10, 0x0a, 0x12, 0x27, 0x0a, 0x23, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x49, 0x4e,
	0x56, 0x49, 0x54, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54,
	0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x10, 0x0b, 0x12, 0x2e,
	0x0a, 0x2a, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x0c, 0x12, 0x21,
	0x0a, 0x1d, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x0d, 0x42, 0x25, 0x5a, 0x23, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x64, 0x6f, 0x74, 0x61, 0x62, 0x75, 0x66, 0x66, 0x2f, 0x6d, 0x61, 0x6e, 0x74, 0x61, 0x2f, 0x64,
	0x6f, 0x74, 0x61, 0x3b, 0x64, 0x6f, 0x74, 0x61,
}

var (
	file_dota_gcmessages_client_team_proto_rawDescOnce sync.Once
	file_dota_gcmessages_client_team_proto_rawDescData = file_dota_gcmessages_client_team_proto_rawDesc
)

func file_dota_gcmessages_client_team_proto_rawDescGZIP() []byte {
	file_dota_gcmessages_client_team_proto_rawDescOnce.Do(func() {
		file_dota_gcmessages_client_team_proto_rawDescData = protoimpl.X.CompressGZIP(file_dota_gcmessages_client_team_proto_rawDescData)
	})
	return file_dota_gcmessages_client_team_proto_rawDescData
}

var file_dota_gcmessages_client_team_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_dota_gcmessages_client_team_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_dota_gcmessages_client_team_proto_goTypes = []interface{}{
	(ETeamInviteResult)(0),                                  // 0: dota.ETeamInviteResult
	(CMsgDOTACreateTeamResponse_Result)(0),                  // 1: dota.CMsgDOTACreateTeamResponse.Result
	(CMsgDOTAEditTeamDetailsResponse_Result)(0),             // 2: dota.CMsgDOTAEditTeamDetailsResponse.Result
	(CMsgDOTAKickTeamMemberResponse_Result)(0),              // 3: dota.CMsgDOTAKickTeamMemberResponse.Result
	(CMsgDOTATransferTeamAdminResponse_Result)(0),           // 4: dota.CMsgDOTATransferTeamAdminResponse.Result
	(CMsgDOTALeaveTeamResponse_Result)(0),                   // 5: dota.CMsgDOTALeaveTeamResponse.Result
	(*CMsgDOTATeamInfo)(nil),                                // 6: dota.CMsgDOTATeamInfo
	(*CMsgDOTATeamsInfo)(nil),                               // 7: dota.CMsgDOTATeamsInfo
	(*CMsgDOTATeamInfoList)(nil),                            // 8: dota.CMsgDOTATeamInfoList
	(*CMsgDOTATeamInfoCache)(nil),                           // 9: dota.CMsgDOTATeamInfoCache
	(*CMsgDOTAMyTeamInfoRequest)(nil),                       // 10: dota.CMsgDOTAMyTeamInfoRequest
	(*CMsgDOTACreateTeam)(nil),                              // 11: dota.CMsgDOTACreateTeam
	(*CMsgDOTACreateTeamResponse)(nil),                      // 12: dota.CMsgDOTACreateTeamResponse
	(*CMsgDOTAEditTeamDetails)(nil),                         // 13: dota.CMsgDOTAEditTeamDetails
	(*CMsgDOTAEditTeamDetailsResponse)(nil),                 // 14: dota.CMsgDOTAEditTeamDetailsResponse
	(*CMsgDOTATeamInvite_InviterToGC)(nil),                  // 15: dota.CMsgDOTATeamInvite_InviterToGC
	(*CMsgDOTATeamInvite_GCImmediateResponseToInviter)(nil), // 16: dota.CMsgDOTATeamInvite_GCImmediateResponseToInviter
	(*CMsgDOTATeamInvite_GCRequestToInvitee)(nil),           // 17: dota.CMsgDOTATeamInvite_GCRequestToInvitee
	(*CMsgDOTATeamInvite_InviteeResponseToGC)(nil),          // 18: dota.CMsgDOTATeamInvite_InviteeResponseToGC
	(*CMsgDOTATeamInvite_GCResponseToInviter)(nil),          // 19: dota.CMsgDOTATeamInvite_GCResponseToInviter
	(*CMsgDOTATeamInvite_GCResponseToInvitee)(nil),          // 20: dota.CMsgDOTATeamInvite_GCResponseToInvitee
	(*CMsgDOTAKickTeamMember)(nil),                          // 21: dota.CMsgDOTAKickTeamMember
	(*CMsgDOTAKickTeamMemberResponse)(nil),                  // 22: dota.CMsgDOTAKickTeamMemberResponse
	(*CMsgDOTATransferTeamAdmin)(nil),                       // 23: dota.CMsgDOTATransferTeamAdmin
	(*CMsgDOTATransferTeamAdminResponse)(nil),               // 24: dota.CMsgDOTATransferTeamAdminResponse
	(*CMsgDOTALeaveTeam)(nil),                               // 25: dota.CMsgDOTALeaveTeam
	(*CMsgDOTALeaveTeamResponse)(nil),                       // 26: dota.CMsgDOTALeaveTeamResponse
	(*CMsgDOTABetaParticipation)(nil),                       // 27: dota.CMsgDOTABetaParticipation
	(*CMsgDOTATeamInfo_HeroStats)(nil),                      // 28: dota.CMsgDOTATeamInfo.HeroStats
	(*CMsgDOTATeamInfo_MemberStats)(nil),                    // 29: dota.CMsgDOTATeamInfo.MemberStats
	(*CMsgDOTATeamInfo_TeamStats)(nil),                      // 30: dota.CMsgDOTATeamInfo.TeamStats
	(*CMsgDOTATeamInfo_DPCResult)(nil),                      // 31: dota.CMsgDOTATeamInfo.DPCResult
	(*CMsgDOTATeamInfo_Member)(nil),                         // 32: dota.CMsgDOTATeamInfo.Member
	(*CMsgDOTATeamInfo_AuditEntry)(nil),                     // 33: dota.CMsgDOTATeamInfo.AuditEntry
	(ELeagueRegion)(0),                                      // 34: dota.ELeagueRegion
	(Fantasy_Roles)(0),                                      // 35: dota.Fantasy_Roles
}
var file_dota_gcmessages_client_team_proto_depIdxs = []int32{
	32, // 0: dota.CMsgDOTATeamInfo.members:type_name -> dota.CMsgDOTATeamInfo.Member
	33, // 1: dota.CMsgDOTATeamInfo.audit_entries:type_name -> dota.CMsgDOTATeamInfo.AuditEntry
	34, // 2: dota.CMsgDOTATeamInfo.region:type_name -> dota.ELeagueRegion
	29, // 3: dota.CMsgDOTATeamInfo.member_stats:type_name -> dota.CMsgDOTATeamInfo.MemberStats
	30, // 4: dota.CMsgDOTATeamInfo.team_stats:type_name -> dota.CMsgDOTATeamInfo.TeamStats
	31, // 5: dota.CMsgDOTATeamInfo.dpc_results:type_name -> dota.CMsgDOTATeamInfo.DPCResult
	6,  // 6: dota.CMsgDOTATeamsInfo.teams:type_name -> dota.CMsgDOTATeamInfo
	6,  // 7: dota.CMsgDOTATeamInfoList.teams:type_name -> dota.CMsgDOTATeamInfo
	8,  // 8: dota.CMsgDOTATeamInfoCache.team_list:type_name -> dota.CMsgDOTATeamInfoList
	1,  // 9: dota.CMsgDOTACreateTeamResponse.result:type_name -> dota.CMsgDOTACreateTeamResponse.Result
	2,  // 10: dota.CMsgDOTAEditTeamDetailsResponse.result:type_name -> dota.CMsgDOTAEditTeamDetailsResponse.Result
	0,  // 11: dota.CMsgDOTATeamInvite_GCImmediateResponseToInviter.result:type_name -> dota.ETeamInviteResult
	0,  // 12: dota.CMsgDOTATeamInvite_InviteeResponseToGC.result:type_name -> dota.ETeamInviteResult
	0,  // 13: dota.CMsgDOTATeamInvite_GCResponseToInviter.result:type_name -> dota.ETeamInviteResult
	0,  // 14: dota.CMsgDOTATeamInvite_GCResponseToInvitee.result:type_name -> dota.ETeamInviteResult
	3,  // 15: dota.CMsgDOTAKickTeamMemberResponse.result:type_name -> dota.CMsgDOTAKickTeamMemberResponse.Result
	4,  // 16: dota.CMsgDOTATransferTeamAdminResponse.result:type_name -> dota.CMsgDOTATransferTeamAdminResponse.Result
	5,  // 17: dota.CMsgDOTALeaveTeamResponse.result:type_name -> dota.CMsgDOTALeaveTeamResponse.Result
	28, // 18: dota.CMsgDOTATeamInfo.MemberStats.top_heroes:type_name -> dota.CMsgDOTATeamInfo.HeroStats
	28, // 19: dota.CMsgDOTATeamInfo.TeamStats.played_heroes:type_name -> dota.CMsgDOTATeamInfo.HeroStats
	35, // 20: dota.CMsgDOTATeamInfo.Member.role:type_name -> dota.Fantasy_Roles
	21, // [21:21] is the sub-list for method output_type
	21, // [21:21] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_dota_gcmessages_client_team_proto_init() }
func file_dota_gcmessages_client_team_proto_init() {
	if File_dota_gcmessages_client_team_proto != nil {
		return
	}
	file_dota_shared_enums_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_dota_gcmessages_client_team_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTATeamInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_team_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTATeamsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_team_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTATeamInfoList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_team_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTATeamInfoCache); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_team_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAMyTeamInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_team_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTACreateTeam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_team_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTACreateTeamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_team_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAEditTeamDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_team_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAEditTeamDetailsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_team_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTATeamInvite_InviterToGC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_team_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTATeamInvite_GCImmediateResponseToInviter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_team_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTATeamInvite_GCRequestToInvitee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_team_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTATeamInvite_InviteeResponseToGC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_team_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTATeamInvite_GCResponseToInviter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_team_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTATeamInvite_GCResponseToInvitee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_team_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAKickTeamMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_team_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAKickTeamMemberResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_team_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTATransferTeamAdmin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_team_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTATransferTeamAdminResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_team_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTALeaveTeam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_team_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTALeaveTeamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_team_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTABetaParticipation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_team_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTATeamInfo_HeroStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_team_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTATeamInfo_MemberStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_team_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTATeamInfo_TeamStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_team_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTATeamInfo_DPCResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_team_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTATeamInfo_Member); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_team_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTATeamInfo_AuditEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dota_gcmessages_client_team_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_dota_gcmessages_client_team_proto_goTypes,
		DependencyIndexes: file_dota_gcmessages_client_team_proto_depIdxs,
		EnumInfos:         file_dota_gcmessages_client_team_proto_enumTypes,
		MessageInfos:      file_dota_gcmessages_client_team_proto_msgTypes,
	}.Build()
	File_dota_gcmessages_client_team_proto = out.File
	file_dota_gcmessages_client_team_proto_rawDesc = nil
	file_dota_gcmessages_client_team_proto_goTypes = nil
	file_dota_gcmessages_client_team_proto_depIdxs = nil
}
