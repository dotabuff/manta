// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.5
// source: steammessages_player.steamworkssdk.proto

package dota

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ENotificationSetting int32

const (
	ENotificationSetting_k_ENotificationSettingNotifyUseDefault ENotificationSetting = 0
	ENotificationSetting_k_ENotificationSettingAlways           ENotificationSetting = 1
	ENotificationSetting_k_ENotificationSettingNever            ENotificationSetting = 2
)

// Enum value maps for ENotificationSetting.
var (
	ENotificationSetting_name = map[int32]string{
		0: "k_ENotificationSettingNotifyUseDefault",
		1: "k_ENotificationSettingAlways",
		2: "k_ENotificationSettingNever",
	}
	ENotificationSetting_value = map[string]int32{
		"k_ENotificationSettingNotifyUseDefault": 0,
		"k_ENotificationSettingAlways":           1,
		"k_ENotificationSettingNever":            2,
	}
)

func (x ENotificationSetting) Enum() *ENotificationSetting {
	p := new(ENotificationSetting)
	*p = x
	return p
}

func (x ENotificationSetting) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ENotificationSetting) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_player_steamworkssdk_proto_enumTypes[0].Descriptor()
}

func (ENotificationSetting) Type() protoreflect.EnumType {
	return &file_steammessages_player_steamworkssdk_proto_enumTypes[0]
}

func (x ENotificationSetting) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ENotificationSetting) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ENotificationSetting(num)
	return nil
}

// Deprecated: Use ENotificationSetting.Descriptor instead.
func (ENotificationSetting) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_player_steamworkssdk_proto_rawDescGZIP(), []int{0}
}

type CPlayer_GetMutualFriendsForIncomingInvites_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CPlayer_GetMutualFriendsForIncomingInvites_Request) Reset() {
	*x = CPlayer_GetMutualFriendsForIncomingInvites_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_GetMutualFriendsForIncomingInvites_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetMutualFriendsForIncomingInvites_Request) ProtoMessage() {}

func (x *CPlayer_GetMutualFriendsForIncomingInvites_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetMutualFriendsForIncomingInvites_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_GetMutualFriendsForIncomingInvites_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamworkssdk_proto_rawDescGZIP(), []int{0}
}

type CPlayer_IncomingInviteMutualFriendList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid                *uint64  `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	MutualFriendAccountIds []uint32 `protobuf:"varint,2,rep,name=mutual_friend_account_ids,json=mutualFriendAccountIds" json:"mutual_friend_account_ids,omitempty"`
}

func (x *CPlayer_IncomingInviteMutualFriendList) Reset() {
	*x = CPlayer_IncomingInviteMutualFriendList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_IncomingInviteMutualFriendList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_IncomingInviteMutualFriendList) ProtoMessage() {}

func (x *CPlayer_IncomingInviteMutualFriendList) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_IncomingInviteMutualFriendList.ProtoReflect.Descriptor instead.
func (*CPlayer_IncomingInviteMutualFriendList) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamworkssdk_proto_rawDescGZIP(), []int{1}
}

func (x *CPlayer_IncomingInviteMutualFriendList) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CPlayer_IncomingInviteMutualFriendList) GetMutualFriendAccountIds() []uint32 {
	if x != nil {
		return x.MutualFriendAccountIds
	}
	return nil
}

type CPlayer_GetMutualFriendsForIncomingInvites_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IncomingInviteMutualFriendsLists []*CPlayer_IncomingInviteMutualFriendList `protobuf:"bytes,1,rep,name=incoming_invite_mutual_friends_lists,json=incomingInviteMutualFriendsLists" json:"incoming_invite_mutual_friends_lists,omitempty"`
}

func (x *CPlayer_GetMutualFriendsForIncomingInvites_Response) Reset() {
	*x = CPlayer_GetMutualFriendsForIncomingInvites_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_GetMutualFriendsForIncomingInvites_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetMutualFriendsForIncomingInvites_Response) ProtoMessage() {}

func (x *CPlayer_GetMutualFriendsForIncomingInvites_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetMutualFriendsForIncomingInvites_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_GetMutualFriendsForIncomingInvites_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamworkssdk_proto_rawDescGZIP(), []int{2}
}

func (x *CPlayer_GetMutualFriendsForIncomingInvites_Response) GetIncomingInviteMutualFriendsLists() []*CPlayer_IncomingInviteMutualFriendList {
	if x != nil {
		return x.IncomingInviteMutualFriendsLists
	}
	return nil
}

type CPlayer_GetFriendsGameplayInfo_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
}

func (x *CPlayer_GetFriendsGameplayInfo_Request) Reset() {
	*x = CPlayer_GetFriendsGameplayInfo_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_GetFriendsGameplayInfo_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetFriendsGameplayInfo_Request) ProtoMessage() {}

func (x *CPlayer_GetFriendsGameplayInfo_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetFriendsGameplayInfo_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_GetFriendsGameplayInfo_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamworkssdk_proto_rawDescGZIP(), []int{3}
}

func (x *CPlayer_GetFriendsGameplayInfo_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

type CPlayer_GetFriendsGameplayInfo_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	YourInfo       *CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo       `protobuf:"bytes,1,opt,name=your_info,json=yourInfo" json:"your_info,omitempty"`
	InGame         []*CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo `protobuf:"bytes,2,rep,name=in_game,json=inGame" json:"in_game,omitempty"`
	PlayedRecently []*CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo `protobuf:"bytes,3,rep,name=played_recently,json=playedRecently" json:"played_recently,omitempty"`
	PlayedEver     []*CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo `protobuf:"bytes,4,rep,name=played_ever,json=playedEver" json:"played_ever,omitempty"`
	Owns           []*CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo `protobuf:"bytes,5,rep,name=owns" json:"owns,omitempty"`
	InWishlist     []*CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo `protobuf:"bytes,6,rep,name=in_wishlist,json=inWishlist" json:"in_wishlist,omitempty"`
}

func (x *CPlayer_GetFriendsGameplayInfo_Response) Reset() {
	*x = CPlayer_GetFriendsGameplayInfo_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_GetFriendsGameplayInfo_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetFriendsGameplayInfo_Response) ProtoMessage() {}

func (x *CPlayer_GetFriendsGameplayInfo_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetFriendsGameplayInfo_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_GetFriendsGameplayInfo_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamworkssdk_proto_rawDescGZIP(), []int{4}
}

func (x *CPlayer_GetFriendsGameplayInfo_Response) GetYourInfo() *CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo {
	if x != nil {
		return x.YourInfo
	}
	return nil
}

func (x *CPlayer_GetFriendsGameplayInfo_Response) GetInGame() []*CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo {
	if x != nil {
		return x.InGame
	}
	return nil
}

func (x *CPlayer_GetFriendsGameplayInfo_Response) GetPlayedRecently() []*CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo {
	if x != nil {
		return x.PlayedRecently
	}
	return nil
}

func (x *CPlayer_GetFriendsGameplayInfo_Response) GetPlayedEver() []*CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo {
	if x != nil {
		return x.PlayedEver
	}
	return nil
}

func (x *CPlayer_GetFriendsGameplayInfo_Response) GetOwns() []*CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo {
	if x != nil {
		return x.Owns
	}
	return nil
}

func (x *CPlayer_GetFriendsGameplayInfo_Response) GetInWishlist() []*CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo {
	if x != nil {
		return x.InWishlist
	}
	return nil
}

type CPlayer_GetGameBadgeLevels_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
}

func (x *CPlayer_GetGameBadgeLevels_Request) Reset() {
	*x = CPlayer_GetGameBadgeLevels_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_GetGameBadgeLevels_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetGameBadgeLevels_Request) ProtoMessage() {}

func (x *CPlayer_GetGameBadgeLevels_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetGameBadgeLevels_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_GetGameBadgeLevels_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamworkssdk_proto_rawDescGZIP(), []int{5}
}

func (x *CPlayer_GetGameBadgeLevels_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

type CPlayer_GetGameBadgeLevels_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerLevel *uint32                                      `protobuf:"varint,1,opt,name=player_level,json=playerLevel" json:"player_level,omitempty"`
	Badges      []*CPlayer_GetGameBadgeLevels_Response_Badge `protobuf:"bytes,2,rep,name=badges" json:"badges,omitempty"`
}

func (x *CPlayer_GetGameBadgeLevels_Response) Reset() {
	*x = CPlayer_GetGameBadgeLevels_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_GetGameBadgeLevels_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetGameBadgeLevels_Response) ProtoMessage() {}

func (x *CPlayer_GetGameBadgeLevels_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetGameBadgeLevels_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_GetGameBadgeLevels_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamworkssdk_proto_rawDescGZIP(), []int{6}
}

func (x *CPlayer_GetGameBadgeLevels_Response) GetPlayerLevel() uint32 {
	if x != nil && x.PlayerLevel != nil {
		return *x.PlayerLevel
	}
	return 0
}

func (x *CPlayer_GetGameBadgeLevels_Response) GetBadges() []*CPlayer_GetGameBadgeLevels_Response_Badge {
	if x != nil {
		return x.Badges
	}
	return nil
}

type CPlayer_GetLastPlayedTimes_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinLastPlayed *uint32 `protobuf:"varint,1,opt,name=min_last_played,json=minLastPlayed" json:"min_last_played,omitempty"`
}

func (x *CPlayer_GetLastPlayedTimes_Request) Reset() {
	*x = CPlayer_GetLastPlayedTimes_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_GetLastPlayedTimes_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetLastPlayedTimes_Request) ProtoMessage() {}

func (x *CPlayer_GetLastPlayedTimes_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetLastPlayedTimes_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_GetLastPlayedTimes_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamworkssdk_proto_rawDescGZIP(), []int{7}
}

func (x *CPlayer_GetLastPlayedTimes_Request) GetMinLastPlayed() uint32 {
	if x != nil && x.MinLastPlayed != nil {
		return *x.MinLastPlayed
	}
	return 0
}

type CPlayer_GetLastPlayedTimes_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Games []*CPlayer_GetLastPlayedTimes_Response_Game `protobuf:"bytes,1,rep,name=games" json:"games,omitempty"`
}

func (x *CPlayer_GetLastPlayedTimes_Response) Reset() {
	*x = CPlayer_GetLastPlayedTimes_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_GetLastPlayedTimes_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetLastPlayedTimes_Response) ProtoMessage() {}

func (x *CPlayer_GetLastPlayedTimes_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetLastPlayedTimes_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_GetLastPlayedTimes_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamworkssdk_proto_rawDescGZIP(), []int{8}
}

func (x *CPlayer_GetLastPlayedTimes_Response) GetGames() []*CPlayer_GetLastPlayedTimes_Response_Game {
	if x != nil {
		return x.Games
	}
	return nil
}

type CPlayer_AcceptSSA_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CPlayer_AcceptSSA_Request) Reset() {
	*x = CPlayer_AcceptSSA_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_AcceptSSA_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_AcceptSSA_Request) ProtoMessage() {}

func (x *CPlayer_AcceptSSA_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_AcceptSSA_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_AcceptSSA_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamworkssdk_proto_rawDescGZIP(), []int{9}
}

type CPlayer_AcceptSSA_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CPlayer_AcceptSSA_Response) Reset() {
	*x = CPlayer_AcceptSSA_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_AcceptSSA_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_AcceptSSA_Response) ProtoMessage() {}

func (x *CPlayer_AcceptSSA_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_AcceptSSA_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_AcceptSSA_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamworkssdk_proto_rawDescGZIP(), []int{10}
}

type CPlayer_GetNicknameList_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CPlayer_GetNicknameList_Request) Reset() {
	*x = CPlayer_GetNicknameList_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_GetNicknameList_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetNicknameList_Request) ProtoMessage() {}

func (x *CPlayer_GetNicknameList_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetNicknameList_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_GetNicknameList_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamworkssdk_proto_rawDescGZIP(), []int{11}
}

type CPlayer_GetNicknameList_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nicknames []*CPlayer_GetNicknameList_Response_PlayerNickname `protobuf:"bytes,1,rep,name=nicknames" json:"nicknames,omitempty"`
}

func (x *CPlayer_GetNicknameList_Response) Reset() {
	*x = CPlayer_GetNicknameList_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_GetNicknameList_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetNicknameList_Response) ProtoMessage() {}

func (x *CPlayer_GetNicknameList_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetNicknameList_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_GetNicknameList_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamworkssdk_proto_rawDescGZIP(), []int{12}
}

func (x *CPlayer_GetNicknameList_Response) GetNicknames() []*CPlayer_GetNicknameList_Response_PlayerNickname {
	if x != nil {
		return x.Nicknames
	}
	return nil
}

type CPlayer_GetPerFriendPreferences_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CPlayer_GetPerFriendPreferences_Request) Reset() {
	*x = CPlayer_GetPerFriendPreferences_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_GetPerFriendPreferences_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetPerFriendPreferences_Request) ProtoMessage() {}

func (x *CPlayer_GetPerFriendPreferences_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetPerFriendPreferences_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_GetPerFriendPreferences_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamworkssdk_proto_rawDescGZIP(), []int{13}
}

type PerFriendPreferences struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accountid                 *uint32               `protobuf:"fixed32,1,opt,name=accountid" json:"accountid,omitempty"`
	Nickname                  *string               `protobuf:"bytes,2,opt,name=nickname" json:"nickname,omitempty"`
	NotificationsShowingame   *ENotificationSetting `protobuf:"varint,3,opt,name=notifications_showingame,json=notificationsShowingame,enum=dota.ENotificationSetting" json:"notifications_showingame,omitempty"`
	NotificationsShowonline   *ENotificationSetting `protobuf:"varint,4,opt,name=notifications_showonline,json=notificationsShowonline,enum=dota.ENotificationSetting" json:"notifications_showonline,omitempty"`
	NotificationsShowmessages *ENotificationSetting `protobuf:"varint,5,opt,name=notifications_showmessages,json=notificationsShowmessages,enum=dota.ENotificationSetting" json:"notifications_showmessages,omitempty"`
	SoundsShowingame          *ENotificationSetting `protobuf:"varint,6,opt,name=sounds_showingame,json=soundsShowingame,enum=dota.ENotificationSetting" json:"sounds_showingame,omitempty"`
	SoundsShowonline          *ENotificationSetting `protobuf:"varint,7,opt,name=sounds_showonline,json=soundsShowonline,enum=dota.ENotificationSetting" json:"sounds_showonline,omitempty"`
	SoundsShowmessages        *ENotificationSetting `protobuf:"varint,8,opt,name=sounds_showmessages,json=soundsShowmessages,enum=dota.ENotificationSetting" json:"sounds_showmessages,omitempty"`
	NotificationsSendmobile   *ENotificationSetting `protobuf:"varint,9,opt,name=notifications_sendmobile,json=notificationsSendmobile,enum=dota.ENotificationSetting" json:"notifications_sendmobile,omitempty"`
}

func (x *PerFriendPreferences) Reset() {
	*x = PerFriendPreferences{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerFriendPreferences) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerFriendPreferences) ProtoMessage() {}

func (x *PerFriendPreferences) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerFriendPreferences.ProtoReflect.Descriptor instead.
func (*PerFriendPreferences) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamworkssdk_proto_rawDescGZIP(), []int{14}
}

func (x *PerFriendPreferences) GetAccountid() uint32 {
	if x != nil && x.Accountid != nil {
		return *x.Accountid
	}
	return 0
}

func (x *PerFriendPreferences) GetNickname() string {
	if x != nil && x.Nickname != nil {
		return *x.Nickname
	}
	return ""
}

func (x *PerFriendPreferences) GetNotificationsShowingame() ENotificationSetting {
	if x != nil && x.NotificationsShowingame != nil {
		return *x.NotificationsShowingame
	}
	return ENotificationSetting_k_ENotificationSettingNotifyUseDefault
}

func (x *PerFriendPreferences) GetNotificationsShowonline() ENotificationSetting {
	if x != nil && x.NotificationsShowonline != nil {
		return *x.NotificationsShowonline
	}
	return ENotificationSetting_k_ENotificationSettingNotifyUseDefault
}

func (x *PerFriendPreferences) GetNotificationsShowmessages() ENotificationSetting {
	if x != nil && x.NotificationsShowmessages != nil {
		return *x.NotificationsShowmessages
	}
	return ENotificationSetting_k_ENotificationSettingNotifyUseDefault
}

func (x *PerFriendPreferences) GetSoundsShowingame() ENotificationSetting {
	if x != nil && x.SoundsShowingame != nil {
		return *x.SoundsShowingame
	}
	return ENotificationSetting_k_ENotificationSettingNotifyUseDefault
}

func (x *PerFriendPreferences) GetSoundsShowonline() ENotificationSetting {
	if x != nil && x.SoundsShowonline != nil {
		return *x.SoundsShowonline
	}
	return ENotificationSetting_k_ENotificationSettingNotifyUseDefault
}

func (x *PerFriendPreferences) GetSoundsShowmessages() ENotificationSetting {
	if x != nil && x.SoundsShowmessages != nil {
		return *x.SoundsShowmessages
	}
	return ENotificationSetting_k_ENotificationSettingNotifyUseDefault
}

func (x *PerFriendPreferences) GetNotificationsSendmobile() ENotificationSetting {
	if x != nil && x.NotificationsSendmobile != nil {
		return *x.NotificationsSendmobile
	}
	return ENotificationSetting_k_ENotificationSettingNotifyUseDefault
}

type CPlayer_GetPerFriendPreferences_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Preferences []*PerFriendPreferences `protobuf:"bytes,1,rep,name=preferences" json:"preferences,omitempty"`
}

func (x *CPlayer_GetPerFriendPreferences_Response) Reset() {
	*x = CPlayer_GetPerFriendPreferences_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_GetPerFriendPreferences_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetPerFriendPreferences_Response) ProtoMessage() {}

func (x *CPlayer_GetPerFriendPreferences_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetPerFriendPreferences_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_GetPerFriendPreferences_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamworkssdk_proto_rawDescGZIP(), []int{15}
}

func (x *CPlayer_GetPerFriendPreferences_Response) GetPreferences() []*PerFriendPreferences {
	if x != nil {
		return x.Preferences
	}
	return nil
}

type CPlayer_SetPerFriendPreferences_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Preferences *PerFriendPreferences `protobuf:"bytes,1,opt,name=preferences" json:"preferences,omitempty"`
}

func (x *CPlayer_SetPerFriendPreferences_Request) Reset() {
	*x = CPlayer_SetPerFriendPreferences_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_SetPerFriendPreferences_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_SetPerFriendPreferences_Request) ProtoMessage() {}

func (x *CPlayer_SetPerFriendPreferences_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_SetPerFriendPreferences_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_SetPerFriendPreferences_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamworkssdk_proto_rawDescGZIP(), []int{16}
}

func (x *CPlayer_SetPerFriendPreferences_Request) GetPreferences() *PerFriendPreferences {
	if x != nil {
		return x.Preferences
	}
	return nil
}

type CPlayer_SetPerFriendPreferences_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CPlayer_SetPerFriendPreferences_Response) Reset() {
	*x = CPlayer_SetPerFriendPreferences_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_SetPerFriendPreferences_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_SetPerFriendPreferences_Response) ProtoMessage() {}

func (x *CPlayer_SetPerFriendPreferences_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_SetPerFriendPreferences_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_SetPerFriendPreferences_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamworkssdk_proto_rawDescGZIP(), []int{17}
}

type CPlayer_AddFriend_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid *uint64 `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
}

func (x *CPlayer_AddFriend_Request) Reset() {
	*x = CPlayer_AddFriend_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_AddFriend_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_AddFriend_Request) ProtoMessage() {}

func (x *CPlayer_AddFriend_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_AddFriend_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_AddFriend_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamworkssdk_proto_rawDescGZIP(), []int{18}
}

func (x *CPlayer_AddFriend_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

type CPlayer_AddFriend_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InviteSent         *bool   `protobuf:"varint,1,opt,name=invite_sent,json=inviteSent" json:"invite_sent,omitempty"`
	FriendRelationship *uint32 `protobuf:"varint,2,opt,name=friend_relationship,json=friendRelationship" json:"friend_relationship,omitempty"`
}

func (x *CPlayer_AddFriend_Response) Reset() {
	*x = CPlayer_AddFriend_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_AddFriend_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_AddFriend_Response) ProtoMessage() {}

func (x *CPlayer_AddFriend_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_AddFriend_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_AddFriend_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamworkssdk_proto_rawDescGZIP(), []int{19}
}

func (x *CPlayer_AddFriend_Response) GetInviteSent() bool {
	if x != nil && x.InviteSent != nil {
		return *x.InviteSent
	}
	return false
}

func (x *CPlayer_AddFriend_Response) GetFriendRelationship() uint32 {
	if x != nil && x.FriendRelationship != nil {
		return *x.FriendRelationship
	}
	return 0
}

type CPlayer_RemoveFriend_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid *uint64 `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
}

func (x *CPlayer_RemoveFriend_Request) Reset() {
	*x = CPlayer_RemoveFriend_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_RemoveFriend_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_RemoveFriend_Request) ProtoMessage() {}

func (x *CPlayer_RemoveFriend_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_RemoveFriend_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_RemoveFriend_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamworkssdk_proto_rawDescGZIP(), []int{20}
}

func (x *CPlayer_RemoveFriend_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

type CPlayer_RemoveFriend_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FriendRelationship *uint32 `protobuf:"varint,1,opt,name=friend_relationship,json=friendRelationship" json:"friend_relationship,omitempty"`
}

func (x *CPlayer_RemoveFriend_Response) Reset() {
	*x = CPlayer_RemoveFriend_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_RemoveFriend_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_RemoveFriend_Response) ProtoMessage() {}

func (x *CPlayer_RemoveFriend_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_RemoveFriend_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_RemoveFriend_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamworkssdk_proto_rawDescGZIP(), []int{21}
}

func (x *CPlayer_RemoveFriend_Response) GetFriendRelationship() uint32 {
	if x != nil && x.FriendRelationship != nil {
		return *x.FriendRelationship
	}
	return 0
}

type CPlayer_IgnoreFriend_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid  *uint64 `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	Unignore *bool   `protobuf:"varint,2,opt,name=unignore" json:"unignore,omitempty"`
}

func (x *CPlayer_IgnoreFriend_Request) Reset() {
	*x = CPlayer_IgnoreFriend_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_IgnoreFriend_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_IgnoreFriend_Request) ProtoMessage() {}

func (x *CPlayer_IgnoreFriend_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_IgnoreFriend_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_IgnoreFriend_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamworkssdk_proto_rawDescGZIP(), []int{22}
}

func (x *CPlayer_IgnoreFriend_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CPlayer_IgnoreFriend_Request) GetUnignore() bool {
	if x != nil && x.Unignore != nil {
		return *x.Unignore
	}
	return false
}

type CPlayer_IgnoreFriend_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FriendRelationship *uint32 `protobuf:"varint,1,opt,name=friend_relationship,json=friendRelationship" json:"friend_relationship,omitempty"`
}

func (x *CPlayer_IgnoreFriend_Response) Reset() {
	*x = CPlayer_IgnoreFriend_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_IgnoreFriend_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_IgnoreFriend_Response) ProtoMessage() {}

func (x *CPlayer_IgnoreFriend_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_IgnoreFriend_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_IgnoreFriend_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamworkssdk_proto_rawDescGZIP(), []int{23}
}

func (x *CPlayer_IgnoreFriend_Response) GetFriendRelationship() uint32 {
	if x != nil && x.FriendRelationship != nil {
		return *x.FriendRelationship
	}
	return 0
}

type CPlayer_GetCommunityPreferences_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CPlayer_GetCommunityPreferences_Request) Reset() {
	*x = CPlayer_GetCommunityPreferences_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_GetCommunityPreferences_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetCommunityPreferences_Request) ProtoMessage() {}

func (x *CPlayer_GetCommunityPreferences_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetCommunityPreferences_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_GetCommunityPreferences_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamworkssdk_proto_rawDescGZIP(), []int{24}
}

type CPlayer_CommunityPreferences struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HideAdultContentViolence *bool   `protobuf:"varint,1,opt,name=hide_adult_content_violence,json=hideAdultContentViolence" json:"hide_adult_content_violence,omitempty"`
	HideAdultContentSex      *bool   `protobuf:"varint,2,opt,name=hide_adult_content_sex,json=hideAdultContentSex" json:"hide_adult_content_sex,omitempty"`
	ParenthesizeNicknames    *bool   `protobuf:"varint,4,opt,name=parenthesize_nicknames,json=parenthesizeNicknames" json:"parenthesize_nicknames,omitempty"`
	TimestampUpdated         *uint32 `protobuf:"varint,3,opt,name=timestamp_updated,json=timestampUpdated" json:"timestamp_updated,omitempty"`
}

func (x *CPlayer_CommunityPreferences) Reset() {
	*x = CPlayer_CommunityPreferences{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_CommunityPreferences) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_CommunityPreferences) ProtoMessage() {}

func (x *CPlayer_CommunityPreferences) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_CommunityPreferences.ProtoReflect.Descriptor instead.
func (*CPlayer_CommunityPreferences) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamworkssdk_proto_rawDescGZIP(), []int{25}
}

func (x *CPlayer_CommunityPreferences) GetHideAdultContentViolence() bool {
	if x != nil && x.HideAdultContentViolence != nil {
		return *x.HideAdultContentViolence
	}
	return false
}

func (x *CPlayer_CommunityPreferences) GetHideAdultContentSex() bool {
	if x != nil && x.HideAdultContentSex != nil {
		return *x.HideAdultContentSex
	}
	return false
}

func (x *CPlayer_CommunityPreferences) GetParenthesizeNicknames() bool {
	if x != nil && x.ParenthesizeNicknames != nil {
		return *x.ParenthesizeNicknames
	}
	return false
}

func (x *CPlayer_CommunityPreferences) GetTimestampUpdated() uint32 {
	if x != nil && x.TimestampUpdated != nil {
		return *x.TimestampUpdated
	}
	return 0
}

type CPlayer_GetCommunityPreferences_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Preferences *CPlayer_CommunityPreferences `protobuf:"bytes,1,opt,name=preferences" json:"preferences,omitempty"`
}

func (x *CPlayer_GetCommunityPreferences_Response) Reset() {
	*x = CPlayer_GetCommunityPreferences_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_GetCommunityPreferences_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetCommunityPreferences_Response) ProtoMessage() {}

func (x *CPlayer_GetCommunityPreferences_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetCommunityPreferences_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_GetCommunityPreferences_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamworkssdk_proto_rawDescGZIP(), []int{26}
}

func (x *CPlayer_GetCommunityPreferences_Response) GetPreferences() *CPlayer_CommunityPreferences {
	if x != nil {
		return x.Preferences
	}
	return nil
}

type CPlayer_SetCommunityPreferences_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Preferences *CPlayer_CommunityPreferences `protobuf:"bytes,1,opt,name=preferences" json:"preferences,omitempty"`
}

func (x *CPlayer_SetCommunityPreferences_Request) Reset() {
	*x = CPlayer_SetCommunityPreferences_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_SetCommunityPreferences_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_SetCommunityPreferences_Request) ProtoMessage() {}

func (x *CPlayer_SetCommunityPreferences_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_SetCommunityPreferences_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_SetCommunityPreferences_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamworkssdk_proto_rawDescGZIP(), []int{27}
}

func (x *CPlayer_SetCommunityPreferences_Request) GetPreferences() *CPlayer_CommunityPreferences {
	if x != nil {
		return x.Preferences
	}
	return nil
}

type CPlayer_SetCommunityPreferences_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CPlayer_SetCommunityPreferences_Response) Reset() {
	*x = CPlayer_SetCommunityPreferences_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_SetCommunityPreferences_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_SetCommunityPreferences_Response) ProtoMessage() {}

func (x *CPlayer_SetCommunityPreferences_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_SetCommunityPreferences_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_SetCommunityPreferences_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamworkssdk_proto_rawDescGZIP(), []int{28}
}

type CPlayer_GetNewSteamAnnouncementState_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language *int32 `protobuf:"varint,1,opt,name=language" json:"language,omitempty"`
}

func (x *CPlayer_GetNewSteamAnnouncementState_Request) Reset() {
	*x = CPlayer_GetNewSteamAnnouncementState_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_GetNewSteamAnnouncementState_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetNewSteamAnnouncementState_Request) ProtoMessage() {}

func (x *CPlayer_GetNewSteamAnnouncementState_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetNewSteamAnnouncementState_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_GetNewSteamAnnouncementState_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamworkssdk_proto_rawDescGZIP(), []int{29}
}

func (x *CPlayer_GetNewSteamAnnouncementState_Request) GetLanguage() int32 {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return 0
}

type CPlayer_GetNewSteamAnnouncementState_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State                *int32  `protobuf:"varint,1,opt,name=state" json:"state,omitempty"`
	AnnouncementHeadline *string `protobuf:"bytes,2,opt,name=announcement_headline,json=announcementHeadline" json:"announcement_headline,omitempty"`
	AnnouncementUrl      *string `protobuf:"bytes,3,opt,name=announcement_url,json=announcementUrl" json:"announcement_url,omitempty"`
	TimePosted           *uint32 `protobuf:"varint,4,opt,name=time_posted,json=timePosted" json:"time_posted,omitempty"`
	AnnouncementGid      *uint64 `protobuf:"varint,5,opt,name=announcement_gid,json=announcementGid" json:"announcement_gid,omitempty"`
}

func (x *CPlayer_GetNewSteamAnnouncementState_Response) Reset() {
	*x = CPlayer_GetNewSteamAnnouncementState_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_GetNewSteamAnnouncementState_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetNewSteamAnnouncementState_Response) ProtoMessage() {}

func (x *CPlayer_GetNewSteamAnnouncementState_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetNewSteamAnnouncementState_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_GetNewSteamAnnouncementState_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamworkssdk_proto_rawDescGZIP(), []int{30}
}

func (x *CPlayer_GetNewSteamAnnouncementState_Response) GetState() int32 {
	if x != nil && x.State != nil {
		return *x.State
	}
	return 0
}

func (x *CPlayer_GetNewSteamAnnouncementState_Response) GetAnnouncementHeadline() string {
	if x != nil && x.AnnouncementHeadline != nil {
		return *x.AnnouncementHeadline
	}
	return ""
}

func (x *CPlayer_GetNewSteamAnnouncementState_Response) GetAnnouncementUrl() string {
	if x != nil && x.AnnouncementUrl != nil {
		return *x.AnnouncementUrl
	}
	return ""
}

func (x *CPlayer_GetNewSteamAnnouncementState_Response) GetTimePosted() uint32 {
	if x != nil && x.TimePosted != nil {
		return *x.TimePosted
	}
	return 0
}

func (x *CPlayer_GetNewSteamAnnouncementState_Response) GetAnnouncementGid() uint64 {
	if x != nil && x.AnnouncementGid != nil {
		return *x.AnnouncementGid
	}
	return 0
}

type CPlayer_UpdateSteamAnnouncementLastRead_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnnouncementGid *uint64 `protobuf:"varint,1,opt,name=announcement_gid,json=announcementGid" json:"announcement_gid,omitempty"`
	TimePosted      *uint32 `protobuf:"varint,2,opt,name=time_posted,json=timePosted" json:"time_posted,omitempty"`
}

func (x *CPlayer_UpdateSteamAnnouncementLastRead_Request) Reset() {
	*x = CPlayer_UpdateSteamAnnouncementLastRead_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_UpdateSteamAnnouncementLastRead_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_UpdateSteamAnnouncementLastRead_Request) ProtoMessage() {}

func (x *CPlayer_UpdateSteamAnnouncementLastRead_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_UpdateSteamAnnouncementLastRead_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_UpdateSteamAnnouncementLastRead_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamworkssdk_proto_rawDescGZIP(), []int{31}
}

func (x *CPlayer_UpdateSteamAnnouncementLastRead_Request) GetAnnouncementGid() uint64 {
	if x != nil && x.AnnouncementGid != nil {
		return *x.AnnouncementGid
	}
	return 0
}

func (x *CPlayer_UpdateSteamAnnouncementLastRead_Request) GetTimePosted() uint32 {
	if x != nil && x.TimePosted != nil {
		return *x.TimePosted
	}
	return 0
}

type CPlayer_UpdateSteamAnnouncementLastRead_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CPlayer_UpdateSteamAnnouncementLastRead_Response) Reset() {
	*x = CPlayer_UpdateSteamAnnouncementLastRead_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_UpdateSteamAnnouncementLastRead_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_UpdateSteamAnnouncementLastRead_Response) ProtoMessage() {}

func (x *CPlayer_UpdateSteamAnnouncementLastRead_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_UpdateSteamAnnouncementLastRead_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_UpdateSteamAnnouncementLastRead_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamworkssdk_proto_rawDescGZIP(), []int{32}
}

type CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid              *uint64 `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	MinutesPlayed        *uint32 `protobuf:"varint,2,opt,name=minutes_played,json=minutesPlayed" json:"minutes_played,omitempty"`
	MinutesPlayedForever *uint32 `protobuf:"varint,3,opt,name=minutes_played_forever,json=minutesPlayedForever" json:"minutes_played_forever,omitempty"`
}

func (x *CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo) Reset() {
	*x = CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo) ProtoMessage() {}

func (x *CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo.ProtoReflect.Descriptor instead.
func (*CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamworkssdk_proto_rawDescGZIP(), []int{4, 0}
}

func (x *CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo) GetMinutesPlayed() uint32 {
	if x != nil && x.MinutesPlayed != nil {
		return *x.MinutesPlayed
	}
	return 0
}

func (x *CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo) GetMinutesPlayedForever() uint32 {
	if x != nil && x.MinutesPlayedForever != nil {
		return *x.MinutesPlayedForever
	}
	return 0
}

type CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid              *uint64 `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	MinutesPlayed        *uint32 `protobuf:"varint,2,opt,name=minutes_played,json=minutesPlayed" json:"minutes_played,omitempty"`
	MinutesPlayedForever *uint32 `protobuf:"varint,3,opt,name=minutes_played_forever,json=minutesPlayedForever" json:"minutes_played_forever,omitempty"`
	InWishlist           *bool   `protobuf:"varint,4,opt,name=in_wishlist,json=inWishlist" json:"in_wishlist,omitempty"`
	Owned                *bool   `protobuf:"varint,5,opt,name=owned" json:"owned,omitempty"`
}

func (x *CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo) Reset() {
	*x = CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo) ProtoMessage() {}

func (x *CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo.ProtoReflect.Descriptor instead.
func (*CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamworkssdk_proto_rawDescGZIP(), []int{4, 1}
}

func (x *CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo) GetMinutesPlayed() uint32 {
	if x != nil && x.MinutesPlayed != nil {
		return *x.MinutesPlayed
	}
	return 0
}

func (x *CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo) GetMinutesPlayedForever() uint32 {
	if x != nil && x.MinutesPlayedForever != nil {
		return *x.MinutesPlayedForever
	}
	return 0
}

func (x *CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo) GetInWishlist() bool {
	if x != nil && x.InWishlist != nil {
		return *x.InWishlist
	}
	return false
}

func (x *CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo) GetOwned() bool {
	if x != nil && x.Owned != nil {
		return *x.Owned
	}
	return false
}

type CPlayer_GetGameBadgeLevels_Response_Badge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level       *int32  `protobuf:"varint,1,opt,name=level" json:"level,omitempty"`
	Series      *int32  `protobuf:"varint,2,opt,name=series" json:"series,omitempty"`
	BorderColor *uint32 `protobuf:"varint,3,opt,name=border_color,json=borderColor" json:"border_color,omitempty"`
}

func (x *CPlayer_GetGameBadgeLevels_Response_Badge) Reset() {
	*x = CPlayer_GetGameBadgeLevels_Response_Badge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_GetGameBadgeLevels_Response_Badge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetGameBadgeLevels_Response_Badge) ProtoMessage() {}

func (x *CPlayer_GetGameBadgeLevels_Response_Badge) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetGameBadgeLevels_Response_Badge.ProtoReflect.Descriptor instead.
func (*CPlayer_GetGameBadgeLevels_Response_Badge) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamworkssdk_proto_rawDescGZIP(), []int{6, 0}
}

func (x *CPlayer_GetGameBadgeLevels_Response_Badge) GetLevel() int32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *CPlayer_GetGameBadgeLevels_Response_Badge) GetSeries() int32 {
	if x != nil && x.Series != nil {
		return *x.Series
	}
	return 0
}

func (x *CPlayer_GetGameBadgeLevels_Response_Badge) GetBorderColor() uint32 {
	if x != nil && x.BorderColor != nil {
		return *x.BorderColor
	}
	return 0
}

type CPlayer_GetLastPlayedTimes_Response_Game struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid           *int32  `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	LastPlaytime    *uint32 `protobuf:"varint,2,opt,name=last_playtime,json=lastPlaytime" json:"last_playtime,omitempty"`
	Playtime_2Weeks *int32  `protobuf:"varint,3,opt,name=playtime_2weeks,json=playtime2weeks" json:"playtime_2weeks,omitempty"`
	PlaytimeForever *int32  `protobuf:"varint,4,opt,name=playtime_forever,json=playtimeForever" json:"playtime_forever,omitempty"`
	FirstPlaytime   *uint32 `protobuf:"varint,5,opt,name=first_playtime,json=firstPlaytime" json:"first_playtime,omitempty"`
}

func (x *CPlayer_GetLastPlayedTimes_Response_Game) Reset() {
	*x = CPlayer_GetLastPlayedTimes_Response_Game{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_GetLastPlayedTimes_Response_Game) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetLastPlayedTimes_Response_Game) ProtoMessage() {}

func (x *CPlayer_GetLastPlayedTimes_Response_Game) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetLastPlayedTimes_Response_Game.ProtoReflect.Descriptor instead.
func (*CPlayer_GetLastPlayedTimes_Response_Game) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamworkssdk_proto_rawDescGZIP(), []int{8, 0}
}

func (x *CPlayer_GetLastPlayedTimes_Response_Game) GetAppid() int32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CPlayer_GetLastPlayedTimes_Response_Game) GetLastPlaytime() uint32 {
	if x != nil && x.LastPlaytime != nil {
		return *x.LastPlaytime
	}
	return 0
}

func (x *CPlayer_GetLastPlayedTimes_Response_Game) GetPlaytime_2Weeks() int32 {
	if x != nil && x.Playtime_2Weeks != nil {
		return *x.Playtime_2Weeks
	}
	return 0
}

func (x *CPlayer_GetLastPlayedTimes_Response_Game) GetPlaytimeForever() int32 {
	if x != nil && x.PlaytimeForever != nil {
		return *x.PlaytimeForever
	}
	return 0
}

func (x *CPlayer_GetLastPlayedTimes_Response_Game) GetFirstPlaytime() uint32 {
	if x != nil && x.FirstPlaytime != nil {
		return *x.FirstPlaytime
	}
	return 0
}

type CPlayer_GetNicknameList_Response_PlayerNickname struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accountid *uint32 `protobuf:"fixed32,1,opt,name=accountid" json:"accountid,omitempty"`
	Nickname  *string `protobuf:"bytes,2,opt,name=nickname" json:"nickname,omitempty"`
}

func (x *CPlayer_GetNicknameList_Response_PlayerNickname) Reset() {
	*x = CPlayer_GetNicknameList_Response_PlayerNickname{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_GetNicknameList_Response_PlayerNickname) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetNicknameList_Response_PlayerNickname) ProtoMessage() {}

func (x *CPlayer_GetNicknameList_Response_PlayerNickname) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetNicknameList_Response_PlayerNickname.ProtoReflect.Descriptor instead.
func (*CPlayer_GetNicknameList_Response_PlayerNickname) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamworkssdk_proto_rawDescGZIP(), []int{12, 0}
}

func (x *CPlayer_GetNicknameList_Response_PlayerNickname) GetAccountid() uint32 {
	if x != nil && x.Accountid != nil {
		return *x.Accountid
	}
	return 0
}

func (x *CPlayer_GetNicknameList_Response_PlayerNickname) GetNickname() string {
	if x != nil && x.Nickname != nil {
		return *x.Nickname
	}
	return ""
}

var File_steammessages_player_steamworkssdk_proto protoreflect.FileDescriptor

var file_steammessages_player_steamworkssdk_proto_rawDesc = []byte{
	0x0a, 0x28, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x73, 0x64, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x64, 0x6f, 0x74, 0x61,
	0x1a, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x34, 0x0a, 0x32, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x4d,
	0x75, 0x74, 0x75, 0x61, 0x6c, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x46, 0x6f, 0x72, 0x49,
	0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x7d, 0x0a, 0x26, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x4d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x19, 0x6d, 0x75,
	0x74, 0x75, 0x61, 0x6c, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x16, 0x6d,
	0x75, 0x74, 0x75, 0x61, 0x6c, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x73, 0x22, 0xb3, 0x01, 0x0a, 0x33, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x47, 0x65, 0x74, 0x4d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x73, 0x46, 0x6f, 0x72, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7c, 0x0a,
	0x24, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x5f, 0x6d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x64, 0x6f,
	0x74, 0x61, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x49, 0x6e, 0x63, 0x6f, 0x6d,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x6d,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x22, 0x3e, 0x0a, 0x26, 0x43,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x73, 0x47, 0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x22, 0xbd, 0x07, 0x0a, 0x27,
	0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x09, 0x79, 0x6f, 0x75, 0x72, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x64, 0x6f, 0x74,
	0x61, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4f, 0x77, 0x6e, 0x47, 0x61, 0x6d,
	0x65, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x79, 0x6f, 0x75, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x5a, 0x0a, 0x07, 0x69, 0x6e, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x47, 0x61,
	0x6d, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x70,
	0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x69, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x12,
	0x6a, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74,
	0x6c, 0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e,
	0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x47,
	0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x64, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x12, 0x62, 0x0a, 0x0b, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x41, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x47, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x70, 0x6c,
	0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x45, 0x76, 0x65, 0x72, 0x12,
	0x55, 0x0a, 0x04, 0x6f, 0x77, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e,
	0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x04, 0x6f, 0x77, 0x6e, 0x73, 0x12, 0x62, 0x0a, 0x0b, 0x69, 0x6e, 0x5f, 0x77, 0x69, 0x73,
	0x68, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x64, 0x6f,
	0x74, 0x61, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a,
	0x69, 0x6e, 0x57, 0x69, 0x73, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x1a, 0x8c, 0x01, 0x0a, 0x13, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e,
	0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x14, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x64, 0x46, 0x6f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x1a, 0xbf, 0x01, 0x0a, 0x0f, 0x4f, 0x77,
	0x6e, 0x47, 0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x75, 0x74,
	0x65, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x12, 0x34,
	0x0a, 0x16, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64,
	0x5f, 0x66, 0x6f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14,
	0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x46, 0x6f, 0x72,
	0x65, 0x76, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x5f, 0x77, 0x69, 0x73, 0x68, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x6e, 0x57, 0x69, 0x73,
	0x68, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x22, 0x3a, 0x0a, 0x22, 0x43,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x61,
	0x64, 0x67, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x22, 0xeb, 0x01, 0x0a, 0x23, 0x43, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x61, 0x64, 0x67, 0x65,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x47, 0x0a, 0x06, 0x62, 0x61, 0x64, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x61, 0x64, 0x67, 0x65, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42, 0x61,
	0x64, 0x67, 0x65, 0x52, 0x06, 0x62, 0x61, 0x64, 0x67, 0x65, 0x73, 0x1a, 0x58, 0x0a, 0x05, 0x42,
	0x61, 0x64, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x4c, 0x0a, 0x22, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6d,
	0x69, 0x6e, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x64, 0x22, 0xaa, 0x02, 0x0a, 0x23, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x05, 0x67,
	0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x64, 0x6f, 0x74,
	0x61, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73,
	0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x05, 0x67, 0x61, 0x6d, 0x65,
	0x73, 0x1a, 0xbc, 0x01, 0x0a, 0x04, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70,
	0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x6c, 0x61,
	0x79, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x32, 0x77, 0x65, 0x65, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x70, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x32, 0x77, 0x65, 0x65, 0x6b, 0x73, 0x12, 0x29,
	0x0a, 0x10, 0x70, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x76,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x74, 0x69,
	0x6d, 0x65, 0x46, 0x6f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x66, 0x69, 0x72, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65,
	0x22, 0x1b, 0x0a, 0x19, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x41, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x53, 0x53, 0x41, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x1c, 0x0a,
	0x1a, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x53,
	0x53, 0x41, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x0a, 0x1f, 0x43,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61,
	0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xc3,
	0x01, 0x0a, 0x20, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x4e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x09, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x09, 0x6e,
	0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x1a, 0x4a, 0x0a, 0x0e, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x29, 0x0a, 0x27, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x8f, 0x05, 0x0a, 0x14, 0x50, 0x65, 0x72, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x55, 0x0a, 0x18, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x45, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x17, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53,
	0x68, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x61, 0x6d, 0x65, 0x12, 0x55, 0x0a, 0x18, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x6f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x64, 0x6f,
	0x74, 0x61, 0x2e, 0x45, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x17, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x12, 0x59, 0x0a, 0x1a, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x45, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x19, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53,
	0x68, 0x6f, 0x77, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x11, 0x73,
	0x6f, 0x75, 0x6e, 0x64, 0x73, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x61, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x45, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x10, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x69, 0x6e,
	0x67, 0x61, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x11, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x5f, 0x73,
	0x68, 0x6f, 0x77, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1a, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x45, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x10, 0x73, 0x6f, 0x75,
	0x6e, 0x64, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x4b, 0x0a,
	0x13, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x64, 0x6f, 0x74,
	0x61, 0x2e, 0x45, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x12, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x53, 0x68,
	0x6f, 0x77, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x55, 0x0a, 0x18, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x64,
	0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x64,
	0x6f, 0x74, 0x61, 0x2e, 0x45, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x17, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x6e, 0x64, 0x6d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x22, 0x68, 0x0a, 0x28, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74,
	0x50, 0x65, 0x72, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a,
	0x0b, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x50, 0x65, 0x72, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x0b,
	0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x22, 0x67, 0x0a, 0x27, 0x43,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x53, 0x65, 0x74, 0x50, 0x65, 0x72, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x6f,
	0x74, 0x61, 0x2e, 0x50, 0x65, 0x72, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x22, 0x2a, 0x0a, 0x28, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x53, 0x65, 0x74, 0x50, 0x65, 0x72, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x35, 0x0a, 0x19, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x41, 0x64, 0x64, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x22, 0x6e, 0x0a, 0x1a, 0x43, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x41, 0x64, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f,
	0x73, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x13, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x12, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x22, 0x38, 0x0a, 0x1c, 0x43, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69,
	0x64, 0x22, 0x50, 0x0a, 0x1d, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x12, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x68, 0x69, 0x70, 0x22, 0x54, 0x0a, 0x1c, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x49,
	0x67, 0x6e, 0x6f, 0x72, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x6e, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x75, 0x6e, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x22, 0x50, 0x0a, 0x1d, 0x43, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x66, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x22, 0x29, 0x0a, 0x27, 0x43,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xf6, 0x01, 0x0a, 0x1c, 0x43, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x50, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x1b, 0x68, 0x69, 0x64, 0x65, 0x5f,
	0x61, 0x64, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x69,
	0x6f, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x68, 0x69,
	0x64, 0x65, 0x41, 0x64, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x69,
	0x6f, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x61,
	0x64, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x78,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x68, 0x69, 0x64, 0x65, 0x41, 0x64, 0x75, 0x6c,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x78, 0x12, 0x35, 0x0a, 0x16, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x6e, 0x69, 0x63, 0x6b,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22,
	0x70, 0x0a, 0x28, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0b, 0x70,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x22, 0x6f, 0x0a, 0x27, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x53, 0x65, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x0b,
	0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x22, 0x2a, 0x0a, 0x28, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x53, 0x65,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4a,
	0x0a, 0x2c, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0xf1, 0x01, 0x0a, 0x2d, 0x43,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x33, 0x0a, 0x15, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x48,
	0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x6e, 0x6e, 0x6f, 0x75,
	0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55,
	0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x6f, 0x73,
	0x74, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x67, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x61,
	0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x69, 0x64, 0x22, 0x7d,
	0x0a, 0x2f, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x61, 0x64, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x67, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x61, 0x6e, 0x6e,
	0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x22, 0x32, 0x0a,
	0x30, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x61, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2a, 0x85, 0x01, 0x0a, 0x14, 0x45, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x2a, 0x0a, 0x26, 0x6b, 0x5f,
	0x45, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x55, 0x73, 0x65, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x41, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x6b, 0x5f, 0x45, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x4e, 0x65, 0x76, 0x65, 0x72, 0x10, 0x02, 0x32, 0xc3, 0x15, 0x0a, 0x06, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x12, 0xf9, 0x01, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x4d, 0x75, 0x74, 0x75,
	0x61, 0x6c, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x46, 0x6f, 0x72, 0x49, 0x6e, 0x63, 0x6f,
	0x6d, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x12, 0x38, 0x2e, 0x64, 0x6f,
	0x74, 0x61, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x4d, 0x75,
	0x74, 0x75, 0x61, 0x6c, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x46, 0x6f, 0x72, 0x49, 0x6e,
	0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x4d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x73, 0x46, 0x6f, 0x72, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x5e, 0x82, 0xb5, 0x18, 0x5a, 0x47, 0x65, 0x74, 0x20, 0x6d, 0x65, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x6d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x20, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x20,
	0x66, 0x6f, 0x72, 0x20, 0x65, 0x61, 0x63, 0x68, 0x20, 0x6f, 0x66, 0x20, 0x6d, 0x79, 0x20, 0x70,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x20,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x20, 0x28, 0x69, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64,
	0x75, 0x61, 0x6c, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x63, 0x6c, 0x61, 0x6e, 0x73, 0x29, 0x2e,
	0x12, 0xc2, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x47,
	0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x2e, 0x64, 0x6f,
	0x74, 0x61, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x64, 0x6f, 0x74, 0x61,
	0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4b, 0x82, 0xb5, 0x18, 0x47, 0x47, 0x65,
	0x74, 0x20, 0x61, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x66, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x73, 0x20, 0x77, 0x68, 0x6f, 0x20, 0x61, 0x72, 0x65, 0x20, 0x70, 0x6c, 0x61, 0x79,
	0x69, 0x6e, 0x67, 0x2c, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64,
	0x2c, 0x20, 0x6f, 0x77, 0x6e, 0x2c, 0x20, 0x6f, 0x72, 0x20, 0x77, 0x61, 0x6e, 0x74, 0x20, 0x61,
	0x20, 0x67, 0x61, 0x6d, 0x65, 0x12, 0xc0, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d,
	0x65, 0x42, 0x61, 0x64, 0x67, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x12, 0x28, 0x2e, 0x64,
	0x6f, 0x74, 0x61, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x47,
	0x61, 0x6d, 0x65, 0x42, 0x61, 0x64, 0x67, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x61, 0x64,
	0x67, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x55, 0x82, 0xb5, 0x18, 0x51, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x20, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x20, 0x6f,
	0x66, 0x20, 0x61, 0x20, 0x75, 0x73, 0x65, 0x72, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x42, 0x61,
	0x64, 0x67, 0x65, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x67, 0x61, 0x6d, 0x65, 0x2c, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x69, 0x66, 0x20, 0x69,
	0x74, 0x27, 0x73, 0x20, 0x66, 0x6f, 0x69, 0x6c, 0x12, 0x9f, 0x01, 0x0a, 0x18, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x28, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x29, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47,
	0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82, 0xb5, 0x18, 0x2a,
	0x47, 0x65, 0x74, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x2d, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x64, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x6d, 0x0a, 0x09, 0x41, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x53, 0x53, 0x41, 0x12, 0x1f, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x53, 0x53, 0x41,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e,
	0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x53, 0x53,
	0x41, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0x82, 0xb5, 0x18, 0x19,
	0x55, 0x73, 0x65, 0x72, 0x20, 0x69, 0x73, 0x20, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6e,
	0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x53, 0x53, 0x41, 0x12, 0x9e, 0x01, 0x0a, 0x0f, 0x47, 0x65,
	0x74, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x25, 0x2e,
	0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74,
	0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3c, 0x82, 0xb5,
	0x18, 0x38, 0x47, 0x65, 0x74, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20,
	0x6f, 0x66, 0x20, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x20, 0x74, 0x68, 0x69,
	0x73, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x68, 0x61, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x6f,
	0x74, 0x68, 0x65, 0x72, 0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0xc7, 0x01, 0x0a, 0x17, 0x47,
	0x65, 0x74, 0x50, 0x65, 0x72, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x2d, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4d, 0x82, 0xb5, 0x18, 0x49, 0x47, 0x65, 0x74, 0x73, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x70, 0x65, 0x72, 0x2d,
	0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x20, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x68, 0x61, 0x73,
	0x20, 0x73, 0x65, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x12, 0xc1, 0x01, 0x0a, 0x17, 0x53, 0x65, 0x74, 0x50, 0x65, 0x72, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x12, 0x2d, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x53, 0x65, 0x74, 0x50, 0x65, 0x72, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2e, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x53,
	0x65, 0x74, 0x50, 0x65, 0x72, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x47, 0x82, 0xb5, 0x18, 0x43, 0x53, 0x65, 0x74, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f,
	0x67, 0x67, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x75, 0x73, 0x65, 0x72, 0x27, 0x73, 0x20, 0x70,
	0x65, 0x72, 0x2d, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x20, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x67, 0x69,
	0x76, 0x65, 0x6e, 0x20, 0x75, 0x73, 0x65, 0x72, 0x12, 0x7d, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x12, 0x1f, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x41, 0x64, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x41, 0x64, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82, 0xb5, 0x18, 0x29, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x61,
	0x20, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x12, 0x8c, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x12, 0x22, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e,
	0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x64,
	0x6f, 0x74, 0x61, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x33, 0x82, 0xb5, 0x18, 0x2f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x73, 0x20, 0x61,
	0x20, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x20, 0x6f, 0x72, 0x20, 0x69, 0x67, 0x6e, 0x6f, 0x72,
	0x65, 0x73, 0x20, 0x61, 0x20, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x20, 0x73, 0x75, 0x67, 0x67,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xb0, 0x01, 0x0a, 0x0c, 0x49, 0x67, 0x6e, 0x6f, 0x72,
	0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x12, 0x22, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x64, 0x6f,
	0x74, 0x61, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x49, 0x67, 0x6e, 0x6f, 0x72,
	0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x57, 0x82, 0xb5, 0x18, 0x53, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x20, 0x6f, 0x72, 0x20,
	0x75, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x20, 0x20, 0x44, 0x65, 0x73, 0x70, 0x69, 0x74, 0x65, 0x20, 0x6e,
	0x61, 0x6d, 0x65, 0x2c, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x61, 0x20, 0x6e, 0x6f,
	0x6e, 0x2d, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x12, 0xa8, 0x01, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x2d, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82, 0xb5, 0x18, 0x2a, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x27, 0x73, 0x20, 0x63,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x20, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x12, 0xa5, 0x01, 0x0a, 0x17, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x79, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x12, 0x2d, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x53, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x50, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2e, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x53,
	0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x50, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x2b, 0x82, 0xb5, 0x18, 0x27, 0x53, 0x65, 0x74, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x27, 0x73, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x20, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0xe8, 0x01, 0x0a,
	0x1c, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x41, 0x6e, 0x6e, 0x6f,
	0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x32, 0x2e,
	0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74,
	0x4e, 0x65, 0x77, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x33, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x41, 0x6e, 0x6e, 0x6f,
	0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5f, 0x82, 0xb5, 0x18, 0x5b, 0x43, 0x61, 0x6c, 0x63,
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x73, 0x20, 0x77, 0x68, 0x61, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x55, 0x49, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x72,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0xc6, 0x01, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x61, 0x64, 0x12, 0x35, 0x2e, 0x64, 0x6f,
	0x74, 0x61, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x61, 0x64, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x36, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x41, 0x6e, 0x6e,
	0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x61,
	0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0x82, 0xb5, 0x18, 0x30,
	0x4d, 0x61, 0x72, 0x6b, 0x73, 0x20, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x20, 0x61, 0x6e, 0x6e,
	0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x20, 0x72, 0x65, 0x61, 0x64, 0x20, 0x62, 0x79, 0x20, 0x75, 0x73, 0x65, 0x72,
	0x1a, 0x2d, 0x82, 0xb5, 0x18, 0x29, 0x41, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20,
	0x66, 0x6f, 0x72, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x20, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x20, 0x64, 0x61, 0x74, 0x61, 0x42,
	0x28, 0x5a, 0x23, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f,
	0x74, 0x61, 0x62, 0x75, 0x66, 0x66, 0x2f, 0x6d, 0x61, 0x6e, 0x74, 0x61, 0x2f, 0x64, 0x6f, 0x74,
	0x61, 0x3b, 0x64, 0x6f, 0x74, 0x61, 0x80, 0x01, 0x01,
}

var (
	file_steammessages_player_steamworkssdk_proto_rawDescOnce sync.Once
	file_steammessages_player_steamworkssdk_proto_rawDescData = file_steammessages_player_steamworkssdk_proto_rawDesc
)

func file_steammessages_player_steamworkssdk_proto_rawDescGZIP() []byte {
	file_steammessages_player_steamworkssdk_proto_rawDescOnce.Do(func() {
		file_steammessages_player_steamworkssdk_proto_rawDescData = protoimpl.X.CompressGZIP(file_steammessages_player_steamworkssdk_proto_rawDescData)
	})
	return file_steammessages_player_steamworkssdk_proto_rawDescData
}

var file_steammessages_player_steamworkssdk_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_steammessages_player_steamworkssdk_proto_msgTypes = make([]protoimpl.MessageInfo, 38)
var file_steammessages_player_steamworkssdk_proto_goTypes = []interface{}{
	(ENotificationSetting)(0),                                           // 0: dota.ENotificationSetting
	(*CPlayer_GetMutualFriendsForIncomingInvites_Request)(nil),          // 1: dota.CPlayer_GetMutualFriendsForIncomingInvites_Request
	(*CPlayer_IncomingInviteMutualFriendList)(nil),                      // 2: dota.CPlayer_IncomingInviteMutualFriendList
	(*CPlayer_GetMutualFriendsForIncomingInvites_Response)(nil),         // 3: dota.CPlayer_GetMutualFriendsForIncomingInvites_Response
	(*CPlayer_GetFriendsGameplayInfo_Request)(nil),                      // 4: dota.CPlayer_GetFriendsGameplayInfo_Request
	(*CPlayer_GetFriendsGameplayInfo_Response)(nil),                     // 5: dota.CPlayer_GetFriendsGameplayInfo_Response
	(*CPlayer_GetGameBadgeLevels_Request)(nil),                          // 6: dota.CPlayer_GetGameBadgeLevels_Request
	(*CPlayer_GetGameBadgeLevels_Response)(nil),                         // 7: dota.CPlayer_GetGameBadgeLevels_Response
	(*CPlayer_GetLastPlayedTimes_Request)(nil),                          // 8: dota.CPlayer_GetLastPlayedTimes_Request
	(*CPlayer_GetLastPlayedTimes_Response)(nil),                         // 9: dota.CPlayer_GetLastPlayedTimes_Response
	(*CPlayer_AcceptSSA_Request)(nil),                                   // 10: dota.CPlayer_AcceptSSA_Request
	(*CPlayer_AcceptSSA_Response)(nil),                                  // 11: dota.CPlayer_AcceptSSA_Response
	(*CPlayer_GetNicknameList_Request)(nil),                             // 12: dota.CPlayer_GetNicknameList_Request
	(*CPlayer_GetNicknameList_Response)(nil),                            // 13: dota.CPlayer_GetNicknameList_Response
	(*CPlayer_GetPerFriendPreferences_Request)(nil),                     // 14: dota.CPlayer_GetPerFriendPreferences_Request
	(*PerFriendPreferences)(nil),                                        // 15: dota.PerFriendPreferences
	(*CPlayer_GetPerFriendPreferences_Response)(nil),                    // 16: dota.CPlayer_GetPerFriendPreferences_Response
	(*CPlayer_SetPerFriendPreferences_Request)(nil),                     // 17: dota.CPlayer_SetPerFriendPreferences_Request
	(*CPlayer_SetPerFriendPreferences_Response)(nil),                    // 18: dota.CPlayer_SetPerFriendPreferences_Response
	(*CPlayer_AddFriend_Request)(nil),                                   // 19: dota.CPlayer_AddFriend_Request
	(*CPlayer_AddFriend_Response)(nil),                                  // 20: dota.CPlayer_AddFriend_Response
	(*CPlayer_RemoveFriend_Request)(nil),                                // 21: dota.CPlayer_RemoveFriend_Request
	(*CPlayer_RemoveFriend_Response)(nil),                               // 22: dota.CPlayer_RemoveFriend_Response
	(*CPlayer_IgnoreFriend_Request)(nil),                                // 23: dota.CPlayer_IgnoreFriend_Request
	(*CPlayer_IgnoreFriend_Response)(nil),                               // 24: dota.CPlayer_IgnoreFriend_Response
	(*CPlayer_GetCommunityPreferences_Request)(nil),                     // 25: dota.CPlayer_GetCommunityPreferences_Request
	(*CPlayer_CommunityPreferences)(nil),                                // 26: dota.CPlayer_CommunityPreferences
	(*CPlayer_GetCommunityPreferences_Response)(nil),                    // 27: dota.CPlayer_GetCommunityPreferences_Response
	(*CPlayer_SetCommunityPreferences_Request)(nil),                     // 28: dota.CPlayer_SetCommunityPreferences_Request
	(*CPlayer_SetCommunityPreferences_Response)(nil),                    // 29: dota.CPlayer_SetCommunityPreferences_Response
	(*CPlayer_GetNewSteamAnnouncementState_Request)(nil),                // 30: dota.CPlayer_GetNewSteamAnnouncementState_Request
	(*CPlayer_GetNewSteamAnnouncementState_Response)(nil),               // 31: dota.CPlayer_GetNewSteamAnnouncementState_Response
	(*CPlayer_UpdateSteamAnnouncementLastRead_Request)(nil),             // 32: dota.CPlayer_UpdateSteamAnnouncementLastRead_Request
	(*CPlayer_UpdateSteamAnnouncementLastRead_Response)(nil),            // 33: dota.CPlayer_UpdateSteamAnnouncementLastRead_Response
	(*CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo)(nil), // 34: dota.CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo
	(*CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo)(nil),     // 35: dota.CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo
	(*CPlayer_GetGameBadgeLevels_Response_Badge)(nil),                   // 36: dota.CPlayer_GetGameBadgeLevels_Response.Badge
	(*CPlayer_GetLastPlayedTimes_Response_Game)(nil),                    // 37: dota.CPlayer_GetLastPlayedTimes_Response.Game
	(*CPlayer_GetNicknameList_Response_PlayerNickname)(nil),             // 38: dota.CPlayer_GetNicknameList_Response.PlayerNickname
}
var file_steammessages_player_steamworkssdk_proto_depIdxs = []int32{
	2,  // 0: dota.CPlayer_GetMutualFriendsForIncomingInvites_Response.incoming_invite_mutual_friends_lists:type_name -> dota.CPlayer_IncomingInviteMutualFriendList
	35, // 1: dota.CPlayer_GetFriendsGameplayInfo_Response.your_info:type_name -> dota.CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo
	34, // 2: dota.CPlayer_GetFriendsGameplayInfo_Response.in_game:type_name -> dota.CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo
	34, // 3: dota.CPlayer_GetFriendsGameplayInfo_Response.played_recently:type_name -> dota.CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo
	34, // 4: dota.CPlayer_GetFriendsGameplayInfo_Response.played_ever:type_name -> dota.CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo
	34, // 5: dota.CPlayer_GetFriendsGameplayInfo_Response.owns:type_name -> dota.CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo
	34, // 6: dota.CPlayer_GetFriendsGameplayInfo_Response.in_wishlist:type_name -> dota.CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo
	36, // 7: dota.CPlayer_GetGameBadgeLevels_Response.badges:type_name -> dota.CPlayer_GetGameBadgeLevels_Response.Badge
	37, // 8: dota.CPlayer_GetLastPlayedTimes_Response.games:type_name -> dota.CPlayer_GetLastPlayedTimes_Response.Game
	38, // 9: dota.CPlayer_GetNicknameList_Response.nicknames:type_name -> dota.CPlayer_GetNicknameList_Response.PlayerNickname
	0,  // 10: dota.PerFriendPreferences.notifications_showingame:type_name -> dota.ENotificationSetting
	0,  // 11: dota.PerFriendPreferences.notifications_showonline:type_name -> dota.ENotificationSetting
	0,  // 12: dota.PerFriendPreferences.notifications_showmessages:type_name -> dota.ENotificationSetting
	0,  // 13: dota.PerFriendPreferences.sounds_showingame:type_name -> dota.ENotificationSetting
	0,  // 14: dota.PerFriendPreferences.sounds_showonline:type_name -> dota.ENotificationSetting
	0,  // 15: dota.PerFriendPreferences.sounds_showmessages:type_name -> dota.ENotificationSetting
	0,  // 16: dota.PerFriendPreferences.notifications_sendmobile:type_name -> dota.ENotificationSetting
	15, // 17: dota.CPlayer_GetPerFriendPreferences_Response.preferences:type_name -> dota.PerFriendPreferences
	15, // 18: dota.CPlayer_SetPerFriendPreferences_Request.preferences:type_name -> dota.PerFriendPreferences
	26, // 19: dota.CPlayer_GetCommunityPreferences_Response.preferences:type_name -> dota.CPlayer_CommunityPreferences
	26, // 20: dota.CPlayer_SetCommunityPreferences_Request.preferences:type_name -> dota.CPlayer_CommunityPreferences
	1,  // 21: dota.Player.GetMutualFriendsForIncomingInvites:input_type -> dota.CPlayer_GetMutualFriendsForIncomingInvites_Request
	4,  // 22: dota.Player.GetFriendsGameplayInfo:input_type -> dota.CPlayer_GetFriendsGameplayInfo_Request
	6,  // 23: dota.Player.GetGameBadgeLevels:input_type -> dota.CPlayer_GetGameBadgeLevels_Request
	8,  // 24: dota.Player.ClientGetLastPlayedTimes:input_type -> dota.CPlayer_GetLastPlayedTimes_Request
	10, // 25: dota.Player.AcceptSSA:input_type -> dota.CPlayer_AcceptSSA_Request
	12, // 26: dota.Player.GetNicknameList:input_type -> dota.CPlayer_GetNicknameList_Request
	14, // 27: dota.Player.GetPerFriendPreferences:input_type -> dota.CPlayer_GetPerFriendPreferences_Request
	17, // 28: dota.Player.SetPerFriendPreferences:input_type -> dota.CPlayer_SetPerFriendPreferences_Request
	19, // 29: dota.Player.AddFriend:input_type -> dota.CPlayer_AddFriend_Request
	21, // 30: dota.Player.RemoveFriend:input_type -> dota.CPlayer_RemoveFriend_Request
	23, // 31: dota.Player.IgnoreFriend:input_type -> dota.CPlayer_IgnoreFriend_Request
	25, // 32: dota.Player.GetCommunityPreferences:input_type -> dota.CPlayer_GetCommunityPreferences_Request
	28, // 33: dota.Player.SetCommunityPreferences:input_type -> dota.CPlayer_SetCommunityPreferences_Request
	30, // 34: dota.Player.GetNewSteamAnnouncementState:input_type -> dota.CPlayer_GetNewSteamAnnouncementState_Request
	32, // 35: dota.Player.UpdateSteamAnnouncementLastRead:input_type -> dota.CPlayer_UpdateSteamAnnouncementLastRead_Request
	3,  // 36: dota.Player.GetMutualFriendsForIncomingInvites:output_type -> dota.CPlayer_GetMutualFriendsForIncomingInvites_Response
	5,  // 37: dota.Player.GetFriendsGameplayInfo:output_type -> dota.CPlayer_GetFriendsGameplayInfo_Response
	7,  // 38: dota.Player.GetGameBadgeLevels:output_type -> dota.CPlayer_GetGameBadgeLevels_Response
	9,  // 39: dota.Player.ClientGetLastPlayedTimes:output_type -> dota.CPlayer_GetLastPlayedTimes_Response
	11, // 40: dota.Player.AcceptSSA:output_type -> dota.CPlayer_AcceptSSA_Response
	13, // 41: dota.Player.GetNicknameList:output_type -> dota.CPlayer_GetNicknameList_Response
	16, // 42: dota.Player.GetPerFriendPreferences:output_type -> dota.CPlayer_GetPerFriendPreferences_Response
	18, // 43: dota.Player.SetPerFriendPreferences:output_type -> dota.CPlayer_SetPerFriendPreferences_Response
	20, // 44: dota.Player.AddFriend:output_type -> dota.CPlayer_AddFriend_Response
	22, // 45: dota.Player.RemoveFriend:output_type -> dota.CPlayer_RemoveFriend_Response
	24, // 46: dota.Player.IgnoreFriend:output_type -> dota.CPlayer_IgnoreFriend_Response
	27, // 47: dota.Player.GetCommunityPreferences:output_type -> dota.CPlayer_GetCommunityPreferences_Response
	29, // 48: dota.Player.SetCommunityPreferences:output_type -> dota.CPlayer_SetCommunityPreferences_Response
	31, // 49: dota.Player.GetNewSteamAnnouncementState:output_type -> dota.CPlayer_GetNewSteamAnnouncementState_Response
	33, // 50: dota.Player.UpdateSteamAnnouncementLastRead:output_type -> dota.CPlayer_UpdateSteamAnnouncementLastRead_Response
	36, // [36:51] is the sub-list for method output_type
	21, // [21:36] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_steammessages_player_steamworkssdk_proto_init() }
func file_steammessages_player_steamworkssdk_proto_init() {
	if File_steammessages_player_steamworkssdk_proto != nil {
		return
	}
	file_steammessages_unified_base_steamworkssdk_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_steammessages_player_steamworkssdk_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPlayer_GetMutualFriendsForIncomingInvites_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamworkssdk_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPlayer_IncomingInviteMutualFriendList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamworkssdk_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPlayer_GetMutualFriendsForIncomingInvites_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamworkssdk_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPlayer_GetFriendsGameplayInfo_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamworkssdk_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPlayer_GetFriendsGameplayInfo_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamworkssdk_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPlayer_GetGameBadgeLevels_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamworkssdk_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPlayer_GetGameBadgeLevels_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamworkssdk_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPlayer_GetLastPlayedTimes_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamworkssdk_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPlayer_GetLastPlayedTimes_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamworkssdk_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPlayer_AcceptSSA_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamworkssdk_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPlayer_AcceptSSA_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamworkssdk_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPlayer_GetNicknameList_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamworkssdk_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPlayer_GetNicknameList_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamworkssdk_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPlayer_GetPerFriendPreferences_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamworkssdk_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerFriendPreferences); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamworkssdk_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPlayer_GetPerFriendPreferences_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamworkssdk_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPlayer_SetPerFriendPreferences_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamworkssdk_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPlayer_SetPerFriendPreferences_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamworkssdk_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPlayer_AddFriend_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamworkssdk_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPlayer_AddFriend_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamworkssdk_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPlayer_RemoveFriend_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamworkssdk_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPlayer_RemoveFriend_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamworkssdk_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPlayer_IgnoreFriend_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamworkssdk_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPlayer_IgnoreFriend_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamworkssdk_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPlayer_GetCommunityPreferences_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamworkssdk_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPlayer_CommunityPreferences); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamworkssdk_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPlayer_GetCommunityPreferences_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamworkssdk_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPlayer_SetCommunityPreferences_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamworkssdk_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPlayer_SetCommunityPreferences_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamworkssdk_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPlayer_GetNewSteamAnnouncementState_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamworkssdk_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPlayer_GetNewSteamAnnouncementState_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamworkssdk_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPlayer_UpdateSteamAnnouncementLastRead_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamworkssdk_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPlayer_UpdateSteamAnnouncementLastRead_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamworkssdk_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamworkssdk_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamworkssdk_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPlayer_GetGameBadgeLevels_Response_Badge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamworkssdk_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPlayer_GetLastPlayedTimes_Response_Game); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_player_steamworkssdk_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPlayer_GetNicknameList_Response_PlayerNickname); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_steammessages_player_steamworkssdk_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   38,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_steammessages_player_steamworkssdk_proto_goTypes,
		DependencyIndexes: file_steammessages_player_steamworkssdk_proto_depIdxs,
		EnumInfos:         file_steammessages_player_steamworkssdk_proto_enumTypes,
		MessageInfos:      file_steammessages_player_steamworkssdk_proto_msgTypes,
	}.Build()
	File_steammessages_player_steamworkssdk_proto = out.File
	file_steammessages_player_steamworkssdk_proto_rawDesc = nil
	file_steammessages_player_steamworkssdk_proto_goTypes = nil
	file_steammessages_player_steamworkssdk_proto_depIdxs = nil
}
