// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.5
// source: dota_scenariomessages.proto

package dota

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CScenario_Position struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X *float32 `protobuf:"fixed32,1,opt,name=x" json:"x,omitempty"`
	Y *float32 `protobuf:"fixed32,2,opt,name=y" json:"y,omitempty"`
}

func (x *CScenario_Position) Reset() {
	*x = CScenario_Position{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_scenariomessages_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CScenario_Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CScenario_Position) ProtoMessage() {}

func (x *CScenario_Position) ProtoReflect() protoreflect.Message {
	mi := &file_dota_scenariomessages_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CScenario_Position.ProtoReflect.Descriptor instead.
func (*CScenario_Position) Descriptor() ([]byte, []int) {
	return file_dota_scenariomessages_proto_rawDescGZIP(), []int{0}
}

func (x *CScenario_Position) GetX() float32 {
	if x != nil && x.X != nil {
		return *x.X
	}
	return 0
}

func (x *CScenario_Position) GetY() float32 {
	if x != nil && x.Y != nil {
		return *x.Y
	}
	return 0
}

type CScenarioGame_RoshanSpawner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KillCount  *int32   `protobuf:"varint,1,opt,name=kill_count,json=killCount" json:"kill_count,omitempty"`
	State      *int32   `protobuf:"varint,2,opt,name=state" json:"state,omitempty"`
	Cooldown   *float32 `protobuf:"fixed32,3,opt,name=cooldown" json:"cooldown,omitempty"`
	KillerTeam *int32   `protobuf:"varint,4,opt,name=killer_team,json=killerTeam" json:"killer_team,omitempty"`
}

func (x *CScenarioGame_RoshanSpawner) Reset() {
	*x = CScenarioGame_RoshanSpawner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_scenariomessages_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CScenarioGame_RoshanSpawner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CScenarioGame_RoshanSpawner) ProtoMessage() {}

func (x *CScenarioGame_RoshanSpawner) ProtoReflect() protoreflect.Message {
	mi := &file_dota_scenariomessages_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CScenarioGame_RoshanSpawner.ProtoReflect.Descriptor instead.
func (*CScenarioGame_RoshanSpawner) Descriptor() ([]byte, []int) {
	return file_dota_scenariomessages_proto_rawDescGZIP(), []int{1}
}

func (x *CScenarioGame_RoshanSpawner) GetKillCount() int32 {
	if x != nil && x.KillCount != nil {
		return *x.KillCount
	}
	return 0
}

func (x *CScenarioGame_RoshanSpawner) GetState() int32 {
	if x != nil && x.State != nil {
		return *x.State
	}
	return 0
}

func (x *CScenarioGame_RoshanSpawner) GetCooldown() float32 {
	if x != nil && x.Cooldown != nil {
		return *x.Cooldown
	}
	return 0
}

func (x *CScenarioGame_RoshanSpawner) GetKillerTeam() int32 {
	if x != nil && x.KillerTeam != nil {
		return *x.KillerTeam
	}
	return 0
}

type CScenarioEnt_Courier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamNumber    *int32   `protobuf:"varint,1,opt,name=team_number,json=teamNumber" json:"team_number,omitempty"`
	OwnerPlayerId *int32   `protobuf:"varint,2,opt,name=owner_player_id,json=ownerPlayerId" json:"owner_player_id,omitempty"`
	Cooldown      *float32 `protobuf:"fixed32,3,opt,name=cooldown" json:"cooldown,omitempty"`
}

func (x *CScenarioEnt_Courier) Reset() {
	*x = CScenarioEnt_Courier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_scenariomessages_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CScenarioEnt_Courier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CScenarioEnt_Courier) ProtoMessage() {}

func (x *CScenarioEnt_Courier) ProtoReflect() protoreflect.Message {
	mi := &file_dota_scenariomessages_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CScenarioEnt_Courier.ProtoReflect.Descriptor instead.
func (*CScenarioEnt_Courier) Descriptor() ([]byte, []int) {
	return file_dota_scenariomessages_proto_rawDescGZIP(), []int{2}
}

func (x *CScenarioEnt_Courier) GetTeamNumber() int32 {
	if x != nil && x.TeamNumber != nil {
		return *x.TeamNumber
	}
	return 0
}

func (x *CScenarioEnt_Courier) GetOwnerPlayerId() int32 {
	if x != nil && x.OwnerPlayerId != nil {
		return *x.OwnerPlayerId
	}
	return 0
}

func (x *CScenarioEnt_Courier) GetCooldown() float32 {
	if x != nil && x.Cooldown != nil {
		return *x.Cooldown
	}
	return 0
}

type CScenarioEnt_NPC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position           *CScenario_Position `protobuf:"bytes,1,opt,name=position" json:"position,omitempty"`
	UnitName           *string             `protobuf:"bytes,2,opt,name=unit_name,json=unitName" json:"unit_name,omitempty"`
	TeamNumber         *int32              `protobuf:"varint,3,opt,name=team_number,json=teamNumber" json:"team_number,omitempty"`
	HealthFrac         *float32            `protobuf:"fixed32,4,opt,name=health_frac,json=healthFrac" json:"health_frac,omitempty"`
	OwningCamp         *string             `protobuf:"bytes,10,opt,name=owning_camp,json=owningCamp" json:"owning_camp,omitempty"`
	OwningCampPosition *CScenario_Position `protobuf:"bytes,11,opt,name=owning_camp_position,json=owningCampPosition" json:"owning_camp_position,omitempty"`
	InvadeGoal         *string             `protobuf:"bytes,20,opt,name=invade_goal,json=invadeGoal" json:"invade_goal,omitempty"`
}

func (x *CScenarioEnt_NPC) Reset() {
	*x = CScenarioEnt_NPC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_scenariomessages_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CScenarioEnt_NPC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CScenarioEnt_NPC) ProtoMessage() {}

func (x *CScenarioEnt_NPC) ProtoReflect() protoreflect.Message {
	mi := &file_dota_scenariomessages_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CScenarioEnt_NPC.ProtoReflect.Descriptor instead.
func (*CScenarioEnt_NPC) Descriptor() ([]byte, []int) {
	return file_dota_scenariomessages_proto_rawDescGZIP(), []int{3}
}

func (x *CScenarioEnt_NPC) GetPosition() *CScenario_Position {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *CScenarioEnt_NPC) GetUnitName() string {
	if x != nil && x.UnitName != nil {
		return *x.UnitName
	}
	return ""
}

func (x *CScenarioEnt_NPC) GetTeamNumber() int32 {
	if x != nil && x.TeamNumber != nil {
		return *x.TeamNumber
	}
	return 0
}

func (x *CScenarioEnt_NPC) GetHealthFrac() float32 {
	if x != nil && x.HealthFrac != nil {
		return *x.HealthFrac
	}
	return 0
}

func (x *CScenarioEnt_NPC) GetOwningCamp() string {
	if x != nil && x.OwningCamp != nil {
		return *x.OwningCamp
	}
	return ""
}

func (x *CScenarioEnt_NPC) GetOwningCampPosition() *CScenario_Position {
	if x != nil {
		return x.OwningCampPosition
	}
	return nil
}

func (x *CScenarioEnt_NPC) GetInvadeGoal() string {
	if x != nil && x.InvadeGoal != nil {
		return *x.InvadeGoal
	}
	return ""
}

type CScenarioEnt_SpiritBear struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerId *int32 `protobuf:"varint,1,opt,name=owner_id,json=ownerId" json:"owner_id,omitempty"`
	TeamId  *int32 `protobuf:"varint,2,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
}

func (x *CScenarioEnt_SpiritBear) Reset() {
	*x = CScenarioEnt_SpiritBear{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_scenariomessages_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CScenarioEnt_SpiritBear) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CScenarioEnt_SpiritBear) ProtoMessage() {}

func (x *CScenarioEnt_SpiritBear) ProtoReflect() protoreflect.Message {
	mi := &file_dota_scenariomessages_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CScenarioEnt_SpiritBear.ProtoReflect.Descriptor instead.
func (*CScenarioEnt_SpiritBear) Descriptor() ([]byte, []int) {
	return file_dota_scenariomessages_proto_rawDescGZIP(), []int{4}
}

func (x *CScenarioEnt_SpiritBear) GetOwnerId() int32 {
	if x != nil && x.OwnerId != nil {
		return *x.OwnerId
	}
	return 0
}

func (x *CScenarioEnt_SpiritBear) GetTeamId() int32 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

type CScenarioEnt_DroppedItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position *CScenario_Position `protobuf:"bytes,1,opt,name=position" json:"position,omitempty"`
}

func (x *CScenarioEnt_DroppedItem) Reset() {
	*x = CScenarioEnt_DroppedItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_scenariomessages_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CScenarioEnt_DroppedItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CScenarioEnt_DroppedItem) ProtoMessage() {}

func (x *CScenarioEnt_DroppedItem) ProtoReflect() protoreflect.Message {
	mi := &file_dota_scenariomessages_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CScenarioEnt_DroppedItem.ProtoReflect.Descriptor instead.
func (*CScenarioEnt_DroppedItem) Descriptor() ([]byte, []int) {
	return file_dota_scenariomessages_proto_rawDescGZIP(), []int{5}
}

func (x *CScenarioEnt_DroppedItem) GetPosition() *CScenario_Position {
	if x != nil {
		return x.Position
	}
	return nil
}

type CMsgDotaScenario struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LobbyId   *uint64                      `protobuf:"varint,1,opt,name=lobby_id,json=lobbyId" json:"lobby_id,omitempty"`
	Game      *CMsgDotaScenario_Game       `protobuf:"bytes,2,opt,name=game" json:"game,omitempty"`
	Teams     []*CMsgDotaScenario_Team     `protobuf:"bytes,3,rep,name=teams" json:"teams,omitempty"`
	Heroes    []*CMsgDotaScenario_Hero     `protobuf:"bytes,4,rep,name=heroes" json:"heroes,omitempty"`
	Stock     []*CMsgDotaScenario_Stock    `protobuf:"bytes,5,rep,name=stock" json:"stock,omitempty"`
	Buildings []*CMsgDotaScenario_Building `protobuf:"bytes,6,rep,name=buildings" json:"buildings,omitempty"`
	Entities  []*CMsgDotaScenario_Entity   `protobuf:"bytes,7,rep,name=entities" json:"entities,omitempty"`
	Items     []*CMsgDotaScenario_Item     `protobuf:"bytes,8,rep,name=items" json:"items,omitempty"`
	Modifiers []*CMsgDotaScenario_Modifier `protobuf:"bytes,9,rep,name=modifiers" json:"modifiers,omitempty"`
}

func (x *CMsgDotaScenario) Reset() {
	*x = CMsgDotaScenario{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_scenariomessages_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDotaScenario) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDotaScenario) ProtoMessage() {}

func (x *CMsgDotaScenario) ProtoReflect() protoreflect.Message {
	mi := &file_dota_scenariomessages_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDotaScenario.ProtoReflect.Descriptor instead.
func (*CMsgDotaScenario) Descriptor() ([]byte, []int) {
	return file_dota_scenariomessages_proto_rawDescGZIP(), []int{6}
}

func (x *CMsgDotaScenario) GetLobbyId() uint64 {
	if x != nil && x.LobbyId != nil {
		return *x.LobbyId
	}
	return 0
}

func (x *CMsgDotaScenario) GetGame() *CMsgDotaScenario_Game {
	if x != nil {
		return x.Game
	}
	return nil
}

func (x *CMsgDotaScenario) GetTeams() []*CMsgDotaScenario_Team {
	if x != nil {
		return x.Teams
	}
	return nil
}

func (x *CMsgDotaScenario) GetHeroes() []*CMsgDotaScenario_Hero {
	if x != nil {
		return x.Heroes
	}
	return nil
}

func (x *CMsgDotaScenario) GetStock() []*CMsgDotaScenario_Stock {
	if x != nil {
		return x.Stock
	}
	return nil
}

func (x *CMsgDotaScenario) GetBuildings() []*CMsgDotaScenario_Building {
	if x != nil {
		return x.Buildings
	}
	return nil
}

func (x *CMsgDotaScenario) GetEntities() []*CMsgDotaScenario_Entity {
	if x != nil {
		return x.Entities
	}
	return nil
}

func (x *CMsgDotaScenario) GetItems() []*CMsgDotaScenario_Item {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *CMsgDotaScenario) GetModifiers() []*CMsgDotaScenario_Modifier {
	if x != nil {
		return x.Modifiers
	}
	return nil
}

type CMsgDotaScenario_EntityRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId       *int32  `protobuf:"varint,1,opt,name=player_id,json=playerId" json:"player_id,omitempty"`
	NeutralStashId *int32  `protobuf:"varint,2,opt,name=neutral_stash_id,json=neutralStashId" json:"neutral_stash_id,omitempty"`
	EntityIdx      *int32  `protobuf:"varint,3,opt,name=entity_idx,json=entityIdx" json:"entity_idx,omitempty"`
	Roshan         *bool   `protobuf:"varint,4,opt,name=roshan" json:"roshan,omitempty"`
	AbilityName    *string `protobuf:"bytes,10,opt,name=ability_name,json=abilityName" json:"ability_name,omitempty"`
}

func (x *CMsgDotaScenario_EntityRef) Reset() {
	*x = CMsgDotaScenario_EntityRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_scenariomessages_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDotaScenario_EntityRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDotaScenario_EntityRef) ProtoMessage() {}

func (x *CMsgDotaScenario_EntityRef) ProtoReflect() protoreflect.Message {
	mi := &file_dota_scenariomessages_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDotaScenario_EntityRef.ProtoReflect.Descriptor instead.
func (*CMsgDotaScenario_EntityRef) Descriptor() ([]byte, []int) {
	return file_dota_scenariomessages_proto_rawDescGZIP(), []int{6, 0}
}

func (x *CMsgDotaScenario_EntityRef) GetPlayerId() int32 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

func (x *CMsgDotaScenario_EntityRef) GetNeutralStashId() int32 {
	if x != nil && x.NeutralStashId != nil {
		return *x.NeutralStashId
	}
	return 0
}

func (x *CMsgDotaScenario_EntityRef) GetEntityIdx() int32 {
	if x != nil && x.EntityIdx != nil {
		return *x.EntityIdx
	}
	return 0
}

func (x *CMsgDotaScenario_EntityRef) GetRoshan() bool {
	if x != nil && x.Roshan != nil {
		return *x.Roshan
	}
	return false
}

func (x *CMsgDotaScenario_EntityRef) GetAbilityName() string {
	if x != nil && x.AbilityName != nil {
		return *x.AbilityName
	}
	return ""
}

type CMsgDotaScenario_Game struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId      *uint64                      `protobuf:"varint,1,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	GameMode     *int32                       `protobuf:"varint,2,opt,name=game_mode,json=gameMode" json:"game_mode,omitempty"`
	ClockTime    *float32                     `protobuf:"fixed32,3,opt,name=clock_time,json=clockTime" json:"clock_time,omitempty"`
	InternalTime *float32                     `protobuf:"fixed32,4,opt,name=internal_time,json=internalTime" json:"internal_time,omitempty"`
	Roshan       *CScenarioGame_RoshanSpawner `protobuf:"bytes,5,opt,name=roshan" json:"roshan,omitempty"`
}

func (x *CMsgDotaScenario_Game) Reset() {
	*x = CMsgDotaScenario_Game{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_scenariomessages_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDotaScenario_Game) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDotaScenario_Game) ProtoMessage() {}

func (x *CMsgDotaScenario_Game) ProtoReflect() protoreflect.Message {
	mi := &file_dota_scenariomessages_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDotaScenario_Game.ProtoReflect.Descriptor instead.
func (*CMsgDotaScenario_Game) Descriptor() ([]byte, []int) {
	return file_dota_scenariomessages_proto_rawDescGZIP(), []int{6, 1}
}

func (x *CMsgDotaScenario_Game) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgDotaScenario_Game) GetGameMode() int32 {
	if x != nil && x.GameMode != nil {
		return *x.GameMode
	}
	return 0
}

func (x *CMsgDotaScenario_Game) GetClockTime() float32 {
	if x != nil && x.ClockTime != nil {
		return *x.ClockTime
	}
	return 0
}

func (x *CMsgDotaScenario_Game) GetInternalTime() float32 {
	if x != nil && x.InternalTime != nil {
		return *x.InternalTime
	}
	return 0
}

func (x *CMsgDotaScenario_Game) GetRoshan() *CScenarioGame_RoshanSpawner {
	if x != nil {
		return x.Roshan
	}
	return nil
}

type CMsgDotaScenario_TeamNeutralItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Consumed *bool   `protobuf:"varint,2,opt,name=consumed" json:"consumed,omitempty"`
	Tier     *int32  `protobuf:"varint,3,opt,name=tier" json:"tier,omitempty"`
}

func (x *CMsgDotaScenario_TeamNeutralItem) Reset() {
	*x = CMsgDotaScenario_TeamNeutralItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_scenariomessages_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDotaScenario_TeamNeutralItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDotaScenario_TeamNeutralItem) ProtoMessage() {}

func (x *CMsgDotaScenario_TeamNeutralItem) ProtoReflect() protoreflect.Message {
	mi := &file_dota_scenariomessages_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDotaScenario_TeamNeutralItem.ProtoReflect.Descriptor instead.
func (*CMsgDotaScenario_TeamNeutralItem) Descriptor() ([]byte, []int) {
	return file_dota_scenariomessages_proto_rawDescGZIP(), []int{6, 2}
}

func (x *CMsgDotaScenario_TeamNeutralItem) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CMsgDotaScenario_TeamNeutralItem) GetConsumed() bool {
	if x != nil && x.Consumed != nil {
		return *x.Consumed
	}
	return false
}

func (x *CMsgDotaScenario_TeamNeutralItem) GetTier() int32 {
	if x != nil && x.Tier != nil {
		return *x.Tier
	}
	return 0
}

type CMsgDotaScenario_Team struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamNumber    *int32                              `protobuf:"varint,1,opt,name=team_number,json=teamNumber" json:"team_number,omitempty"`
	NeutralItems  []*CMsgDotaScenario_TeamNeutralItem `protobuf:"bytes,2,rep,name=neutral_items,json=neutralItems" json:"neutral_items,omitempty"`
	HeroKills     *int32                              `protobuf:"varint,3,opt,name=hero_kills,json=heroKills" json:"hero_kills,omitempty"`
	TowerKills    *int32                              `protobuf:"varint,4,opt,name=tower_kills,json=towerKills" json:"tower_kills,omitempty"`
	BarracksKills *int32                              `protobuf:"varint,5,opt,name=barracks_kills,json=barracksKills" json:"barracks_kills,omitempty"`
	GlyphCooldown *float32                            `protobuf:"fixed32,6,opt,name=glyph_cooldown,json=glyphCooldown" json:"glyph_cooldown,omitempty"`
	RadarCooldown *float32                            `protobuf:"fixed32,7,opt,name=radar_cooldown,json=radarCooldown" json:"radar_cooldown,omitempty"`
}

func (x *CMsgDotaScenario_Team) Reset() {
	*x = CMsgDotaScenario_Team{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_scenariomessages_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDotaScenario_Team) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDotaScenario_Team) ProtoMessage() {}

func (x *CMsgDotaScenario_Team) ProtoReflect() protoreflect.Message {
	mi := &file_dota_scenariomessages_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDotaScenario_Team.ProtoReflect.Descriptor instead.
func (*CMsgDotaScenario_Team) Descriptor() ([]byte, []int) {
	return file_dota_scenariomessages_proto_rawDescGZIP(), []int{6, 3}
}

func (x *CMsgDotaScenario_Team) GetTeamNumber() int32 {
	if x != nil && x.TeamNumber != nil {
		return *x.TeamNumber
	}
	return 0
}

func (x *CMsgDotaScenario_Team) GetNeutralItems() []*CMsgDotaScenario_TeamNeutralItem {
	if x != nil {
		return x.NeutralItems
	}
	return nil
}

func (x *CMsgDotaScenario_Team) GetHeroKills() int32 {
	if x != nil && x.HeroKills != nil {
		return *x.HeroKills
	}
	return 0
}

func (x *CMsgDotaScenario_Team) GetTowerKills() int32 {
	if x != nil && x.TowerKills != nil {
		return *x.TowerKills
	}
	return 0
}

func (x *CMsgDotaScenario_Team) GetBarracksKills() int32 {
	if x != nil && x.BarracksKills != nil {
		return *x.BarracksKills
	}
	return 0
}

func (x *CMsgDotaScenario_Team) GetGlyphCooldown() float32 {
	if x != nil && x.GlyphCooldown != nil {
		return *x.GlyphCooldown
	}
	return 0
}

func (x *CMsgDotaScenario_Team) GetRadarCooldown() float32 {
	if x != nil && x.RadarCooldown != nil {
		return *x.RadarCooldown
	}
	return 0
}

type CMsgDotaScenario_HeroHeroInt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId *int32 `protobuf:"varint,1,opt,name=player_id,json=playerId" json:"player_id,omitempty"`
	Value    *int32 `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`
}

func (x *CMsgDotaScenario_HeroHeroInt) Reset() {
	*x = CMsgDotaScenario_HeroHeroInt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_scenariomessages_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDotaScenario_HeroHeroInt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDotaScenario_HeroHeroInt) ProtoMessage() {}

func (x *CMsgDotaScenario_HeroHeroInt) ProtoReflect() protoreflect.Message {
	mi := &file_dota_scenariomessages_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDotaScenario_HeroHeroInt.ProtoReflect.Descriptor instead.
func (*CMsgDotaScenario_HeroHeroInt) Descriptor() ([]byte, []int) {
	return file_dota_scenariomessages_proto_rawDescGZIP(), []int{6, 4}
}

func (x *CMsgDotaScenario_HeroHeroInt) GetPlayerId() int32 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

func (x *CMsgDotaScenario_HeroHeroInt) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

type CMsgDotaScenario_HeroHeroFloat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId *int32   `protobuf:"varint,1,opt,name=player_id,json=playerId" json:"player_id,omitempty"`
	Value    *float32 `protobuf:"fixed32,2,opt,name=value" json:"value,omitempty"`
}

func (x *CMsgDotaScenario_HeroHeroFloat) Reset() {
	*x = CMsgDotaScenario_HeroHeroFloat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_scenariomessages_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDotaScenario_HeroHeroFloat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDotaScenario_HeroHeroFloat) ProtoMessage() {}

func (x *CMsgDotaScenario_HeroHeroFloat) ProtoReflect() protoreflect.Message {
	mi := &file_dota_scenariomessages_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDotaScenario_HeroHeroFloat.ProtoReflect.Descriptor instead.
func (*CMsgDotaScenario_HeroHeroFloat) Descriptor() ([]byte, []int) {
	return file_dota_scenariomessages_proto_rawDescGZIP(), []int{6, 5}
}

func (x *CMsgDotaScenario_HeroHeroFloat) GetPlayerId() int32 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

func (x *CMsgDotaScenario_HeroHeroFloat) GetValue() float32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

type CMsgDotaScenario_DamageStatsByType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DamageType            *int32 `protobuf:"varint,1,opt,name=damage_type,json=damageType" json:"damage_type,omitempty"`
	ReceivedPreReduction  *int32 `protobuf:"varint,2,opt,name=received_pre_reduction,json=receivedPreReduction" json:"received_pre_reduction,omitempty"`
	ReceivedPostReduction *int32 `protobuf:"varint,3,opt,name=received_post_reduction,json=receivedPostReduction" json:"received_post_reduction,omitempty"`
	OutgoingPreReduction  *int32 `protobuf:"varint,4,opt,name=outgoing_pre_reduction,json=outgoingPreReduction" json:"outgoing_pre_reduction,omitempty"`
	OutgoingPostReduction *int32 `protobuf:"varint,5,opt,name=outgoing_post_reduction,json=outgoingPostReduction" json:"outgoing_post_reduction,omitempty"`
}

func (x *CMsgDotaScenario_DamageStatsByType) Reset() {
	*x = CMsgDotaScenario_DamageStatsByType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_scenariomessages_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDotaScenario_DamageStatsByType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDotaScenario_DamageStatsByType) ProtoMessage() {}

func (x *CMsgDotaScenario_DamageStatsByType) ProtoReflect() protoreflect.Message {
	mi := &file_dota_scenariomessages_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDotaScenario_DamageStatsByType.ProtoReflect.Descriptor instead.
func (*CMsgDotaScenario_DamageStatsByType) Descriptor() ([]byte, []int) {
	return file_dota_scenariomessages_proto_rawDescGZIP(), []int{6, 6}
}

func (x *CMsgDotaScenario_DamageStatsByType) GetDamageType() int32 {
	if x != nil && x.DamageType != nil {
		return *x.DamageType
	}
	return 0
}

func (x *CMsgDotaScenario_DamageStatsByType) GetReceivedPreReduction() int32 {
	if x != nil && x.ReceivedPreReduction != nil {
		return *x.ReceivedPreReduction
	}
	return 0
}

func (x *CMsgDotaScenario_DamageStatsByType) GetReceivedPostReduction() int32 {
	if x != nil && x.ReceivedPostReduction != nil {
		return *x.ReceivedPostReduction
	}
	return 0
}

func (x *CMsgDotaScenario_DamageStatsByType) GetOutgoingPreReduction() int32 {
	if x != nil && x.OutgoingPreReduction != nil {
		return *x.OutgoingPreReduction
	}
	return 0
}

func (x *CMsgDotaScenario_DamageStatsByType) GetOutgoingPostReduction() int32 {
	if x != nil && x.OutgoingPostReduction != nil {
		return *x.OutgoingPostReduction
	}
	return 0
}

type CMsgDotaScenario_HeroAbility struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Level *int32  `protobuf:"varint,2,opt,name=level" json:"level,omitempty"`
}

func (x *CMsgDotaScenario_HeroAbility) Reset() {
	*x = CMsgDotaScenario_HeroAbility{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_scenariomessages_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDotaScenario_HeroAbility) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDotaScenario_HeroAbility) ProtoMessage() {}

func (x *CMsgDotaScenario_HeroAbility) ProtoReflect() protoreflect.Message {
	mi := &file_dota_scenariomessages_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDotaScenario_HeroAbility.ProtoReflect.Descriptor instead.
func (*CMsgDotaScenario_HeroAbility) Descriptor() ([]byte, []int) {
	return file_dota_scenariomessages_proto_rawDescGZIP(), []int{6, 7}
}

func (x *CMsgDotaScenario_HeroAbility) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CMsgDotaScenario_HeroAbility) GetLevel() int32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

type CMsgDotaScenario_Hero struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SteamId                *uint64                               `protobuf:"fixed64,1,opt,name=steam_id,json=steamId" json:"steam_id,omitempty"`
	PlayerId               *int32                                `protobuf:"varint,2,opt,name=player_id,json=playerId" json:"player_id,omitempty"`
	TeamId                 *int32                                `protobuf:"varint,3,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	Hero                   *string                               `protobuf:"bytes,4,opt,name=hero" json:"hero,omitempty"`
	TotalXp                *int32                                `protobuf:"varint,5,opt,name=total_xp,json=totalXp" json:"total_xp,omitempty"`
	BkbChargesUsed         *int32                                `protobuf:"varint,6,opt,name=bkb_charges_used,json=bkbChargesUsed" json:"bkb_charges_used,omitempty"`
	AeonChargesUsed        *int32                                `protobuf:"varint,7,opt,name=aeon_charges_used,json=aeonChargesUsed" json:"aeon_charges_used,omitempty"`
	ReliableGold           *int32                                `protobuf:"varint,8,opt,name=reliable_gold,json=reliableGold" json:"reliable_gold,omitempty"`
	UnreliableGold         *int32                                `protobuf:"varint,9,opt,name=unreliable_gold,json=unreliableGold" json:"unreliable_gold,omitempty"`
	TotalEarnedGold        *int32                                `protobuf:"varint,10,opt,name=total_earned_gold,json=totalEarnedGold" json:"total_earned_gold,omitempty"`
	SharedGold             *int32                                `protobuf:"varint,11,opt,name=shared_gold,json=sharedGold" json:"shared_gold,omitempty"`
	HeroKillGold           *int32                                `protobuf:"varint,12,opt,name=hero_kill_gold,json=heroKillGold" json:"hero_kill_gold,omitempty"`
	CreepKillGold          *int32                                `protobuf:"varint,13,opt,name=creep_kill_gold,json=creepKillGold" json:"creep_kill_gold,omitempty"`
	NeutralKillGold        *int32                                `protobuf:"varint,14,opt,name=neutral_kill_gold,json=neutralKillGold" json:"neutral_kill_gold,omitempty"`
	CourierGold            *int32                                `protobuf:"varint,15,opt,name=courier_gold,json=courierGold" json:"courier_gold,omitempty"`
	BountyGold             *int32                                `protobuf:"varint,16,opt,name=bounty_gold,json=bountyGold" json:"bounty_gold,omitempty"`
	RoshanGold             *int32                                `protobuf:"varint,17,opt,name=roshan_gold,json=roshanGold" json:"roshan_gold,omitempty"`
	BuildingGold           *int32                                `protobuf:"varint,18,opt,name=building_gold,json=buildingGold" json:"building_gold,omitempty"`
	OtherGold              *int32                                `protobuf:"varint,19,opt,name=other_gold,json=otherGold" json:"other_gold,omitempty"`
	IncomeGold             *int32                                `protobuf:"varint,26,opt,name=income_gold,json=incomeGold" json:"income_gold,omitempty"`
	WardKillGold           *int32                                `protobuf:"varint,27,opt,name=ward_kill_gold,json=wardKillGold" json:"ward_kill_gold,omitempty"`
	AbilityGold            *int32                                `protobuf:"varint,28,opt,name=ability_gold,json=abilityGold" json:"ability_gold,omitempty"`
	Denies                 *int32                                `protobuf:"varint,29,opt,name=denies" json:"denies,omitempty"`
	LastHits               *int32                                `protobuf:"varint,30,opt,name=last_hits,json=lastHits" json:"last_hits,omitempty"`
	LastHitStreak          *int32                                `protobuf:"varint,31,opt,name=last_hit_streak,json=lastHitStreak" json:"last_hit_streak,omitempty"`
	LastHitMultikill       *int32                                `protobuf:"varint,32,opt,name=last_hit_multikill,json=lastHitMultikill" json:"last_hit_multikill,omitempty"`
	NearbyCreepDeathCount  *int32                                `protobuf:"varint,33,opt,name=nearby_creep_death_count,json=nearbyCreepDeathCount" json:"nearby_creep_death_count,omitempty"`
	ClaimedDenyCount       *int32                                `protobuf:"varint,34,opt,name=claimed_deny_count,json=claimedDenyCount" json:"claimed_deny_count,omitempty"`
	ClaimedMissCount       *int32                                `protobuf:"varint,35,opt,name=claimed_miss_count,json=claimedMissCount" json:"claimed_miss_count,omitempty"`
	MissCount              *int32                                `protobuf:"varint,36,opt,name=miss_count,json=missCount" json:"miss_count,omitempty"`
	BuybackCooldownTime    *float32                              `protobuf:"fixed32,40,opt,name=buyback_cooldown_time,json=buybackCooldownTime" json:"buyback_cooldown_time,omitempty"`
	BuybackGoldLimitTime   *float32                              `protobuf:"fixed32,41,opt,name=buyback_gold_limit_time,json=buybackGoldLimitTime" json:"buyback_gold_limit_time,omitempty"`
	StunDuration           *float32                              `protobuf:"fixed32,44,opt,name=stun_duration,json=stunDuration" json:"stun_duration,omitempty"`
	Healing                *float32                              `protobuf:"fixed32,45,opt,name=healing" json:"healing,omitempty"`
	TowerKills             *int32                                `protobuf:"varint,46,opt,name=tower_kills,json=towerKills" json:"tower_kills,omitempty"`
	RoshanKills            *int32                                `protobuf:"varint,47,opt,name=roshan_kills,json=roshanKills" json:"roshan_kills,omitempty"`
	ObserverWardsPlaced    *int32                                `protobuf:"varint,48,opt,name=observer_wards_placed,json=observerWardsPlaced" json:"observer_wards_placed,omitempty"`
	SentryWardsPlaced      *int32                                `protobuf:"varint,49,opt,name=sentry_wards_placed,json=sentryWardsPlaced" json:"sentry_wards_placed,omitempty"`
	CreepsStacked          *int32                                `protobuf:"varint,50,opt,name=creeps_stacked,json=creepsStacked" json:"creeps_stacked,omitempty"`
	CampsStacked           *int32                                `protobuf:"varint,51,opt,name=camps_stacked,json=campsStacked" json:"camps_stacked,omitempty"`
	RunePickups            *int32                                `protobuf:"varint,52,opt,name=rune_pickups,json=runePickups" json:"rune_pickups,omitempty"`
	GoldSpentOnSupport     *int32                                `protobuf:"varint,53,opt,name=gold_spent_on_support,json=goldSpentOnSupport" json:"gold_spent_on_support,omitempty"`
	HeroDamage             *int32                                `protobuf:"varint,54,opt,name=hero_damage,json=heroDamage" json:"hero_damage,omitempty"`
	WardsPurchased         *int32                                `protobuf:"varint,55,opt,name=wards_purchased,json=wardsPurchased" json:"wards_purchased,omitempty"`
	WardsDestroyed         *int32                                `protobuf:"varint,56,opt,name=wards_destroyed,json=wardsDestroyed" json:"wards_destroyed,omitempty"`
	GoldSpentOnConsumables *int32                                `protobuf:"varint,58,opt,name=gold_spent_on_consumables,json=goldSpentOnConsumables" json:"gold_spent_on_consumables,omitempty"`
	GoldSpentOnItems       *int32                                `protobuf:"varint,59,opt,name=gold_spent_on_items,json=goldSpentOnItems" json:"gold_spent_on_items,omitempty"`
	GoldSpentOnBuybacks    *int32                                `protobuf:"varint,60,opt,name=gold_spent_on_buybacks,json=goldSpentOnBuybacks" json:"gold_spent_on_buybacks,omitempty"`
	GoldLostToDeath        *int32                                `protobuf:"varint,61,opt,name=gold_lost_to_death,json=goldLostToDeath" json:"gold_lost_to_death,omitempty"`
	Kills                  *int32                                `protobuf:"varint,62,opt,name=kills" json:"kills,omitempty"`
	Assists                *int32                                `protobuf:"varint,63,opt,name=assists" json:"assists,omitempty"`
	Deaths                 *int32                                `protobuf:"varint,64,opt,name=deaths" json:"deaths,omitempty"`
	KillStreak             *int32                                `protobuf:"varint,65,opt,name=kill_streak,json=killStreak" json:"kill_streak,omitempty"`
	RespawnSeconds         *int32                                `protobuf:"varint,68,opt,name=respawn_seconds,json=respawnSeconds" json:"respawn_seconds,omitempty"`
	LastBuybackTime        *int32                                `protobuf:"varint,69,opt,name=last_buyback_time,json=lastBuybackTime" json:"last_buyback_time,omitempty"`
	FirstBloodClaimed      *bool                                 `protobuf:"varint,71,opt,name=first_blood_claimed,json=firstBloodClaimed" json:"first_blood_claimed,omitempty"`
	FirstBloodGiven        *bool                                 `protobuf:"varint,72,opt,name=first_blood_given,json=firstBloodGiven" json:"first_blood_given,omitempty"`
	BountyRunes            *int32                                `protobuf:"varint,73,opt,name=bounty_runes,json=bountyRunes" json:"bounty_runes,omitempty"`
	OutpostsCaptured       *int32                                `protobuf:"varint,74,opt,name=outposts_captured,json=outpostsCaptured" json:"outposts_captured,omitempty"`
	Position               *CScenario_Position                   `protobuf:"bytes,75,opt,name=position" json:"position,omitempty"`
	EnemyKills             []*CMsgDotaScenario_HeroHeroInt       `protobuf:"bytes,150,rep,name=enemy_kills,json=enemyKills" json:"enemy_kills,omitempty"`
	DamageStats            []*CMsgDotaScenario_DamageStatsByType `protobuf:"bytes,151,rep,name=damage_stats,json=damageStats" json:"damage_stats,omitempty"`
	Abilities              []*CMsgDotaScenario_HeroAbility       `protobuf:"bytes,152,rep,name=abilities" json:"abilities,omitempty"`
}

func (x *CMsgDotaScenario_Hero) Reset() {
	*x = CMsgDotaScenario_Hero{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_scenariomessages_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDotaScenario_Hero) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDotaScenario_Hero) ProtoMessage() {}

func (x *CMsgDotaScenario_Hero) ProtoReflect() protoreflect.Message {
	mi := &file_dota_scenariomessages_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDotaScenario_Hero.ProtoReflect.Descriptor instead.
func (*CMsgDotaScenario_Hero) Descriptor() ([]byte, []int) {
	return file_dota_scenariomessages_proto_rawDescGZIP(), []int{6, 8}
}

func (x *CMsgDotaScenario_Hero) GetSteamId() uint64 {
	if x != nil && x.SteamId != nil {
		return *x.SteamId
	}
	return 0
}

func (x *CMsgDotaScenario_Hero) GetPlayerId() int32 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

func (x *CMsgDotaScenario_Hero) GetTeamId() int32 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

func (x *CMsgDotaScenario_Hero) GetHero() string {
	if x != nil && x.Hero != nil {
		return *x.Hero
	}
	return ""
}

func (x *CMsgDotaScenario_Hero) GetTotalXp() int32 {
	if x != nil && x.TotalXp != nil {
		return *x.TotalXp
	}
	return 0
}

func (x *CMsgDotaScenario_Hero) GetBkbChargesUsed() int32 {
	if x != nil && x.BkbChargesUsed != nil {
		return *x.BkbChargesUsed
	}
	return 0
}

func (x *CMsgDotaScenario_Hero) GetAeonChargesUsed() int32 {
	if x != nil && x.AeonChargesUsed != nil {
		return *x.AeonChargesUsed
	}
	return 0
}

func (x *CMsgDotaScenario_Hero) GetReliableGold() int32 {
	if x != nil && x.ReliableGold != nil {
		return *x.ReliableGold
	}
	return 0
}

func (x *CMsgDotaScenario_Hero) GetUnreliableGold() int32 {
	if x != nil && x.UnreliableGold != nil {
		return *x.UnreliableGold
	}
	return 0
}

func (x *CMsgDotaScenario_Hero) GetTotalEarnedGold() int32 {
	if x != nil && x.TotalEarnedGold != nil {
		return *x.TotalEarnedGold
	}
	return 0
}

func (x *CMsgDotaScenario_Hero) GetSharedGold() int32 {
	if x != nil && x.SharedGold != nil {
		return *x.SharedGold
	}
	return 0
}

func (x *CMsgDotaScenario_Hero) GetHeroKillGold() int32 {
	if x != nil && x.HeroKillGold != nil {
		return *x.HeroKillGold
	}
	return 0
}

func (x *CMsgDotaScenario_Hero) GetCreepKillGold() int32 {
	if x != nil && x.CreepKillGold != nil {
		return *x.CreepKillGold
	}
	return 0
}

func (x *CMsgDotaScenario_Hero) GetNeutralKillGold() int32 {
	if x != nil && x.NeutralKillGold != nil {
		return *x.NeutralKillGold
	}
	return 0
}

func (x *CMsgDotaScenario_Hero) GetCourierGold() int32 {
	if x != nil && x.CourierGold != nil {
		return *x.CourierGold
	}
	return 0
}

func (x *CMsgDotaScenario_Hero) GetBountyGold() int32 {
	if x != nil && x.BountyGold != nil {
		return *x.BountyGold
	}
	return 0
}

func (x *CMsgDotaScenario_Hero) GetRoshanGold() int32 {
	if x != nil && x.RoshanGold != nil {
		return *x.RoshanGold
	}
	return 0
}

func (x *CMsgDotaScenario_Hero) GetBuildingGold() int32 {
	if x != nil && x.BuildingGold != nil {
		return *x.BuildingGold
	}
	return 0
}

func (x *CMsgDotaScenario_Hero) GetOtherGold() int32 {
	if x != nil && x.OtherGold != nil {
		return *x.OtherGold
	}
	return 0
}

func (x *CMsgDotaScenario_Hero) GetIncomeGold() int32 {
	if x != nil && x.IncomeGold != nil {
		return *x.IncomeGold
	}
	return 0
}

func (x *CMsgDotaScenario_Hero) GetWardKillGold() int32 {
	if x != nil && x.WardKillGold != nil {
		return *x.WardKillGold
	}
	return 0
}

func (x *CMsgDotaScenario_Hero) GetAbilityGold() int32 {
	if x != nil && x.AbilityGold != nil {
		return *x.AbilityGold
	}
	return 0
}

func (x *CMsgDotaScenario_Hero) GetDenies() int32 {
	if x != nil && x.Denies != nil {
		return *x.Denies
	}
	return 0
}

func (x *CMsgDotaScenario_Hero) GetLastHits() int32 {
	if x != nil && x.LastHits != nil {
		return *x.LastHits
	}
	return 0
}

func (x *CMsgDotaScenario_Hero) GetLastHitStreak() int32 {
	if x != nil && x.LastHitStreak != nil {
		return *x.LastHitStreak
	}
	return 0
}

func (x *CMsgDotaScenario_Hero) GetLastHitMultikill() int32 {
	if x != nil && x.LastHitMultikill != nil {
		return *x.LastHitMultikill
	}
	return 0
}

func (x *CMsgDotaScenario_Hero) GetNearbyCreepDeathCount() int32 {
	if x != nil && x.NearbyCreepDeathCount != nil {
		return *x.NearbyCreepDeathCount
	}
	return 0
}

func (x *CMsgDotaScenario_Hero) GetClaimedDenyCount() int32 {
	if x != nil && x.ClaimedDenyCount != nil {
		return *x.ClaimedDenyCount
	}
	return 0
}

func (x *CMsgDotaScenario_Hero) GetClaimedMissCount() int32 {
	if x != nil && x.ClaimedMissCount != nil {
		return *x.ClaimedMissCount
	}
	return 0
}

func (x *CMsgDotaScenario_Hero) GetMissCount() int32 {
	if x != nil && x.MissCount != nil {
		return *x.MissCount
	}
	return 0
}

func (x *CMsgDotaScenario_Hero) GetBuybackCooldownTime() float32 {
	if x != nil && x.BuybackCooldownTime != nil {
		return *x.BuybackCooldownTime
	}
	return 0
}

func (x *CMsgDotaScenario_Hero) GetBuybackGoldLimitTime() float32 {
	if x != nil && x.BuybackGoldLimitTime != nil {
		return *x.BuybackGoldLimitTime
	}
	return 0
}

func (x *CMsgDotaScenario_Hero) GetStunDuration() float32 {
	if x != nil && x.StunDuration != nil {
		return *x.StunDuration
	}
	return 0
}

func (x *CMsgDotaScenario_Hero) GetHealing() float32 {
	if x != nil && x.Healing != nil {
		return *x.Healing
	}
	return 0
}

func (x *CMsgDotaScenario_Hero) GetTowerKills() int32 {
	if x != nil && x.TowerKills != nil {
		return *x.TowerKills
	}
	return 0
}

func (x *CMsgDotaScenario_Hero) GetRoshanKills() int32 {
	if x != nil && x.RoshanKills != nil {
		return *x.RoshanKills
	}
	return 0
}

func (x *CMsgDotaScenario_Hero) GetObserverWardsPlaced() int32 {
	if x != nil && x.ObserverWardsPlaced != nil {
		return *x.ObserverWardsPlaced
	}
	return 0
}

func (x *CMsgDotaScenario_Hero) GetSentryWardsPlaced() int32 {
	if x != nil && x.SentryWardsPlaced != nil {
		return *x.SentryWardsPlaced
	}
	return 0
}

func (x *CMsgDotaScenario_Hero) GetCreepsStacked() int32 {
	if x != nil && x.CreepsStacked != nil {
		return *x.CreepsStacked
	}
	return 0
}

func (x *CMsgDotaScenario_Hero) GetCampsStacked() int32 {
	if x != nil && x.CampsStacked != nil {
		return *x.CampsStacked
	}
	return 0
}

func (x *CMsgDotaScenario_Hero) GetRunePickups() int32 {
	if x != nil && x.RunePickups != nil {
		return *x.RunePickups
	}
	return 0
}

func (x *CMsgDotaScenario_Hero) GetGoldSpentOnSupport() int32 {
	if x != nil && x.GoldSpentOnSupport != nil {
		return *x.GoldSpentOnSupport
	}
	return 0
}

func (x *CMsgDotaScenario_Hero) GetHeroDamage() int32 {
	if x != nil && x.HeroDamage != nil {
		return *x.HeroDamage
	}
	return 0
}

func (x *CMsgDotaScenario_Hero) GetWardsPurchased() int32 {
	if x != nil && x.WardsPurchased != nil {
		return *x.WardsPurchased
	}
	return 0
}

func (x *CMsgDotaScenario_Hero) GetWardsDestroyed() int32 {
	if x != nil && x.WardsDestroyed != nil {
		return *x.WardsDestroyed
	}
	return 0
}

func (x *CMsgDotaScenario_Hero) GetGoldSpentOnConsumables() int32 {
	if x != nil && x.GoldSpentOnConsumables != nil {
		return *x.GoldSpentOnConsumables
	}
	return 0
}

func (x *CMsgDotaScenario_Hero) GetGoldSpentOnItems() int32 {
	if x != nil && x.GoldSpentOnItems != nil {
		return *x.GoldSpentOnItems
	}
	return 0
}

func (x *CMsgDotaScenario_Hero) GetGoldSpentOnBuybacks() int32 {
	if x != nil && x.GoldSpentOnBuybacks != nil {
		return *x.GoldSpentOnBuybacks
	}
	return 0
}

func (x *CMsgDotaScenario_Hero) GetGoldLostToDeath() int32 {
	if x != nil && x.GoldLostToDeath != nil {
		return *x.GoldLostToDeath
	}
	return 0
}

func (x *CMsgDotaScenario_Hero) GetKills() int32 {
	if x != nil && x.Kills != nil {
		return *x.Kills
	}
	return 0
}

func (x *CMsgDotaScenario_Hero) GetAssists() int32 {
	if x != nil && x.Assists != nil {
		return *x.Assists
	}
	return 0
}

func (x *CMsgDotaScenario_Hero) GetDeaths() int32 {
	if x != nil && x.Deaths != nil {
		return *x.Deaths
	}
	return 0
}

func (x *CMsgDotaScenario_Hero) GetKillStreak() int32 {
	if x != nil && x.KillStreak != nil {
		return *x.KillStreak
	}
	return 0
}

func (x *CMsgDotaScenario_Hero) GetRespawnSeconds() int32 {
	if x != nil && x.RespawnSeconds != nil {
		return *x.RespawnSeconds
	}
	return 0
}

func (x *CMsgDotaScenario_Hero) GetLastBuybackTime() int32 {
	if x != nil && x.LastBuybackTime != nil {
		return *x.LastBuybackTime
	}
	return 0
}

func (x *CMsgDotaScenario_Hero) GetFirstBloodClaimed() bool {
	if x != nil && x.FirstBloodClaimed != nil {
		return *x.FirstBloodClaimed
	}
	return false
}

func (x *CMsgDotaScenario_Hero) GetFirstBloodGiven() bool {
	if x != nil && x.FirstBloodGiven != nil {
		return *x.FirstBloodGiven
	}
	return false
}

func (x *CMsgDotaScenario_Hero) GetBountyRunes() int32 {
	if x != nil && x.BountyRunes != nil {
		return *x.BountyRunes
	}
	return 0
}

func (x *CMsgDotaScenario_Hero) GetOutpostsCaptured() int32 {
	if x != nil && x.OutpostsCaptured != nil {
		return *x.OutpostsCaptured
	}
	return 0
}

func (x *CMsgDotaScenario_Hero) GetPosition() *CScenario_Position {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *CMsgDotaScenario_Hero) GetEnemyKills() []*CMsgDotaScenario_HeroHeroInt {
	if x != nil {
		return x.EnemyKills
	}
	return nil
}

func (x *CMsgDotaScenario_Hero) GetDamageStats() []*CMsgDotaScenario_DamageStatsByType {
	if x != nil {
		return x.DamageStats
	}
	return nil
}

func (x *CMsgDotaScenario_Hero) GetAbilities() []*CMsgDotaScenario_HeroAbility {
	if x != nil {
		return x.Abilities
	}
	return nil
}

type CMsgDotaScenario_Stock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         *string  `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	TeamNumber   *int32   `protobuf:"varint,2,opt,name=team_number,json=teamNumber" json:"team_number,omitempty"`
	PlayerId     *int32   `protobuf:"varint,3,opt,name=player_id,json=playerId" json:"player_id,omitempty"`
	CurrentStock *int32   `protobuf:"varint,4,opt,name=current_stock,json=currentStock" json:"current_stock,omitempty"`
	Cooldown     *float32 `protobuf:"fixed32,5,opt,name=cooldown" json:"cooldown,omitempty"`
	BonusStock   *int32   `protobuf:"varint,6,opt,name=bonus_stock,json=bonusStock" json:"bonus_stock,omitempty"`
}

func (x *CMsgDotaScenario_Stock) Reset() {
	*x = CMsgDotaScenario_Stock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_scenariomessages_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDotaScenario_Stock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDotaScenario_Stock) ProtoMessage() {}

func (x *CMsgDotaScenario_Stock) ProtoReflect() protoreflect.Message {
	mi := &file_dota_scenariomessages_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDotaScenario_Stock.ProtoReflect.Descriptor instead.
func (*CMsgDotaScenario_Stock) Descriptor() ([]byte, []int) {
	return file_dota_scenariomessages_proto_rawDescGZIP(), []int{6, 9}
}

func (x *CMsgDotaScenario_Stock) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CMsgDotaScenario_Stock) GetTeamNumber() int32 {
	if x != nil && x.TeamNumber != nil {
		return *x.TeamNumber
	}
	return 0
}

func (x *CMsgDotaScenario_Stock) GetPlayerId() int32 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

func (x *CMsgDotaScenario_Stock) GetCurrentStock() int32 {
	if x != nil && x.CurrentStock != nil {
		return *x.CurrentStock
	}
	return 0
}

func (x *CMsgDotaScenario_Stock) GetCooldown() float32 {
	if x != nil && x.Cooldown != nil {
		return *x.Cooldown
	}
	return 0
}

func (x *CMsgDotaScenario_Stock) GetBonusStock() int32 {
	if x != nil && x.BonusStock != nil {
		return *x.BonusStock
	}
	return 0
}

type CMsgDotaScenario_Building struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntityName  *string  `protobuf:"bytes,1,opt,name=entity_name,json=entityName" json:"entity_name,omitempty"`
	EntityClass *string  `protobuf:"bytes,2,opt,name=entity_class,json=entityClass" json:"entity_class,omitempty"`
	TeamId      *int32   `protobuf:"varint,3,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	IsDestroyed *bool    `protobuf:"varint,4,opt,name=is_destroyed,json=isDestroyed" json:"is_destroyed,omitempty"`
	HealthFrac  *float32 `protobuf:"fixed32,5,opt,name=health_frac,json=healthFrac" json:"health_frac,omitempty"`
}

func (x *CMsgDotaScenario_Building) Reset() {
	*x = CMsgDotaScenario_Building{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_scenariomessages_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDotaScenario_Building) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDotaScenario_Building) ProtoMessage() {}

func (x *CMsgDotaScenario_Building) ProtoReflect() protoreflect.Message {
	mi := &file_dota_scenariomessages_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDotaScenario_Building.ProtoReflect.Descriptor instead.
func (*CMsgDotaScenario_Building) Descriptor() ([]byte, []int) {
	return file_dota_scenariomessages_proto_rawDescGZIP(), []int{6, 10}
}

func (x *CMsgDotaScenario_Building) GetEntityName() string {
	if x != nil && x.EntityName != nil {
		return *x.EntityName
	}
	return ""
}

func (x *CMsgDotaScenario_Building) GetEntityClass() string {
	if x != nil && x.EntityClass != nil {
		return *x.EntityClass
	}
	return ""
}

func (x *CMsgDotaScenario_Building) GetTeamId() int32 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

func (x *CMsgDotaScenario_Building) GetIsDestroyed() bool {
	if x != nil && x.IsDestroyed != nil {
		return *x.IsDestroyed
	}
	return false
}

func (x *CMsgDotaScenario_Building) GetHealthFrac() float32 {
	if x != nil && x.HealthFrac != nil {
		return *x.HealthFrac
	}
	return 0
}

type CMsgDotaScenario_Entity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Courier     *CScenarioEnt_Courier     `protobuf:"bytes,1,opt,name=courier" json:"courier,omitempty"`
	Npc         *CScenarioEnt_NPC         `protobuf:"bytes,2,opt,name=npc" json:"npc,omitempty"`
	SpiritBear  *CScenarioEnt_SpiritBear  `protobuf:"bytes,3,opt,name=spirit_bear,json=spiritBear" json:"spirit_bear,omitempty"`
	DroppedItem *CScenarioEnt_DroppedItem `protobuf:"bytes,4,opt,name=dropped_item,json=droppedItem" json:"dropped_item,omitempty"`
}

func (x *CMsgDotaScenario_Entity) Reset() {
	*x = CMsgDotaScenario_Entity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_scenariomessages_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDotaScenario_Entity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDotaScenario_Entity) ProtoMessage() {}

func (x *CMsgDotaScenario_Entity) ProtoReflect() protoreflect.Message {
	mi := &file_dota_scenariomessages_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDotaScenario_Entity.ProtoReflect.Descriptor instead.
func (*CMsgDotaScenario_Entity) Descriptor() ([]byte, []int) {
	return file_dota_scenariomessages_proto_rawDescGZIP(), []int{6, 11}
}

func (x *CMsgDotaScenario_Entity) GetCourier() *CScenarioEnt_Courier {
	if x != nil {
		return x.Courier
	}
	return nil
}

func (x *CMsgDotaScenario_Entity) GetNpc() *CScenarioEnt_NPC {
	if x != nil {
		return x.Npc
	}
	return nil
}

func (x *CMsgDotaScenario_Entity) GetSpiritBear() *CScenarioEnt_SpiritBear {
	if x != nil {
		return x.SpiritBear
	}
	return nil
}

func (x *CMsgDotaScenario_Entity) GetDroppedItem() *CScenarioEnt_DroppedItem {
	if x != nil {
		return x.DroppedItem
	}
	return nil
}

type CMsgDotaScenario_Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             *string                     `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Location         *CMsgDotaScenario_EntityRef `protobuf:"bytes,2,opt,name=location" json:"location,omitempty"`
	OwnerId          *int32                      `protobuf:"varint,3,opt,name=owner_id,json=ownerId" json:"owner_id,omitempty"`
	ItemSlot         *int32                      `protobuf:"varint,4,opt,name=item_slot,json=itemSlot" json:"item_slot,omitempty"`
	NeutralDropTeam  *int32                      `protobuf:"varint,5,opt,name=neutral_drop_team,json=neutralDropTeam" json:"neutral_drop_team,omitempty"`
	Charges          *int32                      `protobuf:"varint,6,opt,name=charges" json:"charges,omitempty"`
	SecondaryCharges *int32                      `protobuf:"varint,7,opt,name=secondary_charges,json=secondaryCharges" json:"secondary_charges,omitempty"`
	Lifetime         *float32                    `protobuf:"fixed32,8,opt,name=lifetime" json:"lifetime,omitempty"`
	StoredRuneType   *int32                      `protobuf:"varint,9,opt,name=stored_rune_type,json=storedRuneType" json:"stored_rune_type,omitempty"`
}

func (x *CMsgDotaScenario_Item) Reset() {
	*x = CMsgDotaScenario_Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_scenariomessages_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDotaScenario_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDotaScenario_Item) ProtoMessage() {}

func (x *CMsgDotaScenario_Item) ProtoReflect() protoreflect.Message {
	mi := &file_dota_scenariomessages_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDotaScenario_Item.ProtoReflect.Descriptor instead.
func (*CMsgDotaScenario_Item) Descriptor() ([]byte, []int) {
	return file_dota_scenariomessages_proto_rawDescGZIP(), []int{6, 12}
}

func (x *CMsgDotaScenario_Item) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CMsgDotaScenario_Item) GetLocation() *CMsgDotaScenario_EntityRef {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *CMsgDotaScenario_Item) GetOwnerId() int32 {
	if x != nil && x.OwnerId != nil {
		return *x.OwnerId
	}
	return 0
}

func (x *CMsgDotaScenario_Item) GetItemSlot() int32 {
	if x != nil && x.ItemSlot != nil {
		return *x.ItemSlot
	}
	return 0
}

func (x *CMsgDotaScenario_Item) GetNeutralDropTeam() int32 {
	if x != nil && x.NeutralDropTeam != nil {
		return *x.NeutralDropTeam
	}
	return 0
}

func (x *CMsgDotaScenario_Item) GetCharges() int32 {
	if x != nil && x.Charges != nil {
		return *x.Charges
	}
	return 0
}

func (x *CMsgDotaScenario_Item) GetSecondaryCharges() int32 {
	if x != nil && x.SecondaryCharges != nil {
		return *x.SecondaryCharges
	}
	return 0
}

func (x *CMsgDotaScenario_Item) GetLifetime() float32 {
	if x != nil && x.Lifetime != nil {
		return *x.Lifetime
	}
	return 0
}

func (x *CMsgDotaScenario_Item) GetStoredRuneType() int32 {
	if x != nil && x.StoredRuneType != nil {
		return *x.StoredRuneType
	}
	return 0
}

type CMsgDotaScenario_Modifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                                          *string                     `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Parent                                        *CMsgDotaScenario_EntityRef `protobuf:"bytes,2,opt,name=parent" json:"parent,omitempty"`
	Caster                                        *CMsgDotaScenario_EntityRef `protobuf:"bytes,3,opt,name=caster" json:"caster,omitempty"`
	Ability                                       *CMsgDotaScenario_EntityRef `protobuf:"bytes,4,opt,name=ability" json:"ability,omitempty"`
	Duration                                      *float32                    `protobuf:"fixed32,5,opt,name=duration" json:"duration,omitempty"`
	LifetimeRemaining                             *float32                    `protobuf:"fixed32,6,opt,name=lifetime_remaining,json=lifetimeRemaining" json:"lifetime_remaining,omitempty"`
	StackCount                                    *int32                      `protobuf:"varint,7,opt,name=stack_count,json=stackCount" json:"stack_count,omitempty"`
	CreateEvenIfExisting                          *bool                       `protobuf:"varint,8,opt,name=create_even_if_existing,json=createEvenIfExisting" json:"create_even_if_existing,omitempty"`
	CreateWithoutCaster                           *bool                       `protobuf:"varint,9,opt,name=create_without_caster,json=createWithoutCaster" json:"create_without_caster,omitempty"`
	CreateWithoutAbility                          *bool                       `protobuf:"varint,10,opt,name=create_without_ability,json=createWithoutAbility" json:"create_without_ability,omitempty"`
	MoonshardConsumedBonus                        *int32                      `protobuf:"varint,100,opt,name=moonshard_consumed_bonus,json=moonshardConsumedBonus" json:"moonshard_consumed_bonus,omitempty"`
	MoonshardConsumedBonusNightVision             *int32                      `protobuf:"varint,101,opt,name=moonshard_consumed_bonus_night_vision,json=moonshardConsumedBonusNightVision" json:"moonshard_consumed_bonus_night_vision,omitempty"`
	WardtruesightRange                            *int32                      `protobuf:"varint,110,opt,name=wardtruesight_range,json=wardtruesightRange" json:"wardtruesight_range,omitempty"`
	UltimateScepterConsumedAlchemistBonusAllStats *int32                      `protobuf:"varint,120,opt,name=ultimate_scepter_consumed_alchemist_bonus_all_stats,json=ultimateScepterConsumedAlchemistBonusAllStats" json:"ultimate_scepter_consumed_alchemist_bonus_all_stats,omitempty"`
	UltimateScepterConsumedAlchemistBonusHealth   *int32                      `protobuf:"varint,121,opt,name=ultimate_scepter_consumed_alchemist_bonus_health,json=ultimateScepterConsumedAlchemistBonusHealth" json:"ultimate_scepter_consumed_alchemist_bonus_health,omitempty"`
	UltimateScepterConsumedAlchemistBonusMana     *int32                      `protobuf:"varint,122,opt,name=ultimate_scepter_consumed_alchemist_bonus_mana,json=ultimateScepterConsumedAlchemistBonusMana" json:"ultimate_scepter_consumed_alchemist_bonus_mana,omitempty"`
}

func (x *CMsgDotaScenario_Modifier) Reset() {
	*x = CMsgDotaScenario_Modifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_scenariomessages_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDotaScenario_Modifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDotaScenario_Modifier) ProtoMessage() {}

func (x *CMsgDotaScenario_Modifier) ProtoReflect() protoreflect.Message {
	mi := &file_dota_scenariomessages_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDotaScenario_Modifier.ProtoReflect.Descriptor instead.
func (*CMsgDotaScenario_Modifier) Descriptor() ([]byte, []int) {
	return file_dota_scenariomessages_proto_rawDescGZIP(), []int{6, 13}
}

func (x *CMsgDotaScenario_Modifier) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CMsgDotaScenario_Modifier) GetParent() *CMsgDotaScenario_EntityRef {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *CMsgDotaScenario_Modifier) GetCaster() *CMsgDotaScenario_EntityRef {
	if x != nil {
		return x.Caster
	}
	return nil
}

func (x *CMsgDotaScenario_Modifier) GetAbility() *CMsgDotaScenario_EntityRef {
	if x != nil {
		return x.Ability
	}
	return nil
}

func (x *CMsgDotaScenario_Modifier) GetDuration() float32 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

func (x *CMsgDotaScenario_Modifier) GetLifetimeRemaining() float32 {
	if x != nil && x.LifetimeRemaining != nil {
		return *x.LifetimeRemaining
	}
	return 0
}

func (x *CMsgDotaScenario_Modifier) GetStackCount() int32 {
	if x != nil && x.StackCount != nil {
		return *x.StackCount
	}
	return 0
}

func (x *CMsgDotaScenario_Modifier) GetCreateEvenIfExisting() bool {
	if x != nil && x.CreateEvenIfExisting != nil {
		return *x.CreateEvenIfExisting
	}
	return false
}

func (x *CMsgDotaScenario_Modifier) GetCreateWithoutCaster() bool {
	if x != nil && x.CreateWithoutCaster != nil {
		return *x.CreateWithoutCaster
	}
	return false
}

func (x *CMsgDotaScenario_Modifier) GetCreateWithoutAbility() bool {
	if x != nil && x.CreateWithoutAbility != nil {
		return *x.CreateWithoutAbility
	}
	return false
}

func (x *CMsgDotaScenario_Modifier) GetMoonshardConsumedBonus() int32 {
	if x != nil && x.MoonshardConsumedBonus != nil {
		return *x.MoonshardConsumedBonus
	}
	return 0
}

func (x *CMsgDotaScenario_Modifier) GetMoonshardConsumedBonusNightVision() int32 {
	if x != nil && x.MoonshardConsumedBonusNightVision != nil {
		return *x.MoonshardConsumedBonusNightVision
	}
	return 0
}

func (x *CMsgDotaScenario_Modifier) GetWardtruesightRange() int32 {
	if x != nil && x.WardtruesightRange != nil {
		return *x.WardtruesightRange
	}
	return 0
}

func (x *CMsgDotaScenario_Modifier) GetUltimateScepterConsumedAlchemistBonusAllStats() int32 {
	if x != nil && x.UltimateScepterConsumedAlchemistBonusAllStats != nil {
		return *x.UltimateScepterConsumedAlchemistBonusAllStats
	}
	return 0
}

func (x *CMsgDotaScenario_Modifier) GetUltimateScepterConsumedAlchemistBonusHealth() int32 {
	if x != nil && x.UltimateScepterConsumedAlchemistBonusHealth != nil {
		return *x.UltimateScepterConsumedAlchemistBonusHealth
	}
	return 0
}

func (x *CMsgDotaScenario_Modifier) GetUltimateScepterConsumedAlchemistBonusMana() int32 {
	if x != nil && x.UltimateScepterConsumedAlchemistBonusMana != nil {
		return *x.UltimateScepterConsumedAlchemistBonusMana
	}
	return 0
}

var File_dota_scenariomessages_proto protoreflect.FileDescriptor

var file_dota_scenariomessages_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x64, 0x6f, 0x74, 0x61, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x64,
	0x6f, 0x74, 0x61, 0x1a, 0x17, 0x64, 0x6f, 0x74, 0x61, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x30, 0x0a, 0x12,
	0x43, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x78,
	0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x79, 0x22, 0x8f,
	0x01, 0x0a, 0x1b, 0x43, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x47, 0x61, 0x6d, 0x65,
	0x5f, 0x52, 0x6f, 0x73, 0x68, 0x61, 0x6e, 0x53, 0x70, 0x61, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x1d,
	0x0a, 0x0a, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x63, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x12,
	0x1f, 0x0a, 0x0b, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x61, 0x6d,
	0x22, 0x7b, 0x0a, 0x14, 0x43, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x45, 0x6e, 0x74,
	0x5f, 0x43, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74,
	0x65, 0x61, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x08, 0x63, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x22, 0xb5, 0x02,
	0x0a, 0x10, 0x43, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x45, 0x6e, 0x74, 0x5f, 0x4e,
	0x50, 0x43, 0x12, 0x34, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x53, 0x63, 0x65,
	0x6e, 0x61, 0x72, 0x69, 0x6f, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x6e, 0x69,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x65, 0x61, 0x6d,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x5f, 0x66, 0x72, 0x61, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x46, 0x72, 0x61, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x77, 0x6e, 0x69, 0x6e,
	0x67, 0x5f, 0x63, 0x61, 0x6d, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x77,
	0x6e, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x6d, 0x70, 0x12, 0x4a, 0x0a, 0x14, 0x6f, 0x77, 0x6e, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x61, 0x6d, 0x70, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x53,
	0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x12, 0x6f, 0x77, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x6d, 0x70, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x61, 0x64, 0x65, 0x5f, 0x67,
	0x6f, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x61, 0x64,
	0x65, 0x47, 0x6f, 0x61, 0x6c, 0x22, 0x4d, 0x0a, 0x17, 0x43, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72,
	0x69, 0x6f, 0x45, 0x6e, 0x74, 0x5f, 0x53, 0x70, 0x69, 0x72, 0x69, 0x74, 0x42, 0x65, 0x61, 0x72,
	0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74,
	0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x65,
	0x61, 0x6d, 0x49, 0x64, 0x22, 0x50, 0x0a, 0x18, 0x43, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69,
	0x6f, 0x45, 0x6e, 0x74, 0x5f, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x34, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x53, 0x63, 0x65, 0x6e, 0x61,
	0x72, 0x69, 0x6f, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x91, 0x30, 0x0a, 0x10, 0x43, 0x4d, 0x73, 0x67, 0x44,
	0x6f, 0x74, 0x61, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x6c,
	0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6c,
	0x6f, 0x62, 0x62, 0x79, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x04, 0x67, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x44, 0x6f, 0x74, 0x61, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x2e, 0x47, 0x61, 0x6d,
	0x65, 0x52, 0x04, 0x67, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x44, 0x6f, 0x74, 0x61, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x2e, 0x54,
	0x65, 0x61, 0x6d, 0x52, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x33, 0x0a, 0x06, 0x68, 0x65,
	0x72, 0x6f, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x6f, 0x74,
	0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x6f, 0x74, 0x61, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72,
	0x69, 0x6f, 0x2e, 0x48, 0x65, 0x72, 0x6f, 0x52, 0x06, 0x68, 0x65, 0x72, 0x6f, 0x65, 0x73, 0x12,
	0x32, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x6f, 0x74, 0x61, 0x53, 0x63,
	0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x05, 0x73, 0x74,
	0x6f, 0x63, 0x6b, 0x12, 0x3d, 0x0a, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x44, 0x6f, 0x74, 0x61, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x2e, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x39, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x44, 0x6f, 0x74, 0x61, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x2e, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x31, 0x0a,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64,
	0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x6f, 0x74, 0x61, 0x53, 0x63, 0x65, 0x6e,
	0x61, 0x72, 0x69, 0x6f, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x12, 0x3d, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44,
	0x6f, 0x74, 0x61, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x2e, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x1a,
	0xac, 0x01, 0x0a, 0x09, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x66, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x65,
	0x75, 0x74, 0x72, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x73, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6e, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x53, 0x74, 0x61,
	0x73, 0x68, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69,
	0x64, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x73, 0x68, 0x61, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x6f, 0x73, 0x68, 0x61, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0xbd,
	0x01, 0x0a, 0x04, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x09, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x72, 0x6f, 0x73, 0x68, 0x61, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x53, 0x63, 0x65, 0x6e,
	0x61, 0x72, 0x69, 0x6f, 0x47, 0x61, 0x6d, 0x65, 0x5f, 0x52, 0x6f, 0x73, 0x68, 0x61, 0x6e, 0x53,
	0x70, 0x61, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x06, 0x72, 0x6f, 0x73, 0x68, 0x61, 0x6e, 0x1a, 0x55,
	0x0a, 0x0f, 0x54, 0x65, 0x61, 0x6d, 0x4e, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x74, 0x69, 0x65, 0x72, 0x1a, 0xa9, 0x02, 0x0a, 0x04, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x1f,
	0x0a, 0x0b, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x4b, 0x0a, 0x0d, 0x6e, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x44, 0x6f, 0x74, 0x61, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x2e, 0x54,
	0x65, 0x61, 0x6d, 0x4e, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0c,
	0x6e, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x68, 0x65, 0x72, 0x6f, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x68, 0x65, 0x72, 0x6f, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74,
	0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x25, 0x0a, 0x0e,
	0x62, 0x61, 0x72, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x62, 0x61, 0x72, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x4b, 0x69,
	0x6c, 0x6c, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x5f, 0x63, 0x6f, 0x6f,
	0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x67, 0x6c, 0x79,
	0x70, 0x68, 0x43, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x61,
	0x64, 0x61, 0x72, 0x5f, 0x63, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0d, 0x72, 0x61, 0x64, 0x61, 0x72, 0x43, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77,
	0x6e, 0x1a, 0x40, 0x0a, 0x0b, 0x48, 0x65, 0x72, 0x6f, 0x48, 0x65, 0x72, 0x6f, 0x49, 0x6e, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x1a, 0x42, 0x0a, 0x0d, 0x48, 0x65, 0x72, 0x6f, 0x48, 0x65, 0x72, 0x6f, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x90, 0x02, 0x0a, 0x11, 0x44, 0x61, 0x6d, 0x61,
	0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x42, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34,
	0x0a, 0x16, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x65, 0x5f, 0x72,
	0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x50, 0x72, 0x65, 0x52, 0x65, 0x64, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x50,
	0x6f, 0x73, 0x74, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x16,
	0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x64,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x6f, 0x75,
	0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x65, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x17, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x5f, 0x70,
	0x6f, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x15, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x73,
	0x74, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x37, 0x0a, 0x0b, 0x48, 0x65,
	0x72, 0x6f, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x1a, 0xed, 0x13, 0x0a, 0x04, 0x48, 0x65, 0x72, 0x6f, 0x12, 0x19, 0x0a, 0x08,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x68, 0x65, 0x72, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x65, 0x72,
	0x6f, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x78, 0x70, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x58, 0x70, 0x12, 0x28, 0x0a, 0x10,
	0x62, 0x6b, 0x62, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x62, 0x6b, 0x62, 0x43, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x65, 0x6f, 0x6e, 0x5f, 0x63,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x61, 0x65, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x55, 0x73,
	0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x67,
	0x6f, 0x6c, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x75, 0x6e, 0x72, 0x65, 0x6c,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x75, 0x6e, 0x72, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x6f, 0x6c, 0x64,
	0x12, 0x2a, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64,
	0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x45, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x24, 0x0a,
	0x0e, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x68, 0x65, 0x72, 0x6f, 0x4b, 0x69, 0x6c, 0x6c, 0x47,
	0x6f, 0x6c, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x65, 0x70, 0x5f, 0x6b, 0x69, 0x6c,
	0x6c, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x72,
	0x65, 0x65, 0x70, 0x4b, 0x69, 0x6c, 0x6c, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x6e,
	0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x67, 0x6f, 0x6c, 0x64,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6e, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x4b,
	0x69, 0x6c, 0x6c, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x72, 0x69,
	0x65, 0x72, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63,
	0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x6f,
	0x75, 0x6e, 0x74, 0x79, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72,
	0x6f, 0x73, 0x68, 0x61, 0x6e, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x72, 0x6f, 0x73, 0x68, 0x61, 0x6e, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x47, 0x6f, 0x6c,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x47, 0x6f, 0x6c, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x47, 0x6f, 0x6c,
	0x64, 0x12, 0x24, 0x0a, 0x0e, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x67,
	0x6f, 0x6c, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x77, 0x61, 0x72, 0x64, 0x4b,
	0x69, 0x6c, 0x6c, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65,
	0x6e, 0x69, 0x65, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x64, 0x65, 0x6e, 0x69,
	0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x68, 0x69, 0x74, 0x73, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x48, 0x69, 0x74, 0x73, 0x12,
	0x26, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x68, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6b, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x48, 0x69,
	0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x68, 0x69, 0x74, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x6b, 0x69, 0x6c, 0x6c, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x48, 0x69, 0x74, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x37, 0x0a, 0x18, 0x6e, 0x65, 0x61, 0x72, 0x62, 0x79, 0x5f,
	0x63, 0x72, 0x65, 0x65, 0x70, 0x5f, 0x64, 0x65, 0x61, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x6e, 0x65, 0x61, 0x72, 0x62, 0x79, 0x43,
	0x72, 0x65, 0x65, 0x70, 0x44, 0x65, 0x61, 0x74, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c,
	0x0a, 0x12, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x6e, 0x79, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x22, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x63, 0x6c, 0x61, 0x69,
	0x6d, 0x65, 0x64, 0x44, 0x65, 0x6e, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12,
	0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65,
	0x64, 0x4d, 0x69, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x69,
	0x73, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x6d, 0x69, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x62, 0x75, 0x79,
	0x62, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x62, 0x75, 0x79, 0x62, 0x61, 0x63,
	0x6b, 0x43, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a,
	0x17, 0x62, 0x75, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14,
	0x62, 0x75, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x47, 0x6f, 0x6c, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x75, 0x6e, 0x5f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x73, 0x74, 0x75,
	0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x65, 0x61,
	0x6c, 0x69, 0x6e, 0x67, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x68, 0x65, 0x61, 0x6c,
	0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6b, 0x69, 0x6c,
	0x6c, 0x73, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x4b,
	0x69, 0x6c, 0x6c, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x6f, 0x73, 0x68, 0x61, 0x6e, 0x5f, 0x6b,
	0x69, 0x6c, 0x6c, 0x73, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x6f, 0x73, 0x68,
	0x61, 0x6e, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x6f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x64,
	0x18, 0x30, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x57, 0x61, 0x72, 0x64, 0x73, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x73,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x64, 0x18, 0x31, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x73, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x57, 0x61, 0x72, 0x64, 0x73, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63,
	0x72, 0x65, 0x65, 0x70, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x32, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x65, 0x70, 0x73, 0x53, 0x74, 0x61, 0x63, 0x6b,
	0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x6d, 0x70, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x63,
	0x6b, 0x65, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x61, 0x6d, 0x70, 0x73,
	0x53, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x75, 0x6e, 0x65, 0x5f,
	0x70, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x18, 0x34, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72,
	0x75, 0x6e, 0x65, 0x50, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x67, 0x6f,
	0x6c, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x6e, 0x5f, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x35, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x67, 0x6f, 0x6c, 0x64, 0x53,
	0x70, 0x65, 0x6e, 0x74, 0x4f, 0x6e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x36, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x68, 0x65, 0x72, 0x6f, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x27,
	0x0a, 0x0f, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x64, 0x18, 0x37, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x77, 0x61, 0x72, 0x64, 0x73, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x5f, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x65, 0x64, 0x18, 0x38, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x77, 0x61, 0x72, 0x64, 0x73, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x65, 0x64,
	0x12, 0x39, 0x0a, 0x19, 0x67, 0x6f, 0x6c, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x5f, 0x6f,
	0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x3a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x16, 0x67, 0x6f, 0x6c, 0x64, 0x53, 0x70, 0x65, 0x6e, 0x74, 0x4f, 0x6e,
	0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x67,
	0x6f, 0x6c, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x6e, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x67, 0x6f, 0x6c, 0x64, 0x53, 0x70,
	0x65, 0x6e, 0x74, 0x4f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x67, 0x6f,
	0x6c, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x79, 0x62,
	0x61, 0x63, 0x6b, 0x73, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x67, 0x6f, 0x6c, 0x64,
	0x53, 0x70, 0x65, 0x6e, 0x74, 0x4f, 0x6e, 0x42, 0x75, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x12,
	0x2b, 0x0a, 0x12, 0x67, 0x6f, 0x6c, 0x64, 0x5f, 0x6c, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x6f, 0x5f,
	0x64, 0x65, 0x61, 0x74, 0x68, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x67, 0x6f, 0x6c,
	0x64, 0x4c, 0x6f, 0x73, 0x74, 0x54, 0x6f, 0x44, 0x65, 0x61, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05,
	0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6b, 0x69, 0x6c,
	0x6c, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x18, 0x3f, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x64, 0x65, 0x61, 0x74, 0x68, 0x73, 0x18, 0x40, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x64, 0x65,
	0x61, 0x74, 0x68, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6b, 0x18, 0x41, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6b, 0x69, 0x6c, 0x6c, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6b, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x61, 0x77, 0x6e,
	0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x44, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x72, 0x65, 0x73, 0x70, 0x61, 0x77, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x2a,
	0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x62, 0x75, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x45, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x42,
	0x75, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65,
	0x64, 0x18, 0x47, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x66, 0x69, 0x72, 0x73, 0x74, 0x42, 0x6c,
	0x6f, 0x6f, 0x64, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x18,
	0x48, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x6f,
	0x64, 0x47, 0x69, 0x76, 0x65, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x79,
	0x5f, 0x72, 0x75, 0x6e, 0x65, 0x73, 0x18, 0x49, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x62, 0x6f,
	0x75, 0x6e, 0x74, 0x79, 0x52, 0x75, 0x6e, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x6f, 0x75, 0x74,
	0x70, 0x6f, 0x73, 0x74, 0x73, 0x5f, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x64, 0x18, 0x4a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6f, 0x75, 0x74, 0x70, 0x6f, 0x73, 0x74, 0x73, 0x43, 0x61,
	0x70, 0x74, 0x75, 0x72, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e,
	0x43, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x0b,
	0x65, 0x6e, 0x65, 0x6d, 0x79, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x96, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x6f,
	0x74, 0x61, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x2e, 0x48, 0x65, 0x72, 0x6f, 0x48,
	0x65, 0x72, 0x6f, 0x49, 0x6e, 0x74, 0x52, 0x0a, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x4b, 0x69, 0x6c,
	0x6c, 0x73, 0x12, 0x4c, 0x0a, 0x0c, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x18, 0x97, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x64, 0x6f, 0x74, 0x61,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x6f, 0x74, 0x61, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69,
	0x6f, 0x2e, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x42, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0b, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x12, 0x41, 0x0a, 0x09, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x98, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x44, 0x6f, 0x74, 0x61, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x2e, 0x48, 0x65, 0x72,
	0x6f, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x09, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x1a, 0xbb, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x63, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e,
	0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x1a, 0xab, 0x01, 0x0a, 0x08, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1f,
	0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69,
	0x73, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x69, 0x73, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x65, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x66, 0x72, 0x61, 0x63, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0a, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x46, 0x72, 0x61, 0x63, 0x1a,
	0xeb, 0x01, 0x0a, 0x06, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x6f,
	0x75, 0x72, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x6f,
	0x74, 0x61, 0x2e, 0x43, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x45, 0x6e, 0x74, 0x5f,
	0x43, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72,
	0x12, 0x28, 0x0a, 0x03, 0x6e, 0x70, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x45, 0x6e,
	0x74, 0x5f, 0x4e, 0x50, 0x43, 0x52, 0x03, 0x6e, 0x70, 0x63, 0x12, 0x3e, 0x0a, 0x0b, 0x73, 0x70,
	0x69, 0x72, 0x69, 0x74, 0x5f, 0x62, 0x65, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f,
	0x45, 0x6e, 0x74, 0x5f, 0x53, 0x70, 0x69, 0x72, 0x69, 0x74, 0x42, 0x65, 0x61, 0x72, 0x52, 0x0a,
	0x73, 0x70, 0x69, 0x72, 0x69, 0x74, 0x42, 0x65, 0x61, 0x72, 0x12, 0x41, 0x0a, 0x0c, 0x64, 0x72,
	0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69,
	0x6f, 0x45, 0x6e, 0x74, 0x5f, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x0b, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x1a, 0xc9, 0x02,
	0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64,
	0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x6f, 0x74, 0x61, 0x53, 0x63, 0x65, 0x6e,
	0x61, 0x72, 0x69, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x66, 0x52, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x73, 0x6c, 0x6f, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x53, 0x6c, 0x6f, 0x74,
	0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x5f, 0x64, 0x72, 0x6f, 0x70,
	0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6e, 0x65, 0x75,
	0x74, 0x72, 0x61, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x61, 0x72, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x10, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x43, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x28, 0x0a, 0x10, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x72, 0x75, 0x6e, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x64, 0x52, 0x75, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x1a, 0xce, 0x07, 0x0a, 0x08, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x6f, 0x74,
	0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x6f, 0x74, 0x61, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72,
	0x69, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x66, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x06, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x44, 0x6f, 0x74, 0x61, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x2e, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x66, 0x52, 0x06, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x12, 0x3a,
	0x0a, 0x07, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x6f, 0x74, 0x61, 0x53,
	0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x66, 0x52, 0x07, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x11, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x61,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x63,
	0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x17, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x5f, 0x69, 0x66, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x49, 0x66, 0x45, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x32, 0x0a,
	0x15, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x5f,
	0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x43, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68,
	0x6f, 0x75, 0x74, 0x5f, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x14, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74,
	0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x38, 0x0a, 0x18, 0x6d, 0x6f, 0x6f, 0x6e, 0x73,
	0x68, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x5f, 0x62, 0x6f,
	0x6e, 0x75, 0x73, 0x18, 0x64, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x6d, 0x6f, 0x6f, 0x6e, 0x73,
	0x68, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x42, 0x6f, 0x6e, 0x75,
	0x73, 0x12, 0x50, 0x0a, 0x25, 0x6d, 0x6f, 0x6f, 0x6e, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x63,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x5f, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x6e, 0x69,
	0x67, 0x68, 0x74, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x65, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x21, 0x6d, 0x6f, 0x6f, 0x6e, 0x73, 0x68, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x64, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x4e, 0x69, 0x67, 0x68, 0x74, 0x56, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x13, 0x77, 0x61, 0x72, 0x64, 0x74, 0x72, 0x75, 0x65, 0x73,
	0x69, 0x67, 0x68, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x12, 0x77, 0x61, 0x72, 0x64, 0x74, 0x72, 0x75, 0x65, 0x73, 0x69, 0x67, 0x68, 0x74, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x6a, 0x0a, 0x33, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65,
	0x5f, 0x73, 0x63, 0x65, 0x70, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x64, 0x5f, 0x61, 0x6c, 0x63, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x74, 0x5f, 0x62, 0x6f, 0x6e, 0x75,
	0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x78, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x2d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x53, 0x63, 0x65, 0x70, 0x74,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x41, 0x6c, 0x63, 0x68, 0x65, 0x6d,
	0x69, 0x73, 0x74, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x12, 0x65, 0x0a, 0x30, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x63, 0x65,
	0x70, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x5f, 0x61, 0x6c,
	0x63, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x74, 0x5f, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x68, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x18, 0x79, 0x20, 0x01, 0x28, 0x05, 0x52, 0x2b, 0x75, 0x6c, 0x74, 0x69,
	0x6d, 0x61, 0x74, 0x65, 0x53, 0x63, 0x65, 0x70, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x64, 0x41, 0x6c, 0x63, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x74, 0x42, 0x6f, 0x6e, 0x75,
	0x73, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x61, 0x0a, 0x2e, 0x75, 0x6c, 0x74, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x5f, 0x73, 0x63, 0x65, 0x70, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x64, 0x5f, 0x61, 0x6c, 0x63, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x74, 0x5f, 0x62,
	0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x18, 0x7a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x29, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x53, 0x63, 0x65, 0x70, 0x74, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x41, 0x6c, 0x63, 0x68, 0x65, 0x6d, 0x69, 0x73,
	0x74, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x4d, 0x61, 0x6e, 0x61, 0x42, 0x25, 0x5a, 0x23, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x74, 0x61, 0x62, 0x75, 0x66,
	0x66, 0x2f, 0x6d, 0x61, 0x6e, 0x74, 0x61, 0x2f, 0x64, 0x6f, 0x74, 0x61, 0x3b, 0x64, 0x6f, 0x74,
	0x61,
}

var (
	file_dota_scenariomessages_proto_rawDescOnce sync.Once
	file_dota_scenariomessages_proto_rawDescData = file_dota_scenariomessages_proto_rawDesc
)

func file_dota_scenariomessages_proto_rawDescGZIP() []byte {
	file_dota_scenariomessages_proto_rawDescOnce.Do(func() {
		file_dota_scenariomessages_proto_rawDescData = protoimpl.X.CompressGZIP(file_dota_scenariomessages_proto_rawDescData)
	})
	return file_dota_scenariomessages_proto_rawDescData
}

var file_dota_scenariomessages_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_dota_scenariomessages_proto_goTypes = []interface{}{
	(*CScenario_Position)(nil),                 // 0: dota.CScenario_Position
	(*CScenarioGame_RoshanSpawner)(nil),        // 1: dota.CScenarioGame_RoshanSpawner
	(*CScenarioEnt_Courier)(nil),               // 2: dota.CScenarioEnt_Courier
	(*CScenarioEnt_NPC)(nil),                   // 3: dota.CScenarioEnt_NPC
	(*CScenarioEnt_SpiritBear)(nil),            // 4: dota.CScenarioEnt_SpiritBear
	(*CScenarioEnt_DroppedItem)(nil),           // 5: dota.CScenarioEnt_DroppedItem
	(*CMsgDotaScenario)(nil),                   // 6: dota.CMsgDotaScenario
	(*CMsgDotaScenario_EntityRef)(nil),         // 7: dota.CMsgDotaScenario.EntityRef
	(*CMsgDotaScenario_Game)(nil),              // 8: dota.CMsgDotaScenario.Game
	(*CMsgDotaScenario_TeamNeutralItem)(nil),   // 9: dota.CMsgDotaScenario.TeamNeutralItem
	(*CMsgDotaScenario_Team)(nil),              // 10: dota.CMsgDotaScenario.Team
	(*CMsgDotaScenario_HeroHeroInt)(nil),       // 11: dota.CMsgDotaScenario.HeroHeroInt
	(*CMsgDotaScenario_HeroHeroFloat)(nil),     // 12: dota.CMsgDotaScenario.HeroHeroFloat
	(*CMsgDotaScenario_DamageStatsByType)(nil), // 13: dota.CMsgDotaScenario.DamageStatsByType
	(*CMsgDotaScenario_HeroAbility)(nil),       // 14: dota.CMsgDotaScenario.HeroAbility
	(*CMsgDotaScenario_Hero)(nil),              // 15: dota.CMsgDotaScenario.Hero
	(*CMsgDotaScenario_Stock)(nil),             // 16: dota.CMsgDotaScenario.Stock
	(*CMsgDotaScenario_Building)(nil),          // 17: dota.CMsgDotaScenario.Building
	(*CMsgDotaScenario_Entity)(nil),            // 18: dota.CMsgDotaScenario.Entity
	(*CMsgDotaScenario_Item)(nil),              // 19: dota.CMsgDotaScenario.Item
	(*CMsgDotaScenario_Modifier)(nil),          // 20: dota.CMsgDotaScenario.Modifier
}
var file_dota_scenariomessages_proto_depIdxs = []int32{
	0,  // 0: dota.CScenarioEnt_NPC.position:type_name -> dota.CScenario_Position
	0,  // 1: dota.CScenarioEnt_NPC.owning_camp_position:type_name -> dota.CScenario_Position
	0,  // 2: dota.CScenarioEnt_DroppedItem.position:type_name -> dota.CScenario_Position
	8,  // 3: dota.CMsgDotaScenario.game:type_name -> dota.CMsgDotaScenario.Game
	10, // 4: dota.CMsgDotaScenario.teams:type_name -> dota.CMsgDotaScenario.Team
	15, // 5: dota.CMsgDotaScenario.heroes:type_name -> dota.CMsgDotaScenario.Hero
	16, // 6: dota.CMsgDotaScenario.stock:type_name -> dota.CMsgDotaScenario.Stock
	17, // 7: dota.CMsgDotaScenario.buildings:type_name -> dota.CMsgDotaScenario.Building
	18, // 8: dota.CMsgDotaScenario.entities:type_name -> dota.CMsgDotaScenario.Entity
	19, // 9: dota.CMsgDotaScenario.items:type_name -> dota.CMsgDotaScenario.Item
	20, // 10: dota.CMsgDotaScenario.modifiers:type_name -> dota.CMsgDotaScenario.Modifier
	1,  // 11: dota.CMsgDotaScenario.Game.roshan:type_name -> dota.CScenarioGame_RoshanSpawner
	9,  // 12: dota.CMsgDotaScenario.Team.neutral_items:type_name -> dota.CMsgDotaScenario.TeamNeutralItem
	0,  // 13: dota.CMsgDotaScenario.Hero.position:type_name -> dota.CScenario_Position
	11, // 14: dota.CMsgDotaScenario.Hero.enemy_kills:type_name -> dota.CMsgDotaScenario.HeroHeroInt
	13, // 15: dota.CMsgDotaScenario.Hero.damage_stats:type_name -> dota.CMsgDotaScenario.DamageStatsByType
	14, // 16: dota.CMsgDotaScenario.Hero.abilities:type_name -> dota.CMsgDotaScenario.HeroAbility
	2,  // 17: dota.CMsgDotaScenario.Entity.courier:type_name -> dota.CScenarioEnt_Courier
	3,  // 18: dota.CMsgDotaScenario.Entity.npc:type_name -> dota.CScenarioEnt_NPC
	4,  // 19: dota.CMsgDotaScenario.Entity.spirit_bear:type_name -> dota.CScenarioEnt_SpiritBear
	5,  // 20: dota.CMsgDotaScenario.Entity.dropped_item:type_name -> dota.CScenarioEnt_DroppedItem
	7,  // 21: dota.CMsgDotaScenario.Item.location:type_name -> dota.CMsgDotaScenario.EntityRef
	7,  // 22: dota.CMsgDotaScenario.Modifier.parent:type_name -> dota.CMsgDotaScenario.EntityRef
	7,  // 23: dota.CMsgDotaScenario.Modifier.caster:type_name -> dota.CMsgDotaScenario.EntityRef
	7,  // 24: dota.CMsgDotaScenario.Modifier.ability:type_name -> dota.CMsgDotaScenario.EntityRef
	25, // [25:25] is the sub-list for method output_type
	25, // [25:25] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_dota_scenariomessages_proto_init() }
func file_dota_scenariomessages_proto_init() {
	if File_dota_scenariomessages_proto != nil {
		return
	}
	file_dota_shared_enums_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_dota_scenariomessages_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CScenario_Position); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_scenariomessages_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CScenarioGame_RoshanSpawner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_scenariomessages_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CScenarioEnt_Courier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_scenariomessages_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CScenarioEnt_NPC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_scenariomessages_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CScenarioEnt_SpiritBear); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_scenariomessages_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CScenarioEnt_DroppedItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_scenariomessages_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDotaScenario); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_scenariomessages_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDotaScenario_EntityRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_scenariomessages_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDotaScenario_Game); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_scenariomessages_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDotaScenario_TeamNeutralItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_scenariomessages_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDotaScenario_Team); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_scenariomessages_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDotaScenario_HeroHeroInt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_scenariomessages_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDotaScenario_HeroHeroFloat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_scenariomessages_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDotaScenario_DamageStatsByType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_scenariomessages_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDotaScenario_HeroAbility); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_scenariomessages_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDotaScenario_Hero); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_scenariomessages_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDotaScenario_Stock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_scenariomessages_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDotaScenario_Building); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_scenariomessages_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDotaScenario_Entity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_scenariomessages_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDotaScenario_Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_scenariomessages_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDotaScenario_Modifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dota_scenariomessages_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_dota_scenariomessages_proto_goTypes,
		DependencyIndexes: file_dota_scenariomessages_proto_depIdxs,
		MessageInfos:      file_dota_scenariomessages_proto_msgTypes,
	}.Build()
	File_dota_scenariomessages_proto = out.File
	file_dota_scenariomessages_proto_rawDesc = nil
	file_dota_scenariomessages_proto_goTypes = nil
	file_dota_scenariomessages_proto_depIdxs = nil
}
