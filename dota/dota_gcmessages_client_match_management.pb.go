// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.5
// source: dota_gcmessages_client_match_management.proto

package dota

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EStartFindingMatchResult int32

const (
	EStartFindingMatchResult_k_EStartFindingMatchResult_Invalid                               EStartFindingMatchResult = 0
	EStartFindingMatchResult_k_EStartFindingMatchResult_OK                                    EStartFindingMatchResult = 1
	EStartFindingMatchResult_k_EStartFindingMatchResult_AlreadySearching                      EStartFindingMatchResult = 2
	EStartFindingMatchResult_k_EStartFindingMatchResult_FailGeneric                           EStartFindingMatchResult = 100
	EStartFindingMatchResult_k_EStartFindingMatchResult_FailedIgnore                          EStartFindingMatchResult = 101
	EStartFindingMatchResult_k_EStartFindingMatchResult_MatchmakingDisabled                   EStartFindingMatchResult = 102
	EStartFindingMatchResult_k_EStartFindingMatchResult_RegionOffline                         EStartFindingMatchResult = 103
	EStartFindingMatchResult_k_EStartFindingMatchResult_MatchmakingCooldown                   EStartFindingMatchResult = 104
	EStartFindingMatchResult_k_EStartFindingMatchResult_ClientOutOfDate                       EStartFindingMatchResult = 105
	EStartFindingMatchResult_k_EStartFindingMatchResult_CompetitiveNoLowPriority              EStartFindingMatchResult = 106
	EStartFindingMatchResult_k_EStartFindingMatchResult_CompetitiveNotUnlocked                EStartFindingMatchResult = 107
	EStartFindingMatchResult_k_EStartFindingMatchResult_GameModeNotUnlocked                   EStartFindingMatchResult = 108
	EStartFindingMatchResult_k_EStartFindingMatchResult_CompetitiveNotEnoughPlayTime          EStartFindingMatchResult = 109
	EStartFindingMatchResult_k_EStartFindingMatchResult_MissingInitialSkill                   EStartFindingMatchResult = 110
	EStartFindingMatchResult_k_EStartFindingMatchResult_CompetitiveRankSpreadTooLarge         EStartFindingMatchResult = 111
	EStartFindingMatchResult_k_EStartFindingMatchResult_MemberAlreadyInLobby                  EStartFindingMatchResult = 112
	EStartFindingMatchResult_k_EStartFindingMatchResult_MemberNotVACVerified                  EStartFindingMatchResult = 113
	EStartFindingMatchResult_k_EStartFindingMatchResult_WeekendTourneyBadPartySize            EStartFindingMatchResult = 114
	EStartFindingMatchResult_k_EStartFindingMatchResult_WeekendTourneyTeamBuyInTooSmall       EStartFindingMatchResult = 115
	EStartFindingMatchResult_k_EStartFindingMatchResult_WeekendTourneyIndividualBuyInTooLarge EStartFindingMatchResult = 116
	EStartFindingMatchResult_k_EStartFindingMatchResult_WeekendTourneyTeamBuyInTooLarge       EStartFindingMatchResult = 117
	EStartFindingMatchResult_k_EStartFindingMatchResult_MemberMissingEventOwnership           EStartFindingMatchResult = 118
	EStartFindingMatchResult_k_EStartFindingMatchResult_WeekendTourneyNotUnlocked             EStartFindingMatchResult = 119
	EStartFindingMatchResult_k_EStartFindingMatchResult_WeekendTourneyRecentParticipation     EStartFindingMatchResult = 120
	EStartFindingMatchResult_k_EStartFindingMatchResult_MemberMissingAnchoredPhoneNumber      EStartFindingMatchResult = 121
	EStartFindingMatchResult_k_EStartFindingMatchResult_NotMemberOfClan                       EStartFindingMatchResult = 122
	EStartFindingMatchResult_k_EStartFindingMatchResult_CoachesChallengeBadPartySize          EStartFindingMatchResult = 123
	EStartFindingMatchResult_k_EStartFindingMatchResult_CoachesChallengeRequirementsNotMet    EStartFindingMatchResult = 124
	EStartFindingMatchResult_k_EStartFindingMatchResult_InvalidRoleSelections                 EStartFindingMatchResult = 125
	EStartFindingMatchResult_k_EStartFindingMatchResult_PhoneNumberDiscrepancy                EStartFindingMatchResult = 126
	EStartFindingMatchResult_k_EStartFindingMatchResult_NoQueuePoints                         EStartFindingMatchResult = 127
	EStartFindingMatchResult_k_EStartFindingMatchResult_MemberMissingGauntletFlag             EStartFindingMatchResult = 128
	EStartFindingMatchResult_k_EStartFindingMatchResult_MemberGauntletTooRecent               EStartFindingMatchResult = 129
	EStartFindingMatchResult_k_EStartFindingMatchResult_DifficultyNotUnlocked                 EStartFindingMatchResult = 130
	EStartFindingMatchResult_k_EStartFindingMatchResult_CoachesNotAllowedInParty              EStartFindingMatchResult = 131
	EStartFindingMatchResult_k_EStartFindingMatchResult_MatchmakingBusy                       EStartFindingMatchResult = 132
	EStartFindingMatchResult_k_EStartFindingMatchResult_SteamChinaBanned                      EStartFindingMatchResult = 133
	EStartFindingMatchResult_k_EStartFindingMatchResult_SteamChinaInvalidMixedParty           EStartFindingMatchResult = 134
	EStartFindingMatchResult_k_EStartFindingMatchResult_RestrictedFromRanked                  EStartFindingMatchResult = 135
)

// Enum value maps for EStartFindingMatchResult.
var (
	EStartFindingMatchResult_name = map[int32]string{
		0:   "k_EStartFindingMatchResult_Invalid",
		1:   "k_EStartFindingMatchResult_OK",
		2:   "k_EStartFindingMatchResult_AlreadySearching",
		100: "k_EStartFindingMatchResult_FailGeneric",
		101: "k_EStartFindingMatchResult_FailedIgnore",
		102: "k_EStartFindingMatchResult_MatchmakingDisabled",
		103: "k_EStartFindingMatchResult_RegionOffline",
		104: "k_EStartFindingMatchResult_MatchmakingCooldown",
		105: "k_EStartFindingMatchResult_ClientOutOfDate",
		106: "k_EStartFindingMatchResult_CompetitiveNoLowPriority",
		107: "k_EStartFindingMatchResult_CompetitiveNotUnlocked",
		108: "k_EStartFindingMatchResult_GameModeNotUnlocked",
		109: "k_EStartFindingMatchResult_CompetitiveNotEnoughPlayTime",
		110: "k_EStartFindingMatchResult_MissingInitialSkill",
		111: "k_EStartFindingMatchResult_CompetitiveRankSpreadTooLarge",
		112: "k_EStartFindingMatchResult_MemberAlreadyInLobby",
		113: "k_EStartFindingMatchResult_MemberNotVACVerified",
		114: "k_EStartFindingMatchResult_WeekendTourneyBadPartySize",
		115: "k_EStartFindingMatchResult_WeekendTourneyTeamBuyInTooSmall",
		116: "k_EStartFindingMatchResult_WeekendTourneyIndividualBuyInTooLarge",
		117: "k_EStartFindingMatchResult_WeekendTourneyTeamBuyInTooLarge",
		118: "k_EStartFindingMatchResult_MemberMissingEventOwnership",
		119: "k_EStartFindingMatchResult_WeekendTourneyNotUnlocked",
		120: "k_EStartFindingMatchResult_WeekendTourneyRecentParticipation",
		121: "k_EStartFindingMatchResult_MemberMissingAnchoredPhoneNumber",
		122: "k_EStartFindingMatchResult_NotMemberOfClan",
		123: "k_EStartFindingMatchResult_CoachesChallengeBadPartySize",
		124: "k_EStartFindingMatchResult_CoachesChallengeRequirementsNotMet",
		125: "k_EStartFindingMatchResult_InvalidRoleSelections",
		126: "k_EStartFindingMatchResult_PhoneNumberDiscrepancy",
		127: "k_EStartFindingMatchResult_NoQueuePoints",
		128: "k_EStartFindingMatchResult_MemberMissingGauntletFlag",
		129: "k_EStartFindingMatchResult_MemberGauntletTooRecent",
		130: "k_EStartFindingMatchResult_DifficultyNotUnlocked",
		131: "k_EStartFindingMatchResult_CoachesNotAllowedInParty",
		132: "k_EStartFindingMatchResult_MatchmakingBusy",
		133: "k_EStartFindingMatchResult_SteamChinaBanned",
		134: "k_EStartFindingMatchResult_SteamChinaInvalidMixedParty",
		135: "k_EStartFindingMatchResult_RestrictedFromRanked",
	}
	EStartFindingMatchResult_value = map[string]int32{
		"k_EStartFindingMatchResult_Invalid":                               0,
		"k_EStartFindingMatchResult_OK":                                    1,
		"k_EStartFindingMatchResult_AlreadySearching":                      2,
		"k_EStartFindingMatchResult_FailGeneric":                           100,
		"k_EStartFindingMatchResult_FailedIgnore":                          101,
		"k_EStartFindingMatchResult_MatchmakingDisabled":                   102,
		"k_EStartFindingMatchResult_RegionOffline":                         103,
		"k_EStartFindingMatchResult_MatchmakingCooldown":                   104,
		"k_EStartFindingMatchResult_ClientOutOfDate":                       105,
		"k_EStartFindingMatchResult_CompetitiveNoLowPriority":              106,
		"k_EStartFindingMatchResult_CompetitiveNotUnlocked":                107,
		"k_EStartFindingMatchResult_GameModeNotUnlocked":                   108,
		"k_EStartFindingMatchResult_CompetitiveNotEnoughPlayTime":          109,
		"k_EStartFindingMatchResult_MissingInitialSkill":                   110,
		"k_EStartFindingMatchResult_CompetitiveRankSpreadTooLarge":         111,
		"k_EStartFindingMatchResult_MemberAlreadyInLobby":                  112,
		"k_EStartFindingMatchResult_MemberNotVACVerified":                  113,
		"k_EStartFindingMatchResult_WeekendTourneyBadPartySize":            114,
		"k_EStartFindingMatchResult_WeekendTourneyTeamBuyInTooSmall":       115,
		"k_EStartFindingMatchResult_WeekendTourneyIndividualBuyInTooLarge": 116,
		"k_EStartFindingMatchResult_WeekendTourneyTeamBuyInTooLarge":       117,
		"k_EStartFindingMatchResult_MemberMissingEventOwnership":           118,
		"k_EStartFindingMatchResult_WeekendTourneyNotUnlocked":             119,
		"k_EStartFindingMatchResult_WeekendTourneyRecentParticipation":     120,
		"k_EStartFindingMatchResult_MemberMissingAnchoredPhoneNumber":      121,
		"k_EStartFindingMatchResult_NotMemberOfClan":                       122,
		"k_EStartFindingMatchResult_CoachesChallengeBadPartySize":          123,
		"k_EStartFindingMatchResult_CoachesChallengeRequirementsNotMet":    124,
		"k_EStartFindingMatchResult_InvalidRoleSelections":                 125,
		"k_EStartFindingMatchResult_PhoneNumberDiscrepancy":                126,
		"k_EStartFindingMatchResult_NoQueuePoints":                         127,
		"k_EStartFindingMatchResult_MemberMissingGauntletFlag":             128,
		"k_EStartFindingMatchResult_MemberGauntletTooRecent":               129,
		"k_EStartFindingMatchResult_DifficultyNotUnlocked":                 130,
		"k_EStartFindingMatchResult_CoachesNotAllowedInParty":              131,
		"k_EStartFindingMatchResult_MatchmakingBusy":                       132,
		"k_EStartFindingMatchResult_SteamChinaBanned":                      133,
		"k_EStartFindingMatchResult_SteamChinaInvalidMixedParty":           134,
		"k_EStartFindingMatchResult_RestrictedFromRanked":                  135,
	}
)

func (x EStartFindingMatchResult) Enum() *EStartFindingMatchResult {
	p := new(EStartFindingMatchResult)
	*p = x
	return p
}

func (x EStartFindingMatchResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EStartFindingMatchResult) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_match_management_proto_enumTypes[0].Descriptor()
}

func (EStartFindingMatchResult) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_match_management_proto_enumTypes[0]
}

func (x EStartFindingMatchResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EStartFindingMatchResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EStartFindingMatchResult(num)
	return nil
}

// Deprecated: Use EStartFindingMatchResult.Descriptor instead.
func (EStartFindingMatchResult) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_match_management_proto_rawDescGZIP(), []int{0}
}

type CMsgStartFindingMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key                         *string             `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Matchgroups                 *uint32             `protobuf:"varint,2,opt,name=matchgroups" json:"matchgroups,omitempty"`
	ClientVersion               *uint32             `protobuf:"varint,3,opt,name=client_version,json=clientVersion" json:"client_version,omitempty"`
	GameModes                   *uint32             `protobuf:"varint,4,opt,name=game_modes,json=gameModes" json:"game_modes,omitempty"`
	MatchType                   *MatchType          `protobuf:"varint,6,opt,name=match_type,json=matchType,enum=dota.MatchType" json:"match_type,omitempty"`
	Matchlanguages              *uint32             `protobuf:"varint,7,opt,name=matchlanguages" json:"matchlanguages,omitempty"`
	TeamId                      *uint32             `protobuf:"varint,8,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	GameLanguageEnum            *MatchLanguages     `protobuf:"varint,10,opt,name=game_language_enum,json=gameLanguageEnum,enum=dota.MatchLanguages" json:"game_language_enum,omitempty"`
	GameLanguageName            *string             `protobuf:"bytes,11,opt,name=game_language_name,json=gameLanguageName" json:"game_language_name,omitempty"`
	PingData                    *CMsgClientPingData `protobuf:"bytes,12,opt,name=ping_data,json=pingData" json:"ping_data,omitempty"`
	RegionSelectFlags           *uint32             `protobuf:"varint,13,opt,name=region_select_flags,json=regionSelectFlags" json:"region_select_flags,omitempty"`
	SoloQueue                   *bool               `protobuf:"varint,14,opt,name=solo_queue,json=soloQueue" json:"solo_queue,omitempty"`
	SteamClanAccountId          *uint32             `protobuf:"varint,16,opt,name=steam_clan_account_id,json=steamClanAccountId" json:"steam_clan_account_id,omitempty"`
	IsChallengeMatch            *bool               `protobuf:"varint,17,opt,name=is_challenge_match,json=isChallengeMatch" json:"is_challenge_match,omitempty"`
	LaneSelectionFlags          *uint32             `protobuf:"varint,18,opt,name=lane_selection_flags,json=laneSelectionFlags" json:"lane_selection_flags,omitempty"`
	HighPriorityDisabled        *bool               `protobuf:"varint,19,opt,name=high_priority_disabled,json=highPriorityDisabled" json:"high_priority_disabled,omitempty"`
	DisableExperimentalGameplay *bool               `protobuf:"varint,20,opt,name=disable_experimental_gameplay,json=disableExperimentalGameplay" json:"disable_experimental_gameplay,omitempty"`
	CustomGameDifficultyMask    *uint32             `protobuf:"varint,21,opt,name=custom_game_difficulty_mask,json=customGameDifficultyMask" json:"custom_game_difficulty_mask,omitempty"`
	BotDifficultyMask           *uint32             `protobuf:"varint,22,opt,name=bot_difficulty_mask,json=botDifficultyMask" json:"bot_difficulty_mask,omitempty"`
	BotScriptIndexMask          *uint32             `protobuf:"varint,23,opt,name=bot_script_index_mask,json=botScriptIndexMask" json:"bot_script_index_mask,omitempty"`
}

func (x *CMsgStartFindingMatch) Reset() {
	*x = CMsgStartFindingMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgStartFindingMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgStartFindingMatch) ProtoMessage() {}

func (x *CMsgStartFindingMatch) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgStartFindingMatch.ProtoReflect.Descriptor instead.
func (*CMsgStartFindingMatch) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_match_management_proto_rawDescGZIP(), []int{0}
}

func (x *CMsgStartFindingMatch) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *CMsgStartFindingMatch) GetMatchgroups() uint32 {
	if x != nil && x.Matchgroups != nil {
		return *x.Matchgroups
	}
	return 0
}

func (x *CMsgStartFindingMatch) GetClientVersion() uint32 {
	if x != nil && x.ClientVersion != nil {
		return *x.ClientVersion
	}
	return 0
}

func (x *CMsgStartFindingMatch) GetGameModes() uint32 {
	if x != nil && x.GameModes != nil {
		return *x.GameModes
	}
	return 0
}

func (x *CMsgStartFindingMatch) GetMatchType() MatchType {
	if x != nil && x.MatchType != nil {
		return *x.MatchType
	}
	return MatchType_MATCH_TYPE_CASUAL
}

func (x *CMsgStartFindingMatch) GetMatchlanguages() uint32 {
	if x != nil && x.Matchlanguages != nil {
		return *x.Matchlanguages
	}
	return 0
}

func (x *CMsgStartFindingMatch) GetTeamId() uint32 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

func (x *CMsgStartFindingMatch) GetGameLanguageEnum() MatchLanguages {
	if x != nil && x.GameLanguageEnum != nil {
		return *x.GameLanguageEnum
	}
	return MatchLanguages_MATCH_LANGUAGE_INVALID
}

func (x *CMsgStartFindingMatch) GetGameLanguageName() string {
	if x != nil && x.GameLanguageName != nil {
		return *x.GameLanguageName
	}
	return ""
}

func (x *CMsgStartFindingMatch) GetPingData() *CMsgClientPingData {
	if x != nil {
		return x.PingData
	}
	return nil
}

func (x *CMsgStartFindingMatch) GetRegionSelectFlags() uint32 {
	if x != nil && x.RegionSelectFlags != nil {
		return *x.RegionSelectFlags
	}
	return 0
}

func (x *CMsgStartFindingMatch) GetSoloQueue() bool {
	if x != nil && x.SoloQueue != nil {
		return *x.SoloQueue
	}
	return false
}

func (x *CMsgStartFindingMatch) GetSteamClanAccountId() uint32 {
	if x != nil && x.SteamClanAccountId != nil {
		return *x.SteamClanAccountId
	}
	return 0
}

func (x *CMsgStartFindingMatch) GetIsChallengeMatch() bool {
	if x != nil && x.IsChallengeMatch != nil {
		return *x.IsChallengeMatch
	}
	return false
}

func (x *CMsgStartFindingMatch) GetLaneSelectionFlags() uint32 {
	if x != nil && x.LaneSelectionFlags != nil {
		return *x.LaneSelectionFlags
	}
	return 0
}

func (x *CMsgStartFindingMatch) GetHighPriorityDisabled() bool {
	if x != nil && x.HighPriorityDisabled != nil {
		return *x.HighPriorityDisabled
	}
	return false
}

func (x *CMsgStartFindingMatch) GetDisableExperimentalGameplay() bool {
	if x != nil && x.DisableExperimentalGameplay != nil {
		return *x.DisableExperimentalGameplay
	}
	return false
}

func (x *CMsgStartFindingMatch) GetCustomGameDifficultyMask() uint32 {
	if x != nil && x.CustomGameDifficultyMask != nil {
		return *x.CustomGameDifficultyMask
	}
	return 0
}

func (x *CMsgStartFindingMatch) GetBotDifficultyMask() uint32 {
	if x != nil && x.BotDifficultyMask != nil {
		return *x.BotDifficultyMask
	}
	return 0
}

func (x *CMsgStartFindingMatch) GetBotScriptIndexMask() uint32 {
	if x != nil && x.BotScriptIndexMask != nil {
		return *x.BotScriptIndexMask
	}
	return 0
}

type CMsgStartFindingMatchResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LegacyGenericEresult    *uint32                   `protobuf:"varint,1,opt,name=legacy_generic_eresult,json=legacyGenericEresult" json:"legacy_generic_eresult,omitempty"`
	Result                  *EStartFindingMatchResult `protobuf:"varint,2,opt,name=result,enum=dota.EStartFindingMatchResult" json:"result,omitempty"`
	ErrorToken              *string                   `protobuf:"bytes,3,opt,name=error_token,json=errorToken" json:"error_token,omitempty"`
	DebugMessage            *string                   `protobuf:"bytes,4,opt,name=debug_message,json=debugMessage" json:"debug_message,omitempty"`
	ResponsiblePartyMembers []uint64                  `protobuf:"fixed64,5,rep,name=responsible_party_members,json=responsiblePartyMembers" json:"responsible_party_members,omitempty"`
	ResultMetadata          *uint32                   `protobuf:"varint,6,opt,name=result_metadata,json=resultMetadata" json:"result_metadata,omitempty"`
}

func (x *CMsgStartFindingMatchResult) Reset() {
	*x = CMsgStartFindingMatchResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgStartFindingMatchResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgStartFindingMatchResult) ProtoMessage() {}

func (x *CMsgStartFindingMatchResult) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgStartFindingMatchResult.ProtoReflect.Descriptor instead.
func (*CMsgStartFindingMatchResult) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_match_management_proto_rawDescGZIP(), []int{1}
}

func (x *CMsgStartFindingMatchResult) GetLegacyGenericEresult() uint32 {
	if x != nil && x.LegacyGenericEresult != nil {
		return *x.LegacyGenericEresult
	}
	return 0
}

func (x *CMsgStartFindingMatchResult) GetResult() EStartFindingMatchResult {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return EStartFindingMatchResult_k_EStartFindingMatchResult_Invalid
}

func (x *CMsgStartFindingMatchResult) GetErrorToken() string {
	if x != nil && x.ErrorToken != nil {
		return *x.ErrorToken
	}
	return ""
}

func (x *CMsgStartFindingMatchResult) GetDebugMessage() string {
	if x != nil && x.DebugMessage != nil {
		return *x.DebugMessage
	}
	return ""
}

func (x *CMsgStartFindingMatchResult) GetResponsiblePartyMembers() []uint64 {
	if x != nil {
		return x.ResponsiblePartyMembers
	}
	return nil
}

func (x *CMsgStartFindingMatchResult) GetResultMetadata() uint32 {
	if x != nil && x.ResultMetadata != nil {
		return *x.ResultMetadata
	}
	return 0
}

type CMsgStopFindingMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AcceptCooldown *bool `protobuf:"varint,1,opt,name=accept_cooldown,json=acceptCooldown" json:"accept_cooldown,omitempty"`
}

func (x *CMsgStopFindingMatch) Reset() {
	*x = CMsgStopFindingMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgStopFindingMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgStopFindingMatch) ProtoMessage() {}

func (x *CMsgStopFindingMatch) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgStopFindingMatch.ProtoReflect.Descriptor instead.
func (*CMsgStopFindingMatch) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_match_management_proto_rawDescGZIP(), []int{2}
}

func (x *CMsgStopFindingMatch) GetAcceptCooldown() bool {
	if x != nil && x.AcceptCooldown != nil {
		return *x.AcceptCooldown
	}
	return false
}

type CMsgPartyBuilderOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdditionalSlots *uint32         `protobuf:"varint,1,opt,name=additional_slots,json=additionalSlots" json:"additional_slots,omitempty"`
	MatchType       *MatchType      `protobuf:"varint,2,opt,name=match_type,json=matchType,enum=dota.MatchType" json:"match_type,omitempty"`
	Matchgroups     *uint32         `protobuf:"varint,3,opt,name=matchgroups" json:"matchgroups,omitempty"`
	ClientVersion   *uint32         `protobuf:"varint,4,opt,name=client_version,json=clientVersion" json:"client_version,omitempty"`
	Language        *MatchLanguages `protobuf:"varint,5,opt,name=language,enum=dota.MatchLanguages" json:"language,omitempty"`
}

func (x *CMsgPartyBuilderOptions) Reset() {
	*x = CMsgPartyBuilderOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPartyBuilderOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPartyBuilderOptions) ProtoMessage() {}

func (x *CMsgPartyBuilderOptions) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPartyBuilderOptions.ProtoReflect.Descriptor instead.
func (*CMsgPartyBuilderOptions) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_match_management_proto_rawDescGZIP(), []int{3}
}

func (x *CMsgPartyBuilderOptions) GetAdditionalSlots() uint32 {
	if x != nil && x.AdditionalSlots != nil {
		return *x.AdditionalSlots
	}
	return 0
}

func (x *CMsgPartyBuilderOptions) GetMatchType() MatchType {
	if x != nil && x.MatchType != nil {
		return *x.MatchType
	}
	return MatchType_MATCH_TYPE_CASUAL
}

func (x *CMsgPartyBuilderOptions) GetMatchgroups() uint32 {
	if x != nil && x.Matchgroups != nil {
		return *x.Matchgroups
	}
	return 0
}

func (x *CMsgPartyBuilderOptions) GetClientVersion() uint32 {
	if x != nil && x.ClientVersion != nil {
		return *x.ClientVersion
	}
	return 0
}

func (x *CMsgPartyBuilderOptions) GetLanguage() MatchLanguages {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return MatchLanguages_MATCH_LANGUAGE_INVALID
}

type CMsgReadyUp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State         *DOTALobbyReadyState      `protobuf:"varint,1,opt,name=state,enum=dota.DOTALobbyReadyState" json:"state,omitempty"`
	ReadyUpKey    *uint64                   `protobuf:"fixed64,2,opt,name=ready_up_key,json=readyUpKey" json:"ready_up_key,omitempty"`
	HardwareSpecs *CDOTAClientHardwareSpecs `protobuf:"bytes,3,opt,name=hardware_specs,json=hardwareSpecs" json:"hardware_specs,omitempty"`
}

func (x *CMsgReadyUp) Reset() {
	*x = CMsgReadyUp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgReadyUp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgReadyUp) ProtoMessage() {}

func (x *CMsgReadyUp) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgReadyUp.ProtoReflect.Descriptor instead.
func (*CMsgReadyUp) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_match_management_proto_rawDescGZIP(), []int{4}
}

func (x *CMsgReadyUp) GetState() DOTALobbyReadyState {
	if x != nil && x.State != nil {
		return *x.State
	}
	return DOTALobbyReadyState_DOTALobbyReadyState_UNDECLARED
}

func (x *CMsgReadyUp) GetReadyUpKey() uint64 {
	if x != nil && x.ReadyUpKey != nil {
		return *x.ReadyUpKey
	}
	return 0
}

func (x *CMsgReadyUp) GetHardwareSpecs() *CDOTAClientHardwareSpecs {
	if x != nil {
		return x.HardwareSpecs
	}
	return nil
}

type CMsgReadyUpStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LobbyId         *uint64              `protobuf:"fixed64,1,opt,name=lobby_id,json=lobbyId" json:"lobby_id,omitempty"`
	AcceptedIds     []uint32             `protobuf:"varint,2,rep,name=accepted_ids,json=acceptedIds" json:"accepted_ids,omitempty"`
	DeclinedIds     []uint32             `protobuf:"varint,3,rep,name=declined_ids,json=declinedIds" json:"declined_ids,omitempty"`
	AcceptedIndices []uint32             `protobuf:"varint,4,rep,name=accepted_indices,json=acceptedIndices" json:"accepted_indices,omitempty"`
	DeclinedIndices []uint32             `protobuf:"varint,5,rep,name=declined_indices,json=declinedIndices" json:"declined_indices,omitempty"`
	LocalReadyState *DOTALobbyReadyState `protobuf:"varint,6,opt,name=local_ready_state,json=localReadyState,enum=dota.DOTALobbyReadyState" json:"local_ready_state,omitempty"`
}

func (x *CMsgReadyUpStatus) Reset() {
	*x = CMsgReadyUpStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgReadyUpStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgReadyUpStatus) ProtoMessage() {}

func (x *CMsgReadyUpStatus) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgReadyUpStatus.ProtoReflect.Descriptor instead.
func (*CMsgReadyUpStatus) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_match_management_proto_rawDescGZIP(), []int{5}
}

func (x *CMsgReadyUpStatus) GetLobbyId() uint64 {
	if x != nil && x.LobbyId != nil {
		return *x.LobbyId
	}
	return 0
}

func (x *CMsgReadyUpStatus) GetAcceptedIds() []uint32 {
	if x != nil {
		return x.AcceptedIds
	}
	return nil
}

func (x *CMsgReadyUpStatus) GetDeclinedIds() []uint32 {
	if x != nil {
		return x.DeclinedIds
	}
	return nil
}

func (x *CMsgReadyUpStatus) GetAcceptedIndices() []uint32 {
	if x != nil {
		return x.AcceptedIndices
	}
	return nil
}

func (x *CMsgReadyUpStatus) GetDeclinedIndices() []uint32 {
	if x != nil {
		return x.DeclinedIndices
	}
	return nil
}

func (x *CMsgReadyUpStatus) GetLocalReadyState() DOTALobbyReadyState {
	if x != nil && x.LocalReadyState != nil {
		return *x.LocalReadyState
	}
	return DOTALobbyReadyState_DOTALobbyReadyState_UNDECLARED
}

type CMsgAbandonCurrentGame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgAbandonCurrentGame) Reset() {
	*x = CMsgAbandonCurrentGame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgAbandonCurrentGame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgAbandonCurrentGame) ProtoMessage() {}

func (x *CMsgAbandonCurrentGame) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgAbandonCurrentGame.ProtoReflect.Descriptor instead.
func (*CMsgAbandonCurrentGame) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_match_management_proto_rawDescGZIP(), []int{6}
}

type CMsgLobbyScenarioSave struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version *int32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Data    []byte `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
}

func (x *CMsgLobbyScenarioSave) Reset() {
	*x = CMsgLobbyScenarioSave{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgLobbyScenarioSave) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgLobbyScenarioSave) ProtoMessage() {}

func (x *CMsgLobbyScenarioSave) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgLobbyScenarioSave.ProtoReflect.Descriptor instead.
func (*CMsgLobbyScenarioSave) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_match_management_proto_rawDescGZIP(), []int{7}
}

func (x *CMsgLobbyScenarioSave) GetVersion() int32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *CMsgLobbyScenarioSave) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type CMsgPracticeLobbySetDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LobbyId                     *uint64                                                  `protobuf:"varint,1,opt,name=lobby_id,json=lobbyId" json:"lobby_id,omitempty"`
	GameName                    *string                                                  `protobuf:"bytes,2,opt,name=game_name,json=gameName" json:"game_name,omitempty"`
	TeamDetails                 []*CLobbyTeamDetails                                     `protobuf:"bytes,3,rep,name=team_details,json=teamDetails" json:"team_details,omitempty"`
	ServerRegion                *uint32                                                  `protobuf:"varint,4,opt,name=server_region,json=serverRegion" json:"server_region,omitempty"`
	GameMode                    *uint32                                                  `protobuf:"varint,5,opt,name=game_mode,json=gameMode" json:"game_mode,omitempty"`
	CmPick                      *DOTA_CM_PICK                                            `protobuf:"varint,6,opt,name=cm_pick,json=cmPick,enum=dota.DOTA_CM_PICK" json:"cm_pick,omitempty"`
	BotDifficultyRadiant        *DOTABotDifficulty                                       `protobuf:"varint,9,opt,name=bot_difficulty_radiant,json=botDifficultyRadiant,enum=dota.DOTABotDifficulty" json:"bot_difficulty_radiant,omitempty"`
	AllowCheats                 *bool                                                    `protobuf:"varint,10,opt,name=allow_cheats,json=allowCheats" json:"allow_cheats,omitempty"`
	FillWithBots                *bool                                                    `protobuf:"varint,11,opt,name=fill_with_bots,json=fillWithBots" json:"fill_with_bots,omitempty"`
	IntroMode                   *bool                                                    `protobuf:"varint,12,opt,name=intro_mode,json=introMode" json:"intro_mode,omitempty"`
	AllowSpectating             *bool                                                    `protobuf:"varint,13,opt,name=allow_spectating,json=allowSpectating" json:"allow_spectating,omitempty"`
	PassKey                     *string                                                  `protobuf:"bytes,15,opt,name=pass_key,json=passKey" json:"pass_key,omitempty"`
	Leagueid                    *uint32                                                  `protobuf:"varint,16,opt,name=leagueid" json:"leagueid,omitempty"`
	PenaltyLevelRadiant         *uint32                                                  `protobuf:"varint,17,opt,name=penalty_level_radiant,json=penaltyLevelRadiant" json:"penalty_level_radiant,omitempty"`
	PenaltyLevelDire            *uint32                                                  `protobuf:"varint,18,opt,name=penalty_level_dire,json=penaltyLevelDire" json:"penalty_level_dire,omitempty"`
	LoadGameId                  *uint32                                                  `protobuf:"varint,19,opt,name=load_game_id,json=loadGameId" json:"load_game_id,omitempty"`
	SeriesType                  *uint32                                                  `protobuf:"varint,20,opt,name=series_type,json=seriesType" json:"series_type,omitempty"`
	RadiantSeriesWins           *uint32                                                  `protobuf:"varint,21,opt,name=radiant_series_wins,json=radiantSeriesWins" json:"radiant_series_wins,omitempty"`
	DireSeriesWins              *uint32                                                  `protobuf:"varint,22,opt,name=dire_series_wins,json=direSeriesWins" json:"dire_series_wins,omitempty"`
	Allchat                     *bool                                                    `protobuf:"varint,23,opt,name=allchat" json:"allchat,omitempty"`
	DotaTvDelay                 *LobbyDotaTVDelay                                        `protobuf:"varint,24,opt,name=dota_tv_delay,json=dotaTvDelay,enum=dota.LobbyDotaTVDelay" json:"dota_tv_delay,omitempty"`
	Lan                         *bool                                                    `protobuf:"varint,25,opt,name=lan" json:"lan,omitempty"`
	CustomGameMode              *string                                                  `protobuf:"bytes,26,opt,name=custom_game_mode,json=customGameMode" json:"custom_game_mode,omitempty"`
	CustomMapName               *string                                                  `protobuf:"bytes,27,opt,name=custom_map_name,json=customMapName" json:"custom_map_name,omitempty"`
	CustomDifficulty            *uint32                                                  `protobuf:"varint,28,opt,name=custom_difficulty,json=customDifficulty" json:"custom_difficulty,omitempty"`
	CustomGameId                *uint64                                                  `protobuf:"varint,29,opt,name=custom_game_id,json=customGameId" json:"custom_game_id,omitempty"`
	CustomMinPlayers            *uint32                                                  `protobuf:"varint,30,opt,name=custom_min_players,json=customMinPlayers" json:"custom_min_players,omitempty"`
	CustomMaxPlayers            *uint32                                                  `protobuf:"varint,31,opt,name=custom_max_players,json=customMaxPlayers" json:"custom_max_players,omitempty"`
	Visibility                  *DOTALobbyVisibility                                     `protobuf:"varint,33,opt,name=visibility,enum=dota.DOTALobbyVisibility" json:"visibility,omitempty"`
	CustomGameCrc               *uint64                                                  `protobuf:"fixed64,34,opt,name=custom_game_crc,json=customGameCrc" json:"custom_game_crc,omitempty"`
	CustomGameTimestamp         *uint32                                                  `protobuf:"fixed32,37,opt,name=custom_game_timestamp,json=customGameTimestamp" json:"custom_game_timestamp,omitempty"`
	PreviousMatchOverride       *uint64                                                  `protobuf:"varint,38,opt,name=previous_match_override,json=previousMatchOverride" json:"previous_match_override,omitempty"`
	PauseSetting                *LobbyDotaPauseSetting                                   `protobuf:"varint,42,opt,name=pause_setting,json=pauseSetting,enum=dota.LobbyDotaPauseSetting" json:"pause_setting,omitempty"`
	BotDifficultyDire           *DOTABotDifficulty                                       `protobuf:"varint,43,opt,name=bot_difficulty_dire,json=botDifficultyDire,enum=dota.DOTABotDifficulty" json:"bot_difficulty_dire,omitempty"`
	BotRadiant                  *uint64                                                  `protobuf:"varint,44,opt,name=bot_radiant,json=botRadiant" json:"bot_radiant,omitempty"`
	BotDire                     *uint64                                                  `protobuf:"varint,45,opt,name=bot_dire,json=botDire" json:"bot_dire,omitempty"`
	SelectionPriorityRules      *DOTASelectionPriorityRules                              `protobuf:"varint,46,opt,name=selection_priority_rules,json=selectionPriorityRules,enum=dota.DOTASelectionPriorityRules" json:"selection_priority_rules,omitempty"`
	CustomGamePenalties         *bool                                                    `protobuf:"varint,47,opt,name=custom_game_penalties,json=customGamePenalties" json:"custom_game_penalties,omitempty"`
	LanHostPingLocation         *string                                                  `protobuf:"bytes,48,opt,name=lan_host_ping_location,json=lanHostPingLocation" json:"lan_host_ping_location,omitempty"`
	LeagueNodeId                *uint32                                                  `protobuf:"varint,49,opt,name=league_node_id,json=leagueNodeId" json:"league_node_id,omitempty"`
	RequestedHeroIds            []uint32                                                 `protobuf:"varint,50,rep,name=requested_hero_ids,json=requestedHeroIds" json:"requested_hero_ids,omitempty"`
	ScenarioSave                *CMsgLobbyScenarioSave                                   `protobuf:"bytes,51,opt,name=scenario_save,json=scenarioSave" json:"scenario_save,omitempty"`
	AbilityDraftSpecificDetails *CMsgPracticeLobbySetDetails_AbilityDraftSpecificDetails `protobuf:"bytes,52,opt,name=ability_draft_specific_details,json=abilityDraftSpecificDetails" json:"ability_draft_specific_details,omitempty"`
	DoPlayerDraft               *bool                                                    `protobuf:"varint,53,opt,name=do_player_draft,json=doPlayerDraft" json:"do_player_draft,omitempty"`
}

func (x *CMsgPracticeLobbySetDetails) Reset() {
	*x = CMsgPracticeLobbySetDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPracticeLobbySetDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPracticeLobbySetDetails) ProtoMessage() {}

func (x *CMsgPracticeLobbySetDetails) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPracticeLobbySetDetails.ProtoReflect.Descriptor instead.
func (*CMsgPracticeLobbySetDetails) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_match_management_proto_rawDescGZIP(), []int{8}
}

func (x *CMsgPracticeLobbySetDetails) GetLobbyId() uint64 {
	if x != nil && x.LobbyId != nil {
		return *x.LobbyId
	}
	return 0
}

func (x *CMsgPracticeLobbySetDetails) GetGameName() string {
	if x != nil && x.GameName != nil {
		return *x.GameName
	}
	return ""
}

func (x *CMsgPracticeLobbySetDetails) GetTeamDetails() []*CLobbyTeamDetails {
	if x != nil {
		return x.TeamDetails
	}
	return nil
}

func (x *CMsgPracticeLobbySetDetails) GetServerRegion() uint32 {
	if x != nil && x.ServerRegion != nil {
		return *x.ServerRegion
	}
	return 0
}

func (x *CMsgPracticeLobbySetDetails) GetGameMode() uint32 {
	if x != nil && x.GameMode != nil {
		return *x.GameMode
	}
	return 0
}

func (x *CMsgPracticeLobbySetDetails) GetCmPick() DOTA_CM_PICK {
	if x != nil && x.CmPick != nil {
		return *x.CmPick
	}
	return DOTA_CM_PICK_DOTA_CM_RANDOM
}

func (x *CMsgPracticeLobbySetDetails) GetBotDifficultyRadiant() DOTABotDifficulty {
	if x != nil && x.BotDifficultyRadiant != nil {
		return *x.BotDifficultyRadiant
	}
	return DOTABotDifficulty_BOT_DIFFICULTY_PASSIVE
}

func (x *CMsgPracticeLobbySetDetails) GetAllowCheats() bool {
	if x != nil && x.AllowCheats != nil {
		return *x.AllowCheats
	}
	return false
}

func (x *CMsgPracticeLobbySetDetails) GetFillWithBots() bool {
	if x != nil && x.FillWithBots != nil {
		return *x.FillWithBots
	}
	return false
}

func (x *CMsgPracticeLobbySetDetails) GetIntroMode() bool {
	if x != nil && x.IntroMode != nil {
		return *x.IntroMode
	}
	return false
}

func (x *CMsgPracticeLobbySetDetails) GetAllowSpectating() bool {
	if x != nil && x.AllowSpectating != nil {
		return *x.AllowSpectating
	}
	return false
}

func (x *CMsgPracticeLobbySetDetails) GetPassKey() string {
	if x != nil && x.PassKey != nil {
		return *x.PassKey
	}
	return ""
}

func (x *CMsgPracticeLobbySetDetails) GetLeagueid() uint32 {
	if x != nil && x.Leagueid != nil {
		return *x.Leagueid
	}
	return 0
}

func (x *CMsgPracticeLobbySetDetails) GetPenaltyLevelRadiant() uint32 {
	if x != nil && x.PenaltyLevelRadiant != nil {
		return *x.PenaltyLevelRadiant
	}
	return 0
}

func (x *CMsgPracticeLobbySetDetails) GetPenaltyLevelDire() uint32 {
	if x != nil && x.PenaltyLevelDire != nil {
		return *x.PenaltyLevelDire
	}
	return 0
}

func (x *CMsgPracticeLobbySetDetails) GetLoadGameId() uint32 {
	if x != nil && x.LoadGameId != nil {
		return *x.LoadGameId
	}
	return 0
}

func (x *CMsgPracticeLobbySetDetails) GetSeriesType() uint32 {
	if x != nil && x.SeriesType != nil {
		return *x.SeriesType
	}
	return 0
}

func (x *CMsgPracticeLobbySetDetails) GetRadiantSeriesWins() uint32 {
	if x != nil && x.RadiantSeriesWins != nil {
		return *x.RadiantSeriesWins
	}
	return 0
}

func (x *CMsgPracticeLobbySetDetails) GetDireSeriesWins() uint32 {
	if x != nil && x.DireSeriesWins != nil {
		return *x.DireSeriesWins
	}
	return 0
}

func (x *CMsgPracticeLobbySetDetails) GetAllchat() bool {
	if x != nil && x.Allchat != nil {
		return *x.Allchat
	}
	return false
}

func (x *CMsgPracticeLobbySetDetails) GetDotaTvDelay() LobbyDotaTVDelay {
	if x != nil && x.DotaTvDelay != nil {
		return *x.DotaTvDelay
	}
	return LobbyDotaTVDelay_LobbyDotaTV_10
}

func (x *CMsgPracticeLobbySetDetails) GetLan() bool {
	if x != nil && x.Lan != nil {
		return *x.Lan
	}
	return false
}

func (x *CMsgPracticeLobbySetDetails) GetCustomGameMode() string {
	if x != nil && x.CustomGameMode != nil {
		return *x.CustomGameMode
	}
	return ""
}

func (x *CMsgPracticeLobbySetDetails) GetCustomMapName() string {
	if x != nil && x.CustomMapName != nil {
		return *x.CustomMapName
	}
	return ""
}

func (x *CMsgPracticeLobbySetDetails) GetCustomDifficulty() uint32 {
	if x != nil && x.CustomDifficulty != nil {
		return *x.CustomDifficulty
	}
	return 0
}

func (x *CMsgPracticeLobbySetDetails) GetCustomGameId() uint64 {
	if x != nil && x.CustomGameId != nil {
		return *x.CustomGameId
	}
	return 0
}

func (x *CMsgPracticeLobbySetDetails) GetCustomMinPlayers() uint32 {
	if x != nil && x.CustomMinPlayers != nil {
		return *x.CustomMinPlayers
	}
	return 0
}

func (x *CMsgPracticeLobbySetDetails) GetCustomMaxPlayers() uint32 {
	if x != nil && x.CustomMaxPlayers != nil {
		return *x.CustomMaxPlayers
	}
	return 0
}

func (x *CMsgPracticeLobbySetDetails) GetVisibility() DOTALobbyVisibility {
	if x != nil && x.Visibility != nil {
		return *x.Visibility
	}
	return DOTALobbyVisibility_DOTALobbyVisibility_Public
}

func (x *CMsgPracticeLobbySetDetails) GetCustomGameCrc() uint64 {
	if x != nil && x.CustomGameCrc != nil {
		return *x.CustomGameCrc
	}
	return 0
}

func (x *CMsgPracticeLobbySetDetails) GetCustomGameTimestamp() uint32 {
	if x != nil && x.CustomGameTimestamp != nil {
		return *x.CustomGameTimestamp
	}
	return 0
}

func (x *CMsgPracticeLobbySetDetails) GetPreviousMatchOverride() uint64 {
	if x != nil && x.PreviousMatchOverride != nil {
		return *x.PreviousMatchOverride
	}
	return 0
}

func (x *CMsgPracticeLobbySetDetails) GetPauseSetting() LobbyDotaPauseSetting {
	if x != nil && x.PauseSetting != nil {
		return *x.PauseSetting
	}
	return LobbyDotaPauseSetting_LobbyDotaPauseSetting_Unlimited
}

func (x *CMsgPracticeLobbySetDetails) GetBotDifficultyDire() DOTABotDifficulty {
	if x != nil && x.BotDifficultyDire != nil {
		return *x.BotDifficultyDire
	}
	return DOTABotDifficulty_BOT_DIFFICULTY_PASSIVE
}

func (x *CMsgPracticeLobbySetDetails) GetBotRadiant() uint64 {
	if x != nil && x.BotRadiant != nil {
		return *x.BotRadiant
	}
	return 0
}

func (x *CMsgPracticeLobbySetDetails) GetBotDire() uint64 {
	if x != nil && x.BotDire != nil {
		return *x.BotDire
	}
	return 0
}

func (x *CMsgPracticeLobbySetDetails) GetSelectionPriorityRules() DOTASelectionPriorityRules {
	if x != nil && x.SelectionPriorityRules != nil {
		return *x.SelectionPriorityRules
	}
	return DOTASelectionPriorityRules_k_DOTASelectionPriorityRules_Manual
}

func (x *CMsgPracticeLobbySetDetails) GetCustomGamePenalties() bool {
	if x != nil && x.CustomGamePenalties != nil {
		return *x.CustomGamePenalties
	}
	return false
}

func (x *CMsgPracticeLobbySetDetails) GetLanHostPingLocation() string {
	if x != nil && x.LanHostPingLocation != nil {
		return *x.LanHostPingLocation
	}
	return ""
}

func (x *CMsgPracticeLobbySetDetails) GetLeagueNodeId() uint32 {
	if x != nil && x.LeagueNodeId != nil {
		return *x.LeagueNodeId
	}
	return 0
}

func (x *CMsgPracticeLobbySetDetails) GetRequestedHeroIds() []uint32 {
	if x != nil {
		return x.RequestedHeroIds
	}
	return nil
}

func (x *CMsgPracticeLobbySetDetails) GetScenarioSave() *CMsgLobbyScenarioSave {
	if x != nil {
		return x.ScenarioSave
	}
	return nil
}

func (x *CMsgPracticeLobbySetDetails) GetAbilityDraftSpecificDetails() *CMsgPracticeLobbySetDetails_AbilityDraftSpecificDetails {
	if x != nil {
		return x.AbilityDraftSpecificDetails
	}
	return nil
}

func (x *CMsgPracticeLobbySetDetails) GetDoPlayerDraft() bool {
	if x != nil && x.DoPlayerDraft != nil {
		return *x.DoPlayerDraft
	}
	return false
}

type CMsgPracticeLobbyCreate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SearchKey     *string                           `protobuf:"bytes,1,opt,name=search_key,json=searchKey" json:"search_key,omitempty"`
	PassKey       *string                           `protobuf:"bytes,5,opt,name=pass_key,json=passKey" json:"pass_key,omitempty"`
	ClientVersion *uint32                           `protobuf:"varint,6,opt,name=client_version,json=clientVersion" json:"client_version,omitempty"`
	LobbyDetails  *CMsgPracticeLobbySetDetails      `protobuf:"bytes,7,opt,name=lobby_details,json=lobbyDetails" json:"lobby_details,omitempty"`
	SaveGame      *CMsgPracticeLobbyCreate_SaveGame `protobuf:"bytes,8,opt,name=save_game,json=saveGame" json:"save_game,omitempty"`
}

func (x *CMsgPracticeLobbyCreate) Reset() {
	*x = CMsgPracticeLobbyCreate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPracticeLobbyCreate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPracticeLobbyCreate) ProtoMessage() {}

func (x *CMsgPracticeLobbyCreate) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPracticeLobbyCreate.ProtoReflect.Descriptor instead.
func (*CMsgPracticeLobbyCreate) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_match_management_proto_rawDescGZIP(), []int{9}
}

func (x *CMsgPracticeLobbyCreate) GetSearchKey() string {
	if x != nil && x.SearchKey != nil {
		return *x.SearchKey
	}
	return ""
}

func (x *CMsgPracticeLobbyCreate) GetPassKey() string {
	if x != nil && x.PassKey != nil {
		return *x.PassKey
	}
	return ""
}

func (x *CMsgPracticeLobbyCreate) GetClientVersion() uint32 {
	if x != nil && x.ClientVersion != nil {
		return *x.ClientVersion
	}
	return 0
}

func (x *CMsgPracticeLobbyCreate) GetLobbyDetails() *CMsgPracticeLobbySetDetails {
	if x != nil {
		return x.LobbyDetails
	}
	return nil
}

func (x *CMsgPracticeLobbyCreate) GetSaveGame() *CMsgPracticeLobbyCreate_SaveGame {
	if x != nil {
		return x.SaveGame
	}
	return nil
}

type CMsgPracticeLobbySetTeamSlot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Team          *DOTA_GC_TEAM      `protobuf:"varint,1,opt,name=team,enum=dota.DOTA_GC_TEAM" json:"team,omitempty"`
	Slot          *uint32            `protobuf:"varint,2,opt,name=slot" json:"slot,omitempty"`
	BotDifficulty *DOTABotDifficulty `protobuf:"varint,3,opt,name=bot_difficulty,json=botDifficulty,enum=dota.DOTABotDifficulty" json:"bot_difficulty,omitempty"`
}

func (x *CMsgPracticeLobbySetTeamSlot) Reset() {
	*x = CMsgPracticeLobbySetTeamSlot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPracticeLobbySetTeamSlot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPracticeLobbySetTeamSlot) ProtoMessage() {}

func (x *CMsgPracticeLobbySetTeamSlot) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPracticeLobbySetTeamSlot.ProtoReflect.Descriptor instead.
func (*CMsgPracticeLobbySetTeamSlot) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_match_management_proto_rawDescGZIP(), []int{10}
}

func (x *CMsgPracticeLobbySetTeamSlot) GetTeam() DOTA_GC_TEAM {
	if x != nil && x.Team != nil {
		return *x.Team
	}
	return DOTA_GC_TEAM_DOTA_GC_TEAM_GOOD_GUYS
}

func (x *CMsgPracticeLobbySetTeamSlot) GetSlot() uint32 {
	if x != nil && x.Slot != nil {
		return *x.Slot
	}
	return 0
}

func (x *CMsgPracticeLobbySetTeamSlot) GetBotDifficulty() DOTABotDifficulty {
	if x != nil && x.BotDifficulty != nil {
		return *x.BotDifficulty
	}
	return DOTABotDifficulty_BOT_DIFFICULTY_PASSIVE
}

type CMsgPracticeLobbySetCoach struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Team *DOTA_GC_TEAM `protobuf:"varint,1,opt,name=team,enum=dota.DOTA_GC_TEAM" json:"team,omitempty"`
}

func (x *CMsgPracticeLobbySetCoach) Reset() {
	*x = CMsgPracticeLobbySetCoach{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPracticeLobbySetCoach) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPracticeLobbySetCoach) ProtoMessage() {}

func (x *CMsgPracticeLobbySetCoach) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPracticeLobbySetCoach.ProtoReflect.Descriptor instead.
func (*CMsgPracticeLobbySetCoach) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_match_management_proto_rawDescGZIP(), []int{11}
}

func (x *CMsgPracticeLobbySetCoach) GetTeam() DOTA_GC_TEAM {
	if x != nil && x.Team != nil {
		return *x.Team
	}
	return DOTA_GC_TEAM_DOTA_GC_TEAM_GOOD_GUYS
}

type CMsgPracticeLobbyJoinBroadcastChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channel               *uint32 `protobuf:"varint,1,opt,name=channel" json:"channel,omitempty"`
	PreferredDescription  *string `protobuf:"bytes,2,opt,name=preferred_description,json=preferredDescription" json:"preferred_description,omitempty"`
	PreferredCountryCode  *string `protobuf:"bytes,3,opt,name=preferred_country_code,json=preferredCountryCode" json:"preferred_country_code,omitempty"`
	PreferredLanguageCode *string `protobuf:"bytes,4,opt,name=preferred_language_code,json=preferredLanguageCode" json:"preferred_language_code,omitempty"`
}

func (x *CMsgPracticeLobbyJoinBroadcastChannel) Reset() {
	*x = CMsgPracticeLobbyJoinBroadcastChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPracticeLobbyJoinBroadcastChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPracticeLobbyJoinBroadcastChannel) ProtoMessage() {}

func (x *CMsgPracticeLobbyJoinBroadcastChannel) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPracticeLobbyJoinBroadcastChannel.ProtoReflect.Descriptor instead.
func (*CMsgPracticeLobbyJoinBroadcastChannel) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_match_management_proto_rawDescGZIP(), []int{12}
}

func (x *CMsgPracticeLobbyJoinBroadcastChannel) GetChannel() uint32 {
	if x != nil && x.Channel != nil {
		return *x.Channel
	}
	return 0
}

func (x *CMsgPracticeLobbyJoinBroadcastChannel) GetPreferredDescription() string {
	if x != nil && x.PreferredDescription != nil {
		return *x.PreferredDescription
	}
	return ""
}

func (x *CMsgPracticeLobbyJoinBroadcastChannel) GetPreferredCountryCode() string {
	if x != nil && x.PreferredCountryCode != nil {
		return *x.PreferredCountryCode
	}
	return ""
}

func (x *CMsgPracticeLobbyJoinBroadcastChannel) GetPreferredLanguageCode() string {
	if x != nil && x.PreferredLanguageCode != nil {
		return *x.PreferredLanguageCode
	}
	return ""
}

type CMsgPracticeLobbyCloseBroadcastChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channel *uint32 `protobuf:"varint,1,opt,name=channel" json:"channel,omitempty"`
}

func (x *CMsgPracticeLobbyCloseBroadcastChannel) Reset() {
	*x = CMsgPracticeLobbyCloseBroadcastChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPracticeLobbyCloseBroadcastChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPracticeLobbyCloseBroadcastChannel) ProtoMessage() {}

func (x *CMsgPracticeLobbyCloseBroadcastChannel) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPracticeLobbyCloseBroadcastChannel.ProtoReflect.Descriptor instead.
func (*CMsgPracticeLobbyCloseBroadcastChannel) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_match_management_proto_rawDescGZIP(), []int{13}
}

func (x *CMsgPracticeLobbyCloseBroadcastChannel) GetChannel() uint32 {
	if x != nil && x.Channel != nil {
		return *x.Channel
	}
	return 0
}

type CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus) Reset() {
	*x = CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus) ProtoMessage() {}

func (x *CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus.ProtoReflect.Descriptor instead.
func (*CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_match_management_proto_rawDescGZIP(), []int{14}
}

type CMsgPracticeLobbyKick struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId *uint32 `protobuf:"varint,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
}

func (x *CMsgPracticeLobbyKick) Reset() {
	*x = CMsgPracticeLobbyKick{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPracticeLobbyKick) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPracticeLobbyKick) ProtoMessage() {}

func (x *CMsgPracticeLobbyKick) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPracticeLobbyKick.ProtoReflect.Descriptor instead.
func (*CMsgPracticeLobbyKick) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_match_management_proto_rawDescGZIP(), []int{15}
}

func (x *CMsgPracticeLobbyKick) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

type CMsgPracticeLobbyKickFromTeam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
}

func (x *CMsgPracticeLobbyKickFromTeam) Reset() {
	*x = CMsgPracticeLobbyKickFromTeam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPracticeLobbyKickFromTeam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPracticeLobbyKickFromTeam) ProtoMessage() {}

func (x *CMsgPracticeLobbyKickFromTeam) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPracticeLobbyKickFromTeam.ProtoReflect.Descriptor instead.
func (*CMsgPracticeLobbyKickFromTeam) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_match_management_proto_rawDescGZIP(), []int{16}
}

func (x *CMsgPracticeLobbyKickFromTeam) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

type CMsgPracticeLobbyLeave struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgPracticeLobbyLeave) Reset() {
	*x = CMsgPracticeLobbyLeave{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPracticeLobbyLeave) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPracticeLobbyLeave) ProtoMessage() {}

func (x *CMsgPracticeLobbyLeave) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPracticeLobbyLeave.ProtoReflect.Descriptor instead.
func (*CMsgPracticeLobbyLeave) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_match_management_proto_rawDescGZIP(), []int{17}
}

type CMsgPracticeLobbyLaunch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientVersion *uint32 `protobuf:"varint,5,opt,name=client_version,json=clientVersion" json:"client_version,omitempty"`
}

func (x *CMsgPracticeLobbyLaunch) Reset() {
	*x = CMsgPracticeLobbyLaunch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPracticeLobbyLaunch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPracticeLobbyLaunch) ProtoMessage() {}

func (x *CMsgPracticeLobbyLaunch) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPracticeLobbyLaunch.ProtoReflect.Descriptor instead.
func (*CMsgPracticeLobbyLaunch) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_match_management_proto_rawDescGZIP(), []int{18}
}

func (x *CMsgPracticeLobbyLaunch) GetClientVersion() uint32 {
	if x != nil && x.ClientVersion != nil {
		return *x.ClientVersion
	}
	return 0
}

type CMsgApplyTeamToPracticeLobby struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamId *uint32 `protobuf:"varint,1,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
}

func (x *CMsgApplyTeamToPracticeLobby) Reset() {
	*x = CMsgApplyTeamToPracticeLobby{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgApplyTeamToPracticeLobby) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgApplyTeamToPracticeLobby) ProtoMessage() {}

func (x *CMsgApplyTeamToPracticeLobby) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgApplyTeamToPracticeLobby.ProtoReflect.Descriptor instead.
func (*CMsgApplyTeamToPracticeLobby) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_match_management_proto_rawDescGZIP(), []int{19}
}

func (x *CMsgApplyTeamToPracticeLobby) GetTeamId() uint32 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

type CMsgPracticeLobbyList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PassKey  *string        `protobuf:"bytes,2,opt,name=pass_key,json=passKey" json:"pass_key,omitempty"`
	Region   *uint32        `protobuf:"varint,3,opt,name=region" json:"region,omitempty"`
	GameMode *DOTA_GameMode `protobuf:"varint,4,opt,name=game_mode,json=gameMode,enum=dota.DOTA_GameMode" json:"game_mode,omitempty"`
}

func (x *CMsgPracticeLobbyList) Reset() {
	*x = CMsgPracticeLobbyList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPracticeLobbyList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPracticeLobbyList) ProtoMessage() {}

func (x *CMsgPracticeLobbyList) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPracticeLobbyList.ProtoReflect.Descriptor instead.
func (*CMsgPracticeLobbyList) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_match_management_proto_rawDescGZIP(), []int{20}
}

func (x *CMsgPracticeLobbyList) GetPassKey() string {
	if x != nil && x.PassKey != nil {
		return *x.PassKey
	}
	return ""
}

func (x *CMsgPracticeLobbyList) GetRegion() uint32 {
	if x != nil && x.Region != nil {
		return *x.Region
	}
	return 0
}

func (x *CMsgPracticeLobbyList) GetGameMode() DOTA_GameMode {
	if x != nil && x.GameMode != nil {
		return *x.GameMode
	}
	return DOTA_GameMode_DOTA_GAMEMODE_NONE
}

type CMsgPracticeLobbyListResponseEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  *uint64                                            `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Members             []*CMsgPracticeLobbyListResponseEntry_CLobbyMember `protobuf:"bytes,5,rep,name=members" json:"members,omitempty"`
	RequiresPassKey     *bool                                              `protobuf:"varint,6,opt,name=requires_pass_key,json=requiresPassKey" json:"requires_pass_key,omitempty"`
	LeaderAccountId     *uint32                                            `protobuf:"varint,7,opt,name=leader_account_id,json=leaderAccountId" json:"leader_account_id,omitempty"`
	Name                *string                                            `protobuf:"bytes,10,opt,name=name" json:"name,omitempty"`
	CustomGameMode      *string                                            `protobuf:"bytes,11,opt,name=custom_game_mode,json=customGameMode" json:"custom_game_mode,omitempty"`
	GameMode            *DOTA_GameMode                                     `protobuf:"varint,12,opt,name=game_mode,json=gameMode,enum=dota.DOTA_GameMode" json:"game_mode,omitempty"`
	FriendPresent       *bool                                              `protobuf:"varint,13,opt,name=friend_present,json=friendPresent" json:"friend_present,omitempty"`
	Players             *uint32                                            `protobuf:"varint,14,opt,name=players" json:"players,omitempty"`
	CustomMapName       *string                                            `protobuf:"bytes,15,opt,name=custom_map_name,json=customMapName" json:"custom_map_name,omitempty"`
	MaxPlayerCount      *uint32                                            `protobuf:"varint,16,opt,name=max_player_count,json=maxPlayerCount" json:"max_player_count,omitempty"`
	ServerRegion        *uint32                                            `protobuf:"varint,17,opt,name=server_region,json=serverRegion" json:"server_region,omitempty"`
	LeagueId            *uint32                                            `protobuf:"varint,19,opt,name=league_id,json=leagueId" json:"league_id,omitempty"`
	LanHostPingLocation *string                                            `protobuf:"bytes,20,opt,name=lan_host_ping_location,json=lanHostPingLocation" json:"lan_host_ping_location,omitempty"`
	MinPlayerCount      *uint32                                            `protobuf:"varint,21,opt,name=min_player_count,json=minPlayerCount" json:"min_player_count,omitempty"`
	PenaltiesEnabled    *bool                                              `protobuf:"varint,22,opt,name=penalties_enabled,json=penaltiesEnabled" json:"penalties_enabled,omitempty"`
}

func (x *CMsgPracticeLobbyListResponseEntry) Reset() {
	*x = CMsgPracticeLobbyListResponseEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPracticeLobbyListResponseEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPracticeLobbyListResponseEntry) ProtoMessage() {}

func (x *CMsgPracticeLobbyListResponseEntry) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPracticeLobbyListResponseEntry.ProtoReflect.Descriptor instead.
func (*CMsgPracticeLobbyListResponseEntry) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_match_management_proto_rawDescGZIP(), []int{21}
}

func (x *CMsgPracticeLobbyListResponseEntry) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *CMsgPracticeLobbyListResponseEntry) GetMembers() []*CMsgPracticeLobbyListResponseEntry_CLobbyMember {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *CMsgPracticeLobbyListResponseEntry) GetRequiresPassKey() bool {
	if x != nil && x.RequiresPassKey != nil {
		return *x.RequiresPassKey
	}
	return false
}

func (x *CMsgPracticeLobbyListResponseEntry) GetLeaderAccountId() uint32 {
	if x != nil && x.LeaderAccountId != nil {
		return *x.LeaderAccountId
	}
	return 0
}

func (x *CMsgPracticeLobbyListResponseEntry) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CMsgPracticeLobbyListResponseEntry) GetCustomGameMode() string {
	if x != nil && x.CustomGameMode != nil {
		return *x.CustomGameMode
	}
	return ""
}

func (x *CMsgPracticeLobbyListResponseEntry) GetGameMode() DOTA_GameMode {
	if x != nil && x.GameMode != nil {
		return *x.GameMode
	}
	return DOTA_GameMode_DOTA_GAMEMODE_NONE
}

func (x *CMsgPracticeLobbyListResponseEntry) GetFriendPresent() bool {
	if x != nil && x.FriendPresent != nil {
		return *x.FriendPresent
	}
	return false
}

func (x *CMsgPracticeLobbyListResponseEntry) GetPlayers() uint32 {
	if x != nil && x.Players != nil {
		return *x.Players
	}
	return 0
}

func (x *CMsgPracticeLobbyListResponseEntry) GetCustomMapName() string {
	if x != nil && x.CustomMapName != nil {
		return *x.CustomMapName
	}
	return ""
}

func (x *CMsgPracticeLobbyListResponseEntry) GetMaxPlayerCount() uint32 {
	if x != nil && x.MaxPlayerCount != nil {
		return *x.MaxPlayerCount
	}
	return 0
}

func (x *CMsgPracticeLobbyListResponseEntry) GetServerRegion() uint32 {
	if x != nil && x.ServerRegion != nil {
		return *x.ServerRegion
	}
	return 0
}

func (x *CMsgPracticeLobbyListResponseEntry) GetLeagueId() uint32 {
	if x != nil && x.LeagueId != nil {
		return *x.LeagueId
	}
	return 0
}

func (x *CMsgPracticeLobbyListResponseEntry) GetLanHostPingLocation() string {
	if x != nil && x.LanHostPingLocation != nil {
		return *x.LanHostPingLocation
	}
	return ""
}

func (x *CMsgPracticeLobbyListResponseEntry) GetMinPlayerCount() uint32 {
	if x != nil && x.MinPlayerCount != nil {
		return *x.MinPlayerCount
	}
	return 0
}

func (x *CMsgPracticeLobbyListResponseEntry) GetPenaltiesEnabled() bool {
	if x != nil && x.PenaltiesEnabled != nil {
		return *x.PenaltiesEnabled
	}
	return false
}

type CMsgPracticeLobbyListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lobbies []*CMsgPracticeLobbyListResponseEntry `protobuf:"bytes,2,rep,name=lobbies" json:"lobbies,omitempty"`
}

func (x *CMsgPracticeLobbyListResponse) Reset() {
	*x = CMsgPracticeLobbyListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPracticeLobbyListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPracticeLobbyListResponse) ProtoMessage() {}

func (x *CMsgPracticeLobbyListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPracticeLobbyListResponse.ProtoReflect.Descriptor instead.
func (*CMsgPracticeLobbyListResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_match_management_proto_rawDescGZIP(), []int{22}
}

func (x *CMsgPracticeLobbyListResponse) GetLobbies() []*CMsgPracticeLobbyListResponseEntry {
	if x != nil {
		return x.Lobbies
	}
	return nil
}

type CMsgLobbyList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerRegion *uint32        `protobuf:"varint,1,opt,name=server_region,json=serverRegion" json:"server_region,omitempty"`
	GameMode     *DOTA_GameMode `protobuf:"varint,2,opt,name=game_mode,json=gameMode,enum=dota.DOTA_GameMode" json:"game_mode,omitempty"`
}

func (x *CMsgLobbyList) Reset() {
	*x = CMsgLobbyList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgLobbyList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgLobbyList) ProtoMessage() {}

func (x *CMsgLobbyList) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgLobbyList.ProtoReflect.Descriptor instead.
func (*CMsgLobbyList) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_match_management_proto_rawDescGZIP(), []int{23}
}

func (x *CMsgLobbyList) GetServerRegion() uint32 {
	if x != nil && x.ServerRegion != nil {
		return *x.ServerRegion
	}
	return 0
}

func (x *CMsgLobbyList) GetGameMode() DOTA_GameMode {
	if x != nil && x.GameMode != nil {
		return *x.GameMode
	}
	return DOTA_GameMode_DOTA_GAMEMODE_NONE
}

type CMsgLobbyListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lobbies []*CMsgPracticeLobbyListResponseEntry `protobuf:"bytes,1,rep,name=lobbies" json:"lobbies,omitempty"`
}

func (x *CMsgLobbyListResponse) Reset() {
	*x = CMsgLobbyListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgLobbyListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgLobbyListResponse) ProtoMessage() {}

func (x *CMsgLobbyListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgLobbyListResponse.ProtoReflect.Descriptor instead.
func (*CMsgLobbyListResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_match_management_proto_rawDescGZIP(), []int{24}
}

func (x *CMsgLobbyListResponse) GetLobbies() []*CMsgPracticeLobbyListResponseEntry {
	if x != nil {
		return x.Lobbies
	}
	return nil
}

type CMsgPracticeLobbyJoin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LobbyId             *uint64 `protobuf:"varint,1,opt,name=lobby_id,json=lobbyId" json:"lobby_id,omitempty"`
	ClientVersion       *uint32 `protobuf:"varint,2,opt,name=client_version,json=clientVersion" json:"client_version,omitempty"`
	PassKey             *string `protobuf:"bytes,3,opt,name=pass_key,json=passKey" json:"pass_key,omitempty"`
	CustomGameCrc       *uint64 `protobuf:"fixed64,4,opt,name=custom_game_crc,json=customGameCrc" json:"custom_game_crc,omitempty"`
	CustomGameTimestamp *uint32 `protobuf:"fixed32,5,opt,name=custom_game_timestamp,json=customGameTimestamp" json:"custom_game_timestamp,omitempty"`
}

func (x *CMsgPracticeLobbyJoin) Reset() {
	*x = CMsgPracticeLobbyJoin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPracticeLobbyJoin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPracticeLobbyJoin) ProtoMessage() {}

func (x *CMsgPracticeLobbyJoin) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPracticeLobbyJoin.ProtoReflect.Descriptor instead.
func (*CMsgPracticeLobbyJoin) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_match_management_proto_rawDescGZIP(), []int{25}
}

func (x *CMsgPracticeLobbyJoin) GetLobbyId() uint64 {
	if x != nil && x.LobbyId != nil {
		return *x.LobbyId
	}
	return 0
}

func (x *CMsgPracticeLobbyJoin) GetClientVersion() uint32 {
	if x != nil && x.ClientVersion != nil {
		return *x.ClientVersion
	}
	return 0
}

func (x *CMsgPracticeLobbyJoin) GetPassKey() string {
	if x != nil && x.PassKey != nil {
		return *x.PassKey
	}
	return ""
}

func (x *CMsgPracticeLobbyJoin) GetCustomGameCrc() uint64 {
	if x != nil && x.CustomGameCrc != nil {
		return *x.CustomGameCrc
	}
	return 0
}

func (x *CMsgPracticeLobbyJoin) GetCustomGameTimestamp() uint32 {
	if x != nil && x.CustomGameTimestamp != nil {
		return *x.CustomGameTimestamp
	}
	return 0
}

type CMsgPracticeLobbyJoinResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *DOTAJoinLobbyResult `protobuf:"varint,1,opt,name=result,enum=dota.DOTAJoinLobbyResult" json:"result,omitempty"`
}

func (x *CMsgPracticeLobbyJoinResponse) Reset() {
	*x = CMsgPracticeLobbyJoinResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPracticeLobbyJoinResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPracticeLobbyJoinResponse) ProtoMessage() {}

func (x *CMsgPracticeLobbyJoinResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPracticeLobbyJoinResponse.ProtoReflect.Descriptor instead.
func (*CMsgPracticeLobbyJoinResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_match_management_proto_rawDescGZIP(), []int{26}
}

func (x *CMsgPracticeLobbyJoinResponse) GetResult() DOTAJoinLobbyResult {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return DOTAJoinLobbyResult_DOTA_JOIN_RESULT_SUCCESS
}

type CMsgFriendPracticeLobbyListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Friends []uint32 `protobuf:"varint,1,rep,name=friends" json:"friends,omitempty"`
}

func (x *CMsgFriendPracticeLobbyListRequest) Reset() {
	*x = CMsgFriendPracticeLobbyListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgFriendPracticeLobbyListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgFriendPracticeLobbyListRequest) ProtoMessage() {}

func (x *CMsgFriendPracticeLobbyListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgFriendPracticeLobbyListRequest.ProtoReflect.Descriptor instead.
func (*CMsgFriendPracticeLobbyListRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_match_management_proto_rawDescGZIP(), []int{27}
}

func (x *CMsgFriendPracticeLobbyListRequest) GetFriends() []uint32 {
	if x != nil {
		return x.Friends
	}
	return nil
}

type CMsgFriendPracticeLobbyListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lobbies []*CMsgPracticeLobbyListResponseEntry `protobuf:"bytes,1,rep,name=lobbies" json:"lobbies,omitempty"`
}

func (x *CMsgFriendPracticeLobbyListResponse) Reset() {
	*x = CMsgFriendPracticeLobbyListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgFriendPracticeLobbyListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgFriendPracticeLobbyListResponse) ProtoMessage() {}

func (x *CMsgFriendPracticeLobbyListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgFriendPracticeLobbyListResponse.ProtoReflect.Descriptor instead.
func (*CMsgFriendPracticeLobbyListResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_match_management_proto_rawDescGZIP(), []int{28}
}

func (x *CMsgFriendPracticeLobbyListResponse) GetLobbies() []*CMsgPracticeLobbyListResponseEntry {
	if x != nil {
		return x.Lobbies
	}
	return nil
}

type CMsgJoinableCustomGameModesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerRegion *uint32 `protobuf:"varint,1,opt,name=server_region,json=serverRegion" json:"server_region,omitempty"`
}

func (x *CMsgJoinableCustomGameModesRequest) Reset() {
	*x = CMsgJoinableCustomGameModesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgJoinableCustomGameModesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgJoinableCustomGameModesRequest) ProtoMessage() {}

func (x *CMsgJoinableCustomGameModesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgJoinableCustomGameModesRequest.ProtoReflect.Descriptor instead.
func (*CMsgJoinableCustomGameModesRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_match_management_proto_rawDescGZIP(), []int{29}
}

func (x *CMsgJoinableCustomGameModesRequest) GetServerRegion() uint32 {
	if x != nil && x.ServerRegion != nil {
		return *x.ServerRegion
	}
	return 0
}

type CMsgJoinableCustomGameModesResponseEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomGameId *uint64 `protobuf:"varint,1,opt,name=custom_game_id,json=customGameId" json:"custom_game_id,omitempty"`
	LobbyCount   *uint32 `protobuf:"varint,2,opt,name=lobby_count,json=lobbyCount" json:"lobby_count,omitempty"`
	PlayerCount  *uint32 `protobuf:"varint,3,opt,name=player_count,json=playerCount" json:"player_count,omitempty"`
}

func (x *CMsgJoinableCustomGameModesResponseEntry) Reset() {
	*x = CMsgJoinableCustomGameModesResponseEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgJoinableCustomGameModesResponseEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgJoinableCustomGameModesResponseEntry) ProtoMessage() {}

func (x *CMsgJoinableCustomGameModesResponseEntry) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgJoinableCustomGameModesResponseEntry.ProtoReflect.Descriptor instead.
func (*CMsgJoinableCustomGameModesResponseEntry) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_match_management_proto_rawDescGZIP(), []int{30}
}

func (x *CMsgJoinableCustomGameModesResponseEntry) GetCustomGameId() uint64 {
	if x != nil && x.CustomGameId != nil {
		return *x.CustomGameId
	}
	return 0
}

func (x *CMsgJoinableCustomGameModesResponseEntry) GetLobbyCount() uint32 {
	if x != nil && x.LobbyCount != nil {
		return *x.LobbyCount
	}
	return 0
}

func (x *CMsgJoinableCustomGameModesResponseEntry) GetPlayerCount() uint32 {
	if x != nil && x.PlayerCount != nil {
		return *x.PlayerCount
	}
	return 0
}

type CMsgJoinableCustomGameModesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameModes []*CMsgJoinableCustomGameModesResponseEntry `protobuf:"bytes,1,rep,name=game_modes,json=gameModes" json:"game_modes,omitempty"`
}

func (x *CMsgJoinableCustomGameModesResponse) Reset() {
	*x = CMsgJoinableCustomGameModesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgJoinableCustomGameModesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgJoinableCustomGameModesResponse) ProtoMessage() {}

func (x *CMsgJoinableCustomGameModesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgJoinableCustomGameModesResponse.ProtoReflect.Descriptor instead.
func (*CMsgJoinableCustomGameModesResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_match_management_proto_rawDescGZIP(), []int{31}
}

func (x *CMsgJoinableCustomGameModesResponse) GetGameModes() []*CMsgJoinableCustomGameModesResponseEntry {
	if x != nil {
		return x.GameModes
	}
	return nil
}

type CMsgJoinableCustomLobbiesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerRegion *uint32 `protobuf:"varint,1,opt,name=server_region,json=serverRegion" json:"server_region,omitempty"`
	CustomGameId *uint64 `protobuf:"varint,2,opt,name=custom_game_id,json=customGameId" json:"custom_game_id,omitempty"`
}

func (x *CMsgJoinableCustomLobbiesRequest) Reset() {
	*x = CMsgJoinableCustomLobbiesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgJoinableCustomLobbiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgJoinableCustomLobbiesRequest) ProtoMessage() {}

func (x *CMsgJoinableCustomLobbiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgJoinableCustomLobbiesRequest.ProtoReflect.Descriptor instead.
func (*CMsgJoinableCustomLobbiesRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_match_management_proto_rawDescGZIP(), []int{32}
}

func (x *CMsgJoinableCustomLobbiesRequest) GetServerRegion() uint32 {
	if x != nil && x.ServerRegion != nil {
		return *x.ServerRegion
	}
	return 0
}

func (x *CMsgJoinableCustomLobbiesRequest) GetCustomGameId() uint64 {
	if x != nil && x.CustomGameId != nil {
		return *x.CustomGameId
	}
	return 0
}

type CMsgJoinableCustomLobbiesResponseEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LobbyId             *uint64 `protobuf:"fixed64,1,opt,name=lobby_id,json=lobbyId" json:"lobby_id,omitempty"`
	CustomGameId        *uint64 `protobuf:"varint,2,opt,name=custom_game_id,json=customGameId" json:"custom_game_id,omitempty"`
	LobbyName           *string `protobuf:"bytes,3,opt,name=lobby_name,json=lobbyName" json:"lobby_name,omitempty"`
	MemberCount         *uint32 `protobuf:"varint,4,opt,name=member_count,json=memberCount" json:"member_count,omitempty"`
	LeaderAccountId     *uint32 `protobuf:"varint,5,opt,name=leader_account_id,json=leaderAccountId" json:"leader_account_id,omitempty"`
	LeaderName          *string `protobuf:"bytes,6,opt,name=leader_name,json=leaderName" json:"leader_name,omitempty"`
	CustomMapName       *string `protobuf:"bytes,7,opt,name=custom_map_name,json=customMapName" json:"custom_map_name,omitempty"`
	MaxPlayerCount      *uint32 `protobuf:"varint,8,opt,name=max_player_count,json=maxPlayerCount" json:"max_player_count,omitempty"`
	ServerRegion        *uint32 `protobuf:"varint,9,opt,name=server_region,json=serverRegion" json:"server_region,omitempty"`
	HasPassKey          *bool   `protobuf:"varint,11,opt,name=has_pass_key,json=hasPassKey" json:"has_pass_key,omitempty"`
	LanHostPingLocation *string `protobuf:"bytes,12,opt,name=lan_host_ping_location,json=lanHostPingLocation" json:"lan_host_ping_location,omitempty"`
	LobbyCreationTime   *uint32 `protobuf:"varint,13,opt,name=lobby_creation_time,json=lobbyCreationTime" json:"lobby_creation_time,omitempty"`
	CustomGameTimestamp *uint32 `protobuf:"varint,14,opt,name=custom_game_timestamp,json=customGameTimestamp" json:"custom_game_timestamp,omitempty"`
	CustomGameCrc       *uint64 `protobuf:"varint,15,opt,name=custom_game_crc,json=customGameCrc" json:"custom_game_crc,omitempty"`
	MinPlayerCount      *uint32 `protobuf:"varint,16,opt,name=min_player_count,json=minPlayerCount" json:"min_player_count,omitempty"`
	PenaltiesEnabled    *bool   `protobuf:"varint,17,opt,name=penalties_enabled,json=penaltiesEnabled" json:"penalties_enabled,omitempty"`
}

func (x *CMsgJoinableCustomLobbiesResponseEntry) Reset() {
	*x = CMsgJoinableCustomLobbiesResponseEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgJoinableCustomLobbiesResponseEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgJoinableCustomLobbiesResponseEntry) ProtoMessage() {}

func (x *CMsgJoinableCustomLobbiesResponseEntry) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgJoinableCustomLobbiesResponseEntry.ProtoReflect.Descriptor instead.
func (*CMsgJoinableCustomLobbiesResponseEntry) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_match_management_proto_rawDescGZIP(), []int{33}
}

func (x *CMsgJoinableCustomLobbiesResponseEntry) GetLobbyId() uint64 {
	if x != nil && x.LobbyId != nil {
		return *x.LobbyId
	}
	return 0
}

func (x *CMsgJoinableCustomLobbiesResponseEntry) GetCustomGameId() uint64 {
	if x != nil && x.CustomGameId != nil {
		return *x.CustomGameId
	}
	return 0
}

func (x *CMsgJoinableCustomLobbiesResponseEntry) GetLobbyName() string {
	if x != nil && x.LobbyName != nil {
		return *x.LobbyName
	}
	return ""
}

func (x *CMsgJoinableCustomLobbiesResponseEntry) GetMemberCount() uint32 {
	if x != nil && x.MemberCount != nil {
		return *x.MemberCount
	}
	return 0
}

func (x *CMsgJoinableCustomLobbiesResponseEntry) GetLeaderAccountId() uint32 {
	if x != nil && x.LeaderAccountId != nil {
		return *x.LeaderAccountId
	}
	return 0
}

func (x *CMsgJoinableCustomLobbiesResponseEntry) GetLeaderName() string {
	if x != nil && x.LeaderName != nil {
		return *x.LeaderName
	}
	return ""
}

func (x *CMsgJoinableCustomLobbiesResponseEntry) GetCustomMapName() string {
	if x != nil && x.CustomMapName != nil {
		return *x.CustomMapName
	}
	return ""
}

func (x *CMsgJoinableCustomLobbiesResponseEntry) GetMaxPlayerCount() uint32 {
	if x != nil && x.MaxPlayerCount != nil {
		return *x.MaxPlayerCount
	}
	return 0
}

func (x *CMsgJoinableCustomLobbiesResponseEntry) GetServerRegion() uint32 {
	if x != nil && x.ServerRegion != nil {
		return *x.ServerRegion
	}
	return 0
}

func (x *CMsgJoinableCustomLobbiesResponseEntry) GetHasPassKey() bool {
	if x != nil && x.HasPassKey != nil {
		return *x.HasPassKey
	}
	return false
}

func (x *CMsgJoinableCustomLobbiesResponseEntry) GetLanHostPingLocation() string {
	if x != nil && x.LanHostPingLocation != nil {
		return *x.LanHostPingLocation
	}
	return ""
}

func (x *CMsgJoinableCustomLobbiesResponseEntry) GetLobbyCreationTime() uint32 {
	if x != nil && x.LobbyCreationTime != nil {
		return *x.LobbyCreationTime
	}
	return 0
}

func (x *CMsgJoinableCustomLobbiesResponseEntry) GetCustomGameTimestamp() uint32 {
	if x != nil && x.CustomGameTimestamp != nil {
		return *x.CustomGameTimestamp
	}
	return 0
}

func (x *CMsgJoinableCustomLobbiesResponseEntry) GetCustomGameCrc() uint64 {
	if x != nil && x.CustomGameCrc != nil {
		return *x.CustomGameCrc
	}
	return 0
}

func (x *CMsgJoinableCustomLobbiesResponseEntry) GetMinPlayerCount() uint32 {
	if x != nil && x.MinPlayerCount != nil {
		return *x.MinPlayerCount
	}
	return 0
}

func (x *CMsgJoinableCustomLobbiesResponseEntry) GetPenaltiesEnabled() bool {
	if x != nil && x.PenaltiesEnabled != nil {
		return *x.PenaltiesEnabled
	}
	return false
}

type CMsgJoinableCustomLobbiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lobbies []*CMsgJoinableCustomLobbiesResponseEntry `protobuf:"bytes,1,rep,name=lobbies" json:"lobbies,omitempty"`
}

func (x *CMsgJoinableCustomLobbiesResponse) Reset() {
	*x = CMsgJoinableCustomLobbiesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgJoinableCustomLobbiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgJoinableCustomLobbiesResponse) ProtoMessage() {}

func (x *CMsgJoinableCustomLobbiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgJoinableCustomLobbiesResponse.ProtoReflect.Descriptor instead.
func (*CMsgJoinableCustomLobbiesResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_match_management_proto_rawDescGZIP(), []int{34}
}

func (x *CMsgJoinableCustomLobbiesResponse) GetLobbies() []*CMsgJoinableCustomLobbiesResponseEntry {
	if x != nil {
		return x.Lobbies
	}
	return nil
}

type CMsgQuickJoinCustomLobby struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LegacyServerRegion *uint32                                      `protobuf:"varint,1,opt,name=legacy_server_region,json=legacyServerRegion" json:"legacy_server_region,omitempty"`
	CustomGameId       *uint64                                      `protobuf:"varint,2,opt,name=custom_game_id,json=customGameId" json:"custom_game_id,omitempty"`
	ClientVersion      *uint32                                      `protobuf:"varint,3,opt,name=client_version,json=clientVersion" json:"client_version,omitempty"`
	CreateLobbyDetails *CMsgPracticeLobbySetDetails                 `protobuf:"bytes,4,opt,name=create_lobby_details,json=createLobbyDetails" json:"create_lobby_details,omitempty"`
	AllowAnyMap        *bool                                        `protobuf:"varint,5,opt,name=allow_any_map,json=allowAnyMap" json:"allow_any_map,omitempty"`
	LegacyRegionPings  []*CMsgQuickJoinCustomLobby_LegacyRegionPing `protobuf:"bytes,6,rep,name=legacy_region_pings,json=legacyRegionPings" json:"legacy_region_pings,omitempty"`
	PingData           *CMsgClientPingData                          `protobuf:"bytes,7,opt,name=ping_data,json=pingData" json:"ping_data,omitempty"`
}

func (x *CMsgQuickJoinCustomLobby) Reset() {
	*x = CMsgQuickJoinCustomLobby{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgQuickJoinCustomLobby) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgQuickJoinCustomLobby) ProtoMessage() {}

func (x *CMsgQuickJoinCustomLobby) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgQuickJoinCustomLobby.ProtoReflect.Descriptor instead.
func (*CMsgQuickJoinCustomLobby) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_match_management_proto_rawDescGZIP(), []int{35}
}

func (x *CMsgQuickJoinCustomLobby) GetLegacyServerRegion() uint32 {
	if x != nil && x.LegacyServerRegion != nil {
		return *x.LegacyServerRegion
	}
	return 0
}

func (x *CMsgQuickJoinCustomLobby) GetCustomGameId() uint64 {
	if x != nil && x.CustomGameId != nil {
		return *x.CustomGameId
	}
	return 0
}

func (x *CMsgQuickJoinCustomLobby) GetClientVersion() uint32 {
	if x != nil && x.ClientVersion != nil {
		return *x.ClientVersion
	}
	return 0
}

func (x *CMsgQuickJoinCustomLobby) GetCreateLobbyDetails() *CMsgPracticeLobbySetDetails {
	if x != nil {
		return x.CreateLobbyDetails
	}
	return nil
}

func (x *CMsgQuickJoinCustomLobby) GetAllowAnyMap() bool {
	if x != nil && x.AllowAnyMap != nil {
		return *x.AllowAnyMap
	}
	return false
}

func (x *CMsgQuickJoinCustomLobby) GetLegacyRegionPings() []*CMsgQuickJoinCustomLobby_LegacyRegionPing {
	if x != nil {
		return x.LegacyRegionPings
	}
	return nil
}

func (x *CMsgQuickJoinCustomLobby) GetPingData() *CMsgClientPingData {
	if x != nil {
		return x.PingData
	}
	return nil
}

type CMsgQuickJoinCustomLobbyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *DOTAJoinLobbyResult `protobuf:"varint,1,opt,name=result,enum=dota.DOTAJoinLobbyResult" json:"result,omitempty"`
}

func (x *CMsgQuickJoinCustomLobbyResponse) Reset() {
	*x = CMsgQuickJoinCustomLobbyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgQuickJoinCustomLobbyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgQuickJoinCustomLobbyResponse) ProtoMessage() {}

func (x *CMsgQuickJoinCustomLobbyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgQuickJoinCustomLobbyResponse.ProtoReflect.Descriptor instead.
func (*CMsgQuickJoinCustomLobbyResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_match_management_proto_rawDescGZIP(), []int{36}
}

func (x *CMsgQuickJoinCustomLobbyResponse) GetResult() DOTAJoinLobbyResult {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return DOTAJoinLobbyResult_DOTA_JOIN_RESULT_SUCCESS
}

type CMsgBotGameCreate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SearchKey         *string            `protobuf:"bytes,1,opt,name=search_key,json=searchKey" json:"search_key,omitempty"`
	ClientVersion     *uint32            `protobuf:"varint,2,opt,name=client_version,json=clientVersion" json:"client_version,omitempty"`
	DifficultyRadiant *DOTABotDifficulty `protobuf:"varint,3,opt,name=difficulty_radiant,json=difficultyRadiant,enum=dota.DOTABotDifficulty" json:"difficulty_radiant,omitempty"`
	Team              *DOTA_GC_TEAM      `protobuf:"varint,4,opt,name=team,enum=dota.DOTA_GC_TEAM" json:"team,omitempty"`
	GameMode          *uint32            `protobuf:"varint,5,opt,name=game_mode,json=gameMode" json:"game_mode,omitempty"`
	DifficultyDire    *DOTABotDifficulty `protobuf:"varint,6,opt,name=difficulty_dire,json=difficultyDire,enum=dota.DOTABotDifficulty" json:"difficulty_dire,omitempty"`
}

func (x *CMsgBotGameCreate) Reset() {
	*x = CMsgBotGameCreate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgBotGameCreate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBotGameCreate) ProtoMessage() {}

func (x *CMsgBotGameCreate) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBotGameCreate.ProtoReflect.Descriptor instead.
func (*CMsgBotGameCreate) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_match_management_proto_rawDescGZIP(), []int{37}
}

func (x *CMsgBotGameCreate) GetSearchKey() string {
	if x != nil && x.SearchKey != nil {
		return *x.SearchKey
	}
	return ""
}

func (x *CMsgBotGameCreate) GetClientVersion() uint32 {
	if x != nil && x.ClientVersion != nil {
		return *x.ClientVersion
	}
	return 0
}

func (x *CMsgBotGameCreate) GetDifficultyRadiant() DOTABotDifficulty {
	if x != nil && x.DifficultyRadiant != nil {
		return *x.DifficultyRadiant
	}
	return DOTABotDifficulty_BOT_DIFFICULTY_PASSIVE
}

func (x *CMsgBotGameCreate) GetTeam() DOTA_GC_TEAM {
	if x != nil && x.Team != nil {
		return *x.Team
	}
	return DOTA_GC_TEAM_DOTA_GC_TEAM_GOOD_GUYS
}

func (x *CMsgBotGameCreate) GetGameMode() uint32 {
	if x != nil && x.GameMode != nil {
		return *x.GameMode
	}
	return 0
}

func (x *CMsgBotGameCreate) GetDifficultyDire() DOTABotDifficulty {
	if x != nil && x.DifficultyDire != nil {
		return *x.DifficultyDire
	}
	return DOTABotDifficulty_BOT_DIFFICULTY_PASSIVE
}

type CMsgDOTAPartyMemberSetCoach struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WantsCoach *bool `protobuf:"varint,1,opt,name=wants_coach,json=wantsCoach" json:"wants_coach,omitempty"`
}

func (x *CMsgDOTAPartyMemberSetCoach) Reset() {
	*x = CMsgDOTAPartyMemberSetCoach{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAPartyMemberSetCoach) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAPartyMemberSetCoach) ProtoMessage() {}

func (x *CMsgDOTAPartyMemberSetCoach) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAPartyMemberSetCoach.ProtoReflect.Descriptor instead.
func (*CMsgDOTAPartyMemberSetCoach) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_match_management_proto_rawDescGZIP(), []int{38}
}

func (x *CMsgDOTAPartyMemberSetCoach) GetWantsCoach() bool {
	if x != nil && x.WantsCoach != nil {
		return *x.WantsCoach
	}
	return false
}

type CMsgDOTASetGroupLeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewLeaderSteamid *uint64 `protobuf:"fixed64,1,opt,name=new_leader_steamid,json=newLeaderSteamid" json:"new_leader_steamid,omitempty"`
}

func (x *CMsgDOTASetGroupLeader) Reset() {
	*x = CMsgDOTASetGroupLeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTASetGroupLeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTASetGroupLeader) ProtoMessage() {}

func (x *CMsgDOTASetGroupLeader) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTASetGroupLeader.ProtoReflect.Descriptor instead.
func (*CMsgDOTASetGroupLeader) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_match_management_proto_rawDescGZIP(), []int{39}
}

func (x *CMsgDOTASetGroupLeader) GetNewLeaderSteamid() uint64 {
	if x != nil && x.NewLeaderSteamid != nil {
		return *x.NewLeaderSteamid
	}
	return 0
}

type CMsgDOTACancelGroupInvites struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvitedSteamids []uint64 `protobuf:"fixed64,1,rep,name=invited_steamids,json=invitedSteamids" json:"invited_steamids,omitempty"`
	InvitedGroupids []uint64 `protobuf:"fixed64,2,rep,name=invited_groupids,json=invitedGroupids" json:"invited_groupids,omitempty"`
}

func (x *CMsgDOTACancelGroupInvites) Reset() {
	*x = CMsgDOTACancelGroupInvites{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTACancelGroupInvites) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTACancelGroupInvites) ProtoMessage() {}

func (x *CMsgDOTACancelGroupInvites) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTACancelGroupInvites.ProtoReflect.Descriptor instead.
func (*CMsgDOTACancelGroupInvites) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_match_management_proto_rawDescGZIP(), []int{40}
}

func (x *CMsgDOTACancelGroupInvites) GetInvitedSteamids() []uint64 {
	if x != nil {
		return x.InvitedSteamids
	}
	return nil
}

func (x *CMsgDOTACancelGroupInvites) GetInvitedGroupids() []uint64 {
	if x != nil {
		return x.InvitedGroupids
	}
	return nil
}

type CMsgDOTASetGroupOpenStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Open *bool `protobuf:"varint,1,opt,name=open" json:"open,omitempty"`
}

func (x *CMsgDOTASetGroupOpenStatus) Reset() {
	*x = CMsgDOTASetGroupOpenStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTASetGroupOpenStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTASetGroupOpenStatus) ProtoMessage() {}

func (x *CMsgDOTASetGroupOpenStatus) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTASetGroupOpenStatus.ProtoReflect.Descriptor instead.
func (*CMsgDOTASetGroupOpenStatus) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_match_management_proto_rawDescGZIP(), []int{41}
}

func (x *CMsgDOTASetGroupOpenStatus) GetOpen() bool {
	if x != nil && x.Open != nil {
		return *x.Open
	}
	return false
}

type CMsgDOTAGroupMergeInvite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OtherGroupId *uint64 `protobuf:"fixed64,1,opt,name=other_group_id,json=otherGroupId" json:"other_group_id,omitempty"`
}

func (x *CMsgDOTAGroupMergeInvite) Reset() {
	*x = CMsgDOTAGroupMergeInvite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAGroupMergeInvite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAGroupMergeInvite) ProtoMessage() {}

func (x *CMsgDOTAGroupMergeInvite) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAGroupMergeInvite.ProtoReflect.Descriptor instead.
func (*CMsgDOTAGroupMergeInvite) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_match_management_proto_rawDescGZIP(), []int{42}
}

func (x *CMsgDOTAGroupMergeInvite) GetOtherGroupId() uint64 {
	if x != nil && x.OtherGroupId != nil {
		return *x.OtherGroupId
	}
	return 0
}

type CMsgDOTAGroupMergeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InitiatorGroupId *uint64 `protobuf:"fixed64,1,opt,name=initiator_group_id,json=initiatorGroupId" json:"initiator_group_id,omitempty"`
	Accept           *bool   `protobuf:"varint,2,opt,name=accept" json:"accept,omitempty"`
}

func (x *CMsgDOTAGroupMergeResponse) Reset() {
	*x = CMsgDOTAGroupMergeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAGroupMergeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAGroupMergeResponse) ProtoMessage() {}

func (x *CMsgDOTAGroupMergeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAGroupMergeResponse.ProtoReflect.Descriptor instead.
func (*CMsgDOTAGroupMergeResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_match_management_proto_rawDescGZIP(), []int{43}
}

func (x *CMsgDOTAGroupMergeResponse) GetInitiatorGroupId() uint64 {
	if x != nil && x.InitiatorGroupId != nil {
		return *x.InitiatorGroupId
	}
	return 0
}

func (x *CMsgDOTAGroupMergeResponse) GetAccept() bool {
	if x != nil && x.Accept != nil {
		return *x.Accept
	}
	return false
}

type CMsgDOTAGroupMergeReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *EDOTAGroupMergeResult `protobuf:"varint,1,opt,name=result,enum=dota.EDOTAGroupMergeResult" json:"result,omitempty"`
}

func (x *CMsgDOTAGroupMergeReply) Reset() {
	*x = CMsgDOTAGroupMergeReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAGroupMergeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAGroupMergeReply) ProtoMessage() {}

func (x *CMsgDOTAGroupMergeReply) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAGroupMergeReply.ProtoReflect.Descriptor instead.
func (*CMsgDOTAGroupMergeReply) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_match_management_proto_rawDescGZIP(), []int{44}
}

func (x *CMsgDOTAGroupMergeReply) GetResult() EDOTAGroupMergeResult {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return EDOTAGroupMergeResult_k_EDOTAGroupMergeResult_OK
}

type CMsgSpectatorLobbyGameDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language      *uint32                             `protobuf:"varint,1,opt,name=language" json:"language,omitempty"`
	MatchId       *uint64                             `protobuf:"varint,2,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	ServerSteamId *uint64                             `protobuf:"fixed64,3,opt,name=server_steam_id,json=serverSteamId" json:"server_steam_id,omitempty"`
	StreamUrl     *string                             `protobuf:"bytes,4,opt,name=stream_url,json=streamUrl" json:"stream_url,omitempty"`
	StreamName    *string                             `protobuf:"bytes,5,opt,name=stream_name,json=streamName" json:"stream_name,omitempty"`
	LeagueId      *uint32                             `protobuf:"varint,6,opt,name=league_id,json=leagueId" json:"league_id,omitempty"`
	SeriesType    *uint32                             `protobuf:"varint,7,opt,name=series_type,json=seriesType" json:"series_type,omitempty"`
	SeriesGame    *uint32                             `protobuf:"varint,8,opt,name=series_game,json=seriesGame" json:"series_game,omitempty"`
	RadiantTeam   *CMsgSpectatorLobbyGameDetails_Team `protobuf:"bytes,9,opt,name=radiant_team,json=radiantTeam" json:"radiant_team,omitempty"`
	DireTeam      *CMsgSpectatorLobbyGameDetails_Team `protobuf:"bytes,10,opt,name=dire_team,json=direTeam" json:"dire_team,omitempty"`
}

func (x *CMsgSpectatorLobbyGameDetails) Reset() {
	*x = CMsgSpectatorLobbyGameDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSpectatorLobbyGameDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSpectatorLobbyGameDetails) ProtoMessage() {}

func (x *CMsgSpectatorLobbyGameDetails) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSpectatorLobbyGameDetails.ProtoReflect.Descriptor instead.
func (*CMsgSpectatorLobbyGameDetails) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_match_management_proto_rawDescGZIP(), []int{45}
}

func (x *CMsgSpectatorLobbyGameDetails) GetLanguage() uint32 {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return 0
}

func (x *CMsgSpectatorLobbyGameDetails) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgSpectatorLobbyGameDetails) GetServerSteamId() uint64 {
	if x != nil && x.ServerSteamId != nil {
		return *x.ServerSteamId
	}
	return 0
}

func (x *CMsgSpectatorLobbyGameDetails) GetStreamUrl() string {
	if x != nil && x.StreamUrl != nil {
		return *x.StreamUrl
	}
	return ""
}

func (x *CMsgSpectatorLobbyGameDetails) GetStreamName() string {
	if x != nil && x.StreamName != nil {
		return *x.StreamName
	}
	return ""
}

func (x *CMsgSpectatorLobbyGameDetails) GetLeagueId() uint32 {
	if x != nil && x.LeagueId != nil {
		return *x.LeagueId
	}
	return 0
}

func (x *CMsgSpectatorLobbyGameDetails) GetSeriesType() uint32 {
	if x != nil && x.SeriesType != nil {
		return *x.SeriesType
	}
	return 0
}

func (x *CMsgSpectatorLobbyGameDetails) GetSeriesGame() uint32 {
	if x != nil && x.SeriesGame != nil {
		return *x.SeriesGame
	}
	return 0
}

func (x *CMsgSpectatorLobbyGameDetails) GetRadiantTeam() *CMsgSpectatorLobbyGameDetails_Team {
	if x != nil {
		return x.RadiantTeam
	}
	return nil
}

func (x *CMsgSpectatorLobbyGameDetails) GetDireTeam() *CMsgSpectatorLobbyGameDetails_Team {
	if x != nil {
		return x.DireTeam
	}
	return nil
}

type CMsgSetSpectatorLobbyDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LobbyId     *uint64                        `protobuf:"varint,1,opt,name=lobby_id,json=lobbyId" json:"lobby_id,omitempty"`
	LobbyName   *string                        `protobuf:"bytes,2,opt,name=lobby_name,json=lobbyName" json:"lobby_name,omitempty"`
	PassKey     *string                        `protobuf:"bytes,3,opt,name=pass_key,json=passKey" json:"pass_key,omitempty"`
	GameDetails *CMsgSpectatorLobbyGameDetails `protobuf:"bytes,4,opt,name=game_details,json=gameDetails" json:"game_details,omitempty"`
}

func (x *CMsgSetSpectatorLobbyDetails) Reset() {
	*x = CMsgSetSpectatorLobbyDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSetSpectatorLobbyDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSetSpectatorLobbyDetails) ProtoMessage() {}

func (x *CMsgSetSpectatorLobbyDetails) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSetSpectatorLobbyDetails.ProtoReflect.Descriptor instead.
func (*CMsgSetSpectatorLobbyDetails) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_match_management_proto_rawDescGZIP(), []int{46}
}

func (x *CMsgSetSpectatorLobbyDetails) GetLobbyId() uint64 {
	if x != nil && x.LobbyId != nil {
		return *x.LobbyId
	}
	return 0
}

func (x *CMsgSetSpectatorLobbyDetails) GetLobbyName() string {
	if x != nil && x.LobbyName != nil {
		return *x.LobbyName
	}
	return ""
}

func (x *CMsgSetSpectatorLobbyDetails) GetPassKey() string {
	if x != nil && x.PassKey != nil {
		return *x.PassKey
	}
	return ""
}

func (x *CMsgSetSpectatorLobbyDetails) GetGameDetails() *CMsgSpectatorLobbyGameDetails {
	if x != nil {
		return x.GameDetails
	}
	return nil
}

type CMsgCreateSpectatorLobby struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientVersion *uint32                       `protobuf:"varint,1,opt,name=client_version,json=clientVersion" json:"client_version,omitempty"`
	Details       *CMsgSetSpectatorLobbyDetails `protobuf:"bytes,2,opt,name=details" json:"details,omitempty"`
}

func (x *CMsgCreateSpectatorLobby) Reset() {
	*x = CMsgCreateSpectatorLobby{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgCreateSpectatorLobby) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgCreateSpectatorLobby) ProtoMessage() {}

func (x *CMsgCreateSpectatorLobby) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgCreateSpectatorLobby.ProtoReflect.Descriptor instead.
func (*CMsgCreateSpectatorLobby) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_match_management_proto_rawDescGZIP(), []int{47}
}

func (x *CMsgCreateSpectatorLobby) GetClientVersion() uint32 {
	if x != nil && x.ClientVersion != nil {
		return *x.ClientVersion
	}
	return 0
}

func (x *CMsgCreateSpectatorLobby) GetDetails() *CMsgSetSpectatorLobbyDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

type CMsgSpectatorLobbyList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgSpectatorLobbyList) Reset() {
	*x = CMsgSpectatorLobbyList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSpectatorLobbyList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSpectatorLobbyList) ProtoMessage() {}

func (x *CMsgSpectatorLobbyList) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSpectatorLobbyList.ProtoReflect.Descriptor instead.
func (*CMsgSpectatorLobbyList) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_match_management_proto_rawDescGZIP(), []int{48}
}

type CMsgSpectatorLobbyListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lobbies []*CMsgSpectatorLobbyListResponse_SpectatorLobby `protobuf:"bytes,1,rep,name=lobbies" json:"lobbies,omitempty"`
}

func (x *CMsgSpectatorLobbyListResponse) Reset() {
	*x = CMsgSpectatorLobbyListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSpectatorLobbyListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSpectatorLobbyListResponse) ProtoMessage() {}

func (x *CMsgSpectatorLobbyListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSpectatorLobbyListResponse.ProtoReflect.Descriptor instead.
func (*CMsgSpectatorLobbyListResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_match_management_proto_rawDescGZIP(), []int{49}
}

func (x *CMsgSpectatorLobbyListResponse) GetLobbies() []*CMsgSpectatorLobbyListResponse_SpectatorLobby {
	if x != nil {
		return x.Lobbies
	}
	return nil
}

type CMsgClientToGCRequestSteamDatagramTicket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerSteamId *uint64 `protobuf:"fixed64,1,opt,name=server_steam_id,json=serverSteamId" json:"server_steam_id,omitempty"`
}

func (x *CMsgClientToGCRequestSteamDatagramTicket) Reset() {
	*x = CMsgClientToGCRequestSteamDatagramTicket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCRequestSteamDatagramTicket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCRequestSteamDatagramTicket) ProtoMessage() {}

func (x *CMsgClientToGCRequestSteamDatagramTicket) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCRequestSteamDatagramTicket.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCRequestSteamDatagramTicket) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_match_management_proto_rawDescGZIP(), []int{50}
}

func (x *CMsgClientToGCRequestSteamDatagramTicket) GetServerSteamId() uint64 {
	if x != nil && x.ServerSteamId != nil {
		return *x.ServerSteamId
	}
	return 0
}

type CMsgClientToGCRequestSteamDatagramTicketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SerializedTicket []byte  `protobuf:"bytes,1,opt,name=serialized_ticket,json=serializedTicket" json:"serialized_ticket,omitempty"`
	Message          *string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (x *CMsgClientToGCRequestSteamDatagramTicketResponse) Reset() {
	*x = CMsgClientToGCRequestSteamDatagramTicketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCRequestSteamDatagramTicketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCRequestSteamDatagramTicketResponse) ProtoMessage() {}

func (x *CMsgClientToGCRequestSteamDatagramTicketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCRequestSteamDatagramTicketResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCRequestSteamDatagramTicketResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_match_management_proto_rawDescGZIP(), []int{51}
}

func (x *CMsgClientToGCRequestSteamDatagramTicketResponse) GetSerializedTicket() []byte {
	if x != nil {
		return x.SerializedTicket
	}
	return nil
}

func (x *CMsgClientToGCRequestSteamDatagramTicketResponse) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type CMsgGCToClientSteamDatagramTicket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LegacyTimeExpiry         *uint32  `protobuf:"fixed32,1,opt,name=legacy_time_expiry,json=legacyTimeExpiry" json:"legacy_time_expiry,omitempty"`
	LegacyAuthorizedSteamId  *uint64  `protobuf:"fixed64,2,opt,name=legacy_authorized_steam_id,json=legacyAuthorizedSteamId" json:"legacy_authorized_steam_id,omitempty"`
	LegacyAuthorizedPublicIp *uint32  `protobuf:"fixed32,3,opt,name=legacy_authorized_public_ip,json=legacyAuthorizedPublicIp" json:"legacy_authorized_public_ip,omitempty"`
	LegacyGameserverSteamId  *uint64  `protobuf:"fixed64,4,opt,name=legacy_gameserver_steam_id,json=legacyGameserverSteamId" json:"legacy_gameserver_steam_id,omitempty"`
	LegacyGameserverNetId    *uint64  `protobuf:"fixed64,5,opt,name=legacy_gameserver_net_id,json=legacyGameserverNetId" json:"legacy_gameserver_net_id,omitempty"`
	LegacySignature          []byte   `protobuf:"bytes,6,opt,name=legacy_signature,json=legacySignature" json:"legacy_signature,omitempty"`
	LegacyAppId              *uint32  `protobuf:"varint,7,opt,name=legacy_app_id,json=legacyAppId" json:"legacy_app_id,omitempty"`
	LegacyExtraFields        [][]byte `protobuf:"bytes,8,rep,name=legacy_extra_fields,json=legacyExtraFields" json:"legacy_extra_fields,omitempty"`
	SerializedTicket         []byte   `protobuf:"bytes,16,opt,name=serialized_ticket,json=serializedTicket" json:"serialized_ticket,omitempty"`
}

func (x *CMsgGCToClientSteamDatagramTicket) Reset() {
	*x = CMsgGCToClientSteamDatagramTicket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCToClientSteamDatagramTicket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientSteamDatagramTicket) ProtoMessage() {}

func (x *CMsgGCToClientSteamDatagramTicket) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientSteamDatagramTicket.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientSteamDatagramTicket) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_match_management_proto_rawDescGZIP(), []int{52}
}

func (x *CMsgGCToClientSteamDatagramTicket) GetLegacyTimeExpiry() uint32 {
	if x != nil && x.LegacyTimeExpiry != nil {
		return *x.LegacyTimeExpiry
	}
	return 0
}

func (x *CMsgGCToClientSteamDatagramTicket) GetLegacyAuthorizedSteamId() uint64 {
	if x != nil && x.LegacyAuthorizedSteamId != nil {
		return *x.LegacyAuthorizedSteamId
	}
	return 0
}

func (x *CMsgGCToClientSteamDatagramTicket) GetLegacyAuthorizedPublicIp() uint32 {
	if x != nil && x.LegacyAuthorizedPublicIp != nil {
		return *x.LegacyAuthorizedPublicIp
	}
	return 0
}

func (x *CMsgGCToClientSteamDatagramTicket) GetLegacyGameserverSteamId() uint64 {
	if x != nil && x.LegacyGameserverSteamId != nil {
		return *x.LegacyGameserverSteamId
	}
	return 0
}

func (x *CMsgGCToClientSteamDatagramTicket) GetLegacyGameserverNetId() uint64 {
	if x != nil && x.LegacyGameserverNetId != nil {
		return *x.LegacyGameserverNetId
	}
	return 0
}

func (x *CMsgGCToClientSteamDatagramTicket) GetLegacySignature() []byte {
	if x != nil {
		return x.LegacySignature
	}
	return nil
}

func (x *CMsgGCToClientSteamDatagramTicket) GetLegacyAppId() uint32 {
	if x != nil && x.LegacyAppId != nil {
		return *x.LegacyAppId
	}
	return 0
}

func (x *CMsgGCToClientSteamDatagramTicket) GetLegacyExtraFields() [][]byte {
	if x != nil {
		return x.LegacyExtraFields
	}
	return nil
}

func (x *CMsgGCToClientSteamDatagramTicket) GetSerializedTicket() []byte {
	if x != nil {
		return x.SerializedTicket
	}
	return nil
}

type CMsgGCToClientRequestLaneSelection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgGCToClientRequestLaneSelection) Reset() {
	*x = CMsgGCToClientRequestLaneSelection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCToClientRequestLaneSelection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientRequestLaneSelection) ProtoMessage() {}

func (x *CMsgGCToClientRequestLaneSelection) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientRequestLaneSelection.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientRequestLaneSelection) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_match_management_proto_rawDescGZIP(), []int{53}
}

type CMsgGCToClientRequestLaneSelectionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LaneSelectionFlags   *uint32 `protobuf:"varint,1,opt,name=lane_selection_flags,json=laneSelectionFlags" json:"lane_selection_flags,omitempty"`
	HighPriorityDisabled *bool   `protobuf:"varint,2,opt,name=high_priority_disabled,json=highPriorityDisabled" json:"high_priority_disabled,omitempty"`
}

func (x *CMsgGCToClientRequestLaneSelectionResponse) Reset() {
	*x = CMsgGCToClientRequestLaneSelectionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCToClientRequestLaneSelectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientRequestLaneSelectionResponse) ProtoMessage() {}

func (x *CMsgGCToClientRequestLaneSelectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientRequestLaneSelectionResponse.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientRequestLaneSelectionResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_match_management_proto_rawDescGZIP(), []int{54}
}

func (x *CMsgGCToClientRequestLaneSelectionResponse) GetLaneSelectionFlags() uint32 {
	if x != nil && x.LaneSelectionFlags != nil {
		return *x.LaneSelectionFlags
	}
	return 0
}

func (x *CMsgGCToClientRequestLaneSelectionResponse) GetHighPriorityDisabled() bool {
	if x != nil && x.HighPriorityDisabled != nil {
		return *x.HighPriorityDisabled
	}
	return false
}

type CMsgGCToClientRequestMMInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgGCToClientRequestMMInfo) Reset() {
	*x = CMsgGCToClientRequestMMInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCToClientRequestMMInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientRequestMMInfo) ProtoMessage() {}

func (x *CMsgGCToClientRequestMMInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientRequestMMInfo.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientRequestMMInfo) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_match_management_proto_rawDescGZIP(), []int{55}
}

type CMsgClientToGCMMInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LaneSelectionFlags   *uint32 `protobuf:"varint,1,opt,name=lane_selection_flags,json=laneSelectionFlags" json:"lane_selection_flags,omitempty"`
	HighPriorityDisabled *bool   `protobuf:"varint,2,opt,name=high_priority_disabled,json=highPriorityDisabled" json:"high_priority_disabled,omitempty"`
}

func (x *CMsgClientToGCMMInfo) Reset() {
	*x = CMsgClientToGCMMInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCMMInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCMMInfo) ProtoMessage() {}

func (x *CMsgClientToGCMMInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCMMInfo.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCMMInfo) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_match_management_proto_rawDescGZIP(), []int{56}
}

func (x *CMsgClientToGCMMInfo) GetLaneSelectionFlags() uint32 {
	if x != nil && x.LaneSelectionFlags != nil {
		return *x.LaneSelectionFlags
	}
	return 0
}

func (x *CMsgClientToGCMMInfo) GetHighPriorityDisabled() bool {
	if x != nil && x.HighPriorityDisabled != nil {
		return *x.HighPriorityDisabled
	}
	return false
}

type CMsgPracticeLobbySetDetails_AbilityDraftSpecificDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShuffleDraftOrder *bool `protobuf:"varint,1,opt,name=shuffle_draft_order,json=shuffleDraftOrder" json:"shuffle_draft_order,omitempty"`
}

func (x *CMsgPracticeLobbySetDetails_AbilityDraftSpecificDetails) Reset() {
	*x = CMsgPracticeLobbySetDetails_AbilityDraftSpecificDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPracticeLobbySetDetails_AbilityDraftSpecificDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPracticeLobbySetDetails_AbilityDraftSpecificDetails) ProtoMessage() {}

func (x *CMsgPracticeLobbySetDetails_AbilityDraftSpecificDetails) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPracticeLobbySetDetails_AbilityDraftSpecificDetails.ProtoReflect.Descriptor instead.
func (*CMsgPracticeLobbySetDetails_AbilityDraftSpecificDetails) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_match_management_proto_rawDescGZIP(), []int{8, 0}
}

func (x *CMsgPracticeLobbySetDetails_AbilityDraftSpecificDetails) GetShuffleDraftOrder() bool {
	if x != nil && x.ShuffleDraftOrder != nil {
		return *x.ShuffleDraftOrder
	}
	return false
}

type CMsgPracticeLobbyCreate_SaveGame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data      []byte  `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Version   *int32  `protobuf:"varint,2,opt,name=version" json:"version,omitempty"`
	SteamId   *uint64 `protobuf:"fixed64,3,opt,name=steam_id,json=steamId" json:"steam_id,omitempty"`
	Signature *uint64 `protobuf:"fixed64,4,opt,name=signature" json:"signature,omitempty"`
}

func (x *CMsgPracticeLobbyCreate_SaveGame) Reset() {
	*x = CMsgPracticeLobbyCreate_SaveGame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPracticeLobbyCreate_SaveGame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPracticeLobbyCreate_SaveGame) ProtoMessage() {}

func (x *CMsgPracticeLobbyCreate_SaveGame) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPracticeLobbyCreate_SaveGame.ProtoReflect.Descriptor instead.
func (*CMsgPracticeLobbyCreate_SaveGame) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_match_management_proto_rawDescGZIP(), []int{9, 0}
}

func (x *CMsgPracticeLobbyCreate_SaveGame) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CMsgPracticeLobbyCreate_SaveGame) GetVersion() int32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *CMsgPracticeLobbyCreate_SaveGame) GetSteamId() uint64 {
	if x != nil && x.SteamId != nil {
		return *x.SteamId
	}
	return 0
}

func (x *CMsgPracticeLobbyCreate_SaveGame) GetSignature() uint64 {
	if x != nil && x.Signature != nil {
		return *x.Signature
	}
	return 0
}

type CMsgPracticeLobbyListResponseEntry_CLobbyMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId  *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	PlayerName *string `protobuf:"bytes,2,opt,name=player_name,json=playerName" json:"player_name,omitempty"`
}

func (x *CMsgPracticeLobbyListResponseEntry_CLobbyMember) Reset() {
	*x = CMsgPracticeLobbyListResponseEntry_CLobbyMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPracticeLobbyListResponseEntry_CLobbyMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPracticeLobbyListResponseEntry_CLobbyMember) ProtoMessage() {}

func (x *CMsgPracticeLobbyListResponseEntry_CLobbyMember) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPracticeLobbyListResponseEntry_CLobbyMember.ProtoReflect.Descriptor instead.
func (*CMsgPracticeLobbyListResponseEntry_CLobbyMember) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_match_management_proto_rawDescGZIP(), []int{21, 0}
}

func (x *CMsgPracticeLobbyListResponseEntry_CLobbyMember) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgPracticeLobbyListResponseEntry_CLobbyMember) GetPlayerName() string {
	if x != nil && x.PlayerName != nil {
		return *x.PlayerName
	}
	return ""
}

type CMsgQuickJoinCustomLobby_LegacyRegionPing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerRegion *uint32 `protobuf:"varint,1,opt,name=server_region,json=serverRegion" json:"server_region,omitempty"`
	Ping         *uint32 `protobuf:"varint,2,opt,name=ping" json:"ping,omitempty"`
	RegionCode   *uint32 `protobuf:"fixed32,3,opt,name=region_code,json=regionCode" json:"region_code,omitempty"`
}

func (x *CMsgQuickJoinCustomLobby_LegacyRegionPing) Reset() {
	*x = CMsgQuickJoinCustomLobby_LegacyRegionPing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgQuickJoinCustomLobby_LegacyRegionPing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgQuickJoinCustomLobby_LegacyRegionPing) ProtoMessage() {}

func (x *CMsgQuickJoinCustomLobby_LegacyRegionPing) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgQuickJoinCustomLobby_LegacyRegionPing.ProtoReflect.Descriptor instead.
func (*CMsgQuickJoinCustomLobby_LegacyRegionPing) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_match_management_proto_rawDescGZIP(), []int{35, 0}
}

func (x *CMsgQuickJoinCustomLobby_LegacyRegionPing) GetServerRegion() uint32 {
	if x != nil && x.ServerRegion != nil {
		return *x.ServerRegion
	}
	return 0
}

func (x *CMsgQuickJoinCustomLobby_LegacyRegionPing) GetPing() uint32 {
	if x != nil && x.Ping != nil {
		return *x.Ping
	}
	return 0
}

func (x *CMsgQuickJoinCustomLobby_LegacyRegionPing) GetRegionCode() uint32 {
	if x != nil && x.RegionCode != nil {
		return *x.RegionCode
	}
	return 0
}

type CMsgSpectatorLobbyGameDetails_Team struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamId   *uint32 `protobuf:"varint,1,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	TeamName *string `protobuf:"bytes,2,opt,name=team_name,json=teamName" json:"team_name,omitempty"`
	TeamLogo *uint64 `protobuf:"fixed64,3,opt,name=team_logo,json=teamLogo" json:"team_logo,omitempty"`
}

func (x *CMsgSpectatorLobbyGameDetails_Team) Reset() {
	*x = CMsgSpectatorLobbyGameDetails_Team{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSpectatorLobbyGameDetails_Team) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSpectatorLobbyGameDetails_Team) ProtoMessage() {}

func (x *CMsgSpectatorLobbyGameDetails_Team) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSpectatorLobbyGameDetails_Team.ProtoReflect.Descriptor instead.
func (*CMsgSpectatorLobbyGameDetails_Team) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_match_management_proto_rawDescGZIP(), []int{45, 0}
}

func (x *CMsgSpectatorLobbyGameDetails_Team) GetTeamId() uint32 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

func (x *CMsgSpectatorLobbyGameDetails_Team) GetTeamName() string {
	if x != nil && x.TeamName != nil {
		return *x.TeamName
	}
	return ""
}

func (x *CMsgSpectatorLobbyGameDetails_Team) GetTeamLogo() uint64 {
	if x != nil && x.TeamLogo != nil {
		return *x.TeamLogo
	}
	return 0
}

type CMsgSpectatorLobbyListResponse_SpectatorLobby struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LobbyId         *uint64                        `protobuf:"varint,1,opt,name=lobby_id,json=lobbyId" json:"lobby_id,omitempty"`
	GameName        *string                        `protobuf:"bytes,2,opt,name=game_name,json=gameName" json:"game_name,omitempty"`
	RequiresPassKey *bool                          `protobuf:"varint,3,opt,name=requires_pass_key,json=requiresPassKey" json:"requires_pass_key,omitempty"`
	LeaderAccountId *uint32                        `protobuf:"varint,4,opt,name=leader_account_id,json=leaderAccountId" json:"leader_account_id,omitempty"`
	MemberCount     *uint32                        `protobuf:"varint,5,opt,name=member_count,json=memberCount" json:"member_count,omitempty"`
	GameDetails     *CMsgSpectatorLobbyGameDetails `protobuf:"bytes,7,opt,name=game_details,json=gameDetails" json:"game_details,omitempty"`
}

func (x *CMsgSpectatorLobbyListResponse_SpectatorLobby) Reset() {
	*x = CMsgSpectatorLobbyListResponse_SpectatorLobby{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSpectatorLobbyListResponse_SpectatorLobby) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSpectatorLobbyListResponse_SpectatorLobby) ProtoMessage() {}

func (x *CMsgSpectatorLobbyListResponse_SpectatorLobby) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_match_management_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSpectatorLobbyListResponse_SpectatorLobby.ProtoReflect.Descriptor instead.
func (*CMsgSpectatorLobbyListResponse_SpectatorLobby) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_match_management_proto_rawDescGZIP(), []int{49, 0}
}

func (x *CMsgSpectatorLobbyListResponse_SpectatorLobby) GetLobbyId() uint64 {
	if x != nil && x.LobbyId != nil {
		return *x.LobbyId
	}
	return 0
}

func (x *CMsgSpectatorLobbyListResponse_SpectatorLobby) GetGameName() string {
	if x != nil && x.GameName != nil {
		return *x.GameName
	}
	return ""
}

func (x *CMsgSpectatorLobbyListResponse_SpectatorLobby) GetRequiresPassKey() bool {
	if x != nil && x.RequiresPassKey != nil {
		return *x.RequiresPassKey
	}
	return false
}

func (x *CMsgSpectatorLobbyListResponse_SpectatorLobby) GetLeaderAccountId() uint32 {
	if x != nil && x.LeaderAccountId != nil {
		return *x.LeaderAccountId
	}
	return 0
}

func (x *CMsgSpectatorLobbyListResponse_SpectatorLobby) GetMemberCount() uint32 {
	if x != nil && x.MemberCount != nil {
		return *x.MemberCount
	}
	return 0
}

func (x *CMsgSpectatorLobbyListResponse_SpectatorLobby) GetGameDetails() *CMsgSpectatorLobbyGameDetails {
	if x != nil {
		return x.GameDetails
	}
	return nil
}

var File_dota_gcmessages_client_match_management_proto protoreflect.FileDescriptor

var file_dota_gcmessages_client_match_management_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x64, 0x6f, 0x74, 0x61, 0x5f, 0x67, 0x63, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x04, 0x64, 0x6f, 0x74, 0x61, 0x1a, 0x13, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x64, 0x6f, 0x74, 0x61,
	0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x64, 0x6f, 0x74, 0x61, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x67, 0x63, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x64, 0x6f, 0x74, 0x61, 0x5f, 0x67, 0x63, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6c, 0x6f, 0x62, 0x62,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa9, 0x07, 0x0a, 0x15, 0x43, 0x4d, 0x73, 0x67,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x0a, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x12,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x6e,
	0x75, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x52, 0x10,
	0x67, 0x61, 0x6d, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x75, 0x6d,
	0x12, 0x2c, 0x0a, 0x12, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x67, 0x61,
	0x6d, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x35,
	0x0a, 0x09, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x50, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x70, 0x69, 0x6e,
	0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x11, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x6c, 0x6f, 0x5f, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x6f, 0x6c, 0x6f, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x6c,
	0x61, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x12, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x6c, 0x61, 0x6e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x63, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x12, 0x6c, 0x61, 0x6e, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x68, 0x69, 0x67, 0x68, 0x5f,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x68, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x42, 0x0a,
	0x1d, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61,
	0x79, 0x12, 0x3d, 0x0a, 0x1b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x5f, 0x6d, 0x61, 0x73, 0x6b,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x47, 0x61,
	0x6d, 0x65, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x4d, 0x61, 0x73, 0x6b,
	0x12, 0x2e, 0x0a, 0x13, 0x62, 0x6f, 0x74, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c,
	0x74, 0x79, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x62,
	0x6f, 0x74, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x4d, 0x61, 0x73, 0x6b,
	0x12, 0x31, 0x0a, 0x15, 0x62, 0x6f, 0x74, 0x5f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x12, 0x62, 0x6f, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4d,
	0x61, 0x73, 0x6b, 0x22, 0xb6, 0x02, 0x0a, 0x1b, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x14, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x69, 0x63, 0x45, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x36, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x64, 0x6f, 0x74, 0x61,
	0x2e, 0x45, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x19, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x06, 0x52, 0x17, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3f, 0x0a, 0x14,
	0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x6f, 0x70, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x63,
	0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x61,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x43, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x22, 0xef, 0x01,
	0x0a, 0x17, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x72, 0x74, 0x79, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53,
	0x6c, 0x6f, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x14, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x73, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22,
	0xa7, 0x01, 0x0a, 0x0b, 0x43, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x61, 0x64, 0x79, 0x55, 0x70, 0x12,
	0x2f, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19,
	0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x44, 0x4f, 0x54, 0x41, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x52,
	0x65, 0x61, 0x64, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x20, 0x0a, 0x0c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x75, 0x70, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x79, 0x55, 0x70, 0x4b,
	0x65, 0x79, 0x12, 0x45, 0x0a, 0x0e, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x73,
	0x70, 0x65, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x6f, 0x74,
	0x61, 0x2e, 0x43, 0x44, 0x4f, 0x54, 0x41, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x53, 0x70, 0x65, 0x63, 0x73, 0x52, 0x0d, 0x68, 0x61, 0x72, 0x64,
	0x77, 0x61, 0x72, 0x65, 0x53, 0x70, 0x65, 0x63, 0x73, 0x22, 0x91, 0x02, 0x0a, 0x11, 0x43, 0x4d,
	0x73, 0x67, 0x52, 0x65, 0x61, 0x64, 0x79, 0x55, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x06, 0x52, 0x07, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x49, 0x64, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x64, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x0b, 0x64, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x64, 0x49, 0x64, 0x73,
	0x12, 0x29, 0x0a, 0x10, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x64,
	0x69, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0f, 0x61, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x64,
	0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0f, 0x64, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x64, 0x49,
	0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x11, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f,
	0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x19, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x44, 0x4f, 0x54, 0x41, 0x4c, 0x6f, 0x62,
	0x62, 0x79, 0x52, 0x65, 0x61, 0x64, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0f, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x18, 0x0a,
	0x16, 0x43, 0x4d, 0x73, 0x67, 0x41, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x22, 0x45, 0x0a, 0x15, 0x43, 0x4d, 0x73, 0x67, 0x4c,
	0x6f, 0x62, 0x62, 0x79, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x53, 0x61, 0x76, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xee,
	0x10, 0x0a, 0x1b, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x4c,
	0x6f, 0x62, 0x62, 0x79, 0x53, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x19,
	0x0a, 0x08, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61,
	0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x0c, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64,
	0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0b, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x63, 0x6d, 0x5f, 0x70, 0x69, 0x63, 0x6b, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x44, 0x4f, 0x54,
	0x41, 0x5f, 0x43, 0x4d, 0x5f, 0x50, 0x49, 0x43, 0x4b, 0x52, 0x06, 0x63, 0x6d, 0x50, 0x69, 0x63,
	0x6b, 0x12, 0x4d, 0x0a, 0x16, 0x62, 0x6f, 0x74, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75,
	0x6c, 0x74, 0x79, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x44, 0x4f, 0x54, 0x41, 0x42, 0x6f, 0x74,
	0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x52, 0x14, 0x62, 0x6f, 0x74, 0x44,
	0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x52, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x61, 0x74, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x68, 0x65,
	0x61, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x77, 0x69, 0x74, 0x68,
	0x5f, 0x62, 0x6f, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x66, 0x69, 0x6c,
	0x6c, 0x57, 0x69, 0x74, 0x68, 0x42, 0x6f, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x74,
	0x72, 0x6f, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69,
	0x6e, 0x74, 0x72, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x65,
	0x6e, 0x61, 0x6c, 0x74, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x72, 0x61, 0x64, 0x69,
	0x61, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x70, 0x65, 0x6e, 0x61, 0x6c,
	0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x12, 0x2c,
	0x0a, 0x12, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f,
	0x64, 0x69, 0x72, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x70, 0x65, 0x6e, 0x61,
	0x6c, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x44, 0x69, 0x72, 0x65, 0x12, 0x20, 0x0a, 0x0c,
	0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x6f, 0x61, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x2e, 0x0a, 0x13, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x5f, 0x77, 0x69, 0x6e, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x72, 0x61,
	0x64, 0x69, 0x61, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x57, 0x69, 0x6e, 0x73, 0x12,
	0x28, 0x0a, 0x10, 0x64, 0x69, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x77,
	0x69, 0x6e, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x64, 0x69, 0x72, 0x65, 0x53,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x57, 0x69, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6c, 0x6c,
	0x63, 0x68, 0x61, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x61, 0x6c, 0x6c, 0x63,
	0x68, 0x61, 0x74, 0x12, 0x3a, 0x0a, 0x0d, 0x64, 0x6f, 0x74, 0x61, 0x5f, 0x74, 0x76, 0x5f, 0x64,
	0x65, 0x6c, 0x61, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x64, 0x6f, 0x74,
	0x61, 0x2e, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x44, 0x6f, 0x74, 0x61, 0x54, 0x56, 0x44, 0x65, 0x6c,
	0x61, 0x79, 0x52, 0x0b, 0x64, 0x6f, 0x74, 0x61, 0x54, 0x76, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6c, 0x61, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6c, 0x61,
	0x6e, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4d, 0x61, 0x70, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x64, 0x69,
	0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79,
	0x12, 0x24, 0x0a, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4d, 0x69, 0x6e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x6d,
	0x61, 0x78, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4d, 0x61, 0x78, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x18, 0x21, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x44, 0x4f,
	0x54, 0x41, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x52, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x26, 0x0a,
	0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x72, 0x63,
	0x18, 0x22, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x47, 0x61,
	0x6d, 0x65, 0x43, 0x72, 0x63, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x25,
	0x20, 0x01, 0x28, 0x07, 0x52, 0x13, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x47, 0x61, 0x6d, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x36, 0x0a, 0x17, 0x70, 0x72, 0x65,
	0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x70, 0x72, 0x65, 0x76,
	0x69, 0x6f, 0x75, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x12, 0x40, 0x0a, 0x0d, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e,
	0x4c, 0x6f, 0x62, 0x62, 0x79, 0x44, 0x6f, 0x74, 0x61, 0x50, 0x61, 0x75, 0x73, 0x65, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x70, 0x61, 0x75, 0x73, 0x65, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x12, 0x47, 0x0a, 0x13, 0x62, 0x6f, 0x74, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x69,
	0x63, 0x75, 0x6c, 0x74, 0x79, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x17, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x44, 0x4f, 0x54, 0x41, 0x42, 0x6f, 0x74, 0x44,
	0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x52, 0x11, 0x62, 0x6f, 0x74, 0x44, 0x69,
	0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x44, 0x69, 0x72, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x62, 0x6f, 0x74, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x18, 0x2c, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x62, 0x6f, 0x74, 0x52, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x62, 0x6f, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x62, 0x6f, 0x74, 0x44, 0x69, 0x72, 0x65, 0x12, 0x5a, 0x0a, 0x18, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x72,
	0x75, 0x6c, 0x65, 0x73, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x64, 0x6f, 0x74,
	0x61, 0x2e, 0x44, 0x4f, 0x54, 0x41, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x16, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x69, 0x65, 0x73, 0x18, 0x2f, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x13, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x50,
	0x65, 0x6e, 0x61, 0x6c, 0x74, 0x69, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x6c, 0x61, 0x6e, 0x5f,
	0x68, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6c, 0x61, 0x6e, 0x48, 0x6f, 0x73,
	0x74, 0x50, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a,
	0x0e, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x31, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x5f, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x32, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x48, 0x65, 0x72, 0x6f, 0x49, 0x64,
	0x73, 0x12, 0x40, 0x0a, 0x0d, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x5f, 0x73, 0x61,
	0x76, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69,
	0x6f, 0x53, 0x61, 0x76, 0x65, 0x52, 0x0c, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x53,
	0x61, 0x76, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x1e, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f,
	0x64, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x5f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x64,
	0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65,
	0x4c, 0x6f, 0x62, 0x62, 0x79, 0x53, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e,
	0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x72, 0x61, 0x66, 0x74, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x1b, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x44, 0x72, 0x61, 0x66, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x64, 0x6f, 0x5f, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x64, 0x72, 0x61, 0x66, 0x74, 0x18, 0x35, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x64, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x72, 0x61, 0x66, 0x74,
	0x1a, 0x4d, 0x0a, 0x1b, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x72, 0x61, 0x66, 0x74,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x2e, 0x0a, 0x13, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x5f, 0x64, 0x72, 0x61, 0x66, 0x74,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x73, 0x68,
	0x75, 0x66, 0x66, 0x6c, 0x65, 0x44, 0x72, 0x61, 0x66, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x22,
	0xfa, 0x02, 0x0a, 0x17, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65,
	0x4c, 0x6f, 0x62, 0x62, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61,
	0x73, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x0d,
	0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x53, 0x65, 0x74, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0c, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x43, 0x0a, 0x09, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x67, 0x61, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x52,
	0x08, 0x73, 0x61, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x1a, 0x71, 0x0a, 0x08, 0x53, 0x61, 0x76,
	0x65, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x06, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x9a, 0x01, 0x0a,
	0x1c, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x62,
	0x62, 0x79, 0x53, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x26, 0x0a,
	0x04, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x64, 0x6f,
	0x74, 0x61, 0x2e, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x47, 0x43, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x52,
	0x04, 0x74, 0x65, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x3e, 0x0a, 0x0e, 0x62, 0x6f, 0x74,
	0x5f, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x44, 0x4f, 0x54, 0x41, 0x42, 0x6f, 0x74,
	0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x52, 0x0d, 0x62, 0x6f, 0x74, 0x44,
	0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x22, 0x43, 0x0a, 0x19, 0x43, 0x4d, 0x73,
	0x67, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x53, 0x65,
	0x74, 0x43, 0x6f, 0x61, 0x63, 0x68, 0x12, 0x26, 0x0a, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x44, 0x4f, 0x54, 0x41,
	0x5f, 0x47, 0x43, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x52, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x22, 0xe4,
	0x01, 0x0a, 0x25, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x4c,
	0x6f, 0x62, 0x62, 0x79, 0x4a, 0x6f, 0x69, 0x6e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x12, 0x33, 0x0a, 0x15, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72,
	0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x36, 0x0a,
	0x17, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x42, 0x0a, 0x26, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x42,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x38, 0x0a, 0x36, 0x43, 0x4d, 0x73,
	0x67, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x54, 0x6f,
	0x67, 0x67, 0x6c, 0x65, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x36, 0x0a, 0x15, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x63, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x4b, 0x69, 0x63, 0x6b, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x3e, 0x0a, 0x1d, 0x43,
	0x4d, 0x73, 0x67, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79,
	0x4b, 0x69, 0x63, 0x6b, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x18, 0x0a, 0x16, 0x43,
	0x4d, 0x73, 0x67, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79,
	0x4c, 0x65, 0x61, 0x76, 0x65, 0x22, 0x40, 0x0a, 0x17, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68,
	0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x37, 0x0a, 0x1c, 0x43, 0x4d, 0x73, 0x67, 0x41,
	0x70, 0x70, 0x6c, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x54, 0x6f, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x63, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64,
	0x22, 0x7c, 0x0a, 0x15, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65,
	0x4c, 0x6f, 0x62, 0x62, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x73,
	0x73, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x09,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x47, 0x61, 0x6d, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0xfe,
	0x05, 0x0a, 0x22, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x4c,
	0x6f, 0x62, 0x62, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4f, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x2e, 0x43, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x07, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x73, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x50, 0x61, 0x73, 0x73, 0x4b,
	0x65, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6c,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x09,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x47, 0x61, 0x6d, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x50, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12,
	0x26, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x4d, 0x61, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x5f, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x65, 0x61, 0x67, 0x75,
	0x65, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x6c, 0x61, 0x6e, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x5f,
	0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x6c, 0x61, 0x6e, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x69, 0x6e, 0x67,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x69, 0x6e, 0x5f,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x6d, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x69, 0x65, 0x73, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x70,
	0x65, 0x6e, 0x61, 0x6c, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x1a,
	0x4e, 0x0a, 0x0c, 0x43, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x63, 0x0a, 0x1d, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x4c,
	0x6f, 0x62, 0x62, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x42, 0x0a, 0x07, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6c, 0x6f, 0x62,
	0x62, 0x69, 0x65, 0x73, 0x22, 0x66, 0x0a, 0x0d, 0x43, 0x4d, 0x73, 0x67, 0x4c, 0x6f, 0x62, 0x62,
	0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x09, 0x67, 0x61,
	0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e,
	0x64, 0x6f, 0x74, 0x61, 0x2e, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x5b, 0x0a, 0x15,
	0x43, 0x4d, 0x73, 0x67, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x07, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x07, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x22, 0xd0, 0x01, 0x0a, 0x15, 0x43, 0x4d,
	0x73, 0x67, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x4a,
	0x6f, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x64, 0x12, 0x25,
	0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x73, 0x73, 0x4b, 0x65, 0x79,
	0x12, 0x26, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f,
	0x63, 0x72, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x72, 0x63, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x07, 0x52, 0x13, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x47,
	0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x52, 0x0a, 0x1d,
	0x43, 0x4d, 0x73, 0x67, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x62, 0x62,
	0x79, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e,
	0x64, 0x6f, 0x74, 0x61, 0x2e, 0x44, 0x4f, 0x54, 0x41, 0x4a, 0x6f, 0x69, 0x6e, 0x4c, 0x6f, 0x62,
	0x62, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x3e, 0x0a, 0x22, 0x43, 0x4d, 0x73, 0x67, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x50, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73,
	0x22, 0x69, 0x0a, 0x23, 0x43, 0x4d, 0x73, 0x67, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x50, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x07, 0x6c, 0x6f, 0x62, 0x62, 0x69,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x62, 0x62,
	0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x07, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x22, 0x49, 0x0a, 0x22, 0x43,
	0x4d, 0x73, 0x67, 0x4a, 0x6f, 0x69, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x22, 0x94, 0x01, 0x0a, 0x28, 0x43, 0x4d, 0x73, 0x67, 0x4a,
	0x6f, 0x69, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x47, 0x61, 0x6d,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x67, 0x61,
	0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x62,
	0x62, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x6c, 0x6f, 0x62, 0x62, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x74, 0x0a,
	0x23, 0x43, 0x4d, 0x73, 0x67, 0x4a, 0x6f, 0x69, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x4a, 0x6f, 0x69, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x73, 0x22, 0x6d, 0x0a, 0x20, 0x43, 0x4d, 0x73, 0x67, 0x4a, 0x6f, 0x69, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0e,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x47, 0x61, 0x6d, 0x65,
	0x49, 0x64, 0x22, 0xa9, 0x05, 0x0a, 0x26, 0x43, 0x4d, 0x73, 0x67, 0x4a, 0x6f, 0x69, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x19, 0x0a,
	0x08, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x07, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a,
	0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4d, 0x61,
	0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x6d, 0x61, 0x78, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0c, 0x68, 0x61, 0x73, 0x5f, 0x70, 0x61, 0x73, 0x73,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x68, 0x61, 0x73, 0x50,
	0x61, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x16, 0x6c, 0x61, 0x6e, 0x5f, 0x68, 0x6f,
	0x73, 0x74, 0x5f, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6c, 0x61, 0x6e, 0x48, 0x6f, 0x73, 0x74, 0x50,
	0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x6c,
	0x6f, 0x62, 0x62, 0x79, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x26, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63,
	0x72, 0x63, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x47, 0x61, 0x6d, 0x65, 0x43, 0x72, 0x63, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x69, 0x6e, 0x5f, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x6d, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x70, 0x65,
	0x6e, 0x61, 0x6c, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x6b,
	0x0a, 0x21, 0x43, 0x4d, 0x73, 0x67, 0x4a, 0x6f, 0x69, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x4c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x07, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x4a, 0x6f, 0x69, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4c, 0x6f,
	0x62, 0x62, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x07, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x22, 0x98, 0x04, 0x0a, 0x18,
	0x43, 0x4d, 0x73, 0x67, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x65, 0x67, 0x61,
	0x63, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64,
	0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x14, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x53, 0x65,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4c, 0x6f, 0x62, 0x62, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x22, 0x0a, 0x0d,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x6e, 0x79, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x41, 0x6e, 0x79, 0x4d, 0x61, 0x70,
	0x12, 0x5f, 0x0a, 0x13, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x5f, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x4a, 0x6f,
	0x69, 0x6e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x2e, 0x4c, 0x65,
	0x67, 0x61, 0x63, 0x79, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x11,
	0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x35, 0x0a, 0x09, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08,
	0x70, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x6c, 0x0a, 0x10, 0x4c, 0x65, 0x67, 0x61,
	0x63, 0x79, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x55, 0x0a, 0x20, 0x43, 0x4d, 0x73, 0x67, 0x51, 0x75,
	0x69, 0x63, 0x6b, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4c, 0x6f, 0x62,
	0x62, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x64, 0x6f, 0x74,
	0x61, 0x2e, 0x44, 0x4f, 0x54, 0x41, 0x4a, 0x6f, 0x69, 0x6e, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xa8, 0x02,
	0x0a, 0x11, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b,
	0x65, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x12, 0x64, 0x69, 0x66,
	0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x44, 0x4f, 0x54,
	0x41, 0x42, 0x6f, 0x74, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x52, 0x11,
	0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x52, 0x61, 0x64, 0x69, 0x61, 0x6e,
	0x74, 0x12, 0x26, 0x0a, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x12, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x47, 0x43, 0x5f, 0x54,
	0x45, 0x41, 0x4d, 0x52, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x67, 0x61,
	0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x40, 0x0a, 0x0f, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63,
	0x75, 0x6c, 0x74, 0x79, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x17, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x44, 0x4f, 0x54, 0x41, 0x42, 0x6f, 0x74, 0x44, 0x69,
	0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x52, 0x0e, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63,
	0x75, 0x6c, 0x74, 0x79, 0x44, 0x69, 0x72, 0x65, 0x22, 0x3e, 0x0a, 0x1b, 0x43, 0x4d, 0x73, 0x67,
	0x44, 0x4f, 0x54, 0x41, 0x50, 0x61, 0x72, 0x74, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x43, 0x6f, 0x61, 0x63, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x61, 0x6e, 0x74, 0x73,
	0x5f, 0x63, 0x6f, 0x61, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x77, 0x61,
	0x6e, 0x74, 0x73, 0x43, 0x6f, 0x61, 0x63, 0x68, 0x22, 0x46, 0x0a, 0x16, 0x43, 0x4d, 0x73, 0x67,
	0x44, 0x4f, 0x54, 0x41, 0x53, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x65, 0x77, 0x5f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x10,
	0x6e, 0x65, 0x77, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64,
	0x22, 0x72, 0x0a, 0x1a, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x12, 0x29,
	0x0a, 0x10, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x06, 0x52, 0x0f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x64, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x64, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x06, 0x52, 0x0f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x69, 0x64, 0x73, 0x22, 0x30, 0x0a, 0x1a, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41,
	0x53, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x22, 0x40, 0x0a, 0x18, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f,
	0x54, 0x41, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0c, 0x6f, 0x74, 0x68, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x62, 0x0a, 0x1a, 0x43, 0x4d, 0x73, 0x67,
	0x44, 0x4f, 0x54, 0x41, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x10, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x22, 0x4e, 0x0a, 0x17,
	0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x72,
	0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x33, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x45,
	0x44, 0x4f, 0x54, 0x41, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x8c, 0x04, 0x0a,
	0x1d, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x4c, 0x6f,
	0x62, 0x62, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0d,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x55, 0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x0c,
	0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x70,
	0x65, 0x63, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x47, 0x61, 0x6d, 0x65,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x0b, 0x72, 0x61,
	0x64, 0x69, 0x61, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x45, 0x0a, 0x09, 0x64, 0x69, 0x72,
	0x65, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x64,
	0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x6f,
	0x72, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x08, 0x64, 0x69, 0x72, 0x65, 0x54, 0x65, 0x61, 0x6d,
	0x1a, 0x59, 0x0a, 0x04, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x06, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x67, 0x6f, 0x22, 0xbb, 0x01, 0x0a, 0x1c,
	0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x6f, 0x72,
	0x4c, 0x6f, 0x62, 0x62, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x19, 0x0a, 0x08,
	0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x6c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x62, 0x62, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x62,
	0x62, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x73, 0x73, 0x4b, 0x65,
	0x79, 0x12, 0x46, 0x0a, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x53, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x4c, 0x6f, 0x62, 0x62,
	0x79, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0b, 0x67, 0x61,
	0x6d, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x7f, 0x0a, 0x18, 0x43, 0x4d, 0x73,
	0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x6f, 0x72,
	0x4c, 0x6f, 0x62, 0x62, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x07,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63,
	0x74, 0x61, 0x74, 0x6f, 0x72, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x18, 0x0a, 0x16, 0x43, 0x4d,
	0x73, 0x67, 0x53, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x4c, 0x6f, 0x62, 0x62, 0x79,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0xfd, 0x02, 0x0a, 0x1e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x70, 0x65,
	0x63, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x07, 0x6c, 0x6f, 0x62, 0x62, 0x69,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x53, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x4c, 0x6f, 0x62,
	0x62, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53,
	0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x52, 0x07, 0x6c,
	0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x1a, 0x8b, 0x02, 0x0a, 0x0e, 0x53, 0x70, 0x65, 0x63, 0x74,
	0x61, 0x74, 0x6f, 0x72, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x62,
	0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6c, 0x6f, 0x62,
	0x62, 0x79, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x70, 0x61,
	0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x50, 0x61, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x2a, 0x0a,
	0x11, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x46, 0x0a, 0x0c,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x70,
	0x65, 0x63, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x47, 0x61, 0x6d, 0x65,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x22, 0x52, 0x0a, 0x28, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x12, 0x26, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x22, 0x79, 0x0a, 0x30, 0x43, 0x4d, 0x73, 0x67,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x11,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0xef, 0x03, 0x0a, 0x21, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67,
	0x72, 0x61, 0x6d, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x65, 0x67,
	0x61, 0x63, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x10, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x12, 0x3b, 0x0a, 0x1a, 0x6c, 0x65, 0x67, 0x61, 0x63,
	0x79, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x17, 0x6c, 0x65, 0x67,
	0x61, 0x63, 0x79, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x5f, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x07, 0x52, 0x18, 0x6c, 0x65, 0x67, 0x61, 0x63,
	0x79, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x49, 0x70, 0x12, 0x3b, 0x0a, 0x1a, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x67, 0x61,
	0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x06, 0x52, 0x17, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x47,
	0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64,
	0x12, 0x37, 0x0a, 0x18, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x15, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x6c, 0x65, 0x67,
	0x61, 0x63, 0x79, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0f, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6c, 0x65, 0x67,
	0x61, 0x63, 0x79, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x6c, 0x65, 0x67, 0x61,
	0x63, 0x79, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x11, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x10, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x22, 0x24, 0x0a, 0x22, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54,
	0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x61,
	0x6e, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x94, 0x01, 0x0a, 0x2a,
	0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x61, 0x6e, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x61,
	0x6e, 0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6c, 0x61, 0x6e, 0x65, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x34, 0x0a, 0x16,
	0x68, 0x69, 0x67, 0x68, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x68, 0x69,
	0x67, 0x68, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x22, 0x1d, 0x0a, 0x1b, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x4d, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x7e, 0x0a, 0x14, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x6f, 0x47, 0x43, 0x4d, 0x4d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x61, 0x6e,
	0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6c, 0x61, 0x67,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6c, 0x61, 0x6e, 0x65, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x68,
	0x69, 0x67, 0x68, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x68, 0x69, 0x67,
	0x68, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x2a, 0xf2, 0x10, 0x0a, 0x18, 0x45, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x69, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x26,
	0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x49, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x5f, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x2f, 0x0a, 0x2b, 0x6b, 0x5f, 0x45,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x2a, 0x0a, 0x26, 0x6b, 0x5f,
	0x45, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x46, 0x61, 0x69, 0x6c, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x69, 0x63, 0x10, 0x64, 0x12, 0x2b, 0x0a, 0x27, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x5f, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x49, 0x67, 0x6e, 0x6f, 0x72,
	0x65, 0x10, 0x65, 0x12, 0x32, 0x0a, 0x2e, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x66, 0x12, 0x2c, 0x0a, 0x28, 0x6b, 0x5f, 0x45, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x66, 0x6c,
	0x69, 0x6e, 0x65, 0x10, 0x67, 0x12, 0x32, 0x0a, 0x2e, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x10, 0x68, 0x12, 0x2e, 0x0a, 0x2a, 0x6b, 0x5f, 0x45,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x75,
	0x74, 0x4f, 0x66, 0x44, 0x61, 0x74, 0x65, 0x10, 0x69, 0x12, 0x37, 0x0a, 0x33, 0x6b, 0x5f, 0x45,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74,
	0x69, 0x76, 0x65, 0x4e, 0x6f, 0x4c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x10, 0x6a, 0x12, 0x35, 0x0a, 0x31, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x69,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x5f, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x76, 0x65, 0x4e, 0x6f, 0x74, 0x55,
	0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x10, 0x6b, 0x12, 0x32, 0x0a, 0x2e, 0x6b, 0x5f, 0x45,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x4e, 0x6f, 0x74, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x10, 0x6c, 0x12, 0x3b, 0x0a,
	0x37, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x43, 0x6f, 0x6d, 0x70,
	0x65, 0x74, 0x69, 0x74, 0x69, 0x76, 0x65, 0x4e, 0x6f, 0x74, 0x45, 0x6e, 0x6f, 0x75, 0x67, 0x68,
	0x50, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x10, 0x6d, 0x12, 0x32, 0x0a, 0x2e, 0x6b, 0x5f,
	0x45, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x10, 0x6e, 0x12, 0x3c,
	0x0a, 0x38, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x43, 0x6f, 0x6d,
	0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x76, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x53, 0x70, 0x72, 0x65,
	0x61, 0x64, 0x54, 0x6f, 0x6f, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x10, 0x6f, 0x12, 0x33, 0x0a, 0x2f,
	0x6b, 0x5f, 0x45, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x49, 0x6e, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x10,
	0x70, 0x12, 0x33, 0x0a, 0x2f, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x69, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x56, 0x41, 0x43, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x10, 0x71, 0x12, 0x39, 0x0a, 0x35, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x5f, 0x57, 0x65, 0x65, 0x6b, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x75, 0x72,
	0x6e, 0x65, 0x79, 0x42, 0x61, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x10,
	0x72, 0x12, 0x3e, 0x0a, 0x3a, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x69, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f,
	0x57, 0x65, 0x65, 0x6b, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x54, 0x65,
	0x61, 0x6d, 0x42, 0x75, 0x79, 0x49, 0x6e, 0x54, 0x6f, 0x6f, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x10,
	0x73, 0x12, 0x44, 0x0a, 0x40, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x69, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f,
	0x57, 0x65, 0x65, 0x6b, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x49, 0x6e,
	0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x42, 0x75, 0x79, 0x49, 0x6e, 0x54, 0x6f, 0x6f,
	0x4c, 0x61, 0x72, 0x67, 0x65, 0x10, 0x74, 0x12, 0x3e, 0x0a, 0x3a, 0x6b, 0x5f, 0x45, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x57, 0x65, 0x65, 0x6b, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x75,
	0x72, 0x6e, 0x65, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x42, 0x75, 0x79, 0x49, 0x6e, 0x54, 0x6f, 0x6f,
	0x4c, 0x61, 0x72, 0x67, 0x65, 0x10, 0x75, 0x12, 0x3a, 0x0a, 0x36, 0x6b, 0x5f, 0x45, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x69, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x10, 0x76, 0x12, 0x38, 0x0a, 0x34, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x5f, 0x57, 0x65, 0x65, 0x6b, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79,
	0x4e, 0x6f, 0x74, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x10, 0x77, 0x12, 0x40, 0x0a,
	0x3c, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x57, 0x65, 0x65, 0x6b,
	0x65, 0x6e, 0x64, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x78, 0x12,
	0x3f, 0x0a, 0x3b, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x41, 0x6e, 0x63, 0x68, 0x6f,
	0x72, 0x65, 0x64, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x10, 0x79,
	0x12, 0x2e, 0x0a, 0x2a, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x69, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x4e,
	0x6f, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x43, 0x6c, 0x61, 0x6e, 0x10, 0x7a,
	0x12, 0x3b, 0x0a, 0x37, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x69, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x43,
	0x6f, 0x61, 0x63, 0x68, 0x65, 0x73, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x42,
	0x61, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x10, 0x7b, 0x12, 0x41, 0x0a,
	0x3d, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x43, 0x6f, 0x61, 0x63,
	0x68, 0x65, 0x73, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4e, 0x6f, 0x74, 0x4d, 0x65, 0x74, 0x10, 0x7c,
	0x12, 0x34, 0x0a, 0x30, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x69, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x49,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x10, 0x7d, 0x12, 0x35, 0x0a, 0x31, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x5f, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x44, 0x69, 0x73, 0x63, 0x72, 0x65, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x10, 0x7e, 0x12, 0x2c, 0x0a,
	0x28, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x4e, 0x6f, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x10, 0x7f, 0x12, 0x39, 0x0a, 0x34, 0x6b,
	0x5f, 0x45, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x47, 0x61, 0x75, 0x6e, 0x74, 0x6c, 0x65, 0x74, 0x46,
	0x6c, 0x61, 0x67, 0x10, 0x80, 0x01, 0x12, 0x37, 0x0a, 0x32, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x5f, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x47, 0x61, 0x75, 0x6e, 0x74,
	0x6c, 0x65, 0x74, 0x54, 0x6f, 0x6f, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x10, 0x81, 0x01, 0x12,
	0x35, 0x0a, 0x30, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x44, 0x69,
	0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x4e, 0x6f, 0x74, 0x55, 0x6e, 0x6c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x10, 0x82, 0x01, 0x12, 0x38, 0x0a, 0x33, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x5f, 0x43, 0x6f, 0x61, 0x63, 0x68, 0x65, 0x73, 0x4e, 0x6f, 0x74, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x49, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x10, 0x83, 0x01,
	0x12, 0x2f, 0x0a, 0x2a, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x69, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x75, 0x73, 0x79, 0x10, 0x84,
	0x01, 0x12, 0x30, 0x0a, 0x2b, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x69, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x69, 0x6e, 0x61, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64,
	0x10, 0x85, 0x01, 0x12, 0x3b, 0x0a, 0x36, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x5f, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x69, 0x6e, 0x61, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x4d, 0x69, 0x78, 0x65, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x10, 0x86, 0x01,
	0x12, 0x34, 0x0a, 0x2f, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x69, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x52,
	0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x61, 0x6e,
	0x6b, 0x65, 0x64, 0x10, 0x87, 0x01, 0x42, 0x25, 0x5a, 0x23, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x74, 0x61, 0x62, 0x75, 0x66, 0x66, 0x2f, 0x6d, 0x61,
	0x6e, 0x74, 0x61, 0x2f, 0x64, 0x6f, 0x74, 0x61, 0x3b, 0x64, 0x6f, 0x74, 0x61,
}

var (
	file_dota_gcmessages_client_match_management_proto_rawDescOnce sync.Once
	file_dota_gcmessages_client_match_management_proto_rawDescData = file_dota_gcmessages_client_match_management_proto_rawDesc
)

func file_dota_gcmessages_client_match_management_proto_rawDescGZIP() []byte {
	file_dota_gcmessages_client_match_management_proto_rawDescOnce.Do(func() {
		file_dota_gcmessages_client_match_management_proto_rawDescData = protoimpl.X.CompressGZIP(file_dota_gcmessages_client_match_management_proto_rawDescData)
	})
	return file_dota_gcmessages_client_match_management_proto_rawDescData
}

var file_dota_gcmessages_client_match_management_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_dota_gcmessages_client_match_management_proto_msgTypes = make([]protoimpl.MessageInfo, 63)
var file_dota_gcmessages_client_match_management_proto_goTypes = []interface{}{
	(EStartFindingMatchResult)(0),                                   // 0: dota.EStartFindingMatchResult
	(*CMsgStartFindingMatch)(nil),                                   // 1: dota.CMsgStartFindingMatch
	(*CMsgStartFindingMatchResult)(nil),                             // 2: dota.CMsgStartFindingMatchResult
	(*CMsgStopFindingMatch)(nil),                                    // 3: dota.CMsgStopFindingMatch
	(*CMsgPartyBuilderOptions)(nil),                                 // 4: dota.CMsgPartyBuilderOptions
	(*CMsgReadyUp)(nil),                                             // 5: dota.CMsgReadyUp
	(*CMsgReadyUpStatus)(nil),                                       // 6: dota.CMsgReadyUpStatus
	(*CMsgAbandonCurrentGame)(nil),                                  // 7: dota.CMsgAbandonCurrentGame
	(*CMsgLobbyScenarioSave)(nil),                                   // 8: dota.CMsgLobbyScenarioSave
	(*CMsgPracticeLobbySetDetails)(nil),                             // 9: dota.CMsgPracticeLobbySetDetails
	(*CMsgPracticeLobbyCreate)(nil),                                 // 10: dota.CMsgPracticeLobbyCreate
	(*CMsgPracticeLobbySetTeamSlot)(nil),                            // 11: dota.CMsgPracticeLobbySetTeamSlot
	(*CMsgPracticeLobbySetCoach)(nil),                               // 12: dota.CMsgPracticeLobbySetCoach
	(*CMsgPracticeLobbyJoinBroadcastChannel)(nil),                   // 13: dota.CMsgPracticeLobbyJoinBroadcastChannel
	(*CMsgPracticeLobbyCloseBroadcastChannel)(nil),                  // 14: dota.CMsgPracticeLobbyCloseBroadcastChannel
	(*CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus)(nil),  // 15: dota.CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus
	(*CMsgPracticeLobbyKick)(nil),                                   // 16: dota.CMsgPracticeLobbyKick
	(*CMsgPracticeLobbyKickFromTeam)(nil),                           // 17: dota.CMsgPracticeLobbyKickFromTeam
	(*CMsgPracticeLobbyLeave)(nil),                                  // 18: dota.CMsgPracticeLobbyLeave
	(*CMsgPracticeLobbyLaunch)(nil),                                 // 19: dota.CMsgPracticeLobbyLaunch
	(*CMsgApplyTeamToPracticeLobby)(nil),                            // 20: dota.CMsgApplyTeamToPracticeLobby
	(*CMsgPracticeLobbyList)(nil),                                   // 21: dota.CMsgPracticeLobbyList
	(*CMsgPracticeLobbyListResponseEntry)(nil),                      // 22: dota.CMsgPracticeLobbyListResponseEntry
	(*CMsgPracticeLobbyListResponse)(nil),                           // 23: dota.CMsgPracticeLobbyListResponse
	(*CMsgLobbyList)(nil),                                           // 24: dota.CMsgLobbyList
	(*CMsgLobbyListResponse)(nil),                                   // 25: dota.CMsgLobbyListResponse
	(*CMsgPracticeLobbyJoin)(nil),                                   // 26: dota.CMsgPracticeLobbyJoin
	(*CMsgPracticeLobbyJoinResponse)(nil),                           // 27: dota.CMsgPracticeLobbyJoinResponse
	(*CMsgFriendPracticeLobbyListRequest)(nil),                      // 28: dota.CMsgFriendPracticeLobbyListRequest
	(*CMsgFriendPracticeLobbyListResponse)(nil),                     // 29: dota.CMsgFriendPracticeLobbyListResponse
	(*CMsgJoinableCustomGameModesRequest)(nil),                      // 30: dota.CMsgJoinableCustomGameModesRequest
	(*CMsgJoinableCustomGameModesResponseEntry)(nil),                // 31: dota.CMsgJoinableCustomGameModesResponseEntry
	(*CMsgJoinableCustomGameModesResponse)(nil),                     // 32: dota.CMsgJoinableCustomGameModesResponse
	(*CMsgJoinableCustomLobbiesRequest)(nil),                        // 33: dota.CMsgJoinableCustomLobbiesRequest
	(*CMsgJoinableCustomLobbiesResponseEntry)(nil),                  // 34: dota.CMsgJoinableCustomLobbiesResponseEntry
	(*CMsgJoinableCustomLobbiesResponse)(nil),                       // 35: dota.CMsgJoinableCustomLobbiesResponse
	(*CMsgQuickJoinCustomLobby)(nil),                                // 36: dota.CMsgQuickJoinCustomLobby
	(*CMsgQuickJoinCustomLobbyResponse)(nil),                        // 37: dota.CMsgQuickJoinCustomLobbyResponse
	(*CMsgBotGameCreate)(nil),                                       // 38: dota.CMsgBotGameCreate
	(*CMsgDOTAPartyMemberSetCoach)(nil),                             // 39: dota.CMsgDOTAPartyMemberSetCoach
	(*CMsgDOTASetGroupLeader)(nil),                                  // 40: dota.CMsgDOTASetGroupLeader
	(*CMsgDOTACancelGroupInvites)(nil),                              // 41: dota.CMsgDOTACancelGroupInvites
	(*CMsgDOTASetGroupOpenStatus)(nil),                              // 42: dota.CMsgDOTASetGroupOpenStatus
	(*CMsgDOTAGroupMergeInvite)(nil),                                // 43: dota.CMsgDOTAGroupMergeInvite
	(*CMsgDOTAGroupMergeResponse)(nil),                              // 44: dota.CMsgDOTAGroupMergeResponse
	(*CMsgDOTAGroupMergeReply)(nil),                                 // 45: dota.CMsgDOTAGroupMergeReply
	(*CMsgSpectatorLobbyGameDetails)(nil),                           // 46: dota.CMsgSpectatorLobbyGameDetails
	(*CMsgSetSpectatorLobbyDetails)(nil),                            // 47: dota.CMsgSetSpectatorLobbyDetails
	(*CMsgCreateSpectatorLobby)(nil),                                // 48: dota.CMsgCreateSpectatorLobby
	(*CMsgSpectatorLobbyList)(nil),                                  // 49: dota.CMsgSpectatorLobbyList
	(*CMsgSpectatorLobbyListResponse)(nil),                          // 50: dota.CMsgSpectatorLobbyListResponse
	(*CMsgClientToGCRequestSteamDatagramTicket)(nil),                // 51: dota.CMsgClientToGCRequestSteamDatagramTicket
	(*CMsgClientToGCRequestSteamDatagramTicketResponse)(nil),        // 52: dota.CMsgClientToGCRequestSteamDatagramTicketResponse
	(*CMsgGCToClientSteamDatagramTicket)(nil),                       // 53: dota.CMsgGCToClientSteamDatagramTicket
	(*CMsgGCToClientRequestLaneSelection)(nil),                      // 54: dota.CMsgGCToClientRequestLaneSelection
	(*CMsgGCToClientRequestLaneSelectionResponse)(nil),              // 55: dota.CMsgGCToClientRequestLaneSelectionResponse
	(*CMsgGCToClientRequestMMInfo)(nil),                             // 56: dota.CMsgGCToClientRequestMMInfo
	(*CMsgClientToGCMMInfo)(nil),                                    // 57: dota.CMsgClientToGCMMInfo
	(*CMsgPracticeLobbySetDetails_AbilityDraftSpecificDetails)(nil), // 58: dota.CMsgPracticeLobbySetDetails.AbilityDraftSpecificDetails
	(*CMsgPracticeLobbyCreate_SaveGame)(nil),                        // 59: dota.CMsgPracticeLobbyCreate.SaveGame
	(*CMsgPracticeLobbyListResponseEntry_CLobbyMember)(nil),         // 60: dota.CMsgPracticeLobbyListResponseEntry.CLobbyMember
	(*CMsgQuickJoinCustomLobby_LegacyRegionPing)(nil),               // 61: dota.CMsgQuickJoinCustomLobby.LegacyRegionPing
	(*CMsgSpectatorLobbyGameDetails_Team)(nil),                      // 62: dota.CMsgSpectatorLobbyGameDetails.Team
	(*CMsgSpectatorLobbyListResponse_SpectatorLobby)(nil),           // 63: dota.CMsgSpectatorLobbyListResponse.SpectatorLobby
	(MatchType)(0),                   // 64: dota.MatchType
	(MatchLanguages)(0),              // 65: dota.MatchLanguages
	(*CMsgClientPingData)(nil),       // 66: dota.CMsgClientPingData
	(DOTALobbyReadyState)(0),         // 67: dota.DOTALobbyReadyState
	(*CDOTAClientHardwareSpecs)(nil), // 68: dota.CDOTAClientHardwareSpecs
	(*CLobbyTeamDetails)(nil),        // 69: dota.CLobbyTeamDetails
	(DOTA_CM_PICK)(0),                // 70: dota.DOTA_CM_PICK
	(DOTABotDifficulty)(0),           // 71: dota.DOTABotDifficulty
	(LobbyDotaTVDelay)(0),            // 72: dota.LobbyDotaTVDelay
	(DOTALobbyVisibility)(0),         // 73: dota.DOTALobbyVisibility
	(LobbyDotaPauseSetting)(0),       // 74: dota.LobbyDotaPauseSetting
	(DOTASelectionPriorityRules)(0),  // 75: dota.DOTASelectionPriorityRules
	(DOTA_GC_TEAM)(0),                // 76: dota.DOTA_GC_TEAM
	(DOTA_GameMode)(0),               // 77: dota.DOTA_GameMode
	(DOTAJoinLobbyResult)(0),         // 78: dota.DOTAJoinLobbyResult
	(EDOTAGroupMergeResult)(0),       // 79: dota.EDOTAGroupMergeResult
}
var file_dota_gcmessages_client_match_management_proto_depIdxs = []int32{
	64, // 0: dota.CMsgStartFindingMatch.match_type:type_name -> dota.MatchType
	65, // 1: dota.CMsgStartFindingMatch.game_language_enum:type_name -> dota.MatchLanguages
	66, // 2: dota.CMsgStartFindingMatch.ping_data:type_name -> dota.CMsgClientPingData
	0,  // 3: dota.CMsgStartFindingMatchResult.result:type_name -> dota.EStartFindingMatchResult
	64, // 4: dota.CMsgPartyBuilderOptions.match_type:type_name -> dota.MatchType
	65, // 5: dota.CMsgPartyBuilderOptions.language:type_name -> dota.MatchLanguages
	67, // 6: dota.CMsgReadyUp.state:type_name -> dota.DOTALobbyReadyState
	68, // 7: dota.CMsgReadyUp.hardware_specs:type_name -> dota.CDOTAClientHardwareSpecs
	67, // 8: dota.CMsgReadyUpStatus.local_ready_state:type_name -> dota.DOTALobbyReadyState
	69, // 9: dota.CMsgPracticeLobbySetDetails.team_details:type_name -> dota.CLobbyTeamDetails
	70, // 10: dota.CMsgPracticeLobbySetDetails.cm_pick:type_name -> dota.DOTA_CM_PICK
	71, // 11: dota.CMsgPracticeLobbySetDetails.bot_difficulty_radiant:type_name -> dota.DOTABotDifficulty
	72, // 12: dota.CMsgPracticeLobbySetDetails.dota_tv_delay:type_name -> dota.LobbyDotaTVDelay
	73, // 13: dota.CMsgPracticeLobbySetDetails.visibility:type_name -> dota.DOTALobbyVisibility
	74, // 14: dota.CMsgPracticeLobbySetDetails.pause_setting:type_name -> dota.LobbyDotaPauseSetting
	71, // 15: dota.CMsgPracticeLobbySetDetails.bot_difficulty_dire:type_name -> dota.DOTABotDifficulty
	75, // 16: dota.CMsgPracticeLobbySetDetails.selection_priority_rules:type_name -> dota.DOTASelectionPriorityRules
	8,  // 17: dota.CMsgPracticeLobbySetDetails.scenario_save:type_name -> dota.CMsgLobbyScenarioSave
	58, // 18: dota.CMsgPracticeLobbySetDetails.ability_draft_specific_details:type_name -> dota.CMsgPracticeLobbySetDetails.AbilityDraftSpecificDetails
	9,  // 19: dota.CMsgPracticeLobbyCreate.lobby_details:type_name -> dota.CMsgPracticeLobbySetDetails
	59, // 20: dota.CMsgPracticeLobbyCreate.save_game:type_name -> dota.CMsgPracticeLobbyCreate.SaveGame
	76, // 21: dota.CMsgPracticeLobbySetTeamSlot.team:type_name -> dota.DOTA_GC_TEAM
	71, // 22: dota.CMsgPracticeLobbySetTeamSlot.bot_difficulty:type_name -> dota.DOTABotDifficulty
	76, // 23: dota.CMsgPracticeLobbySetCoach.team:type_name -> dota.DOTA_GC_TEAM
	77, // 24: dota.CMsgPracticeLobbyList.game_mode:type_name -> dota.DOTA_GameMode
	60, // 25: dota.CMsgPracticeLobbyListResponseEntry.members:type_name -> dota.CMsgPracticeLobbyListResponseEntry.CLobbyMember
	77, // 26: dota.CMsgPracticeLobbyListResponseEntry.game_mode:type_name -> dota.DOTA_GameMode
	22, // 27: dota.CMsgPracticeLobbyListResponse.lobbies:type_name -> dota.CMsgPracticeLobbyListResponseEntry
	77, // 28: dota.CMsgLobbyList.game_mode:type_name -> dota.DOTA_GameMode
	22, // 29: dota.CMsgLobbyListResponse.lobbies:type_name -> dota.CMsgPracticeLobbyListResponseEntry
	78, // 30: dota.CMsgPracticeLobbyJoinResponse.result:type_name -> dota.DOTAJoinLobbyResult
	22, // 31: dota.CMsgFriendPracticeLobbyListResponse.lobbies:type_name -> dota.CMsgPracticeLobbyListResponseEntry
	31, // 32: dota.CMsgJoinableCustomGameModesResponse.game_modes:type_name -> dota.CMsgJoinableCustomGameModesResponseEntry
	34, // 33: dota.CMsgJoinableCustomLobbiesResponse.lobbies:type_name -> dota.CMsgJoinableCustomLobbiesResponseEntry
	9,  // 34: dota.CMsgQuickJoinCustomLobby.create_lobby_details:type_name -> dota.CMsgPracticeLobbySetDetails
	61, // 35: dota.CMsgQuickJoinCustomLobby.legacy_region_pings:type_name -> dota.CMsgQuickJoinCustomLobby.LegacyRegionPing
	66, // 36: dota.CMsgQuickJoinCustomLobby.ping_data:type_name -> dota.CMsgClientPingData
	78, // 37: dota.CMsgQuickJoinCustomLobbyResponse.result:type_name -> dota.DOTAJoinLobbyResult
	71, // 38: dota.CMsgBotGameCreate.difficulty_radiant:type_name -> dota.DOTABotDifficulty
	76, // 39: dota.CMsgBotGameCreate.team:type_name -> dota.DOTA_GC_TEAM
	71, // 40: dota.CMsgBotGameCreate.difficulty_dire:type_name -> dota.DOTABotDifficulty
	79, // 41: dota.CMsgDOTAGroupMergeReply.result:type_name -> dota.EDOTAGroupMergeResult
	62, // 42: dota.CMsgSpectatorLobbyGameDetails.radiant_team:type_name -> dota.CMsgSpectatorLobbyGameDetails.Team
	62, // 43: dota.CMsgSpectatorLobbyGameDetails.dire_team:type_name -> dota.CMsgSpectatorLobbyGameDetails.Team
	46, // 44: dota.CMsgSetSpectatorLobbyDetails.game_details:type_name -> dota.CMsgSpectatorLobbyGameDetails
	47, // 45: dota.CMsgCreateSpectatorLobby.details:type_name -> dota.CMsgSetSpectatorLobbyDetails
	63, // 46: dota.CMsgSpectatorLobbyListResponse.lobbies:type_name -> dota.CMsgSpectatorLobbyListResponse.SpectatorLobby
	46, // 47: dota.CMsgSpectatorLobbyListResponse.SpectatorLobby.game_details:type_name -> dota.CMsgSpectatorLobbyGameDetails
	48, // [48:48] is the sub-list for method output_type
	48, // [48:48] is the sub-list for method input_type
	48, // [48:48] is the sub-list for extension type_name
	48, // [48:48] is the sub-list for extension extendee
	0,  // [0:48] is the sub-list for field type_name
}

func init() { file_dota_gcmessages_client_match_management_proto_init() }
func file_dota_gcmessages_client_match_management_proto_init() {
	if File_dota_gcmessages_client_match_management_proto != nil {
		return
	}
	file_steammessages_proto_init()
	file_dota_shared_enums_proto_init()
	file_dota_client_enums_proto_init()
	file_base_gcmessages_proto_init()
	file_dota_gcmessages_common_lobby_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_dota_gcmessages_client_match_management_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgStartFindingMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_match_management_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgStartFindingMatchResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_match_management_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgStopFindingMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_match_management_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPartyBuilderOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_match_management_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgReadyUp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_match_management_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgReadyUpStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_match_management_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgAbandonCurrentGame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_match_management_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgLobbyScenarioSave); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_match_management_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPracticeLobbySetDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_match_management_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPracticeLobbyCreate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_match_management_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPracticeLobbySetTeamSlot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_match_management_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPracticeLobbySetCoach); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_match_management_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPracticeLobbyJoinBroadcastChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_match_management_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPracticeLobbyCloseBroadcastChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_match_management_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_match_management_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPracticeLobbyKick); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_match_management_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPracticeLobbyKickFromTeam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_match_management_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPracticeLobbyLeave); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_match_management_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPracticeLobbyLaunch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_match_management_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgApplyTeamToPracticeLobby); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_match_management_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPracticeLobbyList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_match_management_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPracticeLobbyListResponseEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_match_management_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPracticeLobbyListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_match_management_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgLobbyList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_match_management_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgLobbyListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_match_management_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPracticeLobbyJoin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_match_management_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPracticeLobbyJoinResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_match_management_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgFriendPracticeLobbyListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_match_management_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgFriendPracticeLobbyListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_match_management_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgJoinableCustomGameModesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_match_management_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgJoinableCustomGameModesResponseEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_match_management_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgJoinableCustomGameModesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_match_management_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgJoinableCustomLobbiesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_match_management_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgJoinableCustomLobbiesResponseEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_match_management_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgJoinableCustomLobbiesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_match_management_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgQuickJoinCustomLobby); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_match_management_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgQuickJoinCustomLobbyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_match_management_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgBotGameCreate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_match_management_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAPartyMemberSetCoach); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_match_management_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTASetGroupLeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_match_management_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTACancelGroupInvites); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_match_management_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTASetGroupOpenStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_match_management_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAGroupMergeInvite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_match_management_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAGroupMergeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_match_management_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAGroupMergeReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_match_management_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSpectatorLobbyGameDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_match_management_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSetSpectatorLobbyDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_match_management_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgCreateSpectatorLobby); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_match_management_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSpectatorLobbyList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_match_management_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSpectatorLobbyListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_match_management_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCRequestSteamDatagramTicket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_match_management_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCRequestSteamDatagramTicketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_match_management_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCToClientSteamDatagramTicket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_match_management_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCToClientRequestLaneSelection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_match_management_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCToClientRequestLaneSelectionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_match_management_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCToClientRequestMMInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_match_management_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCMMInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_match_management_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPracticeLobbySetDetails_AbilityDraftSpecificDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_match_management_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPracticeLobbyCreate_SaveGame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_match_management_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPracticeLobbyListResponseEntry_CLobbyMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_match_management_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgQuickJoinCustomLobby_LegacyRegionPing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_match_management_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSpectatorLobbyGameDetails_Team); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_client_match_management_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSpectatorLobbyListResponse_SpectatorLobby); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dota_gcmessages_client_match_management_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   63,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_dota_gcmessages_client_match_management_proto_goTypes,
		DependencyIndexes: file_dota_gcmessages_client_match_management_proto_depIdxs,
		EnumInfos:         file_dota_gcmessages_client_match_management_proto_enumTypes,
		MessageInfos:      file_dota_gcmessages_client_match_management_proto_msgTypes,
	}.Build()
	File_dota_gcmessages_client_match_management_proto = out.File
	file_dota_gcmessages_client_match_management_proto_rawDesc = nil
	file_dota_gcmessages_client_match_management_proto_goTypes = nil
	file_dota_gcmessages_client_match_management_proto_depIdxs = nil
}
