// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.5
// source: steamnetworkingsockets_messages_udp.proto

package dota

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ESteamNetworkingUDPMsgID int32

const (
	ESteamNetworkingUDPMsgID_k_ESteamNetworkingUDPMsg_ChallengeRequest ESteamNetworkingUDPMsgID = 32
	ESteamNetworkingUDPMsgID_k_ESteamNetworkingUDPMsg_ChallengeReply   ESteamNetworkingUDPMsgID = 33
	ESteamNetworkingUDPMsgID_k_ESteamNetworkingUDPMsg_ConnectRequest   ESteamNetworkingUDPMsgID = 34
	ESteamNetworkingUDPMsgID_k_ESteamNetworkingUDPMsg_ConnectOK        ESteamNetworkingUDPMsgID = 35
	ESteamNetworkingUDPMsgID_k_ESteamNetworkingUDPMsg_ConnectionClosed ESteamNetworkingUDPMsgID = 36
	ESteamNetworkingUDPMsgID_k_ESteamNetworkingUDPMsg_NoConnection     ESteamNetworkingUDPMsgID = 37
)

// Enum value maps for ESteamNetworkingUDPMsgID.
var (
	ESteamNetworkingUDPMsgID_name = map[int32]string{
		32: "k_ESteamNetworkingUDPMsg_ChallengeRequest",
		33: "k_ESteamNetworkingUDPMsg_ChallengeReply",
		34: "k_ESteamNetworkingUDPMsg_ConnectRequest",
		35: "k_ESteamNetworkingUDPMsg_ConnectOK",
		36: "k_ESteamNetworkingUDPMsg_ConnectionClosed",
		37: "k_ESteamNetworkingUDPMsg_NoConnection",
	}
	ESteamNetworkingUDPMsgID_value = map[string]int32{
		"k_ESteamNetworkingUDPMsg_ChallengeRequest": 32,
		"k_ESteamNetworkingUDPMsg_ChallengeReply":   33,
		"k_ESteamNetworkingUDPMsg_ConnectRequest":   34,
		"k_ESteamNetworkingUDPMsg_ConnectOK":        35,
		"k_ESteamNetworkingUDPMsg_ConnectionClosed": 36,
		"k_ESteamNetworkingUDPMsg_NoConnection":     37,
	}
)

func (x ESteamNetworkingUDPMsgID) Enum() *ESteamNetworkingUDPMsgID {
	p := new(ESteamNetworkingUDPMsgID)
	*p = x
	return p
}

func (x ESteamNetworkingUDPMsgID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESteamNetworkingUDPMsgID) Descriptor() protoreflect.EnumDescriptor {
	return file_steamnetworkingsockets_messages_udp_proto_enumTypes[0].Descriptor()
}

func (ESteamNetworkingUDPMsgID) Type() protoreflect.EnumType {
	return &file_steamnetworkingsockets_messages_udp_proto_enumTypes[0]
}

func (x ESteamNetworkingUDPMsgID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ESteamNetworkingUDPMsgID) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ESteamNetworkingUDPMsgID(num)
	return nil
}

// Deprecated: Use ESteamNetworkingUDPMsgID.Descriptor instead.
func (ESteamNetworkingUDPMsgID) EnumDescriptor() ([]byte, []int) {
	return file_steamnetworkingsockets_messages_udp_proto_rawDescGZIP(), []int{0}
}

type CMsgSteamSockets_UDP_Stats_Flags int32

const (
	CMsgSteamSockets_UDP_Stats_ACK_REQUEST_E2E           CMsgSteamSockets_UDP_Stats_Flags = 2
	CMsgSteamSockets_UDP_Stats_ACK_REQUEST_IMMEDIATE     CMsgSteamSockets_UDP_Stats_Flags = 4
	CMsgSteamSockets_UDP_Stats_NOT_PRIMARY_TRANSPORT_E2E CMsgSteamSockets_UDP_Stats_Flags = 16
)

// Enum value maps for CMsgSteamSockets_UDP_Stats_Flags.
var (
	CMsgSteamSockets_UDP_Stats_Flags_name = map[int32]string{
		2:  "ACK_REQUEST_E2E",
		4:  "ACK_REQUEST_IMMEDIATE",
		16: "NOT_PRIMARY_TRANSPORT_E2E",
	}
	CMsgSteamSockets_UDP_Stats_Flags_value = map[string]int32{
		"ACK_REQUEST_E2E":           2,
		"ACK_REQUEST_IMMEDIATE":     4,
		"NOT_PRIMARY_TRANSPORT_E2E": 16,
	}
)

func (x CMsgSteamSockets_UDP_Stats_Flags) Enum() *CMsgSteamSockets_UDP_Stats_Flags {
	p := new(CMsgSteamSockets_UDP_Stats_Flags)
	*p = x
	return p
}

func (x CMsgSteamSockets_UDP_Stats_Flags) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgSteamSockets_UDP_Stats_Flags) Descriptor() protoreflect.EnumDescriptor {
	return file_steamnetworkingsockets_messages_udp_proto_enumTypes[1].Descriptor()
}

func (CMsgSteamSockets_UDP_Stats_Flags) Type() protoreflect.EnumType {
	return &file_steamnetworkingsockets_messages_udp_proto_enumTypes[1]
}

func (x CMsgSteamSockets_UDP_Stats_Flags) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgSteamSockets_UDP_Stats_Flags) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgSteamSockets_UDP_Stats_Flags(num)
	return nil
}

// Deprecated: Use CMsgSteamSockets_UDP_Stats_Flags.Descriptor instead.
func (CMsgSteamSockets_UDP_Stats_Flags) EnumDescriptor() ([]byte, []int) {
	return file_steamnetworkingsockets_messages_udp_proto_rawDescGZIP(), []int{6, 0}
}

type CMsgSteamSockets_UDP_ChallengeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectionId    *uint32 `protobuf:"fixed32,1,opt,name=connection_id,json=connectionId" json:"connection_id,omitempty"`
	MyTimestamp     *uint64 `protobuf:"fixed64,3,opt,name=my_timestamp,json=myTimestamp" json:"my_timestamp,omitempty"`
	ProtocolVersion *uint32 `protobuf:"varint,4,opt,name=protocol_version,json=protocolVersion" json:"protocol_version,omitempty"`
}

func (x *CMsgSteamSockets_UDP_ChallengeRequest) Reset() {
	*x = CMsgSteamSockets_UDP_ChallengeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steamnetworkingsockets_messages_udp_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamSockets_UDP_ChallengeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamSockets_UDP_ChallengeRequest) ProtoMessage() {}

func (x *CMsgSteamSockets_UDP_ChallengeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_steamnetworkingsockets_messages_udp_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamSockets_UDP_ChallengeRequest.ProtoReflect.Descriptor instead.
func (*CMsgSteamSockets_UDP_ChallengeRequest) Descriptor() ([]byte, []int) {
	return file_steamnetworkingsockets_messages_udp_proto_rawDescGZIP(), []int{0}
}

func (x *CMsgSteamSockets_UDP_ChallengeRequest) GetConnectionId() uint32 {
	if x != nil && x.ConnectionId != nil {
		return *x.ConnectionId
	}
	return 0
}

func (x *CMsgSteamSockets_UDP_ChallengeRequest) GetMyTimestamp() uint64 {
	if x != nil && x.MyTimestamp != nil {
		return *x.MyTimestamp
	}
	return 0
}

func (x *CMsgSteamSockets_UDP_ChallengeRequest) GetProtocolVersion() uint32 {
	if x != nil && x.ProtocolVersion != nil {
		return *x.ProtocolVersion
	}
	return 0
}

type CMsgSteamSockets_UDP_ChallengeReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectionId    *uint32 `protobuf:"fixed32,1,opt,name=connection_id,json=connectionId" json:"connection_id,omitempty"`
	Challenge       *uint64 `protobuf:"fixed64,2,opt,name=challenge" json:"challenge,omitempty"`
	YourTimestamp   *uint64 `protobuf:"fixed64,3,opt,name=your_timestamp,json=yourTimestamp" json:"your_timestamp,omitempty"`
	ProtocolVersion *uint32 `protobuf:"varint,4,opt,name=protocol_version,json=protocolVersion" json:"protocol_version,omitempty"`
}

func (x *CMsgSteamSockets_UDP_ChallengeReply) Reset() {
	*x = CMsgSteamSockets_UDP_ChallengeReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steamnetworkingsockets_messages_udp_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamSockets_UDP_ChallengeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamSockets_UDP_ChallengeReply) ProtoMessage() {}

func (x *CMsgSteamSockets_UDP_ChallengeReply) ProtoReflect() protoreflect.Message {
	mi := &file_steamnetworkingsockets_messages_udp_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamSockets_UDP_ChallengeReply.ProtoReflect.Descriptor instead.
func (*CMsgSteamSockets_UDP_ChallengeReply) Descriptor() ([]byte, []int) {
	return file_steamnetworkingsockets_messages_udp_proto_rawDescGZIP(), []int{1}
}

func (x *CMsgSteamSockets_UDP_ChallengeReply) GetConnectionId() uint32 {
	if x != nil && x.ConnectionId != nil {
		return *x.ConnectionId
	}
	return 0
}

func (x *CMsgSteamSockets_UDP_ChallengeReply) GetChallenge() uint64 {
	if x != nil && x.Challenge != nil {
		return *x.Challenge
	}
	return 0
}

func (x *CMsgSteamSockets_UDP_ChallengeReply) GetYourTimestamp() uint64 {
	if x != nil && x.YourTimestamp != nil {
		return *x.YourTimestamp
	}
	return 0
}

func (x *CMsgSteamSockets_UDP_ChallengeReply) GetProtocolVersion() uint32 {
	if x != nil && x.ProtocolVersion != nil {
		return *x.ProtocolVersion
	}
	return 0
}

type CMsgSteamSockets_UDP_ConnectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientConnectionId    *uint32                                  `protobuf:"fixed32,1,opt,name=client_connection_id,json=clientConnectionId" json:"client_connection_id,omitempty"`
	Challenge             *uint64                                  `protobuf:"fixed64,2,opt,name=challenge" json:"challenge,omitempty"`
	MyTimestamp           *uint64                                  `protobuf:"fixed64,5,opt,name=my_timestamp,json=myTimestamp" json:"my_timestamp,omitempty"`
	PingEstMs             *uint32                                  `protobuf:"varint,6,opt,name=ping_est_ms,json=pingEstMs" json:"ping_est_ms,omitempty"`
	Crypt                 *CMsgSteamDatagramSessionCryptInfoSigned `protobuf:"bytes,7,opt,name=crypt" json:"crypt,omitempty"`
	Cert                  *CMsgSteamDatagramCertificateSigned      `protobuf:"bytes,4,opt,name=cert" json:"cert,omitempty"`
	LegacyProtocolVersion *uint32                                  `protobuf:"varint,8,opt,name=legacy_protocol_version,json=legacyProtocolVersion" json:"legacy_protocol_version,omitempty"`
	IdentityString        *string                                  `protobuf:"bytes,10,opt,name=identity_string,json=identityString" json:"identity_string,omitempty"`
	LegacyClientSteamId   *uint64                                  `protobuf:"fixed64,3,opt,name=legacy_client_steam_id,json=legacyClientSteamId" json:"legacy_client_steam_id,omitempty"`
	LegacyIdentityBinary  *CMsgSteamNetworkingIdentityLegacyBinary `protobuf:"bytes,9,opt,name=legacy_identity_binary,json=legacyIdentityBinary" json:"legacy_identity_binary,omitempty"`
}

func (x *CMsgSteamSockets_UDP_ConnectRequest) Reset() {
	*x = CMsgSteamSockets_UDP_ConnectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steamnetworkingsockets_messages_udp_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamSockets_UDP_ConnectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamSockets_UDP_ConnectRequest) ProtoMessage() {}

func (x *CMsgSteamSockets_UDP_ConnectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_steamnetworkingsockets_messages_udp_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamSockets_UDP_ConnectRequest.ProtoReflect.Descriptor instead.
func (*CMsgSteamSockets_UDP_ConnectRequest) Descriptor() ([]byte, []int) {
	return file_steamnetworkingsockets_messages_udp_proto_rawDescGZIP(), []int{2}
}

func (x *CMsgSteamSockets_UDP_ConnectRequest) GetClientConnectionId() uint32 {
	if x != nil && x.ClientConnectionId != nil {
		return *x.ClientConnectionId
	}
	return 0
}

func (x *CMsgSteamSockets_UDP_ConnectRequest) GetChallenge() uint64 {
	if x != nil && x.Challenge != nil {
		return *x.Challenge
	}
	return 0
}

func (x *CMsgSteamSockets_UDP_ConnectRequest) GetMyTimestamp() uint64 {
	if x != nil && x.MyTimestamp != nil {
		return *x.MyTimestamp
	}
	return 0
}

func (x *CMsgSteamSockets_UDP_ConnectRequest) GetPingEstMs() uint32 {
	if x != nil && x.PingEstMs != nil {
		return *x.PingEstMs
	}
	return 0
}

func (x *CMsgSteamSockets_UDP_ConnectRequest) GetCrypt() *CMsgSteamDatagramSessionCryptInfoSigned {
	if x != nil {
		return x.Crypt
	}
	return nil
}

func (x *CMsgSteamSockets_UDP_ConnectRequest) GetCert() *CMsgSteamDatagramCertificateSigned {
	if x != nil {
		return x.Cert
	}
	return nil
}

func (x *CMsgSteamSockets_UDP_ConnectRequest) GetLegacyProtocolVersion() uint32 {
	if x != nil && x.LegacyProtocolVersion != nil {
		return *x.LegacyProtocolVersion
	}
	return 0
}

func (x *CMsgSteamSockets_UDP_ConnectRequest) GetIdentityString() string {
	if x != nil && x.IdentityString != nil {
		return *x.IdentityString
	}
	return ""
}

func (x *CMsgSteamSockets_UDP_ConnectRequest) GetLegacyClientSteamId() uint64 {
	if x != nil && x.LegacyClientSteamId != nil {
		return *x.LegacyClientSteamId
	}
	return 0
}

func (x *CMsgSteamSockets_UDP_ConnectRequest) GetLegacyIdentityBinary() *CMsgSteamNetworkingIdentityLegacyBinary {
	if x != nil {
		return x.LegacyIdentityBinary
	}
	return nil
}

type CMsgSteamSockets_UDP_ConnectOK struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientConnectionId   *uint32                                  `protobuf:"fixed32,1,opt,name=client_connection_id,json=clientConnectionId" json:"client_connection_id,omitempty"`
	ServerConnectionId   *uint32                                  `protobuf:"fixed32,5,opt,name=server_connection_id,json=serverConnectionId" json:"server_connection_id,omitempty"`
	YourTimestamp        *uint64                                  `protobuf:"fixed64,3,opt,name=your_timestamp,json=yourTimestamp" json:"your_timestamp,omitempty"`
	DelayTimeUsec        *uint32                                  `protobuf:"varint,4,opt,name=delay_time_usec,json=delayTimeUsec" json:"delay_time_usec,omitempty"`
	Crypt                *CMsgSteamDatagramSessionCryptInfoSigned `protobuf:"bytes,7,opt,name=crypt" json:"crypt,omitempty"`
	Cert                 *CMsgSteamDatagramCertificateSigned      `protobuf:"bytes,8,opt,name=cert" json:"cert,omitempty"`
	IdentityString       *string                                  `protobuf:"bytes,11,opt,name=identity_string,json=identityString" json:"identity_string,omitempty"`
	LegacyServerSteamId  *uint64                                  `protobuf:"fixed64,2,opt,name=legacy_server_steam_id,json=legacyServerSteamId" json:"legacy_server_steam_id,omitempty"`
	LegacyIdentityBinary *CMsgSteamNetworkingIdentityLegacyBinary `protobuf:"bytes,10,opt,name=legacy_identity_binary,json=legacyIdentityBinary" json:"legacy_identity_binary,omitempty"`
}

func (x *CMsgSteamSockets_UDP_ConnectOK) Reset() {
	*x = CMsgSteamSockets_UDP_ConnectOK{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steamnetworkingsockets_messages_udp_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamSockets_UDP_ConnectOK) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamSockets_UDP_ConnectOK) ProtoMessage() {}

func (x *CMsgSteamSockets_UDP_ConnectOK) ProtoReflect() protoreflect.Message {
	mi := &file_steamnetworkingsockets_messages_udp_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamSockets_UDP_ConnectOK.ProtoReflect.Descriptor instead.
func (*CMsgSteamSockets_UDP_ConnectOK) Descriptor() ([]byte, []int) {
	return file_steamnetworkingsockets_messages_udp_proto_rawDescGZIP(), []int{3}
}

func (x *CMsgSteamSockets_UDP_ConnectOK) GetClientConnectionId() uint32 {
	if x != nil && x.ClientConnectionId != nil {
		return *x.ClientConnectionId
	}
	return 0
}

func (x *CMsgSteamSockets_UDP_ConnectOK) GetServerConnectionId() uint32 {
	if x != nil && x.ServerConnectionId != nil {
		return *x.ServerConnectionId
	}
	return 0
}

func (x *CMsgSteamSockets_UDP_ConnectOK) GetYourTimestamp() uint64 {
	if x != nil && x.YourTimestamp != nil {
		return *x.YourTimestamp
	}
	return 0
}

func (x *CMsgSteamSockets_UDP_ConnectOK) GetDelayTimeUsec() uint32 {
	if x != nil && x.DelayTimeUsec != nil {
		return *x.DelayTimeUsec
	}
	return 0
}

func (x *CMsgSteamSockets_UDP_ConnectOK) GetCrypt() *CMsgSteamDatagramSessionCryptInfoSigned {
	if x != nil {
		return x.Crypt
	}
	return nil
}

func (x *CMsgSteamSockets_UDP_ConnectOK) GetCert() *CMsgSteamDatagramCertificateSigned {
	if x != nil {
		return x.Cert
	}
	return nil
}

func (x *CMsgSteamSockets_UDP_ConnectOK) GetIdentityString() string {
	if x != nil && x.IdentityString != nil {
		return *x.IdentityString
	}
	return ""
}

func (x *CMsgSteamSockets_UDP_ConnectOK) GetLegacyServerSteamId() uint64 {
	if x != nil && x.LegacyServerSteamId != nil {
		return *x.LegacyServerSteamId
	}
	return 0
}

func (x *CMsgSteamSockets_UDP_ConnectOK) GetLegacyIdentityBinary() *CMsgSteamNetworkingIdentityLegacyBinary {
	if x != nil {
		return x.LegacyIdentityBinary
	}
	return nil
}

type CMsgSteamSockets_UDP_ConnectionClosed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ToConnectionId   *uint32 `protobuf:"fixed32,4,opt,name=to_connection_id,json=toConnectionId" json:"to_connection_id,omitempty"`
	FromConnectionId *uint32 `protobuf:"fixed32,5,opt,name=from_connection_id,json=fromConnectionId" json:"from_connection_id,omitempty"`
	Debug            *string `protobuf:"bytes,2,opt,name=debug" json:"debug,omitempty"`
	ReasonCode       *uint32 `protobuf:"varint,3,opt,name=reason_code,json=reasonCode" json:"reason_code,omitempty"`
}

func (x *CMsgSteamSockets_UDP_ConnectionClosed) Reset() {
	*x = CMsgSteamSockets_UDP_ConnectionClosed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steamnetworkingsockets_messages_udp_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamSockets_UDP_ConnectionClosed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamSockets_UDP_ConnectionClosed) ProtoMessage() {}

func (x *CMsgSteamSockets_UDP_ConnectionClosed) ProtoReflect() protoreflect.Message {
	mi := &file_steamnetworkingsockets_messages_udp_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamSockets_UDP_ConnectionClosed.ProtoReflect.Descriptor instead.
func (*CMsgSteamSockets_UDP_ConnectionClosed) Descriptor() ([]byte, []int) {
	return file_steamnetworkingsockets_messages_udp_proto_rawDescGZIP(), []int{4}
}

func (x *CMsgSteamSockets_UDP_ConnectionClosed) GetToConnectionId() uint32 {
	if x != nil && x.ToConnectionId != nil {
		return *x.ToConnectionId
	}
	return 0
}

func (x *CMsgSteamSockets_UDP_ConnectionClosed) GetFromConnectionId() uint32 {
	if x != nil && x.FromConnectionId != nil {
		return *x.FromConnectionId
	}
	return 0
}

func (x *CMsgSteamSockets_UDP_ConnectionClosed) GetDebug() string {
	if x != nil && x.Debug != nil {
		return *x.Debug
	}
	return ""
}

func (x *CMsgSteamSockets_UDP_ConnectionClosed) GetReasonCode() uint32 {
	if x != nil && x.ReasonCode != nil {
		return *x.ReasonCode
	}
	return 0
}

type CMsgSteamSockets_UDP_NoConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromConnectionId *uint32 `protobuf:"fixed32,2,opt,name=from_connection_id,json=fromConnectionId" json:"from_connection_id,omitempty"`
	ToConnectionId   *uint32 `protobuf:"fixed32,3,opt,name=to_connection_id,json=toConnectionId" json:"to_connection_id,omitempty"`
}

func (x *CMsgSteamSockets_UDP_NoConnection) Reset() {
	*x = CMsgSteamSockets_UDP_NoConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steamnetworkingsockets_messages_udp_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamSockets_UDP_NoConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamSockets_UDP_NoConnection) ProtoMessage() {}

func (x *CMsgSteamSockets_UDP_NoConnection) ProtoReflect() protoreflect.Message {
	mi := &file_steamnetworkingsockets_messages_udp_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamSockets_UDP_NoConnection.ProtoReflect.Descriptor instead.
func (*CMsgSteamSockets_UDP_NoConnection) Descriptor() ([]byte, []int) {
	return file_steamnetworkingsockets_messages_udp_proto_rawDescGZIP(), []int{5}
}

func (x *CMsgSteamSockets_UDP_NoConnection) GetFromConnectionId() uint32 {
	if x != nil && x.FromConnectionId != nil {
		return *x.FromConnectionId
	}
	return 0
}

func (x *CMsgSteamSockets_UDP_NoConnection) GetToConnectionId() uint32 {
	if x != nil && x.ToConnectionId != nil {
		return *x.ToConnectionId
	}
	return 0
}

type CMsgSteamSockets_UDP_Stats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stats *CMsgSteamDatagramConnectionQuality `protobuf:"bytes,1,opt,name=stats" json:"stats,omitempty"`
	Flags *uint32                             `protobuf:"varint,3,opt,name=flags" json:"flags,omitempty"`
}

func (x *CMsgSteamSockets_UDP_Stats) Reset() {
	*x = CMsgSteamSockets_UDP_Stats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steamnetworkingsockets_messages_udp_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamSockets_UDP_Stats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamSockets_UDP_Stats) ProtoMessage() {}

func (x *CMsgSteamSockets_UDP_Stats) ProtoReflect() protoreflect.Message {
	mi := &file_steamnetworkingsockets_messages_udp_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamSockets_UDP_Stats.ProtoReflect.Descriptor instead.
func (*CMsgSteamSockets_UDP_Stats) Descriptor() ([]byte, []int) {
	return file_steamnetworkingsockets_messages_udp_proto_rawDescGZIP(), []int{6}
}

func (x *CMsgSteamSockets_UDP_Stats) GetStats() *CMsgSteamDatagramConnectionQuality {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *CMsgSteamSockets_UDP_Stats) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

var File_steamnetworkingsockets_messages_udp_proto protoreflect.FileDescriptor

var file_steamnetworkingsockets_messages_udp_proto_rawDesc = []byte{
	0x0a, 0x29, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x75, 0x64, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x64, 0x6f, 0x74,
	0x61, 0x1a, 0x2b, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69,
	0x6e, 0x67, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x73,
	0x6f, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9a, 0x01, 0x0a, 0x25, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x55, 0x44, 0x50, 0x5f, 0x43,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0b, 0x6d, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0xba, 0x01, 0x0a, 0x23, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x55, 0x44, 0x50, 0x5f, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x07, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x79, 0x6f, 0x75, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0d, 0x79, 0x6f, 0x75, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0xb6, 0x04, 0x0a, 0x23, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x53, 0x6f, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x5f, 0x55, 0x44, 0x50, 0x5f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x12, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x09, 0x63, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x79, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0b, 0x6d,
	0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1e, 0x0a, 0x0b, 0x70, 0x69,
	0x6e, 0x67, 0x5f, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x70, 0x69, 0x6e, 0x67, 0x45, 0x73, 0x74, 0x4d, 0x73, 0x12, 0x43, 0x0a, 0x05, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x64, 0x6f, 0x74, 0x61,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72,
	0x61, 0x6d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x52, 0x05, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12,
	0x3c, 0x0a, 0x04, 0x63, 0x65, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61,
	0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x52, 0x04, 0x63, 0x65, 0x72, 0x74, 0x12, 0x36, 0x0a,
	0x17, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15,
	0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x33,
	0x0a, 0x16, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x13,
	0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x49, 0x64, 0x12, 0x63, 0x0a, 0x16, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x42, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x52, 0x14, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x22, 0x99, 0x04, 0x0a, 0x1e, 0x43, 0x4d, 0x73,
	0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x55, 0x44,
	0x50, 0x5f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4f, 0x4b, 0x12, 0x30, 0x0a, 0x14, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x12, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x30, 0x0a,
	0x14, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x07, 0x52, 0x12, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x25, 0x0a, 0x0e, 0x79, 0x6f, 0x75, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0d, 0x79, 0x6f, 0x75, 0x72, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x26, 0x0a, 0x0f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x63, 0x12, 0x43,
	0x0a, 0x05, 0x63, 0x72, 0x79, 0x70, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61,
	0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x79,
	0x70, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x52, 0x05, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x12, 0x3c, 0x0a, 0x04, 0x63, 0x65, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x52, 0x04, 0x63, 0x65, 0x72,
	0x74, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x33, 0x0a, 0x16, 0x6c, 0x65,
	0x67, 0x61, 0x63, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x13, 0x6c, 0x65, 0x67, 0x61,
	0x63, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12,
	0x63, 0x0a, 0x16, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x14,
	0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x69,
	0x6e, 0x61, 0x72, 0x79, 0x22, 0xb6, 0x01, 0x0a, 0x25, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x55, 0x44, 0x50, 0x5f, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x28,
	0x0a, 0x10, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0e, 0x74, 0x6f, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x72, 0x6f, 0x6d,
	0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x07, 0x52, 0x10, 0x66, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x12, 0x1f, 0x0a, 0x0b,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x7b, 0x0a,
	0x21, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x5f, 0x55, 0x44, 0x50, 0x5f, 0x4e, 0x6f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x10,
	0x66, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0e, 0x74, 0x6f, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xca, 0x01, 0x0a, 0x1a, 0x43,
	0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f,
	0x55, 0x44, 0x50, 0x5f, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61,
	0x6d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x22,
	0x56, 0x0a, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x43, 0x4b, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x45, 0x32, 0x45, 0x10, 0x02, 0x12, 0x19, 0x0a,
	0x15, 0x41, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x49, 0x4d, 0x4d,
	0x45, 0x44, 0x49, 0x41, 0x54, 0x45, 0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19, 0x4e, 0x4f, 0x54, 0x5f,
	0x50, 0x52, 0x49, 0x4d, 0x41, 0x52, 0x59, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x45, 0x32, 0x45, 0x10, 0x10, 0x2a, 0xa5, 0x02, 0x0a, 0x18, 0x45, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x44, 0x50, 0x4d,
	0x73, 0x67, 0x49, 0x44, 0x12, 0x2d, 0x0a, 0x29, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x44, 0x50, 0x4d, 0x73, 0x67,
	0x5f, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x10, 0x20, 0x12, 0x2b, 0x0a, 0x27, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x44, 0x50, 0x4d, 0x73, 0x67, 0x5f,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x10, 0x21,
	0x12, 0x2b, 0x0a, 0x27, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x44, 0x50, 0x4d, 0x73, 0x67, 0x5f, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x22, 0x12, 0x26, 0x0a,
	0x22, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x55, 0x44, 0x50, 0x4d, 0x73, 0x67, 0x5f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x4f, 0x4b, 0x10, 0x23, 0x12, 0x2d, 0x0a, 0x29, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x44, 0x50, 0x4d, 0x73,
	0x67, 0x5f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x64, 0x10, 0x24, 0x12, 0x29, 0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x44, 0x50, 0x4d, 0x73, 0x67,
	0x5f, 0x4e, 0x6f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x25, 0x42,
	0x2a, 0x48, 0x01, 0x5a, 0x23, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x64, 0x6f, 0x74, 0x61, 0x62, 0x75, 0x66, 0x66, 0x2f, 0x6d, 0x61, 0x6e, 0x74, 0x61, 0x2f, 0x64,
	0x6f, 0x74, 0x61, 0x3b, 0x64, 0x6f, 0x74, 0x61, 0x80, 0x01, 0x00,
}

var (
	file_steamnetworkingsockets_messages_udp_proto_rawDescOnce sync.Once
	file_steamnetworkingsockets_messages_udp_proto_rawDescData = file_steamnetworkingsockets_messages_udp_proto_rawDesc
)

func file_steamnetworkingsockets_messages_udp_proto_rawDescGZIP() []byte {
	file_steamnetworkingsockets_messages_udp_proto_rawDescOnce.Do(func() {
		file_steamnetworkingsockets_messages_udp_proto_rawDescData = protoimpl.X.CompressGZIP(file_steamnetworkingsockets_messages_udp_proto_rawDescData)
	})
	return file_steamnetworkingsockets_messages_udp_proto_rawDescData
}

var file_steamnetworkingsockets_messages_udp_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_steamnetworkingsockets_messages_udp_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_steamnetworkingsockets_messages_udp_proto_goTypes = []interface{}{
	(ESteamNetworkingUDPMsgID)(0),                   // 0: dota.ESteamNetworkingUDPMsgID
	(CMsgSteamSockets_UDP_Stats_Flags)(0),           // 1: dota.CMsgSteamSockets_UDP_Stats.Flags
	(*CMsgSteamSockets_UDP_ChallengeRequest)(nil),   // 2: dota.CMsgSteamSockets_UDP_ChallengeRequest
	(*CMsgSteamSockets_UDP_ChallengeReply)(nil),     // 3: dota.CMsgSteamSockets_UDP_ChallengeReply
	(*CMsgSteamSockets_UDP_ConnectRequest)(nil),     // 4: dota.CMsgSteamSockets_UDP_ConnectRequest
	(*CMsgSteamSockets_UDP_ConnectOK)(nil),          // 5: dota.CMsgSteamSockets_UDP_ConnectOK
	(*CMsgSteamSockets_UDP_ConnectionClosed)(nil),   // 6: dota.CMsgSteamSockets_UDP_ConnectionClosed
	(*CMsgSteamSockets_UDP_NoConnection)(nil),       // 7: dota.CMsgSteamSockets_UDP_NoConnection
	(*CMsgSteamSockets_UDP_Stats)(nil),              // 8: dota.CMsgSteamSockets_UDP_Stats
	(*CMsgSteamDatagramSessionCryptInfoSigned)(nil), // 9: dota.CMsgSteamDatagramSessionCryptInfoSigned
	(*CMsgSteamDatagramCertificateSigned)(nil),      // 10: dota.CMsgSteamDatagramCertificateSigned
	(*CMsgSteamNetworkingIdentityLegacyBinary)(nil), // 11: dota.CMsgSteamNetworkingIdentityLegacyBinary
	(*CMsgSteamDatagramConnectionQuality)(nil),      // 12: dota.CMsgSteamDatagramConnectionQuality
}
var file_steamnetworkingsockets_messages_udp_proto_depIdxs = []int32{
	9,  // 0: dota.CMsgSteamSockets_UDP_ConnectRequest.crypt:type_name -> dota.CMsgSteamDatagramSessionCryptInfoSigned
	10, // 1: dota.CMsgSteamSockets_UDP_ConnectRequest.cert:type_name -> dota.CMsgSteamDatagramCertificateSigned
	11, // 2: dota.CMsgSteamSockets_UDP_ConnectRequest.legacy_identity_binary:type_name -> dota.CMsgSteamNetworkingIdentityLegacyBinary
	9,  // 3: dota.CMsgSteamSockets_UDP_ConnectOK.crypt:type_name -> dota.CMsgSteamDatagramSessionCryptInfoSigned
	10, // 4: dota.CMsgSteamSockets_UDP_ConnectOK.cert:type_name -> dota.CMsgSteamDatagramCertificateSigned
	11, // 5: dota.CMsgSteamSockets_UDP_ConnectOK.legacy_identity_binary:type_name -> dota.CMsgSteamNetworkingIdentityLegacyBinary
	12, // 6: dota.CMsgSteamSockets_UDP_Stats.stats:type_name -> dota.CMsgSteamDatagramConnectionQuality
	7,  // [7:7] is the sub-list for method output_type
	7,  // [7:7] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_steamnetworkingsockets_messages_udp_proto_init() }
func file_steamnetworkingsockets_messages_udp_proto_init() {
	if File_steamnetworkingsockets_messages_udp_proto != nil {
		return
	}
	file_steamnetworkingsockets_messages_certs_proto_init()
	file_steamnetworkingsockets_messages_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_steamnetworkingsockets_messages_udp_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSteamSockets_UDP_ChallengeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steamnetworkingsockets_messages_udp_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSteamSockets_UDP_ChallengeReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steamnetworkingsockets_messages_udp_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSteamSockets_UDP_ConnectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steamnetworkingsockets_messages_udp_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSteamSockets_UDP_ConnectOK); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steamnetworkingsockets_messages_udp_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSteamSockets_UDP_ConnectionClosed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steamnetworkingsockets_messages_udp_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSteamSockets_UDP_NoConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steamnetworkingsockets_messages_udp_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSteamSockets_UDP_Stats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_steamnetworkingsockets_messages_udp_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_steamnetworkingsockets_messages_udp_proto_goTypes,
		DependencyIndexes: file_steamnetworkingsockets_messages_udp_proto_depIdxs,
		EnumInfos:         file_steamnetworkingsockets_messages_udp_proto_enumTypes,
		MessageInfos:      file_steamnetworkingsockets_messages_udp_proto_msgTypes,
	}.Build()
	File_steamnetworkingsockets_messages_udp_proto = out.File
	file_steamnetworkingsockets_messages_udp_proto_rawDesc = nil
	file_steamnetworkingsockets_messages_udp_proto_goTypes = nil
	file_steamnetworkingsockets_messages_udp_proto_depIdxs = nil
}
