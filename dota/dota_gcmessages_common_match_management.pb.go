// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.6.1
// source: dota_gcmessages_common_match_management.proto

package dota

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ELaneSelection int32

const (
	ELaneSelection_k_ELaneSelection_SAFELANE     ELaneSelection = 0
	ELaneSelection_k_ELaneSelection_OFFLANE      ELaneSelection = 1
	ELaneSelection_k_ELaneSelection_MIDLANE      ELaneSelection = 2
	ELaneSelection_k_ELaneSelection_SUPPORT_SOFT ELaneSelection = 3
	ELaneSelection_k_ELaneSelection_SUPPORT_HARD ELaneSelection = 4
)

// Enum value maps for ELaneSelection.
var (
	ELaneSelection_name = map[int32]string{
		0: "k_ELaneSelection_SAFELANE",
		1: "k_ELaneSelection_OFFLANE",
		2: "k_ELaneSelection_MIDLANE",
		3: "k_ELaneSelection_SUPPORT_SOFT",
		4: "k_ELaneSelection_SUPPORT_HARD",
	}
	ELaneSelection_value = map[string]int32{
		"k_ELaneSelection_SAFELANE":     0,
		"k_ELaneSelection_OFFLANE":      1,
		"k_ELaneSelection_MIDLANE":      2,
		"k_ELaneSelection_SUPPORT_SOFT": 3,
		"k_ELaneSelection_SUPPORT_HARD": 4,
	}
)

func (x ELaneSelection) Enum() *ELaneSelection {
	p := new(ELaneSelection)
	*p = x
	return p
}

func (x ELaneSelection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ELaneSelection) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_common_match_management_proto_enumTypes[0].Descriptor()
}

func (ELaneSelection) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_common_match_management_proto_enumTypes[0]
}

func (x ELaneSelection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ELaneSelection) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ELaneSelection(num)
	return nil
}

// Deprecated: Use ELaneSelection.Descriptor instead.
func (ELaneSelection) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_match_management_proto_rawDescGZIP(), []int{0}
}

type ELaneSelectionFlags int32

const (
	ELaneSelectionFlags_k_ELaneSelectionFlags_None         ELaneSelectionFlags = 0
	ELaneSelectionFlags_k_ELaneSelectionFlags_SAFELANE     ELaneSelectionFlags = 1
	ELaneSelectionFlags_k_ELaneSelectionFlags_OFFLANE      ELaneSelectionFlags = 2
	ELaneSelectionFlags_k_ELaneSelectionFlags_MIDLANE      ELaneSelectionFlags = 4
	ELaneSelectionFlags_k_ELaneSelectionFlags_CORE         ELaneSelectionFlags = 7
	ELaneSelectionFlags_k_ELaneSelectionFlags_SUPPORT_SOFT ELaneSelectionFlags = 8
	ELaneSelectionFlags_k_ELaneSelectionFlags_SUPPORT_HARD ELaneSelectionFlags = 16
	ELaneSelectionFlags_k_ELaneSelectionFlags_SUPPORT      ELaneSelectionFlags = 24
	ELaneSelectionFlags_k_ELaneSelectionFlags_ALL          ELaneSelectionFlags = 31
)

// Enum value maps for ELaneSelectionFlags.
var (
	ELaneSelectionFlags_name = map[int32]string{
		0:  "k_ELaneSelectionFlags_None",
		1:  "k_ELaneSelectionFlags_SAFELANE",
		2:  "k_ELaneSelectionFlags_OFFLANE",
		4:  "k_ELaneSelectionFlags_MIDLANE",
		7:  "k_ELaneSelectionFlags_CORE",
		8:  "k_ELaneSelectionFlags_SUPPORT_SOFT",
		16: "k_ELaneSelectionFlags_SUPPORT_HARD",
		24: "k_ELaneSelectionFlags_SUPPORT",
		31: "k_ELaneSelectionFlags_ALL",
	}
	ELaneSelectionFlags_value = map[string]int32{
		"k_ELaneSelectionFlags_None":         0,
		"k_ELaneSelectionFlags_SAFELANE":     1,
		"k_ELaneSelectionFlags_OFFLANE":      2,
		"k_ELaneSelectionFlags_MIDLANE":      4,
		"k_ELaneSelectionFlags_CORE":         7,
		"k_ELaneSelectionFlags_SUPPORT_SOFT": 8,
		"k_ELaneSelectionFlags_SUPPORT_HARD": 16,
		"k_ELaneSelectionFlags_SUPPORT":      24,
		"k_ELaneSelectionFlags_ALL":          31,
	}
)

func (x ELaneSelectionFlags) Enum() *ELaneSelectionFlags {
	p := new(ELaneSelectionFlags)
	*p = x
	return p
}

func (x ELaneSelectionFlags) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ELaneSelectionFlags) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_common_match_management_proto_enumTypes[1].Descriptor()
}

func (ELaneSelectionFlags) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_common_match_management_proto_enumTypes[1]
}

func (x ELaneSelectionFlags) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ELaneSelectionFlags) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ELaneSelectionFlags(num)
	return nil
}

// Deprecated: Use ELaneSelectionFlags.Descriptor instead.
func (ELaneSelectionFlags) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_match_management_proto_rawDescGZIP(), []int{1}
}

type EPartyMatchmakingFlags int32

const (
	EPartyMatchmakingFlags_k_EPartyMatchmakingFlags_None            EPartyMatchmakingFlags = 0
	EPartyMatchmakingFlags_k_EPartyMatchmakingFlags_LargeRankSpread EPartyMatchmakingFlags = 1
)

// Enum value maps for EPartyMatchmakingFlags.
var (
	EPartyMatchmakingFlags_name = map[int32]string{
		0: "k_EPartyMatchmakingFlags_None",
		1: "k_EPartyMatchmakingFlags_LargeRankSpread",
	}
	EPartyMatchmakingFlags_value = map[string]int32{
		"k_EPartyMatchmakingFlags_None":            0,
		"k_EPartyMatchmakingFlags_LargeRankSpread": 1,
	}
)

func (x EPartyMatchmakingFlags) Enum() *EPartyMatchmakingFlags {
	p := new(EPartyMatchmakingFlags)
	*p = x
	return p
}

func (x EPartyMatchmakingFlags) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPartyMatchmakingFlags) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_common_match_management_proto_enumTypes[2].Descriptor()
}

func (EPartyMatchmakingFlags) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_common_match_management_proto_enumTypes[2]
}

func (x EPartyMatchmakingFlags) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EPartyMatchmakingFlags) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EPartyMatchmakingFlags(num)
	return nil
}

// Deprecated: Use EPartyMatchmakingFlags.Descriptor instead.
func (EPartyMatchmakingFlags) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_match_management_proto_rawDescGZIP(), []int{2}
}

type EHighPriorityMMState int32

const (
	EHighPriorityMMState_k_EHighPriorityMM_Unknown          EHighPriorityMMState = 0
	EHighPriorityMMState_k_EHighPriorityMM_MissingMMData    EHighPriorityMMState = 1
	EHighPriorityMMState_k_EHighPriorityMM_ResourceMissing  EHighPriorityMMState = 2
	EHighPriorityMMState_k_EHighPriorityMM_ManuallyDisabled EHighPriorityMMState = 3
	EHighPriorityMMState_k_EHighPriorityMM_Min_Enabled      EHighPriorityMMState = 64
	EHighPriorityMMState_k_EHighPriorityMM_AllRolesSelected EHighPriorityMMState = 65
	EHighPriorityMMState_k_EHighPriorityMM_UsingResource    EHighPriorityMMState = 66
	EHighPriorityMMState_k_EHighPriorityMM_FiveStack        EHighPriorityMMState = 67
	EHighPriorityMMState_k_EHighPriorityMM_HighDemand       EHighPriorityMMState = 68
)

// Enum value maps for EHighPriorityMMState.
var (
	EHighPriorityMMState_name = map[int32]string{
		0:  "k_EHighPriorityMM_Unknown",
		1:  "k_EHighPriorityMM_MissingMMData",
		2:  "k_EHighPriorityMM_ResourceMissing",
		3:  "k_EHighPriorityMM_ManuallyDisabled",
		64: "k_EHighPriorityMM_Min_Enabled",
		65: "k_EHighPriorityMM_AllRolesSelected",
		66: "k_EHighPriorityMM_UsingResource",
		67: "k_EHighPriorityMM_FiveStack",
		68: "k_EHighPriorityMM_HighDemand",
	}
	EHighPriorityMMState_value = map[string]int32{
		"k_EHighPriorityMM_Unknown":          0,
		"k_EHighPriorityMM_MissingMMData":    1,
		"k_EHighPriorityMM_ResourceMissing":  2,
		"k_EHighPriorityMM_ManuallyDisabled": 3,
		"k_EHighPriorityMM_Min_Enabled":      64,
		"k_EHighPriorityMM_AllRolesSelected": 65,
		"k_EHighPriorityMM_UsingResource":    66,
		"k_EHighPriorityMM_FiveStack":        67,
		"k_EHighPriorityMM_HighDemand":       68,
	}
)

func (x EHighPriorityMMState) Enum() *EHighPriorityMMState {
	p := new(EHighPriorityMMState)
	*p = x
	return p
}

func (x EHighPriorityMMState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EHighPriorityMMState) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_common_match_management_proto_enumTypes[3].Descriptor()
}

func (EHighPriorityMMState) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_common_match_management_proto_enumTypes[3]
}

func (x EHighPriorityMMState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EHighPriorityMMState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EHighPriorityMMState(num)
	return nil
}

// Deprecated: Use EHighPriorityMMState.Descriptor instead.
func (EHighPriorityMMState) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_match_management_proto_rawDescGZIP(), []int{3}
}

type LobbyDotaTVDelay int32

const (
	LobbyDotaTVDelay_LobbyDotaTV_10  LobbyDotaTVDelay = 0
	LobbyDotaTVDelay_LobbyDotaTV_120 LobbyDotaTVDelay = 1
	LobbyDotaTVDelay_LobbyDotaTV_300 LobbyDotaTVDelay = 2
)

// Enum value maps for LobbyDotaTVDelay.
var (
	LobbyDotaTVDelay_name = map[int32]string{
		0: "LobbyDotaTV_10",
		1: "LobbyDotaTV_120",
		2: "LobbyDotaTV_300",
	}
	LobbyDotaTVDelay_value = map[string]int32{
		"LobbyDotaTV_10":  0,
		"LobbyDotaTV_120": 1,
		"LobbyDotaTV_300": 2,
	}
)

func (x LobbyDotaTVDelay) Enum() *LobbyDotaTVDelay {
	p := new(LobbyDotaTVDelay)
	*p = x
	return p
}

func (x LobbyDotaTVDelay) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LobbyDotaTVDelay) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_common_match_management_proto_enumTypes[4].Descriptor()
}

func (LobbyDotaTVDelay) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_common_match_management_proto_enumTypes[4]
}

func (x LobbyDotaTVDelay) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *LobbyDotaTVDelay) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = LobbyDotaTVDelay(num)
	return nil
}

// Deprecated: Use LobbyDotaTVDelay.Descriptor instead.
func (LobbyDotaTVDelay) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_match_management_proto_rawDescGZIP(), []int{4}
}

type LobbyDotaPauseSetting int32

const (
	LobbyDotaPauseSetting_LobbyDotaPauseSetting_Unlimited LobbyDotaPauseSetting = 0
	LobbyDotaPauseSetting_LobbyDotaPauseSetting_Limited   LobbyDotaPauseSetting = 1
	LobbyDotaPauseSetting_LobbyDotaPauseSetting_Disabled  LobbyDotaPauseSetting = 2
)

// Enum value maps for LobbyDotaPauseSetting.
var (
	LobbyDotaPauseSetting_name = map[int32]string{
		0: "LobbyDotaPauseSetting_Unlimited",
		1: "LobbyDotaPauseSetting_Limited",
		2: "LobbyDotaPauseSetting_Disabled",
	}
	LobbyDotaPauseSetting_value = map[string]int32{
		"LobbyDotaPauseSetting_Unlimited": 0,
		"LobbyDotaPauseSetting_Limited":   1,
		"LobbyDotaPauseSetting_Disabled":  2,
	}
)

func (x LobbyDotaPauseSetting) Enum() *LobbyDotaPauseSetting {
	p := new(LobbyDotaPauseSetting)
	*p = x
	return p
}

func (x LobbyDotaPauseSetting) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LobbyDotaPauseSetting) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_common_match_management_proto_enumTypes[5].Descriptor()
}

func (LobbyDotaPauseSetting) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_common_match_management_proto_enumTypes[5]
}

func (x LobbyDotaPauseSetting) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *LobbyDotaPauseSetting) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = LobbyDotaPauseSetting(num)
	return nil
}

// Deprecated: Use LobbyDotaPauseSetting.Descriptor instead.
func (LobbyDotaPauseSetting) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_match_management_proto_rawDescGZIP(), []int{5}
}

type EReadyCheckStatus int32

const (
	EReadyCheckStatus_k_EReadyCheckStatus_Unknown  EReadyCheckStatus = 0
	EReadyCheckStatus_k_EReadyCheckStatus_NotReady EReadyCheckStatus = 1
	EReadyCheckStatus_k_EReadyCheckStatus_Ready    EReadyCheckStatus = 2
)

// Enum value maps for EReadyCheckStatus.
var (
	EReadyCheckStatus_name = map[int32]string{
		0: "k_EReadyCheckStatus_Unknown",
		1: "k_EReadyCheckStatus_NotReady",
		2: "k_EReadyCheckStatus_Ready",
	}
	EReadyCheckStatus_value = map[string]int32{
		"k_EReadyCheckStatus_Unknown":  0,
		"k_EReadyCheckStatus_NotReady": 1,
		"k_EReadyCheckStatus_Ready":    2,
	}
)

func (x EReadyCheckStatus) Enum() *EReadyCheckStatus {
	p := new(EReadyCheckStatus)
	*p = x
	return p
}

func (x EReadyCheckStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EReadyCheckStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_common_match_management_proto_enumTypes[6].Descriptor()
}

func (EReadyCheckStatus) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_common_match_management_proto_enumTypes[6]
}

func (x EReadyCheckStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EReadyCheckStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EReadyCheckStatus(num)
	return nil
}

// Deprecated: Use EReadyCheckStatus.Descriptor instead.
func (EReadyCheckStatus) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_match_management_proto_rawDescGZIP(), []int{6}
}

type EReadyCheckRequestResult int32

const (
	EReadyCheckRequestResult_k_EReadyCheckRequestResult_Success           EReadyCheckRequestResult = 0
	EReadyCheckRequestResult_k_EReadyCheckRequestResult_AlreadyInProgress EReadyCheckRequestResult = 1
	EReadyCheckRequestResult_k_EReadyCheckRequestResult_NotInParty        EReadyCheckRequestResult = 2
	EReadyCheckRequestResult_k_EReadyCheckRequestResult_SendError         EReadyCheckRequestResult = 3
	EReadyCheckRequestResult_k_EReadyCheckRequestResult_UnknownError      EReadyCheckRequestResult = 4
)

// Enum value maps for EReadyCheckRequestResult.
var (
	EReadyCheckRequestResult_name = map[int32]string{
		0: "k_EReadyCheckRequestResult_Success",
		1: "k_EReadyCheckRequestResult_AlreadyInProgress",
		2: "k_EReadyCheckRequestResult_NotInParty",
		3: "k_EReadyCheckRequestResult_SendError",
		4: "k_EReadyCheckRequestResult_UnknownError",
	}
	EReadyCheckRequestResult_value = map[string]int32{
		"k_EReadyCheckRequestResult_Success":           0,
		"k_EReadyCheckRequestResult_AlreadyInProgress": 1,
		"k_EReadyCheckRequestResult_NotInParty":        2,
		"k_EReadyCheckRequestResult_SendError":         3,
		"k_EReadyCheckRequestResult_UnknownError":      4,
	}
)

func (x EReadyCheckRequestResult) Enum() *EReadyCheckRequestResult {
	p := new(EReadyCheckRequestResult)
	*p = x
	return p
}

func (x EReadyCheckRequestResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EReadyCheckRequestResult) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_common_match_management_proto_enumTypes[7].Descriptor()
}

func (EReadyCheckRequestResult) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_common_match_management_proto_enumTypes[7]
}

func (x EReadyCheckRequestResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EReadyCheckRequestResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EReadyCheckRequestResult(num)
	return nil
}

// Deprecated: Use EReadyCheckRequestResult.Descriptor instead.
func (EReadyCheckRequestResult) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_match_management_proto_rawDescGZIP(), []int{7}
}

type EMatchBehaviorScoreVariance int32

const (
	EMatchBehaviorScoreVariance_k_EMatchBehaviorScoreVariance_Invalid EMatchBehaviorScoreVariance = 0
	EMatchBehaviorScoreVariance_k_EMatchBehaviorScoreVariance_Low     EMatchBehaviorScoreVariance = 1
	EMatchBehaviorScoreVariance_k_EMatchBehaviorScoreVariance_Medium  EMatchBehaviorScoreVariance = 2
	EMatchBehaviorScoreVariance_k_EMatchBehaviorScoreVariance_High    EMatchBehaviorScoreVariance = 3
)

// Enum value maps for EMatchBehaviorScoreVariance.
var (
	EMatchBehaviorScoreVariance_name = map[int32]string{
		0: "k_EMatchBehaviorScoreVariance_Invalid",
		1: "k_EMatchBehaviorScoreVariance_Low",
		2: "k_EMatchBehaviorScoreVariance_Medium",
		3: "k_EMatchBehaviorScoreVariance_High",
	}
	EMatchBehaviorScoreVariance_value = map[string]int32{
		"k_EMatchBehaviorScoreVariance_Invalid": 0,
		"k_EMatchBehaviorScoreVariance_Low":     1,
		"k_EMatchBehaviorScoreVariance_Medium":  2,
		"k_EMatchBehaviorScoreVariance_High":    3,
	}
)

func (x EMatchBehaviorScoreVariance) Enum() *EMatchBehaviorScoreVariance {
	p := new(EMatchBehaviorScoreVariance)
	*p = x
	return p
}

func (x EMatchBehaviorScoreVariance) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EMatchBehaviorScoreVariance) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_common_match_management_proto_enumTypes[8].Descriptor()
}

func (EMatchBehaviorScoreVariance) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_common_match_management_proto_enumTypes[8]
}

func (x EMatchBehaviorScoreVariance) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EMatchBehaviorScoreVariance) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EMatchBehaviorScoreVariance(num)
	return nil
}

// Deprecated: Use EMatchBehaviorScoreVariance.Descriptor instead.
func (EMatchBehaviorScoreVariance) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_match_management_proto_rawDescGZIP(), []int{8}
}

type CSODOTAParty_State int32

const (
	CSODOTAParty_UI            CSODOTAParty_State = 0
	CSODOTAParty_FINDING_MATCH CSODOTAParty_State = 1
	CSODOTAParty_IN_MATCH      CSODOTAParty_State = 2
)

// Enum value maps for CSODOTAParty_State.
var (
	CSODOTAParty_State_name = map[int32]string{
		0: "UI",
		1: "FINDING_MATCH",
		2: "IN_MATCH",
	}
	CSODOTAParty_State_value = map[string]int32{
		"UI":            0,
		"FINDING_MATCH": 1,
		"IN_MATCH":      2,
	}
)

func (x CSODOTAParty_State) Enum() *CSODOTAParty_State {
	p := new(CSODOTAParty_State)
	*p = x
	return p
}

func (x CSODOTAParty_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CSODOTAParty_State) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_common_match_management_proto_enumTypes[9].Descriptor()
}

func (CSODOTAParty_State) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_common_match_management_proto_enumTypes[9]
}

func (x CSODOTAParty_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CSODOTAParty_State) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CSODOTAParty_State(num)
	return nil
}

// Deprecated: Use CSODOTAParty_State.Descriptor instead.
func (CSODOTAParty_State) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_match_management_proto_rawDescGZIP(), []int{1, 0}
}

type CSODOTALobby_State int32

const (
	CSODOTALobby_UI           CSODOTALobby_State = 0
	CSODOTALobby_READYUP      CSODOTALobby_State = 4
	CSODOTALobby_SERVERSETUP  CSODOTALobby_State = 1
	CSODOTALobby_RUN          CSODOTALobby_State = 2
	CSODOTALobby_POSTGAME     CSODOTALobby_State = 3
	CSODOTALobby_NOTREADY     CSODOTALobby_State = 5
	CSODOTALobby_SERVERASSIGN CSODOTALobby_State = 6
)

// Enum value maps for CSODOTALobby_State.
var (
	CSODOTALobby_State_name = map[int32]string{
		0: "UI",
		4: "READYUP",
		1: "SERVERSETUP",
		2: "RUN",
		3: "POSTGAME",
		5: "NOTREADY",
		6: "SERVERASSIGN",
	}
	CSODOTALobby_State_value = map[string]int32{
		"UI":           0,
		"READYUP":      4,
		"SERVERSETUP":  1,
		"RUN":          2,
		"POSTGAME":     3,
		"NOTREADY":     5,
		"SERVERASSIGN": 6,
	}
)

func (x CSODOTALobby_State) Enum() *CSODOTALobby_State {
	p := new(CSODOTALobby_State)
	*p = x
	return p
}

func (x CSODOTALobby_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CSODOTALobby_State) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_common_match_management_proto_enumTypes[10].Descriptor()
}

func (CSODOTALobby_State) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_common_match_management_proto_enumTypes[10]
}

func (x CSODOTALobby_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CSODOTALobby_State) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CSODOTALobby_State(num)
	return nil
}

// Deprecated: Use CSODOTALobby_State.Descriptor instead.
func (CSODOTALobby_State) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_match_management_proto_rawDescGZIP(), []int{11, 0}
}

type CSODOTALobby_LobbyType int32

const (
	CSODOTALobby_INVALID                 CSODOTALobby_LobbyType = -1
	CSODOTALobby_CASUAL_MATCH            CSODOTALobby_LobbyType = 0
	CSODOTALobby_PRACTICE                CSODOTALobby_LobbyType = 1
	CSODOTALobby_COOP_BOT_MATCH          CSODOTALobby_LobbyType = 4
	CSODOTALobby_LEGACY_TEAM_MATCH       CSODOTALobby_LobbyType = 5
	CSODOTALobby_LEGACY_SOLO_QUEUE_MATCH CSODOTALobby_LobbyType = 6
	CSODOTALobby_COMPETITIVE_MATCH       CSODOTALobby_LobbyType = 7
	CSODOTALobby_CASUAL_1V1_MATCH        CSODOTALobby_LobbyType = 8
	CSODOTALobby_WEEKEND_TOURNEY         CSODOTALobby_LobbyType = 9
	CSODOTALobby_LOCAL_BOT_MATCH         CSODOTALobby_LobbyType = 10
	CSODOTALobby_SPECTATOR               CSODOTALobby_LobbyType = 11
	CSODOTALobby_EVENT_MATCH             CSODOTALobby_LobbyType = 12
	CSODOTALobby_GAUNTLET                CSODOTALobby_LobbyType = 13
)

// Enum value maps for CSODOTALobby_LobbyType.
var (
	CSODOTALobby_LobbyType_name = map[int32]string{
		-1: "INVALID",
		0:  "CASUAL_MATCH",
		1:  "PRACTICE",
		4:  "COOP_BOT_MATCH",
		5:  "LEGACY_TEAM_MATCH",
		6:  "LEGACY_SOLO_QUEUE_MATCH",
		7:  "COMPETITIVE_MATCH",
		8:  "CASUAL_1V1_MATCH",
		9:  "WEEKEND_TOURNEY",
		10: "LOCAL_BOT_MATCH",
		11: "SPECTATOR",
		12: "EVENT_MATCH",
		13: "GAUNTLET",
	}
	CSODOTALobby_LobbyType_value = map[string]int32{
		"INVALID":                 -1,
		"CASUAL_MATCH":            0,
		"PRACTICE":                1,
		"COOP_BOT_MATCH":          4,
		"LEGACY_TEAM_MATCH":       5,
		"LEGACY_SOLO_QUEUE_MATCH": 6,
		"COMPETITIVE_MATCH":       7,
		"CASUAL_1V1_MATCH":        8,
		"WEEKEND_TOURNEY":         9,
		"LOCAL_BOT_MATCH":         10,
		"SPECTATOR":               11,
		"EVENT_MATCH":             12,
		"GAUNTLET":                13,
	}
)

func (x CSODOTALobby_LobbyType) Enum() *CSODOTALobby_LobbyType {
	p := new(CSODOTALobby_LobbyType)
	*p = x
	return p
}

func (x CSODOTALobby_LobbyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CSODOTALobby_LobbyType) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_common_match_management_proto_enumTypes[11].Descriptor()
}

func (CSODOTALobby_LobbyType) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_common_match_management_proto_enumTypes[11]
}

func (x CSODOTALobby_LobbyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CSODOTALobby_LobbyType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CSODOTALobby_LobbyType(num)
	return nil
}

// Deprecated: Use CSODOTALobby_LobbyType.Descriptor instead.
func (CSODOTALobby_LobbyType) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_match_management_proto_rawDescGZIP(), []int{11, 1}
}

type CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType int32

const (
	CMvpData_MvpDatum_MvpAccolade_kills                                                          CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 1
	CMvpData_MvpDatum_MvpAccolade_deaths                                                         CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 2
	CMvpData_MvpDatum_MvpAccolade_assists                                                        CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 3
	CMvpData_MvpDatum_MvpAccolade_net_worth                                                      CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 5
	CMvpData_MvpDatum_MvpAccolade_item_value                                                     CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 6
	CMvpData_MvpDatum_MvpAccolade_support_gold_spent                                             CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 7
	CMvpData_MvpDatum_MvpAccolade_wards_placed                                                   CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 8
	CMvpData_MvpDatum_MvpAccolade_dewards                                                        CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 9
	CMvpData_MvpDatum_MvpAccolade_camps_stacked                                                  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 10
	CMvpData_MvpDatum_MvpAccolade_last_hits                                                      CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 11
	CMvpData_MvpDatum_MvpAccolade_denies                                                         CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 12
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEvent_Killing_Sprees                                 CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 13
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEvent_Godlike                                        CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 14
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEvent_Towers_Destroyed                               CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 15
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Invoker_SunstrikeKills                     CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 16
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Axe_Culls                                  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 17
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Axe_BattleHungerKills                      CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 18
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_LowHealthKills                             CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 19
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Invoker_TornadoKills                       CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 20
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Sven_DoubleStuns                           CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 21
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Sven_WarcryAssists                         CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 22
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Sven_CleaveDoubleKills                     CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 23
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Sven_TeleportInterrupts                    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 24
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Faceless_MultiChrono                       CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 25
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Faceless_ChronoKills                       CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 26
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Ursa_MultiShocks                           CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 27
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_RoshanKills                                CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 28
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Lion_FingerKills                           CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 29
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Riki_SmokedHeroKills                       CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 32
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_HeroesRevealedWithDust                     CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 33
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_SkeletonKing_ReincarnationKills            CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 34
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Skywrath_FlareKills                        CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 35
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Leshrac_SplitEarthStuns                    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 36
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Mirana_MaxStunArrows                       CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 37
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_PhantomAssassin_CoupdeGraceCrits           CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 38
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_PhantomAssassin_DaggerCrits                CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 39
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Meepo_Earthbinds                           CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 40
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Bloodseeker_RuptureKills                   CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 41
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Slark_LeashedEnemies                       CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 42
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Disruptor_FountainGlimpses                 CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 43
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Rubick_SpellsStolen                        CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 44
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Rubick_UltimatesStolen                     CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 45
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Doom_EnemiesDoomed                         CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 46
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Omniknight_Purifications                   CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 47
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Omniknight_AlliesRepelled                  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 48
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Omniknight_EnemiesRepelled                 CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 49
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Warlock_FiveHeroFatalBonds                 CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 50
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_CrystalMaiden_FrostbittenEnemies           CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 51
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_CrystalMaiden_CrystalNovas                 CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 52
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Kunkka_DoubleHeroTorrents                  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 53
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Kunkka_TripleHeroGhostShips                CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 54
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_NagaSiren_EnemiesEnsnared                  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 55
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_NagaSiren_TripleHeroRipTides               CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 56
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Lycan_KillsDuringShapeshift                CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 57
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Pudge_DismemberKills                       CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 58
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Pudge_EnemyHeroesHooked                    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 59
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Pudge_HookKills                            CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 60
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Pudge_UnseenEnemyHeroesHooked              CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 61
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_DrowRanger_EnemiesSilenced                 CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 62
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_DrowRanger_MultiHeroSilences               CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 63
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_DrowRanger_SilencedKills                   CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 64
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_DrowRanger_FrostArrowKills                 CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 65
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_DragonKnight_KillsInDragonForm             CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 66
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_DragonKnight_BreatheFireKills              CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 67
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_DragonKnight_SplashKills                   CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 68
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_WitchDoctor_CaskStuns                      CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 69
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_WitchDoctor_MaledictKills                  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 70
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_WitchDoctor_MultiHeroMaledicts             CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 71
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_WitchDoctor_DeathWardKills                 CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 72
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Disruptor_ThunderStrikeKills               CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 73
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Disruptor_HeroesGlimpsed                   CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 74
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_CrystalMaiden_FreezingFieldKills           CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 75
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Medusa_EnemiesPetrified                    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 77
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Warlock_FatalBondsKills                    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 78
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Warlock_GolemKills                         CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 79
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Tusk_WalrusPunches                         CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 80
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Tusk_SnowballStuns                         CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 81
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Earthshaker_FissureStuns                   CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 82
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Earthshaker_3HeroEchoslams                 CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 83
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_SandKing_BurrowstrikeStuns                 CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 84
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_SandKing_EpicenterKills                    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 85
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_SkywrathMage_AncientSealKills              CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 86
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_SkywrathMage_ConcussiveShotKills           CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 87
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Luna_LucentBeamKills                       CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 88
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Luna_EclipseKills                          CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 89
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_KeeperOfTheLight_IlluminateKills           CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 90
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_KeeperOfTheLight_ManaLeakStuns             CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 91
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_KeeperOfTheLight_TeammatesRecalled         CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 92
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_LegionCommander_DuelsWon                   CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 93
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Beastmaster_RoarKills                      CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 94
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Beastmaster_RoarMultiKills                 CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 95
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Windrunner_FocusFireBuildings              CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 96
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Windrunner_PowershotKills                  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 97
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_PhantomAssassin_DaggerLastHits             CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 98
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_PhantomAssassin_PhantomStrikeKills         CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 99
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_DeathProphet_CryptSwarmKills               CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 100
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_DeathProphet_ExorcismBuildingKills         CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 101
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_DeathProphet_ExorcismSpiritsSummoned       CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 102
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_DeathProphet_MultiHeroSilences             CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 103
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Abaddon_MistCoilKills                      CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 104
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Abaddon_MistCoilHealed                     CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 105
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Abaddon_AphoticShieldKills                 CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 106
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Lich_ChainFrostTripleKills                 CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 107
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Lich_ChainFrostMultiKills                  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 108
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Lich_ChainFrostBounces                     CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 109
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Ursa_EnragedKills                          CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 110
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Ursa_EarthshockKills                       CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 111
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Lina_LagunaBladeKills                      CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 112
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Lina_DragonSlaveKills                      CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 113
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Lina_LightStrikeArrayStuns                 CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 114
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEvent_Barracks_Destroyed                             CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 115
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEvent_TemplarAssassin_MeldKills                      CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 116
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEvent_TemplarAssassin_HeroesSlowed                   CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 117
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEvent_Sniper_AssassinationKills                      CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 118
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEvent_Sniper_HeadshotStuns                           CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 119
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEvent_EarthSpirit_SmashStuns                         CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 120
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEvent_EarthSpirit_GripSilences                       CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 121
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEvent_ShadowShaman_ShackleKills                      CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 122
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEvent_ShadowShaman_HexKills                          CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 123
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEvent_Centaur_EnemiesStomped                         CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 124
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEvent_Centaur_DoubleEdgeKills                        CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 125
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEvent_Centaur_ReturnKills                            CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 126
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEvent_EmberSpirit_EnemiesChained                     CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 127
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEvent_EmberSpirit_SleightOfFistMultiKills            CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 128
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEvent_Puck_OrbKills                                  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 129
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEvent_VengefulSpirit_EnemiesStunned                  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 130
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEvent_Lifestealer_RageKills                          CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 131
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEvent_Lifestealer_OpenWoundsKills                    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 132
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEvent_Lifestealer_InfestKills                        CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 133
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEvent_ElderTitan_SpiritKills                         CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 134
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEvent_ElderTitan_GoodStomps                          CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 135
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEvent_Clockwerk_RocketKills                          CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 136
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEvent_Clockwerk_BlindRocketKills                     CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 137
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEvent_StormSpirit_BallKills                          CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 138
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEvent_StormSpirit_DoubleRemnantKills                 CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 139
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEvent_StormSpirit_VortexKills                        CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 140
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEvent_Tinker_DoubleMissileKills                      CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 141
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEvent_Tinker_LaserKills                              CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 142
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEvent_Techies_SuicideKills                           CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 143
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEvent_Techies_LandMineKills                          CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 144
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEvent_Techies_StatisTrapStuns                        CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 145
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEvent_Techies_RemoteMineKills                        CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 146
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEvent_ShadowFiend_TripleRazeKills                    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 147
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEvent_ShadowFiend_RequiemMultiKills                  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 148
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEvent_ShadowFiend_QRazeKills                         CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 149
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEvent_ShadowFiend_WRazeKills                         CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 150
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEvent_ShadowFiend_ERazeKills                         CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 151
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEvent_Oracle_FatesEdictKills                         CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 152
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEvent_Oracle_FalsePromiseSaves                       CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 153
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEvent_Juggernaut_OmnislashKills                      CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 154
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_SkeletonKing_SkeletonHeroKills             CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 157
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_DarkWillow_CursedCrownTripleStuns          CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 158
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Dazzle_ShallowGraveSaves                   CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 159
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Dazzle_PoisonTouchKills                    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 160
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_ThreeManMeks                               CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 161
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Viper_PoisonAttackKills                    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 162
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Viper_CorrosiveSkinKills                   CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 163
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_ThreeHeroVeils                             CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 164
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Viper_KillsDuringViperStrike               CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 165
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_SolarCrestKills                            CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 166
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Tiny_TreeThrowKills                        CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 167
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Riki_BackstabKills                         CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 168
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Phoenix_ThreeHeroSupernovaStuns            CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 169
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Terrorblade_MetamorphosisKills             CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 170
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Lion_GreatFingerKills                      CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 171
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Antimage_SpellsBlockedWithAghanims         CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 172
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Antimage_ThreeManManaVoids                 CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 173
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_ArcWarden_TempestDoubleKills               CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 174
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_ArcWarden_SparkWraithKills                 CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 175
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Bane_BrainSapKills                         CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 176
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Bane_FiendsGripKills                       CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 177
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Batrider_TripleHeroFlamebreaks             CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 178
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Batrider_DoubleHeroLassoes                 CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 179
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Brewmaster_KillsDuringPrimalSplit          CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 180
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Bristleback_KillsUnderFourQuillStacks      CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 181
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Bristleback_TripleHeroNasalGoo             CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 182
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Broodmother_SpiderlingHeroKills            CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 183
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Broodmother_KillsInsideWeb                 CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 184
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Centaur_ThreeHeroStampede                  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 185
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_ChaosKnight_RealityRiftKills               CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 186
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Chen_KillsWithPenitence                    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 187
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_CrystalMaiden_TwoHeroCrystalNovas          CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 188
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_CrystalMaiden_ThreeHeroFreezingFields      CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 189
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Dazzle_ShadowWaveKills                     CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 190
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_DeathProphet_SiphonKills                   CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 191
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_DeathProphet_ExorcismKillsDuringEuls       CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 192
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Disruptor_ThreeHeroKineticFieldStaticStorm CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 193
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Doom_InfernalBladeBurnKills                CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 194
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_DrowRanger_PrecisionAuraCreepTowerKills    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 195
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_EmberSpirit_RemnantKills                   CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 196
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_EmberSpirit_SleightOfFistKills             CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 197
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Enigma_MidnightPulseBlackHoleCombos        CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 198
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Enigma_ThreeManBlackHoles                  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 199
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_FacelessVoid_MultiHeroTimeDilation         CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 200
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Gyrocopter_ThreeHeroFlakCannon             CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 201
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Gyrocopter_HomingMissileKills              CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 202
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Gyrocopter_RocketBarrageKills              CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 203
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Huskar_KillsDuringLifeBreak                CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 204
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Huskar_BurningSpearKills                   CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 205
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Invoker_MultiHeroIceWall                   CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 206
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Invoker_ThreeHeroEMP                       CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 207
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Invoker_ThreeHeroDeafeningBlast            CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 208
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Invoker_MultiHeroChaosMeteor               CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 209
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Jakiro_MultiHeroDualBreath                 CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 210
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Jakiro_IcePathMacropyreCombos              CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 211
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Leshrac_PulseNovaKills                     CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 212
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Leshrac_ThreeHeroLightningStorm            CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 213
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Lion_ThreeHeroFingerOfDeath                CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 214
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Meepo_PoofKills                            CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 215
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Meepo_MultiHeroEarthbinds                  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 216
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_NightStalker_NighttimeKills                CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 217
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Morphling_KillsDuringReplicate             CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 218
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_OgreMagi_FireblastKills                    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 219
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_OgreMagi_IgniteKills                       CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 220
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_DominatingKillStreaks                      CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 221
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_MegaKillStreaks                            CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 222
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Alchemist_AghanimsGiven                    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 223
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_VeilsLeadingToKills                        CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 224
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_DustLeadingToKills                         CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 225
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_WitchDoctor_MultiHeroCaskStuns             CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 226
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Weaver_ShukuchiKills                       CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 227
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Windrunner_ShackleFocusFireKills           CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 228
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_VengefulSpirit_VengeanceAuraIllusionKills  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 229
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Tusk_WalrusPunchKills                      CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 230
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Tinker_TripleHeroLasers                    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 231
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_TemplarAssassin_MultiHeroPsiBlades         CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 232
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Sven_KillsDuringGodsStrength               CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 233
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Sniper_ThreeHeroShrapnels                  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 234
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Slark_KillsDuringShadowDance               CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 235
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_ShadowShaman_MultiHeroEtherShocks          CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 236
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_ShadowShaman_SerpentWardShackleKills       CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 237
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Riki_ThreeHeroTricksOfTheTrade             CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 238
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Razor_EyeOfTheStormKills                   CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 239
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Pugna_LifeDrainKills                       CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 240
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_ObsidianDestroyer_SanitysEclipseKills      CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 241
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Oracle_MultiHeroFortunesEnd                CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 242
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Omniknight_PurificationKills               CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 243
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_NightStalker_EnemyMissesUnderCripplingFear CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 244
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Warlock_ThreeHeroFatalBonds                CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 245
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Riki_TricksOfTheTradeKills                 CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 246
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Earthshaker_AftershockHits10               CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 247
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Earthshaker_5HeroEchoslams                 CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 248
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Lina_LagunaBladeHeroKills                  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 249
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Lina_LightStrikeHeroStuns                  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 250
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Earthshaker_FissureMultiStuns              CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 251
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Earthshaker_TotemKills                     CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 252
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Pangolier_SwashbuckleKills                 CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 253
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Furion_EnemyHeroesTrapped                  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 254
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Pangolier_HeartpiercerKills                CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 255
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Medusa_MultiHeroStoneGaze                  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 256
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Medusa_SplitShotKills                      CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 257
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Mirana_MultiHeroStarstorm                  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 258
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Mirana_KillsFromMoonlightShadow            CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 259
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Magnus_MultiHeroSkewers                    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 260
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Magnus_MultiHeroReversePolarity            CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 261
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Magnus_HeroesSlowedWithShockwave           CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 262
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_NagaSiren_MultiHeroSong                    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 263
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_NagaSiren_AlliesHealedBySong               CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 264
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_LoneDruid_MultiHeroRoar                    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 265
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_LoneDruid_BattleCryKills                   CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 266
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_WinterWyvern_ThreeHeroCurses               CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 267
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Antimage_SpellsBlockedWithCounterspell     CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 268
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Mars_EnemiesKilledInArena                  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 269
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Mars_MultiHeroGodsRebuke                   CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 270
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Mars_GodsRebukeKills                       CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 271
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Snapfire_LizardBlobsKills                  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 272
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Snapfire_TwoHeroCookieStuns                CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 273
	CMvpData_MvpDatum_MvpAccolade_Custom_KillStreak                                              CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 274
)

// Enum value maps for CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType.
var (
	CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_name = map[int32]string{
		1:   "kills",
		2:   "deaths",
		3:   "assists",
		5:   "net_worth",
		6:   "item_value",
		7:   "support_gold_spent",
		8:   "wards_placed",
		9:   "dewards",
		10:  "camps_stacked",
		11:  "last_hits",
		12:  "denies",
		13:  "kKillEaterEvent_Killing_Sprees",
		14:  "kKillEaterEvent_Godlike",
		15:  "kKillEaterEvent_Towers_Destroyed",
		16:  "kKillEaterEventType_Invoker_SunstrikeKills",
		17:  "kKillEaterEventType_Axe_Culls",
		18:  "kKillEaterEventType_Axe_BattleHungerKills",
		19:  "kKillEaterEventType_LowHealthKills",
		20:  "kKillEaterEventType_Invoker_TornadoKills",
		21:  "kKillEaterEventType_Sven_DoubleStuns",
		22:  "kKillEaterEventType_Sven_WarcryAssists",
		23:  "kKillEaterEventType_Sven_CleaveDoubleKills",
		24:  "kKillEaterEventType_Sven_TeleportInterrupts",
		25:  "kKillEaterEventType_Faceless_MultiChrono",
		26:  "kKillEaterEventType_Faceless_ChronoKills",
		27:  "kKillEaterEventType_Ursa_MultiShocks",
		28:  "kKillEaterEventType_RoshanKills",
		29:  "kKillEaterEventType_Lion_FingerKills",
		32:  "kKillEaterEventType_Riki_SmokedHeroKills",
		33:  "kKillEaterEventType_HeroesRevealedWithDust",
		34:  "kKillEaterEventType_SkeletonKing_ReincarnationKills",
		35:  "kKillEaterEventType_Skywrath_FlareKills",
		36:  "kKillEaterEventType_Leshrac_SplitEarthStuns",
		37:  "kKillEaterEventType_Mirana_MaxStunArrows",
		38:  "kKillEaterEventType_PhantomAssassin_CoupdeGraceCrits",
		39:  "kKillEaterEventType_PhantomAssassin_DaggerCrits",
		40:  "kKillEaterEventType_Meepo_Earthbinds",
		41:  "kKillEaterEventType_Bloodseeker_RuptureKills",
		42:  "kKillEaterEventType_Slark_LeashedEnemies",
		43:  "kKillEaterEventType_Disruptor_FountainGlimpses",
		44:  "kKillEaterEventType_Rubick_SpellsStolen",
		45:  "kKillEaterEventType_Rubick_UltimatesStolen",
		46:  "kKillEaterEventType_Doom_EnemiesDoomed",
		47:  "kKillEaterEventType_Omniknight_Purifications",
		48:  "kKillEaterEventType_Omniknight_AlliesRepelled",
		49:  "kKillEaterEventType_Omniknight_EnemiesRepelled",
		50:  "kKillEaterEventType_Warlock_FiveHeroFatalBonds",
		51:  "kKillEaterEventType_CrystalMaiden_FrostbittenEnemies",
		52:  "kKillEaterEventType_CrystalMaiden_CrystalNovas",
		53:  "kKillEaterEventType_Kunkka_DoubleHeroTorrents",
		54:  "kKillEaterEventType_Kunkka_TripleHeroGhostShips",
		55:  "kKillEaterEventType_NagaSiren_EnemiesEnsnared",
		56:  "kKillEaterEventType_NagaSiren_TripleHeroRipTides",
		57:  "kKillEaterEventType_Lycan_KillsDuringShapeshift",
		58:  "kKillEaterEventType_Pudge_DismemberKills",
		59:  "kKillEaterEventType_Pudge_EnemyHeroesHooked",
		60:  "kKillEaterEventType_Pudge_HookKills",
		61:  "kKillEaterEventType_Pudge_UnseenEnemyHeroesHooked",
		62:  "kKillEaterEventType_DrowRanger_EnemiesSilenced",
		63:  "kKillEaterEventType_DrowRanger_MultiHeroSilences",
		64:  "kKillEaterEventType_DrowRanger_SilencedKills",
		65:  "kKillEaterEventType_DrowRanger_FrostArrowKills",
		66:  "kKillEaterEventType_DragonKnight_KillsInDragonForm",
		67:  "kKillEaterEventType_DragonKnight_BreatheFireKills",
		68:  "kKillEaterEventType_DragonKnight_SplashKills",
		69:  "kKillEaterEventType_WitchDoctor_CaskStuns",
		70:  "kKillEaterEventType_WitchDoctor_MaledictKills",
		71:  "kKillEaterEventType_WitchDoctor_MultiHeroMaledicts",
		72:  "kKillEaterEventType_WitchDoctor_DeathWardKills",
		73:  "kKillEaterEventType_Disruptor_ThunderStrikeKills",
		74:  "kKillEaterEventType_Disruptor_HeroesGlimpsed",
		75:  "kKillEaterEventType_CrystalMaiden_FreezingFieldKills",
		77:  "kKillEaterEventType_Medusa_EnemiesPetrified",
		78:  "kKillEaterEventType_Warlock_FatalBondsKills",
		79:  "kKillEaterEventType_Warlock_GolemKills",
		80:  "kKillEaterEventType_Tusk_WalrusPunches",
		81:  "kKillEaterEventType_Tusk_SnowballStuns",
		82:  "kKillEaterEventType_Earthshaker_FissureStuns",
		83:  "kKillEaterEventType_Earthshaker_3HeroEchoslams",
		84:  "kKillEaterEventType_SandKing_BurrowstrikeStuns",
		85:  "kKillEaterEventType_SandKing_EpicenterKills",
		86:  "kKillEaterEventType_SkywrathMage_AncientSealKills",
		87:  "kKillEaterEventType_SkywrathMage_ConcussiveShotKills",
		88:  "kKillEaterEventType_Luna_LucentBeamKills",
		89:  "kKillEaterEventType_Luna_EclipseKills",
		90:  "kKillEaterEventType_KeeperOfTheLight_IlluminateKills",
		91:  "kKillEaterEventType_KeeperOfTheLight_ManaLeakStuns",
		92:  "kKillEaterEventType_KeeperOfTheLight_TeammatesRecalled",
		93:  "kKillEaterEventType_LegionCommander_DuelsWon",
		94:  "kKillEaterEventType_Beastmaster_RoarKills",
		95:  "kKillEaterEventType_Beastmaster_RoarMultiKills",
		96:  "kKillEaterEventType_Windrunner_FocusFireBuildings",
		97:  "kKillEaterEventType_Windrunner_PowershotKills",
		98:  "kKillEaterEventType_PhantomAssassin_DaggerLastHits",
		99:  "kKillEaterEventType_PhantomAssassin_PhantomStrikeKills",
		100: "kKillEaterEventType_DeathProphet_CryptSwarmKills",
		101: "kKillEaterEventType_DeathProphet_ExorcismBuildingKills",
		102: "kKillEaterEventType_DeathProphet_ExorcismSpiritsSummoned",
		103: "kKillEaterEventType_DeathProphet_MultiHeroSilences",
		104: "kKillEaterEventType_Abaddon_MistCoilKills",
		105: "kKillEaterEventType_Abaddon_MistCoilHealed",
		106: "kKillEaterEventType_Abaddon_AphoticShieldKills",
		107: "kKillEaterEventType_Lich_ChainFrostTripleKills",
		108: "kKillEaterEventType_Lich_ChainFrostMultiKills",
		109: "kKillEaterEventType_Lich_ChainFrostBounces",
		110: "kKillEaterEventType_Ursa_EnragedKills",
		111: "kKillEaterEventType_Ursa_EarthshockKills",
		112: "kKillEaterEventType_Lina_LagunaBladeKills",
		113: "kKillEaterEventType_Lina_DragonSlaveKills",
		114: "kKillEaterEventType_Lina_LightStrikeArrayStuns",
		115: "kKillEaterEvent_Barracks_Destroyed",
		116: "kKillEaterEvent_TemplarAssassin_MeldKills",
		117: "kKillEaterEvent_TemplarAssassin_HeroesSlowed",
		118: "kKillEaterEvent_Sniper_AssassinationKills",
		119: "kKillEaterEvent_Sniper_HeadshotStuns",
		120: "kKillEaterEvent_EarthSpirit_SmashStuns",
		121: "kKillEaterEvent_EarthSpirit_GripSilences",
		122: "kKillEaterEvent_ShadowShaman_ShackleKills",
		123: "kKillEaterEvent_ShadowShaman_HexKills",
		124: "kKillEaterEvent_Centaur_EnemiesStomped",
		125: "kKillEaterEvent_Centaur_DoubleEdgeKills",
		126: "kKillEaterEvent_Centaur_ReturnKills",
		127: "kKillEaterEvent_EmberSpirit_EnemiesChained",
		128: "kKillEaterEvent_EmberSpirit_SleightOfFistMultiKills",
		129: "kKillEaterEvent_Puck_OrbKills",
		130: "kKillEaterEvent_VengefulSpirit_EnemiesStunned",
		131: "kKillEaterEvent_Lifestealer_RageKills",
		132: "kKillEaterEvent_Lifestealer_OpenWoundsKills",
		133: "kKillEaterEvent_Lifestealer_InfestKills",
		134: "kKillEaterEvent_ElderTitan_SpiritKills",
		135: "kKillEaterEvent_ElderTitan_GoodStomps",
		136: "kKillEaterEvent_Clockwerk_RocketKills",
		137: "kKillEaterEvent_Clockwerk_BlindRocketKills",
		138: "kKillEaterEvent_StormSpirit_BallKills",
		139: "kKillEaterEvent_StormSpirit_DoubleRemnantKills",
		140: "kKillEaterEvent_StormSpirit_VortexKills",
		141: "kKillEaterEvent_Tinker_DoubleMissileKills",
		142: "kKillEaterEvent_Tinker_LaserKills",
		143: "kKillEaterEvent_Techies_SuicideKills",
		144: "kKillEaterEvent_Techies_LandMineKills",
		145: "kKillEaterEvent_Techies_StatisTrapStuns",
		146: "kKillEaterEvent_Techies_RemoteMineKills",
		147: "kKillEaterEvent_ShadowFiend_TripleRazeKills",
		148: "kKillEaterEvent_ShadowFiend_RequiemMultiKills",
		149: "kKillEaterEvent_ShadowFiend_QRazeKills",
		150: "kKillEaterEvent_ShadowFiend_WRazeKills",
		151: "kKillEaterEvent_ShadowFiend_ERazeKills",
		152: "kKillEaterEvent_Oracle_FatesEdictKills",
		153: "kKillEaterEvent_Oracle_FalsePromiseSaves",
		154: "kKillEaterEvent_Juggernaut_OmnislashKills",
		157: "kKillEaterEventType_SkeletonKing_SkeletonHeroKills",
		158: "kKillEaterEventType_DarkWillow_CursedCrownTripleStuns",
		159: "kKillEaterEventType_Dazzle_ShallowGraveSaves",
		160: "kKillEaterEventType_Dazzle_PoisonTouchKills",
		161: "kKillEaterEventType_ThreeManMeks",
		162: "kKillEaterEventType_Viper_PoisonAttackKills",
		163: "kKillEaterEventType_Viper_CorrosiveSkinKills",
		164: "kKillEaterEventType_ThreeHeroVeils",
		165: "kKillEaterEventType_Viper_KillsDuringViperStrike",
		166: "kKillEaterEventType_SolarCrestKills",
		167: "kKillEaterEventType_Tiny_TreeThrowKills",
		168: "kKillEaterEventType_Riki_BackstabKills",
		169: "kKillEaterEventType_Phoenix_ThreeHeroSupernovaStuns",
		170: "kKillEaterEventType_Terrorblade_MetamorphosisKills",
		171: "kKillEaterEventType_Lion_GreatFingerKills",
		172: "kKillEaterEventType_Antimage_SpellsBlockedWithAghanims",
		173: "kKillEaterEventType_Antimage_ThreeManManaVoids",
		174: "kKillEaterEventType_ArcWarden_TempestDoubleKills",
		175: "kKillEaterEventType_ArcWarden_SparkWraithKills",
		176: "kKillEaterEventType_Bane_BrainSapKills",
		177: "kKillEaterEventType_Bane_FiendsGripKills",
		178: "kKillEaterEventType_Batrider_TripleHeroFlamebreaks",
		179: "kKillEaterEventType_Batrider_DoubleHeroLassoes",
		180: "kKillEaterEventType_Brewmaster_KillsDuringPrimalSplit",
		181: "kKillEaterEventType_Bristleback_KillsUnderFourQuillStacks",
		182: "kKillEaterEventType_Bristleback_TripleHeroNasalGoo",
		183: "kKillEaterEventType_Broodmother_SpiderlingHeroKills",
		184: "kKillEaterEventType_Broodmother_KillsInsideWeb",
		185: "kKillEaterEventType_Centaur_ThreeHeroStampede",
		186: "kKillEaterEventType_ChaosKnight_RealityRiftKills",
		187: "kKillEaterEventType_Chen_KillsWithPenitence",
		188: "kKillEaterEventType_CrystalMaiden_TwoHeroCrystalNovas",
		189: "kKillEaterEventType_CrystalMaiden_ThreeHeroFreezingFields",
		190: "kKillEaterEventType_Dazzle_ShadowWaveKills",
		191: "kKillEaterEventType_DeathProphet_SiphonKills",
		192: "kKillEaterEventType_DeathProphet_ExorcismKillsDuringEuls",
		193: "kKillEaterEventType_Disruptor_ThreeHeroKineticFieldStaticStorm",
		194: "kKillEaterEventType_Doom_InfernalBladeBurnKills",
		195: "kKillEaterEventType_DrowRanger_PrecisionAuraCreepTowerKills",
		196: "kKillEaterEventType_EmberSpirit_RemnantKills",
		197: "kKillEaterEventType_EmberSpirit_SleightOfFistKills",
		198: "kKillEaterEventType_Enigma_MidnightPulseBlackHoleCombos",
		199: "kKillEaterEventType_Enigma_ThreeManBlackHoles",
		200: "kKillEaterEventType_FacelessVoid_MultiHeroTimeDilation",
		201: "kKillEaterEventType_Gyrocopter_ThreeHeroFlakCannon",
		202: "kKillEaterEventType_Gyrocopter_HomingMissileKills",
		203: "kKillEaterEventType_Gyrocopter_RocketBarrageKills",
		204: "kKillEaterEventType_Huskar_KillsDuringLifeBreak",
		205: "kKillEaterEventType_Huskar_BurningSpearKills",
		206: "kKillEaterEventType_Invoker_MultiHeroIceWall",
		207: "kKillEaterEventType_Invoker_ThreeHeroEMP",
		208: "kKillEaterEventType_Invoker_ThreeHeroDeafeningBlast",
		209: "kKillEaterEventType_Invoker_MultiHeroChaosMeteor",
		210: "kKillEaterEventType_Jakiro_MultiHeroDualBreath",
		211: "kKillEaterEventType_Jakiro_IcePathMacropyreCombos",
		212: "kKillEaterEventType_Leshrac_PulseNovaKills",
		213: "kKillEaterEventType_Leshrac_ThreeHeroLightningStorm",
		214: "kKillEaterEventType_Lion_ThreeHeroFingerOfDeath",
		215: "kKillEaterEventType_Meepo_PoofKills",
		216: "kKillEaterEventType_Meepo_MultiHeroEarthbinds",
		217: "kKillEaterEventType_NightStalker_NighttimeKills",
		218: "kKillEaterEventType_Morphling_KillsDuringReplicate",
		219: "kKillEaterEventType_OgreMagi_FireblastKills",
		220: "kKillEaterEventType_OgreMagi_IgniteKills",
		221: "kKillEaterEventType_DominatingKillStreaks",
		222: "kKillEaterEventType_MegaKillStreaks",
		223: "kKillEaterEventType_Alchemist_AghanimsGiven",
		224: "kKillEaterEventType_VeilsLeadingToKills",
		225: "kKillEaterEventType_DustLeadingToKills",
		226: "kKillEaterEventType_WitchDoctor_MultiHeroCaskStuns",
		227: "kKillEaterEventType_Weaver_ShukuchiKills",
		228: "kKillEaterEventType_Windrunner_ShackleFocusFireKills",
		229: "kKillEaterEventType_VengefulSpirit_VengeanceAuraIllusionKills",
		230: "kKillEaterEventType_Tusk_WalrusPunchKills",
		231: "kKillEaterEventType_Tinker_TripleHeroLasers",
		232: "kKillEaterEventType_TemplarAssassin_MultiHeroPsiBlades",
		233: "kKillEaterEventType_Sven_KillsDuringGodsStrength",
		234: "kKillEaterEventType_Sniper_ThreeHeroShrapnels",
		235: "kKillEaterEventType_Slark_KillsDuringShadowDance",
		236: "kKillEaterEventType_ShadowShaman_MultiHeroEtherShocks",
		237: "kKillEaterEventType_ShadowShaman_SerpentWardShackleKills",
		238: "kKillEaterEventType_Riki_ThreeHeroTricksOfTheTrade",
		239: "kKillEaterEventType_Razor_EyeOfTheStormKills",
		240: "kKillEaterEventType_Pugna_LifeDrainKills",
		241: "kKillEaterEventType_ObsidianDestroyer_SanitysEclipseKills",
		242: "kKillEaterEventType_Oracle_MultiHeroFortunesEnd",
		243: "kKillEaterEventType_Omniknight_PurificationKills",
		244: "kKillEaterEventType_NightStalker_EnemyMissesUnderCripplingFear",
		245: "kKillEaterEventType_Warlock_ThreeHeroFatalBonds",
		246: "kKillEaterEventType_Riki_TricksOfTheTradeKills",
		247: "kKillEaterEventType_Earthshaker_AftershockHits10",
		248: "kKillEaterEventType_Earthshaker_5HeroEchoslams",
		249: "kKillEaterEventType_Lina_LagunaBladeHeroKills",
		250: "kKillEaterEventType_Lina_LightStrikeHeroStuns",
		251: "kKillEaterEventType_Earthshaker_FissureMultiStuns",
		252: "kKillEaterEventType_Earthshaker_TotemKills",
		253: "kKillEaterEventType_Pangolier_SwashbuckleKills",
		254: "kKillEaterEventType_Furion_EnemyHeroesTrapped",
		255: "kKillEaterEventType_Pangolier_HeartpiercerKills",
		256: "kKillEaterEventType_Medusa_MultiHeroStoneGaze",
		257: "kKillEaterEventType_Medusa_SplitShotKills",
		258: "kKillEaterEventType_Mirana_MultiHeroStarstorm",
		259: "kKillEaterEventType_Mirana_KillsFromMoonlightShadow",
		260: "kKillEaterEventType_Magnus_MultiHeroSkewers",
		261: "kKillEaterEventType_Magnus_MultiHeroReversePolarity",
		262: "kKillEaterEventType_Magnus_HeroesSlowedWithShockwave",
		263: "kKillEaterEventType_NagaSiren_MultiHeroSong",
		264: "kKillEaterEventType_NagaSiren_AlliesHealedBySong",
		265: "kKillEaterEventType_LoneDruid_MultiHeroRoar",
		266: "kKillEaterEventType_LoneDruid_BattleCryKills",
		267: "kKillEaterEventType_WinterWyvern_ThreeHeroCurses",
		268: "kKillEaterEventType_Antimage_SpellsBlockedWithCounterspell",
		269: "kKillEaterEventType_Mars_EnemiesKilledInArena",
		270: "kKillEaterEventType_Mars_MultiHeroGodsRebuke",
		271: "kKillEaterEventType_Mars_GodsRebukeKills",
		272: "kKillEaterEventType_Snapfire_LizardBlobsKills",
		273: "kKillEaterEventType_Snapfire_TwoHeroCookieStuns",
		274: "Custom_KillStreak",
	}
	CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_value = map[string]int32{
		"kills":                            1,
		"deaths":                           2,
		"assists":                          3,
		"net_worth":                        5,
		"item_value":                       6,
		"support_gold_spent":               7,
		"wards_placed":                     8,
		"dewards":                          9,
		"camps_stacked":                    10,
		"last_hits":                        11,
		"denies":                           12,
		"kKillEaterEvent_Killing_Sprees":   13,
		"kKillEaterEvent_Godlike":          14,
		"kKillEaterEvent_Towers_Destroyed": 15,
		"kKillEaterEventType_Invoker_SunstrikeKills":                     16,
		"kKillEaterEventType_Axe_Culls":                                  17,
		"kKillEaterEventType_Axe_BattleHungerKills":                      18,
		"kKillEaterEventType_LowHealthKills":                             19,
		"kKillEaterEventType_Invoker_TornadoKills":                       20,
		"kKillEaterEventType_Sven_DoubleStuns":                           21,
		"kKillEaterEventType_Sven_WarcryAssists":                         22,
		"kKillEaterEventType_Sven_CleaveDoubleKills":                     23,
		"kKillEaterEventType_Sven_TeleportInterrupts":                    24,
		"kKillEaterEventType_Faceless_MultiChrono":                       25,
		"kKillEaterEventType_Faceless_ChronoKills":                       26,
		"kKillEaterEventType_Ursa_MultiShocks":                           27,
		"kKillEaterEventType_RoshanKills":                                28,
		"kKillEaterEventType_Lion_FingerKills":                           29,
		"kKillEaterEventType_Riki_SmokedHeroKills":                       32,
		"kKillEaterEventType_HeroesRevealedWithDust":                     33,
		"kKillEaterEventType_SkeletonKing_ReincarnationKills":            34,
		"kKillEaterEventType_Skywrath_FlareKills":                        35,
		"kKillEaterEventType_Leshrac_SplitEarthStuns":                    36,
		"kKillEaterEventType_Mirana_MaxStunArrows":                       37,
		"kKillEaterEventType_PhantomAssassin_CoupdeGraceCrits":           38,
		"kKillEaterEventType_PhantomAssassin_DaggerCrits":                39,
		"kKillEaterEventType_Meepo_Earthbinds":                           40,
		"kKillEaterEventType_Bloodseeker_RuptureKills":                   41,
		"kKillEaterEventType_Slark_LeashedEnemies":                       42,
		"kKillEaterEventType_Disruptor_FountainGlimpses":                 43,
		"kKillEaterEventType_Rubick_SpellsStolen":                        44,
		"kKillEaterEventType_Rubick_UltimatesStolen":                     45,
		"kKillEaterEventType_Doom_EnemiesDoomed":                         46,
		"kKillEaterEventType_Omniknight_Purifications":                   47,
		"kKillEaterEventType_Omniknight_AlliesRepelled":                  48,
		"kKillEaterEventType_Omniknight_EnemiesRepelled":                 49,
		"kKillEaterEventType_Warlock_FiveHeroFatalBonds":                 50,
		"kKillEaterEventType_CrystalMaiden_FrostbittenEnemies":           51,
		"kKillEaterEventType_CrystalMaiden_CrystalNovas":                 52,
		"kKillEaterEventType_Kunkka_DoubleHeroTorrents":                  53,
		"kKillEaterEventType_Kunkka_TripleHeroGhostShips":                54,
		"kKillEaterEventType_NagaSiren_EnemiesEnsnared":                  55,
		"kKillEaterEventType_NagaSiren_TripleHeroRipTides":               56,
		"kKillEaterEventType_Lycan_KillsDuringShapeshift":                57,
		"kKillEaterEventType_Pudge_DismemberKills":                       58,
		"kKillEaterEventType_Pudge_EnemyHeroesHooked":                    59,
		"kKillEaterEventType_Pudge_HookKills":                            60,
		"kKillEaterEventType_Pudge_UnseenEnemyHeroesHooked":              61,
		"kKillEaterEventType_DrowRanger_EnemiesSilenced":                 62,
		"kKillEaterEventType_DrowRanger_MultiHeroSilences":               63,
		"kKillEaterEventType_DrowRanger_SilencedKills":                   64,
		"kKillEaterEventType_DrowRanger_FrostArrowKills":                 65,
		"kKillEaterEventType_DragonKnight_KillsInDragonForm":             66,
		"kKillEaterEventType_DragonKnight_BreatheFireKills":              67,
		"kKillEaterEventType_DragonKnight_SplashKills":                   68,
		"kKillEaterEventType_WitchDoctor_CaskStuns":                      69,
		"kKillEaterEventType_WitchDoctor_MaledictKills":                  70,
		"kKillEaterEventType_WitchDoctor_MultiHeroMaledicts":             71,
		"kKillEaterEventType_WitchDoctor_DeathWardKills":                 72,
		"kKillEaterEventType_Disruptor_ThunderStrikeKills":               73,
		"kKillEaterEventType_Disruptor_HeroesGlimpsed":                   74,
		"kKillEaterEventType_CrystalMaiden_FreezingFieldKills":           75,
		"kKillEaterEventType_Medusa_EnemiesPetrified":                    77,
		"kKillEaterEventType_Warlock_FatalBondsKills":                    78,
		"kKillEaterEventType_Warlock_GolemKills":                         79,
		"kKillEaterEventType_Tusk_WalrusPunches":                         80,
		"kKillEaterEventType_Tusk_SnowballStuns":                         81,
		"kKillEaterEventType_Earthshaker_FissureStuns":                   82,
		"kKillEaterEventType_Earthshaker_3HeroEchoslams":                 83,
		"kKillEaterEventType_SandKing_BurrowstrikeStuns":                 84,
		"kKillEaterEventType_SandKing_EpicenterKills":                    85,
		"kKillEaterEventType_SkywrathMage_AncientSealKills":              86,
		"kKillEaterEventType_SkywrathMage_ConcussiveShotKills":           87,
		"kKillEaterEventType_Luna_LucentBeamKills":                       88,
		"kKillEaterEventType_Luna_EclipseKills":                          89,
		"kKillEaterEventType_KeeperOfTheLight_IlluminateKills":           90,
		"kKillEaterEventType_KeeperOfTheLight_ManaLeakStuns":             91,
		"kKillEaterEventType_KeeperOfTheLight_TeammatesRecalled":         92,
		"kKillEaterEventType_LegionCommander_DuelsWon":                   93,
		"kKillEaterEventType_Beastmaster_RoarKills":                      94,
		"kKillEaterEventType_Beastmaster_RoarMultiKills":                 95,
		"kKillEaterEventType_Windrunner_FocusFireBuildings":              96,
		"kKillEaterEventType_Windrunner_PowershotKills":                  97,
		"kKillEaterEventType_PhantomAssassin_DaggerLastHits":             98,
		"kKillEaterEventType_PhantomAssassin_PhantomStrikeKills":         99,
		"kKillEaterEventType_DeathProphet_CryptSwarmKills":               100,
		"kKillEaterEventType_DeathProphet_ExorcismBuildingKills":         101,
		"kKillEaterEventType_DeathProphet_ExorcismSpiritsSummoned":       102,
		"kKillEaterEventType_DeathProphet_MultiHeroSilences":             103,
		"kKillEaterEventType_Abaddon_MistCoilKills":                      104,
		"kKillEaterEventType_Abaddon_MistCoilHealed":                     105,
		"kKillEaterEventType_Abaddon_AphoticShieldKills":                 106,
		"kKillEaterEventType_Lich_ChainFrostTripleKills":                 107,
		"kKillEaterEventType_Lich_ChainFrostMultiKills":                  108,
		"kKillEaterEventType_Lich_ChainFrostBounces":                     109,
		"kKillEaterEventType_Ursa_EnragedKills":                          110,
		"kKillEaterEventType_Ursa_EarthshockKills":                       111,
		"kKillEaterEventType_Lina_LagunaBladeKills":                      112,
		"kKillEaterEventType_Lina_DragonSlaveKills":                      113,
		"kKillEaterEventType_Lina_LightStrikeArrayStuns":                 114,
		"kKillEaterEvent_Barracks_Destroyed":                             115,
		"kKillEaterEvent_TemplarAssassin_MeldKills":                      116,
		"kKillEaterEvent_TemplarAssassin_HeroesSlowed":                   117,
		"kKillEaterEvent_Sniper_AssassinationKills":                      118,
		"kKillEaterEvent_Sniper_HeadshotStuns":                           119,
		"kKillEaterEvent_EarthSpirit_SmashStuns":                         120,
		"kKillEaterEvent_EarthSpirit_GripSilences":                       121,
		"kKillEaterEvent_ShadowShaman_ShackleKills":                      122,
		"kKillEaterEvent_ShadowShaman_HexKills":                          123,
		"kKillEaterEvent_Centaur_EnemiesStomped":                         124,
		"kKillEaterEvent_Centaur_DoubleEdgeKills":                        125,
		"kKillEaterEvent_Centaur_ReturnKills":                            126,
		"kKillEaterEvent_EmberSpirit_EnemiesChained":                     127,
		"kKillEaterEvent_EmberSpirit_SleightOfFistMultiKills":            128,
		"kKillEaterEvent_Puck_OrbKills":                                  129,
		"kKillEaterEvent_VengefulSpirit_EnemiesStunned":                  130,
		"kKillEaterEvent_Lifestealer_RageKills":                          131,
		"kKillEaterEvent_Lifestealer_OpenWoundsKills":                    132,
		"kKillEaterEvent_Lifestealer_InfestKills":                        133,
		"kKillEaterEvent_ElderTitan_SpiritKills":                         134,
		"kKillEaterEvent_ElderTitan_GoodStomps":                          135,
		"kKillEaterEvent_Clockwerk_RocketKills":                          136,
		"kKillEaterEvent_Clockwerk_BlindRocketKills":                     137,
		"kKillEaterEvent_StormSpirit_BallKills":                          138,
		"kKillEaterEvent_StormSpirit_DoubleRemnantKills":                 139,
		"kKillEaterEvent_StormSpirit_VortexKills":                        140,
		"kKillEaterEvent_Tinker_DoubleMissileKills":                      141,
		"kKillEaterEvent_Tinker_LaserKills":                              142,
		"kKillEaterEvent_Techies_SuicideKills":                           143,
		"kKillEaterEvent_Techies_LandMineKills":                          144,
		"kKillEaterEvent_Techies_StatisTrapStuns":                        145,
		"kKillEaterEvent_Techies_RemoteMineKills":                        146,
		"kKillEaterEvent_ShadowFiend_TripleRazeKills":                    147,
		"kKillEaterEvent_ShadowFiend_RequiemMultiKills":                  148,
		"kKillEaterEvent_ShadowFiend_QRazeKills":                         149,
		"kKillEaterEvent_ShadowFiend_WRazeKills":                         150,
		"kKillEaterEvent_ShadowFiend_ERazeKills":                         151,
		"kKillEaterEvent_Oracle_FatesEdictKills":                         152,
		"kKillEaterEvent_Oracle_FalsePromiseSaves":                       153,
		"kKillEaterEvent_Juggernaut_OmnislashKills":                      154,
		"kKillEaterEventType_SkeletonKing_SkeletonHeroKills":             157,
		"kKillEaterEventType_DarkWillow_CursedCrownTripleStuns":          158,
		"kKillEaterEventType_Dazzle_ShallowGraveSaves":                   159,
		"kKillEaterEventType_Dazzle_PoisonTouchKills":                    160,
		"kKillEaterEventType_ThreeManMeks":                               161,
		"kKillEaterEventType_Viper_PoisonAttackKills":                    162,
		"kKillEaterEventType_Viper_CorrosiveSkinKills":                   163,
		"kKillEaterEventType_ThreeHeroVeils":                             164,
		"kKillEaterEventType_Viper_KillsDuringViperStrike":               165,
		"kKillEaterEventType_SolarCrestKills":                            166,
		"kKillEaterEventType_Tiny_TreeThrowKills":                        167,
		"kKillEaterEventType_Riki_BackstabKills":                         168,
		"kKillEaterEventType_Phoenix_ThreeHeroSupernovaStuns":            169,
		"kKillEaterEventType_Terrorblade_MetamorphosisKills":             170,
		"kKillEaterEventType_Lion_GreatFingerKills":                      171,
		"kKillEaterEventType_Antimage_SpellsBlockedWithAghanims":         172,
		"kKillEaterEventType_Antimage_ThreeManManaVoids":                 173,
		"kKillEaterEventType_ArcWarden_TempestDoubleKills":               174,
		"kKillEaterEventType_ArcWarden_SparkWraithKills":                 175,
		"kKillEaterEventType_Bane_BrainSapKills":                         176,
		"kKillEaterEventType_Bane_FiendsGripKills":                       177,
		"kKillEaterEventType_Batrider_TripleHeroFlamebreaks":             178,
		"kKillEaterEventType_Batrider_DoubleHeroLassoes":                 179,
		"kKillEaterEventType_Brewmaster_KillsDuringPrimalSplit":          180,
		"kKillEaterEventType_Bristleback_KillsUnderFourQuillStacks":      181,
		"kKillEaterEventType_Bristleback_TripleHeroNasalGoo":             182,
		"kKillEaterEventType_Broodmother_SpiderlingHeroKills":            183,
		"kKillEaterEventType_Broodmother_KillsInsideWeb":                 184,
		"kKillEaterEventType_Centaur_ThreeHeroStampede":                  185,
		"kKillEaterEventType_ChaosKnight_RealityRiftKills":               186,
		"kKillEaterEventType_Chen_KillsWithPenitence":                    187,
		"kKillEaterEventType_CrystalMaiden_TwoHeroCrystalNovas":          188,
		"kKillEaterEventType_CrystalMaiden_ThreeHeroFreezingFields":      189,
		"kKillEaterEventType_Dazzle_ShadowWaveKills":                     190,
		"kKillEaterEventType_DeathProphet_SiphonKills":                   191,
		"kKillEaterEventType_DeathProphet_ExorcismKillsDuringEuls":       192,
		"kKillEaterEventType_Disruptor_ThreeHeroKineticFieldStaticStorm": 193,
		"kKillEaterEventType_Doom_InfernalBladeBurnKills":                194,
		"kKillEaterEventType_DrowRanger_PrecisionAuraCreepTowerKills":    195,
		"kKillEaterEventType_EmberSpirit_RemnantKills":                   196,
		"kKillEaterEventType_EmberSpirit_SleightOfFistKills":             197,
		"kKillEaterEventType_Enigma_MidnightPulseBlackHoleCombos":        198,
		"kKillEaterEventType_Enigma_ThreeManBlackHoles":                  199,
		"kKillEaterEventType_FacelessVoid_MultiHeroTimeDilation":         200,
		"kKillEaterEventType_Gyrocopter_ThreeHeroFlakCannon":             201,
		"kKillEaterEventType_Gyrocopter_HomingMissileKills":              202,
		"kKillEaterEventType_Gyrocopter_RocketBarrageKills":              203,
		"kKillEaterEventType_Huskar_KillsDuringLifeBreak":                204,
		"kKillEaterEventType_Huskar_BurningSpearKills":                   205,
		"kKillEaterEventType_Invoker_MultiHeroIceWall":                   206,
		"kKillEaterEventType_Invoker_ThreeHeroEMP":                       207,
		"kKillEaterEventType_Invoker_ThreeHeroDeafeningBlast":            208,
		"kKillEaterEventType_Invoker_MultiHeroChaosMeteor":               209,
		"kKillEaterEventType_Jakiro_MultiHeroDualBreath":                 210,
		"kKillEaterEventType_Jakiro_IcePathMacropyreCombos":              211,
		"kKillEaterEventType_Leshrac_PulseNovaKills":                     212,
		"kKillEaterEventType_Leshrac_ThreeHeroLightningStorm":            213,
		"kKillEaterEventType_Lion_ThreeHeroFingerOfDeath":                214,
		"kKillEaterEventType_Meepo_PoofKills":                            215,
		"kKillEaterEventType_Meepo_MultiHeroEarthbinds":                  216,
		"kKillEaterEventType_NightStalker_NighttimeKills":                217,
		"kKillEaterEventType_Morphling_KillsDuringReplicate":             218,
		"kKillEaterEventType_OgreMagi_FireblastKills":                    219,
		"kKillEaterEventType_OgreMagi_IgniteKills":                       220,
		"kKillEaterEventType_DominatingKillStreaks":                      221,
		"kKillEaterEventType_MegaKillStreaks":                            222,
		"kKillEaterEventType_Alchemist_AghanimsGiven":                    223,
		"kKillEaterEventType_VeilsLeadingToKills":                        224,
		"kKillEaterEventType_DustLeadingToKills":                         225,
		"kKillEaterEventType_WitchDoctor_MultiHeroCaskStuns":             226,
		"kKillEaterEventType_Weaver_ShukuchiKills":                       227,
		"kKillEaterEventType_Windrunner_ShackleFocusFireKills":           228,
		"kKillEaterEventType_VengefulSpirit_VengeanceAuraIllusionKills":  229,
		"kKillEaterEventType_Tusk_WalrusPunchKills":                      230,
		"kKillEaterEventType_Tinker_TripleHeroLasers":                    231,
		"kKillEaterEventType_TemplarAssassin_MultiHeroPsiBlades":         232,
		"kKillEaterEventType_Sven_KillsDuringGodsStrength":               233,
		"kKillEaterEventType_Sniper_ThreeHeroShrapnels":                  234,
		"kKillEaterEventType_Slark_KillsDuringShadowDance":               235,
		"kKillEaterEventType_ShadowShaman_MultiHeroEtherShocks":          236,
		"kKillEaterEventType_ShadowShaman_SerpentWardShackleKills":       237,
		"kKillEaterEventType_Riki_ThreeHeroTricksOfTheTrade":             238,
		"kKillEaterEventType_Razor_EyeOfTheStormKills":                   239,
		"kKillEaterEventType_Pugna_LifeDrainKills":                       240,
		"kKillEaterEventType_ObsidianDestroyer_SanitysEclipseKills":      241,
		"kKillEaterEventType_Oracle_MultiHeroFortunesEnd":                242,
		"kKillEaterEventType_Omniknight_PurificationKills":               243,
		"kKillEaterEventType_NightStalker_EnemyMissesUnderCripplingFear": 244,
		"kKillEaterEventType_Warlock_ThreeHeroFatalBonds":                245,
		"kKillEaterEventType_Riki_TricksOfTheTradeKills":                 246,
		"kKillEaterEventType_Earthshaker_AftershockHits10":               247,
		"kKillEaterEventType_Earthshaker_5HeroEchoslams":                 248,
		"kKillEaterEventType_Lina_LagunaBladeHeroKills":                  249,
		"kKillEaterEventType_Lina_LightStrikeHeroStuns":                  250,
		"kKillEaterEventType_Earthshaker_FissureMultiStuns":              251,
		"kKillEaterEventType_Earthshaker_TotemKills":                     252,
		"kKillEaterEventType_Pangolier_SwashbuckleKills":                 253,
		"kKillEaterEventType_Furion_EnemyHeroesTrapped":                  254,
		"kKillEaterEventType_Pangolier_HeartpiercerKills":                255,
		"kKillEaterEventType_Medusa_MultiHeroStoneGaze":                  256,
		"kKillEaterEventType_Medusa_SplitShotKills":                      257,
		"kKillEaterEventType_Mirana_MultiHeroStarstorm":                  258,
		"kKillEaterEventType_Mirana_KillsFromMoonlightShadow":            259,
		"kKillEaterEventType_Magnus_MultiHeroSkewers":                    260,
		"kKillEaterEventType_Magnus_MultiHeroReversePolarity":            261,
		"kKillEaterEventType_Magnus_HeroesSlowedWithShockwave":           262,
		"kKillEaterEventType_NagaSiren_MultiHeroSong":                    263,
		"kKillEaterEventType_NagaSiren_AlliesHealedBySong":               264,
		"kKillEaterEventType_LoneDruid_MultiHeroRoar":                    265,
		"kKillEaterEventType_LoneDruid_BattleCryKills":                   266,
		"kKillEaterEventType_WinterWyvern_ThreeHeroCurses":               267,
		"kKillEaterEventType_Antimage_SpellsBlockedWithCounterspell":     268,
		"kKillEaterEventType_Mars_EnemiesKilledInArena":                  269,
		"kKillEaterEventType_Mars_MultiHeroGodsRebuke":                   270,
		"kKillEaterEventType_Mars_GodsRebukeKills":                       271,
		"kKillEaterEventType_Snapfire_LizardBlobsKills":                  272,
		"kKillEaterEventType_Snapfire_TwoHeroCookieStuns":                273,
		"Custom_KillStreak":                                              274,
	}
)

func (x CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType) Enum() *CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType {
	p := new(CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType)
	*p = x
	return p
}

func (x CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_common_match_management_proto_enumTypes[12].Descriptor()
}

func (CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_common_match_management_proto_enumTypes[12]
}

func (x CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType(num)
	return nil
}

// Deprecated: Use CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType.Descriptor instead.
func (CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_match_management_proto_rawDescGZIP(), []int{19, 0, 0, 0}
}

type CSODOTAPartyMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartnerType             *PartnerAccountType `protobuf:"varint,1,opt,name=partner_type,json=partnerType,enum=dota.PartnerAccountType,def=0" json:"partner_type,omitempty"`
	IsCoach                 *bool               `protobuf:"varint,2,opt,name=is_coach,json=isCoach" json:"is_coach,omitempty"`
	RegionPingCodes         []uint32            `protobuf:"varint,4,rep,packed,name=region_ping_codes,json=regionPingCodes" json:"region_ping_codes,omitempty"`
	RegionPingTimes         []uint32            `protobuf:"varint,5,rep,packed,name=region_ping_times,json=regionPingTimes" json:"region_ping_times,omitempty"`
	RegionPingFailedBitmask *uint32             `protobuf:"varint,6,opt,name=region_ping_failed_bitmask,json=regionPingFailedBitmask" json:"region_ping_failed_bitmask,omitempty"`
	IsPlusSubscriber        *bool               `protobuf:"varint,10,opt,name=is_plus_subscriber,json=isPlusSubscriber" json:"is_plus_subscriber,omitempty"`
	TourneySkillLevel       *uint32             `protobuf:"varint,7,opt,name=tourney_skill_level,json=tourneySkillLevel" json:"tourney_skill_level,omitempty"`
	TourneyBuyin            *uint32             `protobuf:"varint,8,opt,name=tourney_buyin,json=tourneyBuyin" json:"tourney_buyin,omitempty"`
	TourneyPreventUntil     *uint32             `protobuf:"varint,9,opt,name=tourney_prevent_until,json=tourneyPreventUntil" json:"tourney_prevent_until,omitempty"`
	MmDataValid             *bool               `protobuf:"varint,13,opt,name=mm_data_valid,json=mmDataValid" json:"mm_data_valid,omitempty"`
	LaneSelectionFlags      *uint32             `protobuf:"varint,11,opt,name=lane_selection_flags,json=laneSelectionFlags" json:"lane_selection_flags,omitempty"`
	HighPriorityDisabled    *bool               `protobuf:"varint,14,opt,name=high_priority_disabled,json=highPriorityDisabled" json:"high_priority_disabled,omitempty"`
	HasHpResource           *bool               `protobuf:"varint,15,opt,name=has_hp_resource,json=hasHpResource" json:"has_hp_resource,omitempty"`
	JoinedFromPartyfinder   *bool               `protobuf:"varint,12,opt,name=joined_from_partyfinder,json=joinedFromPartyfinder" json:"joined_from_partyfinder,omitempty"`
}

// Default values for CSODOTAPartyMember fields.
const (
	Default_CSODOTAPartyMember_PartnerType = PartnerAccountType_PARTNER_NONE
)

func (x *CSODOTAPartyMember) Reset() {
	*x = CSODOTAPartyMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_match_management_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSODOTAPartyMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSODOTAPartyMember) ProtoMessage() {}

func (x *CSODOTAPartyMember) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_match_management_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSODOTAPartyMember.ProtoReflect.Descriptor instead.
func (*CSODOTAPartyMember) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_match_management_proto_rawDescGZIP(), []int{0}
}

func (x *CSODOTAPartyMember) GetPartnerType() PartnerAccountType {
	if x != nil && x.PartnerType != nil {
		return *x.PartnerType
	}
	return Default_CSODOTAPartyMember_PartnerType
}

func (x *CSODOTAPartyMember) GetIsCoach() bool {
	if x != nil && x.IsCoach != nil {
		return *x.IsCoach
	}
	return false
}

func (x *CSODOTAPartyMember) GetRegionPingCodes() []uint32 {
	if x != nil {
		return x.RegionPingCodes
	}
	return nil
}

func (x *CSODOTAPartyMember) GetRegionPingTimes() []uint32 {
	if x != nil {
		return x.RegionPingTimes
	}
	return nil
}

func (x *CSODOTAPartyMember) GetRegionPingFailedBitmask() uint32 {
	if x != nil && x.RegionPingFailedBitmask != nil {
		return *x.RegionPingFailedBitmask
	}
	return 0
}

func (x *CSODOTAPartyMember) GetIsPlusSubscriber() bool {
	if x != nil && x.IsPlusSubscriber != nil {
		return *x.IsPlusSubscriber
	}
	return false
}

func (x *CSODOTAPartyMember) GetTourneySkillLevel() uint32 {
	if x != nil && x.TourneySkillLevel != nil {
		return *x.TourneySkillLevel
	}
	return 0
}

func (x *CSODOTAPartyMember) GetTourneyBuyin() uint32 {
	if x != nil && x.TourneyBuyin != nil {
		return *x.TourneyBuyin
	}
	return 0
}

func (x *CSODOTAPartyMember) GetTourneyPreventUntil() uint32 {
	if x != nil && x.TourneyPreventUntil != nil {
		return *x.TourneyPreventUntil
	}
	return 0
}

func (x *CSODOTAPartyMember) GetMmDataValid() bool {
	if x != nil && x.MmDataValid != nil {
		return *x.MmDataValid
	}
	return false
}

func (x *CSODOTAPartyMember) GetLaneSelectionFlags() uint32 {
	if x != nil && x.LaneSelectionFlags != nil {
		return *x.LaneSelectionFlags
	}
	return 0
}

func (x *CSODOTAPartyMember) GetHighPriorityDisabled() bool {
	if x != nil && x.HighPriorityDisabled != nil {
		return *x.HighPriorityDisabled
	}
	return false
}

func (x *CSODOTAPartyMember) GetHasHpResource() bool {
	if x != nil && x.HasHpResource != nil {
		return *x.HasHpResource
	}
	return false
}

func (x *CSODOTAPartyMember) GetJoinedFromPartyfinder() bool {
	if x != nil && x.JoinedFromPartyfinder != nil {
		return *x.JoinedFromPartyfinder
	}
	return false
}

type CSODOTAParty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartyId                         *uint64                     `protobuf:"varint,1,opt,name=party_id,json=partyId" json:"party_id,omitempty"`
	LeaderId                        *uint64                     `protobuf:"fixed64,2,opt,name=leader_id,json=leaderId" json:"leader_id,omitempty"`
	MemberIds                       []uint64                    `protobuf:"fixed64,3,rep,name=member_ids,json=memberIds" json:"member_ids,omitempty"`
	GameModes                       *uint32                     `protobuf:"varint,4,opt,name=game_modes,json=gameModes" json:"game_modes,omitempty"`
	State                           *CSODOTAParty_State         `protobuf:"varint,6,opt,name=state,enum=dota.CSODOTAParty_State,def=0" json:"state,omitempty"`
	EffectiveStartedMatchmakingTime *uint32                     `protobuf:"varint,7,opt,name=effective_started_matchmaking_time,json=effectiveStartedMatchmakingTime" json:"effective_started_matchmaking_time,omitempty"`
	RawStartedMatchmakingTime       *uint32                     `protobuf:"varint,32,opt,name=raw_started_matchmaking_time,json=rawStartedMatchmakingTime" json:"raw_started_matchmaking_time,omitempty"`
	AttemptStartTime                *uint32                     `protobuf:"varint,33,opt,name=attempt_start_time,json=attemptStartTime" json:"attempt_start_time,omitempty"`
	AttemptNum                      *uint32                     `protobuf:"varint,34,opt,name=attempt_num,json=attemptNum" json:"attempt_num,omitempty"`
	Matchgroups                     *uint32                     `protobuf:"varint,11,opt,name=matchgroups" json:"matchgroups,omitempty"`
	LowPriorityAccountId            *uint32                     `protobuf:"varint,19,opt,name=low_priority_account_id,json=lowPriorityAccountId" json:"low_priority_account_id,omitempty"`
	MatchType                       *MatchType                  `protobuf:"varint,21,opt,name=match_type,json=matchType,enum=dota.MatchType,def=0" json:"match_type,omitempty"`
	BotDifficulty                   *DOTABotDifficulty          `protobuf:"varint,22,opt,name=bot_difficulty,json=botDifficulty,enum=dota.DOTABotDifficulty,def=0" json:"bot_difficulty,omitempty"`
	TeamId                          *uint32                     `protobuf:"varint,23,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	TeamName                        *string                     `protobuf:"bytes,51,opt,name=team_name,json=teamName" json:"team_name,omitempty"`
	TeamUiLogo                      *uint64                     `protobuf:"varint,52,opt,name=team_ui_logo,json=teamUiLogo" json:"team_ui_logo,omitempty"`
	TeamBaseLogo                    *uint64                     `protobuf:"varint,53,opt,name=team_base_logo,json=teamBaseLogo" json:"team_base_logo,omitempty"`
	MatchDisabledUntilDate          *uint32                     `protobuf:"varint,24,opt,name=match_disabled_until_date,json=matchDisabledUntilDate" json:"match_disabled_until_date,omitempty"`
	MatchDisabledAccountId          *uint32                     `protobuf:"varint,25,opt,name=match_disabled_account_id,json=matchDisabledAccountId" json:"match_disabled_account_id,omitempty"`
	MatchmakingMaxRangeMinutes      *uint32                     `protobuf:"varint,26,opt,name=matchmaking_max_range_minutes,json=matchmakingMaxRangeMinutes" json:"matchmaking_max_range_minutes,omitempty"`
	Matchlanguages                  *uint32                     `protobuf:"varint,27,opt,name=matchlanguages" json:"matchlanguages,omitempty"`
	Members                         []*CSODOTAPartyMember       `protobuf:"bytes,29,rep,name=members" json:"members,omitempty"`
	LowPriorityGamesRemaining       *uint32                     `protobuf:"varint,35,opt,name=low_priority_games_remaining,json=lowPriorityGamesRemaining" json:"low_priority_games_remaining,omitempty"`
	OpenForJoinRequests             *bool                       `protobuf:"varint,40,opt,name=open_for_join_requests,json=openForJoinRequests" json:"open_for_join_requests,omitempty"`
	SentInvites                     []*CSODOTAPartyInvite       `protobuf:"bytes,41,rep,name=sent_invites,json=sentInvites" json:"sent_invites,omitempty"`
	RecvInvites                     []*CSODOTAPartyInvite       `protobuf:"bytes,42,rep,name=recv_invites,json=recvInvites" json:"recv_invites,omitempty"`
	AccountFlags                    *uint32                     `protobuf:"varint,43,opt,name=account_flags,json=accountFlags" json:"account_flags,omitempty"`
	RegionSelectFlags               *uint32                     `protobuf:"varint,44,opt,name=region_select_flags,json=regionSelectFlags" json:"region_select_flags,omitempty"`
	ExclusiveTournamentId           *uint32                     `protobuf:"varint,45,opt,name=exclusive_tournament_id,json=exclusiveTournamentId" json:"exclusive_tournament_id,omitempty"`
	TourneyDivisionId               *uint32                     `protobuf:"varint,47,opt,name=tourney_division_id,json=tourneyDivisionId" json:"tourney_division_id,omitempty"`
	TourneyScheduleTime             *uint32                     `protobuf:"varint,48,opt,name=tourney_schedule_time,json=tourneyScheduleTime" json:"tourney_schedule_time,omitempty"`
	TourneySkillLevel               *uint32                     `protobuf:"varint,49,opt,name=tourney_skill_level,json=tourneySkillLevel" json:"tourney_skill_level,omitempty"`
	TourneyBracketRound             *uint32                     `protobuf:"varint,50,opt,name=tourney_bracket_round,json=tourneyBracketRound" json:"tourney_bracket_round,omitempty"`
	TourneyQueueDeadlineTime        *uint32                     `protobuf:"varint,54,opt,name=tourney_queue_deadline_time,json=tourneyQueueDeadlineTime" json:"tourney_queue_deadline_time,omitempty"`
	TourneyQueueDeadlineState       *ETourneyQueueDeadlineState `protobuf:"varint,55,opt,name=tourney_queue_deadline_state,json=tourneyQueueDeadlineState,enum=dota.ETourneyQueueDeadlineState,def=0" json:"tourney_queue_deadline_state,omitempty"`
	PartyBuilderSlotsToFill         *uint32                     `protobuf:"varint,56,opt,name=party_builder_slots_to_fill,json=partyBuilderSlotsToFill" json:"party_builder_slots_to_fill,omitempty"`
	PartyBuilderMatchGroups         *uint32                     `protobuf:"varint,57,opt,name=party_builder_match_groups,json=partyBuilderMatchGroups" json:"party_builder_match_groups,omitempty"`
	PartyBuilderStartTime           *uint32                     `protobuf:"varint,58,opt,name=party_builder_start_time,json=partyBuilderStartTime" json:"party_builder_start_time,omitempty"`
	SoloQueue                       *bool                       `protobuf:"varint,59,opt,name=solo_queue,json=soloQueue" json:"solo_queue,omitempty"`
	BotScriptIndex                  *uint32                     `protobuf:"varint,60,opt,name=bot_script_index,json=botScriptIndex" json:"bot_script_index,omitempty"`
	SteamClanAccountId              *uint32                     `protobuf:"varint,61,opt,name=steam_clan_account_id,json=steamClanAccountId" json:"steam_clan_account_id,omitempty"`
	ReadyCheck                      *CMsgReadyCheckStatus       `protobuf:"bytes,62,opt,name=ready_check,json=readyCheck" json:"ready_check,omitempty"`
	CustomGameDisabledUntilDate     *uint32                     `protobuf:"varint,63,opt,name=custom_game_disabled_until_date,json=customGameDisabledUntilDate" json:"custom_game_disabled_until_date,omitempty"`
	CustomGameDisabledAccountId     *uint32                     `protobuf:"varint,64,opt,name=custom_game_disabled_account_id,json=customGameDisabledAccountId" json:"custom_game_disabled_account_id,omitempty"`
	IsChallengeMatch                *bool                       `protobuf:"varint,65,opt,name=is_challenge_match,json=isChallengeMatch" json:"is_challenge_match,omitempty"`
	PartySearchBeaconActive         *bool                       `protobuf:"varint,66,opt,name=party_search_beacon_active,json=partySearchBeaconActive" json:"party_search_beacon_active,omitempty"`
	MatchmakingFlags                *uint32                     `protobuf:"varint,67,opt,name=matchmaking_flags,json=matchmakingFlags" json:"matchmaking_flags,omitempty"`
	HighPriorityState               *EHighPriorityMMState       `protobuf:"varint,68,opt,name=high_priority_state,json=highPriorityState,enum=dota.EHighPriorityMMState,def=0" json:"high_priority_state,omitempty"`
	LaneSelectionsEnabled           *bool                       `protobuf:"varint,69,opt,name=lane_selections_enabled,json=laneSelectionsEnabled" json:"lane_selections_enabled,omitempty"`
	CustomGameDifficultyMask        *uint32                     `protobuf:"varint,70,opt,name=custom_game_difficulty_mask,json=customGameDifficultyMask" json:"custom_game_difficulty_mask,omitempty"`
}

// Default values for CSODOTAParty fields.
const (
	Default_CSODOTAParty_State                     = CSODOTAParty_UI
	Default_CSODOTAParty_MatchType                 = MatchType_MATCH_TYPE_CASUAL
	Default_CSODOTAParty_BotDifficulty             = DOTABotDifficulty_BOT_DIFFICULTY_PASSIVE
	Default_CSODOTAParty_TourneyQueueDeadlineState = ETourneyQueueDeadlineState_k_ETourneyQueueDeadlineState_Normal
	Default_CSODOTAParty_HighPriorityState         = EHighPriorityMMState_k_EHighPriorityMM_Unknown
)

func (x *CSODOTAParty) Reset() {
	*x = CSODOTAParty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_match_management_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSODOTAParty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSODOTAParty) ProtoMessage() {}

func (x *CSODOTAParty) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_match_management_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSODOTAParty.ProtoReflect.Descriptor instead.
func (*CSODOTAParty) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_match_management_proto_rawDescGZIP(), []int{1}
}

func (x *CSODOTAParty) GetPartyId() uint64 {
	if x != nil && x.PartyId != nil {
		return *x.PartyId
	}
	return 0
}

func (x *CSODOTAParty) GetLeaderId() uint64 {
	if x != nil && x.LeaderId != nil {
		return *x.LeaderId
	}
	return 0
}

func (x *CSODOTAParty) GetMemberIds() []uint64 {
	if x != nil {
		return x.MemberIds
	}
	return nil
}

func (x *CSODOTAParty) GetGameModes() uint32 {
	if x != nil && x.GameModes != nil {
		return *x.GameModes
	}
	return 0
}

func (x *CSODOTAParty) GetState() CSODOTAParty_State {
	if x != nil && x.State != nil {
		return *x.State
	}
	return Default_CSODOTAParty_State
}

func (x *CSODOTAParty) GetEffectiveStartedMatchmakingTime() uint32 {
	if x != nil && x.EffectiveStartedMatchmakingTime != nil {
		return *x.EffectiveStartedMatchmakingTime
	}
	return 0
}

func (x *CSODOTAParty) GetRawStartedMatchmakingTime() uint32 {
	if x != nil && x.RawStartedMatchmakingTime != nil {
		return *x.RawStartedMatchmakingTime
	}
	return 0
}

func (x *CSODOTAParty) GetAttemptStartTime() uint32 {
	if x != nil && x.AttemptStartTime != nil {
		return *x.AttemptStartTime
	}
	return 0
}

func (x *CSODOTAParty) GetAttemptNum() uint32 {
	if x != nil && x.AttemptNum != nil {
		return *x.AttemptNum
	}
	return 0
}

func (x *CSODOTAParty) GetMatchgroups() uint32 {
	if x != nil && x.Matchgroups != nil {
		return *x.Matchgroups
	}
	return 0
}

func (x *CSODOTAParty) GetLowPriorityAccountId() uint32 {
	if x != nil && x.LowPriorityAccountId != nil {
		return *x.LowPriorityAccountId
	}
	return 0
}

func (x *CSODOTAParty) GetMatchType() MatchType {
	if x != nil && x.MatchType != nil {
		return *x.MatchType
	}
	return Default_CSODOTAParty_MatchType
}

func (x *CSODOTAParty) GetBotDifficulty() DOTABotDifficulty {
	if x != nil && x.BotDifficulty != nil {
		return *x.BotDifficulty
	}
	return Default_CSODOTAParty_BotDifficulty
}

func (x *CSODOTAParty) GetTeamId() uint32 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

func (x *CSODOTAParty) GetTeamName() string {
	if x != nil && x.TeamName != nil {
		return *x.TeamName
	}
	return ""
}

func (x *CSODOTAParty) GetTeamUiLogo() uint64 {
	if x != nil && x.TeamUiLogo != nil {
		return *x.TeamUiLogo
	}
	return 0
}

func (x *CSODOTAParty) GetTeamBaseLogo() uint64 {
	if x != nil && x.TeamBaseLogo != nil {
		return *x.TeamBaseLogo
	}
	return 0
}

func (x *CSODOTAParty) GetMatchDisabledUntilDate() uint32 {
	if x != nil && x.MatchDisabledUntilDate != nil {
		return *x.MatchDisabledUntilDate
	}
	return 0
}

func (x *CSODOTAParty) GetMatchDisabledAccountId() uint32 {
	if x != nil && x.MatchDisabledAccountId != nil {
		return *x.MatchDisabledAccountId
	}
	return 0
}

func (x *CSODOTAParty) GetMatchmakingMaxRangeMinutes() uint32 {
	if x != nil && x.MatchmakingMaxRangeMinutes != nil {
		return *x.MatchmakingMaxRangeMinutes
	}
	return 0
}

func (x *CSODOTAParty) GetMatchlanguages() uint32 {
	if x != nil && x.Matchlanguages != nil {
		return *x.Matchlanguages
	}
	return 0
}

func (x *CSODOTAParty) GetMembers() []*CSODOTAPartyMember {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *CSODOTAParty) GetLowPriorityGamesRemaining() uint32 {
	if x != nil && x.LowPriorityGamesRemaining != nil {
		return *x.LowPriorityGamesRemaining
	}
	return 0
}

func (x *CSODOTAParty) GetOpenForJoinRequests() bool {
	if x != nil && x.OpenForJoinRequests != nil {
		return *x.OpenForJoinRequests
	}
	return false
}

func (x *CSODOTAParty) GetSentInvites() []*CSODOTAPartyInvite {
	if x != nil {
		return x.SentInvites
	}
	return nil
}

func (x *CSODOTAParty) GetRecvInvites() []*CSODOTAPartyInvite {
	if x != nil {
		return x.RecvInvites
	}
	return nil
}

func (x *CSODOTAParty) GetAccountFlags() uint32 {
	if x != nil && x.AccountFlags != nil {
		return *x.AccountFlags
	}
	return 0
}

func (x *CSODOTAParty) GetRegionSelectFlags() uint32 {
	if x != nil && x.RegionSelectFlags != nil {
		return *x.RegionSelectFlags
	}
	return 0
}

func (x *CSODOTAParty) GetExclusiveTournamentId() uint32 {
	if x != nil && x.ExclusiveTournamentId != nil {
		return *x.ExclusiveTournamentId
	}
	return 0
}

func (x *CSODOTAParty) GetTourneyDivisionId() uint32 {
	if x != nil && x.TourneyDivisionId != nil {
		return *x.TourneyDivisionId
	}
	return 0
}

func (x *CSODOTAParty) GetTourneyScheduleTime() uint32 {
	if x != nil && x.TourneyScheduleTime != nil {
		return *x.TourneyScheduleTime
	}
	return 0
}

func (x *CSODOTAParty) GetTourneySkillLevel() uint32 {
	if x != nil && x.TourneySkillLevel != nil {
		return *x.TourneySkillLevel
	}
	return 0
}

func (x *CSODOTAParty) GetTourneyBracketRound() uint32 {
	if x != nil && x.TourneyBracketRound != nil {
		return *x.TourneyBracketRound
	}
	return 0
}

func (x *CSODOTAParty) GetTourneyQueueDeadlineTime() uint32 {
	if x != nil && x.TourneyQueueDeadlineTime != nil {
		return *x.TourneyQueueDeadlineTime
	}
	return 0
}

func (x *CSODOTAParty) GetTourneyQueueDeadlineState() ETourneyQueueDeadlineState {
	if x != nil && x.TourneyQueueDeadlineState != nil {
		return *x.TourneyQueueDeadlineState
	}
	return Default_CSODOTAParty_TourneyQueueDeadlineState
}

func (x *CSODOTAParty) GetPartyBuilderSlotsToFill() uint32 {
	if x != nil && x.PartyBuilderSlotsToFill != nil {
		return *x.PartyBuilderSlotsToFill
	}
	return 0
}

func (x *CSODOTAParty) GetPartyBuilderMatchGroups() uint32 {
	if x != nil && x.PartyBuilderMatchGroups != nil {
		return *x.PartyBuilderMatchGroups
	}
	return 0
}

func (x *CSODOTAParty) GetPartyBuilderStartTime() uint32 {
	if x != nil && x.PartyBuilderStartTime != nil {
		return *x.PartyBuilderStartTime
	}
	return 0
}

func (x *CSODOTAParty) GetSoloQueue() bool {
	if x != nil && x.SoloQueue != nil {
		return *x.SoloQueue
	}
	return false
}

func (x *CSODOTAParty) GetBotScriptIndex() uint32 {
	if x != nil && x.BotScriptIndex != nil {
		return *x.BotScriptIndex
	}
	return 0
}

func (x *CSODOTAParty) GetSteamClanAccountId() uint32 {
	if x != nil && x.SteamClanAccountId != nil {
		return *x.SteamClanAccountId
	}
	return 0
}

func (x *CSODOTAParty) GetReadyCheck() *CMsgReadyCheckStatus {
	if x != nil {
		return x.ReadyCheck
	}
	return nil
}

func (x *CSODOTAParty) GetCustomGameDisabledUntilDate() uint32 {
	if x != nil && x.CustomGameDisabledUntilDate != nil {
		return *x.CustomGameDisabledUntilDate
	}
	return 0
}

func (x *CSODOTAParty) GetCustomGameDisabledAccountId() uint32 {
	if x != nil && x.CustomGameDisabledAccountId != nil {
		return *x.CustomGameDisabledAccountId
	}
	return 0
}

func (x *CSODOTAParty) GetIsChallengeMatch() bool {
	if x != nil && x.IsChallengeMatch != nil {
		return *x.IsChallengeMatch
	}
	return false
}

func (x *CSODOTAParty) GetPartySearchBeaconActive() bool {
	if x != nil && x.PartySearchBeaconActive != nil {
		return *x.PartySearchBeaconActive
	}
	return false
}

func (x *CSODOTAParty) GetMatchmakingFlags() uint32 {
	if x != nil && x.MatchmakingFlags != nil {
		return *x.MatchmakingFlags
	}
	return 0
}

func (x *CSODOTAParty) GetHighPriorityState() EHighPriorityMMState {
	if x != nil && x.HighPriorityState != nil {
		return *x.HighPriorityState
	}
	return Default_CSODOTAParty_HighPriorityState
}

func (x *CSODOTAParty) GetLaneSelectionsEnabled() bool {
	if x != nil && x.LaneSelectionsEnabled != nil {
		return *x.LaneSelectionsEnabled
	}
	return false
}

func (x *CSODOTAParty) GetCustomGameDifficultyMask() uint32 {
	if x != nil && x.CustomGameDifficultyMask != nil {
		return *x.CustomGameDifficultyMask
	}
	return 0
}

type CSODOTAPartyInvite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId           *uint64                           `protobuf:"varint,1,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	SenderId          *uint64                           `protobuf:"fixed64,2,opt,name=sender_id,json=senderId" json:"sender_id,omitempty"`
	SenderName        *string                           `protobuf:"bytes,3,opt,name=sender_name,json=senderName" json:"sender_name,omitempty"`
	Members           []*CSODOTAPartyInvite_PartyMember `protobuf:"bytes,4,rep,name=members" json:"members,omitempty"`
	TeamId            *uint32                           `protobuf:"varint,5,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	LowPriorityStatus *bool                             `protobuf:"varint,6,opt,name=low_priority_status,json=lowPriorityStatus" json:"low_priority_status,omitempty"`
	AsCoach           *bool                             `protobuf:"varint,7,opt,name=as_coach,json=asCoach" json:"as_coach,omitempty"`
	InviteGid         *uint64                           `protobuf:"fixed64,8,opt,name=invite_gid,json=inviteGid" json:"invite_gid,omitempty"`
}

func (x *CSODOTAPartyInvite) Reset() {
	*x = CSODOTAPartyInvite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_match_management_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSODOTAPartyInvite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSODOTAPartyInvite) ProtoMessage() {}

func (x *CSODOTAPartyInvite) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_match_management_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSODOTAPartyInvite.ProtoReflect.Descriptor instead.
func (*CSODOTAPartyInvite) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_match_management_proto_rawDescGZIP(), []int{2}
}

func (x *CSODOTAPartyInvite) GetGroupId() uint64 {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return 0
}

func (x *CSODOTAPartyInvite) GetSenderId() uint64 {
	if x != nil && x.SenderId != nil {
		return *x.SenderId
	}
	return 0
}

func (x *CSODOTAPartyInvite) GetSenderName() string {
	if x != nil && x.SenderName != nil {
		return *x.SenderName
	}
	return ""
}

func (x *CSODOTAPartyInvite) GetMembers() []*CSODOTAPartyInvite_PartyMember {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *CSODOTAPartyInvite) GetTeamId() uint32 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

func (x *CSODOTAPartyInvite) GetLowPriorityStatus() bool {
	if x != nil && x.LowPriorityStatus != nil {
		return *x.LowPriorityStatus
	}
	return false
}

func (x *CSODOTAPartyInvite) GetAsCoach() bool {
	if x != nil && x.AsCoach != nil {
		return *x.AsCoach
	}
	return false
}

func (x *CSODOTAPartyInvite) GetInviteGid() uint64 {
	if x != nil && x.InviteGid != nil {
		return *x.InviteGid
	}
	return 0
}

type CSODOTALobbyInvite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId             *uint64                           `protobuf:"varint,1,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	SenderId            *uint64                           `protobuf:"fixed64,2,opt,name=sender_id,json=senderId" json:"sender_id,omitempty"`
	SenderName          *string                           `protobuf:"bytes,3,opt,name=sender_name,json=senderName" json:"sender_name,omitempty"`
	Members             []*CSODOTALobbyInvite_LobbyMember `protobuf:"bytes,4,rep,name=members" json:"members,omitempty"`
	CustomGameId        *uint64                           `protobuf:"varint,5,opt,name=custom_game_id,json=customGameId" json:"custom_game_id,omitempty"`
	InviteGid           *uint64                           `protobuf:"fixed64,6,opt,name=invite_gid,json=inviteGid" json:"invite_gid,omitempty"`
	CustomGameCrc       *uint64                           `protobuf:"fixed64,7,opt,name=custom_game_crc,json=customGameCrc" json:"custom_game_crc,omitempty"`
	CustomGameTimestamp *uint32                           `protobuf:"fixed32,8,opt,name=custom_game_timestamp,json=customGameTimestamp" json:"custom_game_timestamp,omitempty"`
}

func (x *CSODOTALobbyInvite) Reset() {
	*x = CSODOTALobbyInvite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_match_management_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSODOTALobbyInvite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSODOTALobbyInvite) ProtoMessage() {}

func (x *CSODOTALobbyInvite) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_match_management_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSODOTALobbyInvite.ProtoReflect.Descriptor instead.
func (*CSODOTALobbyInvite) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_match_management_proto_rawDescGZIP(), []int{3}
}

func (x *CSODOTALobbyInvite) GetGroupId() uint64 {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return 0
}

func (x *CSODOTALobbyInvite) GetSenderId() uint64 {
	if x != nil && x.SenderId != nil {
		return *x.SenderId
	}
	return 0
}

func (x *CSODOTALobbyInvite) GetSenderName() string {
	if x != nil && x.SenderName != nil {
		return *x.SenderName
	}
	return ""
}

func (x *CSODOTALobbyInvite) GetMembers() []*CSODOTALobbyInvite_LobbyMember {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *CSODOTALobbyInvite) GetCustomGameId() uint64 {
	if x != nil && x.CustomGameId != nil {
		return *x.CustomGameId
	}
	return 0
}

func (x *CSODOTALobbyInvite) GetInviteGid() uint64 {
	if x != nil && x.InviteGid != nil {
		return *x.InviteGid
	}
	return 0
}

func (x *CSODOTALobbyInvite) GetCustomGameCrc() uint64 {
	if x != nil && x.CustomGameCrc != nil {
		return *x.CustomGameCrc
	}
	return 0
}

func (x *CSODOTALobbyInvite) GetCustomGameTimestamp() uint32 {
	if x != nil && x.CustomGameTimestamp != nil {
		return *x.CustomGameTimestamp
	}
	return 0
}

type CMsgLeaverState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LobbyState          *uint32         `protobuf:"varint,1,opt,name=lobby_state,json=lobbyState" json:"lobby_state,omitempty"`
	GameState           *DOTA_GameState `protobuf:"varint,2,opt,name=game_state,json=gameState,enum=dota.DOTA_GameState,def=0" json:"game_state,omitempty"`
	LeaverDetected      *bool           `protobuf:"varint,3,opt,name=leaver_detected,json=leaverDetected" json:"leaver_detected,omitempty"`
	FirstBloodHappened  *bool           `protobuf:"varint,4,opt,name=first_blood_happened,json=firstBloodHappened" json:"first_blood_happened,omitempty"`
	DiscardMatchResults *bool           `protobuf:"varint,5,opt,name=discard_match_results,json=discardMatchResults" json:"discard_match_results,omitempty"`
	MassDisconnect      *bool           `protobuf:"varint,6,opt,name=mass_disconnect,json=massDisconnect" json:"mass_disconnect,omitempty"`
}

// Default values for CMsgLeaverState fields.
const (
	Default_CMsgLeaverState_GameState = DOTA_GameState_DOTA_GAMERULES_STATE_INIT
)

func (x *CMsgLeaverState) Reset() {
	*x = CMsgLeaverState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_match_management_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgLeaverState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgLeaverState) ProtoMessage() {}

func (x *CMsgLeaverState) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_match_management_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgLeaverState.ProtoReflect.Descriptor instead.
func (*CMsgLeaverState) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_match_management_proto_rawDescGZIP(), []int{4}
}

func (x *CMsgLeaverState) GetLobbyState() uint32 {
	if x != nil && x.LobbyState != nil {
		return *x.LobbyState
	}
	return 0
}

func (x *CMsgLeaverState) GetGameState() DOTA_GameState {
	if x != nil && x.GameState != nil {
		return *x.GameState
	}
	return Default_CMsgLeaverState_GameState
}

func (x *CMsgLeaverState) GetLeaverDetected() bool {
	if x != nil && x.LeaverDetected != nil {
		return *x.LeaverDetected
	}
	return false
}

func (x *CMsgLeaverState) GetFirstBloodHappened() bool {
	if x != nil && x.FirstBloodHappened != nil {
		return *x.FirstBloodHappened
	}
	return false
}

func (x *CMsgLeaverState) GetDiscardMatchResults() bool {
	if x != nil && x.DiscardMatchResults != nil {
		return *x.DiscardMatchResults
	}
	return false
}

func (x *CMsgLeaverState) GetMassDisconnect() bool {
	if x != nil && x.MassDisconnect != nil {
		return *x.MassDisconnect
	}
	return false
}

type CSODOTALobbyMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     *uint64                  `protobuf:"fixed64,1,opt,name=id" json:"id,omitempty"`
	HeroId                 *uint32                  `protobuf:"varint,2,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	Team                   *DOTA_GC_TEAM            `protobuf:"varint,3,opt,name=team,enum=dota.DOTA_GC_TEAM,def=0" json:"team,omitempty"`
	Name                   *string                  `protobuf:"bytes,6,opt,name=name" json:"name,omitempty"`
	Slot                   *uint32                  `protobuf:"varint,7,opt,name=slot" json:"slot,omitempty"`
	PartyId                *uint64                  `protobuf:"varint,12,opt,name=party_id,json=partyId" json:"party_id,omitempty"`
	MetaLevel              *uint32                  `protobuf:"varint,13,opt,name=meta_level,json=metaLevel" json:"meta_level,omitempty"`
	MetaXp                 *uint32                  `protobuf:"varint,14,opt,name=meta_xp,json=metaXp" json:"meta_xp,omitempty"`
	MetaXpAwarded          *uint32                  `protobuf:"varint,15,opt,name=meta_xp_awarded,json=metaXpAwarded" json:"meta_xp_awarded,omitempty"`
	LeaverStatus           *DOTALeaverStatusT       `protobuf:"varint,16,opt,name=leaver_status,json=leaverStatus,enum=dota.DOTALeaverStatusT,def=0" json:"leaver_status,omitempty"`
	LeaverActions          *uint32                  `protobuf:"varint,28,opt,name=leaver_actions,json=leaverActions" json:"leaver_actions,omitempty"`
	Channel                *uint32                  `protobuf:"varint,17,opt,name=channel,def=6" json:"channel,omitempty"`
	DisabledHeroId         []uint32                 `protobuf:"varint,20,rep,name=disabled_hero_id,json=disabledHeroId" json:"disabled_hero_id,omitempty"`
	PartnerAccountType     *PartnerAccountType      `protobuf:"varint,21,opt,name=partner_account_type,json=partnerAccountType,enum=dota.PartnerAccountType,def=0" json:"partner_account_type,omitempty"`
	EnabledHeroId          []uint32                 `protobuf:"varint,22,rep,name=enabled_hero_id,json=enabledHeroId" json:"enabled_hero_id,omitempty"`
	CoachTeam              *DOTA_GC_TEAM            `protobuf:"varint,23,opt,name=coach_team,json=coachTeam,enum=dota.DOTA_GC_TEAM,def=5" json:"coach_team,omitempty"`
	CoachRating            *uint32                  `protobuf:"varint,42,opt,name=coach_rating,json=coachRating" json:"coach_rating,omitempty"`
	PwrdCyberCafeId        *uint32                  `protobuf:"varint,24,opt,name=pwrd_cyber_cafe_id,json=pwrdCyberCafeId" json:"pwrd_cyber_cafe_id,omitempty"`
	PwrdCyberCafeName      *string                  `protobuf:"bytes,25,opt,name=pwrd_cyber_cafe_name,json=pwrdCyberCafeName" json:"pwrd_cyber_cafe_name,omitempty"`
	DisabledRandomHeroBits []uint32                 `protobuf:"fixed32,41,rep,name=disabled_random_hero_bits,json=disabledRandomHeroBits" json:"disabled_random_hero_bits,omitempty"`
	RankChange             *int32                   `protobuf:"zigzag32,29,opt,name=rank_change,json=rankChange" json:"rank_change,omitempty"`
	Cameraman              *bool                    `protobuf:"varint,30,opt,name=cameraman" json:"cameraman,omitempty"`
	CustomGameProductIds   []uint32                 `protobuf:"varint,31,rep,name=custom_game_product_ids,json=customGameProductIds" json:"custom_game_product_ids,omitempty"`
	SearchMatchType        *MatchType               `protobuf:"varint,33,opt,name=search_match_type,json=searchMatchType,enum=dota.MatchType,def=0" json:"search_match_type,omitempty"`
	FavoriteTeamPacked     *uint64                  `protobuf:"varint,35,opt,name=favorite_team_packed,json=favoriteTeamPacked" json:"favorite_team_packed,omitempty"`
	IsPlusSubscriber       *bool                    `protobuf:"varint,36,opt,name=is_plus_subscriber,json=isPlusSubscriber" json:"is_plus_subscriber,omitempty"`
	RankTierUpdated        *bool                    `protobuf:"varint,37,opt,name=rank_tier_updated,json=rankTierUpdated" json:"rank_tier_updated,omitempty"`
	LaneSelectionFlags     *uint32                  `protobuf:"varint,38,opt,name=lane_selection_flags,json=laneSelectionFlags" json:"lane_selection_flags,omitempty"`
	CanEarnRewards         *bool                    `protobuf:"varint,39,opt,name=can_earn_rewards,json=canEarnRewards" json:"can_earn_rewards,omitempty"`
	LiveSpectatorTeam      *DOTA_GC_TEAM            `protobuf:"varint,40,opt,name=live_spectator_team,json=liveSpectatorTeam,enum=dota.DOTA_GC_TEAM,def=5" json:"live_spectator_team,omitempty"`
	WasMvpLastGame         *bool                    `protobuf:"varint,43,opt,name=was_mvp_last_game,json=wasMvpLastGame" json:"was_mvp_last_game,omitempty"`
	PendingAwards          []*CMsgPendingEventAward `protobuf:"bytes,44,rep,name=pending_awards,json=pendingAwards" json:"pending_awards,omitempty"`
	PendingAwardsOnVictory []*CMsgPendingEventAward `protobuf:"bytes,45,rep,name=pending_awards_on_victory,json=pendingAwardsOnVictory" json:"pending_awards_on_victory,omitempty"`
	RankMmrBoostType       *EDOTAMMRBoostType       `protobuf:"varint,46,opt,name=rank_mmr_boost_type,json=rankMmrBoostType,enum=dota.EDOTAMMRBoostType,def=0" json:"rank_mmr_boost_type,omitempty"`
	QueuePointAdjustment   *int32                   `protobuf:"zigzag32,47,opt,name=queue_point_adjustment,json=queuePointAdjustment" json:"queue_point_adjustment,omitempty"`
	RankTier               *int32                   `protobuf:"varint,48,opt,name=rank_tier,json=rankTier" json:"rank_tier,omitempty"`
	Title                  *uint32                  `protobuf:"varint,50,opt,name=title" json:"title,omitempty"`
	GuildId                *uint32                  `protobuf:"varint,51,opt,name=guild_id,json=guildId" json:"guild_id,omitempty"`
}

// Default values for CSODOTALobbyMember fields.
const (
	Default_CSODOTALobbyMember_Team               = DOTA_GC_TEAM_DOTA_GC_TEAM_GOOD_GUYS
	Default_CSODOTALobbyMember_LeaverStatus       = DOTALeaverStatusT_DOTA_LEAVER_NONE
	Default_CSODOTALobbyMember_Channel            = uint32(6)
	Default_CSODOTALobbyMember_PartnerAccountType = PartnerAccountType_PARTNER_NONE
	Default_CSODOTALobbyMember_CoachTeam          = DOTA_GC_TEAM_DOTA_GC_TEAM_NOTEAM
	Default_CSODOTALobbyMember_SearchMatchType    = MatchType_MATCH_TYPE_CASUAL
	Default_CSODOTALobbyMember_LiveSpectatorTeam  = DOTA_GC_TEAM_DOTA_GC_TEAM_NOTEAM
	Default_CSODOTALobbyMember_RankMmrBoostType   = EDOTAMMRBoostType_k_EDOTAMMRBoostType_None
)

func (x *CSODOTALobbyMember) Reset() {
	*x = CSODOTALobbyMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_match_management_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSODOTALobbyMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSODOTALobbyMember) ProtoMessage() {}

func (x *CSODOTALobbyMember) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_match_management_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSODOTALobbyMember.ProtoReflect.Descriptor instead.
func (*CSODOTALobbyMember) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_match_management_proto_rawDescGZIP(), []int{5}
}

func (x *CSODOTALobbyMember) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *CSODOTALobbyMember) GetHeroId() uint32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CSODOTALobbyMember) GetTeam() DOTA_GC_TEAM {
	if x != nil && x.Team != nil {
		return *x.Team
	}
	return Default_CSODOTALobbyMember_Team
}

func (x *CSODOTALobbyMember) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CSODOTALobbyMember) GetSlot() uint32 {
	if x != nil && x.Slot != nil {
		return *x.Slot
	}
	return 0
}

func (x *CSODOTALobbyMember) GetPartyId() uint64 {
	if x != nil && x.PartyId != nil {
		return *x.PartyId
	}
	return 0
}

func (x *CSODOTALobbyMember) GetMetaLevel() uint32 {
	if x != nil && x.MetaLevel != nil {
		return *x.MetaLevel
	}
	return 0
}

func (x *CSODOTALobbyMember) GetMetaXp() uint32 {
	if x != nil && x.MetaXp != nil {
		return *x.MetaXp
	}
	return 0
}

func (x *CSODOTALobbyMember) GetMetaXpAwarded() uint32 {
	if x != nil && x.MetaXpAwarded != nil {
		return *x.MetaXpAwarded
	}
	return 0
}

func (x *CSODOTALobbyMember) GetLeaverStatus() DOTALeaverStatusT {
	if x != nil && x.LeaverStatus != nil {
		return *x.LeaverStatus
	}
	return Default_CSODOTALobbyMember_LeaverStatus
}

func (x *CSODOTALobbyMember) GetLeaverActions() uint32 {
	if x != nil && x.LeaverActions != nil {
		return *x.LeaverActions
	}
	return 0
}

func (x *CSODOTALobbyMember) GetChannel() uint32 {
	if x != nil && x.Channel != nil {
		return *x.Channel
	}
	return Default_CSODOTALobbyMember_Channel
}

func (x *CSODOTALobbyMember) GetDisabledHeroId() []uint32 {
	if x != nil {
		return x.DisabledHeroId
	}
	return nil
}

func (x *CSODOTALobbyMember) GetPartnerAccountType() PartnerAccountType {
	if x != nil && x.PartnerAccountType != nil {
		return *x.PartnerAccountType
	}
	return Default_CSODOTALobbyMember_PartnerAccountType
}

func (x *CSODOTALobbyMember) GetEnabledHeroId() []uint32 {
	if x != nil {
		return x.EnabledHeroId
	}
	return nil
}

func (x *CSODOTALobbyMember) GetCoachTeam() DOTA_GC_TEAM {
	if x != nil && x.CoachTeam != nil {
		return *x.CoachTeam
	}
	return Default_CSODOTALobbyMember_CoachTeam
}

func (x *CSODOTALobbyMember) GetCoachRating() uint32 {
	if x != nil && x.CoachRating != nil {
		return *x.CoachRating
	}
	return 0
}

func (x *CSODOTALobbyMember) GetPwrdCyberCafeId() uint32 {
	if x != nil && x.PwrdCyberCafeId != nil {
		return *x.PwrdCyberCafeId
	}
	return 0
}

func (x *CSODOTALobbyMember) GetPwrdCyberCafeName() string {
	if x != nil && x.PwrdCyberCafeName != nil {
		return *x.PwrdCyberCafeName
	}
	return ""
}

func (x *CSODOTALobbyMember) GetDisabledRandomHeroBits() []uint32 {
	if x != nil {
		return x.DisabledRandomHeroBits
	}
	return nil
}

func (x *CSODOTALobbyMember) GetRankChange() int32 {
	if x != nil && x.RankChange != nil {
		return *x.RankChange
	}
	return 0
}

func (x *CSODOTALobbyMember) GetCameraman() bool {
	if x != nil && x.Cameraman != nil {
		return *x.Cameraman
	}
	return false
}

func (x *CSODOTALobbyMember) GetCustomGameProductIds() []uint32 {
	if x != nil {
		return x.CustomGameProductIds
	}
	return nil
}

func (x *CSODOTALobbyMember) GetSearchMatchType() MatchType {
	if x != nil && x.SearchMatchType != nil {
		return *x.SearchMatchType
	}
	return Default_CSODOTALobbyMember_SearchMatchType
}

func (x *CSODOTALobbyMember) GetFavoriteTeamPacked() uint64 {
	if x != nil && x.FavoriteTeamPacked != nil {
		return *x.FavoriteTeamPacked
	}
	return 0
}

func (x *CSODOTALobbyMember) GetIsPlusSubscriber() bool {
	if x != nil && x.IsPlusSubscriber != nil {
		return *x.IsPlusSubscriber
	}
	return false
}

func (x *CSODOTALobbyMember) GetRankTierUpdated() bool {
	if x != nil && x.RankTierUpdated != nil {
		return *x.RankTierUpdated
	}
	return false
}

func (x *CSODOTALobbyMember) GetLaneSelectionFlags() uint32 {
	if x != nil && x.LaneSelectionFlags != nil {
		return *x.LaneSelectionFlags
	}
	return 0
}

func (x *CSODOTALobbyMember) GetCanEarnRewards() bool {
	if x != nil && x.CanEarnRewards != nil {
		return *x.CanEarnRewards
	}
	return false
}

func (x *CSODOTALobbyMember) GetLiveSpectatorTeam() DOTA_GC_TEAM {
	if x != nil && x.LiveSpectatorTeam != nil {
		return *x.LiveSpectatorTeam
	}
	return Default_CSODOTALobbyMember_LiveSpectatorTeam
}

func (x *CSODOTALobbyMember) GetWasMvpLastGame() bool {
	if x != nil && x.WasMvpLastGame != nil {
		return *x.WasMvpLastGame
	}
	return false
}

func (x *CSODOTALobbyMember) GetPendingAwards() []*CMsgPendingEventAward {
	if x != nil {
		return x.PendingAwards
	}
	return nil
}

func (x *CSODOTALobbyMember) GetPendingAwardsOnVictory() []*CMsgPendingEventAward {
	if x != nil {
		return x.PendingAwardsOnVictory
	}
	return nil
}

func (x *CSODOTALobbyMember) GetRankMmrBoostType() EDOTAMMRBoostType {
	if x != nil && x.RankMmrBoostType != nil {
		return *x.RankMmrBoostType
	}
	return Default_CSODOTALobbyMember_RankMmrBoostType
}

func (x *CSODOTALobbyMember) GetQueuePointAdjustment() int32 {
	if x != nil && x.QueuePointAdjustment != nil {
		return *x.QueuePointAdjustment
	}
	return 0
}

func (x *CSODOTALobbyMember) GetRankTier() int32 {
	if x != nil && x.RankTier != nil {
		return *x.RankTier
	}
	return 0
}

func (x *CSODOTALobbyMember) GetTitle() uint32 {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return 0
}

func (x *CSODOTALobbyMember) GetGuildId() uint32 {
	if x != nil && x.GuildId != nil {
		return *x.GuildId
	}
	return 0
}

type CLobbyTeamDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamName                   *string `protobuf:"bytes,1,opt,name=team_name,json=teamName" json:"team_name,omitempty"`
	TeamTag                    *string `protobuf:"bytes,3,opt,name=team_tag,json=teamTag" json:"team_tag,omitempty"`
	TeamId                     *uint32 `protobuf:"varint,4,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	TeamLogo                   *uint64 `protobuf:"varint,5,opt,name=team_logo,json=teamLogo" json:"team_logo,omitempty"`
	TeamBaseLogo               *uint64 `protobuf:"varint,6,opt,name=team_base_logo,json=teamBaseLogo" json:"team_base_logo,omitempty"`
	TeamBannerLogo             *uint64 `protobuf:"varint,7,opt,name=team_banner_logo,json=teamBannerLogo" json:"team_banner_logo,omitempty"`
	TeamComplete               *bool   `protobuf:"varint,8,opt,name=team_complete,json=teamComplete" json:"team_complete,omitempty"`
	Rank                       *uint32 `protobuf:"varint,15,opt,name=rank" json:"rank,omitempty"`
	RankChange                 *int32  `protobuf:"zigzag32,16,opt,name=rank_change,json=rankChange" json:"rank_change,omitempty"`
	IsHomeTeam                 *bool   `protobuf:"varint,17,opt,name=is_home_team,json=isHomeTeam" json:"is_home_team,omitempty"`
	IsChallengeMatch           *bool   `protobuf:"varint,18,opt,name=is_challenge_match,json=isChallengeMatch" json:"is_challenge_match,omitempty"`
	ChallengeMatchTokenAccount *uint64 `protobuf:"varint,19,opt,name=challenge_match_token_account,json=challengeMatchTokenAccount" json:"challenge_match_token_account,omitempty"`
	TeamLogoUrl                *string `protobuf:"bytes,20,opt,name=team_logo_url,json=teamLogoUrl" json:"team_logo_url,omitempty"`
}

func (x *CLobbyTeamDetails) Reset() {
	*x = CLobbyTeamDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_match_management_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CLobbyTeamDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CLobbyTeamDetails) ProtoMessage() {}

func (x *CLobbyTeamDetails) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_match_management_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CLobbyTeamDetails.ProtoReflect.Descriptor instead.
func (*CLobbyTeamDetails) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_match_management_proto_rawDescGZIP(), []int{6}
}

func (x *CLobbyTeamDetails) GetTeamName() string {
	if x != nil && x.TeamName != nil {
		return *x.TeamName
	}
	return ""
}

func (x *CLobbyTeamDetails) GetTeamTag() string {
	if x != nil && x.TeamTag != nil {
		return *x.TeamTag
	}
	return ""
}

func (x *CLobbyTeamDetails) GetTeamId() uint32 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

func (x *CLobbyTeamDetails) GetTeamLogo() uint64 {
	if x != nil && x.TeamLogo != nil {
		return *x.TeamLogo
	}
	return 0
}

func (x *CLobbyTeamDetails) GetTeamBaseLogo() uint64 {
	if x != nil && x.TeamBaseLogo != nil {
		return *x.TeamBaseLogo
	}
	return 0
}

func (x *CLobbyTeamDetails) GetTeamBannerLogo() uint64 {
	if x != nil && x.TeamBannerLogo != nil {
		return *x.TeamBannerLogo
	}
	return 0
}

func (x *CLobbyTeamDetails) GetTeamComplete() bool {
	if x != nil && x.TeamComplete != nil {
		return *x.TeamComplete
	}
	return false
}

func (x *CLobbyTeamDetails) GetRank() uint32 {
	if x != nil && x.Rank != nil {
		return *x.Rank
	}
	return 0
}

func (x *CLobbyTeamDetails) GetRankChange() int32 {
	if x != nil && x.RankChange != nil {
		return *x.RankChange
	}
	return 0
}

func (x *CLobbyTeamDetails) GetIsHomeTeam() bool {
	if x != nil && x.IsHomeTeam != nil {
		return *x.IsHomeTeam
	}
	return false
}

func (x *CLobbyTeamDetails) GetIsChallengeMatch() bool {
	if x != nil && x.IsChallengeMatch != nil {
		return *x.IsChallengeMatch
	}
	return false
}

func (x *CLobbyTeamDetails) GetChallengeMatchTokenAccount() uint64 {
	if x != nil && x.ChallengeMatchTokenAccount != nil {
		return *x.ChallengeMatchTokenAccount
	}
	return 0
}

func (x *CLobbyTeamDetails) GetTeamLogoUrl() string {
	if x != nil && x.TeamLogoUrl != nil {
		return *x.TeamLogoUrl
	}
	return ""
}

type CLobbyGuildDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildId             *uint32       `protobuf:"varint,1,opt,name=guild_id,json=guildId" json:"guild_id,omitempty"`
	GuildPrimaryColor   *uint32       `protobuf:"varint,2,opt,name=guild_primary_color,json=guildPrimaryColor" json:"guild_primary_color,omitempty"`
	GuildSecondaryColor *uint32       `protobuf:"varint,3,opt,name=guild_secondary_color,json=guildSecondaryColor" json:"guild_secondary_color,omitempty"`
	GuildPattern        *uint32       `protobuf:"varint,4,opt,name=guild_pattern,json=guildPattern" json:"guild_pattern,omitempty"`
	GuildLogo           *uint64       `protobuf:"varint,5,opt,name=guild_logo,json=guildLogo" json:"guild_logo,omitempty"`
	GuildPoints         *uint32       `protobuf:"varint,6,opt,name=guild_points,json=guildPoints" json:"guild_points,omitempty"`
	GuildEvent          *uint32       `protobuf:"varint,7,opt,name=guild_event,json=guildEvent" json:"guild_event,omitempty"`
	GuildFlags          *uint32       `protobuf:"varint,8,opt,name=guild_flags,json=guildFlags" json:"guild_flags,omitempty"`
	TeamForGuild        *DOTA_GC_TEAM `protobuf:"varint,9,opt,name=team_for_guild,json=teamForGuild,enum=dota.DOTA_GC_TEAM,def=0" json:"team_for_guild,omitempty"`
	GuildTag            *string       `protobuf:"bytes,10,opt,name=guild_tag,json=guildTag" json:"guild_tag,omitempty"`
}

// Default values for CLobbyGuildDetails fields.
const (
	Default_CLobbyGuildDetails_TeamForGuild = DOTA_GC_TEAM_DOTA_GC_TEAM_GOOD_GUYS
)

func (x *CLobbyGuildDetails) Reset() {
	*x = CLobbyGuildDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_match_management_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CLobbyGuildDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CLobbyGuildDetails) ProtoMessage() {}

func (x *CLobbyGuildDetails) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_match_management_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CLobbyGuildDetails.ProtoReflect.Descriptor instead.
func (*CLobbyGuildDetails) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_match_management_proto_rawDescGZIP(), []int{7}
}

func (x *CLobbyGuildDetails) GetGuildId() uint32 {
	if x != nil && x.GuildId != nil {
		return *x.GuildId
	}
	return 0
}

func (x *CLobbyGuildDetails) GetGuildPrimaryColor() uint32 {
	if x != nil && x.GuildPrimaryColor != nil {
		return *x.GuildPrimaryColor
	}
	return 0
}

func (x *CLobbyGuildDetails) GetGuildSecondaryColor() uint32 {
	if x != nil && x.GuildSecondaryColor != nil {
		return *x.GuildSecondaryColor
	}
	return 0
}

func (x *CLobbyGuildDetails) GetGuildPattern() uint32 {
	if x != nil && x.GuildPattern != nil {
		return *x.GuildPattern
	}
	return 0
}

func (x *CLobbyGuildDetails) GetGuildLogo() uint64 {
	if x != nil && x.GuildLogo != nil {
		return *x.GuildLogo
	}
	return 0
}

func (x *CLobbyGuildDetails) GetGuildPoints() uint32 {
	if x != nil && x.GuildPoints != nil {
		return *x.GuildPoints
	}
	return 0
}

func (x *CLobbyGuildDetails) GetGuildEvent() uint32 {
	if x != nil && x.GuildEvent != nil {
		return *x.GuildEvent
	}
	return 0
}

func (x *CLobbyGuildDetails) GetGuildFlags() uint32 {
	if x != nil && x.GuildFlags != nil {
		return *x.GuildFlags
	}
	return 0
}

func (x *CLobbyGuildDetails) GetTeamForGuild() DOTA_GC_TEAM {
	if x != nil && x.TeamForGuild != nil {
		return *x.TeamForGuild
	}
	return Default_CLobbyGuildDetails_TeamForGuild
}

func (x *CLobbyGuildDetails) GetGuildTag() string {
	if x != nil && x.GuildTag != nil {
		return *x.GuildTag
	}
	return ""
}

type CLobbyTimedRewardDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemDefIndex  *uint32 `protobuf:"varint,2,opt,name=item_def_index,json=itemDefIndex" json:"item_def_index,omitempty"`
	IsSupplyCrate *bool   `protobuf:"varint,3,opt,name=is_supply_crate,json=isSupplyCrate" json:"is_supply_crate,omitempty"`
	IsTimedDrop   *bool   `protobuf:"varint,4,opt,name=is_timed_drop,json=isTimedDrop" json:"is_timed_drop,omitempty"`
	AccountId     *uint32 `protobuf:"varint,5,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Origin        *uint32 `protobuf:"varint,6,opt,name=origin" json:"origin,omitempty"`
}

func (x *CLobbyTimedRewardDetails) Reset() {
	*x = CLobbyTimedRewardDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_match_management_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CLobbyTimedRewardDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CLobbyTimedRewardDetails) ProtoMessage() {}

func (x *CLobbyTimedRewardDetails) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_match_management_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CLobbyTimedRewardDetails.ProtoReflect.Descriptor instead.
func (*CLobbyTimedRewardDetails) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_match_management_proto_rawDescGZIP(), []int{8}
}

func (x *CLobbyTimedRewardDetails) GetItemDefIndex() uint32 {
	if x != nil && x.ItemDefIndex != nil {
		return *x.ItemDefIndex
	}
	return 0
}

func (x *CLobbyTimedRewardDetails) GetIsSupplyCrate() bool {
	if x != nil && x.IsSupplyCrate != nil {
		return *x.IsSupplyCrate
	}
	return false
}

func (x *CLobbyTimedRewardDetails) GetIsTimedDrop() bool {
	if x != nil && x.IsTimedDrop != nil {
		return *x.IsTimedDrop
	}
	return false
}

func (x *CLobbyTimedRewardDetails) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CLobbyTimedRewardDetails) GetOrigin() uint32 {
	if x != nil && x.Origin != nil {
		return *x.Origin
	}
	return 0
}

type CLobbyBroadcastChannelInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId    *uint32 `protobuf:"varint,1,opt,name=channel_id,json=channelId" json:"channel_id,omitempty"`
	CountryCode  *string `protobuf:"bytes,2,opt,name=country_code,json=countryCode" json:"country_code,omitempty"`
	Description  *string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	LanguageCode *string `protobuf:"bytes,4,opt,name=language_code,json=languageCode" json:"language_code,omitempty"`
}

func (x *CLobbyBroadcastChannelInfo) Reset() {
	*x = CLobbyBroadcastChannelInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_match_management_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CLobbyBroadcastChannelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CLobbyBroadcastChannelInfo) ProtoMessage() {}

func (x *CLobbyBroadcastChannelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_match_management_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CLobbyBroadcastChannelInfo.ProtoReflect.Descriptor instead.
func (*CLobbyBroadcastChannelInfo) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_match_management_proto_rawDescGZIP(), []int{9}
}

func (x *CLobbyBroadcastChannelInfo) GetChannelId() uint32 {
	if x != nil && x.ChannelId != nil {
		return *x.ChannelId
	}
	return 0
}

func (x *CLobbyBroadcastChannelInfo) GetCountryCode() string {
	if x != nil && x.CountryCode != nil {
		return *x.CountryCode
	}
	return ""
}

func (x *CLobbyBroadcastChannelInfo) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *CLobbyBroadcastChannelInfo) GetLanguageCode() string {
	if x != nil && x.LanguageCode != nil {
		return *x.LanguageCode
	}
	return ""
}

type CLobbyGuildChallenge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildId                  *uint32  `protobuf:"varint,1,opt,name=guild_id,json=guildId" json:"guild_id,omitempty"`
	EventId                  *EEvent  `protobuf:"varint,2,opt,name=event_id,json=eventId,enum=dota.EEvent,def=0" json:"event_id,omitempty"`
	ChallengeInstanceId      *uint32  `protobuf:"varint,3,opt,name=challenge_instance_id,json=challengeInstanceId" json:"challenge_instance_id,omitempty"`
	ChallengeParameter       *uint32  `protobuf:"varint,4,opt,name=challenge_parameter,json=challengeParameter" json:"challenge_parameter,omitempty"`
	ChallengeTimestamp       *uint32  `protobuf:"varint,5,opt,name=challenge_timestamp,json=challengeTimestamp" json:"challenge_timestamp,omitempty"`
	ChallengePeriodSerial    *uint32  `protobuf:"varint,6,opt,name=challenge_period_serial,json=challengePeriodSerial" json:"challenge_period_serial,omitempty"`
	ChallengeProgressAtStart *uint32  `protobuf:"varint,7,opt,name=challenge_progress_at_start,json=challengeProgressAtStart" json:"challenge_progress_at_start,omitempty"`
	EligibleAccountIds       []uint32 `protobuf:"varint,8,rep,name=eligible_account_ids,json=eligibleAccountIds" json:"eligible_account_ids,omitempty"`
}

// Default values for CLobbyGuildChallenge fields.
const (
	Default_CLobbyGuildChallenge_EventId = EEvent_EVENT_ID_NONE
)

func (x *CLobbyGuildChallenge) Reset() {
	*x = CLobbyGuildChallenge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_match_management_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CLobbyGuildChallenge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CLobbyGuildChallenge) ProtoMessage() {}

func (x *CLobbyGuildChallenge) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_match_management_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CLobbyGuildChallenge.ProtoReflect.Descriptor instead.
func (*CLobbyGuildChallenge) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_match_management_proto_rawDescGZIP(), []int{10}
}

func (x *CLobbyGuildChallenge) GetGuildId() uint32 {
	if x != nil && x.GuildId != nil {
		return *x.GuildId
	}
	return 0
}

func (x *CLobbyGuildChallenge) GetEventId() EEvent {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return Default_CLobbyGuildChallenge_EventId
}

func (x *CLobbyGuildChallenge) GetChallengeInstanceId() uint32 {
	if x != nil && x.ChallengeInstanceId != nil {
		return *x.ChallengeInstanceId
	}
	return 0
}

func (x *CLobbyGuildChallenge) GetChallengeParameter() uint32 {
	if x != nil && x.ChallengeParameter != nil {
		return *x.ChallengeParameter
	}
	return 0
}

func (x *CLobbyGuildChallenge) GetChallengeTimestamp() uint32 {
	if x != nil && x.ChallengeTimestamp != nil {
		return *x.ChallengeTimestamp
	}
	return 0
}

func (x *CLobbyGuildChallenge) GetChallengePeriodSerial() uint32 {
	if x != nil && x.ChallengePeriodSerial != nil {
		return *x.ChallengePeriodSerial
	}
	return 0
}

func (x *CLobbyGuildChallenge) GetChallengeProgressAtStart() uint32 {
	if x != nil && x.ChallengeProgressAtStart != nil {
		return *x.ChallengeProgressAtStart
	}
	return 0
}

func (x *CLobbyGuildChallenge) GetEligibleAccountIds() []uint32 {
	if x != nil {
		return x.EligibleAccountIds
	}
	return nil
}

type CSODOTALobby struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LobbyId                                    *uint64                       `protobuf:"varint,1,opt,name=lobby_id,json=lobbyId" json:"lobby_id,omitempty"`
	Members                                    []*CSODOTALobbyMember         `protobuf:"bytes,2,rep,name=members" json:"members,omitempty"`
	LeftMembers                                []*CSODOTALobbyMember         `protobuf:"bytes,7,rep,name=left_members,json=leftMembers" json:"left_members,omitempty"`
	LeaderId                                   *uint64                       `protobuf:"fixed64,11,opt,name=leader_id,json=leaderId" json:"leader_id,omitempty"`
	ServerId                                   *uint64                       `protobuf:"fixed64,6,opt,name=server_id,json=serverId,def=0" json:"server_id,omitempty"`
	GameMode                                   *uint32                       `protobuf:"varint,3,opt,name=game_mode,json=gameMode" json:"game_mode,omitempty"`
	PendingInvites                             []uint64                      `protobuf:"fixed64,10,rep,name=pending_invites,json=pendingInvites" json:"pending_invites,omitempty"`
	State                                      *CSODOTALobby_State           `protobuf:"varint,4,opt,name=state,enum=dota.CSODOTALobby_State,def=0" json:"state,omitempty"`
	Connect                                    *string                       `protobuf:"bytes,5,opt,name=connect" json:"connect,omitempty"`
	LobbyType                                  *CSODOTALobby_LobbyType       `protobuf:"varint,12,opt,name=lobby_type,json=lobbyType,enum=dota.CSODOTALobby_LobbyType,def=-1" json:"lobby_type,omitempty"`
	AllowCheats                                *bool                         `protobuf:"varint,13,opt,name=allow_cheats,json=allowCheats" json:"allow_cheats,omitempty"`
	FillWithBots                               *bool                         `protobuf:"varint,14,opt,name=fill_with_bots,json=fillWithBots" json:"fill_with_bots,omitempty"`
	IntroMode                                  *bool                         `protobuf:"varint,15,opt,name=intro_mode,json=introMode" json:"intro_mode,omitempty"`
	GameName                                   *string                       `protobuf:"bytes,16,opt,name=game_name,json=gameName" json:"game_name,omitempty"`
	TeamDetails                                []*CLobbyTeamDetails          `protobuf:"bytes,17,rep,name=team_details,json=teamDetails" json:"team_details,omitempty"`
	TutorialLesson                             *uint32                       `protobuf:"varint,18,opt,name=tutorial_lesson,json=tutorialLesson" json:"tutorial_lesson,omitempty"`
	TournamentId                               *uint32                       `protobuf:"varint,19,opt,name=tournament_id,json=tournamentId" json:"tournament_id,omitempty"`
	TournamentGameId                           *uint32                       `protobuf:"varint,20,opt,name=tournament_game_id,json=tournamentGameId" json:"tournament_game_id,omitempty"`
	ServerRegion                               *uint32                       `protobuf:"varint,21,opt,name=server_region,json=serverRegion,def=0" json:"server_region,omitempty"`
	GameState                                  *DOTA_GameState               `protobuf:"varint,22,opt,name=game_state,json=gameState,enum=dota.DOTA_GameState,def=0" json:"game_state,omitempty"`
	NumSpectators                              *uint32                       `protobuf:"varint,23,opt,name=num_spectators,json=numSpectators" json:"num_spectators,omitempty"`
	Matchgroup                                 *uint32                       `protobuf:"varint,25,opt,name=matchgroup" json:"matchgroup,omitempty"`
	CmPick                                     *DOTA_CM_PICK                 `protobuf:"varint,28,opt,name=cm_pick,json=cmPick,enum=dota.DOTA_CM_PICK,def=0" json:"cm_pick,omitempty"`
	MatchId                                    *uint64                       `protobuf:"varint,30,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	AllowSpectating                            *bool                         `protobuf:"varint,31,opt,name=allow_spectating,json=allowSpectating,def=1" json:"allow_spectating,omitempty"`
	BotDifficultyRadiant                       *DOTABotDifficulty            `protobuf:"varint,36,opt,name=bot_difficulty_radiant,json=botDifficultyRadiant,enum=dota.DOTABotDifficulty,def=3" json:"bot_difficulty_radiant,omitempty"`
	GameVersion                                *DOTAGameVersion              `protobuf:"varint,37,opt,name=game_version,json=gameVersion,enum=dota.DOTAGameVersion,def=0" json:"game_version,omitempty"`
	TimedRewardDetails                         []*CLobbyTimedRewardDetails   `protobuf:"bytes,38,rep,name=timed_reward_details,json=timedRewardDetails" json:"timed_reward_details,omitempty"`
	PassKey                                    *string                       `protobuf:"bytes,39,opt,name=pass_key,json=passKey" json:"pass_key,omitempty"`
	Leagueid                                   *uint32                       `protobuf:"varint,42,opt,name=leagueid" json:"leagueid,omitempty"`
	PenaltyLevelRadiant                        *uint32                       `protobuf:"varint,43,opt,name=penalty_level_radiant,json=penaltyLevelRadiant,def=0" json:"penalty_level_radiant,omitempty"`
	PenaltyLevelDire                           *uint32                       `protobuf:"varint,44,opt,name=penalty_level_dire,json=penaltyLevelDire,def=0" json:"penalty_level_dire,omitempty"`
	LoadGameId                                 *uint32                       `protobuf:"varint,45,opt,name=load_game_id,json=loadGameId" json:"load_game_id,omitempty"`
	SeriesType                                 *uint32                       `protobuf:"varint,46,opt,name=series_type,json=seriesType" json:"series_type,omitempty"`
	RadiantSeriesWins                          *uint32                       `protobuf:"varint,47,opt,name=radiant_series_wins,json=radiantSeriesWins" json:"radiant_series_wins,omitempty"`
	DireSeriesWins                             *uint32                       `protobuf:"varint,48,opt,name=dire_series_wins,json=direSeriesWins" json:"dire_series_wins,omitempty"`
	LootGenerated                              *uint32                       `protobuf:"varint,49,opt,name=loot_generated,json=lootGenerated" json:"loot_generated,omitempty"`
	LootAwarded                                *uint32                       `protobuf:"varint,50,opt,name=loot_awarded,json=lootAwarded" json:"loot_awarded,omitempty"`
	Allchat                                    *bool                         `protobuf:"varint,51,opt,name=allchat,def=0" json:"allchat,omitempty"`
	DotaTvDelay                                *LobbyDotaTVDelay             `protobuf:"varint,53,opt,name=dota_tv_delay,json=dotaTvDelay,enum=dota.LobbyDotaTVDelay,def=0" json:"dota_tv_delay,omitempty"`
	CustomGameMode                             *string                       `protobuf:"bytes,54,opt,name=custom_game_mode,json=customGameMode" json:"custom_game_mode,omitempty"`
	CustomMapName                              *string                       `protobuf:"bytes,55,opt,name=custom_map_name,json=customMapName" json:"custom_map_name,omitempty"`
	CustomDifficulty                           *uint32                       `protobuf:"varint,56,opt,name=custom_difficulty,json=customDifficulty" json:"custom_difficulty,omitempty"`
	Lan                                        *bool                         `protobuf:"varint,57,opt,name=lan" json:"lan,omitempty"`
	BroadcastChannelInfo                       []*CLobbyBroadcastChannelInfo `protobuf:"bytes,58,rep,name=broadcast_channel_info,json=broadcastChannelInfo" json:"broadcast_channel_info,omitempty"`
	FirstLeaverAccountid                       *uint32                       `protobuf:"varint,59,opt,name=first_leaver_accountid,json=firstLeaverAccountid" json:"first_leaver_accountid,omitempty"`
	SeriesId                                   *uint32                       `protobuf:"varint,60,opt,name=series_id,json=seriesId" json:"series_id,omitempty"`
	LowPriority                                *bool                         `protobuf:"varint,61,opt,name=low_priority,json=lowPriority" json:"low_priority,omitempty"`
	ExtraMessages                              []*CSODOTALobby_CExtraMsg     `protobuf:"bytes,62,rep,name=extra_messages,json=extraMessages" json:"extra_messages,omitempty"`
	SaveGame                                   *CDOTASaveGame                `protobuf:"bytes,63,opt,name=save_game,json=saveGame" json:"save_game,omitempty"`
	FirstBloodHappened                         *bool                         `protobuf:"varint,65,opt,name=first_blood_happened,json=firstBloodHappened" json:"first_blood_happened,omitempty"`
	MatchOutcome                               *EMatchOutcome                `protobuf:"varint,70,opt,name=match_outcome,json=matchOutcome,enum=dota.EMatchOutcome,def=0" json:"match_outcome,omitempty"`
	MassDisconnect                             *bool                         `protobuf:"varint,67,opt,name=mass_disconnect,json=massDisconnect" json:"mass_disconnect,omitempty"`
	CustomGameId                               *uint64                       `protobuf:"varint,68,opt,name=custom_game_id,json=customGameId" json:"custom_game_id,omitempty"`
	CustomMinPlayers                           *uint32                       `protobuf:"varint,71,opt,name=custom_min_players,json=customMinPlayers" json:"custom_min_players,omitempty"`
	CustomMaxPlayers                           *uint32                       `protobuf:"varint,72,opt,name=custom_max_players,json=customMaxPlayers" json:"custom_max_players,omitempty"`
	PartnerType                                *PartnerAccountType           `protobuf:"varint,73,opt,name=partner_type,json=partnerType,enum=dota.PartnerAccountType,def=0" json:"partner_type,omitempty"`
	Visibility                                 *DOTALobbyVisibility          `protobuf:"varint,75,opt,name=visibility,enum=dota.DOTALobbyVisibility,def=0" json:"visibility,omitempty"`
	CustomGameCrc                              *uint64                       `protobuf:"fixed64,76,opt,name=custom_game_crc,json=customGameCrc" json:"custom_game_crc,omitempty"`
	CustomGameAutoCreatedLobby                 *bool                         `protobuf:"varint,77,opt,name=custom_game_auto_created_lobby,json=customGameAutoCreatedLobby" json:"custom_game_auto_created_lobby,omitempty"`
	CustomGameTimestamp                        *uint32                       `protobuf:"fixed32,80,opt,name=custom_game_timestamp,json=customGameTimestamp" json:"custom_game_timestamp,omitempty"`
	PreviousSeriesMatches                      []uint64                      `protobuf:"varint,81,rep,name=previous_series_matches,json=previousSeriesMatches" json:"previous_series_matches,omitempty"`
	PreviousMatchOverride                      *uint64                       `protobuf:"varint,82,opt,name=previous_match_override,json=previousMatchOverride" json:"previous_match_override,omitempty"`
	CustomGameUsesAccountRecords               *bool                         `protobuf:"varint,83,opt,name=custom_game_uses_account_records,json=customGameUsesAccountRecords" json:"custom_game_uses_account_records,omitempty"`
	GameStartTime                              *uint32                       `protobuf:"varint,87,opt,name=game_start_time,json=gameStartTime" json:"game_start_time,omitempty"`
	PauseSetting                               *LobbyDotaPauseSetting        `protobuf:"varint,88,opt,name=pause_setting,json=pauseSetting,enum=dota.LobbyDotaPauseSetting,def=0" json:"pause_setting,omitempty"`
	LobbyMvpAccountId                          *uint32                       `protobuf:"varint,89,opt,name=lobby_mvp_account_id,json=lobbyMvpAccountId" json:"lobby_mvp_account_id,omitempty"`
	WeekendTourneyDivisionId                   *uint32                       `protobuf:"varint,90,opt,name=weekend_tourney_division_id,json=weekendTourneyDivisionId" json:"weekend_tourney_division_id,omitempty"`
	WeekendTourneySkillLevel                   *uint32                       `protobuf:"varint,91,opt,name=weekend_tourney_skill_level,json=weekendTourneySkillLevel" json:"weekend_tourney_skill_level,omitempty"`
	WeekendTourneyBracketRound                 *uint32                       `protobuf:"varint,92,opt,name=weekend_tourney_bracket_round,json=weekendTourneyBracketRound" json:"weekend_tourney_bracket_round,omitempty"`
	BotDifficultyDire                          *DOTABotDifficulty            `protobuf:"varint,93,opt,name=bot_difficulty_dire,json=botDifficultyDire,enum=dota.DOTABotDifficulty,def=3" json:"bot_difficulty_dire,omitempty"`
	BotRadiant                                 *uint64                       `protobuf:"varint,94,opt,name=bot_radiant,json=botRadiant" json:"bot_radiant,omitempty"`
	BotDire                                    *uint64                       `protobuf:"varint,95,opt,name=bot_dire,json=botDire" json:"bot_dire,omitempty"`
	EventProgressionEnabled                    []EEvent                      `protobuf:"varint,96,rep,name=event_progression_enabled,json=eventProgressionEnabled,enum=dota.EEvent" json:"event_progression_enabled,omitempty"`
	SelectionPriorityRules                     *DOTASelectionPriorityRules   `protobuf:"varint,97,opt,name=selection_priority_rules,json=selectionPriorityRules,enum=dota.DOTASelectionPriorityRules,def=0" json:"selection_priority_rules,omitempty"`
	SeriesPreviousSelectionPriorityTeamId      *uint32                       `protobuf:"varint,98,opt,name=series_previous_selection_priority_team_id,json=seriesPreviousSelectionPriorityTeamId" json:"series_previous_selection_priority_team_id,omitempty"`
	SeriesCurrentSelectionPriorityTeamId       *uint32                       `protobuf:"varint,99,opt,name=series_current_selection_priority_team_id,json=seriesCurrentSelectionPriorityTeamId" json:"series_current_selection_priority_team_id,omitempty"`
	SeriesCurrentPriorityTeamChoice            *DOTASelectionPriorityChoice  `protobuf:"varint,100,opt,name=series_current_priority_team_choice,json=seriesCurrentPriorityTeamChoice,enum=dota.DOTASelectionPriorityChoice,def=0" json:"series_current_priority_team_choice,omitempty"`
	SeriesCurrentNonPriorityTeamChoice         *DOTASelectionPriorityChoice  `protobuf:"varint,101,opt,name=series_current_non_priority_team_choice,json=seriesCurrentNonPriorityTeamChoice,enum=dota.DOTASelectionPriorityChoice,def=0" json:"series_current_non_priority_team_choice,omitempty"`
	SeriesCurrentSelectionPriorityUsedCoinToss *bool                         `protobuf:"varint,102,opt,name=series_current_selection_priority_used_coin_toss,json=seriesCurrentSelectionPriorityUsedCoinToss" json:"series_current_selection_priority_used_coin_toss,omitempty"`
	CurrentPrimaryEvent                        *EEvent                       `protobuf:"varint,103,opt,name=current_primary_event,json=currentPrimaryEvent,enum=dota.EEvent,def=0" json:"current_primary_event,omitempty"`
	EmergencyDisabledHeroIds                   []uint32                      `protobuf:"varint,105,rep,name=emergency_disabled_hero_ids,json=emergencyDisabledHeroIds" json:"emergency_disabled_hero_ids,omitempty"`
	CustomGamePrivateKey                       *uint64                       `protobuf:"fixed64,106,opt,name=custom_game_private_key,json=customGamePrivateKey" json:"custom_game_private_key,omitempty"`
	CustomGamePenalties                        *bool                         `protobuf:"varint,107,opt,name=custom_game_penalties,json=customGamePenalties" json:"custom_game_penalties,omitempty"`
	LanHostPingLocation                        *string                       `protobuf:"bytes,109,opt,name=lan_host_ping_location,json=lanHostPingLocation" json:"lan_host_ping_location,omitempty"`
	LeagueNodeId                               *uint32                       `protobuf:"varint,110,opt,name=league_node_id,json=leagueNodeId" json:"league_node_id,omitempty"`
	MatchDuration                              *uint32                       `protobuf:"varint,111,opt,name=match_duration,json=matchDuration" json:"match_duration,omitempty"`
	CustomGameBrowseable                       *bool                         `protobuf:"varint,112,opt,name=custom_game_browseable,json=customGameBrowseable" json:"custom_game_browseable,omitempty"`
	LeaguePhase                                *uint32                       `protobuf:"varint,113,opt,name=league_phase,json=leaguePhase" json:"league_phase,omitempty"`
	RecordDetailedStats                        *bool                         `protobuf:"varint,114,opt,name=record_detailed_stats,json=recordDetailedStats" json:"record_detailed_stats,omitempty"`
	ExperimentalGameplayEnabled                *bool                         `protobuf:"varint,116,opt,name=experimental_gameplay_enabled,json=experimentalGameplayEnabled" json:"experimental_gameplay_enabled,omitempty"`
	GuildChallenges                            []*CLobbyGuildChallenge       `protobuf:"bytes,117,rep,name=guild_challenges,json=guildChallenges" json:"guild_challenges,omitempty"`
	GuildDetails                               []*CLobbyGuildDetails         `protobuf:"bytes,118,rep,name=guild_details,json=guildDetails" json:"guild_details,omitempty"`
	LobbyEventPoints                           []*CMsgLobbyEventPoints       `protobuf:"bytes,119,rep,name=lobby_event_points,json=lobbyEventPoints" json:"lobby_event_points,omitempty"`
}

// Default values for CSODOTALobby fields.
const (
	Default_CSODOTALobby_ServerId                           = uint64(0)
	Default_CSODOTALobby_State                              = CSODOTALobby_UI
	Default_CSODOTALobby_LobbyType                          = CSODOTALobby_INVALID
	Default_CSODOTALobby_ServerRegion                       = uint32(0)
	Default_CSODOTALobby_GameState                          = DOTA_GameState_DOTA_GAMERULES_STATE_INIT
	Default_CSODOTALobby_CmPick                             = DOTA_CM_PICK_DOTA_CM_RANDOM
	Default_CSODOTALobby_AllowSpectating                    = bool(true)
	Default_CSODOTALobby_BotDifficultyRadiant               = DOTABotDifficulty_BOT_DIFFICULTY_HARD
	Default_CSODOTALobby_GameVersion                        = DOTAGameVersion_GAME_VERSION_CURRENT
	Default_CSODOTALobby_PenaltyLevelRadiant                = uint32(0)
	Default_CSODOTALobby_PenaltyLevelDire                   = uint32(0)
	Default_CSODOTALobby_Allchat                            = bool(false)
	Default_CSODOTALobby_DotaTvDelay                        = LobbyDotaTVDelay_LobbyDotaTV_10
	Default_CSODOTALobby_MatchOutcome                       = EMatchOutcome_k_EMatchOutcome_Unknown
	Default_CSODOTALobby_PartnerType                        = PartnerAccountType_PARTNER_NONE
	Default_CSODOTALobby_Visibility                         = DOTALobbyVisibility_DOTALobbyVisibility_Public
	Default_CSODOTALobby_PauseSetting                       = LobbyDotaPauseSetting_LobbyDotaPauseSetting_Unlimited
	Default_CSODOTALobby_BotDifficultyDire                  = DOTABotDifficulty_BOT_DIFFICULTY_HARD
	Default_CSODOTALobby_SelectionPriorityRules             = DOTASelectionPriorityRules_k_DOTASelectionPriorityRules_Manual
	Default_CSODOTALobby_SeriesCurrentPriorityTeamChoice    = DOTASelectionPriorityChoice_k_DOTASelectionPriorityChoice_Invalid
	Default_CSODOTALobby_SeriesCurrentNonPriorityTeamChoice = DOTASelectionPriorityChoice_k_DOTASelectionPriorityChoice_Invalid
	Default_CSODOTALobby_CurrentPrimaryEvent                = EEvent_EVENT_ID_NONE
)

func (x *CSODOTALobby) Reset() {
	*x = CSODOTALobby{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_match_management_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSODOTALobby) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSODOTALobby) ProtoMessage() {}

func (x *CSODOTALobby) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_match_management_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSODOTALobby.ProtoReflect.Descriptor instead.
func (*CSODOTALobby) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_match_management_proto_rawDescGZIP(), []int{11}
}

func (x *CSODOTALobby) GetLobbyId() uint64 {
	if x != nil && x.LobbyId != nil {
		return *x.LobbyId
	}
	return 0
}

func (x *CSODOTALobby) GetMembers() []*CSODOTALobbyMember {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *CSODOTALobby) GetLeftMembers() []*CSODOTALobbyMember {
	if x != nil {
		return x.LeftMembers
	}
	return nil
}

func (x *CSODOTALobby) GetLeaderId() uint64 {
	if x != nil && x.LeaderId != nil {
		return *x.LeaderId
	}
	return 0
}

func (x *CSODOTALobby) GetServerId() uint64 {
	if x != nil && x.ServerId != nil {
		return *x.ServerId
	}
	return Default_CSODOTALobby_ServerId
}

func (x *CSODOTALobby) GetGameMode() uint32 {
	if x != nil && x.GameMode != nil {
		return *x.GameMode
	}
	return 0
}

func (x *CSODOTALobby) GetPendingInvites() []uint64 {
	if x != nil {
		return x.PendingInvites
	}
	return nil
}

func (x *CSODOTALobby) GetState() CSODOTALobby_State {
	if x != nil && x.State != nil {
		return *x.State
	}
	return Default_CSODOTALobby_State
}

func (x *CSODOTALobby) GetConnect() string {
	if x != nil && x.Connect != nil {
		return *x.Connect
	}
	return ""
}

func (x *CSODOTALobby) GetLobbyType() CSODOTALobby_LobbyType {
	if x != nil && x.LobbyType != nil {
		return *x.LobbyType
	}
	return Default_CSODOTALobby_LobbyType
}

func (x *CSODOTALobby) GetAllowCheats() bool {
	if x != nil && x.AllowCheats != nil {
		return *x.AllowCheats
	}
	return false
}

func (x *CSODOTALobby) GetFillWithBots() bool {
	if x != nil && x.FillWithBots != nil {
		return *x.FillWithBots
	}
	return false
}

func (x *CSODOTALobby) GetIntroMode() bool {
	if x != nil && x.IntroMode != nil {
		return *x.IntroMode
	}
	return false
}

func (x *CSODOTALobby) GetGameName() string {
	if x != nil && x.GameName != nil {
		return *x.GameName
	}
	return ""
}

func (x *CSODOTALobby) GetTeamDetails() []*CLobbyTeamDetails {
	if x != nil {
		return x.TeamDetails
	}
	return nil
}

func (x *CSODOTALobby) GetTutorialLesson() uint32 {
	if x != nil && x.TutorialLesson != nil {
		return *x.TutorialLesson
	}
	return 0
}

func (x *CSODOTALobby) GetTournamentId() uint32 {
	if x != nil && x.TournamentId != nil {
		return *x.TournamentId
	}
	return 0
}

func (x *CSODOTALobby) GetTournamentGameId() uint32 {
	if x != nil && x.TournamentGameId != nil {
		return *x.TournamentGameId
	}
	return 0
}

func (x *CSODOTALobby) GetServerRegion() uint32 {
	if x != nil && x.ServerRegion != nil {
		return *x.ServerRegion
	}
	return Default_CSODOTALobby_ServerRegion
}

func (x *CSODOTALobby) GetGameState() DOTA_GameState {
	if x != nil && x.GameState != nil {
		return *x.GameState
	}
	return Default_CSODOTALobby_GameState
}

func (x *CSODOTALobby) GetNumSpectators() uint32 {
	if x != nil && x.NumSpectators != nil {
		return *x.NumSpectators
	}
	return 0
}

func (x *CSODOTALobby) GetMatchgroup() uint32 {
	if x != nil && x.Matchgroup != nil {
		return *x.Matchgroup
	}
	return 0
}

func (x *CSODOTALobby) GetCmPick() DOTA_CM_PICK {
	if x != nil && x.CmPick != nil {
		return *x.CmPick
	}
	return Default_CSODOTALobby_CmPick
}

func (x *CSODOTALobby) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CSODOTALobby) GetAllowSpectating() bool {
	if x != nil && x.AllowSpectating != nil {
		return *x.AllowSpectating
	}
	return Default_CSODOTALobby_AllowSpectating
}

func (x *CSODOTALobby) GetBotDifficultyRadiant() DOTABotDifficulty {
	if x != nil && x.BotDifficultyRadiant != nil {
		return *x.BotDifficultyRadiant
	}
	return Default_CSODOTALobby_BotDifficultyRadiant
}

func (x *CSODOTALobby) GetGameVersion() DOTAGameVersion {
	if x != nil && x.GameVersion != nil {
		return *x.GameVersion
	}
	return Default_CSODOTALobby_GameVersion
}

func (x *CSODOTALobby) GetTimedRewardDetails() []*CLobbyTimedRewardDetails {
	if x != nil {
		return x.TimedRewardDetails
	}
	return nil
}

func (x *CSODOTALobby) GetPassKey() string {
	if x != nil && x.PassKey != nil {
		return *x.PassKey
	}
	return ""
}

func (x *CSODOTALobby) GetLeagueid() uint32 {
	if x != nil && x.Leagueid != nil {
		return *x.Leagueid
	}
	return 0
}

func (x *CSODOTALobby) GetPenaltyLevelRadiant() uint32 {
	if x != nil && x.PenaltyLevelRadiant != nil {
		return *x.PenaltyLevelRadiant
	}
	return Default_CSODOTALobby_PenaltyLevelRadiant
}

func (x *CSODOTALobby) GetPenaltyLevelDire() uint32 {
	if x != nil && x.PenaltyLevelDire != nil {
		return *x.PenaltyLevelDire
	}
	return Default_CSODOTALobby_PenaltyLevelDire
}

func (x *CSODOTALobby) GetLoadGameId() uint32 {
	if x != nil && x.LoadGameId != nil {
		return *x.LoadGameId
	}
	return 0
}

func (x *CSODOTALobby) GetSeriesType() uint32 {
	if x != nil && x.SeriesType != nil {
		return *x.SeriesType
	}
	return 0
}

func (x *CSODOTALobby) GetRadiantSeriesWins() uint32 {
	if x != nil && x.RadiantSeriesWins != nil {
		return *x.RadiantSeriesWins
	}
	return 0
}

func (x *CSODOTALobby) GetDireSeriesWins() uint32 {
	if x != nil && x.DireSeriesWins != nil {
		return *x.DireSeriesWins
	}
	return 0
}

func (x *CSODOTALobby) GetLootGenerated() uint32 {
	if x != nil && x.LootGenerated != nil {
		return *x.LootGenerated
	}
	return 0
}

func (x *CSODOTALobby) GetLootAwarded() uint32 {
	if x != nil && x.LootAwarded != nil {
		return *x.LootAwarded
	}
	return 0
}

func (x *CSODOTALobby) GetAllchat() bool {
	if x != nil && x.Allchat != nil {
		return *x.Allchat
	}
	return Default_CSODOTALobby_Allchat
}

func (x *CSODOTALobby) GetDotaTvDelay() LobbyDotaTVDelay {
	if x != nil && x.DotaTvDelay != nil {
		return *x.DotaTvDelay
	}
	return Default_CSODOTALobby_DotaTvDelay
}

func (x *CSODOTALobby) GetCustomGameMode() string {
	if x != nil && x.CustomGameMode != nil {
		return *x.CustomGameMode
	}
	return ""
}

func (x *CSODOTALobby) GetCustomMapName() string {
	if x != nil && x.CustomMapName != nil {
		return *x.CustomMapName
	}
	return ""
}

func (x *CSODOTALobby) GetCustomDifficulty() uint32 {
	if x != nil && x.CustomDifficulty != nil {
		return *x.CustomDifficulty
	}
	return 0
}

func (x *CSODOTALobby) GetLan() bool {
	if x != nil && x.Lan != nil {
		return *x.Lan
	}
	return false
}

func (x *CSODOTALobby) GetBroadcastChannelInfo() []*CLobbyBroadcastChannelInfo {
	if x != nil {
		return x.BroadcastChannelInfo
	}
	return nil
}

func (x *CSODOTALobby) GetFirstLeaverAccountid() uint32 {
	if x != nil && x.FirstLeaverAccountid != nil {
		return *x.FirstLeaverAccountid
	}
	return 0
}

func (x *CSODOTALobby) GetSeriesId() uint32 {
	if x != nil && x.SeriesId != nil {
		return *x.SeriesId
	}
	return 0
}

func (x *CSODOTALobby) GetLowPriority() bool {
	if x != nil && x.LowPriority != nil {
		return *x.LowPriority
	}
	return false
}

func (x *CSODOTALobby) GetExtraMessages() []*CSODOTALobby_CExtraMsg {
	if x != nil {
		return x.ExtraMessages
	}
	return nil
}

func (x *CSODOTALobby) GetSaveGame() *CDOTASaveGame {
	if x != nil {
		return x.SaveGame
	}
	return nil
}

func (x *CSODOTALobby) GetFirstBloodHappened() bool {
	if x != nil && x.FirstBloodHappened != nil {
		return *x.FirstBloodHappened
	}
	return false
}

func (x *CSODOTALobby) GetMatchOutcome() EMatchOutcome {
	if x != nil && x.MatchOutcome != nil {
		return *x.MatchOutcome
	}
	return Default_CSODOTALobby_MatchOutcome
}

func (x *CSODOTALobby) GetMassDisconnect() bool {
	if x != nil && x.MassDisconnect != nil {
		return *x.MassDisconnect
	}
	return false
}

func (x *CSODOTALobby) GetCustomGameId() uint64 {
	if x != nil && x.CustomGameId != nil {
		return *x.CustomGameId
	}
	return 0
}

func (x *CSODOTALobby) GetCustomMinPlayers() uint32 {
	if x != nil && x.CustomMinPlayers != nil {
		return *x.CustomMinPlayers
	}
	return 0
}

func (x *CSODOTALobby) GetCustomMaxPlayers() uint32 {
	if x != nil && x.CustomMaxPlayers != nil {
		return *x.CustomMaxPlayers
	}
	return 0
}

func (x *CSODOTALobby) GetPartnerType() PartnerAccountType {
	if x != nil && x.PartnerType != nil {
		return *x.PartnerType
	}
	return Default_CSODOTALobby_PartnerType
}

func (x *CSODOTALobby) GetVisibility() DOTALobbyVisibility {
	if x != nil && x.Visibility != nil {
		return *x.Visibility
	}
	return Default_CSODOTALobby_Visibility
}

func (x *CSODOTALobby) GetCustomGameCrc() uint64 {
	if x != nil && x.CustomGameCrc != nil {
		return *x.CustomGameCrc
	}
	return 0
}

func (x *CSODOTALobby) GetCustomGameAutoCreatedLobby() bool {
	if x != nil && x.CustomGameAutoCreatedLobby != nil {
		return *x.CustomGameAutoCreatedLobby
	}
	return false
}

func (x *CSODOTALobby) GetCustomGameTimestamp() uint32 {
	if x != nil && x.CustomGameTimestamp != nil {
		return *x.CustomGameTimestamp
	}
	return 0
}

func (x *CSODOTALobby) GetPreviousSeriesMatches() []uint64 {
	if x != nil {
		return x.PreviousSeriesMatches
	}
	return nil
}

func (x *CSODOTALobby) GetPreviousMatchOverride() uint64 {
	if x != nil && x.PreviousMatchOverride != nil {
		return *x.PreviousMatchOverride
	}
	return 0
}

func (x *CSODOTALobby) GetCustomGameUsesAccountRecords() bool {
	if x != nil && x.CustomGameUsesAccountRecords != nil {
		return *x.CustomGameUsesAccountRecords
	}
	return false
}

func (x *CSODOTALobby) GetGameStartTime() uint32 {
	if x != nil && x.GameStartTime != nil {
		return *x.GameStartTime
	}
	return 0
}

func (x *CSODOTALobby) GetPauseSetting() LobbyDotaPauseSetting {
	if x != nil && x.PauseSetting != nil {
		return *x.PauseSetting
	}
	return Default_CSODOTALobby_PauseSetting
}

func (x *CSODOTALobby) GetLobbyMvpAccountId() uint32 {
	if x != nil && x.LobbyMvpAccountId != nil {
		return *x.LobbyMvpAccountId
	}
	return 0
}

func (x *CSODOTALobby) GetWeekendTourneyDivisionId() uint32 {
	if x != nil && x.WeekendTourneyDivisionId != nil {
		return *x.WeekendTourneyDivisionId
	}
	return 0
}

func (x *CSODOTALobby) GetWeekendTourneySkillLevel() uint32 {
	if x != nil && x.WeekendTourneySkillLevel != nil {
		return *x.WeekendTourneySkillLevel
	}
	return 0
}

func (x *CSODOTALobby) GetWeekendTourneyBracketRound() uint32 {
	if x != nil && x.WeekendTourneyBracketRound != nil {
		return *x.WeekendTourneyBracketRound
	}
	return 0
}

func (x *CSODOTALobby) GetBotDifficultyDire() DOTABotDifficulty {
	if x != nil && x.BotDifficultyDire != nil {
		return *x.BotDifficultyDire
	}
	return Default_CSODOTALobby_BotDifficultyDire
}

func (x *CSODOTALobby) GetBotRadiant() uint64 {
	if x != nil && x.BotRadiant != nil {
		return *x.BotRadiant
	}
	return 0
}

func (x *CSODOTALobby) GetBotDire() uint64 {
	if x != nil && x.BotDire != nil {
		return *x.BotDire
	}
	return 0
}

func (x *CSODOTALobby) GetEventProgressionEnabled() []EEvent {
	if x != nil {
		return x.EventProgressionEnabled
	}
	return nil
}

func (x *CSODOTALobby) GetSelectionPriorityRules() DOTASelectionPriorityRules {
	if x != nil && x.SelectionPriorityRules != nil {
		return *x.SelectionPriorityRules
	}
	return Default_CSODOTALobby_SelectionPriorityRules
}

func (x *CSODOTALobby) GetSeriesPreviousSelectionPriorityTeamId() uint32 {
	if x != nil && x.SeriesPreviousSelectionPriorityTeamId != nil {
		return *x.SeriesPreviousSelectionPriorityTeamId
	}
	return 0
}

func (x *CSODOTALobby) GetSeriesCurrentSelectionPriorityTeamId() uint32 {
	if x != nil && x.SeriesCurrentSelectionPriorityTeamId != nil {
		return *x.SeriesCurrentSelectionPriorityTeamId
	}
	return 0
}

func (x *CSODOTALobby) GetSeriesCurrentPriorityTeamChoice() DOTASelectionPriorityChoice {
	if x != nil && x.SeriesCurrentPriorityTeamChoice != nil {
		return *x.SeriesCurrentPriorityTeamChoice
	}
	return Default_CSODOTALobby_SeriesCurrentPriorityTeamChoice
}

func (x *CSODOTALobby) GetSeriesCurrentNonPriorityTeamChoice() DOTASelectionPriorityChoice {
	if x != nil && x.SeriesCurrentNonPriorityTeamChoice != nil {
		return *x.SeriesCurrentNonPriorityTeamChoice
	}
	return Default_CSODOTALobby_SeriesCurrentNonPriorityTeamChoice
}

func (x *CSODOTALobby) GetSeriesCurrentSelectionPriorityUsedCoinToss() bool {
	if x != nil && x.SeriesCurrentSelectionPriorityUsedCoinToss != nil {
		return *x.SeriesCurrentSelectionPriorityUsedCoinToss
	}
	return false
}

func (x *CSODOTALobby) GetCurrentPrimaryEvent() EEvent {
	if x != nil && x.CurrentPrimaryEvent != nil {
		return *x.CurrentPrimaryEvent
	}
	return Default_CSODOTALobby_CurrentPrimaryEvent
}

func (x *CSODOTALobby) GetEmergencyDisabledHeroIds() []uint32 {
	if x != nil {
		return x.EmergencyDisabledHeroIds
	}
	return nil
}

func (x *CSODOTALobby) GetCustomGamePrivateKey() uint64 {
	if x != nil && x.CustomGamePrivateKey != nil {
		return *x.CustomGamePrivateKey
	}
	return 0
}

func (x *CSODOTALobby) GetCustomGamePenalties() bool {
	if x != nil && x.CustomGamePenalties != nil {
		return *x.CustomGamePenalties
	}
	return false
}

func (x *CSODOTALobby) GetLanHostPingLocation() string {
	if x != nil && x.LanHostPingLocation != nil {
		return *x.LanHostPingLocation
	}
	return ""
}

func (x *CSODOTALobby) GetLeagueNodeId() uint32 {
	if x != nil && x.LeagueNodeId != nil {
		return *x.LeagueNodeId
	}
	return 0
}

func (x *CSODOTALobby) GetMatchDuration() uint32 {
	if x != nil && x.MatchDuration != nil {
		return *x.MatchDuration
	}
	return 0
}

func (x *CSODOTALobby) GetCustomGameBrowseable() bool {
	if x != nil && x.CustomGameBrowseable != nil {
		return *x.CustomGameBrowseable
	}
	return false
}

func (x *CSODOTALobby) GetLeaguePhase() uint32 {
	if x != nil && x.LeaguePhase != nil {
		return *x.LeaguePhase
	}
	return 0
}

func (x *CSODOTALobby) GetRecordDetailedStats() bool {
	if x != nil && x.RecordDetailedStats != nil {
		return *x.RecordDetailedStats
	}
	return false
}

func (x *CSODOTALobby) GetExperimentalGameplayEnabled() bool {
	if x != nil && x.ExperimentalGameplayEnabled != nil {
		return *x.ExperimentalGameplayEnabled
	}
	return false
}

func (x *CSODOTALobby) GetGuildChallenges() []*CLobbyGuildChallenge {
	if x != nil {
		return x.GuildChallenges
	}
	return nil
}

func (x *CSODOTALobby) GetGuildDetails() []*CLobbyGuildDetails {
	if x != nil {
		return x.GuildDetails
	}
	return nil
}

func (x *CSODOTALobby) GetLobbyEventPoints() []*CMsgLobbyEventPoints {
	if x != nil {
		return x.LobbyEventPoints
	}
	return nil
}

type CMsgLobbyPlaytestDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Json *string `protobuf:"bytes,1,opt,name=json" json:"json,omitempty"`
}

func (x *CMsgLobbyPlaytestDetails) Reset() {
	*x = CMsgLobbyPlaytestDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_match_management_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgLobbyPlaytestDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgLobbyPlaytestDetails) ProtoMessage() {}

func (x *CMsgLobbyPlaytestDetails) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_match_management_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgLobbyPlaytestDetails.ProtoReflect.Descriptor instead.
func (*CMsgLobbyPlaytestDetails) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_match_management_proto_rawDescGZIP(), []int{12}
}

func (x *CMsgLobbyPlaytestDetails) GetJson() string {
	if x != nil && x.Json != nil {
		return *x.Json
	}
	return ""
}

type CMsgReadyCheckStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTimestamp     *uint32                             `protobuf:"varint,1,opt,name=start_timestamp,json=startTimestamp" json:"start_timestamp,omitempty"`
	FinishTimestamp    *uint32                             `protobuf:"varint,2,opt,name=finish_timestamp,json=finishTimestamp" json:"finish_timestamp,omitempty"`
	InitiatorAccountId *uint32                             `protobuf:"varint,3,opt,name=initiator_account_id,json=initiatorAccountId" json:"initiator_account_id,omitempty"`
	ReadyMembers       []*CMsgReadyCheckStatus_ReadyMember `protobuf:"bytes,4,rep,name=ready_members,json=readyMembers" json:"ready_members,omitempty"`
}

func (x *CMsgReadyCheckStatus) Reset() {
	*x = CMsgReadyCheckStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_match_management_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgReadyCheckStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgReadyCheckStatus) ProtoMessage() {}

func (x *CMsgReadyCheckStatus) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_match_management_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgReadyCheckStatus.ProtoReflect.Descriptor instead.
func (*CMsgReadyCheckStatus) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_match_management_proto_rawDescGZIP(), []int{13}
}

func (x *CMsgReadyCheckStatus) GetStartTimestamp() uint32 {
	if x != nil && x.StartTimestamp != nil {
		return *x.StartTimestamp
	}
	return 0
}

func (x *CMsgReadyCheckStatus) GetFinishTimestamp() uint32 {
	if x != nil && x.FinishTimestamp != nil {
		return *x.FinishTimestamp
	}
	return 0
}

func (x *CMsgReadyCheckStatus) GetInitiatorAccountId() uint32 {
	if x != nil && x.InitiatorAccountId != nil {
		return *x.InitiatorAccountId
	}
	return 0
}

func (x *CMsgReadyCheckStatus) GetReadyMembers() []*CMsgReadyCheckStatus_ReadyMember {
	if x != nil {
		return x.ReadyMembers
	}
	return nil
}

type CMsgPartyReadyCheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgPartyReadyCheckRequest) Reset() {
	*x = CMsgPartyReadyCheckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_match_management_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPartyReadyCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPartyReadyCheckRequest) ProtoMessage() {}

func (x *CMsgPartyReadyCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_match_management_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPartyReadyCheckRequest.ProtoReflect.Descriptor instead.
func (*CMsgPartyReadyCheckRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_match_management_proto_rawDescGZIP(), []int{14}
}

type CMsgPartyReadyCheckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *EReadyCheckRequestResult `protobuf:"varint,1,opt,name=result,enum=dota.EReadyCheckRequestResult,def=0" json:"result,omitempty"`
}

// Default values for CMsgPartyReadyCheckResponse fields.
const (
	Default_CMsgPartyReadyCheckResponse_Result = EReadyCheckRequestResult_k_EReadyCheckRequestResult_Success
)

func (x *CMsgPartyReadyCheckResponse) Reset() {
	*x = CMsgPartyReadyCheckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_match_management_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPartyReadyCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPartyReadyCheckResponse) ProtoMessage() {}

func (x *CMsgPartyReadyCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_match_management_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPartyReadyCheckResponse.ProtoReflect.Descriptor instead.
func (*CMsgPartyReadyCheckResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_match_management_proto_rawDescGZIP(), []int{15}
}

func (x *CMsgPartyReadyCheckResponse) GetResult() EReadyCheckRequestResult {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgPartyReadyCheckResponse_Result
}

type CMsgPartyReadyCheckAcknowledge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReadyStatus *EReadyCheckStatus `protobuf:"varint,1,opt,name=ready_status,json=readyStatus,enum=dota.EReadyCheckStatus,def=0" json:"ready_status,omitempty"`
}

// Default values for CMsgPartyReadyCheckAcknowledge fields.
const (
	Default_CMsgPartyReadyCheckAcknowledge_ReadyStatus = EReadyCheckStatus_k_EReadyCheckStatus_Unknown
)

func (x *CMsgPartyReadyCheckAcknowledge) Reset() {
	*x = CMsgPartyReadyCheckAcknowledge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_match_management_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPartyReadyCheckAcknowledge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPartyReadyCheckAcknowledge) ProtoMessage() {}

func (x *CMsgPartyReadyCheckAcknowledge) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_match_management_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPartyReadyCheckAcknowledge.ProtoReflect.Descriptor instead.
func (*CMsgPartyReadyCheckAcknowledge) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_match_management_proto_rawDescGZIP(), []int{16}
}

func (x *CMsgPartyReadyCheckAcknowledge) GetReadyStatus() EReadyCheckStatus {
	if x != nil && x.ReadyStatus != nil {
		return *x.ReadyStatus
	}
	return Default_CMsgPartyReadyCheckAcknowledge_ReadyStatus
}

type CMsgLobbyEventGameDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KvData []byte `protobuf:"bytes,1,opt,name=kv_data,json=kvData" json:"kv_data,omitempty"`
}

func (x *CMsgLobbyEventGameDetails) Reset() {
	*x = CMsgLobbyEventGameDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_match_management_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgLobbyEventGameDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgLobbyEventGameDetails) ProtoMessage() {}

func (x *CMsgLobbyEventGameDetails) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_match_management_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgLobbyEventGameDetails.ProtoReflect.Descriptor instead.
func (*CMsgLobbyEventGameDetails) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_match_management_proto_rawDescGZIP(), []int{17}
}

func (x *CMsgLobbyEventGameDetails) GetKvData() []byte {
	if x != nil {
		return x.KvData
	}
	return nil
}

type CMsgMatchMatchmakingStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AverageQueueTime      *uint32                      `protobuf:"varint,1,opt,name=average_queue_time,json=averageQueueTime" json:"average_queue_time,omitempty"`
	MaximumQueueTime      *uint32                      `protobuf:"varint,2,opt,name=maximum_queue_time,json=maximumQueueTime" json:"maximum_queue_time,omitempty"`
	BehaviorScoreVariance *EMatchBehaviorScoreVariance `protobuf:"varint,3,opt,name=behavior_score_variance,json=behaviorScoreVariance,enum=dota.EMatchBehaviorScoreVariance,def=0" json:"behavior_score_variance,omitempty"`
}

// Default values for CMsgMatchMatchmakingStats fields.
const (
	Default_CMsgMatchMatchmakingStats_BehaviorScoreVariance = EMatchBehaviorScoreVariance_k_EMatchBehaviorScoreVariance_Invalid
)

func (x *CMsgMatchMatchmakingStats) Reset() {
	*x = CMsgMatchMatchmakingStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_match_management_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgMatchMatchmakingStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgMatchMatchmakingStats) ProtoMessage() {}

func (x *CMsgMatchMatchmakingStats) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_match_management_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgMatchMatchmakingStats.ProtoReflect.Descriptor instead.
func (*CMsgMatchMatchmakingStats) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_match_management_proto_rawDescGZIP(), []int{18}
}

func (x *CMsgMatchMatchmakingStats) GetAverageQueueTime() uint32 {
	if x != nil && x.AverageQueueTime != nil {
		return *x.AverageQueueTime
	}
	return 0
}

func (x *CMsgMatchMatchmakingStats) GetMaximumQueueTime() uint32 {
	if x != nil && x.MaximumQueueTime != nil {
		return *x.MaximumQueueTime
	}
	return 0
}

func (x *CMsgMatchMatchmakingStats) GetBehaviorScoreVariance() EMatchBehaviorScoreVariance {
	if x != nil && x.BehaviorScoreVariance != nil {
		return *x.BehaviorScoreVariance
	}
	return Default_CMsgMatchMatchmakingStats_BehaviorScoreVariance
}

type CMvpData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mvps []*CMvpData_MvpDatum `protobuf:"bytes,1,rep,name=mvps" json:"mvps,omitempty"`
}

func (x *CMvpData) Reset() {
	*x = CMvpData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_match_management_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMvpData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMvpData) ProtoMessage() {}

func (x *CMvpData) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_match_management_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMvpData.ProtoReflect.Descriptor instead.
func (*CMvpData) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_match_management_proto_rawDescGZIP(), []int{19}
}

func (x *CMvpData) GetMvps() []*CMvpData_MvpDatum {
	if x != nil {
		return x.Mvps
	}
	return nil
}

type CSODOTAPartyInvite_PartyMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	SteamId *uint64 `protobuf:"fixed64,2,opt,name=steam_id,json=steamId" json:"steam_id,omitempty"`
	IsCoach *bool   `protobuf:"varint,4,opt,name=is_coach,json=isCoach" json:"is_coach,omitempty"`
}

func (x *CSODOTAPartyInvite_PartyMember) Reset() {
	*x = CSODOTAPartyInvite_PartyMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_match_management_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSODOTAPartyInvite_PartyMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSODOTAPartyInvite_PartyMember) ProtoMessage() {}

func (x *CSODOTAPartyInvite_PartyMember) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_match_management_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSODOTAPartyInvite_PartyMember.ProtoReflect.Descriptor instead.
func (*CSODOTAPartyInvite_PartyMember) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_match_management_proto_rawDescGZIP(), []int{2, 0}
}

func (x *CSODOTAPartyInvite_PartyMember) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CSODOTAPartyInvite_PartyMember) GetSteamId() uint64 {
	if x != nil && x.SteamId != nil {
		return *x.SteamId
	}
	return 0
}

func (x *CSODOTAPartyInvite_PartyMember) GetIsCoach() bool {
	if x != nil && x.IsCoach != nil {
		return *x.IsCoach
	}
	return false
}

type CSODOTALobbyInvite_LobbyMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	SteamId *uint64 `protobuf:"fixed64,2,opt,name=steam_id,json=steamId" json:"steam_id,omitempty"`
}

func (x *CSODOTALobbyInvite_LobbyMember) Reset() {
	*x = CSODOTALobbyInvite_LobbyMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_match_management_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSODOTALobbyInvite_LobbyMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSODOTALobbyInvite_LobbyMember) ProtoMessage() {}

func (x *CSODOTALobbyInvite_LobbyMember) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_match_management_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSODOTALobbyInvite_LobbyMember.ProtoReflect.Descriptor instead.
func (*CSODOTALobbyInvite_LobbyMember) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_match_management_proto_rawDescGZIP(), []int{3, 0}
}

func (x *CSODOTALobbyInvite_LobbyMember) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CSODOTALobbyInvite_LobbyMember) GetSteamId() uint64 {
	if x != nil && x.SteamId != nil {
		return *x.SteamId
	}
	return 0
}

type CSODOTALobby_CExtraMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       *uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Contents []byte  `protobuf:"bytes,2,opt,name=contents" json:"contents,omitempty"`
}

func (x *CSODOTALobby_CExtraMsg) Reset() {
	*x = CSODOTALobby_CExtraMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_match_management_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSODOTALobby_CExtraMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSODOTALobby_CExtraMsg) ProtoMessage() {}

func (x *CSODOTALobby_CExtraMsg) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_match_management_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSODOTALobby_CExtraMsg.ProtoReflect.Descriptor instead.
func (*CSODOTALobby_CExtraMsg) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_match_management_proto_rawDescGZIP(), []int{11, 0}
}

func (x *CSODOTALobby_CExtraMsg) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *CSODOTALobby_CExtraMsg) GetContents() []byte {
	if x != nil {
		return x.Contents
	}
	return nil
}

type CMsgReadyCheckStatus_ReadyMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId   *uint32            `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	ReadyStatus *EReadyCheckStatus `protobuf:"varint,2,opt,name=ready_status,json=readyStatus,enum=dota.EReadyCheckStatus,def=0" json:"ready_status,omitempty"`
}

// Default values for CMsgReadyCheckStatus_ReadyMember fields.
const (
	Default_CMsgReadyCheckStatus_ReadyMember_ReadyStatus = EReadyCheckStatus_k_EReadyCheckStatus_Unknown
)

func (x *CMsgReadyCheckStatus_ReadyMember) Reset() {
	*x = CMsgReadyCheckStatus_ReadyMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_match_management_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgReadyCheckStatus_ReadyMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgReadyCheckStatus_ReadyMember) ProtoMessage() {}

func (x *CMsgReadyCheckStatus_ReadyMember) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_match_management_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgReadyCheckStatus_ReadyMember.ProtoReflect.Descriptor instead.
func (*CMsgReadyCheckStatus_ReadyMember) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_match_management_proto_rawDescGZIP(), []int{13, 0}
}

func (x *CMsgReadyCheckStatus_ReadyMember) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgReadyCheckStatus_ReadyMember) GetReadyStatus() EReadyCheckStatus {
	if x != nil && x.ReadyStatus != nil {
		return *x.ReadyStatus
	}
	return Default_CMsgReadyCheckStatus_ReadyMember_ReadyStatus
}

type CMvpData_MvpDatum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slot      *uint32                          `protobuf:"varint,1,opt,name=slot" json:"slot,omitempty"`
	Accolades []*CMvpData_MvpDatum_MvpAccolade `protobuf:"bytes,2,rep,name=accolades" json:"accolades,omitempty"`
	AccountId *uint32                          `protobuf:"varint,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
}

func (x *CMvpData_MvpDatum) Reset() {
	*x = CMvpData_MvpDatum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_match_management_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMvpData_MvpDatum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMvpData_MvpDatum) ProtoMessage() {}

func (x *CMvpData_MvpDatum) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_match_management_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMvpData_MvpDatum.ProtoReflect.Descriptor instead.
func (*CMvpData_MvpDatum) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_match_management_proto_rawDescGZIP(), []int{19, 0}
}

func (x *CMvpData_MvpDatum) GetSlot() uint32 {
	if x != nil && x.Slot != nil {
		return *x.Slot
	}
	return 0
}

func (x *CMvpData_MvpDatum) GetAccolades() []*CMvpData_MvpDatum_MvpAccolade {
	if x != nil {
		return x.Accolades
	}
	return nil
}

func (x *CMvpData_MvpDatum) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

type CMvpData_MvpDatum_MvpAccolade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        *CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType `protobuf:"varint,1,opt,name=type,enum=dota.CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType,def=1" json:"type,omitempty"`
	DetailValue *float32                                       `protobuf:"fixed32,2,opt,name=detail_value,json=detailValue" json:"detail_value,omitempty"`
}

// Default values for CMvpData_MvpDatum_MvpAccolade fields.
const (
	Default_CMvpData_MvpDatum_MvpAccolade_Type = CMvpData_MvpDatum_MvpAccolade_kills
)

func (x *CMvpData_MvpDatum_MvpAccolade) Reset() {
	*x = CMvpData_MvpDatum_MvpAccolade{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_common_match_management_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMvpData_MvpDatum_MvpAccolade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMvpData_MvpDatum_MvpAccolade) ProtoMessage() {}

func (x *CMvpData_MvpDatum_MvpAccolade) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_match_management_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMvpData_MvpDatum_MvpAccolade.ProtoReflect.Descriptor instead.
func (*CMvpData_MvpDatum_MvpAccolade) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_match_management_proto_rawDescGZIP(), []int{19, 0, 0}
}

func (x *CMvpData_MvpDatum_MvpAccolade) GetType() CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_CMvpData_MvpDatum_MvpAccolade_Type
}

func (x *CMvpData_MvpDatum_MvpAccolade) GetDetailValue() float32 {
	if x != nil && x.DetailValue != nil {
		return *x.DetailValue
	}
	return 0
}

var File_dota_gcmessages_common_match_management_proto protoreflect.FileDescriptor

var file_dota_gcmessages_common_match_management_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x64, 0x6f, 0x74, 0x61, 0x5f, 0x67, 0x63, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x04, 0x64, 0x6f, 0x74, 0x61, 0x1a, 0x13, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x67, 0x63, 0x73, 0x64,
	0x6b, 0x5f, 0x67, 0x63, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x17, 0x64, 0x6f, 0x74, 0x61, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x64, 0x6f, 0x74,
	0x61, 0x5f, 0x67, 0x63, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xba, 0x05, 0x0a, 0x12, 0x43, 0x53,
	0x4f, 0x44, 0x4f, 0x54, 0x41, 0x50, 0x61, 0x72, 0x74, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x49, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x50, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x3a, 0x0c, 0x50, 0x41, 0x52, 0x54, 0x4e, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x52, 0x0b,
	0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69,
	0x73, 0x5f, 0x63, 0x6f, 0x61, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69,
	0x73, 0x43, 0x6f, 0x61, 0x63, 0x68, 0x12, 0x2e, 0x0a, 0x11, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x5f, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0d, 0x42, 0x02, 0x10, 0x01, 0x52, 0x0f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x11, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x5f, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0d, 0x42, 0x02, 0x10, 0x01, 0x52, 0x0f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x6e,
	0x67, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x5f, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x62, 0x69, 0x74,
	0x6d, 0x61, 0x73, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x50, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x42, 0x69, 0x74, 0x6d,
	0x61, 0x73, 0x6b, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x70, 0x6c, 0x75, 0x73, 0x5f, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x69, 0x73, 0x50, 0x6c, 0x75, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x72, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x5f, 0x73, 0x6b, 0x69,
	0x6c, 0x6c, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11,
	0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x5f, 0x62, 0x75, 0x79,
	0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65,
	0x79, 0x42, 0x75, 0x79, 0x69, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65,
	0x79, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x50, 0x72,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x6d,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x6d, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x30,
	0x0a, 0x14, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6c, 0x61,
	0x6e, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x73,
	0x12, 0x34, 0x0a, 0x16, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x14, 0x68, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x44, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x68, 0x61, 0x73, 0x5f, 0x68, 0x70,
	0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x68, 0x61, 0x73, 0x48, 0x70, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x36,
	0x0a, 0x17, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x15, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x22, 0xd0, 0x15, 0x0a, 0x0c, 0x43, 0x53, 0x4f, 0x44, 0x4f,
	0x54, 0x41, 0x50, 0x61, 0x72, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xa6, 0x1d, 0x01, 0x52,
	0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x08, 0x6c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x06, 0x52, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x49, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x18, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x53, 0x4f, 0x44, 0x4f, 0x54,
	0x41, 0x50, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x02, 0x55, 0x49,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4b, 0x0a, 0x22, 0x65, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x1f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x1c, 0x72, 0x61, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x72, 0x61, 0x77, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x5f, 0x6e,
	0x75, 0x6d, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x4e, 0x75, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x41, 0x0a,
	0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0f, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79,
	0x70, 0x65, 0x3a, 0x11, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43,
	0x41, 0x53, 0x55, 0x41, 0x4c, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x56, 0x0a, 0x0e, 0x62, 0x6f, 0x74, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c,
	0x74, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e,
	0x44, 0x4f, 0x54, 0x41, 0x42, 0x6f, 0x74, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74,
	0x79, 0x3a, 0x16, 0x42, 0x4f, 0x54, 0x5f, 0x44, 0x49, 0x46, 0x46, 0x49, 0x43, 0x55, 0x4c, 0x54,
	0x59, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x49, 0x56, 0x45, 0x52, 0x0d, 0x62, 0x6f, 0x74, 0x44, 0x69,
	0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x33,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0c, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x69, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x34,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x55, 0x69, 0x4c, 0x6f, 0x67, 0x6f,
	0x12, 0x24, 0x0a, 0x0e, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6c, 0x6f,
	0x67, 0x6f, 0x18, 0x35, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x74, 0x65, 0x61, 0x6d, 0x42, 0x61,
	0x73, 0x65, 0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x39, 0x0a, 0x19, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x39, 0x0a, 0x19, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x1d,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x61, 0x78, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x1a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x4d, 0x61, 0x78, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x12,
	0x26, 0x0a, 0x0e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e,
	0x43, 0x53, 0x4f, 0x44, 0x4f, 0x54, 0x41, 0x50, 0x61, 0x72, 0x74, 0x79, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x3f, 0x0a, 0x1c, 0x6c,
	0x6f, 0x77, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x61, 0x6d, 0x65,
	0x73, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x23, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x19, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x47, 0x61,
	0x6d, 0x65, 0x73, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x33, 0x0a, 0x16,
	0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x6f, 0x70,
	0x65, 0x6e, 0x46, 0x6f, 0x72, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x12, 0x3b, 0x0a, 0x0c, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x73, 0x18, 0x29, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43,
	0x53, 0x4f, 0x44, 0x4f, 0x54, 0x41, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x52, 0x0b, 0x73, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x12, 0x3b,
	0x0a, 0x0c, 0x72, 0x65, 0x63, 0x76, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x18, 0x2a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x53, 0x4f, 0x44,
	0x4f, 0x54, 0x41, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x0b,
	0x72, 0x65, 0x63, 0x76, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x2b, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x73,
	0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x73,
	0x12, 0x36, 0x0a, 0x17, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x2d, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x15, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x54, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x6f, 0x75, 0x72,
	0x6e, 0x65, 0x79, 0x5f, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x2f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x44, 0x69,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x6f, 0x75, 0x72,
	0x6e, 0x65, 0x79, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13,
	0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x74, 0x6f, 0x75, 0x72, 0x6e,
	0x65, 0x79, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x32, 0x0a, 0x15,
	0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x5f, 0x62, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x74, 0x6f, 0x75,
	0x72, 0x6e, 0x65, 0x79, 0x42, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x12, 0x3d, 0x0a, 0x1b, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x5f, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x36, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x86, 0x01, 0x0a, 0x1c, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x5f, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x37, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x45, 0x54,
	0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x51, 0x75, 0x65, 0x75, 0x65, 0x44, 0x65, 0x61, 0x64, 0x6c,
	0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x23, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75,
	0x72, 0x6e, 0x65, 0x79, 0x51, 0x75, 0x65, 0x75, 0x65, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x52, 0x19, 0x74,
	0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x51, 0x75, 0x65, 0x75, 0x65, 0x44, 0x65, 0x61, 0x64, 0x6c,
	0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x1b, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x5f,
	0x74, 0x6f, 0x5f, 0x66, 0x69, 0x6c, 0x6c, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x73,
	0x54, 0x6f, 0x46, 0x69, 0x6c, 0x6c, 0x12, 0x3b, 0x0a, 0x1a, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x18, 0x39, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x3a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x70, 0x61, 0x72, 0x74, 0x79, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x6f, 0x6c, 0x6f, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x73, 0x6f, 0x6c, 0x6f, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x62,
	0x6f, 0x74, 0x5f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x3c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x62, 0x6f, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x31, 0x0a, 0x15, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x63,
	0x6c, 0x61, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x3d,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x6c, 0x61, 0x6e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x64,
	0x79, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x61, 0x64, 0x79, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x79,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x44, 0x0a, 0x1f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x75, 0x6e,
	0x74, 0x69, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x12, 0x44, 0x0a, 0x1f, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x40,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x47, 0x61, 0x6d, 0x65,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x41, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69,
	0x73, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12,
	0x3b, 0x0a, 0x1a, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f,
	0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x42, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x17, 0x70, 0x61, 0x72, 0x74, 0x79, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x2b, 0x0a, 0x11,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x6c, 0x61, 0x67,
	0x73, 0x18, 0x43, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x65, 0x0a, 0x13, 0x68, 0x69, 0x67,
	0x68, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x44, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x45, 0x48,
	0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4d, 0x4d, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x3a, 0x19, 0x6b, 0x5f, 0x45, 0x48, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x4d, 0x4d, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x52, 0x11, 0x68,
	0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x36, 0x0a, 0x17, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x45, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x15, 0x6c, 0x61, 0x6e, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c,
	0x74, 0x79, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75,
	0x6c, 0x74, 0x79, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x30, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x06, 0x0a, 0x02, 0x55, 0x49, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x49, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x49,
	0x4e, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x02, 0x22, 0x8f, 0x03, 0x0a, 0x12, 0x43, 0x53,
	0x4f, 0x44, 0x4f, 0x54, 0x41, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x12, 0x1f, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x04, 0x80, 0xa6, 0x1d, 0x01, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x3e, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x53, 0x4f, 0x44, 0x4f, 0x54, 0x41, 0x50,
	0x61, 0x72, 0x74, 0x79, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12,
	0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x6c, 0x6f, 0x77, 0x5f,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x5f, 0x63,
	0x6f, 0x61, 0x63, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x61, 0x73, 0x43, 0x6f,
	0x61, 0x63, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x67, 0x69,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x06, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x47,
	0x69, 0x64, 0x1a, 0x57, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x74, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x61, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x43, 0x6f, 0x61, 0x63, 0x68, 0x22, 0x92, 0x03, 0x0a, 0x12,
	0x43, 0x53, 0x4f, 0x44, 0x4f, 0x54, 0x41, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xa6, 0x1d, 0x01, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x3e, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x53, 0x4f, 0x44, 0x4f, 0x54,
	0x41, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x2e, 0x4c, 0x6f, 0x62,
	0x62, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x5f, 0x67, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x06, 0x52, 0x09, 0x69, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x47, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x72, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x72, 0x63, 0x12, 0x32,
	0x0a, 0x15, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x07, 0x52, 0x13, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x1a, 0x3c, 0x0a, 0x0b, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64,
	0x22, 0xba, 0x02, 0x0a, 0x0f, 0x43, 0x4d, 0x73, 0x67, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x6f, 0x62, 0x62, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4e, 0x0a, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x64, 0x6f, 0x74, 0x61,
	0x2e, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x3a,
	0x19, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x52, 0x55, 0x4c, 0x45, 0x53, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x52, 0x09, 0x67, 0x61, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x72, 0x5f,
	0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x6c, 0x65, 0x61, 0x76, 0x65, 0x72, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x30,
	0x0a, 0x14, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x68, 0x61,
	0x70, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x48, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x65, 0x64,
	0x12, 0x32, 0x0a, 0x15, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x13, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x61, 0x73, 0x73, 0x5f, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6d,
	0x61, 0x73, 0x73, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x22, 0x9f, 0x0e,
	0x0a, 0x12, 0x43, 0x53, 0x4f, 0x44, 0x4f, 0x54, 0x41, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06,
	0x42, 0x04, 0x80, 0xa6, 0x1d, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x65,
	0x72, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x72,
	0x6f, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x12, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x47, 0x43,
	0x5f, 0x54, 0x45, 0x41, 0x4d, 0x3a, 0x16, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x47, 0x43, 0x5f, 0x54,
	0x45, 0x41, 0x4d, 0x5f, 0x47, 0x4f, 0x4f, 0x44, 0x5f, 0x47, 0x55, 0x59, 0x53, 0x52, 0x04, 0x74,
	0x65, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x65, 0x74, 0x61,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x78, 0x70,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x61, 0x58, 0x70, 0x12, 0x26,
	0x0a, 0x0f, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x78, 0x70, 0x5f, 0x61, 0x77, 0x61, 0x72, 0x64, 0x65,
	0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x65, 0x74, 0x61, 0x58, 0x70, 0x41,
	0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x12, 0x4f, 0x0a, 0x0d, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x72,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e,
	0x64, 0x6f, 0x74, 0x61, 0x2e, 0x44, 0x4f, 0x54, 0x41, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x74, 0x3a, 0x10, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x4c, 0x45,
	0x41, 0x56, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x52, 0x0c, 0x6c, 0x65, 0x61, 0x76, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x65, 0x61, 0x76, 0x65,
	0x72, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1b,
	0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x3a,
	0x01, 0x36, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x69, 0x64, 0x18,
	0x14, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x48,
	0x65, 0x72, 0x6f, 0x49, 0x64, 0x12, 0x58, 0x0a, 0x14, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x0c, 0x50,
	0x41, 0x52, 0x54, 0x4e, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x52, 0x12, 0x70, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x26, 0x0a, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x68, 0x65, 0x72, 0x6f, 0x5f,
	0x69, 0x64, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x48, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x0a, 0x63, 0x6f, 0x61, 0x63, 0x68,
	0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x64, 0x6f,
	0x74, 0x61, 0x2e, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x47, 0x43, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x3a,
	0x13, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x47, 0x43, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x4e, 0x4f,
	0x54, 0x45, 0x41, 0x4d, 0x52, 0x09, 0x63, 0x6f, 0x61, 0x63, 0x68, 0x54, 0x65, 0x61, 0x6d, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x61, 0x63, 0x68, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18,
	0x2a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x6f, 0x61, 0x63, 0x68, 0x52, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x12, 0x2b, 0x0a, 0x12, 0x70, 0x77, 0x72, 0x64, 0x5f, 0x63, 0x79, 0x62, 0x65, 0x72,
	0x5f, 0x63, 0x61, 0x66, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x70, 0x77, 0x72, 0x64, 0x43, 0x79, 0x62, 0x65, 0x72, 0x43, 0x61, 0x66, 0x65, 0x49, 0x64, 0x12,
	0x2f, 0x0a, 0x14, 0x70, 0x77, 0x72, 0x64, 0x5f, 0x63, 0x79, 0x62, 0x65, 0x72, 0x5f, 0x63, 0x61,
	0x66, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70,
	0x77, 0x72, 0x64, 0x43, 0x79, 0x62, 0x65, 0x72, 0x43, 0x61, 0x66, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x39, 0x0a, 0x19, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x72, 0x61, 0x6e,
	0x64, 0x6f, 0x6d, 0x5f, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x62, 0x69, 0x74, 0x73, 0x18, 0x29, 0x20,
	0x03, 0x28, 0x07, 0x52, 0x16, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x61, 0x6e,
	0x64, 0x6f, 0x6d, 0x48, 0x65, 0x72, 0x6f, 0x42, 0x69, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x72,
	0x61, 0x6e, 0x6b, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x11,
	0x52, 0x0a, 0x72, 0x61, 0x6e, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x12, 0x35, 0x0a, 0x17, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x14, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64,
	0x73, 0x12, 0x4e, 0x0a, 0x11, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x64,
	0x6f, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x11, 0x4d,
	0x41, 0x54, 0x43, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x53, 0x55, 0x41, 0x4c,
	0x52, 0x0f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x30, 0x0a, 0x14, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x65,
	0x61, 0x6d, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x23, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x12, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x70, 0x6c, 0x75, 0x73, 0x5f, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x18, 0x24, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x69, 0x73, 0x50, 0x6c, 0x75, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x72, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x25, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x72, 0x61,
	0x6e, 0x6b, 0x54, 0x69, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x30, 0x0a,
	0x14, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6c, 0x61, 0x6e,
	0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12,
	0x28, 0x0a, 0x10, 0x63, 0x61, 0x6e, 0x5f, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x18, 0x27, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x63, 0x61, 0x6e, 0x45, 0x61,
	0x72, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x57, 0x0a, 0x13, 0x6c, 0x69, 0x76,
	0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x65, 0x61, 0x6d,
	0x18, 0x28, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x44, 0x4f,
	0x54, 0x41, 0x5f, 0x47, 0x43, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x3a, 0x13, 0x44, 0x4f, 0x54, 0x41,
	0x5f, 0x47, 0x43, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x4e, 0x4f, 0x54, 0x45, 0x41, 0x4d, 0x52,
	0x11, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x65,
	0x61, 0x6d, 0x12, 0x29, 0x0a, 0x11, 0x77, 0x61, 0x73, 0x5f, 0x6d, 0x76, 0x70, 0x5f, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x77,
	0x61, 0x73, 0x4d, 0x76, 0x70, 0x4c, 0x61, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a,
	0x0e, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18,
	0x2c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x77, 0x61,
	0x72, 0x64, 0x52, 0x0d, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x12, 0x56, 0x0a, 0x19, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x5f, 0x6f, 0x6e, 0x5f, 0x76, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x2d,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x77, 0x61, 0x72,
	0x64, 0x52, 0x16, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x4f, 0x6e, 0x56, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x60, 0x0a, 0x13, 0x72, 0x61, 0x6e,
	0x6b, 0x5f, 0x6d, 0x6d, 0x72, 0x5f, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x2e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x45, 0x44,
	0x4f, 0x54, 0x41, 0x4d, 0x4d, 0x52, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x3a,
	0x18, 0x6b, 0x5f, 0x45, 0x44, 0x4f, 0x54, 0x41, 0x4d, 0x4d, 0x52, 0x42, 0x6f, 0x6f, 0x73, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x52, 0x10, 0x72, 0x61, 0x6e, 0x6b, 0x4d,
	0x6d, 0x72, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x6a, 0x75, 0x73,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x11, 0x52, 0x14, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x18, 0x30,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x6b, 0x54, 0x69, 0x65, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x22,
	0xe2, 0x03, 0x0a, 0x11, 0x43, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x61, 0x67, 0x12, 0x17, 0x0a,
	0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6c,
	0x6f, 0x67, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4c,
	0x6f, 0x67, 0x6f, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x74, 0x65, 0x61,
	0x6d, 0x42, 0x61, 0x73, 0x65, 0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x65, 0x61,
	0x6d, 0x5f, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0e, 0x74, 0x65, 0x61, 0x6d, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x4c,
	0x6f, 0x67, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x74, 0x65, 0x61, 0x6d,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x1f, 0x0a, 0x0b,
	0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x11, 0x52, 0x0a, 0x72, 0x61, 0x6e, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x20, 0x0a,
	0x0c, 0x69, 0x73, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x48, 0x6f, 0x6d, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x12,
	0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x43,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x41, 0x0a,
	0x1d, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x1a, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x22, 0x0a, 0x0d, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x67,
	0x6f, 0x55, 0x72, 0x6c, 0x22, 0xab, 0x03, 0x0a, 0x12, 0x43, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x47,
	0x75, 0x69, 0x6c, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x67,
	0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x67,
	0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x11, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x32, 0x0a, 0x15, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x67, 0x75,
	0x69, 0x6c, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x21,
	0x0a, 0x0c, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x66, 0x6c, 0x61, 0x67,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x46, 0x6c,
	0x61, 0x67, 0x73, 0x12, 0x50, 0x0a, 0x0e, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x66, 0x6f, 0x72, 0x5f,
	0x67, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x64, 0x6f,
	0x74, 0x61, 0x2e, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x47, 0x43, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x3a,
	0x16, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x47, 0x43, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x47, 0x4f,
	0x4f, 0x44, 0x5f, 0x47, 0x55, 0x59, 0x53, 0x52, 0x0c, 0x74, 0x65, 0x61, 0x6d, 0x46, 0x6f, 0x72,
	0x47, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x74,
	0x61, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x54,
	0x61, 0x67, 0x22, 0xc3, 0x01, 0x0a, 0x18, 0x43, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x24, 0x0a, 0x0e, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x69, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x66,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x70, 0x70,
	0x6c, 0x79, 0x5f, 0x63, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x69, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x72, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a,
	0x0d, 0x69, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x44, 0x72, 0x6f,
	0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x22, 0xa5, 0x01, 0x0a, 0x1a, 0x43, 0x4c, 0x6f,
	0x62, 0x62, 0x79, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x22, 0xa8, 0x03, 0x0a, 0x14, 0x43, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x47, 0x75, 0x69, 0x6c, 0x64,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x75, 0x69,
	0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x67, 0x75, 0x69,
	0x6c, 0x64, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x45, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x3a, 0x0d, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x4e,
	0x4f, 0x4e, 0x45, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15,
	0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x63, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x2f, 0x0a, 0x13, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x63,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12,
	0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x36, 0x0a, 0x17, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x15, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x3d, 0x0a, 0x1b, 0x63, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x61, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x18, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x41, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x6c, 0x69,
	0x67, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x12, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x22, 0xb8, 0x2c, 0x0a, 0x0c,
	0x43, 0x53, 0x4f, 0x44, 0x4f, 0x54, 0x41, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x12, 0x1f, 0x0a, 0x08,
	0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04,
	0x80, 0xa6, 0x1d, 0x01, 0x52, 0x07, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x64, 0x12, 0x32, 0x0a,
	0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x53, 0x4f, 0x44, 0x4f, 0x54, 0x41, 0x4c, 0x6f, 0x62,
	0x62, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x12, 0x3b, 0x0a, 0x0c, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43,
	0x53, 0x4f, 0x44, 0x4f, 0x54, 0x41, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x52, 0x0b, 0x6c, 0x65, 0x66, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x06, 0x52, 0x08, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x09, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x06, 0x3a, 0x01,
	0x30, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x67, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x06, 0x52, 0x0e, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x73, 0x12, 0x32, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x53, 0x4f, 0x44, 0x4f, 0x54, 0x41, 0x4c,
	0x6f, 0x62, 0x62, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x02, 0x55, 0x49, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12,
	0x44, 0x0a, 0x0a, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x53, 0x4f, 0x44, 0x4f,
	0x54, 0x41, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x2e, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x3a, 0x07, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x52, 0x09, 0x6c, 0x6f, 0x62, 0x62,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x63,
	0x68, 0x65, 0x61, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x43, 0x68, 0x65, 0x61, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x66, 0x69, 0x6c, 0x6c,
	0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x62, 0x6f, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x66, 0x69, 0x6c, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x42, 0x6f, 0x74, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x0c, 0x74, 0x65,
	0x61, 0x6d, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x54, 0x65,
	0x61, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0b, 0x74, 0x65, 0x61, 0x6d, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x75, 0x74, 0x6f, 0x72, 0x69,
	0x61, 0x6c, 0x5f, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x74, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x12,
	0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65,
	0x49, 0x64, 0x12, 0x26, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0c, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x0a, 0x67, 0x61,
	0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14,
	0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x3a, 0x19, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x52,
	0x55, 0x4c, 0x45, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x52,
	0x09, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x75,
	0x6d, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x53, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x6f, 0x72,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x3b, 0x0a, 0x07, 0x63, 0x6d, 0x5f, 0x70, 0x69, 0x63, 0x6b, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x12, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x43,
	0x4d, 0x5f, 0x50, 0x49, 0x43, 0x4b, 0x3a, 0x0e, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x43, 0x4d, 0x5f,
	0x52, 0x41, 0x4e, 0x44, 0x4f, 0x4d, 0x52, 0x06, 0x63, 0x6d, 0x50, 0x69, 0x63, 0x6b, 0x12, 0x19,
	0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x10, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x53, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x62, 0x0a, 0x16, 0x62, 0x6f,
	0x74, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x5f, 0x72, 0x61, 0x64,
	0x69, 0x61, 0x6e, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x64, 0x6f, 0x74,
	0x61, 0x2e, 0x44, 0x4f, 0x54, 0x41, 0x42, 0x6f, 0x74, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75,
	0x6c, 0x74, 0x79, 0x3a, 0x13, 0x42, 0x4f, 0x54, 0x5f, 0x44, 0x49, 0x46, 0x46, 0x49, 0x43, 0x55,
	0x4c, 0x54, 0x59, 0x5f, 0x48, 0x41, 0x52, 0x44, 0x52, 0x14, 0x62, 0x6f, 0x74, 0x44, 0x69, 0x66,
	0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x52, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x12, 0x4e,
	0x0a, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x25,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x44, 0x4f, 0x54, 0x41,
	0x47, 0x61, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x14, 0x47, 0x41, 0x4d,
	0x45, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e,
	0x54, 0x52, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50,
	0x0a, 0x14, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x26, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64,
	0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x12, 0x74, 0x69,
	0x6d, 0x65, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x27, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x65, 0x61, 0x67, 0x75, 0x65, 0x69, 0x64, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c,
	0x65, 0x61, 0x67, 0x75, 0x65, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x15, 0x70, 0x65, 0x6e, 0x61, 0x6c,
	0x74, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74,
	0x18, 0x2b, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x13, 0x70, 0x65, 0x6e, 0x61, 0x6c,
	0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x12, 0x2f,
	0x0a, 0x12, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f,
	0x64, 0x69, 0x72, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x10, 0x70,
	0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x44, 0x69, 0x72, 0x65, 0x12,
	0x20, 0x0a, 0x0c, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x2d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x6f, 0x61, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x2e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x5f, 0x77, 0x69, 0x6e, 0x73, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x11, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x57, 0x69,
	0x6e, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x69, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x5f, 0x77, 0x69, 0x6e, 0x73, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x64, 0x69,
	0x72, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x57, 0x69, 0x6e, 0x73, 0x12, 0x25, 0x0a, 0x0e,
	0x6c, 0x6f, 0x6f, 0x74, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x18, 0x31,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6c, 0x6f, 0x6f, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x6f, 0x6f, 0x74, 0x5f, 0x61, 0x77, 0x61, 0x72,
	0x64, 0x65, 0x64, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6c, 0x6f, 0x6f, 0x74, 0x41,
	0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x07, 0x61, 0x6c, 0x6c, 0x63, 0x68, 0x61,
	0x74, 0x18, 0x33, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x07,
	0x61, 0x6c, 0x6c, 0x63, 0x68, 0x61, 0x74, 0x12, 0x4a, 0x0a, 0x0d, 0x64, 0x6f, 0x74, 0x61, 0x5f,
	0x74, 0x76, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x44, 0x6f, 0x74, 0x61, 0x54,
	0x56, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x3a, 0x0e, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x44, 0x6f, 0x74,
	0x61, 0x54, 0x56, 0x5f, 0x31, 0x30, 0x52, 0x0b, 0x64, 0x6f, 0x74, 0x61, 0x54, 0x76, 0x44, 0x65,
	0x6c, 0x61, 0x79, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x67, 0x61,
	0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a,
	0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x37, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4d, 0x61,
	0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f,
	0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c,
	0x74, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x61, 0x6e, 0x18, 0x39, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x03, 0x6c, 0x61, 0x6e, 0x12, 0x56, 0x0a, 0x16, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x3a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4c, 0x6f, 0x62,
	0x62, 0x79, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x14, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x34, 0x0a, 0x16,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x18,
	0x3c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x3d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x43, 0x0a, 0x0e, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x18, 0x3e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x6f, 0x74,
	0x61, 0x2e, 0x43, 0x53, 0x4f, 0x44, 0x4f, 0x54, 0x41, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x2e, 0x43,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x0d, 0x65, 0x78, 0x74, 0x72, 0x61, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x09, 0x73, 0x61, 0x76, 0x65, 0x5f,
	0x67, 0x61, 0x6d, 0x65, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x6f, 0x74,
	0x61, 0x2e, 0x43, 0x44, 0x4f, 0x54, 0x41, 0x53, 0x61, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x52,
	0x08, 0x73, 0x61, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x68, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x65,
	0x64, 0x18, 0x41, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x66, 0x69, 0x72, 0x73, 0x74, 0x42, 0x6c,
	0x6f, 0x6f, 0x64, 0x48, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x12, 0x51, 0x0a, 0x0d, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x46, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x45, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x3a, 0x17, 0x6b, 0x5f, 0x45, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x52, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x27,
	0x0a, 0x0f, 0x6d, 0x61, 0x73, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x18, 0x43, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6d, 0x61, 0x73, 0x73, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x44, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a,
	0x12, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x73, 0x18, 0x47, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x4d, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x73, 0x18, 0x48, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4d,
	0x61, 0x78, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x49, 0x0a, 0x0c, 0x70, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x49, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x18, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x0c, 0x50, 0x41, 0x52, 0x54, 0x4e,
	0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x55, 0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e,
	0x44, 0x4f, 0x54, 0x41, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x3a, 0x1a, 0x44, 0x4f, 0x54, 0x41, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x56, 0x69,
	0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52,
	0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x72, 0x63, 0x18, 0x4c,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x47, 0x61, 0x6d, 0x65,
	0x43, 0x72, 0x63, 0x12, 0x42, 0x0a, 0x1e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x67, 0x61,
	0x6d, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x6c, 0x6f, 0x62, 0x62, 0x79, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x50, 0x20, 0x01, 0x28, 0x07, 0x52, 0x13, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x47, 0x61,
	0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x36, 0x0a, 0x17, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x51, 0x20, 0x03, 0x28, 0x04, 0x52, 0x15, 0x70, 0x72,
	0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x52,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x46, 0x0a, 0x20, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x73, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18,
	0x53, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x47, 0x61, 0x6d,
	0x65, 0x55, 0x73, 0x65, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x57, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x67, 0x61,
	0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x61, 0x0a, 0x0d, 0x70,
	0x61, 0x75, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x58, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x44,
	0x6f, 0x74, 0x61, 0x50, 0x61, 0x75, 0x73, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x3a,
	0x1f, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x44, 0x6f, 0x74, 0x61, 0x50, 0x61, 0x75, 0x73, 0x65, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x55, 0x6e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64,
	0x52, 0x0c, 0x70, 0x61, 0x75, 0x73, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x2f,
	0x0a, 0x14, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x6d, 0x76, 0x70, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x59, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6c, 0x6f,
	0x62, 0x62, 0x79, 0x4d, 0x76, 0x70, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x3d, 0x0a, 0x1b, 0x77, 0x65, 0x65, 0x6b, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x6f, 0x75, 0x72, 0x6e,
	0x65, 0x79, 0x5f, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x5a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x77, 0x65, 0x65, 0x6b, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x75,
	0x72, 0x6e, 0x65, 0x79, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3d,
	0x0a, 0x1b, 0x77, 0x65, 0x65, 0x6b, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65,
	0x79, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x5b, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x18, 0x77, 0x65, 0x65, 0x6b, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x75, 0x72,
	0x6e, 0x65, 0x79, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x41, 0x0a,
	0x1d, 0x77, 0x65, 0x65, 0x6b, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79,
	0x5f, 0x62, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x5c,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x77, 0x65, 0x65, 0x6b, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x75,
	0x72, 0x6e, 0x65, 0x79, 0x42, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x12, 0x5c, 0x0a, 0x13, 0x62, 0x6f, 0x74, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c,
	0x74, 0x79, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x18, 0x5d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e,
	0x64, 0x6f, 0x74, 0x61, 0x2e, 0x44, 0x4f, 0x54, 0x41, 0x42, 0x6f, 0x74, 0x44, 0x69, 0x66, 0x66,
	0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x3a, 0x13, 0x42, 0x4f, 0x54, 0x5f, 0x44, 0x49, 0x46, 0x46,
	0x49, 0x43, 0x55, 0x4c, 0x54, 0x59, 0x5f, 0x48, 0x41, 0x52, 0x44, 0x52, 0x11, 0x62, 0x6f, 0x74,
	0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x44, 0x69, 0x72, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x62, 0x6f, 0x74, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x18, 0x5e, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x62, 0x6f, 0x74, 0x52, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x62, 0x6f, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x18, 0x5f, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x62, 0x6f, 0x74, 0x44, 0x69, 0x72, 0x65, 0x12, 0x48, 0x0a, 0x19, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x60, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x64, 0x6f, 0x74, 0x61, 0x2e, 0x45, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x17, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x7f, 0x0a, 0x18, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73,
	0x18, 0x61, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x44, 0x4f,
	0x54, 0x41, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x3a, 0x23, 0x6b, 0x5f, 0x44, 0x4f, 0x54, 0x41,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x5f, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x52, 0x16, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x59, 0x0a, 0x2a, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x62, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x25, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x64,
	0x12, 0x57, 0x0a, 0x29, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x63, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x24, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x96, 0x01, 0x0a, 0x23, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x44,
	0x4f, 0x54, 0x41, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x3a, 0x25, 0x6b, 0x5f, 0x44, 0x4f,
	0x54, 0x41, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x52, 0x1f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x12, 0x9d, 0x01, 0x0a, 0x27, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x65,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x44, 0x4f, 0x54, 0x41,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x3a, 0x25, 0x6b, 0x5f, 0x44, 0x4f, 0x54, 0x41, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x22,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x6e,
	0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x12, 0x64, 0x0a, 0x30, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x69,
	0x6e, 0x5f, 0x74, 0x6f, 0x73, 0x73, 0x18, 0x66, 0x20, 0x01, 0x28, 0x08, 0x52, 0x2a, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x55, 0x73, 0x65, 0x64,
	0x43, 0x6f, 0x69, 0x6e, 0x54, 0x6f, 0x73, 0x73, 0x12, 0x4f, 0x0a, 0x15, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x45,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x3a, 0x0d, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x5f,
	0x4e, 0x4f, 0x4e, 0x45, 0x52, 0x13, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x1b, 0x65, 0x6d, 0x65,
	0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f,
	0x68, 0x65, 0x72, 0x6f, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x69, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x18,
	0x65, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x48, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x06, 0x52, 0x14, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12,
	0x32, 0x0a, 0x15, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x70,
	0x65, 0x6e, 0x61, 0x6c, 0x74, 0x69, 0x65, 0x73, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x6c, 0x61, 0x6e, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x5f,
	0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x6d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x6c, 0x61, 0x6e, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x69, 0x6e, 0x67,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x65, 0x61, 0x67,
	0x75, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x25,
	0x0a, 0x0e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x6f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x70, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x47, 0x61, 0x6d,
	0x65, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6c,
	0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x71, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x32,
	0x0a, 0x15, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x72, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x42, 0x0a, 0x1d, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x6c, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x74, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x65, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x10, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f,
	0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x75, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x47, 0x75,
	0x69, 0x6c, 0x64, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x0f, 0x67, 0x75,
	0x69, 0x6c, 0x64, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x3d, 0x0a,
	0x0d, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x76,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4c, 0x6f, 0x62,
	0x62, 0x79, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0c,
	0x67, 0x75, 0x69, 0x6c, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x48, 0x0a, 0x12,
	0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x18, 0x77, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x52, 0x10, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x1a, 0x37, 0x0a, 0x09, 0x43, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x4d, 0x73, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x22,
	0x64, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x06, 0x0a, 0x02, 0x55, 0x49, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x41, 0x44, 0x59, 0x55, 0x50, 0x10, 0x04, 0x12, 0x0f, 0x0a,
	0x0b, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x53, 0x45, 0x54, 0x55, 0x50, 0x10, 0x01, 0x12, 0x07,
	0x0a, 0x03, 0x52, 0x55, 0x4e, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x4f, 0x53, 0x54, 0x47,
	0x41, 0x4d, 0x45, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x4f, 0x54, 0x52, 0x45, 0x41, 0x44,
	0x59, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x41, 0x53, 0x53,
	0x49, 0x47, 0x4e, 0x10, 0x06, 0x22, 0x8e, 0x02, 0x0a, 0x09, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x07, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x41, 0x53,
	0x55, 0x41, 0x4c, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x50,
	0x52, 0x41, 0x43, 0x54, 0x49, 0x43, 0x45, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4f, 0x4f,
	0x50, 0x5f, 0x42, 0x4f, 0x54, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x04, 0x12, 0x15, 0x0a,
	0x11, 0x4c, 0x45, 0x47, 0x41, 0x43, 0x59, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x4d, 0x41, 0x54,
	0x43, 0x48, 0x10, 0x05, 0x12, 0x1b, 0x0a, 0x17, 0x4c, 0x45, 0x47, 0x41, 0x43, 0x59, 0x5f, 0x53,
	0x4f, 0x4c, 0x4f, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10,
	0x06, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4f, 0x4d, 0x50, 0x45, 0x54, 0x49, 0x54, 0x49, 0x56, 0x45,
	0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x41, 0x53, 0x55,
	0x41, 0x4c, 0x5f, 0x31, 0x56, 0x31, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x08, 0x12, 0x13,
	0x0a, 0x0f, 0x57, 0x45, 0x45, 0x4b, 0x45, 0x4e, 0x44, 0x5f, 0x54, 0x4f, 0x55, 0x52, 0x4e, 0x45,
	0x59, 0x10, 0x09, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x42, 0x4f, 0x54,
	0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x0a, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x50, 0x45, 0x43,
	0x54, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x0b, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x0c, 0x12, 0x0c, 0x0a, 0x08, 0x47, 0x41, 0x55, 0x4e,
	0x54, 0x4c, 0x45, 0x54, 0x10, 0x0d, 0x22, 0x2e, 0x0a, 0x18, 0x43, 0x4d, 0x73, 0x67, 0x4c, 0x6f,
	0x62, 0x62, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x74, 0x65, 0x73, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x22, 0xf1, 0x02, 0x0a, 0x14, 0x43, 0x4d, 0x73, 0x67, 0x52,
	0x65, 0x61, 0x64, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x27, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x12, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x0d, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x64,
	0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x61, 0x64, 0x79, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x79, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x0c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x1a, 0x85, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x61, 0x64, 0x79, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x57, 0x0a, 0x0c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x45,
	0x52, 0x65, 0x61, 0x64, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x3a, 0x1b, 0x6b, 0x5f, 0x45, 0x52, 0x65, 0x61, 0x64, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x52, 0x0b, 0x72,
	0x65, 0x61, 0x64, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x1c, 0x0a, 0x1a, 0x43, 0x4d,
	0x73, 0x67, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x61, 0x64, 0x79, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x79, 0x0a, 0x1b, 0x43, 0x4d, 0x73, 0x67,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x61, 0x64, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x45,
	0x52, 0x65, 0x61, 0x64, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a, 0x22, 0x6b, 0x5f, 0x45, 0x52, 0x65, 0x61, 0x64,
	0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x5f, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x79, 0x0a, 0x1e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x52, 0x65, 0x61, 0x64, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x12, 0x57, 0x0a, 0x0c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x64, 0x6f,
	0x74, 0x61, 0x2e, 0x45, 0x52, 0x65, 0x61, 0x64, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x3a, 0x1b, 0x6b, 0x5f, 0x45, 0x52, 0x65, 0x61, 0x64, 0x79, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x52, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x34,
	0x0a, 0x19, 0x43, 0x4d, 0x73, 0x67, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x47, 0x61, 0x6d, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x6b,
	0x76, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6b, 0x76,
	0x44, 0x61, 0x74, 0x61, 0x22, 0xfa, 0x01, 0x0a, 0x19, 0x43, 0x4d, 0x73, 0x67, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10,
	0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6d, 0x61,
	0x78, 0x69, 0x6d, 0x75, 0x6d, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x80,
	0x01, 0x0a, 0x17, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x5f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x21, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x45, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x42, 0x65,
	0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x6e, 0x63, 0x65, 0x3a, 0x25, 0x6b, 0x5f, 0x45, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x42, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x15, 0x62, 0x65, 0x68, 0x61,
	0x76, 0x69, 0x6f, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63,
	0x65, 0x22, 0xea, 0x69, 0x0a, 0x08, 0x43, 0x4d, 0x76, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2b,
	0x0a, 0x04, 0x6d, 0x76, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64,
	0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x76, 0x70, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x76, 0x70,
	0x44, 0x61, 0x74, 0x75, 0x6d, 0x52, 0x04, 0x6d, 0x76, 0x70, 0x73, 0x1a, 0xb0, 0x69, 0x0a, 0x08,
	0x4d, 0x76, 0x70, 0x44, 0x61, 0x74, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x41, 0x0a, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x6c, 0x61, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x76, 0x70, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x4d, 0x76, 0x70, 0x44, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x4d, 0x76, 0x70, 0x41, 0x63, 0x63, 0x6f,
	0x6c, 0x61, 0x64, 0x65, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x6c, 0x61, 0x64, 0x65, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x1a, 0xad,
	0x68, 0x0a, 0x0b, 0x4d, 0x76, 0x70, 0x41, 0x63, 0x63, 0x6f, 0x6c, 0x61, 0x64, 0x65, 0x12, 0x4e,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x64,
	0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x76, 0x70, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x76, 0x70,
	0x44, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x4d, 0x76, 0x70, 0x41, 0x63, 0x63, 0x6f, 0x6c, 0x61, 0x64,
	0x65, 0x2e, 0x4d, 0x76, 0x70, 0x41, 0x63, 0x63, 0x6f, 0x6c, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x3a, 0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0xaa, 0x67, 0x0a, 0x0f, 0x4d, 0x76, 0x70, 0x41, 0x63, 0x63, 0x6f, 0x6c, 0x61, 0x64,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x10, 0x01,
	0x12, 0x0a, 0x0a, 0x06, 0x64, 0x65, 0x61, 0x74, 0x68, 0x73, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07,
	0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x6e, 0x65, 0x74,
	0x5f, 0x77, 0x6f, 0x72, 0x74, 0x68, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x69, 0x74, 0x65, 0x6d,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x10, 0x07,
	0x12, 0x10, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x64,
	0x10, 0x08, 0x12, 0x0b, 0x0a, 0x07, 0x64, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x10, 0x09, 0x12,
	0x11, 0x0a, 0x0d, 0x63, 0x61, 0x6d, 0x70, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x64,
	0x10, 0x0a, 0x12, 0x0d, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x68, 0x69, 0x74, 0x73, 0x10,
	0x0b, 0x12, 0x0a, 0x0a, 0x06, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x73, 0x10, 0x0c, 0x12, 0x22, 0x0a,
	0x1e, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x4b, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x53, 0x70, 0x72, 0x65, 0x65, 0x73, 0x10,
	0x0d, 0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x47, 0x6f, 0x64, 0x6c, 0x69, 0x6b, 0x65, 0x10, 0x0e, 0x12, 0x24,
	0x0a, 0x20, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x5f, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79,
	0x65, 0x64, 0x10, 0x0f, 0x12, 0x2e, 0x0a, 0x2a, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74,
	0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x6f,
	0x6b, 0x65, 0x72, 0x5f, 0x53, 0x75, 0x6e, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x4b, 0x69, 0x6c,
	0x6c, 0x73, 0x10, 0x10, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74,
	0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x41, 0x78, 0x65, 0x5f,
	0x43, 0x75, 0x6c, 0x6c, 0x73, 0x10, 0x11, 0x12, 0x2d, 0x0a, 0x29, 0x6b, 0x4b, 0x69, 0x6c, 0x6c,
	0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x41,
	0x78, 0x65, 0x5f, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x48, 0x75, 0x6e, 0x67, 0x65, 0x72, 0x4b,
	0x69, 0x6c, 0x6c, 0x73, 0x10, 0x12, 0x12, 0x26, 0x0a, 0x22, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45,
	0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x6f,
	0x77, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x10, 0x13, 0x12, 0x2c,
	0x0a, 0x28, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x54, 0x6f,
	0x72, 0x6e, 0x61, 0x64, 0x6f, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x10, 0x14, 0x12, 0x28, 0x0a, 0x24,
	0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x53, 0x76, 0x65, 0x6e, 0x5f, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x53,
	0x74, 0x75, 0x6e, 0x73, 0x10, 0x15, 0x12, 0x2a, 0x0a, 0x26, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45,
	0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x76,
	0x65, 0x6e, 0x5f, 0x57, 0x61, 0x72, 0x63, 0x72, 0x79, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73,
	0x10, 0x16, 0x12, 0x2e, 0x0a, 0x2a, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x76, 0x65, 0x6e, 0x5f, 0x43,
	0x6c, 0x65, 0x61, 0x76, 0x65, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x4b, 0x69, 0x6c, 0x6c, 0x73,
	0x10, 0x17, 0x12, 0x2f, 0x0a, 0x2b, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x76, 0x65, 0x6e, 0x5f, 0x54,
	0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74,
	0x73, 0x10, 0x18, 0x12, 0x2c, 0x0a, 0x28, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65,
	0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x61, 0x63, 0x65, 0x6c,
	0x65, 0x73, 0x73, 0x5f, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x68, 0x72, 0x6f, 0x6e, 0x6f, 0x10,
	0x19, 0x12, 0x2c, 0x0a, 0x28, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x61, 0x63, 0x65, 0x6c, 0x65, 0x73,
	0x73, 0x5f, 0x43, 0x68, 0x72, 0x6f, 0x6e, 0x6f, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x10, 0x1a, 0x12,
	0x28, 0x0a, 0x24, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55, 0x72, 0x73, 0x61, 0x5f, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x53, 0x68, 0x6f, 0x63, 0x6b, 0x73, 0x10, 0x1b, 0x12, 0x23, 0x0a, 0x1f, 0x6b, 0x4b, 0x69,
	0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x52, 0x6f, 0x73, 0x68, 0x61, 0x6e, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x10, 0x1c, 0x12, 0x28,
	0x0a, 0x24, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x69, 0x6f, 0x6e, 0x5f, 0x46, 0x69, 0x6e, 0x67, 0x65,
	0x72, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x10, 0x1d, 0x12, 0x2c, 0x0a, 0x28, 0x6b, 0x4b, 0x69, 0x6c,
	0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x52, 0x69, 0x6b, 0x69, 0x5f, 0x53, 0x6d, 0x6f, 0x6b, 0x65, 0x64, 0x48, 0x65, 0x72, 0x6f, 0x4b,
	0x69, 0x6c, 0x6c, 0x73, 0x10, 0x20, 0x12, 0x2e, 0x0a, 0x2a, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45,
	0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x48, 0x65,
	0x72, 0x6f, 0x65, 0x73, 0x52, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68,
	0x44, 0x75, 0x73, 0x74, 0x10, 0x21, 0x12, 0x37, 0x0a, 0x33, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45,
	0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x6b,
	0x65, 0x6c, 0x65, 0x74, 0x6f, 0x6e, 0x4b, 0x69, 0x6e, 0x67, 0x5f, 0x52, 0x65, 0x69, 0x6e, 0x63,
	0x61, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x10, 0x22, 0x12,
	0x2b, 0x0a, 0x27, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x6b, 0x79, 0x77, 0x72, 0x61, 0x74, 0x68, 0x5f,
	0x46, 0x6c, 0x61, 0x72, 0x65, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x10, 0x23, 0x12, 0x2f, 0x0a, 0x2b,
	0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x4c, 0x65, 0x73, 0x68, 0x72, 0x61, 0x63, 0x5f, 0x53, 0x70, 0x6c, 0x69,
	0x74, 0x45, 0x61, 0x72, 0x74, 0x68, 0x53, 0x74, 0x75, 0x6e, 0x73, 0x10, 0x24, 0x12, 0x2c, 0x0a,
	0x28, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x69, 0x72, 0x61, 0x6e, 0x61, 0x5f, 0x4d, 0x61, 0x78, 0x53,
	0x74, 0x75, 0x6e, 0x41, 0x72, 0x72, 0x6f, 0x77, 0x73, 0x10, 0x25, 0x12, 0x38, 0x0a, 0x34, 0x6b,
	0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x50, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x41, 0x73, 0x73, 0x61, 0x73, 0x73,
	0x69, 0x6e, 0x5f, 0x43, 0x6f, 0x75, 0x70, 0x64, 0x65, 0x47, 0x72, 0x61, 0x63, 0x65, 0x43, 0x72,
	0x69, 0x74, 0x73, 0x10, 0x26, 0x12, 0x33, 0x0a, 0x2f, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61,
	0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x68, 0x61,
	0x6e, 0x74, 0x6f, 0x6d, 0x41, 0x73, 0x73, 0x61, 0x73, 0x73, 0x69, 0x6e, 0x5f, 0x44, 0x61, 0x67,
	0x67, 0x65, 0x72, 0x43, 0x72, 0x69, 0x74, 0x73, 0x10, 0x27, 0x12, 0x28, 0x0a, 0x24, 0x6b, 0x4b,
	0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x4d, 0x65, 0x65, 0x70, 0x6f, 0x5f, 0x45, 0x61, 0x72, 0x74, 0x68, 0x62, 0x69, 0x6e,
	0x64, 0x73, 0x10, 0x28, 0x12, 0x30, 0x0a, 0x2c, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74,
	0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x6c, 0x6f, 0x6f,
	0x64, 0x73, 0x65, 0x65, 0x6b, 0x65, 0x72, 0x5f, 0x52, 0x75, 0x70, 0x74, 0x75, 0x72, 0x65, 0x4b,
	0x69, 0x6c, 0x6c, 0x73, 0x10, 0x29, 0x12, 0x2c, 0x0a, 0x28, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45,
	0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x6c,
	0x61, 0x72, 0x6b, 0x5f, 0x4c, 0x65, 0x61, 0x73, 0x68, 0x65, 0x64, 0x45, 0x6e, 0x65, 0x6d, 0x69,
	0x65, 0x73, 0x10, 0x2a, 0x12, 0x32, 0x0a, 0x2e, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74,
	0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x69, 0x73, 0x72,
	0x75, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x46, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x47, 0x6c,
	0x69, 0x6d, 0x70, 0x73, 0x65, 0x73, 0x10, 0x2b, 0x12, 0x2b, 0x0a, 0x27, 0x6b, 0x4b, 0x69, 0x6c,
	0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x52, 0x75, 0x62, 0x69, 0x63, 0x6b, 0x5f, 0x53, 0x70, 0x65, 0x6c, 0x6c, 0x73, 0x53, 0x74, 0x6f,
	0x6c, 0x65, 0x6e, 0x10, 0x2c, 0x12, 0x2e, 0x0a, 0x2a, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61,
	0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52, 0x75, 0x62,
	0x69, 0x63, 0x6b, 0x5f, 0x55, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x73, 0x53, 0x74, 0x6f,
	0x6c, 0x65, 0x6e, 0x10, 0x2d, 0x12, 0x2a, 0x0a, 0x26, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61,
	0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x6f, 0x6f,
	0x6d, 0x5f, 0x45, 0x6e, 0x65, 0x6d, 0x69, 0x65, 0x73, 0x44, 0x6f, 0x6f, 0x6d, 0x65, 0x64, 0x10,
	0x2e, 0x12, 0x30, 0x0a, 0x2c, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4f, 0x6d, 0x6e, 0x69, 0x6b, 0x6e, 0x69,
	0x67, 0x68, 0x74, 0x5f, 0x50, 0x75, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x10, 0x2f, 0x12, 0x31, 0x0a, 0x2d, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65,
	0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4f, 0x6d, 0x6e, 0x69, 0x6b,
	0x6e, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x41, 0x6c, 0x6c, 0x69, 0x65, 0x73, 0x52, 0x65, 0x70, 0x65,
	0x6c, 0x6c, 0x65, 0x64, 0x10, 0x30, 0x12, 0x32, 0x0a, 0x2e, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45,
	0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4f, 0x6d,
	0x6e, 0x69, 0x6b, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x45, 0x6e, 0x65, 0x6d, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x70, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x10, 0x31, 0x12, 0x32, 0x0a, 0x2e, 0x6b, 0x4b,
	0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x57, 0x61, 0x72, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x46, 0x69, 0x76, 0x65, 0x48, 0x65,
	0x72, 0x6f, 0x46, 0x61, 0x74, 0x61, 0x6c, 0x42, 0x6f, 0x6e, 0x64, 0x73, 0x10, 0x32, 0x12, 0x38,
	0x0a, 0x34, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x4d, 0x61, 0x69,
	0x64, 0x65, 0x6e, 0x5f, 0x46, 0x72, 0x6f, 0x73, 0x74, 0x62, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x45,
	0x6e, 0x65, 0x6d, 0x69, 0x65, 0x73, 0x10, 0x33, 0x12, 0x32, 0x0a, 0x2e, 0x6b, 0x4b, 0x69, 0x6c,
	0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x43, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x4d, 0x61, 0x69, 0x64, 0x65, 0x6e, 0x5f, 0x43, 0x72,
	0x79, 0x73, 0x74, 0x61, 0x6c, 0x4e, 0x6f, 0x76, 0x61, 0x73, 0x10, 0x34, 0x12, 0x31, 0x0a, 0x2d,
	0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x4b, 0x75, 0x6e, 0x6b, 0x6b, 0x61, 0x5f, 0x44, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x48, 0x65, 0x72, 0x6f, 0x54, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x10, 0x35, 0x12,
	0x33, 0x0a, 0x2f, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4b, 0x75, 0x6e, 0x6b, 0x6b, 0x61, 0x5f, 0x54, 0x72,
	0x69, 0x70, 0x6c, 0x65, 0x48, 0x65, 0x72, 0x6f, 0x47, 0x68, 0x6f, 0x73, 0x74, 0x53, 0x68, 0x69,
	0x70, 0x73, 0x10, 0x36, 0x12, 0x31, 0x0a, 0x2d, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74,
	0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x61, 0x67, 0x61,
	0x53, 0x69, 0x72, 0x65, 0x6e, 0x5f, 0x45, 0x6e, 0x65, 0x6d, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x73,
	0x6e, 0x61, 0x72, 0x65, 0x64, 0x10, 0x37, 0x12, 0x34, 0x0a, 0x30, 0x6b, 0x4b, 0x69, 0x6c, 0x6c,
	0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e,
	0x61, 0x67, 0x61, 0x53, 0x69, 0x72, 0x65, 0x6e, 0x5f, 0x54, 0x72, 0x69, 0x70, 0x6c, 0x65, 0x48,
	0x65, 0x72, 0x6f, 0x52, 0x69, 0x70, 0x54, 0x69, 0x64, 0x65, 0x73, 0x10, 0x38, 0x12, 0x33, 0x0a,
	0x2f, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x79, 0x63, 0x61, 0x6e, 0x5f, 0x4b, 0x69, 0x6c, 0x6c, 0x73,
	0x44, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x68, 0x61, 0x70, 0x65, 0x73, 0x68, 0x69, 0x66, 0x74,
	0x10, 0x39, 0x12, 0x2c, 0x0a, 0x28, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x75, 0x64, 0x67, 0x65, 0x5f,
	0x44, 0x69, 0x73, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x10, 0x3a,
	0x12, 0x2f, 0x0a, 0x2b, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x75, 0x64, 0x67, 0x65, 0x5f, 0x45, 0x6e,
	0x65, 0x6d, 0x79, 0x48, 0x65, 0x72, 0x6f, 0x65, 0x73, 0x48, 0x6f, 0x6f, 0x6b, 0x65, 0x64, 0x10,
	0x3b, 0x12, 0x27, 0x0a, 0x23, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x75, 0x64, 0x67, 0x65, 0x5f, 0x48,
	0x6f, 0x6f, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x10, 0x3c, 0x12, 0x35, 0x0a, 0x31, 0x6b, 0x4b,
	0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x50, 0x75, 0x64, 0x67, 0x65, 0x5f, 0x55, 0x6e, 0x73, 0x65, 0x65, 0x6e, 0x45, 0x6e,
	0x65, 0x6d, 0x79, 0x48, 0x65, 0x72, 0x6f, 0x65, 0x73, 0x48, 0x6f, 0x6f, 0x6b, 0x65, 0x64, 0x10,
	0x3d, 0x12, 0x32, 0x0a, 0x2e, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x72, 0x6f, 0x77, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x72, 0x5f, 0x45, 0x6e, 0x65, 0x6d, 0x69, 0x65, 0x73, 0x53, 0x69, 0x6c, 0x65, 0x6e,
	0x63, 0x65, 0x64, 0x10, 0x3e, 0x12, 0x34, 0x0a, 0x30, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61,
	0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x72, 0x6f,
	0x77, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x5f, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x48, 0x65, 0x72,
	0x6f, 0x53, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x10, 0x3f, 0x12, 0x30, 0x0a, 0x2c, 0x6b,
	0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x44, 0x72, 0x6f, 0x77, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x5f, 0x53, 0x69,
	0x6c, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x10, 0x40, 0x12, 0x32, 0x0a,
	0x2e, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x72, 0x6f, 0x77, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x5f,
	0x46, 0x72, 0x6f, 0x73, 0x74, 0x41, 0x72, 0x72, 0x6f, 0x77, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x10,
	0x41, 0x12, 0x36, 0x0a, 0x32, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x4b,
	0x6e, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x49, 0x6e, 0x44, 0x72, 0x61,
	0x67, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x10, 0x42, 0x12, 0x35, 0x0a, 0x31, 0x6b, 0x4b, 0x69,
	0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x44, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x4b, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x42, 0x72,
	0x65, 0x61, 0x74, 0x68, 0x65, 0x46, 0x69, 0x72, 0x65, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x10, 0x43,
	0x12, 0x30, 0x0a, 0x2c, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x4b, 0x6e,
	0x69, 0x67, 0x68, 0x74, 0x5f, 0x53, 0x70, 0x6c, 0x61, 0x73, 0x68, 0x4b, 0x69, 0x6c, 0x6c, 0x73,
	0x10, 0x44, 0x12, 0x2d, 0x0a, 0x29, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x57, 0x69, 0x74, 0x63, 0x68, 0x44,
	0x6f, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x43, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x75, 0x6e, 0x73, 0x10,
	0x45, 0x12, 0x31, 0x0a, 0x2d, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x57, 0x69, 0x74, 0x63, 0x68, 0x44, 0x6f,
	0x63, 0x74, 0x6f, 0x72, 0x5f, 0x4d, 0x61, 0x6c, 0x65, 0x64, 0x69, 0x63, 0x74, 0x4b, 0x69, 0x6c,
	0x6c, 0x73, 0x10, 0x46, 0x12, 0x36, 0x0a, 0x32, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74,
	0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x57, 0x69, 0x74, 0x63,
	0x68, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x48, 0x65, 0x72,
	0x6f, 0x4d, 0x61, 0x6c, 0x65, 0x64, 0x69, 0x63, 0x74, 0x73, 0x10, 0x47, 0x12, 0x32, 0x0a, 0x2e,
	0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x57, 0x69, 0x74, 0x63, 0x68, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x5f,
	0x44, 0x65, 0x61, 0x74, 0x68, 0x57, 0x61, 0x72, 0x64, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x10, 0x48,
	0x12, 0x34, 0x0a, 0x30, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x69, 0x73, 0x72, 0x75, 0x70, 0x74, 0x6f,
	0x72, 0x5f, 0x54, 0x68, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x4b,
	0x69, 0x6c, 0x6c, 0x73, 0x10, 0x49, 0x12, 0x30, 0x0a, 0x2c, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45,
	0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x69,
	0x73, 0x72, 0x75, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x48, 0x65, 0x72, 0x6f, 0x65, 0x73, 0x47, 0x6c,
	0x69, 0x6d, 0x70, 0x73, 0x65, 0x64, 0x10, 0x4a, 0x12, 0x38, 0x0a, 0x34, 0x6b, 0x4b, 0x69, 0x6c,
	0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x43, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x4d, 0x61, 0x69, 0x64, 0x65, 0x6e, 0x5f, 0x46, 0x72,
	0x65, 0x65, 0x7a, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4b, 0x69, 0x6c, 0x6c, 0x73,
	0x10, 0x4b, 0x12, 0x2f, 0x0a, 0x2b, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x65, 0x64, 0x75, 0x73, 0x61,
	0x5f, 0x45, 0x6e, 0x65, 0x6d, 0x69, 0x65, 0x73, 0x50, 0x65, 0x74, 0x72, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x10, 0x4d, 0x12, 0x2f, 0x0a, 0x2b, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65,
	0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x57, 0x61, 0x72, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x46, 0x61, 0x74, 0x61, 0x6c, 0x42, 0x6f, 0x6e, 0x64, 0x73, 0x4b, 0x69, 0x6c,
	0x6c, 0x73, 0x10, 0x4e, 0x12, 0x2a, 0x0a, 0x26, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74,
	0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x57, 0x61, 0x72, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x47, 0x6f, 0x6c, 0x65, 0x6d, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x10, 0x4f,
	0x12, 0x2a, 0x0a, 0x26, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x54, 0x75, 0x73, 0x6b, 0x5f, 0x57, 0x61, 0x6c,
	0x72, 0x75, 0x73, 0x50, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x10, 0x50, 0x12, 0x2a, 0x0a, 0x26,
	0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x54, 0x75, 0x73, 0x6b, 0x5f, 0x53, 0x6e, 0x6f, 0x77, 0x62, 0x61, 0x6c,
	0x6c, 0x53, 0x74, 0x75, 0x6e, 0x73, 0x10, 0x51, 0x12, 0x30, 0x0a, 0x2c, 0x6b, 0x4b, 0x69, 0x6c,
	0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x45, 0x61, 0x72, 0x74, 0x68, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x46, 0x69, 0x73, 0x73,
	0x75, 0x72, 0x65, 0x53, 0x74, 0x75, 0x6e, 0x73, 0x10, 0x52, 0x12, 0x32, 0x0a, 0x2e, 0x6b, 0x4b,
	0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x45, 0x61, 0x72, 0x74, 0x68, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x33, 0x48,
	0x65, 0x72, 0x6f, 0x45, 0x63, 0x68, 0x6f, 0x73, 0x6c, 0x61, 0x6d, 0x73, 0x10, 0x53, 0x12, 0x32,
	0x0a, 0x2e, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x61, 0x6e, 0x64, 0x4b, 0x69, 0x6e, 0x67, 0x5f, 0x42,
	0x75, 0x72, 0x72, 0x6f, 0x77, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x53, 0x74, 0x75, 0x6e, 0x73,
	0x10, 0x54, 0x12, 0x2f, 0x0a, 0x2b, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x61, 0x6e, 0x64, 0x4b, 0x69,
	0x6e, 0x67, 0x5f, 0x45, 0x70, 0x69, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4b, 0x69, 0x6c, 0x6c,
	0x73, 0x10, 0x55, 0x12, 0x35, 0x0a, 0x31, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65,
	0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x6b, 0x79, 0x77, 0x72,
	0x61, 0x74, 0x68, 0x4d, 0x61, 0x67, 0x65, 0x5f, 0x41, 0x6e, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x53,
	0x65, 0x61, 0x6c, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x10, 0x56, 0x12, 0x38, 0x0a, 0x34, 0x6b, 0x4b,
	0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x53, 0x6b, 0x79, 0x77, 0x72, 0x61, 0x74, 0x68, 0x4d, 0x61, 0x67, 0x65, 0x5f, 0x43,
	0x6f, 0x6e, 0x63, 0x75, 0x73, 0x73, 0x69, 0x76, 0x65, 0x53, 0x68, 0x6f, 0x74, 0x4b, 0x69, 0x6c,
	0x6c, 0x73, 0x10, 0x57, 0x12, 0x2c, 0x0a, 0x28, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74,
	0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x75, 0x6e, 0x61,
	0x5f, 0x4c, 0x75, 0x63, 0x65, 0x6e, 0x74, 0x42, 0x65, 0x61, 0x6d, 0x4b, 0x69, 0x6c, 0x6c, 0x73,
	0x10, 0x58, 0x12, 0x29, 0x0a, 0x25, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x75, 0x6e, 0x61, 0x5f, 0x45,
	0x63, 0x6c, 0x69, 0x70, 0x73, 0x65, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x10, 0x59, 0x12, 0x38, 0x0a,
	0x34, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x4b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x4f, 0x66, 0x54, 0x68, 0x65,
	0x4c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x49, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x10, 0x5a, 0x12, 0x36, 0x0a, 0x32, 0x6b, 0x4b, 0x69, 0x6c, 0x6c,
	0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4b,
	0x65, 0x65, 0x70, 0x65, 0x72, 0x4f, 0x66, 0x54, 0x68, 0x65, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x5f,
	0x4d, 0x61, 0x6e, 0x61, 0x4c, 0x65, 0x61, 0x6b, 0x53, 0x74, 0x75, 0x6e, 0x73, 0x10, 0x5b, 0x12,
	0x3a, 0x0a, 0x36, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x4f, 0x66, 0x54,
	0x68, 0x65, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x54, 0x65, 0x61, 0x6d, 0x6d, 0x61, 0x74, 0x65,
	0x73, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x10, 0x5c, 0x12, 0x30, 0x0a, 0x2c, 0x6b,
	0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x4c, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x65, 0x72, 0x5f, 0x44, 0x75, 0x65, 0x6c, 0x73, 0x57, 0x6f, 0x6e, 0x10, 0x5d, 0x12, 0x2d, 0x0a,
	0x29, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x65, 0x61, 0x73, 0x74, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x52, 0x6f, 0x61, 0x72, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x10, 0x5e, 0x12, 0x32, 0x0a, 0x2e,
	0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x42, 0x65, 0x61, 0x73, 0x74, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x52, 0x6f, 0x61, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x10, 0x5f,
	0x12, 0x35, 0x0a, 0x31, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x57, 0x69, 0x6e, 0x64, 0x72, 0x75, 0x6e, 0x6e,
	0x65, 0x72, 0x5f, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x46, 0x69, 0x72, 0x65, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x69, 0x6e, 0x67, 0x73, 0x10, 0x60, 0x12, 0x31, 0x0a, 0x2d, 0x6b, 0x4b, 0x69, 0x6c, 0x6c,
	0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x57,
	0x69, 0x6e, 0x64, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x73,
	0x68, 0x6f, 0x74, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x10, 0x61, 0x12, 0x36, 0x0a, 0x32, 0x6b, 0x4b,
	0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x50, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x41, 0x73, 0x73, 0x61, 0x73, 0x73, 0x69,
	0x6e, 0x5f, 0x44, 0x61, 0x67, 0x67, 0x65, 0x72, 0x4c, 0x61, 0x73, 0x74, 0x48, 0x69, 0x74, 0x73,
	0x10, 0x62, 0x12, 0x3a, 0x0a, 0x36, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x68, 0x61, 0x6e, 0x74, 0x6f,
	0x6d, 0x41, 0x73, 0x73, 0x61, 0x73, 0x73, 0x69, 0x6e, 0x5f, 0x50, 0x68, 0x61, 0x6e, 0x74, 0x6f,
	0x6d, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x10, 0x63, 0x12, 0x34,
	0x0a, 0x30, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x65, 0x61, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x70, 0x68,
	0x65, 0x74, 0x5f, 0x43, 0x72, 0x79, 0x70, 0x74, 0x53, 0x77, 0x61, 0x72, 0x6d, 0x4b, 0x69, 0x6c,
	0x6c, 0x73, 0x10, 0x64, 0x12, 0x3a, 0x0a, 0x36, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74,
	0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x65, 0x61, 0x74,
	0x68, 0x50, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x5f, 0x45, 0x78, 0x6f, 0x72, 0x63, 0x69, 0x73,
	0x6d, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x10, 0x65,
	0x12, 0x3c, 0x0a, 0x38, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x65, 0x61, 0x74, 0x68, 0x50, 0x72, 0x6f,
	0x70, 0x68, 0x65, 0x74, 0x5f, 0x45, 0x78, 0x6f, 0x72, 0x63, 0x69, 0x73, 0x6d, 0x53, 0x70, 0x69,
	0x72, 0x69, 0x74, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x65, 0x64, 0x10, 0x66, 0x12, 0x36,
	0x0a, 0x32, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x65, 0x61, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x70, 0x68,
	0x65, 0x74, 0x5f, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x48, 0x65, 0x72, 0x6f, 0x53, 0x69, 0x6c, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x10, 0x67, 0x12, 0x2d, 0x0a, 0x29, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45,
	0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x41, 0x62,
	0x61, 0x64, 0x64, 0x6f, 0x6e, 0x5f, 0x4d, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x69, 0x6c, 0x4b, 0x69,
	0x6c, 0x6c, 0x73, 0x10, 0x68, 0x12, 0x2e, 0x0a, 0x2a, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61,
	0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x41, 0x62, 0x61,
	0x64, 0x64, 0x6f, 0x6e, 0x5f, 0x4d, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x69, 0x6c, 0x48, 0x65, 0x61,
	0x6c, 0x65, 0x64, 0x10, 0x69, 0x12, 0x32, 0x0a, 0x2e, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61,
	0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x41, 0x62, 0x61,
	0x64, 0x64, 0x6f, 0x6e, 0x5f, 0x41, 0x70, 0x68, 0x6f, 0x74, 0x69, 0x63, 0x53, 0x68, 0x69, 0x65,
	0x6c, 0x64, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x10, 0x6a, 0x12, 0x32, 0x0a, 0x2e, 0x6b, 0x4b, 0x69,
	0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x4c, 0x69, 0x63, 0x68, 0x5f, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x46, 0x72, 0x6f, 0x73, 0x74,
	0x54, 0x72, 0x69, 0x70, 0x6c, 0x65, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x10, 0x6b, 0x12, 0x31, 0x0a,
	0x2d, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x69, 0x63, 0x68, 0x5f, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x46,
	0x72, 0x6f, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x10, 0x6c,
	0x12, 0x2e, 0x0a, 0x2a, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x69, 0x63, 0x68, 0x5f, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x46, 0x72, 0x6f, 0x73, 0x74, 0x42, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x73, 0x10, 0x6d,
	0x12, 0x29, 0x0a, 0x25, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55, 0x72, 0x73, 0x61, 0x5f, 0x45, 0x6e, 0x72,
	0x61, 0x67, 0x65, 0x64, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x10, 0x6e, 0x12, 0x2c, 0x0a, 0x28, 0x6b,
	0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x55, 0x72, 0x73, 0x61, 0x5f, 0x45, 0x61, 0x72, 0x74, 0x68, 0x73, 0x68, 0x6f,
	0x63, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x10, 0x6f, 0x12, 0x2d, 0x0a, 0x29, 0x6b, 0x4b, 0x69,
	0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x4c, 0x69, 0x6e, 0x61, 0x5f, 0x4c, 0x61, 0x67, 0x75, 0x6e, 0x61, 0x42, 0x6c, 0x61, 0x64,
	0x65, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x10, 0x70, 0x12, 0x2d, 0x0a, 0x29, 0x6b, 0x4b, 0x69, 0x6c,
	0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x4c, 0x69, 0x6e, 0x61, 0x5f, 0x44, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x53, 0x6c, 0x61, 0x76, 0x65,
	0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x10, 0x71, 0x12, 0x32, 0x0a, 0x2e, 0x6b, 0x4b, 0x69, 0x6c, 0x6c,
	0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c,
	0x69, 0x6e, 0x61, 0x5f, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x53, 0x74, 0x75, 0x6e, 0x73, 0x10, 0x72, 0x12, 0x26, 0x0a, 0x22, 0x6b,
	0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x42,
	0x61, 0x72, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x5f, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x65,
	0x64, 0x10, 0x73, 0x12, 0x2d, 0x0a, 0x29, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65,
	0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x72, 0x41, 0x73,
	0x73, 0x61, 0x73, 0x73, 0x69, 0x6e, 0x5f, 0x4d, 0x65, 0x6c, 0x64, 0x4b, 0x69, 0x6c, 0x6c, 0x73,
	0x10, 0x74, 0x12, 0x30, 0x0a, 0x2c, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x72, 0x41, 0x73, 0x73,
	0x61, 0x73, 0x73, 0x69, 0x6e, 0x5f, 0x48, 0x65, 0x72, 0x6f, 0x65, 0x73, 0x53, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x10, 0x75, 0x12, 0x2d, 0x0a, 0x29, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74,
	0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x53, 0x6e, 0x69, 0x70, 0x65, 0x72, 0x5f, 0x41,
	0x73, 0x73, 0x61, 0x73, 0x73, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x6c, 0x6c,
	0x73, 0x10, 0x76, 0x12, 0x28, 0x0a, 0x24, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65,
	0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x53, 0x6e, 0x69, 0x70, 0x65, 0x72, 0x5f, 0x48, 0x65,
	0x61, 0x64, 0x73, 0x68, 0x6f, 0x74, 0x53, 0x74, 0x75, 0x6e, 0x73, 0x10, 0x77, 0x12, 0x2a, 0x0a,
	0x26, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x45, 0x61, 0x72, 0x74, 0x68, 0x53, 0x70, 0x69, 0x72, 0x69, 0x74, 0x5f, 0x53, 0x6d, 0x61,
	0x73, 0x68, 0x53, 0x74, 0x75, 0x6e, 0x73, 0x10, 0x78, 0x12, 0x2c, 0x0a, 0x28, 0x6b, 0x4b, 0x69,
	0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x45, 0x61, 0x72,
	0x74, 0x68, 0x53, 0x70, 0x69, 0x72, 0x69, 0x74, 0x5f, 0x47, 0x72, 0x69, 0x70, 0x53, 0x69, 0x6c,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x10, 0x79, 0x12, 0x2d, 0x0a, 0x29, 0x6b, 0x4b, 0x69, 0x6c, 0x6c,
	0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x53, 0x68, 0x61, 0x64, 0x6f,
	0x77, 0x53, 0x68, 0x61, 0x6d, 0x61, 0x6e, 0x5f, 0x53, 0x68, 0x61, 0x63, 0x6b, 0x6c, 0x65, 0x4b,
	0x69, 0x6c, 0x6c, 0x73, 0x10, 0x7a, 0x12, 0x29, 0x0a, 0x25, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45,
	0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77,
	0x53, 0x68, 0x61, 0x6d, 0x61, 0x6e, 0x5f, 0x48, 0x65, 0x78, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x10,
	0x7b, 0x12, 0x2a, 0x0a, 0x26, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x43, 0x65, 0x6e, 0x74, 0x61, 0x75, 0x72, 0x5f, 0x45, 0x6e, 0x65,
	0x6d, 0x69, 0x65, 0x73, 0x53, 0x74, 0x6f, 0x6d, 0x70, 0x65, 0x64, 0x10, 0x7c, 0x12, 0x2b, 0x0a,
	0x27, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x43, 0x65, 0x6e, 0x74, 0x61, 0x75, 0x72, 0x5f, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x45,
	0x64, 0x67, 0x65, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x10, 0x7d, 0x12, 0x27, 0x0a, 0x23, 0x6b, 0x4b,
	0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x43, 0x65,
	0x6e, 0x74, 0x61, 0x75, 0x72, 0x5f, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4b, 0x69, 0x6c, 0x6c,
	0x73, 0x10, 0x7e, 0x12, 0x2e, 0x0a, 0x2a, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65,
	0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x45, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x70, 0x69, 0x72,
	0x69, 0x74, 0x5f, 0x45, 0x6e, 0x65, 0x6d, 0x69, 0x65, 0x73, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x65,
	0x64, 0x10, 0x7f, 0x12, 0x38, 0x0a, 0x33, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65,
	0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x45, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x70, 0x69, 0x72,
	0x69, 0x74, 0x5f, 0x53, 0x6c, 0x65, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x66, 0x46, 0x69, 0x73, 0x74,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x10, 0x80, 0x01, 0x12, 0x22, 0x0a,
	0x1d, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x50, 0x75, 0x63, 0x6b, 0x5f, 0x4f, 0x72, 0x62, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x10, 0x81,
	0x01, 0x12, 0x32, 0x0a, 0x2d, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x56, 0x65, 0x6e, 0x67, 0x65, 0x66, 0x75, 0x6c, 0x53, 0x70, 0x69,
	0x72, 0x69, 0x74, 0x5f, 0x45, 0x6e, 0x65, 0x6d, 0x69, 0x65, 0x73, 0x53, 0x74, 0x75, 0x6e, 0x6e,
	0x65, 0x64, 0x10, 0x82, 0x01, 0x12, 0x2a, 0x0a, 0x25, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61,
	0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x4c, 0x69, 0x66, 0x65, 0x73, 0x74, 0x65,
	0x61, 0x6c, 0x65, 0x72, 0x5f, 0x52, 0x61, 0x67, 0x65, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x10, 0x83,
	0x01, 0x12, 0x30, 0x0a, 0x2b, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x4c, 0x69, 0x66, 0x65, 0x73, 0x74, 0x65, 0x61, 0x6c, 0x65, 0x72,
	0x5f, 0x4f, 0x70, 0x65, 0x6e, 0x57, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x4b, 0x69, 0x6c, 0x6c, 0x73,
	0x10, 0x84, 0x01, 0x12, 0x2c, 0x0a, 0x27, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65,
	0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x4c, 0x69, 0x66, 0x65, 0x73, 0x74, 0x65, 0x61, 0x6c,
	0x65, 0x72, 0x5f, 0x49, 0x6e, 0x66, 0x65, 0x73, 0x74, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x10, 0x85,
	0x01, 0x12, 0x2b, 0x0a, 0x26, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x45, 0x6c, 0x64, 0x65, 0x72, 0x54, 0x69, 0x74, 0x61, 0x6e, 0x5f,
	0x53, 0x70, 0x69, 0x72, 0x69, 0x74, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x10, 0x86, 0x01, 0x12, 0x2a,
	0x0a, 0x25, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x45, 0x6c, 0x64, 0x65, 0x72, 0x54, 0x69, 0x74, 0x61, 0x6e, 0x5f, 0x47, 0x6f, 0x6f,
	0x64, 0x53, 0x74, 0x6f, 0x6d, 0x70, 0x73, 0x10, 0x87, 0x01, 0x12, 0x2a, 0x0a, 0x25, 0x6b, 0x4b,
	0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x43, 0x6c,
	0x6f, 0x63, 0x6b, 0x77, 0x65, 0x72, 0x6b, 0x5f, 0x52, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x4b, 0x69,
	0x6c, 0x6c, 0x73, 0x10, 0x88, 0x01, 0x12, 0x2f, 0x0a, 0x2a, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45,
	0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x77,
	0x65, 0x72, 0x6b, 0x5f, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x52, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x4b,
	0x69, 0x6c, 0x6c, 0x73, 0x10, 0x89, 0x01, 0x12, 0x2a, 0x0a, 0x25, 0x6b, 0x4b, 0x69, 0x6c, 0x6c,
	0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x53, 0x74, 0x6f, 0x72, 0x6d,
	0x53, 0x70, 0x69, 0x72, 0x69, 0x74, 0x5f, 0x42, 0x61, 0x6c, 0x6c, 0x4b, 0x69, 0x6c, 0x6c, 0x73,
	0x10, 0x8a, 0x01, 0x12, 0x33, 0x0a, 0x2e, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65,
	0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x53, 0x74, 0x6f, 0x72, 0x6d, 0x53, 0x70, 0x69, 0x72,
	0x69, 0x74, 0x5f, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x6d, 0x6e, 0x61, 0x6e, 0x74,
	0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x10, 0x8b, 0x01, 0x12, 0x2c, 0x0a, 0x27, 0x6b, 0x4b, 0x69, 0x6c,
	0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x53, 0x74, 0x6f, 0x72,
	0x6d, 0x53, 0x70, 0x69, 0x72, 0x69, 0x74, 0x5f, 0x56, 0x6f, 0x72, 0x74, 0x65, 0x78, 0x4b, 0x69,
	0x6c, 0x6c, 0x73, 0x10, 0x8c, 0x01, 0x12, 0x2e, 0x0a, 0x29, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45,
	0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x54, 0x69, 0x6e, 0x6b, 0x65, 0x72,
	0x5f, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6c, 0x65, 0x4b, 0x69,
	0x6c, 0x6c, 0x73, 0x10, 0x8d, 0x01, 0x12, 0x26, 0x0a, 0x21, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45,
	0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x54, 0x69, 0x6e, 0x6b, 0x65, 0x72,
	0x5f, 0x4c, 0x61, 0x73, 0x65, 0x72, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x10, 0x8e, 0x01, 0x12, 0x29,
	0x0a, 0x24, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x54, 0x65, 0x63, 0x68, 0x69, 0x65, 0x73, 0x5f, 0x53, 0x75, 0x69, 0x63, 0x69, 0x64,
	0x65, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x10, 0x8f, 0x01, 0x12, 0x2a, 0x0a, 0x25, 0x6b, 0x4b, 0x69,
	0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x54, 0x65, 0x63,
	0x68, 0x69, 0x65, 0x73, 0x5f, 0x4c, 0x61, 0x6e, 0x64, 0x4d, 0x69, 0x6e, 0x65, 0x4b, 0x69, 0x6c,
	0x6c, 0x73, 0x10, 0x90, 0x01, 0x12, 0x2c, 0x0a, 0x27, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61,
	0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x54, 0x65, 0x63, 0x68, 0x69, 0x65, 0x73,
	0x5f, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x54, 0x72, 0x61, 0x70, 0x53, 0x74, 0x75, 0x6e, 0x73,
	0x10, 0x91, 0x01, 0x12, 0x2c, 0x0a, 0x27, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65,
	0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x54, 0x65, 0x63, 0x68, 0x69, 0x65, 0x73, 0x5f, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x69, 0x6e, 0x65, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x10, 0x92,
	0x01, 0x12, 0x30, 0x0a, 0x2b, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x46, 0x69, 0x65, 0x6e, 0x64,
	0x5f, 0x54, 0x72, 0x69, 0x70, 0x6c, 0x65, 0x52, 0x61, 0x7a, 0x65, 0x4b, 0x69, 0x6c, 0x6c, 0x73,
	0x10, 0x93, 0x01, 0x12, 0x32, 0x0a, 0x2d, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65,
	0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x46, 0x69, 0x65,
	0x6e, 0x64, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x69, 0x65, 0x6d, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4b,
	0x69, 0x6c, 0x6c, 0x73, 0x10, 0x94, 0x01, 0x12, 0x2b, 0x0a, 0x26, 0x6b, 0x4b, 0x69, 0x6c, 0x6c,
	0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x53, 0x68, 0x61, 0x64, 0x6f,
	0x77, 0x46, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x51, 0x52, 0x61, 0x7a, 0x65, 0x4b, 0x69, 0x6c, 0x6c,
	0x73, 0x10, 0x95, 0x01, 0x12, 0x2b, 0x0a, 0x26, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74,
	0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x46, 0x69,
	0x65, 0x6e, 0x64, 0x5f, 0x57, 0x52, 0x61, 0x7a, 0x65, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x10, 0x96,
	0x01, 0x12, 0x2b, 0x0a, 0x26, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x46, 0x69, 0x65, 0x6e, 0x64,
	0x5f, 0x45, 0x52, 0x61, 0x7a, 0x65, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x10, 0x97, 0x01, 0x12, 0x2b,
	0x0a, 0x26, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x5f, 0x46, 0x61, 0x74, 0x65, 0x73, 0x45, 0x64,
	0x69, 0x63, 0x74, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x10, 0x98, 0x01, 0x12, 0x2d, 0x0a, 0x28, 0x6b,
	0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x4f,
	0x72, 0x61, 0x63, 0x6c, 0x65, 0x5f, 0x46, 0x61, 0x6c, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x6d, 0x69,
	0x73, 0x65, 0x53, 0x61, 0x76, 0x65, 0x73, 0x10, 0x99, 0x01, 0x12, 0x2e, 0x0a, 0x29, 0x6b, 0x4b,
	0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x4a, 0x75,
	0x67, 0x67, 0x65, 0x72, 0x6e, 0x61, 0x75, 0x74, 0x5f, 0x4f, 0x6d, 0x6e, 0x69, 0x73, 0x6c, 0x61,
	0x73, 0x68, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x10, 0x9a, 0x01, 0x12, 0x37, 0x0a, 0x32, 0x6b, 0x4b,
	0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x53, 0x6b, 0x65, 0x6c, 0x65, 0x74, 0x6f, 0x6e, 0x4b, 0x69, 0x6e, 0x67, 0x5f, 0x53,
	0x6b, 0x65, 0x6c, 0x65, 0x74, 0x6f, 0x6e, 0x48, 0x65, 0x72, 0x6f, 0x4b, 0x69, 0x6c, 0x6c, 0x73,
	0x10, 0x9d, 0x01, 0x12, 0x3a, 0x0a, 0x35, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65,
	0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x61, 0x72, 0x6b, 0x57,
	0x69, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x43, 0x75, 0x72, 0x73, 0x65, 0x64, 0x43, 0x72, 0x6f, 0x77,
	0x6e, 0x54, 0x72, 0x69, 0x70, 0x6c, 0x65, 0x53, 0x74, 0x75, 0x6e, 0x73, 0x10, 0x9e, 0x01, 0x12,
	0x31, 0x0a, 0x2c, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x61, 0x7a, 0x7a, 0x6c, 0x65, 0x5f, 0x53, 0x68,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x47, 0x72, 0x61, 0x76, 0x65, 0x53, 0x61, 0x76, 0x65, 0x73, 0x10,
	0x9f, 0x01, 0x12, 0x30, 0x0a, 0x2b, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x61, 0x7a, 0x7a, 0x6c, 0x65,
	0x5f, 0x50, 0x6f, 0x69, 0x73, 0x6f, 0x6e, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x4b, 0x69, 0x6c, 0x6c,
	0x73, 0x10, 0xa0, 0x01, 0x12, 0x25, 0x0a, 0x20, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74,
	0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x54, 0x68, 0x72, 0x65,
	0x65, 0x4d, 0x61, 0x6e, 0x4d, 0x65, 0x6b, 0x73, 0x10, 0xa1, 0x01, 0x12, 0x30, 0x0a, 0x2b, 0x6b,
	0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x56, 0x69, 0x70, 0x65, 0x72, 0x5f, 0x50, 0x6f, 0x69, 0x73, 0x6f, 0x6e, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x10, 0xa2, 0x01, 0x12, 0x31, 0x0a,
	0x2c, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x56, 0x69, 0x70, 0x65, 0x72, 0x5f, 0x43, 0x6f, 0x72, 0x72, 0x6f,
	0x73, 0x69, 0x76, 0x65, 0x53, 0x6b, 0x69, 0x6e, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x10, 0xa3, 0x01,
	0x12, 0x27, 0x0a, 0x22, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x54, 0x68, 0x72, 0x65, 0x65, 0x48, 0x65, 0x72,
	0x6f, 0x56, 0x65, 0x69, 0x6c, 0x73, 0x10, 0xa4, 0x01, 0x12, 0x35, 0x0a, 0x30, 0x6b, 0x4b, 0x69,
	0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x56, 0x69, 0x70, 0x65, 0x72, 0x5f, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x44, 0x75, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x69, 0x70, 0x65, 0x72, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x10, 0xa5, 0x01,
	0x12, 0x28, 0x0a, 0x23, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x6f, 0x6c, 0x61, 0x72, 0x43, 0x72, 0x65,
	0x73, 0x74, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x10, 0xa6, 0x01, 0x12, 0x2c, 0x0a, 0x27, 0x6b, 0x4b,
	0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x54, 0x69, 0x6e, 0x79, 0x5f, 0x54, 0x72, 0x65, 0x65, 0x54, 0x68, 0x72, 0x6f, 0x77,
	0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x10, 0xa7, 0x01, 0x12, 0x2b, 0x0a, 0x26, 0x6b, 0x4b, 0x69, 0x6c,
	0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x52, 0x69, 0x6b, 0x69, 0x5f, 0x42, 0x61, 0x63, 0x6b, 0x73, 0x74, 0x61, 0x62, 0x4b, 0x69, 0x6c,
	0x6c, 0x73, 0x10, 0xa8, 0x01, 0x12, 0x38, 0x0a, 0x33, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61,
	0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x68, 0x6f,
	0x65, 0x6e, 0x69, 0x78, 0x5f, 0x54, 0x68, 0x72, 0x65, 0x65, 0x48, 0x65, 0x72, 0x6f, 0x53, 0x75,
	0x70, 0x65, 0x72, 0x6e, 0x6f, 0x76, 0x61, 0x53, 0x74, 0x75, 0x6e, 0x73, 0x10, 0xa9, 0x01, 0x12,
	0x37, 0x0a, 0x32, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x54, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x62, 0x6c, 0x61,
	0x64, 0x65, 0x5f, 0x4d, 0x65, 0x74, 0x61, 0x6d, 0x6f, 0x72, 0x70, 0x68, 0x6f, 0x73, 0x69, 0x73,
	0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x10, 0xaa, 0x01, 0x12, 0x2e, 0x0a, 0x29, 0x6b, 0x4b, 0x69, 0x6c,
	0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x4c, 0x69, 0x6f, 0x6e, 0x5f, 0x47, 0x72, 0x65, 0x61, 0x74, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72,
	0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x10, 0xab, 0x01, 0x12, 0x3b, 0x0a, 0x36, 0x6b, 0x4b, 0x69, 0x6c,
	0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x41, 0x6e, 0x74, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x53, 0x70, 0x65, 0x6c, 0x6c, 0x73, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x41, 0x67, 0x68, 0x61, 0x6e, 0x69,
	0x6d, 0x73, 0x10, 0xac, 0x01, 0x12, 0x33, 0x0a, 0x2e, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61,
	0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x41, 0x6e, 0x74,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x54, 0x68, 0x72, 0x65, 0x65, 0x4d, 0x61, 0x6e, 0x4d, 0x61,
	0x6e, 0x61, 0x56, 0x6f, 0x69, 0x64, 0x73, 0x10, 0xad, 0x01, 0x12, 0x35, 0x0a, 0x30, 0x6b, 0x4b,
	0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x41, 0x72, 0x63, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x5f, 0x54, 0x65, 0x6d, 0x70,
	0x65, 0x73, 0x74, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x10, 0xae,
	0x01, 0x12, 0x33, 0x0a, 0x2e, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x41, 0x72, 0x63, 0x57, 0x61, 0x72, 0x64,
	0x65, 0x6e, 0x5f, 0x53, 0x70, 0x61, 0x72, 0x6b, 0x57, 0x72, 0x61, 0x69, 0x74, 0x68, 0x4b, 0x69,
	0x6c, 0x6c, 0x73, 0x10, 0xaf, 0x01, 0x12, 0x2b, 0x0a, 0x26, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45,
	0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x61,
	0x6e, 0x65, 0x5f, 0x42, 0x72, 0x61, 0x69, 0x6e, 0x53, 0x61, 0x70, 0x4b, 0x69, 0x6c, 0x6c, 0x73,
	0x10, 0xb0, 0x01, 0x12, 0x2d, 0x0a, 0x28, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65,
	0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x61, 0x6e, 0x65, 0x5f,
	0x46, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x47, 0x72, 0x69, 0x70, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x10,
	0xb1, 0x01, 0x12, 0x37, 0x0a, 0x32, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x61, 0x74, 0x72, 0x69, 0x64,
	0x65, 0x72, 0x5f, 0x54, 0x72, 0x69, 0x70, 0x6c, 0x65, 0x48, 0x65, 0x72, 0x6f, 0x46, 0x6c, 0x61,
	0x6d, 0x65, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x73, 0x10, 0xb2, 0x01, 0x12, 0x33, 0x0a, 0x2e, 0x6b,
	0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x42, 0x61, 0x74, 0x72, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x44, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x48, 0x65, 0x72, 0x6f, 0x4c, 0x61, 0x73, 0x73, 0x6f, 0x65, 0x73, 0x10, 0xb3, 0x01,
	0x12, 0x3a, 0x0a, 0x35, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x72, 0x65, 0x77, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x44, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x72,
	0x69, 0x6d, 0x61, 0x6c, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x10, 0xb4, 0x01, 0x12, 0x3e, 0x0a, 0x39,
	0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x42, 0x72, 0x69, 0x73, 0x74, 0x6c, 0x65, 0x62, 0x61, 0x63, 0x6b, 0x5f,
	0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x46, 0x6f, 0x75, 0x72, 0x51, 0x75,
	0x69, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x10, 0xb5, 0x01, 0x12, 0x37, 0x0a, 0x32,
	0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x42, 0x72, 0x69, 0x73, 0x74, 0x6c, 0x65, 0x62, 0x61, 0x63, 0x6b, 0x5f,
	0x54, 0x72, 0x69, 0x70, 0x6c, 0x65, 0x48, 0x65, 0x72, 0x6f, 0x4e, 0x61, 0x73, 0x61, 0x6c, 0x47,
	0x6f, 0x6f, 0x10, 0xb6, 0x01, 0x12, 0x38, 0x0a, 0x33, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61,
	0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x72, 0x6f,
	0x6f, 0x64, 0x6d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x53, 0x70, 0x69, 0x64, 0x65, 0x72, 0x6c,
	0x69, 0x6e, 0x67, 0x48, 0x65, 0x72, 0x6f, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x10, 0xb7, 0x01, 0x12,
	0x33, 0x0a, 0x2e, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x72, 0x6f, 0x6f, 0x64, 0x6d, 0x6f, 0x74, 0x68,
	0x65, 0x72, 0x5f, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x49, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x57, 0x65,
	0x62, 0x10, 0xb8, 0x01, 0x12, 0x32, 0x0a, 0x2d, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74,
	0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x65, 0x6e, 0x74,
	0x61, 0x75, 0x72, 0x5f, 0x54, 0x68, 0x72, 0x65, 0x65, 0x48, 0x65, 0x72, 0x6f, 0x53, 0x74, 0x61,
	0x6d, 0x70, 0x65, 0x64, 0x65, 0x10, 0xb9, 0x01, 0x12, 0x35, 0x0a, 0x30, 0x6b, 0x4b, 0x69, 0x6c,
	0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x43, 0x68, 0x61, 0x6f, 0x73, 0x4b, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x52, 0x65, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x52, 0x69, 0x66, 0x74, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x10, 0xba, 0x01, 0x12,
	0x30, 0x0a, 0x2b, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x6e, 0x5f, 0x4b, 0x69, 0x6c, 0x6c,
	0x73, 0x57, 0x69, 0x74, 0x68, 0x50, 0x65, 0x6e, 0x69, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x10, 0xbb,
	0x01, 0x12, 0x3a, 0x0a, 0x35, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c,
	0x4d, 0x61, 0x69, 0x64, 0x65, 0x6e, 0x5f, 0x54, 0x77, 0x6f, 0x48, 0x65, 0x72, 0x6f, 0x43, 0x72,
	0x79, 0x73, 0x74, 0x61, 0x6c, 0x4e, 0x6f, 0x76, 0x61, 0x73, 0x10, 0xbc, 0x01, 0x12, 0x3e, 0x0a,
	0x39, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x4d, 0x61, 0x69, 0x64,
	0x65, 0x6e, 0x5f, 0x54, 0x68, 0x72, 0x65, 0x65, 0x48, 0x65, 0x72, 0x6f, 0x46, 0x72, 0x65, 0x65,
	0x7a, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x10, 0xbd, 0x01, 0x12, 0x2f, 0x0a,
	0x2a, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x61, 0x7a, 0x7a, 0x6c, 0x65, 0x5f, 0x53, 0x68, 0x61, 0x64,
	0x6f, 0x77, 0x57, 0x61, 0x76, 0x65, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x10, 0xbe, 0x01, 0x12, 0x31,
	0x0a, 0x2c, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x65, 0x61, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x70, 0x68,
	0x65, 0x74, 0x5f, 0x53, 0x69, 0x70, 0x68, 0x6f, 0x6e, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x10, 0xbf,
	0x01, 0x12, 0x3d, 0x0a, 0x38, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x65, 0x61, 0x74, 0x68, 0x50, 0x72,
	0x6f, 0x70, 0x68, 0x65, 0x74, 0x5f, 0x45, 0x78, 0x6f, 0x72, 0x63, 0x69, 0x73, 0x6d, 0x4b, 0x69,
	0x6c, 0x6c, 0x73, 0x44, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x75, 0x6c, 0x73, 0x10, 0xc0, 0x01,
	0x12, 0x43, 0x0a, 0x3e, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x69, 0x73, 0x72, 0x75, 0x70, 0x74, 0x6f,
	0x72, 0x5f, 0x54, 0x68, 0x72, 0x65, 0x65, 0x48, 0x65, 0x72, 0x6f, 0x4b, 0x69, 0x6e, 0x65, 0x74,
	0x69, 0x63, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x53, 0x74, 0x6f,
	0x72, 0x6d, 0x10, 0xc1, 0x01, 0x12, 0x34, 0x0a, 0x2f, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61,
	0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x6f, 0x6f,
	0x6d, 0x5f, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x42, 0x6c, 0x61, 0x64, 0x65, 0x42,
	0x75, 0x72, 0x6e, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x10, 0xc2, 0x01, 0x12, 0x40, 0x0a, 0x3b, 0x6b,
	0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x44, 0x72, 0x6f, 0x77, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x5f, 0x50, 0x72,
	0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x72, 0x61, 0x43, 0x72, 0x65, 0x65, 0x70,
	0x54, 0x6f, 0x77, 0x65, 0x72, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x10, 0xc3, 0x01, 0x12, 0x31, 0x0a,
	0x2c, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x70, 0x69, 0x72, 0x69, 0x74,
	0x5f, 0x52, 0x65, 0x6d, 0x6e, 0x61, 0x6e, 0x74, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x10, 0xc4, 0x01,
	0x12, 0x37, 0x0a, 0x32, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x70, 0x69,
	0x72, 0x69, 0x74, 0x5f, 0x53, 0x6c, 0x65, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x66, 0x46, 0x69, 0x73,
	0x74, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x10, 0xc5, 0x01, 0x12, 0x3c, 0x0a, 0x37, 0x6b, 0x4b, 0x69,
	0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x45, 0x6e, 0x69, 0x67, 0x6d, 0x61, 0x5f, 0x4d, 0x69, 0x64, 0x6e, 0x69, 0x67, 0x68, 0x74,
	0x50, 0x75, 0x6c, 0x73, 0x65, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x48, 0x6f, 0x6c, 0x65, 0x43, 0x6f,
	0x6d, 0x62, 0x6f, 0x73, 0x10, 0xc6, 0x01, 0x12, 0x32, 0x0a, 0x2d, 0x6b, 0x4b, 0x69, 0x6c, 0x6c,
	0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45,
	0x6e, 0x69, 0x67, 0x6d, 0x61, 0x5f, 0x54, 0x68, 0x72, 0x65, 0x65, 0x4d, 0x61, 0x6e, 0x42, 0x6c,
	0x61, 0x63, 0x6b, 0x48, 0x6f, 0x6c, 0x65, 0x73, 0x10, 0xc7, 0x01, 0x12, 0x3b, 0x0a, 0x36, 0x6b,
	0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x46, 0x61, 0x63, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x56, 0x6f, 0x69, 0x64, 0x5f,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x48, 0x65, 0x72, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x44, 0x69, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xc8, 0x01, 0x12, 0x37, 0x0a, 0x32, 0x6b, 0x4b, 0x69, 0x6c,
	0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x47, 0x79, 0x72, 0x6f, 0x63, 0x6f, 0x70, 0x74, 0x65, 0x72, 0x5f, 0x54, 0x68, 0x72, 0x65, 0x65,
	0x48, 0x65, 0x72, 0x6f, 0x46, 0x6c, 0x61, 0x6b, 0x43, 0x61, 0x6e, 0x6e, 0x6f, 0x6e, 0x10, 0xc9,
	0x01, 0x12, 0x36, 0x0a, 0x31, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x47, 0x79, 0x72, 0x6f, 0x63, 0x6f, 0x70,
	0x74, 0x65, 0x72, 0x5f, 0x48, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6c,
	0x65, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x10, 0xca, 0x01, 0x12, 0x36, 0x0a, 0x31, 0x6b, 0x4b, 0x69,
	0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x47, 0x79, 0x72, 0x6f, 0x63, 0x6f, 0x70, 0x74, 0x65, 0x72, 0x5f, 0x52, 0x6f, 0x63, 0x6b,
	0x65, 0x74, 0x42, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x10, 0xcb,
	0x01, 0x12, 0x34, 0x0a, 0x2f, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x48, 0x75, 0x73, 0x6b, 0x61, 0x72, 0x5f,
	0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x44, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x66, 0x65, 0x42,
	0x72, 0x65, 0x61, 0x6b, 0x10, 0xcc, 0x01, 0x12, 0x31, 0x0a, 0x2c, 0x6b, 0x4b, 0x69, 0x6c, 0x6c,
	0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x48,
	0x75, 0x73, 0x6b, 0x61, 0x72, 0x5f, 0x42, 0x75, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x65,
	0x61, 0x72, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x10, 0xcd, 0x01, 0x12, 0x31, 0x0a, 0x2c, 0x6b, 0x4b,
	0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x48,
	0x65, 0x72, 0x6f, 0x49, 0x63, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x10, 0xce, 0x01, 0x12, 0x2d, 0x0a,
	0x28, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x54, 0x68, 0x72,
	0x65, 0x65, 0x48, 0x65, 0x72, 0x6f, 0x45, 0x4d, 0x50, 0x10, 0xcf, 0x01, 0x12, 0x38, 0x0a, 0x33,
	0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x54, 0x68, 0x72, 0x65,
	0x65, 0x48, 0x65, 0x72, 0x6f, 0x44, 0x65, 0x61, 0x66, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x42, 0x6c,
	0x61, 0x73, 0x74, 0x10, 0xd0, 0x01, 0x12, 0x35, 0x0a, 0x30, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45,
	0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x6e,
	0x76, 0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x48, 0x65, 0x72, 0x6f, 0x43,
	0x68, 0x61, 0x6f, 0x73, 0x4d, 0x65, 0x74, 0x65, 0x6f, 0x72, 0x10, 0xd1, 0x01, 0x12, 0x33, 0x0a,
	0x2e, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x4a, 0x61, 0x6b, 0x69, 0x72, 0x6f, 0x5f, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x48, 0x65, 0x72, 0x6f, 0x44, 0x75, 0x61, 0x6c, 0x42, 0x72, 0x65, 0x61, 0x74, 0x68, 0x10,
	0xd2, 0x01, 0x12, 0x36, 0x0a, 0x31, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4a, 0x61, 0x6b, 0x69, 0x72, 0x6f,
	0x5f, 0x49, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x4d, 0x61, 0x63, 0x72, 0x6f, 0x70, 0x79, 0x72,
	0x65, 0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x73, 0x10, 0xd3, 0x01, 0x12, 0x2f, 0x0a, 0x2a, 0x6b, 0x4b,
	0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x4c, 0x65, 0x73, 0x68, 0x72, 0x61, 0x63, 0x5f, 0x50, 0x75, 0x6c, 0x73, 0x65, 0x4e,
	0x6f, 0x76, 0x61, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x10, 0xd4, 0x01, 0x12, 0x38, 0x0a, 0x33, 0x6b,
	0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x4c, 0x65, 0x73, 0x68, 0x72, 0x61, 0x63, 0x5f, 0x54, 0x68, 0x72, 0x65, 0x65,
	0x48, 0x65, 0x72, 0x6f, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f,
	0x72, 0x6d, 0x10, 0xd5, 0x01, 0x12, 0x34, 0x0a, 0x2f, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61,
	0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x69, 0x6f,
	0x6e, 0x5f, 0x54, 0x68, 0x72, 0x65, 0x65, 0x48, 0x65, 0x72, 0x6f, 0x46, 0x69, 0x6e, 0x67, 0x65,
	0x72, 0x4f, 0x66, 0x44, 0x65, 0x61, 0x74, 0x68, 0x10, 0xd6, 0x01, 0x12, 0x28, 0x0a, 0x23, 0x6b,
	0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x4d, 0x65, 0x65, 0x70, 0x6f, 0x5f, 0x50, 0x6f, 0x6f, 0x66, 0x4b, 0x69, 0x6c,
	0x6c, 0x73, 0x10, 0xd7, 0x01, 0x12, 0x32, 0x0a, 0x2d, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61,
	0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x65, 0x65,
	0x70, 0x6f, 0x5f, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x48, 0x65, 0x72, 0x6f, 0x45, 0x61, 0x72, 0x74,
	0x68, 0x62, 0x69, 0x6e, 0x64, 0x73, 0x10, 0xd8, 0x01, 0x12, 0x34, 0x0a, 0x2f, 0x6b, 0x4b, 0x69,
	0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x4e, 0x69, 0x67, 0x68, 0x74, 0x53, 0x74, 0x61, 0x6c, 0x6b, 0x65, 0x72, 0x5f, 0x4e, 0x69,
	0x67, 0x68, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x10, 0xd9, 0x01, 0x12,
	0x37, 0x0a, 0x32, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x6f, 0x72, 0x70, 0x68, 0x6c, 0x69, 0x6e, 0x67,
	0x5f, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x44, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x10, 0xda, 0x01, 0x12, 0x30, 0x0a, 0x2b, 0x6b, 0x4b, 0x69, 0x6c,
	0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x4f, 0x67, 0x72, 0x65, 0x4d, 0x61, 0x67, 0x69, 0x5f, 0x46, 0x69, 0x72, 0x65, 0x62, 0x6c, 0x61,
	0x73, 0x74, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x10, 0xdb, 0x01, 0x12, 0x2d, 0x0a, 0x28, 0x6b, 0x4b,
	0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x4f, 0x67, 0x72, 0x65, 0x4d, 0x61, 0x67, 0x69, 0x5f, 0x49, 0x67, 0x6e, 0x69, 0x74,
	0x65, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x10, 0xdc, 0x01, 0x12, 0x2e, 0x0a, 0x29, 0x6b, 0x4b, 0x69,
	0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x44, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x4b, 0x69, 0x6c, 0x6c, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6b, 0x73, 0x10, 0xdd, 0x01, 0x12, 0x28, 0x0a, 0x23, 0x6b, 0x4b, 0x69,
	0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x4d, 0x65, 0x67, 0x61, 0x4b, 0x69, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x73,
	0x10, 0xde, 0x01, 0x12, 0x30, 0x0a, 0x2b, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65,
	0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x41, 0x6c, 0x63, 0x68, 0x65,
	0x6d, 0x69, 0x73, 0x74, 0x5f, 0x41, 0x67, 0x68, 0x61, 0x6e, 0x69, 0x6d, 0x73, 0x47, 0x69, 0x76,
	0x65, 0x6e, 0x10, 0xdf, 0x01, 0x12, 0x2c, 0x0a, 0x27, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61,
	0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x56, 0x65, 0x69,
	0x6c, 0x73, 0x4c, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x4b, 0x69, 0x6c, 0x6c, 0x73,
	0x10, 0xe0, 0x01, 0x12, 0x2b, 0x0a, 0x26, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65,
	0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x75, 0x73, 0x74, 0x4c,
	0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x10, 0xe1, 0x01,
	0x12, 0x37, 0x0a, 0x32, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x57, 0x69, 0x74, 0x63, 0x68, 0x44, 0x6f, 0x63,
	0x74, 0x6f, 0x72, 0x5f, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x48, 0x65, 0x72, 0x6f, 0x43, 0x61, 0x73,
	0x6b, 0x53, 0x74, 0x75, 0x6e, 0x73, 0x10, 0xe2, 0x01, 0x12, 0x2d, 0x0a, 0x28, 0x6b, 0x4b, 0x69,
	0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x57, 0x65, 0x61, 0x76, 0x65, 0x72, 0x5f, 0x53, 0x68, 0x75, 0x6b, 0x75, 0x63, 0x68, 0x69,
	0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x10, 0xe3, 0x01, 0x12, 0x39, 0x0a, 0x34, 0x6b, 0x4b, 0x69, 0x6c,
	0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x57, 0x69, 0x6e, 0x64, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x53, 0x68, 0x61, 0x63, 0x6b,
	0x6c, 0x65, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x46, 0x69, 0x72, 0x65, 0x4b, 0x69, 0x6c, 0x6c, 0x73,
	0x10, 0xe4, 0x01, 0x12, 0x42, 0x0a, 0x3d, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65,
	0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x56, 0x65, 0x6e, 0x67, 0x65,
	0x66, 0x75, 0x6c, 0x53, 0x70, 0x69, 0x72, 0x69, 0x74, 0x5f, 0x56, 0x65, 0x6e, 0x67, 0x65, 0x61,
	0x6e, 0x63, 0x65, 0x41, 0x75, 0x72, 0x61, 0x49, 0x6c, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x4b,
	0x69, 0x6c, 0x6c, 0x73, 0x10, 0xe5, 0x01, 0x12, 0x2e, 0x0a, 0x29, 0x6b, 0x4b, 0x69, 0x6c, 0x6c,
	0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x54,
	0x75, 0x73, 0x6b, 0x5f, 0x57, 0x61, 0x6c, 0x72, 0x75, 0x73, 0x50, 0x75, 0x6e, 0x63, 0x68, 0x4b,
	0x69, 0x6c, 0x6c, 0x73, 0x10, 0xe6, 0x01, 0x12, 0x30, 0x0a, 0x2b, 0x6b, 0x4b, 0x69, 0x6c, 0x6c,
	0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x54,
	0x69, 0x6e, 0x6b, 0x65, 0x72, 0x5f, 0x54, 0x72, 0x69, 0x70, 0x6c, 0x65, 0x48, 0x65, 0x72, 0x6f,
	0x4c, 0x61, 0x73, 0x65, 0x72, 0x73, 0x10, 0xe7, 0x01, 0x12, 0x3b, 0x0a, 0x36, 0x6b, 0x4b, 0x69,
	0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x72, 0x41, 0x73, 0x73, 0x61, 0x73, 0x73, 0x69, 0x6e,
	0x5f, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x48, 0x65, 0x72, 0x6f, 0x50, 0x73, 0x69, 0x42, 0x6c, 0x61,
	0x64, 0x65, 0x73, 0x10, 0xe8, 0x01, 0x12, 0x35, 0x0a, 0x30, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45,
	0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x76,
	0x65, 0x6e, 0x5f, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x44, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x47, 0x6f,
	0x64, 0x73, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x10, 0xe9, 0x01, 0x12, 0x32, 0x0a,
	0x2d, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x6e, 0x69, 0x70, 0x65, 0x72, 0x5f, 0x54, 0x68, 0x72, 0x65,
	0x65, 0x48, 0x65, 0x72, 0x6f, 0x53, 0x68, 0x72, 0x61, 0x70, 0x6e, 0x65, 0x6c, 0x73, 0x10, 0xea,
	0x01, 0x12, 0x35, 0x0a, 0x30, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x6c, 0x61, 0x72, 0x6b, 0x5f, 0x4b,
	0x69, 0x6c, 0x6c, 0x73, 0x44, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77,
	0x44, 0x61, 0x6e, 0x63, 0x65, 0x10, 0xeb, 0x01, 0x12, 0x3a, 0x0a, 0x35, 0x6b, 0x4b, 0x69, 0x6c,
	0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x53, 0x68, 0x61, 0x6d, 0x61, 0x6e, 0x5f, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x48, 0x65, 0x72, 0x6f, 0x45, 0x74, 0x68, 0x65, 0x72, 0x53, 0x68, 0x6f, 0x63, 0x6b,
	0x73, 0x10, 0xec, 0x01, 0x12, 0x3d, 0x0a, 0x38, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74,
	0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x68, 0x61, 0x64,
	0x6f, 0x77, 0x53, 0x68, 0x61, 0x6d, 0x61, 0x6e, 0x5f, 0x53, 0x65, 0x72, 0x70, 0x65, 0x6e, 0x74,
	0x57, 0x61, 0x72, 0x64, 0x53, 0x68, 0x61, 0x63, 0x6b, 0x6c, 0x65, 0x4b, 0x69, 0x6c, 0x6c, 0x73,
	0x10, 0xed, 0x01, 0x12, 0x37, 0x0a, 0x32, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65,
	0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52, 0x69, 0x6b, 0x69, 0x5f,
	0x54, 0x68, 0x72, 0x65, 0x65, 0x48, 0x65, 0x72, 0x6f, 0x54, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x4f,
	0x66, 0x54, 0x68, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x10, 0xee, 0x01, 0x12, 0x31, 0x0a, 0x2c,
	0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x52, 0x61, 0x7a, 0x6f, 0x72, 0x5f, 0x45, 0x79, 0x65, 0x4f, 0x66, 0x54,
	0x68, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x6d, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x10, 0xef, 0x01, 0x12,
	0x2d, 0x0a, 0x28, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x75, 0x67, 0x6e, 0x61, 0x5f, 0x4c, 0x69, 0x66,
	0x65, 0x44, 0x72, 0x61, 0x69, 0x6e, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x10, 0xf0, 0x01, 0x12, 0x3e,
	0x0a, 0x39, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4f, 0x62, 0x73, 0x69, 0x64, 0x69, 0x61, 0x6e, 0x44, 0x65,
	0x73, 0x74, 0x72, 0x6f, 0x79, 0x65, 0x72, 0x5f, 0x53, 0x61, 0x6e, 0x69, 0x74, 0x79, 0x73, 0x45,
	0x63, 0x6c, 0x69, 0x70, 0x73, 0x65, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x10, 0xf1, 0x01, 0x12, 0x34,
	0x0a, 0x2f, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x5f, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x48, 0x65, 0x72, 0x6f, 0x46, 0x6f, 0x72, 0x74, 0x75, 0x6e, 0x65, 0x73, 0x45, 0x6e,
	0x64, 0x10, 0xf2, 0x01, 0x12, 0x35, 0x0a, 0x30, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74,
	0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4f, 0x6d, 0x6e, 0x69,
	0x6b, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x50, 0x75, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x10, 0xf3, 0x01, 0x12, 0x43, 0x0a, 0x3e, 0x6b,
	0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x4e, 0x69, 0x67, 0x68, 0x74, 0x53, 0x74, 0x61, 0x6c, 0x6b, 0x65, 0x72, 0x5f,
	0x45, 0x6e, 0x65, 0x6d, 0x79, 0x4d, 0x69, 0x73, 0x73, 0x65, 0x73, 0x55, 0x6e, 0x64, 0x65, 0x72,
	0x43, 0x72, 0x69, 0x70, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x61, 0x72, 0x10, 0xf4, 0x01,
	0x12, 0x34, 0x0a, 0x2f, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x57, 0x61, 0x72, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x54, 0x68, 0x72, 0x65, 0x65, 0x48, 0x65, 0x72, 0x6f, 0x46, 0x61, 0x74, 0x61, 0x6c, 0x42, 0x6f,
	0x6e, 0x64, 0x73, 0x10, 0xf5, 0x01, 0x12, 0x33, 0x0a, 0x2e, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45,
	0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52, 0x69,
	0x6b, 0x69, 0x5f, 0x54, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x4f, 0x66, 0x54, 0x68, 0x65, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x10, 0xf6, 0x01, 0x12, 0x35, 0x0a, 0x30, 0x6b,
	0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x45, 0x61, 0x72, 0x74, 0x68, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x41,
	0x66, 0x74, 0x65, 0x72, 0x73, 0x68, 0x6f, 0x63, 0x6b, 0x48, 0x69, 0x74, 0x73, 0x31, 0x30, 0x10,
	0xf7, 0x01, 0x12, 0x33, 0x0a, 0x2e, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x61, 0x72, 0x74, 0x68, 0x73,
	0x68, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x35, 0x48, 0x65, 0x72, 0x6f, 0x45, 0x63, 0x68, 0x6f, 0x73,
	0x6c, 0x61, 0x6d, 0x73, 0x10, 0xf8, 0x01, 0x12, 0x32, 0x0a, 0x2d, 0x6b, 0x4b, 0x69, 0x6c, 0x6c,
	0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c,
	0x69, 0x6e, 0x61, 0x5f, 0x4c, 0x61, 0x67, 0x75, 0x6e, 0x61, 0x42, 0x6c, 0x61, 0x64, 0x65, 0x48,
	0x65, 0x72, 0x6f, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x10, 0xf9, 0x01, 0x12, 0x32, 0x0a, 0x2d, 0x6b,
	0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x4c, 0x69, 0x6e, 0x61, 0x5f, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x53, 0x74, 0x72,
	0x69, 0x6b, 0x65, 0x48, 0x65, 0x72, 0x6f, 0x53, 0x74, 0x75, 0x6e, 0x73, 0x10, 0xfa, 0x01, 0x12,
	0x36, 0x0a, 0x31, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x61, 0x72, 0x74, 0x68, 0x73, 0x68, 0x61, 0x6b,
	0x65, 0x72, 0x5f, 0x46, 0x69, 0x73, 0x73, 0x75, 0x72, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53,
	0x74, 0x75, 0x6e, 0x73, 0x10, 0xfb, 0x01, 0x12, 0x2f, 0x0a, 0x2a, 0x6b, 0x4b, 0x69, 0x6c, 0x6c,
	0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45,
	0x61, 0x72, 0x74, 0x68, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x54, 0x6f, 0x74, 0x65, 0x6d,
	0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x10, 0xfc, 0x01, 0x12, 0x33, 0x0a, 0x2e, 0x6b, 0x4b, 0x69, 0x6c,
	0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x50, 0x61, 0x6e, 0x67, 0x6f, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x53, 0x77, 0x61, 0x73, 0x68, 0x62,
	0x75, 0x63, 0x6b, 0x6c, 0x65, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x10, 0xfd, 0x01, 0x12, 0x32, 0x0a,
	0x2d, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x75, 0x72, 0x69, 0x6f, 0x6e, 0x5f, 0x45, 0x6e, 0x65, 0x6d,
	0x79, 0x48, 0x65, 0x72, 0x6f, 0x65, 0x73, 0x54, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x10, 0xfe,
	0x01, 0x12, 0x34, 0x0a, 0x2f, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x61, 0x6e, 0x67, 0x6f, 0x6c, 0x69,
	0x65, 0x72, 0x5f, 0x48, 0x65, 0x61, 0x72, 0x74, 0x70, 0x69, 0x65, 0x72, 0x63, 0x65, 0x72, 0x4b,
	0x69, 0x6c, 0x6c, 0x73, 0x10, 0xff, 0x01, 0x12, 0x32, 0x0a, 0x2d, 0x6b, 0x4b, 0x69, 0x6c, 0x6c,
	0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d,
	0x65, 0x64, 0x75, 0x73, 0x61, 0x5f, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x48, 0x65, 0x72, 0x6f, 0x53,
	0x74, 0x6f, 0x6e, 0x65, 0x47, 0x61, 0x7a, 0x65, 0x10, 0x80, 0x02, 0x12, 0x2e, 0x0a, 0x29, 0x6b,
	0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x4d, 0x65, 0x64, 0x75, 0x73, 0x61, 0x5f, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x53,
	0x68, 0x6f, 0x74, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x10, 0x81, 0x02, 0x12, 0x32, 0x0a, 0x2d, 0x6b,
	0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x4d, 0x69, 0x72, 0x61, 0x6e, 0x61, 0x5f, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x48,
	0x65, 0x72, 0x6f, 0x53, 0x74, 0x61, 0x72, 0x73, 0x74, 0x6f, 0x72, 0x6d, 0x10, 0x82, 0x02, 0x12,
	0x38, 0x0a, 0x33, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x69, 0x72, 0x61, 0x6e, 0x61, 0x5f, 0x4b, 0x69,
	0x6c, 0x6c, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x4d, 0x6f, 0x6f, 0x6e, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x10, 0x83, 0x02, 0x12, 0x30, 0x0a, 0x2b, 0x6b, 0x4b, 0x69,
	0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x4d, 0x61, 0x67, 0x6e, 0x75, 0x73, 0x5f, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x48, 0x65, 0x72,
	0x6f, 0x53, 0x6b, 0x65, 0x77, 0x65, 0x72, 0x73, 0x10, 0x84, 0x02, 0x12, 0x38, 0x0a, 0x33, 0x6b,
	0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x4d, 0x61, 0x67, 0x6e, 0x75, 0x73, 0x5f, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x48,
	0x65, 0x72, 0x6f, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x61, 0x72, 0x69,
	0x74, 0x79, 0x10, 0x85, 0x02, 0x12, 0x39, 0x0a, 0x34, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61,
	0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x61, 0x67,
	0x6e, 0x75, 0x73, 0x5f, 0x48, 0x65, 0x72, 0x6f, 0x65, 0x73, 0x53, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x57, 0x69, 0x74, 0x68, 0x53, 0x68, 0x6f, 0x63, 0x6b, 0x77, 0x61, 0x76, 0x65, 0x10, 0x86, 0x02,
	0x12, 0x30, 0x0a, 0x2b, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x61, 0x67, 0x61, 0x53, 0x69, 0x72, 0x65,
	0x6e, 0x5f, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x48, 0x65, 0x72, 0x6f, 0x53, 0x6f, 0x6e, 0x67, 0x10,
	0x87, 0x02, 0x12, 0x35, 0x0a, 0x30, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x61, 0x67, 0x61, 0x53, 0x69,
	0x72, 0x65, 0x6e, 0x5f, 0x41, 0x6c, 0x6c, 0x69, 0x65, 0x73, 0x48, 0x65, 0x61, 0x6c, 0x65, 0x64,
	0x42, 0x79, 0x53, 0x6f, 0x6e, 0x67, 0x10, 0x88, 0x02, 0x12, 0x30, 0x0a, 0x2b, 0x6b, 0x4b, 0x69,
	0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x4c, 0x6f, 0x6e, 0x65, 0x44, 0x72, 0x75, 0x69, 0x64, 0x5f, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x48, 0x65, 0x72, 0x6f, 0x52, 0x6f, 0x61, 0x72, 0x10, 0x89, 0x02, 0x12, 0x31, 0x0a, 0x2c, 0x6b,
	0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x4c, 0x6f, 0x6e, 0x65, 0x44, 0x72, 0x75, 0x69, 0x64, 0x5f, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x43, 0x72, 0x79, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x10, 0x8a, 0x02, 0x12, 0x35,
	0x0a, 0x30, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x57, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x57, 0x79, 0x76, 0x65,
	0x72, 0x6e, 0x5f, 0x54, 0x68, 0x72, 0x65, 0x65, 0x48, 0x65, 0x72, 0x6f, 0x43, 0x75, 0x72, 0x73,
	0x65, 0x73, 0x10, 0x8b, 0x02, 0x12, 0x3f, 0x0a, 0x3a, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61,
	0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x41, 0x6e, 0x74,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x53, 0x70, 0x65, 0x6c, 0x6c, 0x73, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x70,
	0x65, 0x6c, 0x6c, 0x10, 0x8c, 0x02, 0x12, 0x32, 0x0a, 0x2d, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45,
	0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x61,
	0x72, 0x73, 0x5f, 0x45, 0x6e, 0x65, 0x6d, 0x69, 0x65, 0x73, 0x4b, 0x69, 0x6c, 0x6c, 0x65, 0x64,
	0x49, 0x6e, 0x41, 0x72, 0x65, 0x6e, 0x61, 0x10, 0x8d, 0x02, 0x12, 0x31, 0x0a, 0x2c, 0x6b, 0x4b,
	0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x4d, 0x61, 0x72, 0x73, 0x5f, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x48, 0x65, 0x72, 0x6f,
	0x47, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x62, 0x75, 0x6b, 0x65, 0x10, 0x8e, 0x02, 0x12, 0x2d, 0x0a,
	0x28, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x61, 0x72, 0x73, 0x5f, 0x47, 0x6f, 0x64, 0x73, 0x52, 0x65,
	0x62, 0x75, 0x6b, 0x65, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x10, 0x8f, 0x02, 0x12, 0x32, 0x0a, 0x2d,
	0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x53, 0x6e, 0x61, 0x70, 0x66, 0x69, 0x72, 0x65, 0x5f, 0x4c, 0x69, 0x7a,
	0x61, 0x72, 0x64, 0x42, 0x6c, 0x6f, 0x62, 0x73, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x10, 0x90, 0x02,
	0x12, 0x34, 0x0a, 0x2f, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x6e, 0x61, 0x70, 0x66, 0x69, 0x72, 0x65,
	0x5f, 0x54, 0x77, 0x6f, 0x48, 0x65, 0x72, 0x6f, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x53, 0x74,
	0x75, 0x6e, 0x73, 0x10, 0x91, 0x02, 0x12, 0x16, 0x0a, 0x11, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x5f, 0x4b, 0x69, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x10, 0x92, 0x02, 0x2a, 0xb1,
	0x01, 0x0a, 0x0e, 0x45, 0x4c, 0x61, 0x6e, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x5f, 0x45, 0x4c, 0x61, 0x6e, 0x65, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x53, 0x41, 0x46, 0x45, 0x4c, 0x41, 0x4e, 0x45, 0x10, 0x00,
	0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x4c, 0x61, 0x6e, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4f, 0x46, 0x46, 0x4c, 0x41, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x1c,
	0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x4c, 0x61, 0x6e, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x4d, 0x49, 0x44, 0x4c, 0x41, 0x4e, 0x45, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d,
	0x6b, 0x5f, 0x45, 0x4c, 0x61, 0x6e, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x4f, 0x46, 0x54, 0x10, 0x03, 0x12,
	0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x4c, 0x61, 0x6e, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x48, 0x41, 0x52, 0x44,
	0x10, 0x04, 0x2a, 0xd1, 0x02, 0x0a, 0x13, 0x45, 0x4c, 0x61, 0x6e, 0x65, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x5f,
	0x45, 0x4c, 0x61, 0x6e, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c,
	0x61, 0x67, 0x73, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f,
	0x45, 0x4c, 0x61, 0x6e, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c,
	0x61, 0x67, 0x73, 0x5f, 0x53, 0x41, 0x46, 0x45, 0x4c, 0x41, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x21,
	0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x4c, 0x61, 0x6e, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x5f, 0x4f, 0x46, 0x46, 0x4c, 0x41, 0x4e, 0x45, 0x10,
	0x02, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x4c, 0x61, 0x6e, 0x65, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x5f, 0x4d, 0x49, 0x44, 0x4c, 0x41,
	0x4e, 0x45, 0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x5f, 0x45, 0x4c, 0x61, 0x6e, 0x65, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x5f, 0x43, 0x4f,
	0x52, 0x45, 0x10, 0x07, 0x12, 0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x4c, 0x61, 0x6e, 0x65, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x5f, 0x53, 0x55,
	0x50, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x4f, 0x46, 0x54, 0x10, 0x08, 0x12, 0x26, 0x0a, 0x22,
	0x6b, 0x5f, 0x45, 0x4c, 0x61, 0x6e, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x6c, 0x61, 0x67, 0x73, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x48, 0x41,
	0x52, 0x44, 0x10, 0x10, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x4c, 0x61, 0x6e, 0x65, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x5f, 0x53, 0x55,
	0x50, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x18, 0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x5f, 0x45, 0x4c, 0x61,
	0x6e, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x73,
	0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x1f, 0x2a, 0x69, 0x0a, 0x16, 0x45, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x46, 0x6c, 0x61, 0x67, 0x73,
	0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x50, 0x61, 0x72, 0x74, 0x79, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x5f, 0x4e, 0x6f, 0x6e,
	0x65, 0x10, 0x00, 0x12, 0x2c, 0x0a, 0x28, 0x6b, 0x5f, 0x45, 0x50, 0x61, 0x72, 0x74, 0x79, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x5f,
	0x4c, 0x61, 0x72, 0x67, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x53, 0x70, 0x72, 0x65, 0x61, 0x64, 0x10,
	0x01, 0x2a, 0xdc, 0x02, 0x0a, 0x14, 0x45, 0x48, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x4d, 0x4d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x5f,
	0x45, 0x48, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4d, 0x4d, 0x5f,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x6b, 0x5f, 0x45,
	0x48, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4d, 0x4d, 0x5f, 0x4d,
	0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x4d, 0x4d, 0x44, 0x61, 0x74, 0x61, 0x10, 0x01, 0x12, 0x25,
	0x0a, 0x21, 0x6b, 0x5f, 0x45, 0x48, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x4d, 0x4d, 0x5f, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x69, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x48, 0x69, 0x67, 0x68,
	0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4d, 0x4d, 0x5f, 0x4d, 0x61, 0x6e, 0x75, 0x61,
	0x6c, 0x6c, 0x79, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x03, 0x12, 0x21, 0x0a,
	0x1d, 0x6b, 0x5f, 0x45, 0x48, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x4d, 0x4d, 0x5f, 0x4d, 0x69, 0x6e, 0x5f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x40,
	0x12, 0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x48, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x4d, 0x4d, 0x5f, 0x41, 0x6c, 0x6c, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x41, 0x12, 0x23, 0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x48,
	0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4d, 0x4d, 0x5f, 0x55, 0x73,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x10, 0x42, 0x12, 0x1f, 0x0a,
	0x1b, 0x6b, 0x5f, 0x45, 0x48, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x4d, 0x4d, 0x5f, 0x46, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x10, 0x43, 0x12, 0x20,
	0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x48, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x4d, 0x4d, 0x5f, 0x48, 0x69, 0x67, 0x68, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x10, 0x44,
	0x2a, 0x50, 0x0a, 0x10, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x44, 0x6f, 0x74, 0x61, 0x54, 0x56, 0x44,
	0x65, 0x6c, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x44, 0x6f, 0x74,
	0x61, 0x54, 0x56, 0x5f, 0x31, 0x30, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x6f, 0x62, 0x62,
	0x79, 0x44, 0x6f, 0x74, 0x61, 0x54, 0x56, 0x5f, 0x31, 0x32, 0x30, 0x10, 0x01, 0x12, 0x13, 0x0a,
	0x0f, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x44, 0x6f, 0x74, 0x61, 0x54, 0x56, 0x5f, 0x33, 0x30, 0x30,
	0x10, 0x02, 0x2a, 0x83, 0x01, 0x0a, 0x15, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x44, 0x6f, 0x74, 0x61,
	0x50, 0x61, 0x75, 0x73, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x1f,
	0x4c, 0x6f, 0x62, 0x62, 0x79, 0x44, 0x6f, 0x74, 0x61, 0x50, 0x61, 0x75, 0x73, 0x65, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x55, 0x6e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x10,
	0x00, 0x12, 0x21, 0x0a, 0x1d, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x44, 0x6f, 0x74, 0x61, 0x50, 0x61,
	0x75, 0x73, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x65, 0x64, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x44, 0x6f, 0x74,
	0x61, 0x50, 0x61, 0x75, 0x73, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x44, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x2a, 0x75, 0x0a, 0x11, 0x45, 0x52, 0x65, 0x61,
	0x64, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a,
	0x1b, 0x6b, 0x5f, 0x45, 0x52, 0x65, 0x61, 0x64, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x20,
	0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x52, 0x65, 0x61, 0x64, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x4e, 0x6f, 0x74, 0x52, 0x65, 0x61, 0x64, 0x79, 0x10, 0x01,
	0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x5f, 0x45, 0x52, 0x65, 0x61, 0x64, 0x79, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x52, 0x65, 0x61, 0x64, 0x79, 0x10, 0x02, 0x2a,
	0xf6, 0x01, 0x0a, 0x18, 0x45, 0x52, 0x65, 0x61, 0x64, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x26, 0x0a, 0x22,
	0x6b, 0x5f, 0x45, 0x52, 0x65, 0x61, 0x64, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x10, 0x00, 0x12, 0x30, 0x0a, 0x2c, 0x6b, 0x5f, 0x45, 0x52, 0x65, 0x61, 0x64, 0x79,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x5f, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x29, 0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x52, 0x65, 0x61,
	0x64, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x5f, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x10,
	0x02, 0x12, 0x28, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x52, 0x65, 0x61, 0x64, 0x79, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f,
	0x53, 0x65, 0x6e, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x03, 0x12, 0x2b, 0x0a, 0x27, 0x6b,
	0x5f, 0x45, 0x52, 0x65, 0x61, 0x64, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x04, 0x2a, 0xc1, 0x01, 0x0a, 0x1b, 0x45, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x6b, 0x5f, 0x45, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x42,
	0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x4c, 0x6f, 0x77, 0x10, 0x01, 0x12, 0x28, 0x0a, 0x24, 0x6b, 0x5f,
	0x45, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x4d, 0x65, 0x64, 0x69,
	0x75, 0x6d, 0x10, 0x02, 0x12, 0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x48, 0x69, 0x67, 0x68, 0x10, 0x03, 0x42, 0x05, 0x48, 0x01,
	0x80, 0x01, 0x00,
}

var (
	file_dota_gcmessages_common_match_management_proto_rawDescOnce sync.Once
	file_dota_gcmessages_common_match_management_proto_rawDescData = file_dota_gcmessages_common_match_management_proto_rawDesc
)

func file_dota_gcmessages_common_match_management_proto_rawDescGZIP() []byte {
	file_dota_gcmessages_common_match_management_proto_rawDescOnce.Do(func() {
		file_dota_gcmessages_common_match_management_proto_rawDescData = protoimpl.X.CompressGZIP(file_dota_gcmessages_common_match_management_proto_rawDescData)
	})
	return file_dota_gcmessages_common_match_management_proto_rawDescData
}

var file_dota_gcmessages_common_match_management_proto_enumTypes = make([]protoimpl.EnumInfo, 13)
var file_dota_gcmessages_common_match_management_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_dota_gcmessages_common_match_management_proto_goTypes = []interface{}{
	(ELaneSelection)(0),                                // 0: dota.ELaneSelection
	(ELaneSelectionFlags)(0),                           // 1: dota.ELaneSelectionFlags
	(EPartyMatchmakingFlags)(0),                        // 2: dota.EPartyMatchmakingFlags
	(EHighPriorityMMState)(0),                          // 3: dota.EHighPriorityMMState
	(LobbyDotaTVDelay)(0),                              // 4: dota.LobbyDotaTVDelay
	(LobbyDotaPauseSetting)(0),                         // 5: dota.LobbyDotaPauseSetting
	(EReadyCheckStatus)(0),                             // 6: dota.EReadyCheckStatus
	(EReadyCheckRequestResult)(0),                      // 7: dota.EReadyCheckRequestResult
	(EMatchBehaviorScoreVariance)(0),                   // 8: dota.EMatchBehaviorScoreVariance
	(CSODOTAParty_State)(0),                            // 9: dota.CSODOTAParty.State
	(CSODOTALobby_State)(0),                            // 10: dota.CSODOTALobby.State
	(CSODOTALobby_LobbyType)(0),                        // 11: dota.CSODOTALobby.LobbyType
	(CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType)(0), // 12: dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType
	(*CSODOTAPartyMember)(nil),                         // 13: dota.CSODOTAPartyMember
	(*CSODOTAParty)(nil),                               // 14: dota.CSODOTAParty
	(*CSODOTAPartyInvite)(nil),                         // 15: dota.CSODOTAPartyInvite
	(*CSODOTALobbyInvite)(nil),                         // 16: dota.CSODOTALobbyInvite
	(*CMsgLeaverState)(nil),                            // 17: dota.CMsgLeaverState
	(*CSODOTALobbyMember)(nil),                         // 18: dota.CSODOTALobbyMember
	(*CLobbyTeamDetails)(nil),                          // 19: dota.CLobbyTeamDetails
	(*CLobbyGuildDetails)(nil),                         // 20: dota.CLobbyGuildDetails
	(*CLobbyTimedRewardDetails)(nil),                   // 21: dota.CLobbyTimedRewardDetails
	(*CLobbyBroadcastChannelInfo)(nil),                 // 22: dota.CLobbyBroadcastChannelInfo
	(*CLobbyGuildChallenge)(nil),                       // 23: dota.CLobbyGuildChallenge
	(*CSODOTALobby)(nil),                               // 24: dota.CSODOTALobby
	(*CMsgLobbyPlaytestDetails)(nil),                   // 25: dota.CMsgLobbyPlaytestDetails
	(*CMsgReadyCheckStatus)(nil),                       // 26: dota.CMsgReadyCheckStatus
	(*CMsgPartyReadyCheckRequest)(nil),                 // 27: dota.CMsgPartyReadyCheckRequest
	(*CMsgPartyReadyCheckResponse)(nil),                // 28: dota.CMsgPartyReadyCheckResponse
	(*CMsgPartyReadyCheckAcknowledge)(nil),             // 29: dota.CMsgPartyReadyCheckAcknowledge
	(*CMsgLobbyEventGameDetails)(nil),                  // 30: dota.CMsgLobbyEventGameDetails
	(*CMsgMatchMatchmakingStats)(nil),                  // 31: dota.CMsgMatchMatchmakingStats
	(*CMvpData)(nil),                                   // 32: dota.CMvpData
	(*CSODOTAPartyInvite_PartyMember)(nil),             // 33: dota.CSODOTAPartyInvite.PartyMember
	(*CSODOTALobbyInvite_LobbyMember)(nil),             // 34: dota.CSODOTALobbyInvite.LobbyMember
	(*CSODOTALobby_CExtraMsg)(nil),                     // 35: dota.CSODOTALobby.CExtraMsg
	(*CMsgReadyCheckStatus_ReadyMember)(nil),           // 36: dota.CMsgReadyCheckStatus.ReadyMember
	(*CMvpData_MvpDatum)(nil),                          // 37: dota.CMvpData.MvpDatum
	(*CMvpData_MvpDatum_MvpAccolade)(nil),              // 38: dota.CMvpData.MvpDatum.MvpAccolade
	(PartnerAccountType)(0),                            // 39: dota.PartnerAccountType
	(MatchType)(0),                                     // 40: dota.MatchType
	(DOTABotDifficulty)(0),                             // 41: dota.DOTABotDifficulty
	(ETourneyQueueDeadlineState)(0),                    // 42: dota.ETourneyQueueDeadlineState
	(DOTA_GameState)(0),                                // 43: dota.DOTA_GameState
	(DOTA_GC_TEAM)(0),                                  // 44: dota.DOTA_GC_TEAM
	(DOTALeaverStatusT)(0),                             // 45: dota.DOTALeaverStatus_t
	(*CMsgPendingEventAward)(nil),                      // 46: dota.CMsgPendingEventAward
	(EDOTAMMRBoostType)(0),                             // 47: dota.EDOTAMMRBoostType
	(EEvent)(0),                                        // 48: dota.EEvent
	(DOTA_CM_PICK)(0),                                  // 49: dota.DOTA_CM_PICK
	(DOTAGameVersion)(0),                               // 50: dota.DOTAGameVersion
	(*CDOTASaveGame)(nil),                              // 51: dota.CDOTASaveGame
	(EMatchOutcome)(0),                                 // 52: dota.EMatchOutcome
	(DOTALobbyVisibility)(0),                           // 53: dota.DOTALobbyVisibility
	(DOTASelectionPriorityRules)(0),                    // 54: dota.DOTASelectionPriorityRules
	(DOTASelectionPriorityChoice)(0),                   // 55: dota.DOTASelectionPriorityChoice
	(*CMsgLobbyEventPoints)(nil),                       // 56: dota.CMsgLobbyEventPoints
}
var file_dota_gcmessages_common_match_management_proto_depIdxs = []int32{
	39, // 0: dota.CSODOTAPartyMember.partner_type:type_name -> dota.PartnerAccountType
	9,  // 1: dota.CSODOTAParty.state:type_name -> dota.CSODOTAParty.State
	40, // 2: dota.CSODOTAParty.match_type:type_name -> dota.MatchType
	41, // 3: dota.CSODOTAParty.bot_difficulty:type_name -> dota.DOTABotDifficulty
	13, // 4: dota.CSODOTAParty.members:type_name -> dota.CSODOTAPartyMember
	15, // 5: dota.CSODOTAParty.sent_invites:type_name -> dota.CSODOTAPartyInvite
	15, // 6: dota.CSODOTAParty.recv_invites:type_name -> dota.CSODOTAPartyInvite
	42, // 7: dota.CSODOTAParty.tourney_queue_deadline_state:type_name -> dota.ETourneyQueueDeadlineState
	26, // 8: dota.CSODOTAParty.ready_check:type_name -> dota.CMsgReadyCheckStatus
	3,  // 9: dota.CSODOTAParty.high_priority_state:type_name -> dota.EHighPriorityMMState
	33, // 10: dota.CSODOTAPartyInvite.members:type_name -> dota.CSODOTAPartyInvite.PartyMember
	34, // 11: dota.CSODOTALobbyInvite.members:type_name -> dota.CSODOTALobbyInvite.LobbyMember
	43, // 12: dota.CMsgLeaverState.game_state:type_name -> dota.DOTA_GameState
	44, // 13: dota.CSODOTALobbyMember.team:type_name -> dota.DOTA_GC_TEAM
	45, // 14: dota.CSODOTALobbyMember.leaver_status:type_name -> dota.DOTALeaverStatus_t
	39, // 15: dota.CSODOTALobbyMember.partner_account_type:type_name -> dota.PartnerAccountType
	44, // 16: dota.CSODOTALobbyMember.coach_team:type_name -> dota.DOTA_GC_TEAM
	40, // 17: dota.CSODOTALobbyMember.search_match_type:type_name -> dota.MatchType
	44, // 18: dota.CSODOTALobbyMember.live_spectator_team:type_name -> dota.DOTA_GC_TEAM
	46, // 19: dota.CSODOTALobbyMember.pending_awards:type_name -> dota.CMsgPendingEventAward
	46, // 20: dota.CSODOTALobbyMember.pending_awards_on_victory:type_name -> dota.CMsgPendingEventAward
	47, // 21: dota.CSODOTALobbyMember.rank_mmr_boost_type:type_name -> dota.EDOTAMMRBoostType
	44, // 22: dota.CLobbyGuildDetails.team_for_guild:type_name -> dota.DOTA_GC_TEAM
	48, // 23: dota.CLobbyGuildChallenge.event_id:type_name -> dota.EEvent
	18, // 24: dota.CSODOTALobby.members:type_name -> dota.CSODOTALobbyMember
	18, // 25: dota.CSODOTALobby.left_members:type_name -> dota.CSODOTALobbyMember
	10, // 26: dota.CSODOTALobby.state:type_name -> dota.CSODOTALobby.State
	11, // 27: dota.CSODOTALobby.lobby_type:type_name -> dota.CSODOTALobby.LobbyType
	19, // 28: dota.CSODOTALobby.team_details:type_name -> dota.CLobbyTeamDetails
	43, // 29: dota.CSODOTALobby.game_state:type_name -> dota.DOTA_GameState
	49, // 30: dota.CSODOTALobby.cm_pick:type_name -> dota.DOTA_CM_PICK
	41, // 31: dota.CSODOTALobby.bot_difficulty_radiant:type_name -> dota.DOTABotDifficulty
	50, // 32: dota.CSODOTALobby.game_version:type_name -> dota.DOTAGameVersion
	21, // 33: dota.CSODOTALobby.timed_reward_details:type_name -> dota.CLobbyTimedRewardDetails
	4,  // 34: dota.CSODOTALobby.dota_tv_delay:type_name -> dota.LobbyDotaTVDelay
	22, // 35: dota.CSODOTALobby.broadcast_channel_info:type_name -> dota.CLobbyBroadcastChannelInfo
	35, // 36: dota.CSODOTALobby.extra_messages:type_name -> dota.CSODOTALobby.CExtraMsg
	51, // 37: dota.CSODOTALobby.save_game:type_name -> dota.CDOTASaveGame
	52, // 38: dota.CSODOTALobby.match_outcome:type_name -> dota.EMatchOutcome
	39, // 39: dota.CSODOTALobby.partner_type:type_name -> dota.PartnerAccountType
	53, // 40: dota.CSODOTALobby.visibility:type_name -> dota.DOTALobbyVisibility
	5,  // 41: dota.CSODOTALobby.pause_setting:type_name -> dota.LobbyDotaPauseSetting
	41, // 42: dota.CSODOTALobby.bot_difficulty_dire:type_name -> dota.DOTABotDifficulty
	48, // 43: dota.CSODOTALobby.event_progression_enabled:type_name -> dota.EEvent
	54, // 44: dota.CSODOTALobby.selection_priority_rules:type_name -> dota.DOTASelectionPriorityRules
	55, // 45: dota.CSODOTALobby.series_current_priority_team_choice:type_name -> dota.DOTASelectionPriorityChoice
	55, // 46: dota.CSODOTALobby.series_current_non_priority_team_choice:type_name -> dota.DOTASelectionPriorityChoice
	48, // 47: dota.CSODOTALobby.current_primary_event:type_name -> dota.EEvent
	23, // 48: dota.CSODOTALobby.guild_challenges:type_name -> dota.CLobbyGuildChallenge
	20, // 49: dota.CSODOTALobby.guild_details:type_name -> dota.CLobbyGuildDetails
	56, // 50: dota.CSODOTALobby.lobby_event_points:type_name -> dota.CMsgLobbyEventPoints
	36, // 51: dota.CMsgReadyCheckStatus.ready_members:type_name -> dota.CMsgReadyCheckStatus.ReadyMember
	7,  // 52: dota.CMsgPartyReadyCheckResponse.result:type_name -> dota.EReadyCheckRequestResult
	6,  // 53: dota.CMsgPartyReadyCheckAcknowledge.ready_status:type_name -> dota.EReadyCheckStatus
	8,  // 54: dota.CMsgMatchMatchmakingStats.behavior_score_variance:type_name -> dota.EMatchBehaviorScoreVariance
	37, // 55: dota.CMvpData.mvps:type_name -> dota.CMvpData.MvpDatum
	6,  // 56: dota.CMsgReadyCheckStatus.ReadyMember.ready_status:type_name -> dota.EReadyCheckStatus
	38, // 57: dota.CMvpData.MvpDatum.accolades:type_name -> dota.CMvpData.MvpDatum.MvpAccolade
	12, // 58: dota.CMvpData.MvpDatum.MvpAccolade.type:type_name -> dota.CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType
	59, // [59:59] is the sub-list for method output_type
	59, // [59:59] is the sub-list for method input_type
	59, // [59:59] is the sub-list for extension type_name
	59, // [59:59] is the sub-list for extension extendee
	0,  // [0:59] is the sub-list for field type_name
}

func init() { file_dota_gcmessages_common_match_management_proto_init() }
func file_dota_gcmessages_common_match_management_proto_init() {
	if File_dota_gcmessages_common_match_management_proto != nil {
		return
	}
	file_steammessages_proto_init()
	file_gcsdk_gcmessages_proto_init()
	file_dota_shared_enums_proto_init()
	file_dota_gcmessages_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_dota_gcmessages_common_match_management_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSODOTAPartyMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_match_management_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSODOTAParty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_match_management_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSODOTAPartyInvite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_match_management_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSODOTALobbyInvite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_match_management_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgLeaverState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_match_management_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSODOTALobbyMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_match_management_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CLobbyTeamDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_match_management_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CLobbyGuildDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_match_management_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CLobbyTimedRewardDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_match_management_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CLobbyBroadcastChannelInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_match_management_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CLobbyGuildChallenge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_match_management_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSODOTALobby); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_match_management_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgLobbyPlaytestDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_match_management_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgReadyCheckStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_match_management_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPartyReadyCheckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_match_management_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPartyReadyCheckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_match_management_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPartyReadyCheckAcknowledge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_match_management_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgLobbyEventGameDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_match_management_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgMatchMatchmakingStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_match_management_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMvpData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_match_management_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSODOTAPartyInvite_PartyMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_match_management_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSODOTALobbyInvite_LobbyMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_match_management_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSODOTALobby_CExtraMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_match_management_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgReadyCheckStatus_ReadyMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_match_management_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMvpData_MvpDatum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_common_match_management_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMvpData_MvpDatum_MvpAccolade); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dota_gcmessages_common_match_management_proto_rawDesc,
			NumEnums:      13,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_dota_gcmessages_common_match_management_proto_goTypes,
		DependencyIndexes: file_dota_gcmessages_common_match_management_proto_depIdxs,
		EnumInfos:         file_dota_gcmessages_common_match_management_proto_enumTypes,
		MessageInfos:      file_dota_gcmessages_common_match_management_proto_msgTypes,
	}.Build()
	File_dota_gcmessages_common_match_management_proto = out.File
	file_dota_gcmessages_common_match_management_proto_rawDesc = nil
	file_dota_gcmessages_common_match_management_proto_goTypes = nil
	file_dota_gcmessages_common_match_management_proto_depIdxs = nil
}
