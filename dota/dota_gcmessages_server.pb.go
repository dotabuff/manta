// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.6.1
// source: dota_gcmessages_server.proto

package dota

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type EPoorNetworkConditionsType int32

const (
	EPoorNetworkConditionsType_k_EPoorNetworkConditions_None                  EPoorNetworkConditionsType = 0
	EPoorNetworkConditionsType_k_EPoorNetworkConditions_Unknown               EPoorNetworkConditionsType = 1
	EPoorNetworkConditionsType_k_EPoorNetworkConditions_MassDisconnect        EPoorNetworkConditionsType = 2
	EPoorNetworkConditionsType_k_EPoorNetworkConditions_ExcessBadQosIntervals EPoorNetworkConditionsType = 3
)

// Enum value maps for EPoorNetworkConditionsType.
var (
	EPoorNetworkConditionsType_name = map[int32]string{
		0: "k_EPoorNetworkConditions_None",
		1: "k_EPoorNetworkConditions_Unknown",
		2: "k_EPoorNetworkConditions_MassDisconnect",
		3: "k_EPoorNetworkConditions_ExcessBadQosIntervals",
	}
	EPoorNetworkConditionsType_value = map[string]int32{
		"k_EPoorNetworkConditions_None":                  0,
		"k_EPoorNetworkConditions_Unknown":               1,
		"k_EPoorNetworkConditions_MassDisconnect":        2,
		"k_EPoorNetworkConditions_ExcessBadQosIntervals": 3,
	}
)

func (x EPoorNetworkConditionsType) Enum() *EPoorNetworkConditionsType {
	p := new(EPoorNetworkConditionsType)
	*p = x
	return p
}

func (x EPoorNetworkConditionsType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPoorNetworkConditionsType) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_server_proto_enumTypes[0].Descriptor()
}

func (EPoorNetworkConditionsType) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_server_proto_enumTypes[0]
}

func (x EPoorNetworkConditionsType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EPoorNetworkConditionsType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EPoorNetworkConditionsType(num)
	return nil
}

// Deprecated: Use EPoorNetworkConditionsType.Descriptor instead.
func (EPoorNetworkConditionsType) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{0}
}

type EAbilityAbuseType int32

const (
	EAbilityAbuseType_k_EAbilityAbuseType_None                         EAbilityAbuseType = 0
	EAbilityAbuseType_k_EAbilityAbuseType_Io_Relocate                  EAbilityAbuseType = 1
	EAbilityAbuseType_k_EAbilityAbuseType_Chen_Test_Of_Faith           EAbilityAbuseType = 2
	EAbilityAbuseType_k_EAbilityAbuseType_Bane_Nightmare               EAbilityAbuseType = 3
	EAbilityAbuseType_k_EAbilityAbuseType_Bloodseeker_Bloodrage        EAbilityAbuseType = 4
	EAbilityAbuseType_k_EAbilityAbuseType_Outworld_Astral_Imprisonment EAbilityAbuseType = 5
	EAbilityAbuseType_k_EAbilityAbuseType_Shadow_Demon_Disruption      EAbilityAbuseType = 6
	EAbilityAbuseType_k_EAbilityAbuseType_Grimstroke_InkSwell          EAbilityAbuseType = 7
)

// Enum value maps for EAbilityAbuseType.
var (
	EAbilityAbuseType_name = map[int32]string{
		0: "k_EAbilityAbuseType_None",
		1: "k_EAbilityAbuseType_Io_Relocate",
		2: "k_EAbilityAbuseType_Chen_Test_Of_Faith",
		3: "k_EAbilityAbuseType_Bane_Nightmare",
		4: "k_EAbilityAbuseType_Bloodseeker_Bloodrage",
		5: "k_EAbilityAbuseType_Outworld_Astral_Imprisonment",
		6: "k_EAbilityAbuseType_Shadow_Demon_Disruption",
		7: "k_EAbilityAbuseType_Grimstroke_InkSwell",
	}
	EAbilityAbuseType_value = map[string]int32{
		"k_EAbilityAbuseType_None":                         0,
		"k_EAbilityAbuseType_Io_Relocate":                  1,
		"k_EAbilityAbuseType_Chen_Test_Of_Faith":           2,
		"k_EAbilityAbuseType_Bane_Nightmare":               3,
		"k_EAbilityAbuseType_Bloodseeker_Bloodrage":        4,
		"k_EAbilityAbuseType_Outworld_Astral_Imprisonment": 5,
		"k_EAbilityAbuseType_Shadow_Demon_Disruption":      6,
		"k_EAbilityAbuseType_Grimstroke_InkSwell":          7,
	}
)

func (x EAbilityAbuseType) Enum() *EAbilityAbuseType {
	p := new(EAbilityAbuseType)
	*p = x
	return p
}

func (x EAbilityAbuseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EAbilityAbuseType) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_server_proto_enumTypes[1].Descriptor()
}

func (EAbilityAbuseType) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_server_proto_enumTypes[1]
}

func (x EAbilityAbuseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EAbilityAbuseType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EAbilityAbuseType(num)
	return nil
}

// Deprecated: Use EAbilityAbuseType.Descriptor instead.
func (EAbilityAbuseType) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{1}
}

type EIntentionalFeedingType int32

const (
	EIntentionalFeedingType_k_EIntentionalFeedingType_None                     EIntentionalFeedingType = 0
	EIntentionalFeedingType_k_EIntentionalFeedingType_ExcessiveDeaths          EIntentionalFeedingType = 1
	EIntentionalFeedingType_k_EIntentionalFeedingType_MultipleCourierPurchases EIntentionalFeedingType = 2
	EIntentionalFeedingType_k_EIntentionalFeedingType_MultipleCourierDeaths    EIntentionalFeedingType = 4
	EIntentionalFeedingType_k_EIntentionalFeedingType_LowActivity              EIntentionalFeedingType = 8
	EIntentionalFeedingType_k_EIntentionalFeedingType_LowDamage                EIntentionalFeedingType = 16
	EIntentionalFeedingType_k_EIntentionalFeedingType_HighUnspentGold          EIntentionalFeedingType = 32
	EIntentionalFeedingType_k_EIntentionalFeedingType_SoldTooMuchItemValue     EIntentionalFeedingType = 64
	EIntentionalFeedingType_k_EIntentionalFeedingType_TooManyDroppedItems      EIntentionalFeedingType = 128
	EIntentionalFeedingType_k_EIntentionalFeedingType_ExcessiveTowerDamage     EIntentionalFeedingType = 256
	EIntentionalFeedingType_k_EIntentionalFeedingType_LastHitsDenies           EIntentionalFeedingType = 512
	EIntentionalFeedingType_k_EIntentionalFeedingType_XPPM                     EIntentionalFeedingType = 1024
	EIntentionalFeedingType_k_EIntentionalFeedingType_SuspiciousOrders         EIntentionalFeedingType = 2048
)

// Enum value maps for EIntentionalFeedingType.
var (
	EIntentionalFeedingType_name = map[int32]string{
		0:    "k_EIntentionalFeedingType_None",
		1:    "k_EIntentionalFeedingType_ExcessiveDeaths",
		2:    "k_EIntentionalFeedingType_MultipleCourierPurchases",
		4:    "k_EIntentionalFeedingType_MultipleCourierDeaths",
		8:    "k_EIntentionalFeedingType_LowActivity",
		16:   "k_EIntentionalFeedingType_LowDamage",
		32:   "k_EIntentionalFeedingType_HighUnspentGold",
		64:   "k_EIntentionalFeedingType_SoldTooMuchItemValue",
		128:  "k_EIntentionalFeedingType_TooManyDroppedItems",
		256:  "k_EIntentionalFeedingType_ExcessiveTowerDamage",
		512:  "k_EIntentionalFeedingType_LastHitsDenies",
		1024: "k_EIntentionalFeedingType_XPPM",
		2048: "k_EIntentionalFeedingType_SuspiciousOrders",
	}
	EIntentionalFeedingType_value = map[string]int32{
		"k_EIntentionalFeedingType_None":                     0,
		"k_EIntentionalFeedingType_ExcessiveDeaths":          1,
		"k_EIntentionalFeedingType_MultipleCourierPurchases": 2,
		"k_EIntentionalFeedingType_MultipleCourierDeaths":    4,
		"k_EIntentionalFeedingType_LowActivity":              8,
		"k_EIntentionalFeedingType_LowDamage":                16,
		"k_EIntentionalFeedingType_HighUnspentGold":          32,
		"k_EIntentionalFeedingType_SoldTooMuchItemValue":     64,
		"k_EIntentionalFeedingType_TooManyDroppedItems":      128,
		"k_EIntentionalFeedingType_ExcessiveTowerDamage":     256,
		"k_EIntentionalFeedingType_LastHitsDenies":           512,
		"k_EIntentionalFeedingType_XPPM":                     1024,
		"k_EIntentionalFeedingType_SuspiciousOrders":         2048,
	}
)

func (x EIntentionalFeedingType) Enum() *EIntentionalFeedingType {
	p := new(EIntentionalFeedingType)
	*p = x
	return p
}

func (x EIntentionalFeedingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EIntentionalFeedingType) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_server_proto_enumTypes[2].Descriptor()
}

func (EIntentionalFeedingType) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_server_proto_enumTypes[2]
}

func (x EIntentionalFeedingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EIntentionalFeedingType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EIntentionalFeedingType(num)
	return nil
}

// Deprecated: Use EIntentionalFeedingType.Descriptor instead.
func (EIntentionalFeedingType) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{2}
}

type ESuspiciousActivity int32

const (
	ESuspiciousActivity_k_ESuspiciousActivity_VAC_MultipleInstances  ESuspiciousActivity = 1
	ESuspiciousActivity_k_ESuspiciousActivity_IntentionalFeeding     ESuspiciousActivity = 100
	ESuspiciousActivity_k_ESuspiciousActivity_SuspectedBotFarming    ESuspiciousActivity = 101
	ESuspiciousActivity_k_ESuspiciousActivity_AttemptedToCrashServer ESuspiciousActivity = 102
)

// Enum value maps for ESuspiciousActivity.
var (
	ESuspiciousActivity_name = map[int32]string{
		1:   "k_ESuspiciousActivity_VAC_MultipleInstances",
		100: "k_ESuspiciousActivity_IntentionalFeeding",
		101: "k_ESuspiciousActivity_SuspectedBotFarming",
		102: "k_ESuspiciousActivity_AttemptedToCrashServer",
	}
	ESuspiciousActivity_value = map[string]int32{
		"k_ESuspiciousActivity_VAC_MultipleInstances":  1,
		"k_ESuspiciousActivity_IntentionalFeeding":     100,
		"k_ESuspiciousActivity_SuspectedBotFarming":    101,
		"k_ESuspiciousActivity_AttemptedToCrashServer": 102,
	}
)

func (x ESuspiciousActivity) Enum() *ESuspiciousActivity {
	p := new(ESuspiciousActivity)
	*p = x
	return p
}

func (x ESuspiciousActivity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESuspiciousActivity) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_server_proto_enumTypes[3].Descriptor()
}

func (ESuspiciousActivity) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_server_proto_enumTypes[3]
}

func (x ESuspiciousActivity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ESuspiciousActivity) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ESuspiciousActivity(num)
	return nil
}

// Deprecated: Use ESuspiciousActivity.Descriptor instead.
func (ESuspiciousActivity) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{3}
}

type ESuspiciousBuildType int32

const (
	ESuspiciousBuildType_k_ESuspiciousBuildType_None               ESuspiciousBuildType = 0
	ESuspiciousBuildType_k_ESuspiciousBuildType_NoGoldSpent        ESuspiciousBuildType = 1
	ESuspiciousBuildType_k_ESuspiciousBuildType_NoItems            ESuspiciousBuildType = 2
	ESuspiciousBuildType_k_ESuspiciousBuildType_NoSignificantItems ESuspiciousBuildType = 3
	ESuspiciousBuildType_k_ESuspiciousBuildType_TooManyBoots       ESuspiciousBuildType = 4
	ESuspiciousBuildType_k_ESuspiciousBuildType_Bot1               ESuspiciousBuildType = 101
	ESuspiciousBuildType_k_ESuspiciousBuildType_Bot2               ESuspiciousBuildType = 102
	ESuspiciousBuildType_k_ESuspiciousBuildType_Bot3               ESuspiciousBuildType = 103
	ESuspiciousBuildType_k_ESuspiciousBuildType_Bot4               ESuspiciousBuildType = 104
	ESuspiciousBuildType_k_ESuspiciousBuildType_Bot5               ESuspiciousBuildType = 105
)

// Enum value maps for ESuspiciousBuildType.
var (
	ESuspiciousBuildType_name = map[int32]string{
		0:   "k_ESuspiciousBuildType_None",
		1:   "k_ESuspiciousBuildType_NoGoldSpent",
		2:   "k_ESuspiciousBuildType_NoItems",
		3:   "k_ESuspiciousBuildType_NoSignificantItems",
		4:   "k_ESuspiciousBuildType_TooManyBoots",
		101: "k_ESuspiciousBuildType_Bot1",
		102: "k_ESuspiciousBuildType_Bot2",
		103: "k_ESuspiciousBuildType_Bot3",
		104: "k_ESuspiciousBuildType_Bot4",
		105: "k_ESuspiciousBuildType_Bot5",
	}
	ESuspiciousBuildType_value = map[string]int32{
		"k_ESuspiciousBuildType_None":               0,
		"k_ESuspiciousBuildType_NoGoldSpent":        1,
		"k_ESuspiciousBuildType_NoItems":            2,
		"k_ESuspiciousBuildType_NoSignificantItems": 3,
		"k_ESuspiciousBuildType_TooManyBoots":       4,
		"k_ESuspiciousBuildType_Bot1":               101,
		"k_ESuspiciousBuildType_Bot2":               102,
		"k_ESuspiciousBuildType_Bot3":               103,
		"k_ESuspiciousBuildType_Bot4":               104,
		"k_ESuspiciousBuildType_Bot5":               105,
	}
)

func (x ESuspiciousBuildType) Enum() *ESuspiciousBuildType {
	p := new(ESuspiciousBuildType)
	*p = x
	return p
}

func (x ESuspiciousBuildType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESuspiciousBuildType) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_server_proto_enumTypes[4].Descriptor()
}

func (ESuspiciousBuildType) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_server_proto_enumTypes[4]
}

func (x ESuspiciousBuildType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ESuspiciousBuildType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ESuspiciousBuildType(num)
	return nil
}

// Deprecated: Use ESuspiciousBuildType.Descriptor instead.
func (ESuspiciousBuildType) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{4}
}

type CMsgConnectedPlayers_SendReason int32

const (
	CMsgConnectedPlayers_INVALID                            CMsgConnectedPlayers_SendReason = 0
	CMsgConnectedPlayers_HEARTBEAT                          CMsgConnectedPlayers_SendReason = 1
	CMsgConnectedPlayers_GAME_STATE                         CMsgConnectedPlayers_SendReason = 2
	CMsgConnectedPlayers_FIRST_BLOOD                        CMsgConnectedPlayers_SendReason = 3
	CMsgConnectedPlayers_PLAYER_CONNECTED                   CMsgConnectedPlayers_SendReason = 4
	CMsgConnectedPlayers_PLAYER_HERO                        CMsgConnectedPlayers_SendReason = 5
	CMsgConnectedPlayers_PLAYER_DISCONNECTED_CONSEQUENCES   CMsgConnectedPlayers_SendReason = 6
	CMsgConnectedPlayers_PLAYER_DISCONNECTED_NOCONSEQUENCES CMsgConnectedPlayers_SendReason = 7
	CMsgConnectedPlayers_GAMESTATE_TIMEOUT                  CMsgConnectedPlayers_SendReason = 10
	CMsgConnectedPlayers_MASS_DISCONNECT                    CMsgConnectedPlayers_SendReason = 11
	CMsgConnectedPlayers_KILLS                              CMsgConnectedPlayers_SendReason = 13
	CMsgConnectedPlayers_BUILDING_STATE                     CMsgConnectedPlayers_SendReason = 14
)

// Enum value maps for CMsgConnectedPlayers_SendReason.
var (
	CMsgConnectedPlayers_SendReason_name = map[int32]string{
		0:  "INVALID",
		1:  "HEARTBEAT",
		2:  "GAME_STATE",
		3:  "FIRST_BLOOD",
		4:  "PLAYER_CONNECTED",
		5:  "PLAYER_HERO",
		6:  "PLAYER_DISCONNECTED_CONSEQUENCES",
		7:  "PLAYER_DISCONNECTED_NOCONSEQUENCES",
		10: "GAMESTATE_TIMEOUT",
		11: "MASS_DISCONNECT",
		13: "KILLS",
		14: "BUILDING_STATE",
	}
	CMsgConnectedPlayers_SendReason_value = map[string]int32{
		"INVALID":                            0,
		"HEARTBEAT":                          1,
		"GAME_STATE":                         2,
		"FIRST_BLOOD":                        3,
		"PLAYER_CONNECTED":                   4,
		"PLAYER_HERO":                        5,
		"PLAYER_DISCONNECTED_CONSEQUENCES":   6,
		"PLAYER_DISCONNECTED_NOCONSEQUENCES": 7,
		"GAMESTATE_TIMEOUT":                  10,
		"MASS_DISCONNECT":                    11,
		"KILLS":                              13,
		"BUILDING_STATE":                     14,
	}
)

func (x CMsgConnectedPlayers_SendReason) Enum() *CMsgConnectedPlayers_SendReason {
	p := new(CMsgConnectedPlayers_SendReason)
	*p = x
	return p
}

func (x CMsgConnectedPlayers_SendReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgConnectedPlayers_SendReason) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_server_proto_enumTypes[5].Descriptor()
}

func (CMsgConnectedPlayers_SendReason) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_server_proto_enumTypes[5]
}

func (x CMsgConnectedPlayers_SendReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgConnectedPlayers_SendReason) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgConnectedPlayers_SendReason(num)
	return nil
}

// Deprecated: Use CMsgConnectedPlayers_SendReason.Descriptor instead.
func (CMsgConnectedPlayers_SendReason) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{2, 0}
}

type CMsgGameServerInfo_ServerType int32

const (
	CMsgGameServerInfo_UNSPECIFIED      CMsgGameServerInfo_ServerType = 0
	CMsgGameServerInfo_GAME             CMsgGameServerInfo_ServerType = 1
	CMsgGameServerInfo_PROXY            CMsgGameServerInfo_ServerType = 2
	CMsgGameServerInfo_TENSORFLOW       CMsgGameServerInfo_ServerType = 3
	CMsgGameServerInfo_DOTA_ONLY        CMsgGameServerInfo_ServerType = 4
	CMsgGameServerInfo_CUSTOM_GAME_ONLY CMsgGameServerInfo_ServerType = 5
	CMsgGameServerInfo_EVENT_GAME_ONLY  CMsgGameServerInfo_ServerType = 6
)

// Enum value maps for CMsgGameServerInfo_ServerType.
var (
	CMsgGameServerInfo_ServerType_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "GAME",
		2: "PROXY",
		3: "TENSORFLOW",
		4: "DOTA_ONLY",
		5: "CUSTOM_GAME_ONLY",
		6: "EVENT_GAME_ONLY",
	}
	CMsgGameServerInfo_ServerType_value = map[string]int32{
		"UNSPECIFIED":      0,
		"GAME":             1,
		"PROXY":            2,
		"TENSORFLOW":       3,
		"DOTA_ONLY":        4,
		"CUSTOM_GAME_ONLY": 5,
		"EVENT_GAME_ONLY":  6,
	}
)

func (x CMsgGameServerInfo_ServerType) Enum() *CMsgGameServerInfo_ServerType {
	p := new(CMsgGameServerInfo_ServerType)
	*p = x
	return p
}

func (x CMsgGameServerInfo_ServerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgGameServerInfo_ServerType) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_server_proto_enumTypes[6].Descriptor()
}

func (CMsgGameServerInfo_ServerType) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_server_proto_enumTypes[6]
}

func (x CMsgGameServerInfo_ServerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgGameServerInfo_ServerType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgGameServerInfo_ServerType(num)
	return nil
}

// Deprecated: Use CMsgGameServerInfo_ServerType.Descriptor instead.
func (CMsgGameServerInfo_ServerType) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{3, 0}
}

type CMsgGameServerInfo_CustomGames int32

const (
	CMsgGameServerInfo_BOTH  CMsgGameServerInfo_CustomGames = 0
	CMsgGameServerInfo_NONE  CMsgGameServerInfo_CustomGames = 1
	CMsgGameServerInfo_ONLY  CMsgGameServerInfo_CustomGames = 2
	CMsgGameServerInfo_EVENT CMsgGameServerInfo_CustomGames = 3
)

// Enum value maps for CMsgGameServerInfo_CustomGames.
var (
	CMsgGameServerInfo_CustomGames_name = map[int32]string{
		0: "BOTH",
		1: "NONE",
		2: "ONLY",
		3: "EVENT",
	}
	CMsgGameServerInfo_CustomGames_value = map[string]int32{
		"BOTH":  0,
		"NONE":  1,
		"ONLY":  2,
		"EVENT": 3,
	}
)

func (x CMsgGameServerInfo_CustomGames) Enum() *CMsgGameServerInfo_CustomGames {
	p := new(CMsgGameServerInfo_CustomGames)
	*p = x
	return p
}

func (x CMsgGameServerInfo_CustomGames) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgGameServerInfo_CustomGames) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_server_proto_enumTypes[7].Descriptor()
}

func (CMsgGameServerInfo_CustomGames) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_server_proto_enumTypes[7]
}

func (x CMsgGameServerInfo_CustomGames) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgGameServerInfo_CustomGames) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgGameServerInfo_CustomGames(num)
	return nil
}

// Deprecated: Use CMsgGameServerInfo_CustomGames.Descriptor instead.
func (CMsgGameServerInfo_CustomGames) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{3, 1}
}

type CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType int32

const (
	CMsgGameMatchSignOut_CTeam_CPlayer_HERO_DAMAGE_PHYSICAL CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType = 0
	CMsgGameMatchSignOut_CTeam_CPlayer_HERO_DAMAGE_MAGICAL  CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType = 1
	CMsgGameMatchSignOut_CTeam_CPlayer_HERO_DAMAGE_PURE     CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType = 2
)

// Enum value maps for CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType.
var (
	CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType_name = map[int32]string{
		0: "HERO_DAMAGE_PHYSICAL",
		1: "HERO_DAMAGE_MAGICAL",
		2: "HERO_DAMAGE_PURE",
	}
	CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType_value = map[string]int32{
		"HERO_DAMAGE_PHYSICAL": 0,
		"HERO_DAMAGE_MAGICAL":  1,
		"HERO_DAMAGE_PURE":     2,
	}
)

func (x CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType) Enum() *CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType {
	p := new(CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType)
	*p = x
	return p
}

func (x CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_server_proto_enumTypes[8].Descriptor()
}

func (CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_server_proto_enumTypes[8]
}

func (x CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType(num)
	return nil
}

// Deprecated: Use CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType.Descriptor instead.
func (CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{14, 0, 0, 0}
}

type CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState int32

const (
	CMsgDOTALiveScoreboardUpdate_Team_Player_k_EDOTAUltimateStateNotLearned CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState = 0
	CMsgDOTALiveScoreboardUpdate_Team_Player_k_EDOTAUltimateStateCooldown   CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState = 1
	CMsgDOTALiveScoreboardUpdate_Team_Player_k_EDOTAUltimateStateNeedsMana  CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState = 2
	CMsgDOTALiveScoreboardUpdate_Team_Player_k_EDOTAUltimateStateReady      CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState = 3
)

// Enum value maps for CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState.
var (
	CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_name = map[int32]string{
		0: "k_EDOTAUltimateStateNotLearned",
		1: "k_EDOTAUltimateStateCooldown",
		2: "k_EDOTAUltimateStateNeedsMana",
		3: "k_EDOTAUltimateStateReady",
	}
	CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_value = map[string]int32{
		"k_EDOTAUltimateStateNotLearned": 0,
		"k_EDOTAUltimateStateCooldown":   1,
		"k_EDOTAUltimateStateNeedsMana":  2,
		"k_EDOTAUltimateStateReady":      3,
	}
)

func (x CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState) Enum() *CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState {
	p := new(CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState)
	*p = x
	return p
}

func (x CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_server_proto_enumTypes[9].Descriptor()
}

func (CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_server_proto_enumTypes[9]
}

func (x CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState(num)
	return nil
}

// Deprecated: Use CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState.Descriptor instead.
func (CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{25, 0, 0, 0}
}

type CMsgGameServerSaveGameResult_Result int32

const (
	CMsgGameServerSaveGameResult_SaveSuccessful  CMsgGameServerSaveGameResult_Result = 0
	CMsgGameServerSaveGameResult_SessionNotFound CMsgGameServerSaveGameResult_Result = 1
	CMsgGameServerSaveGameResult_DatabaseError   CMsgGameServerSaveGameResult_Result = 2
	CMsgGameServerSaveGameResult_TooBig          CMsgGameServerSaveGameResult_Result = 3
)

// Enum value maps for CMsgGameServerSaveGameResult_Result.
var (
	CMsgGameServerSaveGameResult_Result_name = map[int32]string{
		0: "SaveSuccessful",
		1: "SessionNotFound",
		2: "DatabaseError",
		3: "TooBig",
	}
	CMsgGameServerSaveGameResult_Result_value = map[string]int32{
		"SaveSuccessful":  0,
		"SessionNotFound": 1,
		"DatabaseError":   2,
		"TooBig":          3,
	}
)

func (x CMsgGameServerSaveGameResult_Result) Enum() *CMsgGameServerSaveGameResult_Result {
	p := new(CMsgGameServerSaveGameResult_Result)
	*p = x
	return p
}

func (x CMsgGameServerSaveGameResult_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgGameServerSaveGameResult_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_server_proto_enumTypes[10].Descriptor()
}

func (CMsgGameServerSaveGameResult_Result) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_server_proto_enumTypes[10]
}

func (x CMsgGameServerSaveGameResult_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgGameServerSaveGameResult_Result) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgGameServerSaveGameResult_Result(num)
	return nil
}

// Deprecated: Use CMsgGameServerSaveGameResult_Result.Descriptor instead.
func (CMsgGameServerSaveGameResult_Result) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{41, 0}
}

type CMsgGCToServerPredictionResult_Prediction_EResult int32

const (
	CMsgGCToServerPredictionResult_Prediction_k_eResult_ItemGranted CMsgGCToServerPredictionResult_Prediction_EResult = 1
	CMsgGCToServerPredictionResult_Prediction_k_eResult_Destroyed   CMsgGCToServerPredictionResult_Prediction_EResult = 2
)

// Enum value maps for CMsgGCToServerPredictionResult_Prediction_EResult.
var (
	CMsgGCToServerPredictionResult_Prediction_EResult_name = map[int32]string{
		1: "k_eResult_ItemGranted",
		2: "k_eResult_Destroyed",
	}
	CMsgGCToServerPredictionResult_Prediction_EResult_value = map[string]int32{
		"k_eResult_ItemGranted": 1,
		"k_eResult_Destroyed":   2,
	}
)

func (x CMsgGCToServerPredictionResult_Prediction_EResult) Enum() *CMsgGCToServerPredictionResult_Prediction_EResult {
	p := new(CMsgGCToServerPredictionResult_Prediction_EResult)
	*p = x
	return p
}

func (x CMsgGCToServerPredictionResult_Prediction_EResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgGCToServerPredictionResult_Prediction_EResult) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_server_proto_enumTypes[11].Descriptor()
}

func (CMsgGCToServerPredictionResult_Prediction_EResult) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_server_proto_enumTypes[11]
}

func (x CMsgGCToServerPredictionResult_Prediction_EResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgGCToServerPredictionResult_Prediction_EResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgGCToServerPredictionResult_Prediction_EResult(num)
	return nil
}

// Deprecated: Use CMsgGCToServerPredictionResult_Prediction_EResult.Descriptor instead.
func (CMsgGCToServerPredictionResult_Prediction_EResult) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{73, 0, 0}
}

type CMsgServerToGCPostMatchTipResponse_Result int32

const (
	CMsgServerToGCPostMatchTipResponse_SUCCESS CMsgServerToGCPostMatchTipResponse_Result = 0
	CMsgServerToGCPostMatchTipResponse_FAILURE CMsgServerToGCPostMatchTipResponse_Result = 1
)

// Enum value maps for CMsgServerToGCPostMatchTipResponse_Result.
var (
	CMsgServerToGCPostMatchTipResponse_Result_name = map[int32]string{
		0: "SUCCESS",
		1: "FAILURE",
	}
	CMsgServerToGCPostMatchTipResponse_Result_value = map[string]int32{
		"SUCCESS": 0,
		"FAILURE": 1,
	}
)

func (x CMsgServerToGCPostMatchTipResponse_Result) Enum() *CMsgServerToGCPostMatchTipResponse_Result {
	p := new(CMsgServerToGCPostMatchTipResponse_Result)
	*p = x
	return p
}

func (x CMsgServerToGCPostMatchTipResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgServerToGCPostMatchTipResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_server_proto_enumTypes[12].Descriptor()
}

func (CMsgServerToGCPostMatchTipResponse_Result) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_server_proto_enumTypes[12]
}

func (x CMsgServerToGCPostMatchTipResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgServerToGCPostMatchTipResponse_Result) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgServerToGCPostMatchTipResponse_Result(num)
	return nil
}

// Deprecated: Use CMsgServerToGCPostMatchTipResponse_Result.Descriptor instead.
func (CMsgServerToGCPostMatchTipResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{83, 0}
}

type CMsgPoorNetworkConditions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DetectionType *EPoorNetworkConditionsType         `protobuf:"varint,1,opt,name=detection_type,json=detectionType,enum=dota.EPoorNetworkConditionsType,def=0" json:"detection_type,omitempty"`
	Players       []*CMsgPoorNetworkConditions_Player `protobuf:"bytes,2,rep,name=players" json:"players,omitempty"`
}

// Default values for CMsgPoorNetworkConditions fields.
const (
	Default_CMsgPoorNetworkConditions_DetectionType = EPoorNetworkConditionsType_k_EPoorNetworkConditions_None
)

func (x *CMsgPoorNetworkConditions) Reset() {
	*x = CMsgPoorNetworkConditions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPoorNetworkConditions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPoorNetworkConditions) ProtoMessage() {}

func (x *CMsgPoorNetworkConditions) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPoorNetworkConditions.ProtoReflect.Descriptor instead.
func (*CMsgPoorNetworkConditions) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{0}
}

func (x *CMsgPoorNetworkConditions) GetDetectionType() EPoorNetworkConditionsType {
	if x != nil && x.DetectionType != nil {
		return *x.DetectionType
	}
	return Default_CMsgPoorNetworkConditions_DetectionType
}

func (x *CMsgPoorNetworkConditions) GetPlayers() []*CMsgPoorNetworkConditions_Player {
	if x != nil {
		return x.Players
	}
	return nil
}

type CMsgGameserverCrash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId            *uint64         `protobuf:"varint,1,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	LobbyId            *uint64         `protobuf:"fixed64,2,opt,name=lobby_id,json=lobbyId" json:"lobby_id,omitempty"`
	GameState          *DOTA_GameState `protobuf:"varint,3,opt,name=game_state,json=gameState,enum=dota.DOTA_GameState,def=0" json:"game_state,omitempty"`
	SentinelSaveTime   *uint32         `protobuf:"fixed32,4,opt,name=sentinel_save_time,json=sentinelSaveTime" json:"sentinel_save_time,omitempty"`
	CustomGameId       *uint64         `protobuf:"fixed64,11,opt,name=custom_game_id,json=customGameId" json:"custom_game_id,omitempty"`
	TournamentId       *uint32         `protobuf:"varint,12,opt,name=tournament_id,json=tournamentId" json:"tournament_id,omitempty"`
	ServerSteamId      *uint64         `protobuf:"fixed64,5,opt,name=server_steam_id,json=serverSteamId" json:"server_steam_id,omitempty"`
	ServerPublicIpAddr *uint32         `protobuf:"fixed32,6,opt,name=server_public_ip_addr,json=serverPublicIpAddr" json:"server_public_ip_addr,omitempty"`
	ServerPort         *uint32         `protobuf:"varint,7,opt,name=server_port,json=serverPort" json:"server_port,omitempty"`
	ServerCluster      *uint32         `protobuf:"varint,8,opt,name=server_cluster,json=serverCluster" json:"server_cluster,omitempty"`
	Pid                *uint32         `protobuf:"varint,9,opt,name=pid" json:"pid,omitempty"`
	Engine             *uint32         `protobuf:"varint,10,opt,name=engine" json:"engine,omitempty"`
}

// Default values for CMsgGameserverCrash fields.
const (
	Default_CMsgGameserverCrash_GameState = DOTA_GameState_DOTA_GAMERULES_STATE_INIT
)

func (x *CMsgGameserverCrash) Reset() {
	*x = CMsgGameserverCrash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGameserverCrash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameserverCrash) ProtoMessage() {}

func (x *CMsgGameserverCrash) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameserverCrash.ProtoReflect.Descriptor instead.
func (*CMsgGameserverCrash) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{1}
}

func (x *CMsgGameserverCrash) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgGameserverCrash) GetLobbyId() uint64 {
	if x != nil && x.LobbyId != nil {
		return *x.LobbyId
	}
	return 0
}

func (x *CMsgGameserverCrash) GetGameState() DOTA_GameState {
	if x != nil && x.GameState != nil {
		return *x.GameState
	}
	return Default_CMsgGameserverCrash_GameState
}

func (x *CMsgGameserverCrash) GetSentinelSaveTime() uint32 {
	if x != nil && x.SentinelSaveTime != nil {
		return *x.SentinelSaveTime
	}
	return 0
}

func (x *CMsgGameserverCrash) GetCustomGameId() uint64 {
	if x != nil && x.CustomGameId != nil {
		return *x.CustomGameId
	}
	return 0
}

func (x *CMsgGameserverCrash) GetTournamentId() uint32 {
	if x != nil && x.TournamentId != nil {
		return *x.TournamentId
	}
	return 0
}

func (x *CMsgGameserverCrash) GetServerSteamId() uint64 {
	if x != nil && x.ServerSteamId != nil {
		return *x.ServerSteamId
	}
	return 0
}

func (x *CMsgGameserverCrash) GetServerPublicIpAddr() uint32 {
	if x != nil && x.ServerPublicIpAddr != nil {
		return *x.ServerPublicIpAddr
	}
	return 0
}

func (x *CMsgGameserverCrash) GetServerPort() uint32 {
	if x != nil && x.ServerPort != nil {
		return *x.ServerPort
	}
	return 0
}

func (x *CMsgGameserverCrash) GetServerCluster() uint32 {
	if x != nil && x.ServerCluster != nil {
		return *x.ServerCluster
	}
	return 0
}

func (x *CMsgGameserverCrash) GetPid() uint32 {
	if x != nil && x.Pid != nil {
		return *x.Pid
	}
	return 0
}

func (x *CMsgGameserverCrash) GetEngine() uint32 {
	if x != nil && x.Engine != nil {
		return *x.Engine
	}
	return 0
}

type CMsgConnectedPlayers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectedPlayers      []*CMsgConnectedPlayers_Player   `protobuf:"bytes,1,rep,name=connected_players,json=connectedPlayers" json:"connected_players,omitempty"`
	DisconnectedPlayers   []*CMsgConnectedPlayers_Player   `protobuf:"bytes,7,rep,name=disconnected_players,json=disconnectedPlayers" json:"disconnected_players,omitempty"`
	GameState             *DOTA_GameState                  `protobuf:"varint,2,opt,name=game_state,json=gameState,enum=dota.DOTA_GameState,def=0" json:"game_state,omitempty"`
	FirstBloodHappened    *bool                            `protobuf:"varint,6,opt,name=first_blood_happened,json=firstBloodHappened" json:"first_blood_happened,omitempty"`
	PoorNetworkConditions *CMsgPoorNetworkConditions       `protobuf:"bytes,10,opt,name=poor_network_conditions,json=poorNetworkConditions" json:"poor_network_conditions,omitempty"`
	SendReason            *CMsgConnectedPlayers_SendReason `protobuf:"varint,8,opt,name=send_reason,json=sendReason,enum=dota.CMsgConnectedPlayers_SendReason,def=0" json:"send_reason,omitempty"`
	RadiantKills          *uint32                          `protobuf:"varint,11,opt,name=radiant_kills,json=radiantKills" json:"radiant_kills,omitempty"`
	DireKills             *uint32                          `protobuf:"varint,12,opt,name=dire_kills,json=direKills" json:"dire_kills,omitempty"`
	RadiantLead           *int32                           `protobuf:"varint,14,opt,name=radiant_lead,json=radiantLead" json:"radiant_lead,omitempty"`
	BuildingState         *uint32                          `protobuf:"varint,15,opt,name=building_state,json=buildingState" json:"building_state,omitempty"`
}

// Default values for CMsgConnectedPlayers fields.
const (
	Default_CMsgConnectedPlayers_GameState  = DOTA_GameState_DOTA_GAMERULES_STATE_INIT
	Default_CMsgConnectedPlayers_SendReason = CMsgConnectedPlayers_INVALID
)

func (x *CMsgConnectedPlayers) Reset() {
	*x = CMsgConnectedPlayers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgConnectedPlayers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgConnectedPlayers) ProtoMessage() {}

func (x *CMsgConnectedPlayers) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgConnectedPlayers.ProtoReflect.Descriptor instead.
func (*CMsgConnectedPlayers) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{2}
}

func (x *CMsgConnectedPlayers) GetConnectedPlayers() []*CMsgConnectedPlayers_Player {
	if x != nil {
		return x.ConnectedPlayers
	}
	return nil
}

func (x *CMsgConnectedPlayers) GetDisconnectedPlayers() []*CMsgConnectedPlayers_Player {
	if x != nil {
		return x.DisconnectedPlayers
	}
	return nil
}

func (x *CMsgConnectedPlayers) GetGameState() DOTA_GameState {
	if x != nil && x.GameState != nil {
		return *x.GameState
	}
	return Default_CMsgConnectedPlayers_GameState
}

func (x *CMsgConnectedPlayers) GetFirstBloodHappened() bool {
	if x != nil && x.FirstBloodHappened != nil {
		return *x.FirstBloodHappened
	}
	return false
}

func (x *CMsgConnectedPlayers) GetPoorNetworkConditions() *CMsgPoorNetworkConditions {
	if x != nil {
		return x.PoorNetworkConditions
	}
	return nil
}

func (x *CMsgConnectedPlayers) GetSendReason() CMsgConnectedPlayers_SendReason {
	if x != nil && x.SendReason != nil {
		return *x.SendReason
	}
	return Default_CMsgConnectedPlayers_SendReason
}

func (x *CMsgConnectedPlayers) GetRadiantKills() uint32 {
	if x != nil && x.RadiantKills != nil {
		return *x.RadiantKills
	}
	return 0
}

func (x *CMsgConnectedPlayers) GetDireKills() uint32 {
	if x != nil && x.DireKills != nil {
		return *x.DireKills
	}
	return 0
}

func (x *CMsgConnectedPlayers) GetRadiantLead() int32 {
	if x != nil && x.RadiantLead != nil {
		return *x.RadiantLead
	}
	return 0
}

func (x *CMsgConnectedPlayers) GetBuildingState() uint32 {
	if x != nil && x.BuildingState != nil {
		return *x.BuildingState
	}
	return 0
}

type CMsgGameServerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerPublicIpAddr               *uint32                         `protobuf:"fixed32,1,opt,name=server_public_ip_addr,json=serverPublicIpAddr" json:"server_public_ip_addr,omitempty"`
	ServerPrivateIpAddr              *uint32                         `protobuf:"fixed32,2,opt,name=server_private_ip_addr,json=serverPrivateIpAddr" json:"server_private_ip_addr,omitempty"`
	ServerPort                       *uint32                         `protobuf:"varint,3,opt,name=server_port,json=serverPort" json:"server_port,omitempty"`
	ServerTvPort                     *uint32                         `protobuf:"varint,4,opt,name=server_tv_port,json=serverTvPort" json:"server_tv_port,omitempty"`
	AssignedServerTvPort             *uint32                         `protobuf:"varint,22,opt,name=assigned_server_tv_port,json=assignedServerTvPort" json:"assigned_server_tv_port,omitempty"`
	LegacyServerSteamdatagramAddress []byte                          `protobuf:"bytes,27,opt,name=legacy_server_steamdatagram_address,json=legacyServerSteamdatagramAddress" json:"legacy_server_steamdatagram_address,omitempty"`
	ServerKey                        *string                         `protobuf:"bytes,5,opt,name=server_key,json=serverKey" json:"server_key,omitempty"`
	ServerHibernation                *bool                           `protobuf:"varint,6,opt,name=server_hibernation,json=serverHibernation" json:"server_hibernation,omitempty"`
	ServerType                       *CMsgGameServerInfo_ServerType  `protobuf:"varint,7,opt,name=server_type,json=serverType,enum=dota.CMsgGameServerInfo_ServerType,def=0" json:"server_type,omitempty"`
	ServerRegion                     *uint32                         `protobuf:"varint,8,opt,name=server_region,json=serverRegion" json:"server_region,omitempty"`
	ServerLoadavg                    *float32                        `protobuf:"fixed32,9,opt,name=server_loadavg,json=serverLoadavg" json:"server_loadavg,omitempty"`
	ServerTvBroadcastTime            *float32                        `protobuf:"fixed32,10,opt,name=server_tv_broadcast_time,json=serverTvBroadcastTime" json:"server_tv_broadcast_time,omitempty"`
	ServerGameTime                   *float32                        `protobuf:"fixed32,11,opt,name=server_game_time,json=serverGameTime" json:"server_game_time,omitempty"`
	ServerRelayConnectedSteamId      *uint64                         `protobuf:"fixed64,12,opt,name=server_relay_connected_steam_id,json=serverRelayConnectedSteamId" json:"server_relay_connected_steam_id,omitempty"`
	RelaySlotsMax                    *uint32                         `protobuf:"varint,13,opt,name=relay_slots_max,json=relaySlotsMax" json:"relay_slots_max,omitempty"`
	RelaysConnected                  *int32                          `protobuf:"varint,14,opt,name=relays_connected,json=relaysConnected" json:"relays_connected,omitempty"`
	RelayClientsConnected            *int32                          `protobuf:"varint,15,opt,name=relay_clients_connected,json=relayClientsConnected" json:"relay_clients_connected,omitempty"`
	RelayedGameServerSteamId         *uint64                         `protobuf:"fixed64,16,opt,name=relayed_game_server_steam_id,json=relayedGameServerSteamId" json:"relayed_game_server_steam_id,omitempty"`
	ParentRelayCount                 *uint32                         `protobuf:"varint,17,opt,name=parent_relay_count,json=parentRelayCount" json:"parent_relay_count,omitempty"`
	TvSecretCode                     *uint64                         `protobuf:"fixed64,18,opt,name=tv_secret_code,json=tvSecretCode" json:"tv_secret_code,omitempty"`
	ServerVersion                    *uint32                         `protobuf:"varint,19,opt,name=server_version,json=serverVersion" json:"server_version,omitempty"`
	ServerCluster                    *uint32                         `protobuf:"varint,20,opt,name=server_cluster,json=serverCluster" json:"server_cluster,omitempty"`
	AllowCustomGames                 *CMsgGameServerInfo_CustomGames `protobuf:"varint,23,opt,name=allow_custom_games,json=allowCustomGames,enum=dota.CMsgGameServerInfo_CustomGames,def=0" json:"allow_custom_games,omitempty"`
	BuildVersion                     *uint32                         `protobuf:"varint,24,opt,name=build_version,json=buildVersion" json:"build_version,omitempty"`
	TfServerCount                    *uint32                         `protobuf:"varint,25,opt,name=tf_server_count,json=tfServerCount" json:"tf_server_count,omitempty"`
	SrcdsInstance                    *uint32                         `protobuf:"varint,26,opt,name=srcds_instance,json=srcdsInstance" json:"srcds_instance,omitempty"`
	DevForceServerType               *bool                           `protobuf:"varint,28,opt,name=dev_force_server_type,json=devForceServerType" json:"dev_force_server_type,omitempty"`
	IsRecordingMatchTrainingData     *bool                           `protobuf:"varint,29,opt,name=is_recording_match_training_data,json=isRecordingMatchTrainingData" json:"is_recording_match_training_data,omitempty"`
}

// Default values for CMsgGameServerInfo fields.
const (
	Default_CMsgGameServerInfo_ServerType       = CMsgGameServerInfo_UNSPECIFIED
	Default_CMsgGameServerInfo_AllowCustomGames = CMsgGameServerInfo_BOTH
)

func (x *CMsgGameServerInfo) Reset() {
	*x = CMsgGameServerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGameServerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameServerInfo) ProtoMessage() {}

func (x *CMsgGameServerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameServerInfo.ProtoReflect.Descriptor instead.
func (*CMsgGameServerInfo) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{3}
}

func (x *CMsgGameServerInfo) GetServerPublicIpAddr() uint32 {
	if x != nil && x.ServerPublicIpAddr != nil {
		return *x.ServerPublicIpAddr
	}
	return 0
}

func (x *CMsgGameServerInfo) GetServerPrivateIpAddr() uint32 {
	if x != nil && x.ServerPrivateIpAddr != nil {
		return *x.ServerPrivateIpAddr
	}
	return 0
}

func (x *CMsgGameServerInfo) GetServerPort() uint32 {
	if x != nil && x.ServerPort != nil {
		return *x.ServerPort
	}
	return 0
}

func (x *CMsgGameServerInfo) GetServerTvPort() uint32 {
	if x != nil && x.ServerTvPort != nil {
		return *x.ServerTvPort
	}
	return 0
}

func (x *CMsgGameServerInfo) GetAssignedServerTvPort() uint32 {
	if x != nil && x.AssignedServerTvPort != nil {
		return *x.AssignedServerTvPort
	}
	return 0
}

func (x *CMsgGameServerInfo) GetLegacyServerSteamdatagramAddress() []byte {
	if x != nil {
		return x.LegacyServerSteamdatagramAddress
	}
	return nil
}

func (x *CMsgGameServerInfo) GetServerKey() string {
	if x != nil && x.ServerKey != nil {
		return *x.ServerKey
	}
	return ""
}

func (x *CMsgGameServerInfo) GetServerHibernation() bool {
	if x != nil && x.ServerHibernation != nil {
		return *x.ServerHibernation
	}
	return false
}

func (x *CMsgGameServerInfo) GetServerType() CMsgGameServerInfo_ServerType {
	if x != nil && x.ServerType != nil {
		return *x.ServerType
	}
	return Default_CMsgGameServerInfo_ServerType
}

func (x *CMsgGameServerInfo) GetServerRegion() uint32 {
	if x != nil && x.ServerRegion != nil {
		return *x.ServerRegion
	}
	return 0
}

func (x *CMsgGameServerInfo) GetServerLoadavg() float32 {
	if x != nil && x.ServerLoadavg != nil {
		return *x.ServerLoadavg
	}
	return 0
}

func (x *CMsgGameServerInfo) GetServerTvBroadcastTime() float32 {
	if x != nil && x.ServerTvBroadcastTime != nil {
		return *x.ServerTvBroadcastTime
	}
	return 0
}

func (x *CMsgGameServerInfo) GetServerGameTime() float32 {
	if x != nil && x.ServerGameTime != nil {
		return *x.ServerGameTime
	}
	return 0
}

func (x *CMsgGameServerInfo) GetServerRelayConnectedSteamId() uint64 {
	if x != nil && x.ServerRelayConnectedSteamId != nil {
		return *x.ServerRelayConnectedSteamId
	}
	return 0
}

func (x *CMsgGameServerInfo) GetRelaySlotsMax() uint32 {
	if x != nil && x.RelaySlotsMax != nil {
		return *x.RelaySlotsMax
	}
	return 0
}

func (x *CMsgGameServerInfo) GetRelaysConnected() int32 {
	if x != nil && x.RelaysConnected != nil {
		return *x.RelaysConnected
	}
	return 0
}

func (x *CMsgGameServerInfo) GetRelayClientsConnected() int32 {
	if x != nil && x.RelayClientsConnected != nil {
		return *x.RelayClientsConnected
	}
	return 0
}

func (x *CMsgGameServerInfo) GetRelayedGameServerSteamId() uint64 {
	if x != nil && x.RelayedGameServerSteamId != nil {
		return *x.RelayedGameServerSteamId
	}
	return 0
}

func (x *CMsgGameServerInfo) GetParentRelayCount() uint32 {
	if x != nil && x.ParentRelayCount != nil {
		return *x.ParentRelayCount
	}
	return 0
}

func (x *CMsgGameServerInfo) GetTvSecretCode() uint64 {
	if x != nil && x.TvSecretCode != nil {
		return *x.TvSecretCode
	}
	return 0
}

func (x *CMsgGameServerInfo) GetServerVersion() uint32 {
	if x != nil && x.ServerVersion != nil {
		return *x.ServerVersion
	}
	return 0
}

func (x *CMsgGameServerInfo) GetServerCluster() uint32 {
	if x != nil && x.ServerCluster != nil {
		return *x.ServerCluster
	}
	return 0
}

func (x *CMsgGameServerInfo) GetAllowCustomGames() CMsgGameServerInfo_CustomGames {
	if x != nil && x.AllowCustomGames != nil {
		return *x.AllowCustomGames
	}
	return Default_CMsgGameServerInfo_AllowCustomGames
}

func (x *CMsgGameServerInfo) GetBuildVersion() uint32 {
	if x != nil && x.BuildVersion != nil {
		return *x.BuildVersion
	}
	return 0
}

func (x *CMsgGameServerInfo) GetTfServerCount() uint32 {
	if x != nil && x.TfServerCount != nil {
		return *x.TfServerCount
	}
	return 0
}

func (x *CMsgGameServerInfo) GetSrcdsInstance() uint32 {
	if x != nil && x.SrcdsInstance != nil {
		return *x.SrcdsInstance
	}
	return 0
}

func (x *CMsgGameServerInfo) GetDevForceServerType() bool {
	if x != nil && x.DevForceServerType != nil {
		return *x.DevForceServerType
	}
	return false
}

func (x *CMsgGameServerInfo) GetIsRecordingMatchTrainingData() bool {
	if x != nil && x.IsRecordingMatchTrainingData != nil {
		return *x.IsRecordingMatchTrainingData
	}
	return false
}

type CMsgLeaverDetected struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SteamId               *uint64                      `protobuf:"fixed64,1,opt,name=steam_id,json=steamId" json:"steam_id,omitempty"`
	LeaverStatus          *DOTALeaverStatusT           `protobuf:"varint,2,opt,name=leaver_status,json=leaverStatus,enum=dota.DOTALeaverStatusT,def=0" json:"leaver_status,omitempty"`
	LeaverState           *CMsgLeaverState             `protobuf:"bytes,4,opt,name=leaver_state,json=leaverState" json:"leaver_state,omitempty"`
	ServerCluster         *uint32                      `protobuf:"varint,5,opt,name=server_cluster,json=serverCluster" json:"server_cluster,omitempty"`
	DisconnectReason      *ENetworkDisconnectionReason `protobuf:"varint,6,opt,name=disconnect_reason,json=disconnectReason,enum=dota.ENetworkDisconnectionReason,def=0" json:"disconnect_reason,omitempty"`
	PoorNetworkConditions *CMsgPoorNetworkConditions   `protobuf:"bytes,7,opt,name=poor_network_conditions,json=poorNetworkConditions" json:"poor_network_conditions,omitempty"`
}

// Default values for CMsgLeaverDetected fields.
const (
	Default_CMsgLeaverDetected_LeaverStatus     = DOTALeaverStatusT_DOTA_LEAVER_NONE
	Default_CMsgLeaverDetected_DisconnectReason = ENetworkDisconnectionReason_NETWORK_DISCONNECT_INVALID
)

func (x *CMsgLeaverDetected) Reset() {
	*x = CMsgLeaverDetected{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgLeaverDetected) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgLeaverDetected) ProtoMessage() {}

func (x *CMsgLeaverDetected) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgLeaverDetected.ProtoReflect.Descriptor instead.
func (*CMsgLeaverDetected) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{4}
}

func (x *CMsgLeaverDetected) GetSteamId() uint64 {
	if x != nil && x.SteamId != nil {
		return *x.SteamId
	}
	return 0
}

func (x *CMsgLeaverDetected) GetLeaverStatus() DOTALeaverStatusT {
	if x != nil && x.LeaverStatus != nil {
		return *x.LeaverStatus
	}
	return Default_CMsgLeaverDetected_LeaverStatus
}

func (x *CMsgLeaverDetected) GetLeaverState() *CMsgLeaverState {
	if x != nil {
		return x.LeaverState
	}
	return nil
}

func (x *CMsgLeaverDetected) GetServerCluster() uint32 {
	if x != nil && x.ServerCluster != nil {
		return *x.ServerCluster
	}
	return 0
}

func (x *CMsgLeaverDetected) GetDisconnectReason() ENetworkDisconnectionReason {
	if x != nil && x.DisconnectReason != nil {
		return *x.DisconnectReason
	}
	return Default_CMsgLeaverDetected_DisconnectReason
}

func (x *CMsgLeaverDetected) GetPoorNetworkConditions() *CMsgPoorNetworkConditions {
	if x != nil {
		return x.PoorNetworkConditions
	}
	return nil
}

type CMsgLeaverDetectedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *uint32 `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
}

func (x *CMsgLeaverDetectedResponse) Reset() {
	*x = CMsgLeaverDetectedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgLeaverDetectedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgLeaverDetectedResponse) ProtoMessage() {}

func (x *CMsgLeaverDetectedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgLeaverDetectedResponse.ProtoReflect.Descriptor instead.
func (*CMsgLeaverDetectedResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{5}
}

func (x *CMsgLeaverDetectedResponse) GetResult() uint32 {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return 0
}

type CMsgDOTAFantasyFinalPlayerStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stats []*CMsgDOTAFantasyPlayerStats `protobuf:"bytes,2,rep,name=stats" json:"stats,omitempty"`
}

func (x *CMsgDOTAFantasyFinalPlayerStats) Reset() {
	*x = CMsgDOTAFantasyFinalPlayerStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAFantasyFinalPlayerStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAFantasyFinalPlayerStats) ProtoMessage() {}

func (x *CMsgDOTAFantasyFinalPlayerStats) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAFantasyFinalPlayerStats.ProtoReflect.Descriptor instead.
func (*CMsgDOTAFantasyFinalPlayerStats) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{6}
}

func (x *CMsgDOTAFantasyFinalPlayerStats) GetStats() []*CMsgDOTAFantasyPlayerStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

type CMsgDOTAFantasyLivePlayerStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stats []*CMsgDOTAFantasyPlayerStats `protobuf:"bytes,2,rep,name=stats" json:"stats,omitempty"`
}

func (x *CMsgDOTAFantasyLivePlayerStats) Reset() {
	*x = CMsgDOTAFantasyLivePlayerStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAFantasyLivePlayerStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAFantasyLivePlayerStats) ProtoMessage() {}

func (x *CMsgDOTAFantasyLivePlayerStats) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAFantasyLivePlayerStats.ProtoReflect.Descriptor instead.
func (*CMsgDOTAFantasyLivePlayerStats) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{7}
}

func (x *CMsgDOTAFantasyLivePlayerStats) GetStats() []*CMsgDOTAFantasyPlayerStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

type CMsgDOTAFantasyMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId    *uint64 `protobuf:"varint,1,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	LeagueId   *uint32 `protobuf:"varint,2,opt,name=league_id,json=leagueId" json:"league_id,omitempty"`
	SeriesId   *uint32 `protobuf:"varint,3,opt,name=series_id,json=seriesId" json:"series_id,omitempty"`
	StartTime  *uint32 `protobuf:"varint,4,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	SeriesType *uint32 `protobuf:"varint,5,opt,name=series_type,json=seriesType" json:"series_type,omitempty"`
	Team_1     *uint32 `protobuf:"varint,6,opt,name=team_1,json=team1" json:"team_1,omitempty"`
	Team_2     *uint32 `protobuf:"varint,7,opt,name=team_2,json=team2" json:"team_2,omitempty"`
}

func (x *CMsgDOTAFantasyMatch) Reset() {
	*x = CMsgDOTAFantasyMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAFantasyMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAFantasyMatch) ProtoMessage() {}

func (x *CMsgDOTAFantasyMatch) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAFantasyMatch.ProtoReflect.Descriptor instead.
func (*CMsgDOTAFantasyMatch) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{8}
}

func (x *CMsgDOTAFantasyMatch) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgDOTAFantasyMatch) GetLeagueId() uint32 {
	if x != nil && x.LeagueId != nil {
		return *x.LeagueId
	}
	return 0
}

func (x *CMsgDOTAFantasyMatch) GetSeriesId() uint32 {
	if x != nil && x.SeriesId != nil {
		return *x.SeriesId
	}
	return 0
}

func (x *CMsgDOTAFantasyMatch) GetStartTime() uint32 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *CMsgDOTAFantasyMatch) GetSeriesType() uint32 {
	if x != nil && x.SeriesType != nil {
		return *x.SeriesType
	}
	return 0
}

func (x *CMsgDOTAFantasyMatch) GetTeam_1() uint32 {
	if x != nil && x.Team_1 != nil {
		return *x.Team_1
	}
	return 0
}

func (x *CMsgDOTAFantasyMatch) GetTeam_2() uint32 {
	if x != nil && x.Team_2 != nil {
		return *x.Team_2
	}
	return 0
}

type CMsgDOTAUpdateClippy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GoodTeamHeroIds []uint32 `protobuf:"varint,1,rep,name=good_team_hero_ids,json=goodTeamHeroIds" json:"good_team_hero_ids,omitempty"`
	BadTeamHeroIds  []uint32 `protobuf:"varint,2,rep,name=bad_team_hero_ids,json=badTeamHeroIds" json:"bad_team_hero_ids,omitempty"`
}

func (x *CMsgDOTAUpdateClippy) Reset() {
	*x = CMsgDOTAUpdateClippy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAUpdateClippy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAUpdateClippy) ProtoMessage() {}

func (x *CMsgDOTAUpdateClippy) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAUpdateClippy.ProtoReflect.Descriptor instead.
func (*CMsgDOTAUpdateClippy) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{9}
}

func (x *CMsgDOTAUpdateClippy) GetGoodTeamHeroIds() []uint32 {
	if x != nil {
		return x.GoodTeamHeroIds
	}
	return nil
}

func (x *CMsgDOTAUpdateClippy) GetBadTeamHeroIds() []uint32 {
	if x != nil {
		return x.BadTeamHeroIds
	}
	return nil
}

type CMsgServerToGCRealtimeStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Delayed *CMsgDOTARealtimeGameStatsTerse `protobuf:"bytes,1,opt,name=delayed" json:"delayed,omitempty"`
}

func (x *CMsgServerToGCRealtimeStats) Reset() {
	*x = CMsgServerToGCRealtimeStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerToGCRealtimeStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCRealtimeStats) ProtoMessage() {}

func (x *CMsgServerToGCRealtimeStats) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCRealtimeStats.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCRealtimeStats) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{10}
}

func (x *CMsgServerToGCRealtimeStats) GetDelayed() *CMsgDOTARealtimeGameStatsTerse {
	if x != nil {
		return x.Delayed
	}
	return nil
}

type CMsgGCToServerRealtimeStatsStartStop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Delayed *bool `protobuf:"varint,1,opt,name=delayed" json:"delayed,omitempty"`
}

func (x *CMsgGCToServerRealtimeStatsStartStop) Reset() {
	*x = CMsgGCToServerRealtimeStatsStartStop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCToServerRealtimeStatsStartStop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToServerRealtimeStatsStartStop) ProtoMessage() {}

func (x *CMsgGCToServerRealtimeStatsStartStop) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToServerRealtimeStatsStartStop.ProtoReflect.Descriptor instead.
func (*CMsgGCToServerRealtimeStatsStartStop) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{11}
}

func (x *CMsgGCToServerRealtimeStatsStartStop) GetDelayed() bool {
	if x != nil && x.Delayed != nil {
		return *x.Delayed
	}
	return false
}

type CMsgGCToServerUpdateSteamBroadcasting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Active *bool `protobuf:"varint,1,opt,name=active" json:"active,omitempty"`
}

func (x *CMsgGCToServerUpdateSteamBroadcasting) Reset() {
	*x = CMsgGCToServerUpdateSteamBroadcasting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCToServerUpdateSteamBroadcasting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToServerUpdateSteamBroadcasting) ProtoMessage() {}

func (x *CMsgGCToServerUpdateSteamBroadcasting) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToServerUpdateSteamBroadcasting.ProtoReflect.Descriptor instead.
func (*CMsgGCToServerUpdateSteamBroadcasting) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{12}
}

func (x *CMsgGCToServerUpdateSteamBroadcasting) GetActive() bool {
	if x != nil && x.Active != nil {
		return *x.Active
	}
	return false
}

type CMsgSignOutGameplayStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Teams []*CMsgSignOutGameplayStats_CTeam `protobuf:"bytes,1,rep,name=teams" json:"teams,omitempty"`
}

func (x *CMsgSignOutGameplayStats) Reset() {
	*x = CMsgSignOutGameplayStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSignOutGameplayStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSignOutGameplayStats) ProtoMessage() {}

func (x *CMsgSignOutGameplayStats) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSignOutGameplayStats.ProtoReflect.Descriptor instead.
func (*CMsgSignOutGameplayStats) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{13}
}

func (x *CMsgSignOutGameplayStats) GetTeams() []*CMsgSignOutGameplayStats_CTeam {
	if x != nil {
		return x.Teams
	}
	return nil
}

type CMsgGameMatchSignOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId                       *uint64                                           `protobuf:"varint,1,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	Duration                      *uint32                                           `protobuf:"varint,2,opt,name=duration" json:"duration,omitempty"`
	GoodGuysWin                   *bool                                             `protobuf:"varint,3,opt,name=good_guys_win,json=goodGuysWin" json:"good_guys_win,omitempty"`
	Date                          *uint32                                           `protobuf:"fixed32,4,opt,name=date" json:"date,omitempty"`
	NumPlayers                    []uint32                                          `protobuf:"varint,5,rep,name=num_players,json=numPlayers" json:"num_players,omitempty"`
	Teams                         []*CMsgGameMatchSignOut_CTeam                     `protobuf:"bytes,6,rep,name=teams" json:"teams,omitempty"`
	TowerStatus                   []uint32                                          `protobuf:"varint,8,rep,name=tower_status,json=towerStatus" json:"tower_status,omitempty"`
	BarracksStatus                []uint32                                          `protobuf:"varint,9,rep,name=barracks_status,json=barracksStatus" json:"barracks_status,omitempty"`
	Cluster                       *uint32                                           `protobuf:"varint,10,opt,name=cluster" json:"cluster,omitempty"`
	ServerAddr                    *string                                           `protobuf:"bytes,11,opt,name=server_addr,json=serverAddr" json:"server_addr,omitempty"`
	FirstBloodTime                *uint32                                           `protobuf:"varint,12,opt,name=first_blood_time,json=firstBloodTime" json:"first_blood_time,omitempty"`
	EventScore                    *uint32                                           `protobuf:"varint,14,opt,name=event_score,json=eventScore" json:"event_score,omitempty"`
	PicksBans                     []*CMatchHeroSelectEvent                          `protobuf:"bytes,15,rep,name=picks_bans,json=picksBans" json:"picks_bans,omitempty"`
	FantasyStats                  []*CMsgDOTAFantasyPlayerStats                     `protobuf:"bytes,41,rep,name=fantasy_stats,json=fantasyStats" json:"fantasy_stats,omitempty"`
	PlayerStrangeCountAdjustments []*CMsgEconPlayerStrangeCountAdjustment           `protobuf:"bytes,17,rep,name=player_strange_count_adjustments,json=playerStrangeCountAdjustments" json:"player_strange_count_adjustments,omitempty"`
	AutomaticSurrender            *bool                                             `protobuf:"varint,18,opt,name=automatic_surrender,json=automaticSurrender" json:"automatic_surrender,omitempty"`
	ServerVersion                 *uint32                                           `protobuf:"varint,19,opt,name=server_version,json=serverVersion" json:"server_version,omitempty"`
	PoorNetworkConditions         *CMsgPoorNetworkConditions                        `protobuf:"bytes,35,opt,name=poor_network_conditions,json=poorNetworkConditions" json:"poor_network_conditions,omitempty"`
	AdditionalMsgs                []*CMsgGameMatchSignOut_CAdditionalSignoutMsg     `protobuf:"bytes,20,rep,name=additional_msgs,json=additionalMsgs" json:"additional_msgs,omitempty"`
	SocialFeedEvents              []*CMsgGameMatchSignOut_CSocialFeedMatchEvent     `protobuf:"bytes,36,rep,name=social_feed_events,json=socialFeedEvents" json:"social_feed_events,omitempty"`
	AverageNetworthDelta          *int32                                            `protobuf:"zigzag32,22,opt,name=average_networth_delta,json=averageNetworthDelta" json:"average_networth_delta,omitempty"`
	CustomGameData                *CMsgGameMatchSignOut_CCustomGameData             `protobuf:"bytes,37,opt,name=custom_game_data,json=customGameData" json:"custom_game_data,omitempty"`
	MatchFlags                    *uint32                                           `protobuf:"varint,38,opt,name=match_flags,json=matchFlags" json:"match_flags,omitempty"`
	TeamScores                    []uint32                                          `protobuf:"varint,39,rep,name=team_scores,json=teamScores" json:"team_scores,omitempty"`
	PreGameDuration               *uint32                                           `protobuf:"varint,40,opt,name=pre_game_duration,json=preGameDuration" json:"pre_game_duration,omitempty"`
	EventGameLeaderboardEntries   []*CMsgGameMatchSignOut_EventGameLeaderboardEntry `protobuf:"bytes,42,rep,name=event_game_leaderboard_entries,json=eventGameLeaderboardEntries" json:"event_game_leaderboard_entries,omitempty"`
	WardPlacements                []*CMsgGameMatchSignOut_WardPlacement             `protobuf:"bytes,43,rep,name=ward_placements,json=wardPlacements" json:"ward_placements,omitempty"`
	GameplayStats                 *CMsgSignOutGameplayStats                         `protobuf:"bytes,44,opt,name=gameplay_stats,json=gameplayStats" json:"gameplay_stats,omitempty"`
	ExtraMessages                 []*CExtraMsgBlock                                 `protobuf:"bytes,54,rep,name=extra_messages,json=extraMessages" json:"extra_messages,omitempty"`
	TrainingDataRecorded          *bool                                             `protobuf:"varint,55,opt,name=training_data_recorded,json=trainingDataRecorded" json:"training_data_recorded,omitempty"`
}

func (x *CMsgGameMatchSignOut) Reset() {
	*x = CMsgGameMatchSignOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGameMatchSignOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameMatchSignOut) ProtoMessage() {}

func (x *CMsgGameMatchSignOut) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameMatchSignOut.ProtoReflect.Descriptor instead.
func (*CMsgGameMatchSignOut) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{14}
}

func (x *CMsgGameMatchSignOut) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgGameMatchSignOut) GetDuration() uint32 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

func (x *CMsgGameMatchSignOut) GetGoodGuysWin() bool {
	if x != nil && x.GoodGuysWin != nil {
		return *x.GoodGuysWin
	}
	return false
}

func (x *CMsgGameMatchSignOut) GetDate() uint32 {
	if x != nil && x.Date != nil {
		return *x.Date
	}
	return 0
}

func (x *CMsgGameMatchSignOut) GetNumPlayers() []uint32 {
	if x != nil {
		return x.NumPlayers
	}
	return nil
}

func (x *CMsgGameMatchSignOut) GetTeams() []*CMsgGameMatchSignOut_CTeam {
	if x != nil {
		return x.Teams
	}
	return nil
}

func (x *CMsgGameMatchSignOut) GetTowerStatus() []uint32 {
	if x != nil {
		return x.TowerStatus
	}
	return nil
}

func (x *CMsgGameMatchSignOut) GetBarracksStatus() []uint32 {
	if x != nil {
		return x.BarracksStatus
	}
	return nil
}

func (x *CMsgGameMatchSignOut) GetCluster() uint32 {
	if x != nil && x.Cluster != nil {
		return *x.Cluster
	}
	return 0
}

func (x *CMsgGameMatchSignOut) GetServerAddr() string {
	if x != nil && x.ServerAddr != nil {
		return *x.ServerAddr
	}
	return ""
}

func (x *CMsgGameMatchSignOut) GetFirstBloodTime() uint32 {
	if x != nil && x.FirstBloodTime != nil {
		return *x.FirstBloodTime
	}
	return 0
}

func (x *CMsgGameMatchSignOut) GetEventScore() uint32 {
	if x != nil && x.EventScore != nil {
		return *x.EventScore
	}
	return 0
}

func (x *CMsgGameMatchSignOut) GetPicksBans() []*CMatchHeroSelectEvent {
	if x != nil {
		return x.PicksBans
	}
	return nil
}

func (x *CMsgGameMatchSignOut) GetFantasyStats() []*CMsgDOTAFantasyPlayerStats {
	if x != nil {
		return x.FantasyStats
	}
	return nil
}

func (x *CMsgGameMatchSignOut) GetPlayerStrangeCountAdjustments() []*CMsgEconPlayerStrangeCountAdjustment {
	if x != nil {
		return x.PlayerStrangeCountAdjustments
	}
	return nil
}

func (x *CMsgGameMatchSignOut) GetAutomaticSurrender() bool {
	if x != nil && x.AutomaticSurrender != nil {
		return *x.AutomaticSurrender
	}
	return false
}

func (x *CMsgGameMatchSignOut) GetServerVersion() uint32 {
	if x != nil && x.ServerVersion != nil {
		return *x.ServerVersion
	}
	return 0
}

func (x *CMsgGameMatchSignOut) GetPoorNetworkConditions() *CMsgPoorNetworkConditions {
	if x != nil {
		return x.PoorNetworkConditions
	}
	return nil
}

func (x *CMsgGameMatchSignOut) GetAdditionalMsgs() []*CMsgGameMatchSignOut_CAdditionalSignoutMsg {
	if x != nil {
		return x.AdditionalMsgs
	}
	return nil
}

func (x *CMsgGameMatchSignOut) GetSocialFeedEvents() []*CMsgGameMatchSignOut_CSocialFeedMatchEvent {
	if x != nil {
		return x.SocialFeedEvents
	}
	return nil
}

func (x *CMsgGameMatchSignOut) GetAverageNetworthDelta() int32 {
	if x != nil && x.AverageNetworthDelta != nil {
		return *x.AverageNetworthDelta
	}
	return 0
}

func (x *CMsgGameMatchSignOut) GetCustomGameData() *CMsgGameMatchSignOut_CCustomGameData {
	if x != nil {
		return x.CustomGameData
	}
	return nil
}

func (x *CMsgGameMatchSignOut) GetMatchFlags() uint32 {
	if x != nil && x.MatchFlags != nil {
		return *x.MatchFlags
	}
	return 0
}

func (x *CMsgGameMatchSignOut) GetTeamScores() []uint32 {
	if x != nil {
		return x.TeamScores
	}
	return nil
}

func (x *CMsgGameMatchSignOut) GetPreGameDuration() uint32 {
	if x != nil && x.PreGameDuration != nil {
		return *x.PreGameDuration
	}
	return 0
}

func (x *CMsgGameMatchSignOut) GetEventGameLeaderboardEntries() []*CMsgGameMatchSignOut_EventGameLeaderboardEntry {
	if x != nil {
		return x.EventGameLeaderboardEntries
	}
	return nil
}

func (x *CMsgGameMatchSignOut) GetWardPlacements() []*CMsgGameMatchSignOut_WardPlacement {
	if x != nil {
		return x.WardPlacements
	}
	return nil
}

func (x *CMsgGameMatchSignOut) GetGameplayStats() *CMsgSignOutGameplayStats {
	if x != nil {
		return x.GameplayStats
	}
	return nil
}

func (x *CMsgGameMatchSignOut) GetExtraMessages() []*CExtraMsgBlock {
	if x != nil {
		return x.ExtraMessages
	}
	return nil
}

func (x *CMsgGameMatchSignOut) GetTrainingDataRecorded() bool {
	if x != nil && x.TrainingDataRecorded != nil {
		return *x.TrainingDataRecorded
	}
	return false
}

type CMsgSignOutDraftInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RadiantCaptainAccountId *uint32                  `protobuf:"varint,1,opt,name=radiant_captain_account_id,json=radiantCaptainAccountId" json:"radiant_captain_account_id,omitempty"`
	DireCaptainAccountId    *uint32                  `protobuf:"varint,2,opt,name=dire_captain_account_id,json=direCaptainAccountId" json:"dire_captain_account_id,omitempty"`
	PicksBans               []*CMatchHeroSelectEvent `protobuf:"bytes,3,rep,name=picks_bans,json=picksBans" json:"picks_bans,omitempty"`
}

func (x *CMsgSignOutDraftInfo) Reset() {
	*x = CMsgSignOutDraftInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSignOutDraftInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSignOutDraftInfo) ProtoMessage() {}

func (x *CMsgSignOutDraftInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSignOutDraftInfo.ProtoReflect.Descriptor instead.
func (*CMsgSignOutDraftInfo) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{15}
}

func (x *CMsgSignOutDraftInfo) GetRadiantCaptainAccountId() uint32 {
	if x != nil && x.RadiantCaptainAccountId != nil {
		return *x.RadiantCaptainAccountId
	}
	return 0
}

func (x *CMsgSignOutDraftInfo) GetDireCaptainAccountId() uint32 {
	if x != nil && x.DireCaptainAccountId != nil {
		return *x.DireCaptainAccountId
	}
	return 0
}

func (x *CMsgSignOutDraftInfo) GetPicksBans() []*CMatchHeroSelectEvent {
	if x != nil {
		return x.PicksBans
	}
	return nil
}

type CMsgSignOutBotInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllowCheats          *bool              `protobuf:"varint,1,opt,name=allow_cheats,json=allowCheats" json:"allow_cheats,omitempty"`
	BotDifficultyRadiant *DOTABotDifficulty `protobuf:"varint,2,opt,name=bot_difficulty_radiant,json=botDifficultyRadiant,enum=dota.DOTABotDifficulty,def=0" json:"bot_difficulty_radiant,omitempty"`
	CreatedLobby         *bool              `protobuf:"varint,3,opt,name=created_lobby,json=createdLobby" json:"created_lobby,omitempty"`
	BotDifficultyDire    *DOTABotDifficulty `protobuf:"varint,5,opt,name=bot_difficulty_dire,json=botDifficultyDire,enum=dota.DOTABotDifficulty,def=0" json:"bot_difficulty_dire,omitempty"`
}

// Default values for CMsgSignOutBotInfo fields.
const (
	Default_CMsgSignOutBotInfo_BotDifficultyRadiant = DOTABotDifficulty_BOT_DIFFICULTY_PASSIVE
	Default_CMsgSignOutBotInfo_BotDifficultyDire    = DOTABotDifficulty_BOT_DIFFICULTY_PASSIVE
)

func (x *CMsgSignOutBotInfo) Reset() {
	*x = CMsgSignOutBotInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSignOutBotInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSignOutBotInfo) ProtoMessage() {}

func (x *CMsgSignOutBotInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSignOutBotInfo.ProtoReflect.Descriptor instead.
func (*CMsgSignOutBotInfo) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{16}
}

func (x *CMsgSignOutBotInfo) GetAllowCheats() bool {
	if x != nil && x.AllowCheats != nil {
		return *x.AllowCheats
	}
	return false
}

func (x *CMsgSignOutBotInfo) GetBotDifficultyRadiant() DOTABotDifficulty {
	if x != nil && x.BotDifficultyRadiant != nil {
		return *x.BotDifficultyRadiant
	}
	return Default_CMsgSignOutBotInfo_BotDifficultyRadiant
}

func (x *CMsgSignOutBotInfo) GetCreatedLobby() bool {
	if x != nil && x.CreatedLobby != nil {
		return *x.CreatedLobby
	}
	return false
}

func (x *CMsgSignOutBotInfo) GetBotDifficultyDire() DOTABotDifficulty {
	if x != nil && x.BotDifficultyDire != nil {
		return *x.BotDifficultyDire
	}
	return Default_CMsgSignOutBotInfo_BotDifficultyDire
}

type CMsgSignOutTextMuteInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TextMuteMessages []*CMsgSignOutTextMuteInfo_TextMuteMessage `protobuf:"bytes,1,rep,name=text_mute_messages,json=textMuteMessages" json:"text_mute_messages,omitempty"`
}

func (x *CMsgSignOutTextMuteInfo) Reset() {
	*x = CMsgSignOutTextMuteInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSignOutTextMuteInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSignOutTextMuteInfo) ProtoMessage() {}

func (x *CMsgSignOutTextMuteInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSignOutTextMuteInfo.ProtoReflect.Descriptor instead.
func (*CMsgSignOutTextMuteInfo) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{17}
}

func (x *CMsgSignOutTextMuteInfo) GetTextMuteMessages() []*CMsgSignOutTextMuteInfo_TextMuteMessage {
	if x != nil {
		return x.TextMuteMessages
	}
	return nil
}

type CMsgSignOutPlayerStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId           *int32   `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	MatchId             *uint64  `protobuf:"varint,2,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	Rank                *uint32  `protobuf:"varint,3,opt,name=rank" json:"rank,omitempty"`
	HeroId              *uint32  `protobuf:"varint,4,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	Rampages            *uint32  `protobuf:"varint,5,opt,name=rampages" json:"rampages,omitempty"`
	TripleKills         *uint32  `protobuf:"varint,6,opt,name=triple_kills,json=tripleKills" json:"triple_kills,omitempty"`
	FirstBloodClaimed   *uint32  `protobuf:"varint,7,opt,name=first_blood_claimed,json=firstBloodClaimed" json:"first_blood_claimed,omitempty"`
	FirstBloodGiven     *uint32  `protobuf:"varint,8,opt,name=first_blood_given,json=firstBloodGiven" json:"first_blood_given,omitempty"`
	CouriersKilled      *uint32  `protobuf:"varint,9,opt,name=couriers_killed,json=couriersKilled" json:"couriers_killed,omitempty"`
	AegisesSnatched     *uint32  `protobuf:"varint,10,opt,name=aegises_snatched,json=aegisesSnatched" json:"aegises_snatched,omitempty"`
	CheesesEaten        *uint32  `protobuf:"varint,11,opt,name=cheeses_eaten,json=cheesesEaten" json:"cheeses_eaten,omitempty"`
	CreepsStacked       *uint32  `protobuf:"varint,12,opt,name=creeps_stacked,json=creepsStacked" json:"creeps_stacked,omitempty"`
	FightScore          *float32 `protobuf:"fixed32,13,opt,name=fight_score,json=fightScore" json:"fight_score,omitempty"`
	FarmScore           *float32 `protobuf:"fixed32,14,opt,name=farm_score,json=farmScore" json:"farm_score,omitempty"`
	SupportScore        *float32 `protobuf:"fixed32,15,opt,name=support_score,json=supportScore" json:"support_score,omitempty"`
	PushScore           *float32 `protobuf:"fixed32,16,opt,name=push_score,json=pushScore" json:"push_score,omitempty"`
	Kills               *uint32  `protobuf:"varint,17,opt,name=kills" json:"kills,omitempty"`
	Deaths              *uint32  `protobuf:"varint,18,opt,name=deaths" json:"deaths,omitempty"`
	Assists             *uint32  `protobuf:"varint,19,opt,name=assists" json:"assists,omitempty"`
	LastHits            *uint32  `protobuf:"varint,20,opt,name=last_hits,json=lastHits" json:"last_hits,omitempty"`
	Denies              *uint32  `protobuf:"varint,21,opt,name=denies" json:"denies,omitempty"`
	Gpm                 *float32 `protobuf:"fixed32,22,opt,name=gpm" json:"gpm,omitempty"`
	Xppm                *float32 `protobuf:"fixed32,23,opt,name=xppm" json:"xppm,omitempty"`
	NetWorth            *float32 `protobuf:"fixed32,24,opt,name=net_worth,json=netWorth" json:"net_worth,omitempty"`
	Damage              *float32 `protobuf:"fixed32,25,opt,name=damage" json:"damage,omitempty"`
	Heals               *float32 `protobuf:"fixed32,26,opt,name=heals" json:"heals,omitempty"`
	RapiersPurchased    *uint32  `protobuf:"varint,27,opt,name=rapiers_purchased,json=rapiersPurchased" json:"rapiers_purchased,omitempty"`
	ObserverWardsPlaced *uint32  `protobuf:"varint,28,opt,name=observer_wards_placed,json=observerWardsPlaced" json:"observer_wards_placed,omitempty"`
	WardsDestroyed      *uint32  `protobuf:"varint,29,opt,name=wards_destroyed,json=wardsDestroyed" json:"wards_destroyed,omitempty"`
	LobbyType           *uint32  `protobuf:"varint,30,opt,name=lobby_type,json=lobbyType" json:"lobby_type,omitempty"`
}

func (x *CMsgSignOutPlayerStats) Reset() {
	*x = CMsgSignOutPlayerStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSignOutPlayerStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSignOutPlayerStats) ProtoMessage() {}

func (x *CMsgSignOutPlayerStats) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSignOutPlayerStats.ProtoReflect.Descriptor instead.
func (*CMsgSignOutPlayerStats) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{18}
}

func (x *CMsgSignOutPlayerStats) GetAccountId() int32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgSignOutPlayerStats) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgSignOutPlayerStats) GetRank() uint32 {
	if x != nil && x.Rank != nil {
		return *x.Rank
	}
	return 0
}

func (x *CMsgSignOutPlayerStats) GetHeroId() uint32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CMsgSignOutPlayerStats) GetRampages() uint32 {
	if x != nil && x.Rampages != nil {
		return *x.Rampages
	}
	return 0
}

func (x *CMsgSignOutPlayerStats) GetTripleKills() uint32 {
	if x != nil && x.TripleKills != nil {
		return *x.TripleKills
	}
	return 0
}

func (x *CMsgSignOutPlayerStats) GetFirstBloodClaimed() uint32 {
	if x != nil && x.FirstBloodClaimed != nil {
		return *x.FirstBloodClaimed
	}
	return 0
}

func (x *CMsgSignOutPlayerStats) GetFirstBloodGiven() uint32 {
	if x != nil && x.FirstBloodGiven != nil {
		return *x.FirstBloodGiven
	}
	return 0
}

func (x *CMsgSignOutPlayerStats) GetCouriersKilled() uint32 {
	if x != nil && x.CouriersKilled != nil {
		return *x.CouriersKilled
	}
	return 0
}

func (x *CMsgSignOutPlayerStats) GetAegisesSnatched() uint32 {
	if x != nil && x.AegisesSnatched != nil {
		return *x.AegisesSnatched
	}
	return 0
}

func (x *CMsgSignOutPlayerStats) GetCheesesEaten() uint32 {
	if x != nil && x.CheesesEaten != nil {
		return *x.CheesesEaten
	}
	return 0
}

func (x *CMsgSignOutPlayerStats) GetCreepsStacked() uint32 {
	if x != nil && x.CreepsStacked != nil {
		return *x.CreepsStacked
	}
	return 0
}

func (x *CMsgSignOutPlayerStats) GetFightScore() float32 {
	if x != nil && x.FightScore != nil {
		return *x.FightScore
	}
	return 0
}

func (x *CMsgSignOutPlayerStats) GetFarmScore() float32 {
	if x != nil && x.FarmScore != nil {
		return *x.FarmScore
	}
	return 0
}

func (x *CMsgSignOutPlayerStats) GetSupportScore() float32 {
	if x != nil && x.SupportScore != nil {
		return *x.SupportScore
	}
	return 0
}

func (x *CMsgSignOutPlayerStats) GetPushScore() float32 {
	if x != nil && x.PushScore != nil {
		return *x.PushScore
	}
	return 0
}

func (x *CMsgSignOutPlayerStats) GetKills() uint32 {
	if x != nil && x.Kills != nil {
		return *x.Kills
	}
	return 0
}

func (x *CMsgSignOutPlayerStats) GetDeaths() uint32 {
	if x != nil && x.Deaths != nil {
		return *x.Deaths
	}
	return 0
}

func (x *CMsgSignOutPlayerStats) GetAssists() uint32 {
	if x != nil && x.Assists != nil {
		return *x.Assists
	}
	return 0
}

func (x *CMsgSignOutPlayerStats) GetLastHits() uint32 {
	if x != nil && x.LastHits != nil {
		return *x.LastHits
	}
	return 0
}

func (x *CMsgSignOutPlayerStats) GetDenies() uint32 {
	if x != nil && x.Denies != nil {
		return *x.Denies
	}
	return 0
}

func (x *CMsgSignOutPlayerStats) GetGpm() float32 {
	if x != nil && x.Gpm != nil {
		return *x.Gpm
	}
	return 0
}

func (x *CMsgSignOutPlayerStats) GetXppm() float32 {
	if x != nil && x.Xppm != nil {
		return *x.Xppm
	}
	return 0
}

func (x *CMsgSignOutPlayerStats) GetNetWorth() float32 {
	if x != nil && x.NetWorth != nil {
		return *x.NetWorth
	}
	return 0
}

func (x *CMsgSignOutPlayerStats) GetDamage() float32 {
	if x != nil && x.Damage != nil {
		return *x.Damage
	}
	return 0
}

func (x *CMsgSignOutPlayerStats) GetHeals() float32 {
	if x != nil && x.Heals != nil {
		return *x.Heals
	}
	return 0
}

func (x *CMsgSignOutPlayerStats) GetRapiersPurchased() uint32 {
	if x != nil && x.RapiersPurchased != nil {
		return *x.RapiersPurchased
	}
	return 0
}

func (x *CMsgSignOutPlayerStats) GetObserverWardsPlaced() uint32 {
	if x != nil && x.ObserverWardsPlaced != nil {
		return *x.ObserverWardsPlaced
	}
	return 0
}

func (x *CMsgSignOutPlayerStats) GetWardsDestroyed() uint32 {
	if x != nil && x.WardsDestroyed != nil {
		return *x.WardsDestroyed
	}
	return 0
}

func (x *CMsgSignOutPlayerStats) GetLobbyType() uint32 {
	if x != nil && x.LobbyType != nil {
		return *x.LobbyType
	}
	return 0
}

type CMsgSignOutCommunicationSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Players []*CMsgSignOutCommunicationSummary_PlayerCommunication `protobuf:"bytes,1,rep,name=players" json:"players,omitempty"`
}

func (x *CMsgSignOutCommunicationSummary) Reset() {
	*x = CMsgSignOutCommunicationSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSignOutCommunicationSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSignOutCommunicationSummary) ProtoMessage() {}

func (x *CMsgSignOutCommunicationSummary) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSignOutCommunicationSummary.ProtoReflect.Descriptor instead.
func (*CMsgSignOutCommunicationSummary) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{19}
}

func (x *CMsgSignOutCommunicationSummary) GetPlayers() []*CMsgSignOutCommunicationSummary_PlayerCommunication {
	if x != nil {
		return x.Players
	}
	return nil
}

type CMsgGameMatchSignoutResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId            *uint64                                        `protobuf:"varint,1,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	ReplaySalt         *uint32                                        `protobuf:"fixed32,2,opt,name=replay_salt,json=replaySalt" json:"replay_salt,omitempty"`
	TimedRewardDetails []*CLobbyTimedRewardDetails                    `protobuf:"bytes,3,rep,name=timed_reward_details,json=timedRewardDetails" json:"timed_reward_details,omitempty"`
	XpRewardDetails    []*CSODOTALobbyMember                          `protobuf:"bytes,4,rep,name=xp_reward_details,json=xpRewardDetails" json:"xp_reward_details,omitempty"`
	Leagueid           *uint32                                        `protobuf:"varint,5,opt,name=leagueid" json:"leagueid,omitempty"`
	MetadataPrivateKey *uint32                                        `protobuf:"fixed32,7,opt,name=metadata_private_key,json=metadataPrivateKey" json:"metadata_private_key,omitempty"`
	MatchDetails       *CMsgDOTAMatch                                 `protobuf:"bytes,8,opt,name=match_details,json=matchDetails" json:"match_details,omitempty"`
	PlayersMetadata    []*CMsgGameMatchSignoutResponse_PlayerMetadata `protobuf:"bytes,9,rep,name=players_metadata,json=playersMetadata" json:"players_metadata,omitempty"`
	MvpData            *CMvpData                                      `protobuf:"bytes,10,opt,name=mvp_data,json=mvpData" json:"mvp_data,omitempty"`
}

func (x *CMsgGameMatchSignoutResponse) Reset() {
	*x = CMsgGameMatchSignoutResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGameMatchSignoutResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameMatchSignoutResponse) ProtoMessage() {}

func (x *CMsgGameMatchSignoutResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameMatchSignoutResponse.ProtoReflect.Descriptor instead.
func (*CMsgGameMatchSignoutResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{20}
}

func (x *CMsgGameMatchSignoutResponse) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgGameMatchSignoutResponse) GetReplaySalt() uint32 {
	if x != nil && x.ReplaySalt != nil {
		return *x.ReplaySalt
	}
	return 0
}

func (x *CMsgGameMatchSignoutResponse) GetTimedRewardDetails() []*CLobbyTimedRewardDetails {
	if x != nil {
		return x.TimedRewardDetails
	}
	return nil
}

func (x *CMsgGameMatchSignoutResponse) GetXpRewardDetails() []*CSODOTALobbyMember {
	if x != nil {
		return x.XpRewardDetails
	}
	return nil
}

func (x *CMsgGameMatchSignoutResponse) GetLeagueid() uint32 {
	if x != nil && x.Leagueid != nil {
		return *x.Leagueid
	}
	return 0
}

func (x *CMsgGameMatchSignoutResponse) GetMetadataPrivateKey() uint32 {
	if x != nil && x.MetadataPrivateKey != nil {
		return *x.MetadataPrivateKey
	}
	return 0
}

func (x *CMsgGameMatchSignoutResponse) GetMatchDetails() *CMsgDOTAMatch {
	if x != nil {
		return x.MatchDetails
	}
	return nil
}

func (x *CMsgGameMatchSignoutResponse) GetPlayersMetadata() []*CMsgGameMatchSignoutResponse_PlayerMetadata {
	if x != nil {
		return x.PlayersMetadata
	}
	return nil
}

func (x *CMsgGameMatchSignoutResponse) GetMvpData() *CMvpData {
	if x != nil {
		return x.MvpData
	}
	return nil
}

type CMsgTimedRewardContainer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimedRewardDetails []*CLobbyTimedRewardDetails `protobuf:"bytes,1,rep,name=timed_reward_details,json=timedRewardDetails" json:"timed_reward_details,omitempty"`
}

func (x *CMsgTimedRewardContainer) Reset() {
	*x = CMsgTimedRewardContainer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgTimedRewardContainer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgTimedRewardContainer) ProtoMessage() {}

func (x *CMsgTimedRewardContainer) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgTimedRewardContainer.ProtoReflect.Descriptor instead.
func (*CMsgTimedRewardContainer) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{21}
}

func (x *CMsgTimedRewardContainer) GetTimedRewardDetails() []*CLobbyTimedRewardDetails {
	if x != nil {
		return x.TimedRewardDetails
	}
	return nil
}

type CMsgGameMatchSignOutPermissionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerVersion *uint32 `protobuf:"varint,1,opt,name=server_version,json=serverVersion" json:"server_version,omitempty"`
	LocalAttempt  *uint32 `protobuf:"varint,2,opt,name=local_attempt,json=localAttempt" json:"local_attempt,omitempty"`
	TotalAttempt  *uint32 `protobuf:"varint,3,opt,name=total_attempt,json=totalAttempt" json:"total_attempt,omitempty"`
	SecondsWaited *uint32 `protobuf:"varint,4,opt,name=seconds_waited,json=secondsWaited" json:"seconds_waited,omitempty"`
}

func (x *CMsgGameMatchSignOutPermissionRequest) Reset() {
	*x = CMsgGameMatchSignOutPermissionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGameMatchSignOutPermissionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameMatchSignOutPermissionRequest) ProtoMessage() {}

func (x *CMsgGameMatchSignOutPermissionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameMatchSignOutPermissionRequest.ProtoReflect.Descriptor instead.
func (*CMsgGameMatchSignOutPermissionRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{22}
}

func (x *CMsgGameMatchSignOutPermissionRequest) GetServerVersion() uint32 {
	if x != nil && x.ServerVersion != nil {
		return *x.ServerVersion
	}
	return 0
}

func (x *CMsgGameMatchSignOutPermissionRequest) GetLocalAttempt() uint32 {
	if x != nil && x.LocalAttempt != nil {
		return *x.LocalAttempt
	}
	return 0
}

func (x *CMsgGameMatchSignOutPermissionRequest) GetTotalAttempt() uint32 {
	if x != nil && x.TotalAttempt != nil {
		return *x.TotalAttempt
	}
	return 0
}

func (x *CMsgGameMatchSignOutPermissionRequest) GetSecondsWaited() uint32 {
	if x != nil && x.SecondsWaited != nil {
		return *x.SecondsWaited
	}
	return 0
}

type CMsgGameMatchSignOutPermissionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PermissionGranted *bool   `protobuf:"varint,1,opt,name=permission_granted,json=permissionGranted,def=0" json:"permission_granted,omitempty"`
	AbandonSignout    *bool   `protobuf:"varint,2,opt,name=abandon_signout,json=abandonSignout,def=0" json:"abandon_signout,omitempty"`
	RetryDelaySeconds *uint32 `protobuf:"varint,3,opt,name=retry_delay_seconds,json=retryDelaySeconds,def=0" json:"retry_delay_seconds,omitempty"`
}

// Default values for CMsgGameMatchSignOutPermissionResponse fields.
const (
	Default_CMsgGameMatchSignOutPermissionResponse_PermissionGranted = bool(false)
	Default_CMsgGameMatchSignOutPermissionResponse_AbandonSignout    = bool(false)
	Default_CMsgGameMatchSignOutPermissionResponse_RetryDelaySeconds = uint32(0)
)

func (x *CMsgGameMatchSignOutPermissionResponse) Reset() {
	*x = CMsgGameMatchSignOutPermissionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGameMatchSignOutPermissionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameMatchSignOutPermissionResponse) ProtoMessage() {}

func (x *CMsgGameMatchSignOutPermissionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameMatchSignOutPermissionResponse.ProtoReflect.Descriptor instead.
func (*CMsgGameMatchSignOutPermissionResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{23}
}

func (x *CMsgGameMatchSignOutPermissionResponse) GetPermissionGranted() bool {
	if x != nil && x.PermissionGranted != nil {
		return *x.PermissionGranted
	}
	return Default_CMsgGameMatchSignOutPermissionResponse_PermissionGranted
}

func (x *CMsgGameMatchSignOutPermissionResponse) GetAbandonSignout() bool {
	if x != nil && x.AbandonSignout != nil {
		return *x.AbandonSignout
	}
	return Default_CMsgGameMatchSignOutPermissionResponse_AbandonSignout
}

func (x *CMsgGameMatchSignOutPermissionResponse) GetRetryDelaySeconds() uint32 {
	if x != nil && x.RetryDelaySeconds != nil {
		return *x.RetryDelaySeconds
	}
	return Default_CMsgGameMatchSignOutPermissionResponse_RetryDelaySeconds
}

type CMsgGameMatchSignOutEventGameData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId       *EEvent `protobuf:"varint,1,opt,name=event_id,json=eventId,enum=dota.EEvent,def=0" json:"event_id,omitempty"`
	GameName      *string `protobuf:"bytes,2,opt,name=game_name,json=gameName" json:"game_name,omitempty"`
	MapName       *string `protobuf:"bytes,3,opt,name=map_name,json=mapName" json:"map_name,omitempty"`
	EventGameData []byte  `protobuf:"bytes,4,opt,name=event_game_data,json=eventGameData" json:"event_game_data,omitempty"`
	StartTime     *uint32 `protobuf:"varint,5,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
}

// Default values for CMsgGameMatchSignOutEventGameData fields.
const (
	Default_CMsgGameMatchSignOutEventGameData_EventId = EEvent_EVENT_ID_NONE
)

func (x *CMsgGameMatchSignOutEventGameData) Reset() {
	*x = CMsgGameMatchSignOutEventGameData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGameMatchSignOutEventGameData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameMatchSignOutEventGameData) ProtoMessage() {}

func (x *CMsgGameMatchSignOutEventGameData) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameMatchSignOutEventGameData.ProtoReflect.Descriptor instead.
func (*CMsgGameMatchSignOutEventGameData) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{24}
}

func (x *CMsgGameMatchSignOutEventGameData) GetEventId() EEvent {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return Default_CMsgGameMatchSignOutEventGameData_EventId
}

func (x *CMsgGameMatchSignOutEventGameData) GetGameName() string {
	if x != nil && x.GameName != nil {
		return *x.GameName
	}
	return ""
}

func (x *CMsgGameMatchSignOutEventGameData) GetMapName() string {
	if x != nil && x.MapName != nil {
		return *x.MapName
	}
	return ""
}

func (x *CMsgGameMatchSignOutEventGameData) GetEventGameData() []byte {
	if x != nil {
		return x.EventGameData
	}
	return nil
}

func (x *CMsgGameMatchSignOutEventGameData) GetStartTime() uint32 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

type CMsgDOTALiveScoreboardUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TournamentId       *uint32                            `protobuf:"varint,1,opt,name=tournament_id,json=tournamentId" json:"tournament_id,omitempty"`
	TournamentGameId   *uint32                            `protobuf:"varint,2,opt,name=tournament_game_id,json=tournamentGameId" json:"tournament_game_id,omitempty"`
	Duration           *float32                           `protobuf:"fixed32,3,opt,name=duration" json:"duration,omitempty"`
	HltvDelay          *int32                             `protobuf:"varint,4,opt,name=hltv_delay,json=hltvDelay" json:"hltv_delay,omitempty"`
	TeamGood           *CMsgDOTALiveScoreboardUpdate_Team `protobuf:"bytes,5,opt,name=team_good,json=teamGood" json:"team_good,omitempty"`
	TeamBad            *CMsgDOTALiveScoreboardUpdate_Team `protobuf:"bytes,6,opt,name=team_bad,json=teamBad" json:"team_bad,omitempty"`
	RoshanRespawnTimer *uint32                            `protobuf:"varint,7,opt,name=roshan_respawn_timer,json=roshanRespawnTimer" json:"roshan_respawn_timer,omitempty"`
	LeagueId           *uint32                            `protobuf:"varint,8,opt,name=league_id,json=leagueId" json:"league_id,omitempty"`
	MatchId            *uint64                            `protobuf:"varint,9,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
}

func (x *CMsgDOTALiveScoreboardUpdate) Reset() {
	*x = CMsgDOTALiveScoreboardUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTALiveScoreboardUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTALiveScoreboardUpdate) ProtoMessage() {}

func (x *CMsgDOTALiveScoreboardUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTALiveScoreboardUpdate.ProtoReflect.Descriptor instead.
func (*CMsgDOTALiveScoreboardUpdate) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{25}
}

func (x *CMsgDOTALiveScoreboardUpdate) GetTournamentId() uint32 {
	if x != nil && x.TournamentId != nil {
		return *x.TournamentId
	}
	return 0
}

func (x *CMsgDOTALiveScoreboardUpdate) GetTournamentGameId() uint32 {
	if x != nil && x.TournamentGameId != nil {
		return *x.TournamentGameId
	}
	return 0
}

func (x *CMsgDOTALiveScoreboardUpdate) GetDuration() float32 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

func (x *CMsgDOTALiveScoreboardUpdate) GetHltvDelay() int32 {
	if x != nil && x.HltvDelay != nil {
		return *x.HltvDelay
	}
	return 0
}

func (x *CMsgDOTALiveScoreboardUpdate) GetTeamGood() *CMsgDOTALiveScoreboardUpdate_Team {
	if x != nil {
		return x.TeamGood
	}
	return nil
}

func (x *CMsgDOTALiveScoreboardUpdate) GetTeamBad() *CMsgDOTALiveScoreboardUpdate_Team {
	if x != nil {
		return x.TeamBad
	}
	return nil
}

func (x *CMsgDOTALiveScoreboardUpdate) GetRoshanRespawnTimer() uint32 {
	if x != nil && x.RoshanRespawnTimer != nil {
		return *x.RoshanRespawnTimer
	}
	return 0
}

func (x *CMsgDOTALiveScoreboardUpdate) GetLeagueId() uint32 {
	if x != nil && x.LeagueId != nil {
		return *x.LeagueId
	}
	return 0
}

func (x *CMsgDOTALiveScoreboardUpdate) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

type CMsgDOTARequestPlayerResources struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SteamId  *uint64 `protobuf:"fixed64,1,opt,name=steam_id,json=steamId" json:"steam_id,omitempty"`
	PlayerId *uint32 `protobuf:"varint,2,opt,name=player_id,json=playerId" json:"player_id,omitempty"`
}

func (x *CMsgDOTARequestPlayerResources) Reset() {
	*x = CMsgDOTARequestPlayerResources{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTARequestPlayerResources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTARequestPlayerResources) ProtoMessage() {}

func (x *CMsgDOTARequestPlayerResources) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTARequestPlayerResources.ProtoReflect.Descriptor instead.
func (*CMsgDOTARequestPlayerResources) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{26}
}

func (x *CMsgDOTARequestPlayerResources) GetSteamId() uint64 {
	if x != nil && x.SteamId != nil {
		return *x.SteamId
	}
	return 0
}

func (x *CMsgDOTARequestPlayerResources) GetPlayerId() uint32 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

type CMsgDOTARequestPlayerResourcesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SteamId          *uint64 `protobuf:"fixed64,1,opt,name=steam_id,json=steamId" json:"steam_id,omitempty"`
	Rank             *uint32 `protobuf:"varint,2,opt,name=rank" json:"rank,omitempty"`
	PlayerId         *uint32 `protobuf:"varint,3,opt,name=player_id,json=playerId" json:"player_id,omitempty"`
	PreventTextChat  *bool   `protobuf:"varint,4,opt,name=prevent_text_chat,json=preventTextChat" json:"prevent_text_chat,omitempty"`
	PreventVoiceChat *bool   `protobuf:"varint,5,opt,name=prevent_voice_chat,json=preventVoiceChat" json:"prevent_voice_chat,omitempty"`
	LowPriority      *bool   `protobuf:"varint,6,opt,name=low_priority,json=lowPriority" json:"low_priority,omitempty"`
	IsNewPlayer      *bool   `protobuf:"varint,8,opt,name=is_new_player,json=isNewPlayer" json:"is_new_player,omitempty"`
	IsGuidePlayer    *bool   `protobuf:"varint,9,opt,name=is_guide_player,json=isGuidePlayer" json:"is_guide_player,omitempty"`
}

func (x *CMsgDOTARequestPlayerResourcesResponse) Reset() {
	*x = CMsgDOTARequestPlayerResourcesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTARequestPlayerResourcesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTARequestPlayerResourcesResponse) ProtoMessage() {}

func (x *CMsgDOTARequestPlayerResourcesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTARequestPlayerResourcesResponse.ProtoReflect.Descriptor instead.
func (*CMsgDOTARequestPlayerResourcesResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{27}
}

func (x *CMsgDOTARequestPlayerResourcesResponse) GetSteamId() uint64 {
	if x != nil && x.SteamId != nil {
		return *x.SteamId
	}
	return 0
}

func (x *CMsgDOTARequestPlayerResourcesResponse) GetRank() uint32 {
	if x != nil && x.Rank != nil {
		return *x.Rank
	}
	return 0
}

func (x *CMsgDOTARequestPlayerResourcesResponse) GetPlayerId() uint32 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

func (x *CMsgDOTARequestPlayerResourcesResponse) GetPreventTextChat() bool {
	if x != nil && x.PreventTextChat != nil {
		return *x.PreventTextChat
	}
	return false
}

func (x *CMsgDOTARequestPlayerResourcesResponse) GetPreventVoiceChat() bool {
	if x != nil && x.PreventVoiceChat != nil {
		return *x.PreventVoiceChat
	}
	return false
}

func (x *CMsgDOTARequestPlayerResourcesResponse) GetLowPriority() bool {
	if x != nil && x.LowPriority != nil {
		return *x.LowPriority
	}
	return false
}

func (x *CMsgDOTARequestPlayerResourcesResponse) GetIsNewPlayer() bool {
	if x != nil && x.IsNewPlayer != nil {
		return *x.IsNewPlayer
	}
	return false
}

func (x *CMsgDOTARequestPlayerResourcesResponse) GetIsGuidePlayer() bool {
	if x != nil && x.IsGuidePlayer != nil {
		return *x.IsGuidePlayer
	}
	return false
}

type CMsgDOTARequestBatchPlayerResources struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountIds []uint32 `protobuf:"varint,1,rep,packed,name=account_ids,json=accountIds" json:"account_ids,omitempty"`
	RankTypes  []uint32 `protobuf:"varint,4,rep,packed,name=rank_types,json=rankTypes" json:"rank_types,omitempty"`
}

func (x *CMsgDOTARequestBatchPlayerResources) Reset() {
	*x = CMsgDOTARequestBatchPlayerResources{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTARequestBatchPlayerResources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTARequestBatchPlayerResources) ProtoMessage() {}

func (x *CMsgDOTARequestBatchPlayerResources) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTARequestBatchPlayerResources.ProtoReflect.Descriptor instead.
func (*CMsgDOTARequestBatchPlayerResources) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{28}
}

func (x *CMsgDOTARequestBatchPlayerResources) GetAccountIds() []uint32 {
	if x != nil {
		return x.AccountIds
	}
	return nil
}

func (x *CMsgDOTARequestBatchPlayerResources) GetRankTypes() []uint32 {
	if x != nil {
		return x.RankTypes
	}
	return nil
}

type CMsgDOTARequestBatchPlayerResourcesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*CMsgDOTARequestBatchPlayerResourcesResponse_Result `protobuf:"bytes,6,rep,name=results" json:"results,omitempty"`
}

func (x *CMsgDOTARequestBatchPlayerResourcesResponse) Reset() {
	*x = CMsgDOTARequestBatchPlayerResourcesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTARequestBatchPlayerResourcesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTARequestBatchPlayerResourcesResponse) ProtoMessage() {}

func (x *CMsgDOTARequestBatchPlayerResourcesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTARequestBatchPlayerResourcesResponse.ProtoReflect.Descriptor instead.
func (*CMsgDOTARequestBatchPlayerResourcesResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{29}
}

func (x *CMsgDOTARequestBatchPlayerResourcesResponse) GetResults() []*CMsgDOTARequestBatchPlayerResourcesResponse_Result {
	if x != nil {
		return x.Results
	}
	return nil
}

type CMsgDOTAPlayerFailedToConnect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FailedLoaders    []uint64 `protobuf:"fixed64,1,rep,name=failed_loaders,json=failedLoaders" json:"failed_loaders,omitempty"`
	AbandonedLoaders []uint64 `protobuf:"fixed64,2,rep,name=abandoned_loaders,json=abandonedLoaders" json:"abandoned_loaders,omitempty"`
}

func (x *CMsgDOTAPlayerFailedToConnect) Reset() {
	*x = CMsgDOTAPlayerFailedToConnect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAPlayerFailedToConnect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAPlayerFailedToConnect) ProtoMessage() {}

func (x *CMsgDOTAPlayerFailedToConnect) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAPlayerFailedToConnect.ProtoReflect.Descriptor instead.
func (*CMsgDOTAPlayerFailedToConnect) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{30}
}

func (x *CMsgDOTAPlayerFailedToConnect) GetFailedLoaders() []uint64 {
	if x != nil {
		return x.FailedLoaders
	}
	return nil
}

func (x *CMsgDOTAPlayerFailedToConnect) GetAbandonedLoaders() []uint64 {
	if x != nil {
		return x.AbandonedLoaders
	}
	return nil
}

type CMsgGCToRelayConnect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceTvPublicAddr  *uint32 `protobuf:"varint,1,opt,name=source_tv_public_addr,json=sourceTvPublicAddr" json:"source_tv_public_addr,omitempty"`
	SourceTvPrivateAddr *uint32 `protobuf:"varint,2,opt,name=source_tv_private_addr,json=sourceTvPrivateAddr" json:"source_tv_private_addr,omitempty"`
	SourceTvPort        *uint32 `protobuf:"varint,3,opt,name=source_tv_port,json=sourceTvPort" json:"source_tv_port,omitempty"`
	GameServerSteamId   *uint64 `protobuf:"varint,4,opt,name=game_server_steam_id,json=gameServerSteamId" json:"game_server_steam_id,omitempty"`
	ParentCount         *uint32 `protobuf:"varint,5,opt,name=parent_count,json=parentCount" json:"parent_count,omitempty"`
	TvUniqueSecretCode  *uint64 `protobuf:"fixed64,6,opt,name=tv_unique_secret_code,json=tvUniqueSecretCode" json:"tv_unique_secret_code,omitempty"`
	SourceTvSteamid     *uint64 `protobuf:"fixed64,7,opt,name=source_tv_steamid,json=sourceTvSteamid" json:"source_tv_steamid,omitempty"`
}

func (x *CMsgGCToRelayConnect) Reset() {
	*x = CMsgGCToRelayConnect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCToRelayConnect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToRelayConnect) ProtoMessage() {}

func (x *CMsgGCToRelayConnect) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToRelayConnect.ProtoReflect.Descriptor instead.
func (*CMsgGCToRelayConnect) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{31}
}

func (x *CMsgGCToRelayConnect) GetSourceTvPublicAddr() uint32 {
	if x != nil && x.SourceTvPublicAddr != nil {
		return *x.SourceTvPublicAddr
	}
	return 0
}

func (x *CMsgGCToRelayConnect) GetSourceTvPrivateAddr() uint32 {
	if x != nil && x.SourceTvPrivateAddr != nil {
		return *x.SourceTvPrivateAddr
	}
	return 0
}

func (x *CMsgGCToRelayConnect) GetSourceTvPort() uint32 {
	if x != nil && x.SourceTvPort != nil {
		return *x.SourceTvPort
	}
	return 0
}

func (x *CMsgGCToRelayConnect) GetGameServerSteamId() uint64 {
	if x != nil && x.GameServerSteamId != nil {
		return *x.GameServerSteamId
	}
	return 0
}

func (x *CMsgGCToRelayConnect) GetParentCount() uint32 {
	if x != nil && x.ParentCount != nil {
		return *x.ParentCount
	}
	return 0
}

func (x *CMsgGCToRelayConnect) GetTvUniqueSecretCode() uint64 {
	if x != nil && x.TvUniqueSecretCode != nil {
		return *x.TvUniqueSecretCode
	}
	return 0
}

func (x *CMsgGCToRelayConnect) GetSourceTvSteamid() uint64 {
	if x != nil && x.SourceTvSteamid != nil {
		return *x.SourceTvSteamid
	}
	return 0
}

type CMsgGCGCToLANServerRelayConnect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelaySteamid *uint64 `protobuf:"fixed64,1,opt,name=relay_steamid,json=relaySteamid" json:"relay_steamid,omitempty"`
}

func (x *CMsgGCGCToLANServerRelayConnect) Reset() {
	*x = CMsgGCGCToLANServerRelayConnect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCGCToLANServerRelayConnect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCGCToLANServerRelayConnect) ProtoMessage() {}

func (x *CMsgGCGCToLANServerRelayConnect) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCGCToLANServerRelayConnect.ProtoReflect.Descriptor instead.
func (*CMsgGCGCToLANServerRelayConnect) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{32}
}

func (x *CMsgGCGCToLANServerRelayConnect) GetRelaySteamid() uint64 {
	if x != nil && x.RelaySteamid != nil {
		return *x.RelaySteamid
	}
	return 0
}

type CMsgGCToRelayConnectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgGCToRelayConnectResponse) Reset() {
	*x = CMsgGCToRelayConnectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCToRelayConnectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToRelayConnectResponse) ProtoMessage() {}

func (x *CMsgGCToRelayConnectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToRelayConnectResponse.ProtoReflect.Descriptor instead.
func (*CMsgGCToRelayConnectResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{33}
}

type CMsgGCBanStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
}

func (x *CMsgGCBanStatusRequest) Reset() {
	*x = CMsgGCBanStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCBanStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCBanStatusRequest) ProtoMessage() {}

func (x *CMsgGCBanStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCBanStatusRequest.ProtoReflect.Descriptor instead.
func (*CMsgGCBanStatusRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{34}
}

func (x *CMsgGCBanStatusRequest) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

type CMsgGCBanStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result          *uint32 `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	LowPriority     *bool   `protobuf:"varint,2,opt,name=low_priority,json=lowPriority" json:"low_priority,omitempty"`
	TextChatBanned  *bool   `protobuf:"varint,3,opt,name=text_chat_banned,json=textChatBanned" json:"text_chat_banned,omitempty"`
	VoiceChatBanned *bool   `protobuf:"varint,4,opt,name=voice_chat_banned,json=voiceChatBanned" json:"voice_chat_banned,omitempty"`
}

func (x *CMsgGCBanStatusResponse) Reset() {
	*x = CMsgGCBanStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCBanStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCBanStatusResponse) ProtoMessage() {}

func (x *CMsgGCBanStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCBanStatusResponse.ProtoReflect.Descriptor instead.
func (*CMsgGCBanStatusResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{35}
}

func (x *CMsgGCBanStatusResponse) GetResult() uint32 {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return 0
}

func (x *CMsgGCBanStatusResponse) GetLowPriority() bool {
	if x != nil && x.LowPriority != nil {
		return *x.LowPriority
	}
	return false
}

func (x *CMsgGCBanStatusResponse) GetTextChatBanned() bool {
	if x != nil && x.TextChatBanned != nil {
		return *x.TextChatBanned
	}
	return false
}

func (x *CMsgGCBanStatusResponse) GetVoiceChatBanned() bool {
	if x != nil && x.VoiceChatBanned != nil {
		return *x.VoiceChatBanned
	}
	return false
}

type CMsgTournamentItemEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KillerAccountId *uint32                 `protobuf:"fixed32,1,opt,name=killer_account_id,json=killerAccountId" json:"killer_account_id,omitempty"`
	VictimAccountId *uint32                 `protobuf:"fixed32,2,opt,name=victim_account_id,json=victimAccountId" json:"victim_account_id,omitempty"`
	EventType       *DOTA_TournamentEvents  `protobuf:"varint,3,opt,name=event_type,json=eventType,enum=dota.DOTA_TournamentEvents,def=0" json:"event_type,omitempty"`
	TvDelay         *int32                  `protobuf:"varint,4,opt,name=tv_delay,json=tvDelay" json:"tv_delay,omitempty"`
	DotaTime        *int32                  `protobuf:"varint,5,opt,name=dota_time,json=dotaTime" json:"dota_time,omitempty"`
	ReplayTime      *float32                `protobuf:"fixed32,6,opt,name=replay_time,json=replayTime" json:"replay_time,omitempty"`
	LootList        *string                 `protobuf:"bytes,7,opt,name=loot_list,json=lootList" json:"loot_list,omitempty"`
	EventTeam       *uint32                 `protobuf:"varint,8,opt,name=event_team,json=eventTeam" json:"event_team,omitempty"`
	MultiKillCount  *uint32                 `protobuf:"varint,9,opt,name=multi_kill_count,json=multiKillCount" json:"multi_kill_count,omitempty"`
	WinnerScore     *uint32                 `protobuf:"varint,10,opt,name=winner_score,json=winnerScore" json:"winner_score,omitempty"`
	LoserScore      *uint32                 `protobuf:"varint,11,opt,name=loser_score,json=loserScore" json:"loser_score,omitempty"`
	HeroStatues     []*CProtoItemHeroStatue `protobuf:"bytes,12,rep,name=hero_statues,json=heroStatues" json:"hero_statues,omitempty"`
}

// Default values for CMsgTournamentItemEvent fields.
const (
	Default_CMsgTournamentItemEvent_EventType = DOTA_TournamentEvents_TE_FIRST_BLOOD
)

func (x *CMsgTournamentItemEvent) Reset() {
	*x = CMsgTournamentItemEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgTournamentItemEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgTournamentItemEvent) ProtoMessage() {}

func (x *CMsgTournamentItemEvent) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgTournamentItemEvent.ProtoReflect.Descriptor instead.
func (*CMsgTournamentItemEvent) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{36}
}

func (x *CMsgTournamentItemEvent) GetKillerAccountId() uint32 {
	if x != nil && x.KillerAccountId != nil {
		return *x.KillerAccountId
	}
	return 0
}

func (x *CMsgTournamentItemEvent) GetVictimAccountId() uint32 {
	if x != nil && x.VictimAccountId != nil {
		return *x.VictimAccountId
	}
	return 0
}

func (x *CMsgTournamentItemEvent) GetEventType() DOTA_TournamentEvents {
	if x != nil && x.EventType != nil {
		return *x.EventType
	}
	return Default_CMsgTournamentItemEvent_EventType
}

func (x *CMsgTournamentItemEvent) GetTvDelay() int32 {
	if x != nil && x.TvDelay != nil {
		return *x.TvDelay
	}
	return 0
}

func (x *CMsgTournamentItemEvent) GetDotaTime() int32 {
	if x != nil && x.DotaTime != nil {
		return *x.DotaTime
	}
	return 0
}

func (x *CMsgTournamentItemEvent) GetReplayTime() float32 {
	if x != nil && x.ReplayTime != nil {
		return *x.ReplayTime
	}
	return 0
}

func (x *CMsgTournamentItemEvent) GetLootList() string {
	if x != nil && x.LootList != nil {
		return *x.LootList
	}
	return ""
}

func (x *CMsgTournamentItemEvent) GetEventTeam() uint32 {
	if x != nil && x.EventTeam != nil {
		return *x.EventTeam
	}
	return 0
}

func (x *CMsgTournamentItemEvent) GetMultiKillCount() uint32 {
	if x != nil && x.MultiKillCount != nil {
		return *x.MultiKillCount
	}
	return 0
}

func (x *CMsgTournamentItemEvent) GetWinnerScore() uint32 {
	if x != nil && x.WinnerScore != nil {
		return *x.WinnerScore
	}
	return 0
}

func (x *CMsgTournamentItemEvent) GetLoserScore() uint32 {
	if x != nil && x.LoserScore != nil {
		return *x.LoserScore
	}
	return 0
}

func (x *CMsgTournamentItemEvent) GetHeroStatues() []*CProtoItemHeroStatue {
	if x != nil {
		return x.HeroStatues
	}
	return nil
}

type CMsgTournamentItemEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventType      *DOTA_TournamentEvents `protobuf:"varint,1,opt,name=event_type,json=eventType,enum=dota.DOTA_TournamentEvents,def=0" json:"event_type,omitempty"`
	ViewersGranted *uint32                `protobuf:"varint,6,opt,name=viewers_granted,json=viewersGranted" json:"viewers_granted,omitempty"`
}

// Default values for CMsgTournamentItemEventResponse fields.
const (
	Default_CMsgTournamentItemEventResponse_EventType = DOTA_TournamentEvents_TE_FIRST_BLOOD
)

func (x *CMsgTournamentItemEventResponse) Reset() {
	*x = CMsgTournamentItemEventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgTournamentItemEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgTournamentItemEventResponse) ProtoMessage() {}

func (x *CMsgTournamentItemEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgTournamentItemEventResponse.ProtoReflect.Descriptor instead.
func (*CMsgTournamentItemEventResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{37}
}

func (x *CMsgTournamentItemEventResponse) GetEventType() DOTA_TournamentEvents {
	if x != nil && x.EventType != nil {
		return *x.EventType
	}
	return Default_CMsgTournamentItemEventResponse_EventType
}

func (x *CMsgTournamentItemEventResponse) GetViewersGranted() uint32 {
	if x != nil && x.ViewersGranted != nil {
		return *x.ViewersGranted
	}
	return 0
}

type CMsgTeamFanfare struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId *uint64 `protobuf:"varint,1,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
}

func (x *CMsgTeamFanfare) Reset() {
	*x = CMsgTeamFanfare{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgTeamFanfare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgTeamFanfare) ProtoMessage() {}

func (x *CMsgTeamFanfare) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgTeamFanfare.ProtoReflect.Descriptor instead.
func (*CMsgTeamFanfare) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{38}
}

func (x *CMsgTeamFanfare) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

type CMsgResponseTeamFanfare struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FanfareGoodguys *uint32 `protobuf:"varint,1,opt,name=fanfare_goodguys,json=fanfareGoodguys" json:"fanfare_goodguys,omitempty"`
	FanfareBadguys  *uint32 `protobuf:"varint,2,opt,name=fanfare_badguys,json=fanfareBadguys" json:"fanfare_badguys,omitempty"`
}

func (x *CMsgResponseTeamFanfare) Reset() {
	*x = CMsgResponseTeamFanfare{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgResponseTeamFanfare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgResponseTeamFanfare) ProtoMessage() {}

func (x *CMsgResponseTeamFanfare) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgResponseTeamFanfare.ProtoReflect.Descriptor instead.
func (*CMsgResponseTeamFanfare) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{39}
}

func (x *CMsgResponseTeamFanfare) GetFanfareGoodguys() uint32 {
	if x != nil && x.FanfareGoodguys != nil {
		return *x.FanfareGoodguys
	}
	return 0
}

func (x *CMsgResponseTeamFanfare) GetFanfareBadguys() uint32 {
	if x != nil && x.FanfareBadguys != nil {
		return *x.FanfareBadguys
	}
	return 0
}

type CMsgGameServerUploadSaveGame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameTime       *uint32  `protobuf:"varint,1,opt,name=game_time,json=gameTime" json:"game_time,omitempty"`
	SaveGameData   []byte   `protobuf:"bytes,2,opt,name=save_game_data,json=saveGameData" json:"save_game_data,omitempty"`
	LobbyId        *uint64  `protobuf:"varint,3,opt,name=lobby_id,json=lobbyId" json:"lobby_id,omitempty"`
	PlayerSteamIds []uint64 `protobuf:"varint,4,rep,name=player_steam_ids,json=playerSteamIds" json:"player_steam_ids,omitempty"`
}

func (x *CMsgGameServerUploadSaveGame) Reset() {
	*x = CMsgGameServerUploadSaveGame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGameServerUploadSaveGame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameServerUploadSaveGame) ProtoMessage() {}

func (x *CMsgGameServerUploadSaveGame) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameServerUploadSaveGame.ProtoReflect.Descriptor instead.
func (*CMsgGameServerUploadSaveGame) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{40}
}

func (x *CMsgGameServerUploadSaveGame) GetGameTime() uint32 {
	if x != nil && x.GameTime != nil {
		return *x.GameTime
	}
	return 0
}

func (x *CMsgGameServerUploadSaveGame) GetSaveGameData() []byte {
	if x != nil {
		return x.SaveGameData
	}
	return nil
}

func (x *CMsgGameServerUploadSaveGame) GetLobbyId() uint64 {
	if x != nil && x.LobbyId != nil {
		return *x.LobbyId
	}
	return 0
}

func (x *CMsgGameServerUploadSaveGame) GetPlayerSteamIds() []uint64 {
	if x != nil {
		return x.PlayerSteamIds
	}
	return nil
}

type CMsgGameServerSaveGameResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *CMsgGameServerSaveGameResult_Result `protobuf:"varint,1,opt,name=result,enum=dota.CMsgGameServerSaveGameResult_Result,def=0" json:"result,omitempty"`
}

// Default values for CMsgGameServerSaveGameResult fields.
const (
	Default_CMsgGameServerSaveGameResult_Result = CMsgGameServerSaveGameResult_SaveSuccessful
)

func (x *CMsgGameServerSaveGameResult) Reset() {
	*x = CMsgGameServerSaveGameResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGameServerSaveGameResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameServerSaveGameResult) ProtoMessage() {}

func (x *CMsgGameServerSaveGameResult) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameServerSaveGameResult.ProtoReflect.Descriptor instead.
func (*CMsgGameServerSaveGameResult) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{41}
}

func (x *CMsgGameServerSaveGameResult) GetResult() CMsgGameServerSaveGameResult_Result {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgGameServerSaveGameResult_Result
}

type CMsgGameServerGetLoadGame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SaveId *uint32 `protobuf:"varint,1,opt,name=save_id,json=saveId" json:"save_id,omitempty"`
}

func (x *CMsgGameServerGetLoadGame) Reset() {
	*x = CMsgGameServerGetLoadGame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGameServerGetLoadGame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameServerGetLoadGame) ProtoMessage() {}

func (x *CMsgGameServerGetLoadGame) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameServerGetLoadGame.ProtoReflect.Descriptor instead.
func (*CMsgGameServerGetLoadGame) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{42}
}

func (x *CMsgGameServerGetLoadGame) GetSaveId() uint32 {
	if x != nil && x.SaveId != nil {
		return *x.SaveId
	}
	return 0
}

type CMsgGameServerGetLoadGameResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SaveGameData []byte `protobuf:"bytes,1,opt,name=save_game_data,json=saveGameData" json:"save_game_data,omitempty"`
}

func (x *CMsgGameServerGetLoadGameResult) Reset() {
	*x = CMsgGameServerGetLoadGameResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGameServerGetLoadGameResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameServerGetLoadGameResult) ProtoMessage() {}

func (x *CMsgGameServerGetLoadGameResult) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameServerGetLoadGameResult.ProtoReflect.Descriptor instead.
func (*CMsgGameServerGetLoadGameResult) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{43}
}

func (x *CMsgGameServerGetLoadGameResult) GetSaveGameData() []byte {
	if x != nil {
		return x.SaveGameData
	}
	return nil
}

type CMsgDOTAGenerateDiretidePrizeList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrizeList          *uint32 `protobuf:"varint,1,opt,name=prize_list,json=prizeList" json:"prize_list,omitempty"`
	HighestRoshanLevel *uint32 `protobuf:"varint,2,opt,name=highest_roshan_level,json=highestRoshanLevel" json:"highest_roshan_level,omitempty"`
}

func (x *CMsgDOTAGenerateDiretidePrizeList) Reset() {
	*x = CMsgDOTAGenerateDiretidePrizeList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAGenerateDiretidePrizeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAGenerateDiretidePrizeList) ProtoMessage() {}

func (x *CMsgDOTAGenerateDiretidePrizeList) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAGenerateDiretidePrizeList.ProtoReflect.Descriptor instead.
func (*CMsgDOTAGenerateDiretidePrizeList) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{44}
}

func (x *CMsgDOTAGenerateDiretidePrizeList) GetPrizeList() uint32 {
	if x != nil && x.PrizeList != nil {
		return *x.PrizeList
	}
	return 0
}

func (x *CMsgDOTAGenerateDiretidePrizeList) GetHighestRoshanLevel() uint32 {
	if x != nil && x.HighestRoshanLevel != nil {
		return *x.HighestRoshanLevel
	}
	return 0
}

type CMsgDOTAGenerateDiretidePrizeListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemDefs  []uint32 `protobuf:"varint,1,rep,name=item_defs,json=itemDefs" json:"item_defs,omitempty"`
	SteamIds  []uint64 `protobuf:"fixed64,2,rep,name=steam_ids,json=steamIds" json:"steam_ids,omitempty"`
	PrizeList *uint32  `protobuf:"varint,3,opt,name=prize_list,json=prizeList" json:"prize_list,omitempty"`
}

func (x *CMsgDOTAGenerateDiretidePrizeListResponse) Reset() {
	*x = CMsgDOTAGenerateDiretidePrizeListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAGenerateDiretidePrizeListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAGenerateDiretidePrizeListResponse) ProtoMessage() {}

func (x *CMsgDOTAGenerateDiretidePrizeListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAGenerateDiretidePrizeListResponse.ProtoReflect.Descriptor instead.
func (*CMsgDOTAGenerateDiretidePrizeListResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{45}
}

func (x *CMsgDOTAGenerateDiretidePrizeListResponse) GetItemDefs() []uint32 {
	if x != nil {
		return x.ItemDefs
	}
	return nil
}

func (x *CMsgDOTAGenerateDiretidePrizeListResponse) GetSteamIds() []uint64 {
	if x != nil {
		return x.SteamIds
	}
	return nil
}

func (x *CMsgDOTAGenerateDiretidePrizeListResponse) GetPrizeList() uint32 {
	if x != nil && x.PrizeList != nil {
		return *x.PrizeList
	}
	return 0
}

type CMsgDOTARewardDiretidePrizes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Team      *uint32 `protobuf:"varint,1,opt,name=team" json:"team,omitempty"`
	PrizeList *uint32 `protobuf:"varint,2,opt,name=prize_list,json=prizeList" json:"prize_list,omitempty"`
}

func (x *CMsgDOTARewardDiretidePrizes) Reset() {
	*x = CMsgDOTARewardDiretidePrizes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTARewardDiretidePrizes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTARewardDiretidePrizes) ProtoMessage() {}

func (x *CMsgDOTARewardDiretidePrizes) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTARewardDiretidePrizes.ProtoReflect.Descriptor instead.
func (*CMsgDOTARewardDiretidePrizes) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{46}
}

func (x *CMsgDOTARewardDiretidePrizes) GetTeam() uint32 {
	if x != nil && x.Team != nil {
		return *x.Team
	}
	return 0
}

func (x *CMsgDOTARewardDiretidePrizes) GetPrizeList() uint32 {
	if x != nil && x.PrizeList != nil {
		return *x.PrizeList
	}
	return 0
}

type CMsgDOTADiretidePrizesRewardedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrizeList *uint32 `protobuf:"varint,1,opt,name=prize_list,json=prizeList" json:"prize_list,omitempty"`
}

func (x *CMsgDOTADiretidePrizesRewardedResponse) Reset() {
	*x = CMsgDOTADiretidePrizesRewardedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTADiretidePrizesRewardedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTADiretidePrizesRewardedResponse) ProtoMessage() {}

func (x *CMsgDOTADiretidePrizesRewardedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTADiretidePrizesRewardedResponse.ProtoReflect.Descriptor instead.
func (*CMsgDOTADiretidePrizesRewardedResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{47}
}

func (x *CMsgDOTADiretidePrizesRewardedResponse) GetPrizeList() uint32 {
	if x != nil && x.PrizeList != nil {
		return *x.PrizeList
	}
	return 0
}

type CMsgDOTAAwardEventPoints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AwardPoints []*CMsgDOTAAwardEventPoints_AwardPoints `protobuf:"bytes,1,rep,name=award_points,json=awardPoints" json:"award_points,omitempty"`
	MatchId     *uint64                                 `protobuf:"varint,2,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	EventId     *EEvent                                 `protobuf:"varint,4,opt,name=event_id,json=eventId,enum=dota.EEvent,def=0" json:"event_id,omitempty"`
	Timestamp   *uint32                                 `protobuf:"varint,5,opt,name=timestamp" json:"timestamp,omitempty"`
	AuditAction *uint32                                 `protobuf:"varint,6,opt,name=audit_action,json=auditAction" json:"audit_action,omitempty"`
}

// Default values for CMsgDOTAAwardEventPoints fields.
const (
	Default_CMsgDOTAAwardEventPoints_EventId = EEvent_EVENT_ID_NONE
)

func (x *CMsgDOTAAwardEventPoints) Reset() {
	*x = CMsgDOTAAwardEventPoints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAAwardEventPoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAAwardEventPoints) ProtoMessage() {}

func (x *CMsgDOTAAwardEventPoints) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAAwardEventPoints.ProtoReflect.Descriptor instead.
func (*CMsgDOTAAwardEventPoints) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{48}
}

func (x *CMsgDOTAAwardEventPoints) GetAwardPoints() []*CMsgDOTAAwardEventPoints_AwardPoints {
	if x != nil {
		return x.AwardPoints
	}
	return nil
}

func (x *CMsgDOTAAwardEventPoints) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgDOTAAwardEventPoints) GetEventId() EEvent {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return Default_CMsgDOTAAwardEventPoints_EventId
}

func (x *CMsgDOTAAwardEventPoints) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *CMsgDOTAAwardEventPoints) GetAuditAction() uint32 {
	if x != nil && x.AuditAction != nil {
		return *x.AuditAction
	}
	return 0
}

type CMsgServerToGCSignoutAwardAdditionalDrops struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Drops   []*CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops `protobuf:"bytes,1,rep,name=drops" json:"drops,omitempty"`
	MatchId *uint64                                                      `protobuf:"varint,2,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
}

func (x *CMsgServerToGCSignoutAwardAdditionalDrops) Reset() {
	*x = CMsgServerToGCSignoutAwardAdditionalDrops{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerToGCSignoutAwardAdditionalDrops) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCSignoutAwardAdditionalDrops) ProtoMessage() {}

func (x *CMsgServerToGCSignoutAwardAdditionalDrops) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCSignoutAwardAdditionalDrops.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCSignoutAwardAdditionalDrops) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{49}
}

func (x *CMsgServerToGCSignoutAwardAdditionalDrops) GetDrops() []*CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops {
	if x != nil {
		return x.Drops
	}
	return nil
}

func (x *CMsgServerToGCSignoutAwardAdditionalDrops) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

type CMsgDOTAFrostivusTimeElapsed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Seconds *uint32                              `protobuf:"varint,1,opt,name=seconds" json:"seconds,omitempty"`
	Users   []*CMsgDOTAFrostivusTimeElapsed_User `protobuf:"bytes,2,rep,name=users" json:"users,omitempty"`
	MatchId *uint64                              `protobuf:"varint,3,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
}

func (x *CMsgDOTAFrostivusTimeElapsed) Reset() {
	*x = CMsgDOTAFrostivusTimeElapsed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAFrostivusTimeElapsed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAFrostivusTimeElapsed) ProtoMessage() {}

func (x *CMsgDOTAFrostivusTimeElapsed) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAFrostivusTimeElapsed.ProtoReflect.Descriptor instead.
func (*CMsgDOTAFrostivusTimeElapsed) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{50}
}

func (x *CMsgDOTAFrostivusTimeElapsed) GetSeconds() uint32 {
	if x != nil && x.Seconds != nil {
		return *x.Seconds
	}
	return 0
}

func (x *CMsgDOTAFrostivusTimeElapsed) GetUsers() []*CMsgDOTAFrostivusTimeElapsed_User {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *CMsgDOTAFrostivusTimeElapsed) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

type CMsgGCToServerPingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId   *uint64 `protobuf:"fixed64,1,opt,name=request_id,json=requestId" json:"request_id,omitempty"`
	RequestTime *uint64 `protobuf:"varint,2,opt,name=request_time,json=requestTime" json:"request_time,omitempty"`
}

func (x *CMsgGCToServerPingRequest) Reset() {
	*x = CMsgGCToServerPingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCToServerPingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToServerPingRequest) ProtoMessage() {}

func (x *CMsgGCToServerPingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToServerPingRequest.ProtoReflect.Descriptor instead.
func (*CMsgGCToServerPingRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{51}
}

func (x *CMsgGCToServerPingRequest) GetRequestId() uint64 {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return 0
}

func (x *CMsgGCToServerPingRequest) GetRequestTime() uint64 {
	if x != nil && x.RequestTime != nil {
		return *x.RequestTime
	}
	return 0
}

type CMsgGCToServerPingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId   *uint64 `protobuf:"fixed64,1,opt,name=request_id,json=requestId" json:"request_id,omitempty"`
	RequestTime *uint64 `protobuf:"varint,2,opt,name=request_time,json=requestTime" json:"request_time,omitempty"`
	Cluster     *uint32 `protobuf:"varint,3,opt,name=cluster" json:"cluster,omitempty"`
}

func (x *CMsgGCToServerPingResponse) Reset() {
	*x = CMsgGCToServerPingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCToServerPingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToServerPingResponse) ProtoMessage() {}

func (x *CMsgGCToServerPingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToServerPingResponse.ProtoReflect.Descriptor instead.
func (*CMsgGCToServerPingResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{52}
}

func (x *CMsgGCToServerPingResponse) GetRequestId() uint64 {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return 0
}

func (x *CMsgGCToServerPingResponse) GetRequestTime() uint64 {
	if x != nil && x.RequestTime != nil {
		return *x.RequestTime
	}
	return 0
}

func (x *CMsgGCToServerPingResponse) GetCluster() uint32 {
	if x != nil && x.Cluster != nil {
		return *x.Cluster
	}
	return 0
}

type CMsgGCToServerConsoleCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsoleCommand *string `protobuf:"bytes,1,opt,name=console_command,json=consoleCommand" json:"console_command,omitempty"`
}

func (x *CMsgGCToServerConsoleCommand) Reset() {
	*x = CMsgGCToServerConsoleCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCToServerConsoleCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToServerConsoleCommand) ProtoMessage() {}

func (x *CMsgGCToServerConsoleCommand) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToServerConsoleCommand.ProtoReflect.Descriptor instead.
func (*CMsgGCToServerConsoleCommand) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{53}
}

func (x *CMsgGCToServerConsoleCommand) GetConsoleCommand() string {
	if x != nil && x.ConsoleCommand != nil {
		return *x.ConsoleCommand
	}
	return ""
}

type CMsgServerGetEventPoints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId   *EEvent  `protobuf:"varint,1,opt,name=event_id,json=eventId,enum=dota.EEvent,def=0" json:"event_id,omitempty"`
	AccountId []uint32 `protobuf:"varint,2,rep,name=account_id,json=accountId" json:"account_id,omitempty"`
}

// Default values for CMsgServerGetEventPoints fields.
const (
	Default_CMsgServerGetEventPoints_EventId = EEvent_EVENT_ID_NONE
)

func (x *CMsgServerGetEventPoints) Reset() {
	*x = CMsgServerGetEventPoints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerGetEventPoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerGetEventPoints) ProtoMessage() {}

func (x *CMsgServerGetEventPoints) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerGetEventPoints.ProtoReflect.Descriptor instead.
func (*CMsgServerGetEventPoints) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{54}
}

func (x *CMsgServerGetEventPoints) GetEventId() EEvent {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return Default_CMsgServerGetEventPoints_EventId
}

func (x *CMsgServerGetEventPoints) GetAccountId() []uint32 {
	if x != nil {
		return x.AccountId
	}
	return nil
}

type CMsgServerGetEventPointsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId *EEvent                                    `protobuf:"varint,1,opt,name=event_id,json=eventId,enum=dota.EEvent,def=0" json:"event_id,omitempty"`
	Points  []*CMsgServerGetEventPointsResponse_Points `protobuf:"bytes,2,rep,name=points" json:"points,omitempty"`
}

// Default values for CMsgServerGetEventPointsResponse fields.
const (
	Default_CMsgServerGetEventPointsResponse_EventId = EEvent_EVENT_ID_NONE
)

func (x *CMsgServerGetEventPointsResponse) Reset() {
	*x = CMsgServerGetEventPointsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerGetEventPointsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerGetEventPointsResponse) ProtoMessage() {}

func (x *CMsgServerGetEventPointsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerGetEventPointsResponse.ProtoReflect.Descriptor instead.
func (*CMsgServerGetEventPointsResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{55}
}

func (x *CMsgServerGetEventPointsResponse) GetEventId() EEvent {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return Default_CMsgServerGetEventPointsResponse_EventId
}

func (x *CMsgServerGetEventPointsResponse) GetPoints() []*CMsgServerGetEventPointsResponse_Points {
	if x != nil {
		return x.Points
	}
	return nil
}

type CMsgServerGrantSurveyPermission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Surveys []*CMsgServerGrantSurveyPermission_Survey `protobuf:"bytes,1,rep,name=surveys" json:"surveys,omitempty"`
}

func (x *CMsgServerGrantSurveyPermission) Reset() {
	*x = CMsgServerGrantSurveyPermission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerGrantSurveyPermission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerGrantSurveyPermission) ProtoMessage() {}

func (x *CMsgServerGrantSurveyPermission) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerGrantSurveyPermission.ProtoReflect.Descriptor instead.
func (*CMsgServerGrantSurveyPermission) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{56}
}

func (x *CMsgServerGrantSurveyPermission) GetSurveys() []*CMsgServerGrantSurveyPermission_Survey {
	if x != nil {
		return x.Surveys
	}
	return nil
}

type CMsgServerGrantSurveyPermissionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *uint32 `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
}

func (x *CMsgServerGrantSurveyPermissionResponse) Reset() {
	*x = CMsgServerGrantSurveyPermissionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerGrantSurveyPermissionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerGrantSurveyPermissionResponse) ProtoMessage() {}

func (x *CMsgServerGrantSurveyPermissionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerGrantSurveyPermissionResponse.ProtoReflect.Descriptor instead.
func (*CMsgServerGrantSurveyPermissionResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{57}
}

func (x *CMsgServerGrantSurveyPermissionResponse) GetResult() uint32 {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return 0
}

type CMsgServerToGCMatchConnectionStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId   *uint64                                      `protobuf:"varint,1,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	RegionId  *uint32                                      `protobuf:"varint,2,opt,name=region_id,json=regionId" json:"region_id,omitempty"`
	LeagueId  *uint32                                      `protobuf:"varint,3,opt,name=league_id,json=leagueId" json:"league_id,omitempty"`
	Players   []*CMsgServerToGCMatchConnectionStats_Player `protobuf:"bytes,4,rep,name=players" json:"players,omitempty"`
	ClusterId *uint32                                      `protobuf:"varint,5,opt,name=cluster_id,json=clusterId" json:"cluster_id,omitempty"`
}

func (x *CMsgServerToGCMatchConnectionStats) Reset() {
	*x = CMsgServerToGCMatchConnectionStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerToGCMatchConnectionStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCMatchConnectionStats) ProtoMessage() {}

func (x *CMsgServerToGCMatchConnectionStats) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCMatchConnectionStats.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCMatchConnectionStats) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{58}
}

func (x *CMsgServerToGCMatchConnectionStats) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgServerToGCMatchConnectionStats) GetRegionId() uint32 {
	if x != nil && x.RegionId != nil {
		return *x.RegionId
	}
	return 0
}

func (x *CMsgServerToGCMatchConnectionStats) GetLeagueId() uint32 {
	if x != nil && x.LeagueId != nil {
		return *x.LeagueId
	}
	return 0
}

func (x *CMsgServerToGCMatchConnectionStats) GetPlayers() []*CMsgServerToGCMatchConnectionStats_Player {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *CMsgServerToGCMatchConnectionStats) GetClusterId() uint32 {
	if x != nil && x.ClusterId != nil {
		return *x.ClusterId
	}
	return 0
}

type CMsgServerGCUpdateSpectatorCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpectatorCount *uint32 `protobuf:"varint,1,opt,name=spectator_count,json=spectatorCount" json:"spectator_count,omitempty"`
}

func (x *CMsgServerGCUpdateSpectatorCount) Reset() {
	*x = CMsgServerGCUpdateSpectatorCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerGCUpdateSpectatorCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerGCUpdateSpectatorCount) ProtoMessage() {}

func (x *CMsgServerGCUpdateSpectatorCount) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerGCUpdateSpectatorCount.ProtoReflect.Descriptor instead.
func (*CMsgServerGCUpdateSpectatorCount) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{59}
}

func (x *CMsgServerGCUpdateSpectatorCount) GetSpectatorCount() uint32 {
	if x != nil && x.SpectatorCount != nil {
		return *x.SpectatorCount
	}
	return 0
}

type CSerializedCombatLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version    *uint32                          `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Dictionary *CSerializedCombatLog_Dictionary `protobuf:"bytes,2,opt,name=dictionary" json:"dictionary,omitempty"`
	Entries    []*CMsgDOTACombatLogEntry        `protobuf:"bytes,3,rep,name=entries" json:"entries,omitempty"`
}

func (x *CSerializedCombatLog) Reset() {
	*x = CSerializedCombatLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSerializedCombatLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSerializedCombatLog) ProtoMessage() {}

func (x *CSerializedCombatLog) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSerializedCombatLog.ProtoReflect.Descriptor instead.
func (*CSerializedCombatLog) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{60}
}

func (x *CSerializedCombatLog) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *CSerializedCombatLog) GetDictionary() *CSerializedCombatLog_Dictionary {
	if x != nil {
		return x.Dictionary
	}
	return nil
}

func (x *CSerializedCombatLog) GetEntries() []*CMsgDOTACombatLogEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

type CMsgServerToGCGetAdditionalEquips struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountIds []uint32 `protobuf:"varint,1,rep,name=account_ids,json=accountIds" json:"account_ids,omitempty"`
}

func (x *CMsgServerToGCGetAdditionalEquips) Reset() {
	*x = CMsgServerToGCGetAdditionalEquips{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerToGCGetAdditionalEquips) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCGetAdditionalEquips) ProtoMessage() {}

func (x *CMsgServerToGCGetAdditionalEquips) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCGetAdditionalEquips.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCGetAdditionalEquips) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{61}
}

func (x *CMsgServerToGCGetAdditionalEquips) GetAccountIds() []uint32 {
	if x != nil {
		return x.AccountIds
	}
	return nil
}

type CMsgServerToGCGetAdditionalEquipsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Equips []*CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips `protobuf:"bytes,1,rep,name=equips" json:"equips,omitempty"`
}

func (x *CMsgServerToGCGetAdditionalEquipsResponse) Reset() {
	*x = CMsgServerToGCGetAdditionalEquipsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerToGCGetAdditionalEquipsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCGetAdditionalEquipsResponse) ProtoMessage() {}

func (x *CMsgServerToGCGetAdditionalEquipsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCGetAdditionalEquipsResponse.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCGetAdditionalEquipsResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{62}
}

func (x *CMsgServerToGCGetAdditionalEquipsResponse) GetEquips() []*CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips {
	if x != nil {
		return x.Equips
	}
	return nil
}

type CMsgServerToGCGetProfileCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountIds []uint32 `protobuf:"varint,1,rep,name=account_ids,json=accountIds" json:"account_ids,omitempty"`
}

func (x *CMsgServerToGCGetProfileCard) Reset() {
	*x = CMsgServerToGCGetProfileCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerToGCGetProfileCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCGetProfileCard) ProtoMessage() {}

func (x *CMsgServerToGCGetProfileCard) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCGetProfileCard.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCGetProfileCard) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{63}
}

func (x *CMsgServerToGCGetProfileCard) GetAccountIds() []uint32 {
	if x != nil {
		return x.AccountIds
	}
	return nil
}

type CMsgServerToGCGetProfileCardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cards []*CMsgDOTAProfileCard `protobuf:"bytes,1,rep,name=cards" json:"cards,omitempty"`
}

func (x *CMsgServerToGCGetProfileCardResponse) Reset() {
	*x = CMsgServerToGCGetProfileCardResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerToGCGetProfileCardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCGetProfileCardResponse) ProtoMessage() {}

func (x *CMsgServerToGCGetProfileCardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCGetProfileCardResponse.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCGetProfileCardResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{64}
}

func (x *CMsgServerToGCGetProfileCardResponse) GetCards() []*CMsgDOTAProfileCard {
	if x != nil {
		return x.Cards
	}
	return nil
}

type CMsgServerToGCVictoryPredictions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Records []*CMsgServerToGCVictoryPredictions_Record `protobuf:"bytes,1,rep,name=records" json:"records,omitempty"`
}

func (x *CMsgServerToGCVictoryPredictions) Reset() {
	*x = CMsgServerToGCVictoryPredictions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerToGCVictoryPredictions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCVictoryPredictions) ProtoMessage() {}

func (x *CMsgServerToGCVictoryPredictions) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCVictoryPredictions.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCVictoryPredictions) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{65}
}

func (x *CMsgServerToGCVictoryPredictions) GetRecords() []*CMsgServerToGCVictoryPredictions_Record {
	if x != nil {
		return x.Records
	}
	return nil
}

type CMsgSuspiciousActivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId *uint32              `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Activity  *ESuspiciousActivity `protobuf:"varint,2,opt,name=activity,enum=dota.ESuspiciousActivity,def=1" json:"activity,omitempty"`
	Intdata1  *int32               `protobuf:"zigzag32,3,opt,name=intdata1" json:"intdata1,omitempty"`
	Intdata2  *int32               `protobuf:"zigzag32,4,opt,name=intdata2" json:"intdata2,omitempty"`
	Time      *uint32              `protobuf:"varint,5,opt,name=time" json:"time,omitempty"`
}

// Default values for CMsgSuspiciousActivity fields.
const (
	Default_CMsgSuspiciousActivity_Activity = ESuspiciousActivity_k_ESuspiciousActivity_VAC_MultipleInstances
)

func (x *CMsgSuspiciousActivity) Reset() {
	*x = CMsgSuspiciousActivity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSuspiciousActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSuspiciousActivity) ProtoMessage() {}

func (x *CMsgSuspiciousActivity) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSuspiciousActivity.ProtoReflect.Descriptor instead.
func (*CMsgSuspiciousActivity) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{66}
}

func (x *CMsgSuspiciousActivity) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgSuspiciousActivity) GetActivity() ESuspiciousActivity {
	if x != nil && x.Activity != nil {
		return *x.Activity
	}
	return Default_CMsgSuspiciousActivity_Activity
}

func (x *CMsgSuspiciousActivity) GetIntdata1() int32 {
	if x != nil && x.Intdata1 != nil {
		return *x.Intdata1
	}
	return 0
}

func (x *CMsgSuspiciousActivity) GetIntdata2() int32 {
	if x != nil && x.Intdata2 != nil {
		return *x.Intdata2
	}
	return 0
}

func (x *CMsgSuspiciousActivity) GetTime() uint32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

type CMsgServerToGCRequestStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgServerToGCRequestStatus) Reset() {
	*x = CMsgServerToGCRequestStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerToGCRequestStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCRequestStatus) ProtoMessage() {}

func (x *CMsgServerToGCRequestStatus) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCRequestStatus.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCRequestStatus) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{67}
}

type CMsgServerToGCRequestStatus_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *uint32 `protobuf:"varint,1,opt,name=response" json:"response,omitempty"`
}

func (x *CMsgServerToGCRequestStatus_Response) Reset() {
	*x = CMsgServerToGCRequestStatus_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerToGCRequestStatus_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCRequestStatus_Response) ProtoMessage() {}

func (x *CMsgServerToGCRequestStatus_Response) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCRequestStatus_Response.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCRequestStatus_Response) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{68}
}

func (x *CMsgServerToGCRequestStatus_Response) GetResponse() uint32 {
	if x != nil && x.Response != nil {
		return *x.Response
	}
	return 0
}

type CMsgSignOutAssassinMiniGameInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WinningPlayers       []uint64 `protobuf:"fixed64,1,rep,name=winning_players,json=winningPlayers" json:"winning_players,omitempty"`
	LosingPlayers        []uint64 `protobuf:"fixed64,2,rep,name=losing_players,json=losingPlayers" json:"losing_players,omitempty"`
	ArcanaOwners         []uint64 `protobuf:"fixed64,3,rep,name=arcana_owners,json=arcanaOwners" json:"arcana_owners,omitempty"`
	AssassinWon          *bool    `protobuf:"varint,4,opt,name=assassin_won,json=assassinWon" json:"assassin_won,omitempty"`
	TargetHeroId         *uint32  `protobuf:"varint,5,opt,name=target_hero_id,json=targetHeroId" json:"target_hero_id,omitempty"`
	ContractCompleted    *bool    `protobuf:"varint,6,opt,name=contract_completed,json=contractCompleted" json:"contract_completed,omitempty"`
	ContractCompleteTime *float32 `protobuf:"fixed32,7,opt,name=contract_complete_time,json=contractCompleteTime" json:"contract_complete_time,omitempty"`
	PaIsRadiant          *bool    `protobuf:"varint,8,opt,name=pa_is_radiant,json=paIsRadiant" json:"pa_is_radiant,omitempty"`
}

func (x *CMsgSignOutAssassinMiniGameInfo) Reset() {
	*x = CMsgSignOutAssassinMiniGameInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSignOutAssassinMiniGameInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSignOutAssassinMiniGameInfo) ProtoMessage() {}

func (x *CMsgSignOutAssassinMiniGameInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSignOutAssassinMiniGameInfo.ProtoReflect.Descriptor instead.
func (*CMsgSignOutAssassinMiniGameInfo) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{69}
}

func (x *CMsgSignOutAssassinMiniGameInfo) GetWinningPlayers() []uint64 {
	if x != nil {
		return x.WinningPlayers
	}
	return nil
}

func (x *CMsgSignOutAssassinMiniGameInfo) GetLosingPlayers() []uint64 {
	if x != nil {
		return x.LosingPlayers
	}
	return nil
}

func (x *CMsgSignOutAssassinMiniGameInfo) GetArcanaOwners() []uint64 {
	if x != nil {
		return x.ArcanaOwners
	}
	return nil
}

func (x *CMsgSignOutAssassinMiniGameInfo) GetAssassinWon() bool {
	if x != nil && x.AssassinWon != nil {
		return *x.AssassinWon
	}
	return false
}

func (x *CMsgSignOutAssassinMiniGameInfo) GetTargetHeroId() uint32 {
	if x != nil && x.TargetHeroId != nil {
		return *x.TargetHeroId
	}
	return 0
}

func (x *CMsgSignOutAssassinMiniGameInfo) GetContractCompleted() bool {
	if x != nil && x.ContractCompleted != nil {
		return *x.ContractCompleted
	}
	return false
}

func (x *CMsgSignOutAssassinMiniGameInfo) GetContractCompleteTime() float32 {
	if x != nil && x.ContractCompleteTime != nil {
		return *x.ContractCompleteTime
	}
	return 0
}

func (x *CMsgSignOutAssassinMiniGameInfo) GetPaIsRadiant() bool {
	if x != nil && x.PaIsRadiant != nil {
		return *x.PaIsRadiant
	}
	return false
}

type CMsgServerToGCGetIngameEventData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Event *EEvent `protobuf:"varint,1,opt,name=event,enum=dota.EEvent,def=0" json:"event,omitempty"`
}

// Default values for CMsgServerToGCGetIngameEventData fields.
const (
	Default_CMsgServerToGCGetIngameEventData_Event = EEvent_EVENT_ID_NONE
)

func (x *CMsgServerToGCGetIngameEventData) Reset() {
	*x = CMsgServerToGCGetIngameEventData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerToGCGetIngameEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCGetIngameEventData) ProtoMessage() {}

func (x *CMsgServerToGCGetIngameEventData) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCGetIngameEventData.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCGetIngameEventData) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{70}
}

func (x *CMsgServerToGCGetIngameEventData) GetEvent() EEvent {
	if x != nil && x.Event != nil {
		return *x.Event
	}
	return Default_CMsgServerToGCGetIngameEventData_Event
}

type CMsgGCToServerIngameEventDataOraclePA struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetHeroIds []uint32 `protobuf:"varint,1,rep,name=target_hero_ids,json=targetHeroIds" json:"target_hero_ids,omitempty"`
}

func (x *CMsgGCToServerIngameEventDataOraclePA) Reset() {
	*x = CMsgGCToServerIngameEventDataOraclePA{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCToServerIngameEventDataOraclePA) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToServerIngameEventDataOraclePA) ProtoMessage() {}

func (x *CMsgGCToServerIngameEventDataOraclePA) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToServerIngameEventDataOraclePA.ProtoReflect.Descriptor instead.
func (*CMsgGCToServerIngameEventDataOraclePA) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{71}
}

func (x *CMsgGCToServerIngameEventDataOraclePA) GetTargetHeroIds() []uint32 {
	if x != nil {
		return x.TargetHeroIds
	}
	return nil
}

type CMsgServerToGCKillSummaries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IngameeventId *uint32                                    `protobuf:"varint,1,opt,name=ingameevent_id,json=ingameeventId" json:"ingameevent_id,omitempty"`
	Summaries     []*CMsgServerToGCKillSummaries_KillSummary `protobuf:"bytes,2,rep,name=summaries" json:"summaries,omitempty"`
}

func (x *CMsgServerToGCKillSummaries) Reset() {
	*x = CMsgServerToGCKillSummaries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerToGCKillSummaries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCKillSummaries) ProtoMessage() {}

func (x *CMsgServerToGCKillSummaries) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCKillSummaries.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCKillSummaries) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{72}
}

func (x *CMsgServerToGCKillSummaries) GetIngameeventId() uint32 {
	if x != nil && x.IngameeventId != nil {
		return *x.IngameeventId
	}
	return 0
}

func (x *CMsgServerToGCKillSummaries) GetSummaries() []*CMsgServerToGCKillSummaries_KillSummary {
	if x != nil {
		return x.Summaries
	}
	return nil
}

type CMsgGCToServerPredictionResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId   *uint32                                      `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	MatchId     *uint64                                      `protobuf:"varint,2,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	Correct     *bool                                        `protobuf:"varint,3,opt,name=correct" json:"correct,omitempty"`
	Predictions []*CMsgGCToServerPredictionResult_Prediction `protobuf:"bytes,4,rep,name=predictions" json:"predictions,omitempty"`
}

func (x *CMsgGCToServerPredictionResult) Reset() {
	*x = CMsgGCToServerPredictionResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCToServerPredictionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToServerPredictionResult) ProtoMessage() {}

func (x *CMsgGCToServerPredictionResult) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToServerPredictionResult.ProtoReflect.Descriptor instead.
func (*CMsgGCToServerPredictionResult) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{73}
}

func (x *CMsgGCToServerPredictionResult) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgGCToServerPredictionResult) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgGCToServerPredictionResult) GetCorrect() bool {
	if x != nil && x.Correct != nil {
		return *x.Correct
	}
	return false
}

func (x *CMsgGCToServerPredictionResult) GetPredictions() []*CMsgGCToServerPredictionResult_Prediction {
	if x != nil {
		return x.Predictions
	}
	return nil
}

type CMsgServerToGCLockCharmTrading struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	ItemId    *uint64 `protobuf:"varint,2,opt,name=item_id,json=itemId" json:"item_id,omitempty"`
}

func (x *CMsgServerToGCLockCharmTrading) Reset() {
	*x = CMsgServerToGCLockCharmTrading{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerToGCLockCharmTrading) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCLockCharmTrading) ProtoMessage() {}

func (x *CMsgServerToGCLockCharmTrading) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCLockCharmTrading.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCLockCharmTrading) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{74}
}

func (x *CMsgServerToGCLockCharmTrading) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgServerToGCLockCharmTrading) GetItemId() uint64 {
	if x != nil && x.ItemId != nil {
		return *x.ItemId
	}
	return 0
}

type CMsgSignOutUpdatePlayerChallenge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId *uint32                                       `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Completed []*CMsgSignOutUpdatePlayerChallenge_Challenge `protobuf:"bytes,2,rep,name=completed" json:"completed,omitempty"`
	Rerolled  []*CMsgSignOutUpdatePlayerChallenge_Challenge `protobuf:"bytes,3,rep,name=rerolled" json:"rerolled,omitempty"`
	MatchId   *uint64                                       `protobuf:"varint,4,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	HeroId    *uint32                                       `protobuf:"varint,5,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
}

func (x *CMsgSignOutUpdatePlayerChallenge) Reset() {
	*x = CMsgSignOutUpdatePlayerChallenge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSignOutUpdatePlayerChallenge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSignOutUpdatePlayerChallenge) ProtoMessage() {}

func (x *CMsgSignOutUpdatePlayerChallenge) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSignOutUpdatePlayerChallenge.ProtoReflect.Descriptor instead.
func (*CMsgSignOutUpdatePlayerChallenge) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{75}
}

func (x *CMsgSignOutUpdatePlayerChallenge) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgSignOutUpdatePlayerChallenge) GetCompleted() []*CMsgSignOutUpdatePlayerChallenge_Challenge {
	if x != nil {
		return x.Completed
	}
	return nil
}

func (x *CMsgSignOutUpdatePlayerChallenge) GetRerolled() []*CMsgSignOutUpdatePlayerChallenge_Challenge {
	if x != nil {
		return x.Rerolled
	}
	return nil
}

func (x *CMsgSignOutUpdatePlayerChallenge) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgSignOutUpdatePlayerChallenge) GetHeroId() uint32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

type CMsgServerToGCRerollPlayerChallenge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId *uint32                              `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	RerollMsg *CMsgClientToGCRerollPlayerChallenge `protobuf:"bytes,2,opt,name=reroll_msg,json=rerollMsg" json:"reroll_msg,omitempty"`
}

func (x *CMsgServerToGCRerollPlayerChallenge) Reset() {
	*x = CMsgServerToGCRerollPlayerChallenge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerToGCRerollPlayerChallenge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCRerollPlayerChallenge) ProtoMessage() {}

func (x *CMsgServerToGCRerollPlayerChallenge) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCRerollPlayerChallenge.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCRerollPlayerChallenge) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{76}
}

func (x *CMsgServerToGCRerollPlayerChallenge) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgServerToGCRerollPlayerChallenge) GetRerollMsg() *CMsgClientToGCRerollPlayerChallenge {
	if x != nil {
		return x.RerollMsg
	}
	return nil
}

type CMsgSignOutWagerStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Players []*CMsgSignOutWagerStats_Player `protobuf:"bytes,1,rep,name=players" json:"players,omitempty"`
	EventId *EEvent                         `protobuf:"varint,2,opt,name=event_id,json=eventId,enum=dota.EEvent,def=0" json:"event_id,omitempty"`
}

// Default values for CMsgSignOutWagerStats fields.
const (
	Default_CMsgSignOutWagerStats_EventId = EEvent_EVENT_ID_NONE
)

func (x *CMsgSignOutWagerStats) Reset() {
	*x = CMsgSignOutWagerStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSignOutWagerStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSignOutWagerStats) ProtoMessage() {}

func (x *CMsgSignOutWagerStats) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSignOutWagerStats.ProtoReflect.Descriptor instead.
func (*CMsgSignOutWagerStats) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{77}
}

func (x *CMsgSignOutWagerStats) GetPlayers() []*CMsgSignOutWagerStats_Player {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *CMsgSignOutWagerStats) GetEventId() EEvent {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return Default_CMsgSignOutWagerStats_EventId
}

type CMsgSpendWager struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Players       []*CMsgSpendWager_Player `protobuf:"bytes,1,rep,name=players" json:"players,omitempty"`
	EventId       *EEvent                  `protobuf:"varint,2,opt,name=event_id,json=eventId,enum=dota.EEvent,def=0" json:"event_id,omitempty"`
	Timestamp     *uint32                  `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	MatchId       *uint64                  `protobuf:"varint,4,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	ServerSteamId *uint64                  `protobuf:"varint,5,opt,name=server_steam_id,json=serverSteamId" json:"server_steam_id,omitempty"`
}

// Default values for CMsgSpendWager fields.
const (
	Default_CMsgSpendWager_EventId = EEvent_EVENT_ID_NONE
)

func (x *CMsgSpendWager) Reset() {
	*x = CMsgSpendWager{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSpendWager) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSpendWager) ProtoMessage() {}

func (x *CMsgSpendWager) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSpendWager.ProtoReflect.Descriptor instead.
func (*CMsgSpendWager) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{78}
}

func (x *CMsgSpendWager) GetPlayers() []*CMsgSpendWager_Player {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *CMsgSpendWager) GetEventId() EEvent {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return Default_CMsgSpendWager_EventId
}

func (x *CMsgSpendWager) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *CMsgSpendWager) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgSpendWager) GetServerSteamId() uint64 {
	if x != nil && x.ServerSteamId != nil {
		return *x.ServerSteamId
	}
	return 0
}

type CMsgSignOutXPCoins struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Players   []*CMsgSignOutXPCoins_Player `protobuf:"bytes,1,rep,name=players" json:"players,omitempty"`
	EventId   *EEvent                      `protobuf:"varint,2,opt,name=event_id,json=eventId,enum=dota.EEvent,def=0" json:"event_id,omitempty"`
	MatchId   *uint64                      `protobuf:"varint,3,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	Timestamp *uint32                      `protobuf:"varint,4,opt,name=timestamp" json:"timestamp,omitempty"`
}

// Default values for CMsgSignOutXPCoins fields.
const (
	Default_CMsgSignOutXPCoins_EventId = EEvent_EVENT_ID_NONE
)

func (x *CMsgSignOutXPCoins) Reset() {
	*x = CMsgSignOutXPCoins{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSignOutXPCoins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSignOutXPCoins) ProtoMessage() {}

func (x *CMsgSignOutXPCoins) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSignOutXPCoins.ProtoReflect.Descriptor instead.
func (*CMsgSignOutXPCoins) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{79}
}

func (x *CMsgSignOutXPCoins) GetPlayers() []*CMsgSignOutXPCoins_Player {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *CMsgSignOutXPCoins) GetEventId() EEvent {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return Default_CMsgSignOutXPCoins_EventId
}

func (x *CMsgSignOutXPCoins) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgSignOutXPCoins) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

type CMsgSignOutBounties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bounties  []*CMsgSignOutBounties_Bounty `protobuf:"bytes,1,rep,name=bounties" json:"bounties,omitempty"`
	EventId   *EEvent                       `protobuf:"varint,2,opt,name=event_id,json=eventId,enum=dota.EEvent,def=0" json:"event_id,omitempty"`
	MatchId   *uint64                       `protobuf:"varint,3,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	Timestamp *uint32                       `protobuf:"varint,4,opt,name=timestamp" json:"timestamp,omitempty"`
}

// Default values for CMsgSignOutBounties fields.
const (
	Default_CMsgSignOutBounties_EventId = EEvent_EVENT_ID_NONE
)

func (x *CMsgSignOutBounties) Reset() {
	*x = CMsgSignOutBounties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSignOutBounties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSignOutBounties) ProtoMessage() {}

func (x *CMsgSignOutBounties) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSignOutBounties.ProtoReflect.Descriptor instead.
func (*CMsgSignOutBounties) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{80}
}

func (x *CMsgSignOutBounties) GetBounties() []*CMsgSignOutBounties_Bounty {
	if x != nil {
		return x.Bounties
	}
	return nil
}

func (x *CMsgSignOutBounties) GetEventId() EEvent {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return Default_CMsgSignOutBounties_EventId
}

func (x *CMsgSignOutBounties) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgSignOutBounties) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

type CMsgSignOutCommunityGoalProgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId         *EEvent                                                `protobuf:"varint,1,opt,name=event_id,json=eventId,enum=dota.EEvent,def=0" json:"event_id,omitempty"`
	EventIncrements []*CMsgSignOutCommunityGoalProgress_EventGoalIncrement `protobuf:"bytes,2,rep,name=event_increments,json=eventIncrements" json:"event_increments,omitempty"`
}

// Default values for CMsgSignOutCommunityGoalProgress fields.
const (
	Default_CMsgSignOutCommunityGoalProgress_EventId = EEvent_EVENT_ID_NONE
)

func (x *CMsgSignOutCommunityGoalProgress) Reset() {
	*x = CMsgSignOutCommunityGoalProgress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSignOutCommunityGoalProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSignOutCommunityGoalProgress) ProtoMessage() {}

func (x *CMsgSignOutCommunityGoalProgress) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSignOutCommunityGoalProgress.ProtoReflect.Descriptor instead.
func (*CMsgSignOutCommunityGoalProgress) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{81}
}

func (x *CMsgSignOutCommunityGoalProgress) GetEventId() EEvent {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return Default_CMsgSignOutCommunityGoalProgress_EventId
}

func (x *CMsgSignOutCommunityGoalProgress) GetEventIncrements() []*CMsgSignOutCommunityGoalProgress_EventGoalIncrement {
	if x != nil {
		return x.EventIncrements
	}
	return nil
}

type CMsgServerToGCPostMatchTip struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId            *EEvent `protobuf:"varint,1,opt,name=event_id,json=eventId,enum=dota.EEvent,def=0" json:"event_id,omitempty"`
	MatchId            *uint64 `protobuf:"varint,2,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	TipperAccountId    *uint32 `protobuf:"varint,3,opt,name=tipper_account_id,json=tipperAccountId" json:"tipper_account_id,omitempty"`
	RecipientAccountId *uint32 `protobuf:"varint,4,opt,name=recipient_account_id,json=recipientAccountId" json:"recipient_account_id,omitempty"`
	TipAmount          *uint32 `protobuf:"varint,5,opt,name=tip_amount,json=tipAmount" json:"tip_amount,omitempty"`
}

// Default values for CMsgServerToGCPostMatchTip fields.
const (
	Default_CMsgServerToGCPostMatchTip_EventId = EEvent_EVENT_ID_NONE
)

func (x *CMsgServerToGCPostMatchTip) Reset() {
	*x = CMsgServerToGCPostMatchTip{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerToGCPostMatchTip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCPostMatchTip) ProtoMessage() {}

func (x *CMsgServerToGCPostMatchTip) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCPostMatchTip.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCPostMatchTip) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{82}
}

func (x *CMsgServerToGCPostMatchTip) GetEventId() EEvent {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return Default_CMsgServerToGCPostMatchTip_EventId
}

func (x *CMsgServerToGCPostMatchTip) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgServerToGCPostMatchTip) GetTipperAccountId() uint32 {
	if x != nil && x.TipperAccountId != nil {
		return *x.TipperAccountId
	}
	return 0
}

func (x *CMsgServerToGCPostMatchTip) GetRecipientAccountId() uint32 {
	if x != nil && x.RecipientAccountId != nil {
		return *x.RecipientAccountId
	}
	return 0
}

func (x *CMsgServerToGCPostMatchTip) GetTipAmount() uint32 {
	if x != nil && x.TipAmount != nil {
		return *x.TipAmount
	}
	return 0
}

type CMsgServerToGCPostMatchTipResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId            *uint64                                    `protobuf:"varint,1,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	TipperAccountId    *uint32                                    `protobuf:"varint,2,opt,name=tipper_account_id,json=tipperAccountId" json:"tipper_account_id,omitempty"`
	RecipientAccountId *uint32                                    `protobuf:"varint,3,opt,name=recipient_account_id,json=recipientAccountId" json:"recipient_account_id,omitempty"`
	Result             *CMsgServerToGCPostMatchTipResponse_Result `protobuf:"varint,4,opt,name=result,enum=dota.CMsgServerToGCPostMatchTipResponse_Result,def=0" json:"result,omitempty"`
}

// Default values for CMsgServerToGCPostMatchTipResponse fields.
const (
	Default_CMsgServerToGCPostMatchTipResponse_Result = CMsgServerToGCPostMatchTipResponse_SUCCESS
)

func (x *CMsgServerToGCPostMatchTipResponse) Reset() {
	*x = CMsgServerToGCPostMatchTipResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerToGCPostMatchTipResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCPostMatchTipResponse) ProtoMessage() {}

func (x *CMsgServerToGCPostMatchTipResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCPostMatchTipResponse.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCPostMatchTipResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{83}
}

func (x *CMsgServerToGCPostMatchTipResponse) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgServerToGCPostMatchTipResponse) GetTipperAccountId() uint32 {
	if x != nil && x.TipperAccountId != nil {
		return *x.TipperAccountId
	}
	return 0
}

func (x *CMsgServerToGCPostMatchTipResponse) GetRecipientAccountId() uint32 {
	if x != nil && x.RecipientAccountId != nil {
		return *x.RecipientAccountId
	}
	return 0
}

func (x *CMsgServerToGCPostMatchTipResponse) GetResult() CMsgServerToGCPostMatchTipResponse_Result {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgServerToGCPostMatchTipResponse_Result
}

type CMsgServerToGCCloseCompendiumInGamePredictionVoting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId   *uint64 `protobuf:"varint,1,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	HltvDelay *uint32 `protobuf:"varint,2,opt,name=hltv_delay,json=hltvDelay" json:"hltv_delay,omitempty"`
}

func (x *CMsgServerToGCCloseCompendiumInGamePredictionVoting) Reset() {
	*x = CMsgServerToGCCloseCompendiumInGamePredictionVoting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerToGCCloseCompendiumInGamePredictionVoting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCCloseCompendiumInGamePredictionVoting) ProtoMessage() {}

func (x *CMsgServerToGCCloseCompendiumInGamePredictionVoting) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCCloseCompendiumInGamePredictionVoting.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCCloseCompendiumInGamePredictionVoting) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{84}
}

func (x *CMsgServerToGCCloseCompendiumInGamePredictionVoting) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgServerToGCCloseCompendiumInGamePredictionVoting) GetHltvDelay() uint32 {
	if x != nil && x.HltvDelay != nil {
		return *x.HltvDelay
	}
	return 0
}

type CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *bool `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
}

func (x *CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse) Reset() {
	*x = CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse) ProtoMessage() {}

func (x *CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{85}
}

func (x *CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse) GetResult() bool {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return false
}

type CMsgServerToGCCompendiumInGamePredictionResults struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId      *uint64                                                             `protobuf:"varint,1,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	Results      []*CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult `protobuf:"bytes,2,rep,name=results" json:"results,omitempty"`
	LeagueId     *uint32                                                             `protobuf:"varint,3,opt,name=league_id,json=leagueId" json:"league_id,omitempty"`
	LeagueNodeId *uint32                                                             `protobuf:"varint,4,opt,name=league_node_id,json=leagueNodeId" json:"league_node_id,omitempty"`
}

func (x *CMsgServerToGCCompendiumInGamePredictionResults) Reset() {
	*x = CMsgServerToGCCompendiumInGamePredictionResults{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerToGCCompendiumInGamePredictionResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCCompendiumInGamePredictionResults) ProtoMessage() {}

func (x *CMsgServerToGCCompendiumInGamePredictionResults) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCCompendiumInGamePredictionResults.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCCompendiumInGamePredictionResults) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{86}
}

func (x *CMsgServerToGCCompendiumInGamePredictionResults) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgServerToGCCompendiumInGamePredictionResults) GetResults() []*CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *CMsgServerToGCCompendiumInGamePredictionResults) GetLeagueId() uint32 {
	if x != nil && x.LeagueId != nil {
		return *x.LeagueId
	}
	return 0
}

func (x *CMsgServerToGCCompendiumInGamePredictionResults) GetLeagueNodeId() uint32 {
	if x != nil && x.LeagueNodeId != nil {
		return *x.LeagueNodeId
	}
	return 0
}

type CMsgServerToGCCompendiumInGamePredictionResultsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *bool `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
}

func (x *CMsgServerToGCCompendiumInGamePredictionResultsResponse) Reset() {
	*x = CMsgServerToGCCompendiumInGamePredictionResultsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerToGCCompendiumInGamePredictionResultsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCCompendiumInGamePredictionResultsResponse) ProtoMessage() {}

func (x *CMsgServerToGCCompendiumInGamePredictionResultsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCCompendiumInGamePredictionResultsResponse.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCCompendiumInGamePredictionResultsResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{87}
}

func (x *CMsgServerToGCCompendiumInGamePredictionResultsResponse) GetResult() bool {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return false
}

type CMsgGCToGCCompendiumInGamePredictionResults struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results *CMsgServerToGCCompendiumInGamePredictionResults `protobuf:"bytes,1,opt,name=results" json:"results,omitempty"`
}

func (x *CMsgGCToGCCompendiumInGamePredictionResults) Reset() {
	*x = CMsgGCToGCCompendiumInGamePredictionResults{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCToGCCompendiumInGamePredictionResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToGCCompendiumInGamePredictionResults) ProtoMessage() {}

func (x *CMsgGCToGCCompendiumInGamePredictionResults) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToGCCompendiumInGamePredictionResults.ProtoReflect.Descriptor instead.
func (*CMsgGCToGCCompendiumInGamePredictionResults) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{88}
}

func (x *CMsgGCToGCCompendiumInGamePredictionResults) GetResults() *CMsgServerToGCCompendiumInGamePredictionResults {
	if x != nil {
		return x.Results
	}
	return nil
}

type CMsgServerToGCMatchPlayerItemPurchaseHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId *uint64                                                `protobuf:"varint,1,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	Mmr     *uint32                                                `protobuf:"varint,2,opt,name=mmr" json:"mmr,omitempty"`
	Players []*CMsgServerToGCMatchPlayerItemPurchaseHistory_Player `protobuf:"bytes,3,rep,name=players" json:"players,omitempty"`
}

func (x *CMsgServerToGCMatchPlayerItemPurchaseHistory) Reset() {
	*x = CMsgServerToGCMatchPlayerItemPurchaseHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerToGCMatchPlayerItemPurchaseHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCMatchPlayerItemPurchaseHistory) ProtoMessage() {}

func (x *CMsgServerToGCMatchPlayerItemPurchaseHistory) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCMatchPlayerItemPurchaseHistory.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCMatchPlayerItemPurchaseHistory) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{89}
}

func (x *CMsgServerToGCMatchPlayerItemPurchaseHistory) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgServerToGCMatchPlayerItemPurchaseHistory) GetMmr() uint32 {
	if x != nil && x.Mmr != nil {
		return *x.Mmr
	}
	return 0
}

func (x *CMsgServerToGCMatchPlayerItemPurchaseHistory) GetPlayers() []*CMsgServerToGCMatchPlayerItemPurchaseHistory_Player {
	if x != nil {
		return x.Players
	}
	return nil
}

type CMsgServerToGCMatchStateHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId     *uint64                                       `protobuf:"varint,1,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	RadiantWon  *bool                                         `protobuf:"varint,2,opt,name=radiant_won,json=radiantWon" json:"radiant_won,omitempty"`
	Mmr         *uint32                                       `protobuf:"varint,3,opt,name=mmr" json:"mmr,omitempty"`
	MatchStates []*CMsgServerToGCMatchStateHistory_MatchState `protobuf:"bytes,4,rep,name=match_states,json=matchStates" json:"match_states,omitempty"`
}

func (x *CMsgServerToGCMatchStateHistory) Reset() {
	*x = CMsgServerToGCMatchStateHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerToGCMatchStateHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCMatchStateHistory) ProtoMessage() {}

func (x *CMsgServerToGCMatchStateHistory) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCMatchStateHistory.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCMatchStateHistory) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{90}
}

func (x *CMsgServerToGCMatchStateHistory) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgServerToGCMatchStateHistory) GetRadiantWon() bool {
	if x != nil && x.RadiantWon != nil {
		return *x.RadiantWon
	}
	return false
}

func (x *CMsgServerToGCMatchStateHistory) GetMmr() uint32 {
	if x != nil && x.Mmr != nil {
		return *x.Mmr
	}
	return 0
}

func (x *CMsgServerToGCMatchStateHistory) GetMatchStates() []*CMsgServerToGCMatchStateHistory_MatchState {
	if x != nil {
		return x.MatchStates
	}
	return nil
}

type CMsgServerToGCCavernCrawlIsHeroActive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId    *uint32 `protobuf:"varint,1,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	AccountId  *uint32 `protobuf:"varint,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	MapVariant *uint32 `protobuf:"varint,3,opt,name=map_variant,json=mapVariant" json:"map_variant,omitempty"`
	HeroId     *uint32 `protobuf:"varint,4,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	TurboMode  *bool   `protobuf:"varint,5,opt,name=turbo_mode,json=turboMode" json:"turbo_mode,omitempty"`
}

func (x *CMsgServerToGCCavernCrawlIsHeroActive) Reset() {
	*x = CMsgServerToGCCavernCrawlIsHeroActive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerToGCCavernCrawlIsHeroActive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCCavernCrawlIsHeroActive) ProtoMessage() {}

func (x *CMsgServerToGCCavernCrawlIsHeroActive) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCCavernCrawlIsHeroActive.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCCavernCrawlIsHeroActive) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{91}
}

func (x *CMsgServerToGCCavernCrawlIsHeroActive) GetEventId() uint32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

func (x *CMsgServerToGCCavernCrawlIsHeroActive) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgServerToGCCavernCrawlIsHeroActive) GetMapVariant() uint32 {
	if x != nil && x.MapVariant != nil {
		return *x.MapVariant
	}
	return 0
}

func (x *CMsgServerToGCCavernCrawlIsHeroActive) GetHeroId() uint32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CMsgServerToGCCavernCrawlIsHeroActive) GetTurboMode() bool {
	if x != nil && x.TurboMode != nil {
		return *x.TurboMode
	}
	return false
}

type CMsgServerToGCCavernCrawlIsHeroActiveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result                     *bool                                                       `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	PotentialWinnings          *uint32                                                     `protobuf:"varint,2,opt,name=potential_winnings,json=potentialWinnings" json:"potential_winnings,omitempty"`
	MapResults                 []*CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults `protobuf:"bytes,3,rep,name=map_results,json=mapResults" json:"map_results,omitempty"`
	PotentialPlusShardWinnings *uint32                                                     `protobuf:"varint,4,opt,name=potential_plus_shard_winnings,json=potentialPlusShardWinnings" json:"potential_plus_shard_winnings,omitempty"`
}

func (x *CMsgServerToGCCavernCrawlIsHeroActiveResponse) Reset() {
	*x = CMsgServerToGCCavernCrawlIsHeroActiveResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerToGCCavernCrawlIsHeroActiveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCCavernCrawlIsHeroActiveResponse) ProtoMessage() {}

func (x *CMsgServerToGCCavernCrawlIsHeroActiveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCCavernCrawlIsHeroActiveResponse.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCCavernCrawlIsHeroActiveResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{92}
}

func (x *CMsgServerToGCCavernCrawlIsHeroActiveResponse) GetResult() bool {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return false
}

func (x *CMsgServerToGCCavernCrawlIsHeroActiveResponse) GetPotentialWinnings() uint32 {
	if x != nil && x.PotentialWinnings != nil {
		return *x.PotentialWinnings
	}
	return 0
}

func (x *CMsgServerToGCCavernCrawlIsHeroActiveResponse) GetMapResults() []*CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults {
	if x != nil {
		return x.MapResults
	}
	return nil
}

func (x *CMsgServerToGCCavernCrawlIsHeroActiveResponse) GetPotentialPlusShardWinnings() uint32 {
	if x != nil && x.PotentialPlusShardWinnings != nil {
		return *x.PotentialPlusShardWinnings
	}
	return 0
}

type CMsgGCtoServerTensorflowInstance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerInstance *uint32 `protobuf:"varint,1,opt,name=server_instance,json=serverInstance" json:"server_instance,omitempty"`
}

func (x *CMsgGCtoServerTensorflowInstance) Reset() {
	*x = CMsgGCtoServerTensorflowInstance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCtoServerTensorflowInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCtoServerTensorflowInstance) ProtoMessage() {}

func (x *CMsgGCtoServerTensorflowInstance) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCtoServerTensorflowInstance.ProtoReflect.Descriptor instead.
func (*CMsgGCtoServerTensorflowInstance) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{93}
}

func (x *CMsgGCtoServerTensorflowInstance) GetServerInstance() uint32 {
	if x != nil && x.ServerInstance != nil {
		return *x.ServerInstance
	}
	return 0
}

type CMsgDetailedGameStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Minutes    []*CMsgDetailedGameStats_MinuteEntry `protobuf:"bytes,1,rep,name=minutes" json:"minutes,omitempty"`
	PlayerInfo []*CMsgDetailedGameStats_PlayerInfo  `protobuf:"bytes,2,rep,name=player_info,json=playerInfo" json:"player_info,omitempty"`
	GameStats  *CMsgDetailedGameStats_GameStats     `protobuf:"bytes,3,opt,name=game_stats,json=gameStats" json:"game_stats,omitempty"`
}

func (x *CMsgDetailedGameStats) Reset() {
	*x = CMsgDetailedGameStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDetailedGameStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDetailedGameStats) ProtoMessage() {}

func (x *CMsgDetailedGameStats) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDetailedGameStats.ProtoReflect.Descriptor instead.
func (*CMsgDetailedGameStats) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{94}
}

func (x *CMsgDetailedGameStats) GetMinutes() []*CMsgDetailedGameStats_MinuteEntry {
	if x != nil {
		return x.Minutes
	}
	return nil
}

func (x *CMsgDetailedGameStats) GetPlayerInfo() []*CMsgDetailedGameStats_PlayerInfo {
	if x != nil {
		return x.PlayerInfo
	}
	return nil
}

func (x *CMsgDetailedGameStats) GetGameStats() *CMsgDetailedGameStats_GameStats {
	if x != nil {
		return x.GameStats
	}
	return nil
}

type CMsgAllStarStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerStats []*CMsgAllStarStats_PlayerStats `protobuf:"bytes,1,rep,name=player_stats,json=playerStats" json:"player_stats,omitempty"`
}

func (x *CMsgAllStarStats) Reset() {
	*x = CMsgAllStarStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgAllStarStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgAllStarStats) ProtoMessage() {}

func (x *CMsgAllStarStats) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgAllStarStats.ProtoReflect.Descriptor instead.
func (*CMsgAllStarStats) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{95}
}

func (x *CMsgAllStarStats) GetPlayerStats() []*CMsgAllStarStats_PlayerStats {
	if x != nil {
		return x.PlayerStats
	}
	return nil
}

type CMsgNeutralItemStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NeutralItems []*CMsgNeutralItemStats_NeutralItem `protobuf:"bytes,1,rep,name=neutral_items,json=neutralItems" json:"neutral_items,omitempty"`
}

func (x *CMsgNeutralItemStats) Reset() {
	*x = CMsgNeutralItemStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgNeutralItemStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgNeutralItemStats) ProtoMessage() {}

func (x *CMsgNeutralItemStats) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgNeutralItemStats.ProtoReflect.Descriptor instead.
func (*CMsgNeutralItemStats) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{96}
}

func (x *CMsgNeutralItemStats) GetNeutralItems() []*CMsgNeutralItemStats_NeutralItem {
	if x != nil {
		return x.NeutralItems
	}
	return nil
}

type CMsgGCToServerLobbyHeroBanRates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BanData []*CMsgGCToServerLobbyHeroBanRates_HeroBanEntry `protobuf:"bytes,1,rep,name=ban_data,json=banData" json:"ban_data,omitempty"`
}

func (x *CMsgGCToServerLobbyHeroBanRates) Reset() {
	*x = CMsgGCToServerLobbyHeroBanRates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCToServerLobbyHeroBanRates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToServerLobbyHeroBanRates) ProtoMessage() {}

func (x *CMsgGCToServerLobbyHeroBanRates) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToServerLobbyHeroBanRates.ProtoReflect.Descriptor instead.
func (*CMsgGCToServerLobbyHeroBanRates) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{97}
}

func (x *CMsgGCToServerLobbyHeroBanRates) GetBanData() []*CMsgGCToServerLobbyHeroBanRates_HeroBanEntry {
	if x != nil {
		return x.BanData
	}
	return nil
}

type CMsgSignOutGuildContractProgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerContracts []*CMsgSignOutGuildContractProgress_PlayerContract `protobuf:"bytes,1,rep,name=player_contracts,json=playerContracts" json:"player_contracts,omitempty"`
}

func (x *CMsgSignOutGuildContractProgress) Reset() {
	*x = CMsgSignOutGuildContractProgress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSignOutGuildContractProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSignOutGuildContractProgress) ProtoMessage() {}

func (x *CMsgSignOutGuildContractProgress) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSignOutGuildContractProgress.ProtoReflect.Descriptor instead.
func (*CMsgSignOutGuildContractProgress) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{98}
}

func (x *CMsgSignOutGuildContractProgress) GetPlayerContracts() []*CMsgSignOutGuildContractProgress_PlayerContract {
	if x != nil {
		return x.PlayerContracts
	}
	return nil
}

type CMsgSignOutGuildChallengeProgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildChallengesProgresses []*CMsgSignOutGuildChallengeProgress_ChallengeProgress `protobuf:"bytes,1,rep,name=guild_challenges_progresses,json=guildChallengesProgresses" json:"guild_challenges_progresses,omitempty"`
}

func (x *CMsgSignOutGuildChallengeProgress) Reset() {
	*x = CMsgSignOutGuildChallengeProgress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSignOutGuildChallengeProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSignOutGuildChallengeProgress) ProtoMessage() {}

func (x *CMsgSignOutGuildChallengeProgress) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSignOutGuildChallengeProgress.ProtoReflect.Descriptor instead.
func (*CMsgSignOutGuildChallengeProgress) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{99}
}

func (x *CMsgSignOutGuildChallengeProgress) GetGuildChallengesProgresses() []*CMsgSignOutGuildChallengeProgress_ChallengeProgress {
	if x != nil {
		return x.GuildChallengesProgresses
	}
	return nil
}

type CMsgSignOutMVPStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId     *uint64                       `protobuf:"varint,1,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	GameMode    *uint32                       `protobuf:"varint,2,opt,name=game_mode,json=gameMode" json:"game_mode,omitempty"`
	WinningTeam *uint32                       `protobuf:"varint,3,opt,name=winning_team,json=winningTeam" json:"winning_team,omitempty"`
	GameTime    *float32                      `protobuf:"fixed32,4,opt,name=game_time,json=gameTime" json:"game_time,omitempty"`
	Players     []*CMsgSignOutMVPStats_Player `protobuf:"bytes,5,rep,name=players" json:"players,omitempty"`
}

func (x *CMsgSignOutMVPStats) Reset() {
	*x = CMsgSignOutMVPStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSignOutMVPStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSignOutMVPStats) ProtoMessage() {}

func (x *CMsgSignOutMVPStats) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSignOutMVPStats.ProtoReflect.Descriptor instead.
func (*CMsgSignOutMVPStats) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{100}
}

func (x *CMsgSignOutMVPStats) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgSignOutMVPStats) GetGameMode() uint32 {
	if x != nil && x.GameMode != nil {
		return *x.GameMode
	}
	return 0
}

func (x *CMsgSignOutMVPStats) GetWinningTeam() uint32 {
	if x != nil && x.WinningTeam != nil {
		return *x.WinningTeam
	}
	return 0
}

func (x *CMsgSignOutMVPStats) GetGameTime() float32 {
	if x != nil && x.GameTime != nil {
		return *x.GameTime
	}
	return 0
}

func (x *CMsgSignOutMVPStats) GetPlayers() []*CMsgSignOutMVPStats_Player {
	if x != nil {
		return x.Players
	}
	return nil
}

type CMsgGCToServerRecordTrainingData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable *bool `protobuf:"varint,1,opt,name=enable" json:"enable,omitempty"`
}

func (x *CMsgGCToServerRecordTrainingData) Reset() {
	*x = CMsgGCToServerRecordTrainingData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCToServerRecordTrainingData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToServerRecordTrainingData) ProtoMessage() {}

func (x *CMsgGCToServerRecordTrainingData) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToServerRecordTrainingData.ProtoReflect.Descriptor instead.
func (*CMsgGCToServerRecordTrainingData) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{101}
}

func (x *CMsgGCToServerRecordTrainingData) GetEnable() bool {
	if x != nil && x.Enable != nil {
		return *x.Enable
	}
	return false
}

type CMsgServerToGCRefreshGuildContract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable *bool `protobuf:"varint,1,opt,name=enable" json:"enable,omitempty"`
}

func (x *CMsgServerToGCRefreshGuildContract) Reset() {
	*x = CMsgServerToGCRefreshGuildContract{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerToGCRefreshGuildContract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCRefreshGuildContract) ProtoMessage() {}

func (x *CMsgServerToGCRefreshGuildContract) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCRefreshGuildContract.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCRefreshGuildContract) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{102}
}

func (x *CMsgServerToGCRefreshGuildContract) GetEnable() bool {
	if x != nil && x.Enable != nil {
		return *x.Enable
	}
	return false
}

type CMsgServerToGCRefreshGuildContractResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgServerToGCRefreshGuildContractResponse) Reset() {
	*x = CMsgServerToGCRefreshGuildContractResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerToGCRefreshGuildContractResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCRefreshGuildContractResponse) ProtoMessage() {}

func (x *CMsgServerToGCRefreshGuildContractResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCRefreshGuildContractResponse.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCRefreshGuildContractResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{103}
}

type CMsgServerToGCGetGuildContracts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountIds []uint32 `protobuf:"varint,1,rep,name=account_ids,json=accountIds" json:"account_ids,omitempty"`
}

func (x *CMsgServerToGCGetGuildContracts) Reset() {
	*x = CMsgServerToGCGetGuildContracts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerToGCGetGuildContracts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCGetGuildContracts) ProtoMessage() {}

func (x *CMsgServerToGCGetGuildContracts) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCGetGuildContracts.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCGetGuildContracts) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{104}
}

func (x *CMsgServerToGCGetGuildContracts) GetAccountIds() []uint32 {
	if x != nil {
		return x.AccountIds
	}
	return nil
}

type CMsgServerToGCGetGuildContractsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerContracts []*CMsgServerToGCGetGuildContractsResponse_Player `protobuf:"bytes,1,rep,name=player_contracts,json=playerContracts" json:"player_contracts,omitempty"`
}

func (x *CMsgServerToGCGetGuildContractsResponse) Reset() {
	*x = CMsgServerToGCGetGuildContractsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerToGCGetGuildContractsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCGetGuildContractsResponse) ProtoMessage() {}

func (x *CMsgServerToGCGetGuildContractsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCGetGuildContractsResponse.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCGetGuildContractsResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{105}
}

func (x *CMsgServerToGCGetGuildContractsResponse) GetPlayerContracts() []*CMsgServerToGCGetGuildContractsResponse_Player {
	if x != nil {
		return x.PlayerContracts
	}
	return nil
}

type CMsgPoorNetworkConditions_Player struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId        *uint32                      `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	DisconnectReason *ENetworkDisconnectionReason `protobuf:"varint,2,opt,name=disconnect_reason,json=disconnectReason,enum=dota.ENetworkDisconnectionReason,def=0" json:"disconnect_reason,omitempty"`
	NumBadIntervals  *uint32                      `protobuf:"varint,3,opt,name=num_bad_intervals,json=numBadIntervals" json:"num_bad_intervals,omitempty"`
	PeakLossPct      *uint32                      `protobuf:"varint,4,opt,name=peak_loss_pct,json=peakLossPct" json:"peak_loss_pct,omitempty"`
}

// Default values for CMsgPoorNetworkConditions_Player fields.
const (
	Default_CMsgPoorNetworkConditions_Player_DisconnectReason = ENetworkDisconnectionReason_NETWORK_DISCONNECT_INVALID
)

func (x *CMsgPoorNetworkConditions_Player) Reset() {
	*x = CMsgPoorNetworkConditions_Player{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPoorNetworkConditions_Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPoorNetworkConditions_Player) ProtoMessage() {}

func (x *CMsgPoorNetworkConditions_Player) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPoorNetworkConditions_Player.ProtoReflect.Descriptor instead.
func (*CMsgPoorNetworkConditions_Player) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{0, 0}
}

func (x *CMsgPoorNetworkConditions_Player) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgPoorNetworkConditions_Player) GetDisconnectReason() ENetworkDisconnectionReason {
	if x != nil && x.DisconnectReason != nil {
		return *x.DisconnectReason
	}
	return Default_CMsgPoorNetworkConditions_Player_DisconnectReason
}

func (x *CMsgPoorNetworkConditions_Player) GetNumBadIntervals() uint32 {
	if x != nil && x.NumBadIntervals != nil {
		return *x.NumBadIntervals
	}
	return 0
}

func (x *CMsgPoorNetworkConditions_Player) GetPeakLossPct() uint32 {
	if x != nil && x.PeakLossPct != nil {
		return *x.PeakLossPct
	}
	return 0
}

type CMsgConnectedPlayers_Player struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SteamId          *uint64                      `protobuf:"fixed64,1,opt,name=steam_id,json=steamId" json:"steam_id,omitempty"`
	HeroId           *uint32                      `protobuf:"varint,2,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	LeaverState      *CMsgLeaverState             `protobuf:"bytes,3,opt,name=leaver_state,json=leaverState" json:"leaver_state,omitempty"`
	DisconnectReason *ENetworkDisconnectionReason `protobuf:"varint,4,opt,name=disconnect_reason,json=disconnectReason,enum=dota.ENetworkDisconnectionReason,def=0" json:"disconnect_reason,omitempty"`
}

// Default values for CMsgConnectedPlayers_Player fields.
const (
	Default_CMsgConnectedPlayers_Player_DisconnectReason = ENetworkDisconnectionReason_NETWORK_DISCONNECT_INVALID
)

func (x *CMsgConnectedPlayers_Player) Reset() {
	*x = CMsgConnectedPlayers_Player{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgConnectedPlayers_Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgConnectedPlayers_Player) ProtoMessage() {}

func (x *CMsgConnectedPlayers_Player) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgConnectedPlayers_Player.ProtoReflect.Descriptor instead.
func (*CMsgConnectedPlayers_Player) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{2, 0}
}

func (x *CMsgConnectedPlayers_Player) GetSteamId() uint64 {
	if x != nil && x.SteamId != nil {
		return *x.SteamId
	}
	return 0
}

func (x *CMsgConnectedPlayers_Player) GetHeroId() uint32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CMsgConnectedPlayers_Player) GetLeaverState() *CMsgLeaverState {
	if x != nil {
		return x.LeaverState
	}
	return nil
}

func (x *CMsgConnectedPlayers_Player) GetDisconnectReason() ENetworkDisconnectionReason {
	if x != nil && x.DisconnectReason != nil {
		return *x.DisconnectReason
	}
	return Default_CMsgConnectedPlayers_Player_DisconnectReason
}

type CMsgSignOutGameplayStats_CPlayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SteamId          *uint64                   `protobuf:"fixed64,1,opt,name=steam_id,json=steamId" json:"steam_id,omitempty"`
	PlayerSlot       *uint32                   `protobuf:"varint,2,opt,name=player_slot,json=playerSlot" json:"player_slot,omitempty"`
	HeroId           *uint32                   `protobuf:"varint,3,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	TimedPlayerStats []*CMatchPlayerTimedStats `protobuf:"bytes,4,rep,name=timed_player_stats,json=timedPlayerStats" json:"timed_player_stats,omitempty"`
}

func (x *CMsgSignOutGameplayStats_CPlayer) Reset() {
	*x = CMsgSignOutGameplayStats_CPlayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSignOutGameplayStats_CPlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSignOutGameplayStats_CPlayer) ProtoMessage() {}

func (x *CMsgSignOutGameplayStats_CPlayer) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSignOutGameplayStats_CPlayer.ProtoReflect.Descriptor instead.
func (*CMsgSignOutGameplayStats_CPlayer) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{13, 0}
}

func (x *CMsgSignOutGameplayStats_CPlayer) GetSteamId() uint64 {
	if x != nil && x.SteamId != nil {
		return *x.SteamId
	}
	return 0
}

func (x *CMsgSignOutGameplayStats_CPlayer) GetPlayerSlot() uint32 {
	if x != nil && x.PlayerSlot != nil {
		return *x.PlayerSlot
	}
	return 0
}

func (x *CMsgSignOutGameplayStats_CPlayer) GetHeroId() uint32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CMsgSignOutGameplayStats_CPlayer) GetTimedPlayerStats() []*CMatchPlayerTimedStats {
	if x != nil {
		return x.TimedPlayerStats
	}
	return nil
}

type CMsgSignOutGameplayStats_CTeam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsWinningTeam  *bool                               `protobuf:"varint,1,opt,name=is_winning_team,json=isWinningTeam" json:"is_winning_team,omitempty"`
	IsRadiantTeam  *bool                               `protobuf:"varint,2,opt,name=is_radiant_team,json=isRadiantTeam" json:"is_radiant_team,omitempty"`
	TimedTeamStats []*CMatchTeamTimedStats             `protobuf:"bytes,3,rep,name=timed_team_stats,json=timedTeamStats" json:"timed_team_stats,omitempty"`
	Players        []*CMsgSignOutGameplayStats_CPlayer `protobuf:"bytes,4,rep,name=players" json:"players,omitempty"`
}

func (x *CMsgSignOutGameplayStats_CTeam) Reset() {
	*x = CMsgSignOutGameplayStats_CTeam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSignOutGameplayStats_CTeam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSignOutGameplayStats_CTeam) ProtoMessage() {}

func (x *CMsgSignOutGameplayStats_CTeam) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSignOutGameplayStats_CTeam.ProtoReflect.Descriptor instead.
func (*CMsgSignOutGameplayStats_CTeam) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{13, 1}
}

func (x *CMsgSignOutGameplayStats_CTeam) GetIsWinningTeam() bool {
	if x != nil && x.IsWinningTeam != nil {
		return *x.IsWinningTeam
	}
	return false
}

func (x *CMsgSignOutGameplayStats_CTeam) GetIsRadiantTeam() bool {
	if x != nil && x.IsRadiantTeam != nil {
		return *x.IsRadiantTeam
	}
	return false
}

func (x *CMsgSignOutGameplayStats_CTeam) GetTimedTeamStats() []*CMatchTeamTimedStats {
	if x != nil {
		return x.TimedTeamStats
	}
	return nil
}

func (x *CMsgSignOutGameplayStats_CTeam) GetPlayers() []*CMsgSignOutGameplayStats_CPlayer {
	if x != nil {
		return x.Players
	}
	return nil
}

type CMsgGameMatchSignOut_CTeam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Players []*CMsgGameMatchSignOut_CTeam_CPlayer `protobuf:"bytes,1,rep,name=players" json:"players,omitempty"`
}

func (x *CMsgGameMatchSignOut_CTeam) Reset() {
	*x = CMsgGameMatchSignOut_CTeam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGameMatchSignOut_CTeam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameMatchSignOut_CTeam) ProtoMessage() {}

func (x *CMsgGameMatchSignOut_CTeam) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameMatchSignOut_CTeam.ProtoReflect.Descriptor instead.
func (*CMsgGameMatchSignOut_CTeam) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{14, 0}
}

func (x *CMsgGameMatchSignOut_CTeam) GetPlayers() []*CMsgGameMatchSignOut_CTeam_CPlayer {
	if x != nil {
		return x.Players
	}
	return nil
}

type CMsgGameMatchSignOut_CAdditionalSignoutMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       *uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Contents []byte  `protobuf:"bytes,2,opt,name=contents" json:"contents,omitempty"`
}

func (x *CMsgGameMatchSignOut_CAdditionalSignoutMsg) Reset() {
	*x = CMsgGameMatchSignOut_CAdditionalSignoutMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGameMatchSignOut_CAdditionalSignoutMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameMatchSignOut_CAdditionalSignoutMsg) ProtoMessage() {}

func (x *CMsgGameMatchSignOut_CAdditionalSignoutMsg) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameMatchSignOut_CAdditionalSignoutMsg.ProtoReflect.Descriptor instead.
func (*CMsgGameMatchSignOut_CAdditionalSignoutMsg) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{14, 1}
}

func (x *CMsgGameMatchSignOut_CAdditionalSignoutMsg) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CAdditionalSignoutMsg) GetContents() []byte {
	if x != nil {
		return x.Contents
	}
	return nil
}

type CMsgGameMatchSignOut_CSocialFeedMatchEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId  *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Timestamp  *uint32 `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	EventType  *uint32 `protobuf:"varint,3,opt,name=event_type,json=eventType" json:"event_type,omitempty"`
	GameTime   *int32  `protobuf:"varint,4,opt,name=game_time,json=gameTime" json:"game_time,omitempty"`
	ReplayTime *uint32 `protobuf:"varint,5,opt,name=replay_time,json=replayTime" json:"replay_time,omitempty"`
}

func (x *CMsgGameMatchSignOut_CSocialFeedMatchEvent) Reset() {
	*x = CMsgGameMatchSignOut_CSocialFeedMatchEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGameMatchSignOut_CSocialFeedMatchEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameMatchSignOut_CSocialFeedMatchEvent) ProtoMessage() {}

func (x *CMsgGameMatchSignOut_CSocialFeedMatchEvent) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameMatchSignOut_CSocialFeedMatchEvent.ProtoReflect.Descriptor instead.
func (*CMsgGameMatchSignOut_CSocialFeedMatchEvent) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{14, 2}
}

func (x *CMsgGameMatchSignOut_CSocialFeedMatchEvent) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CSocialFeedMatchEvent) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CSocialFeedMatchEvent) GetEventType() uint32 {
	if x != nil && x.EventType != nil {
		return *x.EventType
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CSocialFeedMatchEvent) GetGameTime() int32 {
	if x != nil && x.GameTime != nil {
		return *x.GameTime
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CSocialFeedMatchEvent) GetReplayTime() uint32 {
	if x != nil && x.ReplayTime != nil {
		return *x.ReplayTime
	}
	return 0
}

type CMsgGameMatchSignOut_CCustomGameData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublishTimestamp *uint32 `protobuf:"varint,1,opt,name=publish_timestamp,json=publishTimestamp" json:"publish_timestamp,omitempty"`
}

func (x *CMsgGameMatchSignOut_CCustomGameData) Reset() {
	*x = CMsgGameMatchSignOut_CCustomGameData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGameMatchSignOut_CCustomGameData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameMatchSignOut_CCustomGameData) ProtoMessage() {}

func (x *CMsgGameMatchSignOut_CCustomGameData) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameMatchSignOut_CCustomGameData.ProtoReflect.Descriptor instead.
func (*CMsgGameMatchSignOut_CCustomGameData) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{14, 3}
}

func (x *CMsgGameMatchSignOut_CCustomGameData) GetPublishTimestamp() uint32 {
	if x != nil && x.PublishTimestamp != nil {
		return *x.PublishTimestamp
	}
	return 0
}

type CMsgGameMatchSignOut_EventGameLeaderboardEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NameSuffix  *string `protobuf:"bytes,1,opt,name=name_suffix,json=nameSuffix" json:"name_suffix,omitempty"`
	Score       *int32  `protobuf:"varint,2,opt,name=score" json:"score,omitempty"`
	ExtraData_1 *uint32 `protobuf:"varint,3,opt,name=extra_data_1,json=extraData1" json:"extra_data_1,omitempty"`
	ExtraData_2 *uint32 `protobuf:"varint,4,opt,name=extra_data_2,json=extraData2" json:"extra_data_2,omitempty"`
	ExtraData_3 *uint32 `protobuf:"varint,5,opt,name=extra_data_3,json=extraData3" json:"extra_data_3,omitempty"`
	ExtraData_4 *uint32 `protobuf:"varint,6,opt,name=extra_data_4,json=extraData4" json:"extra_data_4,omitempty"`
	ExtraData_5 *uint32 `protobuf:"varint,7,opt,name=extra_data_5,json=extraData5" json:"extra_data_5,omitempty"`
}

func (x *CMsgGameMatchSignOut_EventGameLeaderboardEntry) Reset() {
	*x = CMsgGameMatchSignOut_EventGameLeaderboardEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGameMatchSignOut_EventGameLeaderboardEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameMatchSignOut_EventGameLeaderboardEntry) ProtoMessage() {}

func (x *CMsgGameMatchSignOut_EventGameLeaderboardEntry) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameMatchSignOut_EventGameLeaderboardEntry.ProtoReflect.Descriptor instead.
func (*CMsgGameMatchSignOut_EventGameLeaderboardEntry) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{14, 4}
}

func (x *CMsgGameMatchSignOut_EventGameLeaderboardEntry) GetNameSuffix() string {
	if x != nil && x.NameSuffix != nil {
		return *x.NameSuffix
	}
	return ""
}

func (x *CMsgGameMatchSignOut_EventGameLeaderboardEntry) GetScore() int32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

func (x *CMsgGameMatchSignOut_EventGameLeaderboardEntry) GetExtraData_1() uint32 {
	if x != nil && x.ExtraData_1 != nil {
		return *x.ExtraData_1
	}
	return 0
}

func (x *CMsgGameMatchSignOut_EventGameLeaderboardEntry) GetExtraData_2() uint32 {
	if x != nil && x.ExtraData_2 != nil {
		return *x.ExtraData_2
	}
	return 0
}

func (x *CMsgGameMatchSignOut_EventGameLeaderboardEntry) GetExtraData_3() uint32 {
	if x != nil && x.ExtraData_3 != nil {
		return *x.ExtraData_3
	}
	return 0
}

func (x *CMsgGameMatchSignOut_EventGameLeaderboardEntry) GetExtraData_4() uint32 {
	if x != nil && x.ExtraData_4 != nil {
		return *x.ExtraData_4
	}
	return 0
}

func (x *CMsgGameMatchSignOut_EventGameLeaderboardEntry) GetExtraData_5() uint32 {
	if x != nil && x.ExtraData_5 != nil {
		return *x.ExtraData_5
	}
	return 0
}

type CMsgGameMatchSignOut_WardPlacement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId      *uint32 `protobuf:"varint,1,opt,name=player_id,json=playerId" json:"player_id,omitempty"`
	TeamId        *uint32 `protobuf:"varint,2,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	PlacedTime    *uint32 `protobuf:"varint,3,opt,name=placed_time,json=placedTime" json:"placed_time,omitempty"`
	BuildingState *uint32 `protobuf:"varint,4,opt,name=building_state,json=buildingState" json:"building_state,omitempty"`
	CreepState    *uint32 `protobuf:"varint,5,opt,name=creep_state,json=creepState" json:"creep_state,omitempty"`
	RoshanAlive   *bool   `protobuf:"varint,6,opt,name=roshan_alive,json=roshanAlive" json:"roshan_alive,omitempty"`
	PositionX     *uint32 `protobuf:"varint,7,opt,name=position_x,json=positionX" json:"position_x,omitempty"`
	PositionY     *uint32 `protobuf:"varint,8,opt,name=position_y,json=positionY" json:"position_y,omitempty"`
}

func (x *CMsgGameMatchSignOut_WardPlacement) Reset() {
	*x = CMsgGameMatchSignOut_WardPlacement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGameMatchSignOut_WardPlacement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameMatchSignOut_WardPlacement) ProtoMessage() {}

func (x *CMsgGameMatchSignOut_WardPlacement) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameMatchSignOut_WardPlacement.ProtoReflect.Descriptor instead.
func (*CMsgGameMatchSignOut_WardPlacement) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{14, 5}
}

func (x *CMsgGameMatchSignOut_WardPlacement) GetPlayerId() uint32 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

func (x *CMsgGameMatchSignOut_WardPlacement) GetTeamId() uint32 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

func (x *CMsgGameMatchSignOut_WardPlacement) GetPlacedTime() uint32 {
	if x != nil && x.PlacedTime != nil {
		return *x.PlacedTime
	}
	return 0
}

func (x *CMsgGameMatchSignOut_WardPlacement) GetBuildingState() uint32 {
	if x != nil && x.BuildingState != nil {
		return *x.BuildingState
	}
	return 0
}

func (x *CMsgGameMatchSignOut_WardPlacement) GetCreepState() uint32 {
	if x != nil && x.CreepState != nil {
		return *x.CreepState
	}
	return 0
}

func (x *CMsgGameMatchSignOut_WardPlacement) GetRoshanAlive() bool {
	if x != nil && x.RoshanAlive != nil {
		return *x.RoshanAlive
	}
	return false
}

func (x *CMsgGameMatchSignOut_WardPlacement) GetPositionX() uint32 {
	if x != nil && x.PositionX != nil {
		return *x.PositionX
	}
	return 0
}

func (x *CMsgGameMatchSignOut_WardPlacement) GetPositionY() uint32 {
	if x != nil && x.PositionY != nil {
		return *x.PositionY
	}
	return 0
}

type CMsgGameMatchSignOut_CTeam_CPlayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SteamId                    *uint64                                                  `protobuf:"fixed64,1,opt,name=steam_id,json=steamId" json:"steam_id,omitempty"`
	HeroId                     *uint32                                                  `protobuf:"varint,3,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	Items                      []uint32                                                 `protobuf:"varint,4,rep,name=items" json:"items,omitempty"`
	Gold                       *uint32                                                  `protobuf:"varint,5,opt,name=gold" json:"gold,omitempty"`
	Kills                      *uint32                                                  `protobuf:"varint,6,opt,name=kills" json:"kills,omitempty"`
	Deaths                     *uint32                                                  `protobuf:"varint,7,opt,name=deaths" json:"deaths,omitempty"`
	Assists                    *uint32                                                  `protobuf:"varint,8,opt,name=assists" json:"assists,omitempty"`
	LeaverStatus               *uint32                                                  `protobuf:"varint,9,opt,name=leaver_status,json=leaverStatus" json:"leaver_status,omitempty"`
	LastHits                   *uint32                                                  `protobuf:"varint,10,opt,name=last_hits,json=lastHits" json:"last_hits,omitempty"`
	Denies                     *uint32                                                  `protobuf:"varint,11,opt,name=denies" json:"denies,omitempty"`
	GoldPerMin                 *uint32                                                  `protobuf:"varint,12,opt,name=gold_per_min,json=goldPerMin" json:"gold_per_min,omitempty"`
	XpPerMinute                *uint32                                                  `protobuf:"varint,13,opt,name=xp_per_minute,json=xpPerMinute" json:"xp_per_minute,omitempty"`
	GoldSpent                  *uint32                                                  `protobuf:"varint,14,opt,name=gold_spent,json=goldSpent" json:"gold_spent,omitempty"`
	Level                      *uint32                                                  `protobuf:"varint,15,opt,name=level" json:"level,omitempty"`
	ScaledHeroDamage           *uint32                                                  `protobuf:"varint,16,opt,name=scaled_hero_damage,json=scaledHeroDamage" json:"scaled_hero_damage,omitempty"`
	ScaledTowerDamage          *uint32                                                  `protobuf:"varint,17,opt,name=scaled_tower_damage,json=scaledTowerDamage" json:"scaled_tower_damage,omitempty"`
	ScaledHeroHealing          *uint32                                                  `protobuf:"varint,18,opt,name=scaled_hero_healing,json=scaledHeroHealing" json:"scaled_hero_healing,omitempty"`
	TimeLastSeen               *uint32                                                  `protobuf:"varint,19,opt,name=time_last_seen,json=timeLastSeen" json:"time_last_seen,omitempty"`
	SupportAbilityValue        *uint32                                                  `protobuf:"varint,20,opt,name=support_ability_value,json=supportAbilityValue" json:"support_ability_value,omitempty"`
	PartyId                    *uint64                                                  `protobuf:"varint,21,opt,name=party_id,json=partyId" json:"party_id,omitempty"`
	ClaimedFarmGold            *uint32                                                  `protobuf:"varint,27,opt,name=claimed_farm_gold,json=claimedFarmGold" json:"claimed_farm_gold,omitempty"`
	SupportGold                *uint32                                                  `protobuf:"varint,28,opt,name=support_gold,json=supportGold" json:"support_gold,omitempty"`
	ClaimedDenies              *uint32                                                  `protobuf:"varint,29,opt,name=claimed_denies,json=claimedDenies" json:"claimed_denies,omitempty"`
	ClaimedMisses              *uint32                                                  `protobuf:"varint,30,opt,name=claimed_misses,json=claimedMisses" json:"claimed_misses,omitempty"`
	Misses                     *uint32                                                  `protobuf:"varint,31,opt,name=misses" json:"misses,omitempty"`
	NetWorth                   *uint32                                                  `protobuf:"varint,34,opt,name=net_worth,json=netWorth" json:"net_worth,omitempty"`
	HeroDamage                 *uint32                                                  `protobuf:"varint,37,opt,name=hero_damage,json=heroDamage" json:"hero_damage,omitempty"`
	TowerDamage                *uint32                                                  `protobuf:"varint,38,opt,name=tower_damage,json=towerDamage" json:"tower_damage,omitempty"`
	HeroHealing                *uint32                                                  `protobuf:"varint,39,opt,name=hero_healing,json=heroHealing" json:"hero_healing,omitempty"`
	AbilityUpgrades            []*CMatchPlayerAbilityUpgrade                            `protobuf:"bytes,32,rep,name=ability_upgrades,json=abilityUpgrades" json:"ability_upgrades,omitempty"`
	AdditionalUnitsInventory   []*CMatchAdditionalUnitInventory                         `protobuf:"bytes,33,rep,name=additional_units_inventory,json=additionalUnitsInventory" json:"additional_units_inventory,omitempty"`
	PermanentBuffs             []*CMatchPlayerPermanentBuff                             `protobuf:"bytes,40,rep,name=permanent_buffs,json=permanentBuffs" json:"permanent_buffs,omitempty"`
	CustomGameData             *CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData      `protobuf:"bytes,35,opt,name=custom_game_data,json=customGameData" json:"custom_game_data,omitempty"`
	MatchPlayerFlags           *uint32                                                  `protobuf:"varint,36,opt,name=match_player_flags,json=matchPlayerFlags" json:"match_player_flags,omitempty"`
	TalentAbilityIds           []uint32                                                 `protobuf:"varint,41,rep,name=talent_ability_ids,json=talentAbilityIds" json:"talent_ability_ids,omitempty"`
	HeroPickOrder              *uint32                                                  `protobuf:"varint,42,opt,name=hero_pick_order,json=heroPickOrder" json:"hero_pick_order,omitempty"`
	HeroWasRandomed            *bool                                                    `protobuf:"varint,43,opt,name=hero_was_randomed,json=heroWasRandomed" json:"hero_was_randomed,omitempty"`
	HeroWasDotaPlusSuggestion  *bool                                                    `protobuf:"varint,50,opt,name=hero_was_dota_plus_suggestion,json=heroWasDotaPlusSuggestion" json:"hero_was_dota_plus_suggestion,omitempty"`
	Lane                       *uint32                                                  `protobuf:"varint,45,opt,name=lane" json:"lane,omitempty"`
	IsUsingPlusGuide           *bool                                                    `protobuf:"varint,47,opt,name=is_using_plus_guide,json=isUsingPlusGuide" json:"is_using_plus_guide,omitempty"`
	HeroDamageReceived         []*CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived `protobuf:"bytes,48,rep,name=hero_damage_received,json=heroDamageReceived" json:"hero_damage_received,omitempty"`
	SecondsDead                *uint32                                                  `protobuf:"varint,51,opt,name=seconds_dead,json=secondsDead" json:"seconds_dead,omitempty"`
	GoldLostToDeath            *uint32                                                  `protobuf:"varint,52,opt,name=gold_lost_to_death,json=goldLostToDeath" json:"gold_lost_to_death,omitempty"`
	CommandCount               *uint32                                                  `protobuf:"varint,53,opt,name=command_count,json=commandCount" json:"command_count,omitempty"`
	MouseClickCastCommandCount *uint32                                                  `protobuf:"varint,54,opt,name=mouse_click_cast_command_count,json=mouseClickCastCommandCount" json:"mouse_click_cast_command_count,omitempty"`
	TeleportsUsed              *uint32                                                  `protobuf:"varint,55,opt,name=teleports_used,json=teleportsUsed" json:"teleports_used,omitempty"`
	CavernCrawlMapVariant      *uint32                                                  `protobuf:"varint,56,opt,name=cavern_crawl_map_variant,json=cavernCrawlMapVariant" json:"cavern_crawl_map_variant,omitempty"`
	BountyRunes                *uint32                                                  `protobuf:"varint,57,opt,name=bounty_runes,json=bountyRunes" json:"bounty_runes,omitempty"`
	OutpostsCaptured           *uint32                                                  `protobuf:"varint,58,opt,name=outposts_captured,json=outpostsCaptured" json:"outposts_captured,omitempty"`
	Dewards                    *uint32                                                  `protobuf:"varint,59,opt,name=dewards" json:"dewards,omitempty"`
	WardsPlaced                *uint32                                                  `protobuf:"varint,60,opt,name=wards_placed,json=wardsPlaced" json:"wards_placed,omitempty"`
	CampsStacked               *uint32                                                  `protobuf:"varint,61,opt,name=camps_stacked,json=campsStacked" json:"camps_stacked,omitempty"`
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) Reset() {
	*x = CMsgGameMatchSignOut_CTeam_CPlayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameMatchSignOut_CTeam_CPlayer) ProtoMessage() {}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameMatchSignOut_CTeam_CPlayer.ProtoReflect.Descriptor instead.
func (*CMsgGameMatchSignOut_CTeam_CPlayer) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{14, 0, 0}
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetSteamId() uint64 {
	if x != nil && x.SteamId != nil {
		return *x.SteamId
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetHeroId() uint32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetItems() []uint32 {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetGold() uint32 {
	if x != nil && x.Gold != nil {
		return *x.Gold
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetKills() uint32 {
	if x != nil && x.Kills != nil {
		return *x.Kills
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetDeaths() uint32 {
	if x != nil && x.Deaths != nil {
		return *x.Deaths
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetAssists() uint32 {
	if x != nil && x.Assists != nil {
		return *x.Assists
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetLeaverStatus() uint32 {
	if x != nil && x.LeaverStatus != nil {
		return *x.LeaverStatus
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetLastHits() uint32 {
	if x != nil && x.LastHits != nil {
		return *x.LastHits
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetDenies() uint32 {
	if x != nil && x.Denies != nil {
		return *x.Denies
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetGoldPerMin() uint32 {
	if x != nil && x.GoldPerMin != nil {
		return *x.GoldPerMin
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetXpPerMinute() uint32 {
	if x != nil && x.XpPerMinute != nil {
		return *x.XpPerMinute
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetGoldSpent() uint32 {
	if x != nil && x.GoldSpent != nil {
		return *x.GoldSpent
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetScaledHeroDamage() uint32 {
	if x != nil && x.ScaledHeroDamage != nil {
		return *x.ScaledHeroDamage
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetScaledTowerDamage() uint32 {
	if x != nil && x.ScaledTowerDamage != nil {
		return *x.ScaledTowerDamage
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetScaledHeroHealing() uint32 {
	if x != nil && x.ScaledHeroHealing != nil {
		return *x.ScaledHeroHealing
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetTimeLastSeen() uint32 {
	if x != nil && x.TimeLastSeen != nil {
		return *x.TimeLastSeen
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetSupportAbilityValue() uint32 {
	if x != nil && x.SupportAbilityValue != nil {
		return *x.SupportAbilityValue
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetPartyId() uint64 {
	if x != nil && x.PartyId != nil {
		return *x.PartyId
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetClaimedFarmGold() uint32 {
	if x != nil && x.ClaimedFarmGold != nil {
		return *x.ClaimedFarmGold
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetSupportGold() uint32 {
	if x != nil && x.SupportGold != nil {
		return *x.SupportGold
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetClaimedDenies() uint32 {
	if x != nil && x.ClaimedDenies != nil {
		return *x.ClaimedDenies
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetClaimedMisses() uint32 {
	if x != nil && x.ClaimedMisses != nil {
		return *x.ClaimedMisses
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetMisses() uint32 {
	if x != nil && x.Misses != nil {
		return *x.Misses
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetNetWorth() uint32 {
	if x != nil && x.NetWorth != nil {
		return *x.NetWorth
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetHeroDamage() uint32 {
	if x != nil && x.HeroDamage != nil {
		return *x.HeroDamage
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetTowerDamage() uint32 {
	if x != nil && x.TowerDamage != nil {
		return *x.TowerDamage
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetHeroHealing() uint32 {
	if x != nil && x.HeroHealing != nil {
		return *x.HeroHealing
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetAbilityUpgrades() []*CMatchPlayerAbilityUpgrade {
	if x != nil {
		return x.AbilityUpgrades
	}
	return nil
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetAdditionalUnitsInventory() []*CMatchAdditionalUnitInventory {
	if x != nil {
		return x.AdditionalUnitsInventory
	}
	return nil
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetPermanentBuffs() []*CMatchPlayerPermanentBuff {
	if x != nil {
		return x.PermanentBuffs
	}
	return nil
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetCustomGameData() *CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData {
	if x != nil {
		return x.CustomGameData
	}
	return nil
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetMatchPlayerFlags() uint32 {
	if x != nil && x.MatchPlayerFlags != nil {
		return *x.MatchPlayerFlags
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetTalentAbilityIds() []uint32 {
	if x != nil {
		return x.TalentAbilityIds
	}
	return nil
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetHeroPickOrder() uint32 {
	if x != nil && x.HeroPickOrder != nil {
		return *x.HeroPickOrder
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetHeroWasRandomed() bool {
	if x != nil && x.HeroWasRandomed != nil {
		return *x.HeroWasRandomed
	}
	return false
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetHeroWasDotaPlusSuggestion() bool {
	if x != nil && x.HeroWasDotaPlusSuggestion != nil {
		return *x.HeroWasDotaPlusSuggestion
	}
	return false
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetLane() uint32 {
	if x != nil && x.Lane != nil {
		return *x.Lane
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetIsUsingPlusGuide() bool {
	if x != nil && x.IsUsingPlusGuide != nil {
		return *x.IsUsingPlusGuide
	}
	return false
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetHeroDamageReceived() []*CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived {
	if x != nil {
		return x.HeroDamageReceived
	}
	return nil
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetSecondsDead() uint32 {
	if x != nil && x.SecondsDead != nil {
		return *x.SecondsDead
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetGoldLostToDeath() uint32 {
	if x != nil && x.GoldLostToDeath != nil {
		return *x.GoldLostToDeath
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetCommandCount() uint32 {
	if x != nil && x.CommandCount != nil {
		return *x.CommandCount
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetMouseClickCastCommandCount() uint32 {
	if x != nil && x.MouseClickCastCommandCount != nil {
		return *x.MouseClickCastCommandCount
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetTeleportsUsed() uint32 {
	if x != nil && x.TeleportsUsed != nil {
		return *x.TeleportsUsed
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetCavernCrawlMapVariant() uint32 {
	if x != nil && x.CavernCrawlMapVariant != nil {
		return *x.CavernCrawlMapVariant
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetBountyRunes() uint32 {
	if x != nil && x.BountyRunes != nil {
		return *x.BountyRunes
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetOutpostsCaptured() uint32 {
	if x != nil && x.OutpostsCaptured != nil {
		return *x.OutpostsCaptured
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetDewards() uint32 {
	if x != nil && x.Dewards != nil {
		return *x.Dewards
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetWardsPlaced() uint32 {
	if x != nil && x.WardsPlaced != nil {
		return *x.WardsPlaced
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer) GetCampsStacked() uint32 {
	if x != nil && x.CampsStacked != nil {
		return *x.CampsStacked
	}
	return 0
}

type CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DotaTeam *uint32 `protobuf:"varint,1,opt,name=dota_team,json=dotaTeam" json:"dota_team,omitempty"`
	Winner   *bool   `protobuf:"varint,2,opt,name=winner" json:"winner,omitempty"`
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData) Reset() {
	*x = CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData) ProtoMessage() {}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData.ProtoReflect.Descriptor instead.
func (*CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{14, 0, 0, 0}
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData) GetDotaTeam() uint32 {
	if x != nil && x.DotaTeam != nil {
		return *x.DotaTeam
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData) GetWinner() bool {
	if x != nil && x.Winner != nil {
		return *x.Winner
	}
	return false
}

type CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PreReduction  *uint32                                            `protobuf:"varint,1,opt,name=pre_reduction,json=preReduction" json:"pre_reduction,omitempty"`
	PostReduction *uint32                                            `protobuf:"varint,2,opt,name=post_reduction,json=postReduction" json:"post_reduction,omitempty"`
	DamageType    *CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType `protobuf:"varint,3,opt,name=damage_type,json=damageType,enum=dota.CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType,def=0" json:"damage_type,omitempty"`
}

// Default values for CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived fields.
const (
	Default_CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived_DamageType = CMsgGameMatchSignOut_CTeam_CPlayer_HERO_DAMAGE_PHYSICAL
)

func (x *CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived) Reset() {
	*x = CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived) ProtoMessage() {}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived.ProtoReflect.Descriptor instead.
func (*CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{14, 0, 0, 1}
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived) GetPreReduction() uint32 {
	if x != nil && x.PreReduction != nil {
		return *x.PreReduction
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived) GetPostReduction() uint32 {
	if x != nil && x.PostReduction != nil {
		return *x.PostReduction
	}
	return 0
}

func (x *CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived) GetDamageType() CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType {
	if x != nil && x.DamageType != nil {
		return *x.DamageType
	}
	return Default_CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived_DamageType
}

type CMsgSignOutTextMuteInfo_TextMuteMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region         *uint32 `protobuf:"varint,1,opt,name=region" json:"region,omitempty"`
	CausedTextMute *bool   `protobuf:"varint,2,opt,name=caused_text_mute,json=causedTextMute" json:"caused_text_mute,omitempty"`
	ChatMessage    *string `protobuf:"bytes,3,opt,name=chat_message,json=chatMessage" json:"chat_message,omitempty"`
}

func (x *CMsgSignOutTextMuteInfo_TextMuteMessage) Reset() {
	*x = CMsgSignOutTextMuteInfo_TextMuteMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSignOutTextMuteInfo_TextMuteMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSignOutTextMuteInfo_TextMuteMessage) ProtoMessage() {}

func (x *CMsgSignOutTextMuteInfo_TextMuteMessage) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSignOutTextMuteInfo_TextMuteMessage.ProtoReflect.Descriptor instead.
func (*CMsgSignOutTextMuteInfo_TextMuteMessage) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{17, 0}
}

func (x *CMsgSignOutTextMuteInfo_TextMuteMessage) GetRegion() uint32 {
	if x != nil && x.Region != nil {
		return *x.Region
	}
	return 0
}

func (x *CMsgSignOutTextMuteInfo_TextMuteMessage) GetCausedTextMute() bool {
	if x != nil && x.CausedTextMute != nil {
		return *x.CausedTextMute
	}
	return false
}

func (x *CMsgSignOutTextMuteInfo_TextMuteMessage) GetChatMessage() string {
	if x != nil && x.ChatMessage != nil {
		return *x.ChatMessage
	}
	return ""
}

type CMsgSignOutCommunicationSummary_PlayerCommunication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId                   *uint32                                                           `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Pings                       *uint32                                                           `protobuf:"varint,2,opt,name=pings" json:"pings,omitempty"`
	MaxPingsPerInterval         *uint32                                                           `protobuf:"varint,3,opt,name=max_pings_per_interval,json=maxPingsPerInterval" json:"max_pings_per_interval,omitempty"`
	TeammatePings               *uint32                                                           `protobuf:"varint,4,opt,name=teammate_pings,json=teammatePings" json:"teammate_pings,omitempty"`
	MaxTeammatePingsPerInterval *uint32                                                           `protobuf:"varint,5,opt,name=max_teammate_pings_per_interval,json=maxTeammatePingsPerInterval" json:"max_teammate_pings_per_interval,omitempty"`
	TeamChatMessages            *uint32                                                           `protobuf:"varint,6,opt,name=team_chat_messages,json=teamChatMessages" json:"team_chat_messages,omitempty"`
	AllChatMessages             *uint32                                                           `protobuf:"varint,7,opt,name=all_chat_messages,json=allChatMessages" json:"all_chat_messages,omitempty"`
	ChatWheelMessages           *uint32                                                           `protobuf:"varint,8,opt,name=chat_wheel_messages,json=chatWheelMessages" json:"chat_wheel_messages,omitempty"`
	Pauses                      *uint32                                                           `protobuf:"varint,9,opt,name=pauses" json:"pauses,omitempty"`
	Unpauses                    *uint32                                                           `protobuf:"varint,10,opt,name=unpauses" json:"unpauses,omitempty"`
	LinesDrawn                  *uint32                                                           `protobuf:"varint,11,opt,name=lines_drawn,json=linesDrawn" json:"lines_drawn,omitempty"`
	VoiceChatSeconds            *uint32                                                           `protobuf:"varint,12,opt,name=voice_chat_seconds,json=voiceChatSeconds" json:"voice_chat_seconds,omitempty"`
	ChatMutes                   *uint32                                                           `protobuf:"varint,13,opt,name=chat_mutes,json=chatMutes" json:"chat_mutes,omitempty"`
	VoiceMutes                  *uint32                                                           `protobuf:"varint,14,opt,name=voice_mutes,json=voiceMutes" json:"voice_mutes,omitempty"`
	PingDetails                 []*CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail `protobuf:"bytes,15,rep,name=ping_details,json=pingDetails" json:"ping_details,omitempty"`
}

func (x *CMsgSignOutCommunicationSummary_PlayerCommunication) Reset() {
	*x = CMsgSignOutCommunicationSummary_PlayerCommunication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSignOutCommunicationSummary_PlayerCommunication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSignOutCommunicationSummary_PlayerCommunication) ProtoMessage() {}

func (x *CMsgSignOutCommunicationSummary_PlayerCommunication) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSignOutCommunicationSummary_PlayerCommunication.ProtoReflect.Descriptor instead.
func (*CMsgSignOutCommunicationSummary_PlayerCommunication) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{19, 0}
}

func (x *CMsgSignOutCommunicationSummary_PlayerCommunication) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgSignOutCommunicationSummary_PlayerCommunication) GetPings() uint32 {
	if x != nil && x.Pings != nil {
		return *x.Pings
	}
	return 0
}

func (x *CMsgSignOutCommunicationSummary_PlayerCommunication) GetMaxPingsPerInterval() uint32 {
	if x != nil && x.MaxPingsPerInterval != nil {
		return *x.MaxPingsPerInterval
	}
	return 0
}

func (x *CMsgSignOutCommunicationSummary_PlayerCommunication) GetTeammatePings() uint32 {
	if x != nil && x.TeammatePings != nil {
		return *x.TeammatePings
	}
	return 0
}

func (x *CMsgSignOutCommunicationSummary_PlayerCommunication) GetMaxTeammatePingsPerInterval() uint32 {
	if x != nil && x.MaxTeammatePingsPerInterval != nil {
		return *x.MaxTeammatePingsPerInterval
	}
	return 0
}

func (x *CMsgSignOutCommunicationSummary_PlayerCommunication) GetTeamChatMessages() uint32 {
	if x != nil && x.TeamChatMessages != nil {
		return *x.TeamChatMessages
	}
	return 0
}

func (x *CMsgSignOutCommunicationSummary_PlayerCommunication) GetAllChatMessages() uint32 {
	if x != nil && x.AllChatMessages != nil {
		return *x.AllChatMessages
	}
	return 0
}

func (x *CMsgSignOutCommunicationSummary_PlayerCommunication) GetChatWheelMessages() uint32 {
	if x != nil && x.ChatWheelMessages != nil {
		return *x.ChatWheelMessages
	}
	return 0
}

func (x *CMsgSignOutCommunicationSummary_PlayerCommunication) GetPauses() uint32 {
	if x != nil && x.Pauses != nil {
		return *x.Pauses
	}
	return 0
}

func (x *CMsgSignOutCommunicationSummary_PlayerCommunication) GetUnpauses() uint32 {
	if x != nil && x.Unpauses != nil {
		return *x.Unpauses
	}
	return 0
}

func (x *CMsgSignOutCommunicationSummary_PlayerCommunication) GetLinesDrawn() uint32 {
	if x != nil && x.LinesDrawn != nil {
		return *x.LinesDrawn
	}
	return 0
}

func (x *CMsgSignOutCommunicationSummary_PlayerCommunication) GetVoiceChatSeconds() uint32 {
	if x != nil && x.VoiceChatSeconds != nil {
		return *x.VoiceChatSeconds
	}
	return 0
}

func (x *CMsgSignOutCommunicationSummary_PlayerCommunication) GetChatMutes() uint32 {
	if x != nil && x.ChatMutes != nil {
		return *x.ChatMutes
	}
	return 0
}

func (x *CMsgSignOutCommunicationSummary_PlayerCommunication) GetVoiceMutes() uint32 {
	if x != nil && x.VoiceMutes != nil {
		return *x.VoiceMutes
	}
	return 0
}

func (x *CMsgSignOutCommunicationSummary_PlayerCommunication) GetPingDetails() []*CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail {
	if x != nil {
		return x.PingDetails
	}
	return nil
}

type CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  *uint32 `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	Count *uint32 `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
}

func (x *CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail) Reset() {
	*x = CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail) ProtoMessage() {}

func (x *CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail.ProtoReflect.Descriptor instead.
func (*CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{19, 0, 0}
}

func (x *CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type CMsgGameMatchSignoutResponse_PlayerMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeroId         *uint32 `protobuf:"varint,1,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	AvgKillsX16    *uint32 `protobuf:"varint,2,opt,name=avg_kills_x16,json=avgKillsX16" json:"avg_kills_x16,omitempty"`
	AvgDeathsX16   *uint32 `protobuf:"varint,3,opt,name=avg_deaths_x16,json=avgDeathsX16" json:"avg_deaths_x16,omitempty"`
	AvgAssistsX16  *uint32 `protobuf:"varint,4,opt,name=avg_assists_x16,json=avgAssistsX16" json:"avg_assists_x16,omitempty"`
	AvgGpmX16      *uint32 `protobuf:"varint,5,opt,name=avg_gpm_x16,json=avgGpmX16" json:"avg_gpm_x16,omitempty"`
	AvgXpmX16      *uint32 `protobuf:"varint,6,opt,name=avg_xpm_x16,json=avgXpmX16" json:"avg_xpm_x16,omitempty"`
	BestKillsX16   *uint32 `protobuf:"varint,7,opt,name=best_kills_x16,json=bestKillsX16" json:"best_kills_x16,omitempty"`
	BestAssistsX16 *uint32 `protobuf:"varint,8,opt,name=best_assists_x16,json=bestAssistsX16" json:"best_assists_x16,omitempty"`
	BestGpmX16     *uint32 `protobuf:"varint,9,opt,name=best_gpm_x16,json=bestGpmX16" json:"best_gpm_x16,omitempty"`
	BestXpmX16     *uint32 `protobuf:"varint,10,opt,name=best_xpm_x16,json=bestXpmX16" json:"best_xpm_x16,omitempty"`
	WinStreak      *uint32 `protobuf:"varint,11,opt,name=win_streak,json=winStreak" json:"win_streak,omitempty"`
	BestWinStreak  *uint32 `protobuf:"varint,12,opt,name=best_win_streak,json=bestWinStreak" json:"best_win_streak,omitempty"`
	GamesPlayed    *uint32 `protobuf:"varint,13,opt,name=games_played,json=gamesPlayed" json:"games_played,omitempty"`
}

func (x *CMsgGameMatchSignoutResponse_PlayerMetadata) Reset() {
	*x = CMsgGameMatchSignoutResponse_PlayerMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGameMatchSignoutResponse_PlayerMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameMatchSignoutResponse_PlayerMetadata) ProtoMessage() {}

func (x *CMsgGameMatchSignoutResponse_PlayerMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameMatchSignoutResponse_PlayerMetadata.ProtoReflect.Descriptor instead.
func (*CMsgGameMatchSignoutResponse_PlayerMetadata) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{20, 0}
}

func (x *CMsgGameMatchSignoutResponse_PlayerMetadata) GetHeroId() uint32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CMsgGameMatchSignoutResponse_PlayerMetadata) GetAvgKillsX16() uint32 {
	if x != nil && x.AvgKillsX16 != nil {
		return *x.AvgKillsX16
	}
	return 0
}

func (x *CMsgGameMatchSignoutResponse_PlayerMetadata) GetAvgDeathsX16() uint32 {
	if x != nil && x.AvgDeathsX16 != nil {
		return *x.AvgDeathsX16
	}
	return 0
}

func (x *CMsgGameMatchSignoutResponse_PlayerMetadata) GetAvgAssistsX16() uint32 {
	if x != nil && x.AvgAssistsX16 != nil {
		return *x.AvgAssistsX16
	}
	return 0
}

func (x *CMsgGameMatchSignoutResponse_PlayerMetadata) GetAvgGpmX16() uint32 {
	if x != nil && x.AvgGpmX16 != nil {
		return *x.AvgGpmX16
	}
	return 0
}

func (x *CMsgGameMatchSignoutResponse_PlayerMetadata) GetAvgXpmX16() uint32 {
	if x != nil && x.AvgXpmX16 != nil {
		return *x.AvgXpmX16
	}
	return 0
}

func (x *CMsgGameMatchSignoutResponse_PlayerMetadata) GetBestKillsX16() uint32 {
	if x != nil && x.BestKillsX16 != nil {
		return *x.BestKillsX16
	}
	return 0
}

func (x *CMsgGameMatchSignoutResponse_PlayerMetadata) GetBestAssistsX16() uint32 {
	if x != nil && x.BestAssistsX16 != nil {
		return *x.BestAssistsX16
	}
	return 0
}

func (x *CMsgGameMatchSignoutResponse_PlayerMetadata) GetBestGpmX16() uint32 {
	if x != nil && x.BestGpmX16 != nil {
		return *x.BestGpmX16
	}
	return 0
}

func (x *CMsgGameMatchSignoutResponse_PlayerMetadata) GetBestXpmX16() uint32 {
	if x != nil && x.BestXpmX16 != nil {
		return *x.BestXpmX16
	}
	return 0
}

func (x *CMsgGameMatchSignoutResponse_PlayerMetadata) GetWinStreak() uint32 {
	if x != nil && x.WinStreak != nil {
		return *x.WinStreak
	}
	return 0
}

func (x *CMsgGameMatchSignoutResponse_PlayerMetadata) GetBestWinStreak() uint32 {
	if x != nil && x.BestWinStreak != nil {
		return *x.BestWinStreak
	}
	return 0
}

func (x *CMsgGameMatchSignoutResponse_PlayerMetadata) GetGamesPlayed() uint32 {
	if x != nil && x.GamesPlayed != nil {
		return *x.GamesPlayed
	}
	return 0
}

type CMsgDOTALiveScoreboardUpdate_Team struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Players       []*CMsgDOTALiveScoreboardUpdate_Team_Player `protobuf:"bytes,1,rep,name=players" json:"players,omitempty"`
	Score         *uint32                                     `protobuf:"varint,2,opt,name=score" json:"score,omitempty"`
	TowerState    *uint32                                     `protobuf:"varint,3,opt,name=tower_state,json=towerState" json:"tower_state,omitempty"`
	BarracksState *uint32                                     `protobuf:"varint,4,opt,name=barracks_state,json=barracksState" json:"barracks_state,omitempty"`
	HeroPicks     []uint32                                    `protobuf:"varint,5,rep,name=hero_picks,json=heroPicks" json:"hero_picks,omitempty"`
	HeroBans      []uint32                                    `protobuf:"varint,6,rep,name=hero_bans,json=heroBans" json:"hero_bans,omitempty"`
}

func (x *CMsgDOTALiveScoreboardUpdate_Team) Reset() {
	*x = CMsgDOTALiveScoreboardUpdate_Team{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTALiveScoreboardUpdate_Team) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTALiveScoreboardUpdate_Team) ProtoMessage() {}

func (x *CMsgDOTALiveScoreboardUpdate_Team) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTALiveScoreboardUpdate_Team.ProtoReflect.Descriptor instead.
func (*CMsgDOTALiveScoreboardUpdate_Team) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{25, 0}
}

func (x *CMsgDOTALiveScoreboardUpdate_Team) GetPlayers() []*CMsgDOTALiveScoreboardUpdate_Team_Player {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *CMsgDOTALiveScoreboardUpdate_Team) GetScore() uint32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

func (x *CMsgDOTALiveScoreboardUpdate_Team) GetTowerState() uint32 {
	if x != nil && x.TowerState != nil {
		return *x.TowerState
	}
	return 0
}

func (x *CMsgDOTALiveScoreboardUpdate_Team) GetBarracksState() uint32 {
	if x != nil && x.BarracksState != nil {
		return *x.BarracksState
	}
	return 0
}

func (x *CMsgDOTALiveScoreboardUpdate_Team) GetHeroPicks() []uint32 {
	if x != nil {
		return x.HeroPicks
	}
	return nil
}

func (x *CMsgDOTALiveScoreboardUpdate_Team) GetHeroBans() []uint32 {
	if x != nil {
		return x.HeroBans
	}
	return nil
}

type CMsgDOTALiveScoreboardUpdate_Team_Player struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerSlot       *uint32                                                     `protobuf:"varint,1,opt,name=player_slot,json=playerSlot" json:"player_slot,omitempty"`
	PlayerName       *string                                                     `protobuf:"bytes,2,opt,name=player_name,json=playerName" json:"player_name,omitempty"`
	HeroName         *string                                                     `protobuf:"bytes,3,opt,name=hero_name,json=heroName" json:"hero_name,omitempty"`
	HeroId           *uint32                                                     `protobuf:"varint,4,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	Kills            *uint32                                                     `protobuf:"varint,5,opt,name=kills" json:"kills,omitempty"`
	Deaths           *uint32                                                     `protobuf:"varint,6,opt,name=deaths" json:"deaths,omitempty"`
	Assists          *uint32                                                     `protobuf:"varint,7,opt,name=assists" json:"assists,omitempty"`
	LastHits         *uint32                                                     `protobuf:"varint,8,opt,name=last_hits,json=lastHits" json:"last_hits,omitempty"`
	Denies           *uint32                                                     `protobuf:"varint,9,opt,name=denies" json:"denies,omitempty"`
	Gold             *uint32                                                     `protobuf:"varint,10,opt,name=gold" json:"gold,omitempty"`
	Level            *uint32                                                     `protobuf:"varint,11,opt,name=level" json:"level,omitempty"`
	GoldPerMin       *float32                                                    `protobuf:"fixed32,12,opt,name=gold_per_min,json=goldPerMin" json:"gold_per_min,omitempty"`
	XpPerMin         *float32                                                    `protobuf:"fixed32,13,opt,name=xp_per_min,json=xpPerMin" json:"xp_per_min,omitempty"`
	UltimateState    *CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState `protobuf:"varint,14,opt,name=ultimate_state,json=ultimateState,enum=dota.CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState,def=0" json:"ultimate_state,omitempty"`
	UltimateCooldown *float32                                                    `protobuf:"fixed32,15,opt,name=ultimate_cooldown,json=ultimateCooldown" json:"ultimate_cooldown,omitempty"`
	Item0            *uint32                                                     `protobuf:"varint,16,opt,name=item0" json:"item0,omitempty"`
	Item1            *uint32                                                     `protobuf:"varint,17,opt,name=item1" json:"item1,omitempty"`
	Item2            *uint32                                                     `protobuf:"varint,18,opt,name=item2" json:"item2,omitempty"`
	Item3            *uint32                                                     `protobuf:"varint,19,opt,name=item3" json:"item3,omitempty"`
	Item4            *uint32                                                     `protobuf:"varint,20,opt,name=item4" json:"item4,omitempty"`
	Item5            *uint32                                                     `protobuf:"varint,21,opt,name=item5" json:"item5,omitempty"`
	RespawnTimer     *uint32                                                     `protobuf:"varint,22,opt,name=respawn_timer,json=respawnTimer" json:"respawn_timer,omitempty"`
	AccountId        *uint32                                                     `protobuf:"varint,23,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	PositionX        *float32                                                    `protobuf:"fixed32,24,opt,name=position_x,json=positionX" json:"position_x,omitempty"`
	PositionY        *float32                                                    `protobuf:"fixed32,25,opt,name=position_y,json=positionY" json:"position_y,omitempty"`
	NetWorth         *uint32                                                     `protobuf:"varint,26,opt,name=net_worth,json=netWorth" json:"net_worth,omitempty"`
	Abilities        []*CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility     `protobuf:"bytes,27,rep,name=abilities" json:"abilities,omitempty"`
}

// Default values for CMsgDOTALiveScoreboardUpdate_Team_Player fields.
const (
	Default_CMsgDOTALiveScoreboardUpdate_Team_Player_UltimateState = CMsgDOTALiveScoreboardUpdate_Team_Player_k_EDOTAUltimateStateNotLearned
)

func (x *CMsgDOTALiveScoreboardUpdate_Team_Player) Reset() {
	*x = CMsgDOTALiveScoreboardUpdate_Team_Player{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTALiveScoreboardUpdate_Team_Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTALiveScoreboardUpdate_Team_Player) ProtoMessage() {}

func (x *CMsgDOTALiveScoreboardUpdate_Team_Player) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTALiveScoreboardUpdate_Team_Player.ProtoReflect.Descriptor instead.
func (*CMsgDOTALiveScoreboardUpdate_Team_Player) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{25, 0, 0}
}

func (x *CMsgDOTALiveScoreboardUpdate_Team_Player) GetPlayerSlot() uint32 {
	if x != nil && x.PlayerSlot != nil {
		return *x.PlayerSlot
	}
	return 0
}

func (x *CMsgDOTALiveScoreboardUpdate_Team_Player) GetPlayerName() string {
	if x != nil && x.PlayerName != nil {
		return *x.PlayerName
	}
	return ""
}

func (x *CMsgDOTALiveScoreboardUpdate_Team_Player) GetHeroName() string {
	if x != nil && x.HeroName != nil {
		return *x.HeroName
	}
	return ""
}

func (x *CMsgDOTALiveScoreboardUpdate_Team_Player) GetHeroId() uint32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CMsgDOTALiveScoreboardUpdate_Team_Player) GetKills() uint32 {
	if x != nil && x.Kills != nil {
		return *x.Kills
	}
	return 0
}

func (x *CMsgDOTALiveScoreboardUpdate_Team_Player) GetDeaths() uint32 {
	if x != nil && x.Deaths != nil {
		return *x.Deaths
	}
	return 0
}

func (x *CMsgDOTALiveScoreboardUpdate_Team_Player) GetAssists() uint32 {
	if x != nil && x.Assists != nil {
		return *x.Assists
	}
	return 0
}

func (x *CMsgDOTALiveScoreboardUpdate_Team_Player) GetLastHits() uint32 {
	if x != nil && x.LastHits != nil {
		return *x.LastHits
	}
	return 0
}

func (x *CMsgDOTALiveScoreboardUpdate_Team_Player) GetDenies() uint32 {
	if x != nil && x.Denies != nil {
		return *x.Denies
	}
	return 0
}

func (x *CMsgDOTALiveScoreboardUpdate_Team_Player) GetGold() uint32 {
	if x != nil && x.Gold != nil {
		return *x.Gold
	}
	return 0
}

func (x *CMsgDOTALiveScoreboardUpdate_Team_Player) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *CMsgDOTALiveScoreboardUpdate_Team_Player) GetGoldPerMin() float32 {
	if x != nil && x.GoldPerMin != nil {
		return *x.GoldPerMin
	}
	return 0
}

func (x *CMsgDOTALiveScoreboardUpdate_Team_Player) GetXpPerMin() float32 {
	if x != nil && x.XpPerMin != nil {
		return *x.XpPerMin
	}
	return 0
}

func (x *CMsgDOTALiveScoreboardUpdate_Team_Player) GetUltimateState() CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState {
	if x != nil && x.UltimateState != nil {
		return *x.UltimateState
	}
	return Default_CMsgDOTALiveScoreboardUpdate_Team_Player_UltimateState
}

func (x *CMsgDOTALiveScoreboardUpdate_Team_Player) GetUltimateCooldown() float32 {
	if x != nil && x.UltimateCooldown != nil {
		return *x.UltimateCooldown
	}
	return 0
}

func (x *CMsgDOTALiveScoreboardUpdate_Team_Player) GetItem0() uint32 {
	if x != nil && x.Item0 != nil {
		return *x.Item0
	}
	return 0
}

func (x *CMsgDOTALiveScoreboardUpdate_Team_Player) GetItem1() uint32 {
	if x != nil && x.Item1 != nil {
		return *x.Item1
	}
	return 0
}

func (x *CMsgDOTALiveScoreboardUpdate_Team_Player) GetItem2() uint32 {
	if x != nil && x.Item2 != nil {
		return *x.Item2
	}
	return 0
}

func (x *CMsgDOTALiveScoreboardUpdate_Team_Player) GetItem3() uint32 {
	if x != nil && x.Item3 != nil {
		return *x.Item3
	}
	return 0
}

func (x *CMsgDOTALiveScoreboardUpdate_Team_Player) GetItem4() uint32 {
	if x != nil && x.Item4 != nil {
		return *x.Item4
	}
	return 0
}

func (x *CMsgDOTALiveScoreboardUpdate_Team_Player) GetItem5() uint32 {
	if x != nil && x.Item5 != nil {
		return *x.Item5
	}
	return 0
}

func (x *CMsgDOTALiveScoreboardUpdate_Team_Player) GetRespawnTimer() uint32 {
	if x != nil && x.RespawnTimer != nil {
		return *x.RespawnTimer
	}
	return 0
}

func (x *CMsgDOTALiveScoreboardUpdate_Team_Player) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgDOTALiveScoreboardUpdate_Team_Player) GetPositionX() float32 {
	if x != nil && x.PositionX != nil {
		return *x.PositionX
	}
	return 0
}

func (x *CMsgDOTALiveScoreboardUpdate_Team_Player) GetPositionY() float32 {
	if x != nil && x.PositionY != nil {
		return *x.PositionY
	}
	return 0
}

func (x *CMsgDOTALiveScoreboardUpdate_Team_Player) GetNetWorth() uint32 {
	if x != nil && x.NetWorth != nil {
		return *x.NetWorth
	}
	return 0
}

func (x *CMsgDOTALiveScoreboardUpdate_Team_Player) GetAbilities() []*CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility {
	if x != nil {
		return x.Abilities
	}
	return nil
}

type CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AbilityId    *uint32 `protobuf:"varint,1,opt,name=ability_id,json=abilityId" json:"ability_id,omitempty"`
	AbilityLevel *uint32 `protobuf:"varint,2,opt,name=ability_level,json=abilityLevel" json:"ability_level,omitempty"`
}

func (x *CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility) Reset() {
	*x = CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility) ProtoMessage() {}

func (x *CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility.ProtoReflect.Descriptor instead.
func (*CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{25, 0, 0, 0}
}

func (x *CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility) GetAbilityId() uint32 {
	if x != nil && x.AbilityId != nil {
		return *x.AbilityId
	}
	return 0
}

func (x *CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility) GetAbilityLevel() uint32 {
	if x != nil && x.AbilityLevel != nil {
		return *x.AbilityLevel
	}
	return 0
}

type CMsgDOTARequestBatchPlayerResourcesResponse_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId        *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	PreventTextChat  *bool   `protobuf:"varint,2,opt,name=prevent_text_chat,json=preventTextChat" json:"prevent_text_chat,omitempty"`
	PreventVoiceChat *bool   `protobuf:"varint,3,opt,name=prevent_voice_chat,json=preventVoiceChat" json:"prevent_voice_chat,omitempty"`
	Rank             *uint32 `protobuf:"varint,4,opt,name=rank" json:"rank,omitempty"`
	RankCalibrated   *bool   `protobuf:"varint,5,opt,name=rank_calibrated,json=rankCalibrated" json:"rank_calibrated,omitempty"`
	LowPriority      *bool   `protobuf:"varint,6,opt,name=low_priority,json=lowPriority" json:"low_priority,omitempty"`
	IsNewPlayer      *bool   `protobuf:"varint,7,opt,name=is_new_player,json=isNewPlayer" json:"is_new_player,omitempty"`
	IsGuidePlayer    *bool   `protobuf:"varint,8,opt,name=is_guide_player,json=isGuidePlayer" json:"is_guide_player,omitempty"`
}

func (x *CMsgDOTARequestBatchPlayerResourcesResponse_Result) Reset() {
	*x = CMsgDOTARequestBatchPlayerResourcesResponse_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTARequestBatchPlayerResourcesResponse_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTARequestBatchPlayerResourcesResponse_Result) ProtoMessage() {}

func (x *CMsgDOTARequestBatchPlayerResourcesResponse_Result) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTARequestBatchPlayerResourcesResponse_Result.ProtoReflect.Descriptor instead.
func (*CMsgDOTARequestBatchPlayerResourcesResponse_Result) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{29, 0}
}

func (x *CMsgDOTARequestBatchPlayerResourcesResponse_Result) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgDOTARequestBatchPlayerResourcesResponse_Result) GetPreventTextChat() bool {
	if x != nil && x.PreventTextChat != nil {
		return *x.PreventTextChat
	}
	return false
}

func (x *CMsgDOTARequestBatchPlayerResourcesResponse_Result) GetPreventVoiceChat() bool {
	if x != nil && x.PreventVoiceChat != nil {
		return *x.PreventVoiceChat
	}
	return false
}

func (x *CMsgDOTARequestBatchPlayerResourcesResponse_Result) GetRank() uint32 {
	if x != nil && x.Rank != nil {
		return *x.Rank
	}
	return 0
}

func (x *CMsgDOTARequestBatchPlayerResourcesResponse_Result) GetRankCalibrated() bool {
	if x != nil && x.RankCalibrated != nil {
		return *x.RankCalibrated
	}
	return false
}

func (x *CMsgDOTARequestBatchPlayerResourcesResponse_Result) GetLowPriority() bool {
	if x != nil && x.LowPriority != nil {
		return *x.LowPriority
	}
	return false
}

func (x *CMsgDOTARequestBatchPlayerResourcesResponse_Result) GetIsNewPlayer() bool {
	if x != nil && x.IsNewPlayer != nil {
		return *x.IsNewPlayer
	}
	return false
}

func (x *CMsgDOTARequestBatchPlayerResourcesResponse_Result) GetIsGuidePlayer() bool {
	if x != nil && x.IsGuidePlayer != nil {
		return *x.IsGuidePlayer
	}
	return false
}

type CMsgDOTAAwardEventPoints_AwardPoints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId                     *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Points                        *int32  `protobuf:"varint,2,opt,name=points" json:"points,omitempty"`
	PremiumPoints                 *int32  `protobuf:"varint,3,opt,name=premium_points,json=premiumPoints" json:"premium_points,omitempty"`
	TradeBanTime                  *uint32 `protobuf:"varint,5,opt,name=trade_ban_time,json=tradeBanTime" json:"trade_ban_time,omitempty"`
	EligibleForPeriodicAdjustment *bool   `protobuf:"varint,6,opt,name=eligible_for_periodic_adjustment,json=eligibleForPeriodicAdjustment,def=0" json:"eligible_for_periodic_adjustment,omitempty"`
	PointCapPeriodicResourceId    *uint32 `protobuf:"varint,7,opt,name=point_cap_periodic_resource_id,json=pointCapPeriodicResourceId,def=0" json:"point_cap_periodic_resource_id,omitempty"`
}

// Default values for CMsgDOTAAwardEventPoints_AwardPoints fields.
const (
	Default_CMsgDOTAAwardEventPoints_AwardPoints_EligibleForPeriodicAdjustment = bool(false)
	Default_CMsgDOTAAwardEventPoints_AwardPoints_PointCapPeriodicResourceId    = uint32(0)
)

func (x *CMsgDOTAAwardEventPoints_AwardPoints) Reset() {
	*x = CMsgDOTAAwardEventPoints_AwardPoints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAAwardEventPoints_AwardPoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAAwardEventPoints_AwardPoints) ProtoMessage() {}

func (x *CMsgDOTAAwardEventPoints_AwardPoints) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAAwardEventPoints_AwardPoints.ProtoReflect.Descriptor instead.
func (*CMsgDOTAAwardEventPoints_AwardPoints) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{48, 0}
}

func (x *CMsgDOTAAwardEventPoints_AwardPoints) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgDOTAAwardEventPoints_AwardPoints) GetPoints() int32 {
	if x != nil && x.Points != nil {
		return *x.Points
	}
	return 0
}

func (x *CMsgDOTAAwardEventPoints_AwardPoints) GetPremiumPoints() int32 {
	if x != nil && x.PremiumPoints != nil {
		return *x.PremiumPoints
	}
	return 0
}

func (x *CMsgDOTAAwardEventPoints_AwardPoints) GetTradeBanTime() uint32 {
	if x != nil && x.TradeBanTime != nil {
		return *x.TradeBanTime
	}
	return 0
}

func (x *CMsgDOTAAwardEventPoints_AwardPoints) GetEligibleForPeriodicAdjustment() bool {
	if x != nil && x.EligibleForPeriodicAdjustment != nil {
		return *x.EligibleForPeriodicAdjustment
	}
	return Default_CMsgDOTAAwardEventPoints_AwardPoints_EligibleForPeriodicAdjustment
}

func (x *CMsgDOTAAwardEventPoints_AwardPoints) GetPointCapPeriodicResourceId() uint32 {
	if x != nil && x.PointCapPeriodicResourceId != nil {
		return *x.PointCapPeriodicResourceId
	}
	return Default_CMsgDOTAAwardEventPoints_AwardPoints_PointCapPeriodicResourceId
}

type CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LootList         *string  `protobuf:"bytes,1,opt,name=loot_list,json=lootList" json:"loot_list,omitempty"`
	PlayerAccountIds []uint32 `protobuf:"varint,2,rep,name=player_account_ids,json=playerAccountIds" json:"player_account_ids,omitempty"`
	NoTrade          *bool    `protobuf:"varint,3,opt,name=no_trade,json=noTrade" json:"no_trade,omitempty"`
	RandomizeReward  *bool    `protobuf:"varint,4,opt,name=randomize_reward,json=randomizeReward" json:"randomize_reward,omitempty"`
}

func (x *CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops) Reset() {
	*x = CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops) ProtoMessage() {}

func (x *CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{49, 0}
}

func (x *CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops) GetLootList() string {
	if x != nil && x.LootList != nil {
		return *x.LootList
	}
	return ""
}

func (x *CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops) GetPlayerAccountIds() []uint32 {
	if x != nil {
		return x.PlayerAccountIds
	}
	return nil
}

func (x *CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops) GetNoTrade() bool {
	if x != nil && x.NoTrade != nil {
		return *x.NoTrade
	}
	return false
}

func (x *CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops) GetRandomizeReward() bool {
	if x != nil && x.RandomizeReward != nil {
		return *x.RandomizeReward
	}
	return false
}

type CMsgDOTAFrostivusTimeElapsed_User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId    *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	TimeElapsedS *uint32 `protobuf:"varint,2,opt,name=time_elapsed_s,json=timeElapsedS" json:"time_elapsed_s,omitempty"`
}

func (x *CMsgDOTAFrostivusTimeElapsed_User) Reset() {
	*x = CMsgDOTAFrostivusTimeElapsed_User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAFrostivusTimeElapsed_User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAFrostivusTimeElapsed_User) ProtoMessage() {}

func (x *CMsgDOTAFrostivusTimeElapsed_User) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAFrostivusTimeElapsed_User.ProtoReflect.Descriptor instead.
func (*CMsgDOTAFrostivusTimeElapsed_User) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{50, 0}
}

func (x *CMsgDOTAFrostivusTimeElapsed_User) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgDOTAFrostivusTimeElapsed_User) GetTimeElapsedS() uint32 {
	if x != nil && x.TimeElapsedS != nil {
		return *x.TimeElapsedS
	}
	return 0
}

type CMsgServerGetEventPointsResponse_Points struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId   *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	PointsTotal *uint32 `protobuf:"varint,2,opt,name=points_total,json=pointsTotal" json:"points_total,omitempty"`
	Owned       *bool   `protobuf:"varint,4,opt,name=owned" json:"owned,omitempty"`
}

func (x *CMsgServerGetEventPointsResponse_Points) Reset() {
	*x = CMsgServerGetEventPointsResponse_Points{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerGetEventPointsResponse_Points) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerGetEventPointsResponse_Points) ProtoMessage() {}

func (x *CMsgServerGetEventPointsResponse_Points) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerGetEventPointsResponse_Points.ProtoReflect.Descriptor instead.
func (*CMsgServerGetEventPointsResponse_Points) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{55, 0}
}

func (x *CMsgServerGetEventPointsResponse_Points) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgServerGetEventPointsResponse_Points) GetPointsTotal() uint32 {
	if x != nil && x.PointsTotal != nil {
		return *x.PointsTotal
	}
	return 0
}

func (x *CMsgServerGetEventPointsResponse_Points) GetOwned() bool {
	if x != nil && x.Owned != nil {
		return *x.Owned
	}
	return false
}

type CMsgServerGrantSurveyPermission_Survey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId    *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	QuestionId   *uint32 `protobuf:"varint,2,opt,name=question_id,json=questionId" json:"question_id,omitempty"`
	ExpireTime   *uint32 `protobuf:"varint,3,opt,name=expire_time,json=expireTime" json:"expire_time,omitempty"`
	SurveyKey    *uint64 `protobuf:"varint,4,opt,name=survey_key,json=surveyKey" json:"survey_key,omitempty"`
	ExtraData    *uint64 `protobuf:"varint,5,opt,name=extra_data,json=extraData" json:"extra_data,omitempty"`
	ExtraData_32 *uint64 `protobuf:"varint,6,opt,name=extra_data_32,json=extraData32" json:"extra_data_32,omitempty"`
}

func (x *CMsgServerGrantSurveyPermission_Survey) Reset() {
	*x = CMsgServerGrantSurveyPermission_Survey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerGrantSurveyPermission_Survey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerGrantSurveyPermission_Survey) ProtoMessage() {}

func (x *CMsgServerGrantSurveyPermission_Survey) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerGrantSurveyPermission_Survey.ProtoReflect.Descriptor instead.
func (*CMsgServerGrantSurveyPermission_Survey) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{56, 0}
}

func (x *CMsgServerGrantSurveyPermission_Survey) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgServerGrantSurveyPermission_Survey) GetQuestionId() uint32 {
	if x != nil && x.QuestionId != nil {
		return *x.QuestionId
	}
	return 0
}

func (x *CMsgServerGrantSurveyPermission_Survey) GetExpireTime() uint32 {
	if x != nil && x.ExpireTime != nil {
		return *x.ExpireTime
	}
	return 0
}

func (x *CMsgServerGrantSurveyPermission_Survey) GetSurveyKey() uint64 {
	if x != nil && x.SurveyKey != nil {
		return *x.SurveyKey
	}
	return 0
}

func (x *CMsgServerGrantSurveyPermission_Survey) GetExtraData() uint64 {
	if x != nil && x.ExtraData != nil {
		return *x.ExtraData
	}
	return 0
}

func (x *CMsgServerGrantSurveyPermission_Survey) GetExtraData_32() uint64 {
	if x != nil && x.ExtraData_32 != nil {
		return *x.ExtraData_32
	}
	return 0
}

type CMsgServerToGCMatchConnectionStats_Player struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId     *uint32  `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Ip            *uint32  `protobuf:"fixed32,2,opt,name=ip" json:"ip,omitempty"`
	AvgPingMs     *uint32  `protobuf:"varint,3,opt,name=avg_ping_ms,json=avgPingMs" json:"avg_ping_ms,omitempty"`
	PacketLoss    *float32 `protobuf:"fixed32,5,opt,name=packet_loss,json=packetLoss" json:"packet_loss,omitempty"`
	PingDeviation *float32 `protobuf:"fixed32,6,opt,name=ping_deviation,json=pingDeviation" json:"ping_deviation,omitempty"`
	FullResends   *uint32  `protobuf:"varint,7,opt,name=full_resends,json=fullResends" json:"full_resends,omitempty"`
}

func (x *CMsgServerToGCMatchConnectionStats_Player) Reset() {
	*x = CMsgServerToGCMatchConnectionStats_Player{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerToGCMatchConnectionStats_Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCMatchConnectionStats_Player) ProtoMessage() {}

func (x *CMsgServerToGCMatchConnectionStats_Player) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCMatchConnectionStats_Player.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCMatchConnectionStats_Player) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{58, 0}
}

func (x *CMsgServerToGCMatchConnectionStats_Player) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgServerToGCMatchConnectionStats_Player) GetIp() uint32 {
	if x != nil && x.Ip != nil {
		return *x.Ip
	}
	return 0
}

func (x *CMsgServerToGCMatchConnectionStats_Player) GetAvgPingMs() uint32 {
	if x != nil && x.AvgPingMs != nil {
		return *x.AvgPingMs
	}
	return 0
}

func (x *CMsgServerToGCMatchConnectionStats_Player) GetPacketLoss() float32 {
	if x != nil && x.PacketLoss != nil {
		return *x.PacketLoss
	}
	return 0
}

func (x *CMsgServerToGCMatchConnectionStats_Player) GetPingDeviation() float32 {
	if x != nil && x.PingDeviation != nil {
		return *x.PingDeviation
	}
	return 0
}

func (x *CMsgServerToGCMatchConnectionStats_Player) GetFullResends() uint32 {
	if x != nil && x.FullResends != nil {
		return *x.FullResends
	}
	return 0
}

type CSerializedCombatLog_Dictionary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Strings []*CSerializedCombatLog_Dictionary_DictString `protobuf:"bytes,1,rep,name=strings" json:"strings,omitempty"`
}

func (x *CSerializedCombatLog_Dictionary) Reset() {
	*x = CSerializedCombatLog_Dictionary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSerializedCombatLog_Dictionary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSerializedCombatLog_Dictionary) ProtoMessage() {}

func (x *CSerializedCombatLog_Dictionary) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSerializedCombatLog_Dictionary.ProtoReflect.Descriptor instead.
func (*CSerializedCombatLog_Dictionary) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{60, 0}
}

func (x *CSerializedCombatLog_Dictionary) GetStrings() []*CSerializedCombatLog_Dictionary_DictString {
	if x != nil {
		return x.Strings
	}
	return nil
}

type CSerializedCombatLog_Dictionary_DictString struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    *uint32 `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	Value *string `protobuf:"bytes,2,req,name=value" json:"value,omitempty"`
}

func (x *CSerializedCombatLog_Dictionary_DictString) Reset() {
	*x = CSerializedCombatLog_Dictionary_DictString{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSerializedCombatLog_Dictionary_DictString) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSerializedCombatLog_Dictionary_DictString) ProtoMessage() {}

func (x *CSerializedCombatLog_Dictionary_DictString) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSerializedCombatLog_Dictionary_DictString.ProtoReflect.Descriptor instead.
func (*CSerializedCombatLog_Dictionary_DictString) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{60, 0, 0}
}

func (x *CSerializedCombatLog_Dictionary_DictString) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *CSerializedCombatLog_Dictionary_DictString) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId *uint32                 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Equips    []*CAdditionalEquipSlot `protobuf:"bytes,2,rep,name=equips" json:"equips,omitempty"`
}

func (x *CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips) Reset() {
	*x = CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips) ProtoMessage() {}

func (x *CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{62, 0}
}

func (x *CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips) GetEquips() []*CAdditionalEquipSlot {
	if x != nil {
		return x.Equips
	}
	return nil
}

type CMsgServerToGCVictoryPredictions_Record struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId *uint32  `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	ItemId    *uint64  `protobuf:"varint,2,opt,name=item_id,json=itemId" json:"item_id,omitempty"`
	ItemIds   []uint64 `protobuf:"varint,5,rep,name=item_ids,json=itemIds" json:"item_ids,omitempty"`
}

func (x *CMsgServerToGCVictoryPredictions_Record) Reset() {
	*x = CMsgServerToGCVictoryPredictions_Record{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerToGCVictoryPredictions_Record) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCVictoryPredictions_Record) ProtoMessage() {}

func (x *CMsgServerToGCVictoryPredictions_Record) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCVictoryPredictions_Record.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCVictoryPredictions_Record) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{65, 0}
}

func (x *CMsgServerToGCVictoryPredictions_Record) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgServerToGCVictoryPredictions_Record) GetItemId() uint64 {
	if x != nil && x.ItemId != nil {
		return *x.ItemId
	}
	return 0
}

func (x *CMsgServerToGCVictoryPredictions_Record) GetItemIds() []uint64 {
	if x != nil {
		return x.ItemIds
	}
	return nil
}

type CMsgServerToGCKillSummaries_KillSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KillerHeroId *uint32 `protobuf:"varint,1,opt,name=killer_hero_id,json=killerHeroId" json:"killer_hero_id,omitempty"`
	VictimHeroId *uint32 `protobuf:"varint,2,opt,name=victim_hero_id,json=victimHeroId" json:"victim_hero_id,omitempty"`
	KillCount    *uint32 `protobuf:"varint,3,opt,name=kill_count,json=killCount" json:"kill_count,omitempty"`
}

func (x *CMsgServerToGCKillSummaries_KillSummary) Reset() {
	*x = CMsgServerToGCKillSummaries_KillSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerToGCKillSummaries_KillSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCKillSummaries_KillSummary) ProtoMessage() {}

func (x *CMsgServerToGCKillSummaries_KillSummary) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCKillSummaries_KillSummary.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCKillSummaries_KillSummary) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{72, 0}
}

func (x *CMsgServerToGCKillSummaries_KillSummary) GetKillerHeroId() uint32 {
	if x != nil && x.KillerHeroId != nil {
		return *x.KillerHeroId
	}
	return 0
}

func (x *CMsgServerToGCKillSummaries_KillSummary) GetVictimHeroId() uint32 {
	if x != nil && x.VictimHeroId != nil {
		return *x.VictimHeroId
	}
	return 0
}

func (x *CMsgServerToGCKillSummaries_KillSummary) GetKillCount() uint32 {
	if x != nil && x.KillCount != nil {
		return *x.KillCount
	}
	return 0
}

type CMsgGCToServerPredictionResult_Prediction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemDef         *uint32                                            `protobuf:"varint,1,opt,name=item_def,json=itemDef" json:"item_def,omitempty"`
	NumCorrect      *uint32                                            `protobuf:"varint,2,opt,name=num_correct,json=numCorrect" json:"num_correct,omitempty"`
	NumFails        *uint32                                            `protobuf:"varint,3,opt,name=num_fails,json=numFails" json:"num_fails,omitempty"`
	Result          *CMsgGCToServerPredictionResult_Prediction_EResult `protobuf:"varint,4,opt,name=result,enum=dota.CMsgGCToServerPredictionResult_Prediction_EResult,def=1" json:"result,omitempty"`
	GrantedItemDefs []uint32                                           `protobuf:"varint,6,rep,name=granted_item_defs,json=grantedItemDefs" json:"granted_item_defs,omitempty"`
}

// Default values for CMsgGCToServerPredictionResult_Prediction fields.
const (
	Default_CMsgGCToServerPredictionResult_Prediction_Result = CMsgGCToServerPredictionResult_Prediction_k_eResult_ItemGranted
)

func (x *CMsgGCToServerPredictionResult_Prediction) Reset() {
	*x = CMsgGCToServerPredictionResult_Prediction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCToServerPredictionResult_Prediction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToServerPredictionResult_Prediction) ProtoMessage() {}

func (x *CMsgGCToServerPredictionResult_Prediction) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToServerPredictionResult_Prediction.ProtoReflect.Descriptor instead.
func (*CMsgGCToServerPredictionResult_Prediction) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{73, 0}
}

func (x *CMsgGCToServerPredictionResult_Prediction) GetItemDef() uint32 {
	if x != nil && x.ItemDef != nil {
		return *x.ItemDef
	}
	return 0
}

func (x *CMsgGCToServerPredictionResult_Prediction) GetNumCorrect() uint32 {
	if x != nil && x.NumCorrect != nil {
		return *x.NumCorrect
	}
	return 0
}

func (x *CMsgGCToServerPredictionResult_Prediction) GetNumFails() uint32 {
	if x != nil && x.NumFails != nil {
		return *x.NumFails
	}
	return 0
}

func (x *CMsgGCToServerPredictionResult_Prediction) GetResult() CMsgGCToServerPredictionResult_Prediction_EResult {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgGCToServerPredictionResult_Prediction_Result
}

func (x *CMsgGCToServerPredictionResult_Prediction) GetGrantedItemDefs() []uint32 {
	if x != nil {
		return x.GrantedItemDefs
	}
	return nil
}

type CMsgSignOutUpdatePlayerChallenge_Challenge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId       *EEvent `protobuf:"varint,1,opt,name=event_id,json=eventId,enum=dota.EEvent,def=0" json:"event_id,omitempty"`
	SlotId        *uint32 `protobuf:"varint,2,opt,name=slot_id,json=slotId" json:"slot_id,omitempty"`
	SequenceId    *uint32 `protobuf:"varint,3,opt,name=sequence_id,json=sequenceId" json:"sequence_id,omitempty"`
	Progress      *uint32 `protobuf:"varint,4,opt,name=progress" json:"progress,omitempty"`
	ChallengeRank *uint32 `protobuf:"varint,5,opt,name=challenge_rank,json=challengeRank" json:"challenge_rank,omitempty"`
}

// Default values for CMsgSignOutUpdatePlayerChallenge_Challenge fields.
const (
	Default_CMsgSignOutUpdatePlayerChallenge_Challenge_EventId = EEvent_EVENT_ID_NONE
)

func (x *CMsgSignOutUpdatePlayerChallenge_Challenge) Reset() {
	*x = CMsgSignOutUpdatePlayerChallenge_Challenge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSignOutUpdatePlayerChallenge_Challenge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSignOutUpdatePlayerChallenge_Challenge) ProtoMessage() {}

func (x *CMsgSignOutUpdatePlayerChallenge_Challenge) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSignOutUpdatePlayerChallenge_Challenge.ProtoReflect.Descriptor instead.
func (*CMsgSignOutUpdatePlayerChallenge_Challenge) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{75, 0}
}

func (x *CMsgSignOutUpdatePlayerChallenge_Challenge) GetEventId() EEvent {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return Default_CMsgSignOutUpdatePlayerChallenge_Challenge_EventId
}

func (x *CMsgSignOutUpdatePlayerChallenge_Challenge) GetSlotId() uint32 {
	if x != nil && x.SlotId != nil {
		return *x.SlotId
	}
	return 0
}

func (x *CMsgSignOutUpdatePlayerChallenge_Challenge) GetSequenceId() uint32 {
	if x != nil && x.SequenceId != nil {
		return *x.SequenceId
	}
	return 0
}

func (x *CMsgSignOutUpdatePlayerChallenge_Challenge) GetProgress() uint32 {
	if x != nil && x.Progress != nil {
		return *x.Progress
	}
	return 0
}

func (x *CMsgSignOutUpdatePlayerChallenge_Challenge) GetChallengeRank() uint32 {
	if x != nil && x.ChallengeRank != nil {
		return *x.ChallengeRank
	}
	return 0
}

type CMsgSignOutWagerStats_Player struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Winnings  *uint32 `protobuf:"varint,2,opt,name=winnings" json:"winnings,omitempty"`
	MaxWager  *uint32 `protobuf:"varint,3,opt,name=max_wager,json=maxWager" json:"max_wager,omitempty"`
	Wager     *uint32 `protobuf:"varint,4,opt,name=wager" json:"wager,omitempty"`
}

func (x *CMsgSignOutWagerStats_Player) Reset() {
	*x = CMsgSignOutWagerStats_Player{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSignOutWagerStats_Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSignOutWagerStats_Player) ProtoMessage() {}

func (x *CMsgSignOutWagerStats_Player) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSignOutWagerStats_Player.ProtoReflect.Descriptor instead.
func (*CMsgSignOutWagerStats_Player) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{77, 0}
}

func (x *CMsgSignOutWagerStats_Player) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgSignOutWagerStats_Player) GetWinnings() uint32 {
	if x != nil && x.Winnings != nil {
		return *x.Winnings
	}
	return 0
}

func (x *CMsgSignOutWagerStats_Player) GetMaxWager() uint32 {
	if x != nil && x.MaxWager != nil {
		return *x.MaxWager
	}
	return 0
}

func (x *CMsgSignOutWagerStats_Player) GetWager() uint32 {
	if x != nil && x.Wager != nil {
		return *x.Wager
	}
	return 0
}

type CMsgSpendWager_Player struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId        *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Wager            *uint32 `protobuf:"varint,2,opt,name=wager" json:"wager,omitempty"`
	WagerTokenItemId *uint64 `protobuf:"varint,3,opt,name=wager_token_item_id,json=wagerTokenItemId" json:"wager_token_item_id,omitempty"`
}

func (x *CMsgSpendWager_Player) Reset() {
	*x = CMsgSpendWager_Player{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSpendWager_Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSpendWager_Player) ProtoMessage() {}

func (x *CMsgSpendWager_Player) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSpendWager_Player.ProtoReflect.Descriptor instead.
func (*CMsgSpendWager_Player) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{78, 0}
}

func (x *CMsgSpendWager_Player) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgSpendWager_Player) GetWager() uint32 {
	if x != nil && x.Wager != nil {
		return *x.Wager
	}
	return 0
}

func (x *CMsgSpendWager_Player) GetWagerTokenItemId() uint64 {
	if x != nil && x.WagerTokenItemId != nil {
		return *x.WagerTokenItemId
	}
	return 0
}

type CMsgSignOutXPCoins_Player struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId        *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	XpGained         *uint32 `protobuf:"varint,2,opt,name=xp_gained,json=xpGained" json:"xp_gained,omitempty"`
	CoinsSpent       *uint32 `protobuf:"varint,3,opt,name=coins_spent,json=coinsSpent" json:"coins_spent,omitempty"`
	WagerTokenItemId *uint64 `protobuf:"varint,4,opt,name=wager_token_item_id,json=wagerTokenItemId" json:"wager_token_item_id,omitempty"`
	RankWager        *uint32 `protobuf:"varint,5,opt,name=rank_wager,json=rankWager" json:"rank_wager,omitempty"`
	WagerStreak      *uint32 `protobuf:"varint,6,opt,name=wager_streak,json=wagerStreak" json:"wager_streak,omitempty"`
}

func (x *CMsgSignOutXPCoins_Player) Reset() {
	*x = CMsgSignOutXPCoins_Player{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSignOutXPCoins_Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSignOutXPCoins_Player) ProtoMessage() {}

func (x *CMsgSignOutXPCoins_Player) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSignOutXPCoins_Player.ProtoReflect.Descriptor instead.
func (*CMsgSignOutXPCoins_Player) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{79, 0}
}

func (x *CMsgSignOutXPCoins_Player) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgSignOutXPCoins_Player) GetXpGained() uint32 {
	if x != nil && x.XpGained != nil {
		return *x.XpGained
	}
	return 0
}

func (x *CMsgSignOutXPCoins_Player) GetCoinsSpent() uint32 {
	if x != nil && x.CoinsSpent != nil {
		return *x.CoinsSpent
	}
	return 0
}

func (x *CMsgSignOutXPCoins_Player) GetWagerTokenItemId() uint64 {
	if x != nil && x.WagerTokenItemId != nil {
		return *x.WagerTokenItemId
	}
	return 0
}

func (x *CMsgSignOutXPCoins_Player) GetRankWager() uint32 {
	if x != nil && x.RankWager != nil {
		return *x.RankWager
	}
	return 0
}

func (x *CMsgSignOutXPCoins_Player) GetWagerStreak() uint32 {
	if x != nil && x.WagerStreak != nil {
		return *x.WagerStreak
	}
	return 0
}

type CMsgSignOutBounties_Bounty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IssuerAccountId    *uint32 `protobuf:"varint,1,opt,name=issuer_account_id,json=issuerAccountId" json:"issuer_account_id,omitempty"`
	CompleterAccountId *uint32 `protobuf:"varint,2,opt,name=completer_account_id,json=completerAccountId" json:"completer_account_id,omitempty"`
	TargetAccountId    *uint32 `protobuf:"varint,3,opt,name=target_account_id,json=targetAccountId" json:"target_account_id,omitempty"`
}

func (x *CMsgSignOutBounties_Bounty) Reset() {
	*x = CMsgSignOutBounties_Bounty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSignOutBounties_Bounty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSignOutBounties_Bounty) ProtoMessage() {}

func (x *CMsgSignOutBounties_Bounty) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSignOutBounties_Bounty.ProtoReflect.Descriptor instead.
func (*CMsgSignOutBounties_Bounty) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{80, 0}
}

func (x *CMsgSignOutBounties_Bounty) GetIssuerAccountId() uint32 {
	if x != nil && x.IssuerAccountId != nil {
		return *x.IssuerAccountId
	}
	return 0
}

func (x *CMsgSignOutBounties_Bounty) GetCompleterAccountId() uint32 {
	if x != nil && x.CompleterAccountId != nil {
		return *x.CompleterAccountId
	}
	return 0
}

func (x *CMsgSignOutBounties_Bounty) GetTargetAccountId() uint32 {
	if x != nil && x.TargetAccountId != nil {
		return *x.TargetAccountId
	}
	return 0
}

type CMsgSignOutCommunityGoalProgress_EventGoalIncrement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventGoalId     *uint32 `protobuf:"varint,1,opt,name=event_goal_id,json=eventGoalId" json:"event_goal_id,omitempty"`
	IncrementAmount *uint32 `protobuf:"varint,2,opt,name=increment_amount,json=incrementAmount" json:"increment_amount,omitempty"`
}

func (x *CMsgSignOutCommunityGoalProgress_EventGoalIncrement) Reset() {
	*x = CMsgSignOutCommunityGoalProgress_EventGoalIncrement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSignOutCommunityGoalProgress_EventGoalIncrement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSignOutCommunityGoalProgress_EventGoalIncrement) ProtoMessage() {}

func (x *CMsgSignOutCommunityGoalProgress_EventGoalIncrement) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSignOutCommunityGoalProgress_EventGoalIncrement.ProtoReflect.Descriptor instead.
func (*CMsgSignOutCommunityGoalProgress_EventGoalIncrement) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{81, 0}
}

func (x *CMsgSignOutCommunityGoalProgress_EventGoalIncrement) GetEventGoalId() uint32 {
	if x != nil && x.EventGoalId != nil {
		return *x.EventGoalId
	}
	return 0
}

func (x *CMsgSignOutCommunityGoalProgress_EventGoalIncrement) GetIncrementAmount() uint32 {
	if x != nil && x.IncrementAmount != nil {
		return *x.IncrementAmount
	}
	return 0
}

type CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PredictionId          *uint32 `protobuf:"varint,1,opt,name=prediction_id,json=predictionId" json:"prediction_id,omitempty"`
	PredictionValue       *uint32 `protobuf:"varint,2,opt,name=prediction_value,json=predictionValue" json:"prediction_value,omitempty"`
	PredictionValueIsMask *bool   `protobuf:"varint,3,opt,name=prediction_value_is_mask,json=predictionValueIsMask" json:"prediction_value_is_mask,omitempty"`
}

func (x *CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult) Reset() {
	*x = CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult) ProtoMessage() {}

func (x *CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{86, 0}
}

func (x *CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult) GetPredictionId() uint32 {
	if x != nil && x.PredictionId != nil {
		return *x.PredictionId
	}
	return 0
}

func (x *CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult) GetPredictionValue() uint32 {
	if x != nil && x.PredictionValue != nil {
		return *x.PredictionValue
	}
	return 0
}

func (x *CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult) GetPredictionValueIsMask() bool {
	if x != nil && x.PredictionValueIsMask != nil {
		return *x.PredictionValueIsMask
	}
	return false
}

type CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item           *uint32  `protobuf:"varint,1,opt,name=item" json:"item,omitempty"`
	Gold           *uint32  `protobuf:"varint,2,opt,name=gold" json:"gold,omitempty"`
	NetWorth       *uint32  `protobuf:"varint,3,opt,name=net_worth,json=netWorth" json:"net_worth,omitempty"`
	GameTime       *uint32  `protobuf:"varint,4,opt,name=game_time,json=gameTime" json:"game_time,omitempty"`
	InventoryItems []uint32 `protobuf:"varint,5,rep,name=inventory_items,json=inventoryItems" json:"inventory_items,omitempty"`
	TalentsSkilled []bool   `protobuf:"varint,7,rep,name=talents_skilled,json=talentsSkilled" json:"talents_skilled,omitempty"`
}

func (x *CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase) Reset() {
	*x = CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase) ProtoMessage() {}

func (x *CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{89, 0}
}

func (x *CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase) GetItem() uint32 {
	if x != nil && x.Item != nil {
		return *x.Item
	}
	return 0
}

func (x *CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase) GetGold() uint32 {
	if x != nil && x.Gold != nil {
		return *x.Gold
	}
	return 0
}

func (x *CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase) GetNetWorth() uint32 {
	if x != nil && x.NetWorth != nil {
		return *x.NetWorth
	}
	return 0
}

func (x *CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase) GetGameTime() uint32 {
	if x != nil && x.GameTime != nil {
		return *x.GameTime
	}
	return 0
}

func (x *CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase) GetInventoryItems() []uint32 {
	if x != nil {
		return x.InventoryItems
	}
	return nil
}

func (x *CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase) GetTalentsSkilled() []bool {
	if x != nil {
		return x.TalentsSkilled
	}
	return nil
}

type CMsgServerToGCMatchPlayerItemPurchaseHistory_Player struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerSlot    *uint32                                                      `protobuf:"varint,1,opt,name=player_slot,json=playerSlot" json:"player_slot,omitempty"`
	AccountId     *uint32                                                      `protobuf:"varint,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	HeroId        *uint32                                                      `protobuf:"varint,3,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	AlliedHeroIds []uint32                                                     `protobuf:"varint,4,rep,name=allied_hero_ids,json=alliedHeroIds" json:"allied_hero_ids,omitempty"`
	EnemyHeroIds  []uint32                                                     `protobuf:"varint,5,rep,name=enemy_hero_ids,json=enemyHeroIds" json:"enemy_hero_ids,omitempty"`
	ItemPurchases []*CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase `protobuf:"bytes,6,rep,name=item_purchases,json=itemPurchases" json:"item_purchases,omitempty"`
}

func (x *CMsgServerToGCMatchPlayerItemPurchaseHistory_Player) Reset() {
	*x = CMsgServerToGCMatchPlayerItemPurchaseHistory_Player{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerToGCMatchPlayerItemPurchaseHistory_Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCMatchPlayerItemPurchaseHistory_Player) ProtoMessage() {}

func (x *CMsgServerToGCMatchPlayerItemPurchaseHistory_Player) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCMatchPlayerItemPurchaseHistory_Player.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCMatchPlayerItemPurchaseHistory_Player) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{89, 1}
}

func (x *CMsgServerToGCMatchPlayerItemPurchaseHistory_Player) GetPlayerSlot() uint32 {
	if x != nil && x.PlayerSlot != nil {
		return *x.PlayerSlot
	}
	return 0
}

func (x *CMsgServerToGCMatchPlayerItemPurchaseHistory_Player) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgServerToGCMatchPlayerItemPurchaseHistory_Player) GetHeroId() uint32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CMsgServerToGCMatchPlayerItemPurchaseHistory_Player) GetAlliedHeroIds() []uint32 {
	if x != nil {
		return x.AlliedHeroIds
	}
	return nil
}

func (x *CMsgServerToGCMatchPlayerItemPurchaseHistory_Player) GetEnemyHeroIds() []uint32 {
	if x != nil {
		return x.EnemyHeroIds
	}
	return nil
}

func (x *CMsgServerToGCMatchPlayerItemPurchaseHistory_Player) GetItemPurchases() []*CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase {
	if x != nil {
		return x.ItemPurchases
	}
	return nil
}

type CMsgServerToGCMatchStateHistory_PlayerState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeroId      *uint32 `protobuf:"varint,1,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	NetWorth    *uint32 `protobuf:"varint,2,opt,name=net_worth,json=netWorth" json:"net_worth,omitempty"`
	Level       *uint32 `protobuf:"varint,3,opt,name=level" json:"level,omitempty"`
	Deaths      *uint32 `protobuf:"varint,4,opt,name=deaths" json:"deaths,omitempty"`
	RespawnTime *uint32 `protobuf:"varint,5,opt,name=respawn_time,json=respawnTime" json:"respawn_time,omitempty"`
	HasBuyback  *bool   `protobuf:"varint,6,opt,name=has_buyback,json=hasBuyback" json:"has_buyback,omitempty"`
	HasAegis    *bool   `protobuf:"varint,7,opt,name=has_aegis,json=hasAegis" json:"has_aegis,omitempty"`
	HasRapier   *bool   `protobuf:"varint,8,opt,name=has_rapier,json=hasRapier" json:"has_rapier,omitempty"`
	Distance    *uint32 `protobuf:"varint,9,opt,name=distance" json:"distance,omitempty"`
}

func (x *CMsgServerToGCMatchStateHistory_PlayerState) Reset() {
	*x = CMsgServerToGCMatchStateHistory_PlayerState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerToGCMatchStateHistory_PlayerState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCMatchStateHistory_PlayerState) ProtoMessage() {}

func (x *CMsgServerToGCMatchStateHistory_PlayerState) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCMatchStateHistory_PlayerState.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCMatchStateHistory_PlayerState) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{90, 0}
}

func (x *CMsgServerToGCMatchStateHistory_PlayerState) GetHeroId() uint32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CMsgServerToGCMatchStateHistory_PlayerState) GetNetWorth() uint32 {
	if x != nil && x.NetWorth != nil {
		return *x.NetWorth
	}
	return 0
}

func (x *CMsgServerToGCMatchStateHistory_PlayerState) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *CMsgServerToGCMatchStateHistory_PlayerState) GetDeaths() uint32 {
	if x != nil && x.Deaths != nil {
		return *x.Deaths
	}
	return 0
}

func (x *CMsgServerToGCMatchStateHistory_PlayerState) GetRespawnTime() uint32 {
	if x != nil && x.RespawnTime != nil {
		return *x.RespawnTime
	}
	return 0
}

func (x *CMsgServerToGCMatchStateHistory_PlayerState) GetHasBuyback() bool {
	if x != nil && x.HasBuyback != nil {
		return *x.HasBuyback
	}
	return false
}

func (x *CMsgServerToGCMatchStateHistory_PlayerState) GetHasAegis() bool {
	if x != nil && x.HasAegis != nil {
		return *x.HasAegis
	}
	return false
}

func (x *CMsgServerToGCMatchStateHistory_PlayerState) GetHasRapier() bool {
	if x != nil && x.HasRapier != nil {
		return *x.HasRapier
	}
	return false
}

func (x *CMsgServerToGCMatchStateHistory_PlayerState) GetDistance() uint32 {
	if x != nil && x.Distance != nil {
		return *x.Distance
	}
	return 0
}

type CMsgServerToGCMatchStateHistory_TeamState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Team              *uint32                                        `protobuf:"varint,1,opt,name=team" json:"team,omitempty"`
	PlayerStates      []*CMsgServerToGCMatchStateHistory_PlayerState `protobuf:"bytes,2,rep,name=player_states,json=playerStates" json:"player_states,omitempty"`
	TowerHealthPct    []uint32                                       `protobuf:"varint,3,rep,name=tower_health_pct,json=towerHealthPct" json:"tower_health_pct,omitempty"`
	BarracksHealthPct []uint32                                       `protobuf:"varint,4,rep,name=barracks_health_pct,json=barracksHealthPct" json:"barracks_health_pct,omitempty"`
	AncientHealthPct  *uint32                                        `protobuf:"varint,5,opt,name=ancient_health_pct,json=ancientHealthPct" json:"ancient_health_pct,omitempty"`
	GlyphCooldown     *uint32                                        `protobuf:"varint,6,opt,name=glyph_cooldown,json=glyphCooldown" json:"glyph_cooldown,omitempty"`
	Kills             *uint32                                        `protobuf:"varint,7,opt,name=kills" json:"kills,omitempty"`
	CreepDistanceSafe *uint32                                        `protobuf:"varint,8,opt,name=creep_distance_safe,json=creepDistanceSafe" json:"creep_distance_safe,omitempty"`
	CreepDistanceMid  *uint32                                        `protobuf:"varint,9,opt,name=creep_distance_mid,json=creepDistanceMid" json:"creep_distance_mid,omitempty"`
	CreepDistanceOff  *uint32                                        `protobuf:"varint,10,opt,name=creep_distance_off,json=creepDistanceOff" json:"creep_distance_off,omitempty"`
}

func (x *CMsgServerToGCMatchStateHistory_TeamState) Reset() {
	*x = CMsgServerToGCMatchStateHistory_TeamState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerToGCMatchStateHistory_TeamState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCMatchStateHistory_TeamState) ProtoMessage() {}

func (x *CMsgServerToGCMatchStateHistory_TeamState) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCMatchStateHistory_TeamState.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCMatchStateHistory_TeamState) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{90, 1}
}

func (x *CMsgServerToGCMatchStateHistory_TeamState) GetTeam() uint32 {
	if x != nil && x.Team != nil {
		return *x.Team
	}
	return 0
}

func (x *CMsgServerToGCMatchStateHistory_TeamState) GetPlayerStates() []*CMsgServerToGCMatchStateHistory_PlayerState {
	if x != nil {
		return x.PlayerStates
	}
	return nil
}

func (x *CMsgServerToGCMatchStateHistory_TeamState) GetTowerHealthPct() []uint32 {
	if x != nil {
		return x.TowerHealthPct
	}
	return nil
}

func (x *CMsgServerToGCMatchStateHistory_TeamState) GetBarracksHealthPct() []uint32 {
	if x != nil {
		return x.BarracksHealthPct
	}
	return nil
}

func (x *CMsgServerToGCMatchStateHistory_TeamState) GetAncientHealthPct() uint32 {
	if x != nil && x.AncientHealthPct != nil {
		return *x.AncientHealthPct
	}
	return 0
}

func (x *CMsgServerToGCMatchStateHistory_TeamState) GetGlyphCooldown() uint32 {
	if x != nil && x.GlyphCooldown != nil {
		return *x.GlyphCooldown
	}
	return 0
}

func (x *CMsgServerToGCMatchStateHistory_TeamState) GetKills() uint32 {
	if x != nil && x.Kills != nil {
		return *x.Kills
	}
	return 0
}

func (x *CMsgServerToGCMatchStateHistory_TeamState) GetCreepDistanceSafe() uint32 {
	if x != nil && x.CreepDistanceSafe != nil {
		return *x.CreepDistanceSafe
	}
	return 0
}

func (x *CMsgServerToGCMatchStateHistory_TeamState) GetCreepDistanceMid() uint32 {
	if x != nil && x.CreepDistanceMid != nil {
		return *x.CreepDistanceMid
	}
	return 0
}

func (x *CMsgServerToGCMatchStateHistory_TeamState) GetCreepDistanceOff() uint32 {
	if x != nil && x.CreepDistanceOff != nil {
		return *x.CreepDistanceOff
	}
	return 0
}

type CMsgServerToGCMatchStateHistory_MatchState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameTime     *uint32                                    `protobuf:"varint,1,opt,name=game_time,json=gameTime" json:"game_time,omitempty"`
	RadiantState *CMsgServerToGCMatchStateHistory_TeamState `protobuf:"bytes,2,opt,name=radiant_state,json=radiantState" json:"radiant_state,omitempty"`
	DireState    *CMsgServerToGCMatchStateHistory_TeamState `protobuf:"bytes,3,opt,name=dire_state,json=direState" json:"dire_state,omitempty"`
}

func (x *CMsgServerToGCMatchStateHistory_MatchState) Reset() {
	*x = CMsgServerToGCMatchStateHistory_MatchState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerToGCMatchStateHistory_MatchState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCMatchStateHistory_MatchState) ProtoMessage() {}

func (x *CMsgServerToGCMatchStateHistory_MatchState) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCMatchStateHistory_MatchState.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCMatchStateHistory_MatchState) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{90, 2}
}

func (x *CMsgServerToGCMatchStateHistory_MatchState) GetGameTime() uint32 {
	if x != nil && x.GameTime != nil {
		return *x.GameTime
	}
	return 0
}

func (x *CMsgServerToGCMatchStateHistory_MatchState) GetRadiantState() *CMsgServerToGCMatchStateHistory_TeamState {
	if x != nil {
		return x.RadiantState
	}
	return nil
}

func (x *CMsgServerToGCMatchStateHistory_MatchState) GetDireState() *CMsgServerToGCMatchStateHistory_TeamState {
	if x != nil {
		return x.DireState
	}
	return nil
}

type CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PathIdCompleted *uint32 `protobuf:"varint,1,opt,name=path_id_completed,json=pathIdCompleted" json:"path_id_completed,omitempty"`
	RoomIdClaimed   *uint32 `protobuf:"varint,2,opt,name=room_id_claimed,json=roomIdClaimed" json:"room_id_claimed,omitempty"`
}

func (x *CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults) Reset() {
	*x = CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults) ProtoMessage() {}

func (x *CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{92, 0}
}

func (x *CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults) GetPathIdCompleted() uint32 {
	if x != nil && x.PathIdCompleted != nil {
		return *x.PathIdCompleted
	}
	return 0
}

func (x *CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults) GetRoomIdClaimed() uint32 {
	if x != nil && x.RoomIdClaimed != nil {
		return *x.RoomIdClaimed
	}
	return 0
}

type CMsgDetailedGameStats_PlayerStatEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalEarnedGold                 *uint32  `protobuf:"varint,1,opt,name=total_earned_gold,json=totalEarnedGold" json:"total_earned_gold,omitempty"`
	TotalNetworth                   *uint32  `protobuf:"varint,2,opt,name=total_networth,json=totalNetworth" json:"total_networth,omitempty"`
	Level                           *uint32  `protobuf:"varint,3,opt,name=level" json:"level,omitempty"`
	TotalDps                        *uint32  `protobuf:"varint,4,opt,name=total_dps,json=totalDps" json:"total_dps,omitempty"`
	AverageDps                      *uint32  `protobuf:"varint,5,opt,name=average_dps,json=averageDps" json:"average_dps,omitempty"`
	AbilityDamageOutput             *uint32  `protobuf:"varint,6,opt,name=ability_damage_output,json=abilityDamageOutput" json:"ability_damage_output,omitempty"`
	BaseHealth                      *uint32  `protobuf:"varint,7,opt,name=base_health,json=baseHealth" json:"base_health,omitempty"`
	TotalHealth                     *uint32  `protobuf:"varint,8,opt,name=total_health,json=totalHealth" json:"total_health,omitempty"`
	TotalMana                       *uint32  `protobuf:"varint,9,opt,name=total_mana,json=totalMana" json:"total_mana,omitempty"`
	BasePhysicalDamageReductionPct  *float32 `protobuf:"fixed32,10,opt,name=base_physical_damage_reduction_pct,json=basePhysicalDamageReductionPct" json:"base_physical_damage_reduction_pct,omitempty"`
	TotalPhysicalDamageReductionPct *float32 `protobuf:"fixed32,11,opt,name=total_physical_damage_reduction_pct,json=totalPhysicalDamageReductionPct" json:"total_physical_damage_reduction_pct,omitempty"`
	BaseAbilityDamageReductionPct   *float32 `protobuf:"fixed32,12,opt,name=base_ability_damage_reduction_pct,json=baseAbilityDamageReductionPct" json:"base_ability_damage_reduction_pct,omitempty"`
	TotalAbilityDamageReductionPct  *float32 `protobuf:"fixed32,13,opt,name=total_ability_damage_reduction_pct,json=totalAbilityDamageReductionPct" json:"total_ability_damage_reduction_pct,omitempty"`
	AbilityDamageBlock              *float32 `protobuf:"fixed32,14,opt,name=ability_damage_block,json=abilityDamageBlock" json:"ability_damage_block,omitempty"`
	PhysicalDamageBlock             *float32 `protobuf:"fixed32,15,opt,name=physical_damage_block,json=physicalDamageBlock" json:"physical_damage_block,omitempty"`
	ManaRegen                       *uint32  `protobuf:"varint,16,opt,name=mana_regen,json=manaRegen" json:"mana_regen,omitempty"`
	HealthRegen                     *uint32  `protobuf:"varint,17,opt,name=health_regen,json=healthRegen" json:"health_regen,omitempty"`
	PhysicalMagicDmgPct             *float32 `protobuf:"fixed32,18,opt,name=physical_magic_dmg_pct,json=physicalMagicDmgPct" json:"physical_magic_dmg_pct,omitempty"`
	Kills                           *uint32  `protobuf:"varint,19,opt,name=kills" json:"kills,omitempty"`
	Deaths                          *uint32  `protobuf:"varint,20,opt,name=deaths" json:"deaths,omitempty"`
	Assists                         *uint32  `protobuf:"varint,21,opt,name=assists" json:"assists,omitempty"`
	GoldFromKills                   *uint32  `protobuf:"varint,22,opt,name=gold_from_kills,json=goldFromKills" json:"gold_from_kills,omitempty"`
	GoldFromCreeps                  *uint32  `protobuf:"varint,23,opt,name=gold_from_creeps,json=goldFromCreeps" json:"gold_from_creeps,omitempty"`
	GoldShared                      *uint32  `protobuf:"varint,24,opt,name=gold_shared,json=goldShared" json:"gold_shared,omitempty"`
	XpFromKills                     *uint32  `protobuf:"varint,25,opt,name=xp_from_kills,json=xpFromKills" json:"xp_from_kills,omitempty"`
	XpFromCreeps                    *uint32  `protobuf:"varint,26,opt,name=xp_from_creeps,json=xpFromCreeps" json:"xp_from_creeps,omitempty"`
	TotalXp                         *uint32  `protobuf:"varint,27,opt,name=total_xp,json=totalXp" json:"total_xp,omitempty"`
	AbilityCasts                    *uint32  `protobuf:"varint,28,opt,name=ability_casts,json=abilityCasts" json:"ability_casts,omitempty"`
	ItemCasts                       *uint32  `protobuf:"varint,29,opt,name=item_casts,json=itemCasts" json:"item_casts,omitempty"`
	TotalTimeStunned                *float32 `protobuf:"fixed32,30,opt,name=total_time_stunned,json=totalTimeStunned" json:"total_time_stunned,omitempty"`
	ItemCount                       *uint32  `protobuf:"varint,31,opt,name=item_count,json=itemCount" json:"item_count,omitempty"`
}

func (x *CMsgDetailedGameStats_PlayerStatEntry) Reset() {
	*x = CMsgDetailedGameStats_PlayerStatEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDetailedGameStats_PlayerStatEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDetailedGameStats_PlayerStatEntry) ProtoMessage() {}

func (x *CMsgDetailedGameStats_PlayerStatEntry) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDetailedGameStats_PlayerStatEntry.ProtoReflect.Descriptor instead.
func (*CMsgDetailedGameStats_PlayerStatEntry) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{94, 0}
}

func (x *CMsgDetailedGameStats_PlayerStatEntry) GetTotalEarnedGold() uint32 {
	if x != nil && x.TotalEarnedGold != nil {
		return *x.TotalEarnedGold
	}
	return 0
}

func (x *CMsgDetailedGameStats_PlayerStatEntry) GetTotalNetworth() uint32 {
	if x != nil && x.TotalNetworth != nil {
		return *x.TotalNetworth
	}
	return 0
}

func (x *CMsgDetailedGameStats_PlayerStatEntry) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *CMsgDetailedGameStats_PlayerStatEntry) GetTotalDps() uint32 {
	if x != nil && x.TotalDps != nil {
		return *x.TotalDps
	}
	return 0
}

func (x *CMsgDetailedGameStats_PlayerStatEntry) GetAverageDps() uint32 {
	if x != nil && x.AverageDps != nil {
		return *x.AverageDps
	}
	return 0
}

func (x *CMsgDetailedGameStats_PlayerStatEntry) GetAbilityDamageOutput() uint32 {
	if x != nil && x.AbilityDamageOutput != nil {
		return *x.AbilityDamageOutput
	}
	return 0
}

func (x *CMsgDetailedGameStats_PlayerStatEntry) GetBaseHealth() uint32 {
	if x != nil && x.BaseHealth != nil {
		return *x.BaseHealth
	}
	return 0
}

func (x *CMsgDetailedGameStats_PlayerStatEntry) GetTotalHealth() uint32 {
	if x != nil && x.TotalHealth != nil {
		return *x.TotalHealth
	}
	return 0
}

func (x *CMsgDetailedGameStats_PlayerStatEntry) GetTotalMana() uint32 {
	if x != nil && x.TotalMana != nil {
		return *x.TotalMana
	}
	return 0
}

func (x *CMsgDetailedGameStats_PlayerStatEntry) GetBasePhysicalDamageReductionPct() float32 {
	if x != nil && x.BasePhysicalDamageReductionPct != nil {
		return *x.BasePhysicalDamageReductionPct
	}
	return 0
}

func (x *CMsgDetailedGameStats_PlayerStatEntry) GetTotalPhysicalDamageReductionPct() float32 {
	if x != nil && x.TotalPhysicalDamageReductionPct != nil {
		return *x.TotalPhysicalDamageReductionPct
	}
	return 0
}

func (x *CMsgDetailedGameStats_PlayerStatEntry) GetBaseAbilityDamageReductionPct() float32 {
	if x != nil && x.BaseAbilityDamageReductionPct != nil {
		return *x.BaseAbilityDamageReductionPct
	}
	return 0
}

func (x *CMsgDetailedGameStats_PlayerStatEntry) GetTotalAbilityDamageReductionPct() float32 {
	if x != nil && x.TotalAbilityDamageReductionPct != nil {
		return *x.TotalAbilityDamageReductionPct
	}
	return 0
}

func (x *CMsgDetailedGameStats_PlayerStatEntry) GetAbilityDamageBlock() float32 {
	if x != nil && x.AbilityDamageBlock != nil {
		return *x.AbilityDamageBlock
	}
	return 0
}

func (x *CMsgDetailedGameStats_PlayerStatEntry) GetPhysicalDamageBlock() float32 {
	if x != nil && x.PhysicalDamageBlock != nil {
		return *x.PhysicalDamageBlock
	}
	return 0
}

func (x *CMsgDetailedGameStats_PlayerStatEntry) GetManaRegen() uint32 {
	if x != nil && x.ManaRegen != nil {
		return *x.ManaRegen
	}
	return 0
}

func (x *CMsgDetailedGameStats_PlayerStatEntry) GetHealthRegen() uint32 {
	if x != nil && x.HealthRegen != nil {
		return *x.HealthRegen
	}
	return 0
}

func (x *CMsgDetailedGameStats_PlayerStatEntry) GetPhysicalMagicDmgPct() float32 {
	if x != nil && x.PhysicalMagicDmgPct != nil {
		return *x.PhysicalMagicDmgPct
	}
	return 0
}

func (x *CMsgDetailedGameStats_PlayerStatEntry) GetKills() uint32 {
	if x != nil && x.Kills != nil {
		return *x.Kills
	}
	return 0
}

func (x *CMsgDetailedGameStats_PlayerStatEntry) GetDeaths() uint32 {
	if x != nil && x.Deaths != nil {
		return *x.Deaths
	}
	return 0
}

func (x *CMsgDetailedGameStats_PlayerStatEntry) GetAssists() uint32 {
	if x != nil && x.Assists != nil {
		return *x.Assists
	}
	return 0
}

func (x *CMsgDetailedGameStats_PlayerStatEntry) GetGoldFromKills() uint32 {
	if x != nil && x.GoldFromKills != nil {
		return *x.GoldFromKills
	}
	return 0
}

func (x *CMsgDetailedGameStats_PlayerStatEntry) GetGoldFromCreeps() uint32 {
	if x != nil && x.GoldFromCreeps != nil {
		return *x.GoldFromCreeps
	}
	return 0
}

func (x *CMsgDetailedGameStats_PlayerStatEntry) GetGoldShared() uint32 {
	if x != nil && x.GoldShared != nil {
		return *x.GoldShared
	}
	return 0
}

func (x *CMsgDetailedGameStats_PlayerStatEntry) GetXpFromKills() uint32 {
	if x != nil && x.XpFromKills != nil {
		return *x.XpFromKills
	}
	return 0
}

func (x *CMsgDetailedGameStats_PlayerStatEntry) GetXpFromCreeps() uint32 {
	if x != nil && x.XpFromCreeps != nil {
		return *x.XpFromCreeps
	}
	return 0
}

func (x *CMsgDetailedGameStats_PlayerStatEntry) GetTotalXp() uint32 {
	if x != nil && x.TotalXp != nil {
		return *x.TotalXp
	}
	return 0
}

func (x *CMsgDetailedGameStats_PlayerStatEntry) GetAbilityCasts() uint32 {
	if x != nil && x.AbilityCasts != nil {
		return *x.AbilityCasts
	}
	return 0
}

func (x *CMsgDetailedGameStats_PlayerStatEntry) GetItemCasts() uint32 {
	if x != nil && x.ItemCasts != nil {
		return *x.ItemCasts
	}
	return 0
}

func (x *CMsgDetailedGameStats_PlayerStatEntry) GetTotalTimeStunned() float32 {
	if x != nil && x.TotalTimeStunned != nil {
		return *x.TotalTimeStunned
	}
	return 0
}

func (x *CMsgDetailedGameStats_PlayerStatEntry) GetItemCount() uint32 {
	if x != nil && x.ItemCount != nil {
		return *x.ItemCount
	}
	return 0
}

type CMsgDetailedGameStats_GameStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TowerDeathTimeT1 *uint32 `protobuf:"varint,1,opt,name=tower_death_time_t1,json=towerDeathTimeT1" json:"tower_death_time_t1,omitempty"`
	TowerDeathTimeT2 *uint32 `protobuf:"varint,2,opt,name=tower_death_time_t2,json=towerDeathTimeT2" json:"tower_death_time_t2,omitempty"`
	TowerDeathTimeT3 *uint32 `protobuf:"varint,3,opt,name=tower_death_time_t3,json=towerDeathTimeT3" json:"tower_death_time_t3,omitempty"`
}

func (x *CMsgDetailedGameStats_GameStats) Reset() {
	*x = CMsgDetailedGameStats_GameStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDetailedGameStats_GameStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDetailedGameStats_GameStats) ProtoMessage() {}

func (x *CMsgDetailedGameStats_GameStats) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDetailedGameStats_GameStats.ProtoReflect.Descriptor instead.
func (*CMsgDetailedGameStats_GameStats) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{94, 1}
}

func (x *CMsgDetailedGameStats_GameStats) GetTowerDeathTimeT1() uint32 {
	if x != nil && x.TowerDeathTimeT1 != nil {
		return *x.TowerDeathTimeT1
	}
	return 0
}

func (x *CMsgDetailedGameStats_GameStats) GetTowerDeathTimeT2() uint32 {
	if x != nil && x.TowerDeathTimeT2 != nil {
		return *x.TowerDeathTimeT2
	}
	return 0
}

func (x *CMsgDetailedGameStats_GameStats) GetTowerDeathTimeT3() uint32 {
	if x != nil && x.TowerDeathTimeT3 != nil {
		return *x.TowerDeathTimeT3
	}
	return 0
}

type CMsgDetailedGameStats_MinuteEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Minute *uint32                                  `protobuf:"varint,1,opt,name=minute" json:"minute,omitempty"`
	Stats  []*CMsgDetailedGameStats_PlayerStatEntry `protobuf:"bytes,2,rep,name=stats" json:"stats,omitempty"`
}

func (x *CMsgDetailedGameStats_MinuteEntry) Reset() {
	*x = CMsgDetailedGameStats_MinuteEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDetailedGameStats_MinuteEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDetailedGameStats_MinuteEntry) ProtoMessage() {}

func (x *CMsgDetailedGameStats_MinuteEntry) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDetailedGameStats_MinuteEntry.ProtoReflect.Descriptor instead.
func (*CMsgDetailedGameStats_MinuteEntry) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{94, 2}
}

func (x *CMsgDetailedGameStats_MinuteEntry) GetMinute() uint32 {
	if x != nil && x.Minute != nil {
		return *x.Minute
	}
	return 0
}

func (x *CMsgDetailedGameStats_MinuteEntry) GetStats() []*CMsgDetailedGameStats_PlayerStatEntry {
	if x != nil {
		return x.Stats
	}
	return nil
}

type CMsgDetailedGameStats_PlayerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId  *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	HeroId     *uint32 `protobuf:"varint,2,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	PlayerSlot *uint32 `protobuf:"varint,3,opt,name=player_slot,json=playerSlot" json:"player_slot,omitempty"`
}

func (x *CMsgDetailedGameStats_PlayerInfo) Reset() {
	*x = CMsgDetailedGameStats_PlayerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDetailedGameStats_PlayerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDetailedGameStats_PlayerInfo) ProtoMessage() {}

func (x *CMsgDetailedGameStats_PlayerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDetailedGameStats_PlayerInfo.ProtoReflect.Descriptor instead.
func (*CMsgDetailedGameStats_PlayerInfo) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{94, 3}
}

func (x *CMsgDetailedGameStats_PlayerInfo) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgDetailedGameStats_PlayerInfo) GetHeroId() uint32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CMsgDetailedGameStats_PlayerInfo) GetPlayerSlot() uint32 {
	if x != nil && x.PlayerSlot != nil {
		return *x.PlayerSlot
	}
	return 0
}

type CMsgAllStarStats_PlayerStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId       *uint32  `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	PlayerId        *uint32  `protobuf:"varint,2,opt,name=player_id,json=playerId" json:"player_id,omitempty"`
	Killstreak      []uint32 `protobuf:"varint,3,rep,name=killstreak" json:"killstreak,omitempty"`
	NumMultiKills   []uint32 `protobuf:"varint,4,rep,name=num_multi_kills,json=numMultiKills" json:"num_multi_kills,omitempty"`
	KillstreakEnded *uint32  `protobuf:"varint,5,opt,name=killstreak_ended,json=killstreakEnded" json:"killstreak_ended,omitempty"`
	RoshanKills     *uint32  `protobuf:"varint,6,opt,name=roshan_kills,json=roshanKills" json:"roshan_kills,omitempty"`
	FirstBloods     *uint32  `protobuf:"varint,7,opt,name=first_bloods,json=firstBloods" json:"first_bloods,omitempty"`
	CourierKills    *uint32  `protobuf:"varint,8,opt,name=courier_kills,json=courierKills" json:"courier_kills,omitempty"`
	TowerKills      *uint32  `protobuf:"varint,9,opt,name=tower_kills,json=towerKills" json:"tower_kills,omitempty"`
	FirstTaunt      *bool    `protobuf:"varint,10,opt,name=first_taunt,json=firstTaunt" json:"first_taunt,omitempty"`
	FirstHighFive   *bool    `protobuf:"varint,11,opt,name=first_high_five,json=firstHighFive" json:"first_high_five,omitempty"`
	FirstCeb        *bool    `protobuf:"varint,12,opt,name=first_ceb,json=firstCeb" json:"first_ceb,omitempty"`
	FirstTip        *bool    `protobuf:"varint,13,opt,name=first_tip,json=firstTip" json:"first_tip,omitempty"`
	FirstRapier     *bool    `protobuf:"varint,14,opt,name=first_rapier,json=firstRapier" json:"first_rapier,omitempty"`
	FirstAegisDeny  *bool    `protobuf:"varint,15,opt,name=first_aegis_deny,json=firstAegisDeny" json:"first_aegis_deny,omitempty"`
	LastToDie       *bool    `protobuf:"varint,16,opt,name=last_to_die,json=lastToDie" json:"last_to_die,omitempty"`
	FirstToWipe     *bool    `protobuf:"varint,17,opt,name=first_to_wipe,json=firstToWipe" json:"first_to_wipe,omitempty"`
	Kills           *uint32  `protobuf:"varint,18,opt,name=kills" json:"kills,omitempty"`
	Deaths          *uint32  `protobuf:"varint,19,opt,name=deaths" json:"deaths,omitempty"`
	Assists         *uint32  `protobuf:"varint,20,opt,name=assists" json:"assists,omitempty"`
}

func (x *CMsgAllStarStats_PlayerStats) Reset() {
	*x = CMsgAllStarStats_PlayerStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgAllStarStats_PlayerStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgAllStarStats_PlayerStats) ProtoMessage() {}

func (x *CMsgAllStarStats_PlayerStats) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgAllStarStats_PlayerStats.ProtoReflect.Descriptor instead.
func (*CMsgAllStarStats_PlayerStats) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{95, 0}
}

func (x *CMsgAllStarStats_PlayerStats) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgAllStarStats_PlayerStats) GetPlayerId() uint32 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

func (x *CMsgAllStarStats_PlayerStats) GetKillstreak() []uint32 {
	if x != nil {
		return x.Killstreak
	}
	return nil
}

func (x *CMsgAllStarStats_PlayerStats) GetNumMultiKills() []uint32 {
	if x != nil {
		return x.NumMultiKills
	}
	return nil
}

func (x *CMsgAllStarStats_PlayerStats) GetKillstreakEnded() uint32 {
	if x != nil && x.KillstreakEnded != nil {
		return *x.KillstreakEnded
	}
	return 0
}

func (x *CMsgAllStarStats_PlayerStats) GetRoshanKills() uint32 {
	if x != nil && x.RoshanKills != nil {
		return *x.RoshanKills
	}
	return 0
}

func (x *CMsgAllStarStats_PlayerStats) GetFirstBloods() uint32 {
	if x != nil && x.FirstBloods != nil {
		return *x.FirstBloods
	}
	return 0
}

func (x *CMsgAllStarStats_PlayerStats) GetCourierKills() uint32 {
	if x != nil && x.CourierKills != nil {
		return *x.CourierKills
	}
	return 0
}

func (x *CMsgAllStarStats_PlayerStats) GetTowerKills() uint32 {
	if x != nil && x.TowerKills != nil {
		return *x.TowerKills
	}
	return 0
}

func (x *CMsgAllStarStats_PlayerStats) GetFirstTaunt() bool {
	if x != nil && x.FirstTaunt != nil {
		return *x.FirstTaunt
	}
	return false
}

func (x *CMsgAllStarStats_PlayerStats) GetFirstHighFive() bool {
	if x != nil && x.FirstHighFive != nil {
		return *x.FirstHighFive
	}
	return false
}

func (x *CMsgAllStarStats_PlayerStats) GetFirstCeb() bool {
	if x != nil && x.FirstCeb != nil {
		return *x.FirstCeb
	}
	return false
}

func (x *CMsgAllStarStats_PlayerStats) GetFirstTip() bool {
	if x != nil && x.FirstTip != nil {
		return *x.FirstTip
	}
	return false
}

func (x *CMsgAllStarStats_PlayerStats) GetFirstRapier() bool {
	if x != nil && x.FirstRapier != nil {
		return *x.FirstRapier
	}
	return false
}

func (x *CMsgAllStarStats_PlayerStats) GetFirstAegisDeny() bool {
	if x != nil && x.FirstAegisDeny != nil {
		return *x.FirstAegisDeny
	}
	return false
}

func (x *CMsgAllStarStats_PlayerStats) GetLastToDie() bool {
	if x != nil && x.LastToDie != nil {
		return *x.LastToDie
	}
	return false
}

func (x *CMsgAllStarStats_PlayerStats) GetFirstToWipe() bool {
	if x != nil && x.FirstToWipe != nil {
		return *x.FirstToWipe
	}
	return false
}

func (x *CMsgAllStarStats_PlayerStats) GetKills() uint32 {
	if x != nil && x.Kills != nil {
		return *x.Kills
	}
	return 0
}

func (x *CMsgAllStarStats_PlayerStats) GetDeaths() uint32 {
	if x != nil && x.Deaths != nil {
		return *x.Deaths
	}
	return 0
}

func (x *CMsgAllStarStats_PlayerStats) GetAssists() uint32 {
	if x != nil && x.Assists != nil {
		return *x.Assists
	}
	return 0
}

type CMsgNeutralItemStats_NeutralItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId             *uint32 `protobuf:"varint,1,opt,name=item_id,json=itemId" json:"item_id,omitempty"`
	TimeDropped        *uint32 `protobuf:"varint,2,opt,name=time_dropped,json=timeDropped" json:"time_dropped,omitempty"`
	Team               *uint32 `protobuf:"varint,3,opt,name=team" json:"team,omitempty"`
	TimeLastEquipped   *uint32 `protobuf:"varint,4,opt,name=time_last_equipped,json=timeLastEquipped" json:"time_last_equipped,omitempty"`
	TimeLastUnequipped *uint32 `protobuf:"varint,5,opt,name=time_last_unequipped,json=timeLastUnequipped" json:"time_last_unequipped,omitempty"`
	DurationEquipped   *uint32 `protobuf:"varint,6,opt,name=duration_equipped,json=durationEquipped" json:"duration_equipped,omitempty"`
}

func (x *CMsgNeutralItemStats_NeutralItem) Reset() {
	*x = CMsgNeutralItemStats_NeutralItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgNeutralItemStats_NeutralItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgNeutralItemStats_NeutralItem) ProtoMessage() {}

func (x *CMsgNeutralItemStats_NeutralItem) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgNeutralItemStats_NeutralItem.ProtoReflect.Descriptor instead.
func (*CMsgNeutralItemStats_NeutralItem) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{96, 0}
}

func (x *CMsgNeutralItemStats_NeutralItem) GetItemId() uint32 {
	if x != nil && x.ItemId != nil {
		return *x.ItemId
	}
	return 0
}

func (x *CMsgNeutralItemStats_NeutralItem) GetTimeDropped() uint32 {
	if x != nil && x.TimeDropped != nil {
		return *x.TimeDropped
	}
	return 0
}

func (x *CMsgNeutralItemStats_NeutralItem) GetTeam() uint32 {
	if x != nil && x.Team != nil {
		return *x.Team
	}
	return 0
}

func (x *CMsgNeutralItemStats_NeutralItem) GetTimeLastEquipped() uint32 {
	if x != nil && x.TimeLastEquipped != nil {
		return *x.TimeLastEquipped
	}
	return 0
}

func (x *CMsgNeutralItemStats_NeutralItem) GetTimeLastUnequipped() uint32 {
	if x != nil && x.TimeLastUnequipped != nil {
		return *x.TimeLastUnequipped
	}
	return 0
}

func (x *CMsgNeutralItemStats_NeutralItem) GetDurationEquipped() uint32 {
	if x != nil && x.DurationEquipped != nil {
		return *x.DurationEquipped
	}
	return 0
}

type CMsgGCToServerLobbyHeroBanRates_HeroBanEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeroId    *uint32 `protobuf:"varint,1,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	BanCount  *uint32 `protobuf:"varint,2,opt,name=ban_count,json=banCount" json:"ban_count,omitempty"`
	PickCount *uint32 `protobuf:"varint,3,opt,name=pick_count,json=pickCount" json:"pick_count,omitempty"`
}

func (x *CMsgGCToServerLobbyHeroBanRates_HeroBanEntry) Reset() {
	*x = CMsgGCToServerLobbyHeroBanRates_HeroBanEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCToServerLobbyHeroBanRates_HeroBanEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToServerLobbyHeroBanRates_HeroBanEntry) ProtoMessage() {}

func (x *CMsgGCToServerLobbyHeroBanRates_HeroBanEntry) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToServerLobbyHeroBanRates_HeroBanEntry.ProtoReflect.Descriptor instead.
func (*CMsgGCToServerLobbyHeroBanRates_HeroBanEntry) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{97, 0}
}

func (x *CMsgGCToServerLobbyHeroBanRates_HeroBanEntry) GetHeroId() uint32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CMsgGCToServerLobbyHeroBanRates_HeroBanEntry) GetBanCount() uint32 {
	if x != nil && x.BanCount != nil {
		return *x.BanCount
	}
	return 0
}

func (x *CMsgGCToServerLobbyHeroBanRates_HeroBanEntry) GetPickCount() uint32 {
	if x != nil && x.PickCount != nil {
		return *x.PickCount
	}
	return 0
}

type CMsgSignOutGuildContractProgress_CompletedGuildEventContracts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildId   *uint32  `protobuf:"varint,1,opt,name=guild_id,json=guildId" json:"guild_id,omitempty"`
	EventId   *uint32  `protobuf:"varint,2,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	Contracts []uint64 `protobuf:"varint,3,rep,name=contracts" json:"contracts,omitempty"`
}

func (x *CMsgSignOutGuildContractProgress_CompletedGuildEventContracts) Reset() {
	*x = CMsgSignOutGuildContractProgress_CompletedGuildEventContracts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSignOutGuildContractProgress_CompletedGuildEventContracts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSignOutGuildContractProgress_CompletedGuildEventContracts) ProtoMessage() {}

func (x *CMsgSignOutGuildContractProgress_CompletedGuildEventContracts) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSignOutGuildContractProgress_CompletedGuildEventContracts.ProtoReflect.Descriptor instead.
func (*CMsgSignOutGuildContractProgress_CompletedGuildEventContracts) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{98, 0}
}

func (x *CMsgSignOutGuildContractProgress_CompletedGuildEventContracts) GetGuildId() uint32 {
	if x != nil && x.GuildId != nil {
		return *x.GuildId
	}
	return 0
}

func (x *CMsgSignOutGuildContractProgress_CompletedGuildEventContracts) GetEventId() uint32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

func (x *CMsgSignOutGuildContractProgress_CompletedGuildEventContracts) GetContracts() []uint64 {
	if x != nil {
		return x.Contracts
	}
	return nil
}

type CMsgSignOutGuildContractProgress_PlayerContract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId          *uint32                                                          `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	CompletedContracts []*CMsgSignOutGuildContractProgress_CompletedGuildEventContracts `protobuf:"bytes,2,rep,name=completed_contracts,json=completedContracts" json:"completed_contracts,omitempty"`
}

func (x *CMsgSignOutGuildContractProgress_PlayerContract) Reset() {
	*x = CMsgSignOutGuildContractProgress_PlayerContract{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSignOutGuildContractProgress_PlayerContract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSignOutGuildContractProgress_PlayerContract) ProtoMessage() {}

func (x *CMsgSignOutGuildContractProgress_PlayerContract) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSignOutGuildContractProgress_PlayerContract.ProtoReflect.Descriptor instead.
func (*CMsgSignOutGuildContractProgress_PlayerContract) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{98, 1}
}

func (x *CMsgSignOutGuildContractProgress_PlayerContract) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgSignOutGuildContractProgress_PlayerContract) GetCompletedContracts() []*CMsgSignOutGuildContractProgress_CompletedGuildEventContracts {
	if x != nil {
		return x.CompletedContracts
	}
	return nil
}

type CMsgSignOutGuildChallengeProgress_ChallengeProgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildId                    *uint32 `protobuf:"varint,1,opt,name=guild_id,json=guildId" json:"guild_id,omitempty"`
	EventId                    *uint32 `protobuf:"varint,2,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	ChallengeInstanceId        *uint32 `protobuf:"varint,3,opt,name=challenge_instance_id,json=challengeInstanceId" json:"challenge_instance_id,omitempty"`
	ChallengeInstanceTimestamp *uint32 `protobuf:"varint,4,opt,name=challenge_instance_timestamp,json=challengeInstanceTimestamp" json:"challenge_instance_timestamp,omitempty"`
	ChallengePeriodSerial      *uint32 `protobuf:"varint,5,opt,name=challenge_period_serial,json=challengePeriodSerial" json:"challenge_period_serial,omitempty"`
	Progress                   *uint32 `protobuf:"varint,6,opt,name=progress" json:"progress,omitempty"`
	ChallengeParameter         *uint32 `protobuf:"varint,7,opt,name=challenge_parameter,json=challengeParameter" json:"challenge_parameter,omitempty"`
}

func (x *CMsgSignOutGuildChallengeProgress_ChallengeProgress) Reset() {
	*x = CMsgSignOutGuildChallengeProgress_ChallengeProgress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSignOutGuildChallengeProgress_ChallengeProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSignOutGuildChallengeProgress_ChallengeProgress) ProtoMessage() {}

func (x *CMsgSignOutGuildChallengeProgress_ChallengeProgress) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSignOutGuildChallengeProgress_ChallengeProgress.ProtoReflect.Descriptor instead.
func (*CMsgSignOutGuildChallengeProgress_ChallengeProgress) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{99, 0}
}

func (x *CMsgSignOutGuildChallengeProgress_ChallengeProgress) GetGuildId() uint32 {
	if x != nil && x.GuildId != nil {
		return *x.GuildId
	}
	return 0
}

func (x *CMsgSignOutGuildChallengeProgress_ChallengeProgress) GetEventId() uint32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

func (x *CMsgSignOutGuildChallengeProgress_ChallengeProgress) GetChallengeInstanceId() uint32 {
	if x != nil && x.ChallengeInstanceId != nil {
		return *x.ChallengeInstanceId
	}
	return 0
}

func (x *CMsgSignOutGuildChallengeProgress_ChallengeProgress) GetChallengeInstanceTimestamp() uint32 {
	if x != nil && x.ChallengeInstanceTimestamp != nil {
		return *x.ChallengeInstanceTimestamp
	}
	return 0
}

func (x *CMsgSignOutGuildChallengeProgress_ChallengeProgress) GetChallengePeriodSerial() uint32 {
	if x != nil && x.ChallengePeriodSerial != nil {
		return *x.ChallengePeriodSerial
	}
	return 0
}

func (x *CMsgSignOutGuildChallengeProgress_ChallengeProgress) GetProgress() uint32 {
	if x != nil && x.Progress != nil {
		return *x.Progress
	}
	return 0
}

func (x *CMsgSignOutGuildChallengeProgress_ChallengeProgress) GetChallengeParameter() uint32 {
	if x != nil && x.ChallengeParameter != nil {
		return *x.ChallengeParameter
	}
	return 0
}

type CMsgSignOutMVPStats_Player struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamId                   *uint32                                      `protobuf:"varint,1,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	TeamNetworthRank         *uint32                                      `protobuf:"varint,2,opt,name=team_networth_rank,json=teamNetworthRank" json:"team_networth_rank,omitempty"`
	AccountId                *uint32                                      `protobuf:"varint,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Slot                     *uint32                                      `protobuf:"varint,32,opt,name=slot" json:"slot,omitempty"`
	Rank                     *uint32                                      `protobuf:"varint,33,opt,name=rank" json:"rank,omitempty"`
	HeroId                   *uint32                                      `protobuf:"varint,4,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	Role                     *uint32                                      `protobuf:"varint,5,opt,name=role" json:"role,omitempty"`
	Kills                    *int32                                       `protobuf:"varint,6,opt,name=kills" json:"kills,omitempty"`
	Deaths                   *int32                                       `protobuf:"varint,7,opt,name=deaths" json:"deaths,omitempty"`
	Assists                  *int32                                       `protobuf:"varint,8,opt,name=assists" json:"assists,omitempty"`
	Xp                       *int32                                       `protobuf:"varint,9,opt,name=xp" json:"xp,omitempty"`
	NetWorth                 *int32                                       `protobuf:"varint,10,opt,name=net_worth,json=netWorth" json:"net_worth,omitempty"`
	SupportGoldSpent         *int32                                       `protobuf:"varint,12,opt,name=support_gold_spent,json=supportGoldSpent" json:"support_gold_spent,omitempty"`
	WardsPlaced              *int32                                       `protobuf:"varint,13,opt,name=wards_placed,json=wardsPlaced" json:"wards_placed,omitempty"`
	WardsSpottedForDewarding *int32                                       `protobuf:"varint,14,opt,name=wards_spotted_for_dewarding,json=wardsSpottedForDewarding" json:"wards_spotted_for_dewarding,omitempty"`
	CampsStacked             *int32                                       `protobuf:"varint,15,opt,name=camps_stacked,json=campsStacked" json:"camps_stacked,omitempty"`
	LastHits                 *int32                                       `protobuf:"varint,16,opt,name=last_hits,json=lastHits" json:"last_hits,omitempty"`
	Denies                   *int32                                       `protobuf:"varint,17,opt,name=denies" json:"denies,omitempty"`
	BuildingDamage           *int32                                       `protobuf:"varint,19,opt,name=building_damage,json=buildingDamage" json:"building_damage,omitempty"`
	OtherDamage              *int32                                       `protobuf:"varint,20,opt,name=other_damage,json=otherDamage" json:"other_damage,omitempty"`
	TripleKills              *int32                                       `protobuf:"varint,26,opt,name=triple_kills,json=tripleKills" json:"triple_kills,omitempty"`
	Rampages                 *int32                                       `protobuf:"varint,28,opt,name=rampages" json:"rampages,omitempty"`
	FirstBlood               *int32                                       `protobuf:"varint,31,opt,name=first_blood,json=firstBlood" json:"first_blood,omitempty"`
	KillEaterEvents          []*CMsgSignOutMVPStats_Player_KillEaterEvent `protobuf:"bytes,34,rep,name=kill_eater_events,json=killEaterEvents" json:"kill_eater_events,omitempty"`
	HighestKillstreak        *uint32                                      `protobuf:"varint,35,opt,name=highest_killstreak,json=highestKillstreak" json:"highest_killstreak,omitempty"`
}

func (x *CMsgSignOutMVPStats_Player) Reset() {
	*x = CMsgSignOutMVPStats_Player{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSignOutMVPStats_Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSignOutMVPStats_Player) ProtoMessage() {}

func (x *CMsgSignOutMVPStats_Player) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSignOutMVPStats_Player.ProtoReflect.Descriptor instead.
func (*CMsgSignOutMVPStats_Player) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{100, 0}
}

func (x *CMsgSignOutMVPStats_Player) GetTeamId() uint32 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

func (x *CMsgSignOutMVPStats_Player) GetTeamNetworthRank() uint32 {
	if x != nil && x.TeamNetworthRank != nil {
		return *x.TeamNetworthRank
	}
	return 0
}

func (x *CMsgSignOutMVPStats_Player) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgSignOutMVPStats_Player) GetSlot() uint32 {
	if x != nil && x.Slot != nil {
		return *x.Slot
	}
	return 0
}

func (x *CMsgSignOutMVPStats_Player) GetRank() uint32 {
	if x != nil && x.Rank != nil {
		return *x.Rank
	}
	return 0
}

func (x *CMsgSignOutMVPStats_Player) GetHeroId() uint32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CMsgSignOutMVPStats_Player) GetRole() uint32 {
	if x != nil && x.Role != nil {
		return *x.Role
	}
	return 0
}

func (x *CMsgSignOutMVPStats_Player) GetKills() int32 {
	if x != nil && x.Kills != nil {
		return *x.Kills
	}
	return 0
}

func (x *CMsgSignOutMVPStats_Player) GetDeaths() int32 {
	if x != nil && x.Deaths != nil {
		return *x.Deaths
	}
	return 0
}

func (x *CMsgSignOutMVPStats_Player) GetAssists() int32 {
	if x != nil && x.Assists != nil {
		return *x.Assists
	}
	return 0
}

func (x *CMsgSignOutMVPStats_Player) GetXp() int32 {
	if x != nil && x.Xp != nil {
		return *x.Xp
	}
	return 0
}

func (x *CMsgSignOutMVPStats_Player) GetNetWorth() int32 {
	if x != nil && x.NetWorth != nil {
		return *x.NetWorth
	}
	return 0
}

func (x *CMsgSignOutMVPStats_Player) GetSupportGoldSpent() int32 {
	if x != nil && x.SupportGoldSpent != nil {
		return *x.SupportGoldSpent
	}
	return 0
}

func (x *CMsgSignOutMVPStats_Player) GetWardsPlaced() int32 {
	if x != nil && x.WardsPlaced != nil {
		return *x.WardsPlaced
	}
	return 0
}

func (x *CMsgSignOutMVPStats_Player) GetWardsSpottedForDewarding() int32 {
	if x != nil && x.WardsSpottedForDewarding != nil {
		return *x.WardsSpottedForDewarding
	}
	return 0
}

func (x *CMsgSignOutMVPStats_Player) GetCampsStacked() int32 {
	if x != nil && x.CampsStacked != nil {
		return *x.CampsStacked
	}
	return 0
}

func (x *CMsgSignOutMVPStats_Player) GetLastHits() int32 {
	if x != nil && x.LastHits != nil {
		return *x.LastHits
	}
	return 0
}

func (x *CMsgSignOutMVPStats_Player) GetDenies() int32 {
	if x != nil && x.Denies != nil {
		return *x.Denies
	}
	return 0
}

func (x *CMsgSignOutMVPStats_Player) GetBuildingDamage() int32 {
	if x != nil && x.BuildingDamage != nil {
		return *x.BuildingDamage
	}
	return 0
}

func (x *CMsgSignOutMVPStats_Player) GetOtherDamage() int32 {
	if x != nil && x.OtherDamage != nil {
		return *x.OtherDamage
	}
	return 0
}

func (x *CMsgSignOutMVPStats_Player) GetTripleKills() int32 {
	if x != nil && x.TripleKills != nil {
		return *x.TripleKills
	}
	return 0
}

func (x *CMsgSignOutMVPStats_Player) GetRampages() int32 {
	if x != nil && x.Rampages != nil {
		return *x.Rampages
	}
	return 0
}

func (x *CMsgSignOutMVPStats_Player) GetFirstBlood() int32 {
	if x != nil && x.FirstBlood != nil {
		return *x.FirstBlood
	}
	return 0
}

func (x *CMsgSignOutMVPStats_Player) GetKillEaterEvents() []*CMsgSignOutMVPStats_Player_KillEaterEvent {
	if x != nil {
		return x.KillEaterEvents
	}
	return nil
}

func (x *CMsgSignOutMVPStats_Player) GetHighestKillstreak() uint32 {
	if x != nil && x.HighestKillstreak != nil {
		return *x.HighestKillstreak
	}
	return 0
}

type CMsgSignOutMVPStats_Player_KillEaterEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventType *uint32 `protobuf:"varint,1,req,name=event_type,json=eventType" json:"event_type,omitempty"`
	Amount    *uint32 `protobuf:"varint,2,req,name=amount" json:"amount,omitempty"`
}

func (x *CMsgSignOutMVPStats_Player_KillEaterEvent) Reset() {
	*x = CMsgSignOutMVPStats_Player_KillEaterEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSignOutMVPStats_Player_KillEaterEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSignOutMVPStats_Player_KillEaterEvent) ProtoMessage() {}

func (x *CMsgSignOutMVPStats_Player_KillEaterEvent) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSignOutMVPStats_Player_KillEaterEvent.ProtoReflect.Descriptor instead.
func (*CMsgSignOutMVPStats_Player_KillEaterEvent) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{100, 0, 0}
}

func (x *CMsgSignOutMVPStats_Player_KillEaterEvent) GetEventType() uint32 {
	if x != nil && x.EventType != nil {
		return *x.EventType
	}
	return 0
}

func (x *CMsgSignOutMVPStats_Player_KillEaterEvent) GetAmount() uint32 {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return 0
}

type CMsgServerToGCGetGuildContractsResponse_ContractDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractId          *uint64 `protobuf:"varint,1,opt,name=contract_id,json=contractId" json:"contract_id,omitempty"`
	ChallengeInstanceId *uint32 `protobuf:"varint,2,opt,name=challenge_instance_id,json=challengeInstanceId" json:"challenge_instance_id,omitempty"`
	ChallengeParameter  *uint32 `protobuf:"varint,3,opt,name=challenge_parameter,json=challengeParameter" json:"challenge_parameter,omitempty"`
	ContractStars       *uint32 `protobuf:"varint,4,opt,name=contract_stars,json=contractStars" json:"contract_stars,omitempty"`
	ContractSlot        *uint32 `protobuf:"varint,5,opt,name=contract_slot,json=contractSlot" json:"contract_slot,omitempty"`
}

func (x *CMsgServerToGCGetGuildContractsResponse_ContractDetails) Reset() {
	*x = CMsgServerToGCGetGuildContractsResponse_ContractDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerToGCGetGuildContractsResponse_ContractDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCGetGuildContractsResponse_ContractDetails) ProtoMessage() {}

func (x *CMsgServerToGCGetGuildContractsResponse_ContractDetails) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCGetGuildContractsResponse_ContractDetails.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCGetGuildContractsResponse_ContractDetails) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{105, 0}
}

func (x *CMsgServerToGCGetGuildContractsResponse_ContractDetails) GetContractId() uint64 {
	if x != nil && x.ContractId != nil {
		return *x.ContractId
	}
	return 0
}

func (x *CMsgServerToGCGetGuildContractsResponse_ContractDetails) GetChallengeInstanceId() uint32 {
	if x != nil && x.ChallengeInstanceId != nil {
		return *x.ChallengeInstanceId
	}
	return 0
}

func (x *CMsgServerToGCGetGuildContractsResponse_ContractDetails) GetChallengeParameter() uint32 {
	if x != nil && x.ChallengeParameter != nil {
		return *x.ChallengeParameter
	}
	return 0
}

func (x *CMsgServerToGCGetGuildContractsResponse_ContractDetails) GetContractStars() uint32 {
	if x != nil && x.ContractStars != nil {
		return *x.ContractStars
	}
	return 0
}

func (x *CMsgServerToGCGetGuildContractsResponse_ContractDetails) GetContractSlot() uint32 {
	if x != nil && x.ContractSlot != nil {
		return *x.ContractSlot
	}
	return 0
}

type CMsgServerToGCGetGuildContractsResponse_Player struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId *uint32                                                    `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	GuildId   *uint32                                                    `protobuf:"varint,2,opt,name=guild_id,json=guildId" json:"guild_id,omitempty"`
	EventId   *EEvent                                                    `protobuf:"varint,3,opt,name=event_id,json=eventId,enum=dota.EEvent,def=0" json:"event_id,omitempty"`
	Contracts []*CMsgServerToGCGetGuildContractsResponse_ContractDetails `protobuf:"bytes,4,rep,name=contracts" json:"contracts,omitempty"`
}

// Default values for CMsgServerToGCGetGuildContractsResponse_Player fields.
const (
	Default_CMsgServerToGCGetGuildContractsResponse_Player_EventId = EEvent_EVENT_ID_NONE
)

func (x *CMsgServerToGCGetGuildContractsResponse_Player) Reset() {
	*x = CMsgServerToGCGetGuildContractsResponse_Player{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_server_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerToGCGetGuildContractsResponse_Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCGetGuildContractsResponse_Player) ProtoMessage() {}

func (x *CMsgServerToGCGetGuildContractsResponse_Player) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_server_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCGetGuildContractsResponse_Player.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCGetGuildContractsResponse_Player) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_server_proto_rawDescGZIP(), []int{105, 1}
}

func (x *CMsgServerToGCGetGuildContractsResponse_Player) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgServerToGCGetGuildContractsResponse_Player) GetGuildId() uint32 {
	if x != nil && x.GuildId != nil {
		return *x.GuildId
	}
	return 0
}

func (x *CMsgServerToGCGetGuildContractsResponse_Player) GetEventId() EEvent {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return Default_CMsgServerToGCGetGuildContractsResponse_Player_EventId
}

func (x *CMsgServerToGCGetGuildContractsResponse_Player) GetContracts() []*CMsgServerToGCGetGuildContractsResponse_ContractDetails {
	if x != nil {
		return x.Contracts
	}
	return nil
}

var File_dota_gcmessages_server_proto protoreflect.FileDescriptor

var file_dota_gcmessages_server_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x64, 0x6f, 0x74, 0x61, 0x5f, 0x67, 0x63, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04,
	0x64, 0x6f, 0x74, 0x61, 0x1a, 0x13, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x64, 0x6f, 0x74, 0x61, 0x5f,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1c, 0x64, 0x6f, 0x74, 0x61, 0x5f, 0x67, 0x63, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x15, 0x65, 0x63, 0x6f, 0x6e, 0x5f, 0x67, 0x63, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x2d, 0x64, 0x6f, 0x74, 0x61, 0x5f, 0x67, 0x63, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xab, 0x03, 0x0a, 0x19, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x6f, 0x6f, 0x72, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x66,
	0x0a, 0x0e, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x45, 0x50,
	0x6f, 0x6f, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1d, 0x6b, 0x5f, 0x45, 0x50, 0x6f, 0x6f,
	0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x52, 0x0d, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x50, 0x6f, 0x6f, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52,
	0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x1a, 0xe3, 0x01, 0x0a, 0x06, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x6a, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e,
	0x64, 0x6f, 0x74, 0x61, 0x2e, 0x45, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x3a, 0x1a, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e,
	0x4e, 0x45, 0x43, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x52, 0x10, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x2a,
	0x0a, 0x11, 0x6e, 0x75, 0x6d, 0x5f, 0x62, 0x61, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x42, 0x61,
	0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x65,
	0x61, 0x6b, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x70, 0x65, 0x61, 0x6b, 0x4c, 0x6f, 0x73, 0x73, 0x50, 0x63, 0x74, 0x22, 0xe1,
	0x03, 0x0a, 0x13, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x43, 0x72, 0x61, 0x73, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x07, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x64, 0x12, 0x4e, 0x0a, 0x0a,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x14, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x47, 0x61, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x19, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x47, 0x41, 0x4d,
	0x45, 0x52, 0x55, 0x4c, 0x45, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x49,
	0x54, 0x52, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x12,
	0x73, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6c, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x07, 0x52, 0x10, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6e,
	0x65, 0x6c, 0x53, 0x61, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0d,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x31, 0x0a,
	0x15, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69,
	0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x07, 0x52, 0x12, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x6f, 0x72,
	0x74, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x22, 0xe7, 0x08, 0x0a, 0x14, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x4e, 0x0a, 0x11, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x54, 0x0a, 0x14, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x6f, 0x74, 0x61,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x13, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x73, 0x12, 0x4e, 0x0a, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x44, 0x4f, 0x54,
	0x41, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x19, 0x44, 0x4f, 0x54,
	0x41, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x52, 0x55, 0x4c, 0x45, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x52, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x30, 0x0a, 0x14, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x6f, 0x64,
	0x5f, 0x68, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x12, 0x66, 0x69, 0x72, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x48, 0x61, 0x70, 0x70, 0x65,
	0x6e, 0x65, 0x64, 0x12, 0x57, 0x0a, 0x17, 0x70, 0x6f, 0x6f, 0x72, 0x5f, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x50, 0x6f, 0x6f, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x15, 0x70, 0x6f, 0x6f, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4f, 0x0a, 0x0b,
	0x73, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x25, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x2e, 0x53, 0x65,
	0x6e, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x3a, 0x07, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x23, 0x0a,
	0x0d, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x4b, 0x69, 0x6c,
	0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x69, 0x72, 0x65, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x73,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x4b, 0x69, 0x6c, 0x6c,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x6c, 0x65, 0x61,
	0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74,
	0x4c, 0x65, 0x61, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xe2, 0x01, 0x0a, 0x06,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x0c, 0x6c, 0x65,
	0x61, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4c, 0x65, 0x61, 0x76,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x6a, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x21, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x45, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x3a, 0x1a, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x44, 0x49, 0x53, 0x43,
	0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x52, 0x10,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x22, 0x89, 0x02, 0x0a, 0x0a, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12,
	0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09,
	0x48, 0x45, 0x41, 0x52, 0x54, 0x42, 0x45, 0x41, 0x54, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x47,
	0x41, 0x4d, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x46,
	0x49, 0x52, 0x53, 0x54, 0x5f, 0x42, 0x4c, 0x4f, 0x4f, 0x44, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10,
	0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44,
	0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x48, 0x45, 0x52,
	0x4f, 0x10, 0x05, 0x12, 0x24, 0x0a, 0x20, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x44, 0x49,
	0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x45,
	0x51, 0x55, 0x45, 0x4e, 0x43, 0x45, 0x53, 0x10, 0x06, 0x12, 0x26, 0x0a, 0x22, 0x50, 0x4c, 0x41,
	0x59, 0x45, 0x52, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44,
	0x5f, 0x4e, 0x4f, 0x43, 0x4f, 0x4e, 0x53, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x45, 0x53, 0x10,
	0x07, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x41, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x54,
	0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x0a, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x41, 0x53, 0x53,
	0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x10, 0x0b, 0x12, 0x09, 0x0a,
	0x05, 0x4b, 0x49, 0x4c, 0x4c, 0x53, 0x10, 0x0d, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x55, 0x49, 0x4c,
	0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x0e, 0x22, 0xcb, 0x0c, 0x0a,
	0x12, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x31, 0x0a, 0x15, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x07, 0x52, 0x12, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x12, 0x33, 0x0a, 0x16, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x13, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x24, 0x0a, 0x0e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x76, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x76, 0x50, 0x6f,
	0x72, 0x74, 0x12, 0x35, 0x0a, 0x17, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x76, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x14, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x54, 0x76, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x4d, 0x0a, 0x23, 0x6c, 0x65, 0x67,
	0x61, 0x63, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x64, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x20, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x64, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61,
	0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x68, 0x69, 0x62, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x11, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x69, 0x62, 0x65, 0x72,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x64, 0x6f,
	0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x3a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x52, 0x0a, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x25,
	0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x61, 0x76, 0x67,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x6f,
	0x61, 0x64, 0x61, 0x76, 0x67, 0x12, 0x37, 0x0a, 0x18, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
	0x74, 0x76, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54,
	0x76, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28,
	0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x47, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x1f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x06, 0x52, 0x1b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x26,
	0x0a, 0x0f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x5f, 0x6d, 0x61,
	0x78, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x6c,
	0x6f, 0x74, 0x73, 0x4d, 0x61, 0x78, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x73,
	0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x3e, 0x0a, 0x1c, 0x72, 0x65, 0x6c,
	0x61, 0x79, 0x65, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x18, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6c,
	0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x76, 0x5f, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x0c, 0x74, 0x76, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x58, 0x0a, 0x12, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x67, 0x61, 0x6d, 0x65,
	0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x3a, 0x04, 0x42,
	0x4f, 0x54, 0x48, 0x52, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x47, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x66,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x66, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x72, 0x63, 0x64, 0x73, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x72, 0x63, 0x64,
	0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x64, 0x65, 0x76,
	0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x64, 0x65, 0x76, 0x46, 0x6f, 0x72,
	0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x46, 0x0a, 0x20,
	0x69, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x69, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x44, 0x61, 0x74, 0x61, 0x22, 0x7c, 0x0a, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x47, 0x41, 0x4d, 0x45, 0x10, 0x01, 0x12, 0x09, 0x0a,
	0x05, 0x50, 0x52, 0x4f, 0x58, 0x59, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x45, 0x4e, 0x53,
	0x4f, 0x52, 0x46, 0x4c, 0x4f, 0x57, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x4f, 0x54, 0x41,
	0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x55, 0x53, 0x54, 0x4f,
	0x4d, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x05, 0x12, 0x13, 0x0a,
	0x0f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4f, 0x4e, 0x4c, 0x59,
	0x10, 0x06, 0x22, 0x36, 0x0a, 0x0b, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x47, 0x61, 0x6d, 0x65,
	0x73, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x4f, 0x54, 0x48, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x02, 0x12,
	0x09, 0x0a, 0x05, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x22, 0xa6, 0x03, 0x0a, 0x12, 0x43,
	0x4d, 0x73, 0x67, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x72, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x4f, 0x0a, 0x0d,
	0x6c, 0x65, 0x61, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x44, 0x4f, 0x54, 0x41, 0x4c,
	0x65, 0x61, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x74, 0x3a, 0x10, 0x44,
	0x4f, 0x54, 0x41, 0x5f, 0x4c, 0x45, 0x41, 0x56, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x52,
	0x0c, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x38, 0x0a,
	0x0c, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4c,
	0x65, 0x61, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x6c, 0x65, 0x61, 0x76,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x6a,
	0x0a, 0x11, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x64, 0x6f, 0x74, 0x61,
	0x2e, 0x45, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x3a, 0x1a, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x52, 0x10, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x57, 0x0a, 0x17, 0x70, 0x6f,
	0x6f, 0x72, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x6f,
	0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x6f, 0x6f, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x15, 0x70, 0x6f,
	0x6f, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0x34, 0x0a, 0x1a, 0x43, 0x4d, 0x73, 0x67, 0x4c, 0x65, 0x61, 0x76, 0x65,
	0x72, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x59, 0x0a, 0x1f, 0x43, 0x4d, 0x73,
	0x67, 0x44, 0x4f, 0x54, 0x41, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x46, 0x69, 0x6e, 0x61,
	0x6c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x6f,
	0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x46, 0x61, 0x6e, 0x74, 0x61,
	0x73, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x22, 0x58, 0x0a, 0x1e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41,
	0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x4c, 0x69, 0x76, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x44, 0x4f, 0x54, 0x41, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x22, 0xd9,
	0x01, 0x0a, 0x14, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x46, 0x61, 0x6e, 0x74, 0x61,
	0x73, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x06,
	0x74, 0x65, 0x61, 0x6d, 0x5f, 0x31, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x65,
	0x61, 0x6d, 0x31, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x32, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x32, 0x22, 0x6e, 0x0a, 0x14, 0x43, 0x4d,
	0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x70,
	0x70, 0x79, 0x12, 0x2b, 0x0a, 0x12, 0x67, 0x6f, 0x6f, 0x64, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f,
	0x68, 0x65, 0x72, 0x6f, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0f,
	0x67, 0x6f, 0x6f, 0x64, 0x54, 0x65, 0x61, 0x6d, 0x48, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x73, 0x12,
	0x29, 0x0a, 0x11, 0x62, 0x61, 0x64, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x68, 0x65, 0x72, 0x6f,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0e, 0x62, 0x61, 0x64, 0x54,
	0x65, 0x61, 0x6d, 0x48, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x73, 0x22, 0x5d, 0x0a, 0x1b, 0x43, 0x4d,
	0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x43, 0x52, 0x65, 0x61, 0x6c,
	0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x07, 0x64, 0x65, 0x6c,
	0x61, 0x79, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x6f, 0x74,
	0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x52, 0x65, 0x61, 0x6c, 0x74, 0x69,
	0x6d, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x54, 0x65, 0x72, 0x73, 0x65,
	0x52, 0x07, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x22, 0x40, 0x0a, 0x24, 0x43, 0x4d, 0x73,
	0x67, 0x47, 0x43, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x61, 0x6c, 0x74,
	0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x74, 0x6f,
	0x70, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x22, 0x3f, 0x0a, 0x25, 0x43,
	0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0xe5, 0x03, 0x0a,
	0x18, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x69, 0x67, 0x6e, 0x4f, 0x75, 0x74, 0x47, 0x61, 0x6d, 0x65,
	0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x05, 0x74, 0x65, 0x61,
	0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x53, 0x69, 0x67, 0x6e, 0x4f, 0x75, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x70,
	0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x43, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x05,
	0x74, 0x65, 0x61, 0x6d, 0x73, 0x1a, 0xaa, 0x01, 0x0a, 0x07, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x68, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x5f,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x52, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x1a, 0xdf, 0x01, 0x0a, 0x05, 0x43, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x26, 0x0a, 0x0f,
	0x69, 0x73, 0x5f, 0x77, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x57, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x54, 0x65, 0x61, 0x6d, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x61,
	0x6e, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69,
	0x73, 0x52, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x44, 0x0a, 0x10,
	0x74, 0x69, 0x6d, 0x65, 0x64, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x54, 0x65, 0x61, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x40, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53,
	0x69, 0x67, 0x6e, 0x4f, 0x75, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x07, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x73, 0x22, 0xba, 0x28, 0x0a, 0x14, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d,
	0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x4f, 0x75, 0x74, 0x12, 0x1f, 0x0a,
	0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x04, 0x80, 0xa6, 0x1d, 0x01, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x67, 0x6f,
	0x6f, 0x64, 0x5f, 0x67, 0x75, 0x79, 0x73, 0x5f, 0x77, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x67, 0x6f, 0x6f, 0x64, 0x47, 0x75, 0x79, 0x73, 0x57, 0x69, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x07, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x73, 0x12, 0x36, 0x0a, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x61,
	0x6d, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x4f, 0x75, 0x74, 0x2e, 0x43,
	0x54, 0x65, 0x61, 0x6d, 0x52, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74,
	0x6f, 0x77, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x0b, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27,
	0x0a, 0x0f, 0x62, 0x61, 0x72, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0e, 0x62, 0x61, 0x72, 0x72, 0x61, 0x63, 0x6b,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64,
	0x64, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x6f,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x3a, 0x0a,
	0x0a, 0x70, 0x69, 0x63, 0x6b, 0x73, 0x5f, 0x62, 0x61, 0x6e, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x48,
	0x65, 0x72, 0x6f, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x09,
	0x70, 0x69, 0x63, 0x6b, 0x73, 0x42, 0x61, 0x6e, 0x73, 0x12, 0x45, 0x0a, 0x0d, 0x66, 0x61, 0x6e,
	0x74, 0x61, 0x73, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x29, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41,
	0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x0c, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x12, 0x73, 0x0a, 0x20, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x64, 0x6f, 0x74,
	0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x45, 0x63, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x53, 0x74, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x6a, 0x75,
	0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x1d, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x69, 0x63, 0x5f, 0x73, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x12, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x53, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x57, 0x0a,
	0x17, 0x70, 0x6f, 0x6f, 0x72, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x6f, 0x6f, 0x72, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x15, 0x70, 0x6f, 0x6f, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x59, 0x0a, 0x0f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x73, 0x67, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x4f, 0x75, 0x74, 0x2e, 0x43, 0x41, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x4d, 0x73,
	0x67, 0x52, 0x0e, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x73, 0x67,
	0x73, 0x12, 0x5e, 0x0a, 0x12, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x66, 0x65, 0x65, 0x64,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x24, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x4f, 0x75, 0x74, 0x2e, 0x43, 0x53, 0x6f, 0x63, 0x69, 0x61,
	0x6c, 0x46, 0x65, 0x65, 0x64, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x10, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x46, 0x65, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x34, 0x0a, 0x16, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x74, 0x68, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x11, 0x52, 0x14, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x74, 0x68, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x54, 0x0a, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x25, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d,
	0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x4f, 0x75, 0x74, 0x2e, 0x43, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a,
	0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x26, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x27, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x12,
	0x2a, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x47,
	0x61, 0x6d, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x79, 0x0a, 0x1e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x2a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47,
	0x61, 0x6d, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x4f, 0x75, 0x74, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x1b, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x47, 0x61, 0x6d, 0x65, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x45,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x51, 0x0a, 0x0f, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x2b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x4f, 0x75, 0x74, 0x2e, 0x57, 0x61, 0x72, 0x64,
	0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0e, 0x77, 0x61, 0x72, 0x64, 0x50,
	0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x45, 0x0a, 0x0e, 0x67, 0x61, 0x6d,
	0x65, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x2c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x69, 0x67,
	0x6e, 0x4f, 0x75, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x0d, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x12, 0x3b, 0x0a, 0x0e, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x36, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e,
	0x43, 0x45, 0x78, 0x74, 0x72, 0x61, 0x4d, 0x73, 0x67, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x0d,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x34, 0x0a,
	0x16, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x64, 0x18, 0x37, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x65, 0x64, 0x1a, 0xd1, 0x14, 0x0a, 0x05, 0x43, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x42, 0x0a,
	0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x4f, 0x75, 0x74, 0x2e, 0x43, 0x54, 0x65, 0x61, 0x6d,
	0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x73, 0x1a, 0x83, 0x14, 0x0a, 0x07, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x19, 0x0a,
	0x08, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x65, 0x72, 0x6f,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x72, 0x6f, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x6f, 0x6c, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x67, 0x6f, 0x6c, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6b,
	0x69, 0x6c, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6b, 0x69, 0x6c, 0x6c,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x61, 0x74, 0x68, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x64, 0x65, 0x61, 0x74, 0x68, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x73, 0x73,
	0x69, 0x73, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x61, 0x73, 0x73, 0x69,
	0x73, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6c, 0x65, 0x61, 0x76,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x68, 0x69, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x61, 0x73,
	0x74, 0x48, 0x69, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x73, 0x12, 0x20, 0x0a,
	0x0c, 0x67, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x67, 0x6f, 0x6c, 0x64, 0x50, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x12,
	0x22, 0x0a, 0x0d, 0x78, 0x70, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x78, 0x70, 0x50, 0x65, 0x72, 0x4d, 0x69, 0x6e,
	0x75, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x6f, 0x6c, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x6e,
	0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x67, 0x6f, 0x6c, 0x64, 0x53, 0x70, 0x65,
	0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x64, 0x5f, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x48, 0x65, 0x72, 0x6f,
	0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64,
	0x5f, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x11, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x54, 0x6f, 0x77, 0x65, 0x72,
	0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64,
	0x5f, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x11, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x48, 0x65, 0x72, 0x6f, 0x48,
	0x65, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x74, 0x69, 0x6d, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x12, 0x32, 0x0a, 0x15,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x63,
	0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x5f, 0x66, 0x61, 0x72, 0x6d, 0x5f, 0x67, 0x6f, 0x6c, 0x64,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x46,
	0x61, 0x72, 0x6d, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c,
	0x61, 0x69, 0x6d, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x73, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x44, 0x65, 0x6e, 0x69, 0x65,
	0x73, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x5f, 0x6d, 0x69, 0x73,
	0x73, 0x65, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6c, 0x61, 0x69, 0x6d,
	0x65, 0x64, 0x4d, 0x69, 0x73, 0x73, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x73, 0x73,
	0x65, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x74, 0x5f, 0x77, 0x6f, 0x72, 0x74, 0x68, 0x18, 0x22, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x6e, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x74, 0x68, 0x12, 0x1f, 0x0a,
	0x0b, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x25, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x68, 0x65, 0x72, 0x6f, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x26,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x44, 0x61, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x69, 0x6e,
	0x67, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x68, 0x65, 0x72, 0x6f, 0x48, 0x65, 0x61,
	0x6c, 0x69, 0x6e, 0x67, 0x12, 0x4b, 0x0a, 0x10, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f,
	0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x73, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x52, 0x0f, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x73, 0x12, 0x61, 0x0a, 0x1a, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f,
	0x75, 0x6e, 0x69, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x18,
	0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x55, 0x6e, 0x69,
	0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x18, 0x61, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x49, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x12, 0x48, 0x0a, 0x0f, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e,
	0x74, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x73, 0x18, 0x28, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x50, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x42, 0x75, 0x66, 0x66, 0x52, 0x0e,
	0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x42, 0x75, 0x66, 0x66, 0x73, 0x12, 0x62,
	0x0a, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x67,
	0x6e, 0x4f, 0x75, 0x74, 0x2e, 0x43, 0x54, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x2e, 0x43, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x73,
	0x12, 0x2c, 0x0a, 0x12, 0x74, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x29, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x10, 0x74, 0x61,
	0x6c, 0x65, 0x6e, 0x74, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x64, 0x73, 0x12, 0x26,
	0x0a, 0x0f, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x70, 0x69, 0x63, 0x6b, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x68, 0x65, 0x72, 0x6f, 0x50, 0x69, 0x63,
	0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x77,
	0x61, 0x73, 0x5f, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x65, 0x64, 0x18, 0x2b, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x68, 0x65, 0x72, 0x6f, 0x57, 0x61, 0x73, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d,
	0x65, 0x64, 0x12, 0x40, 0x0a, 0x1d, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x77, 0x61, 0x73, 0x5f, 0x64,
	0x6f, 0x74, 0x61, 0x5f, 0x70, 0x6c, 0x75, 0x73, 0x5f, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x32, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x68, 0x65, 0x72, 0x6f, 0x57,
	0x61, 0x73, 0x44, 0x6f, 0x74, 0x61, 0x50, 0x6c, 0x75, 0x73, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x65, 0x18, 0x2d, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x75,
	0x73, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x75, 0x73, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x65, 0x18,
	0x2f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x55, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x6c,
	0x75, 0x73, 0x47, 0x75, 0x69, 0x64, 0x65, 0x12, 0x6d, 0x0a, 0x14, 0x68, 0x65, 0x72, 0x6f, 0x5f,
	0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18,
	0x30, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x4f, 0x75,
	0x74, 0x2e, 0x43, 0x54, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e,
	0x48, 0x65, 0x72, 0x6f, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x52, 0x12, 0x68, 0x65, 0x72, 0x6f, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x44, 0x65, 0x61, 0x64, 0x12, 0x2b, 0x0a, 0x12, 0x67, 0x6f, 0x6c,
	0x64, 0x5f, 0x6c, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x65, 0x61, 0x74, 0x68, 0x18,
	0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x67, 0x6f, 0x6c, 0x64, 0x4c, 0x6f, 0x73, 0x74, 0x54,
	0x6f, 0x44, 0x65, 0x61, 0x74, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x1e, 0x6d,
	0x6f, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x5f, 0x63, 0x61, 0x73, 0x74, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x36, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x1a, 0x6d, 0x6f, 0x75, 0x73, 0x65, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x43,
	0x61, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x25, 0x0a, 0x0e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x75, 0x73, 0x65,
	0x64, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x63, 0x61, 0x76, 0x65, 0x72, 0x6e,
	0x5f, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x6e, 0x74, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x63, 0x61, 0x76, 0x65, 0x72, 0x6e,
	0x43, 0x72, 0x61, 0x77, 0x6c, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x5f, 0x72, 0x75, 0x6e, 0x65, 0x73, 0x18,
	0x39, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x52, 0x75, 0x6e,
	0x65, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x6f, 0x75, 0x74, 0x70, 0x6f, 0x73, 0x74, 0x73, 0x5f, 0x63,
	0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x64, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6f,
	0x75, 0x74, 0x70, 0x6f, 0x73, 0x74, 0x73, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x64, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x64, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x72,
	0x64, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x77, 0x61, 0x72, 0x64, 0x73, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x61, 0x6d, 0x70, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x3d, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x61, 0x6d, 0x70, 0x73, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x65,
	0x64, 0x1a, 0x46, 0x0a, 0x0f, 0x43, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x47, 0x61, 0x6d, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x74, 0x61, 0x5f, 0x74, 0x65, 0x61,
	0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x6f, 0x74, 0x61, 0x54, 0x65, 0x61,
	0x6d, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x1a, 0xd0, 0x01, 0x0a, 0x12, 0x48, 0x65,
	0x72, 0x6f, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x52, 0x65, 0x64, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x72, 0x65,
	0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70,
	0x6f, 0x73, 0x74, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6e, 0x0a, 0x0b,
	0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x37, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d,
	0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x4f, 0x75, 0x74, 0x2e, 0x43, 0x54,
	0x65, 0x61, 0x6d, 0x2e, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x48, 0x65, 0x72, 0x6f,
	0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x14, 0x48, 0x45, 0x52, 0x4f,
	0x5f, 0x44, 0x41, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x50, 0x48, 0x59, 0x53, 0x49, 0x43, 0x41, 0x4c,
	0x52, 0x0a, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x59, 0x0a, 0x0e,
	0x48, 0x65, 0x72, 0x6f, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x14, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x44, 0x41, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x50, 0x48,
	0x59, 0x53, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x48, 0x45, 0x52, 0x4f,
	0x5f, 0x44, 0x41, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x4d, 0x41, 0x47, 0x49, 0x43, 0x41, 0x4c, 0x10,
	0x01, 0x12, 0x14, 0x0a, 0x10, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x44, 0x41, 0x4d, 0x41, 0x47, 0x45,
	0x5f, 0x50, 0x55, 0x52, 0x45, 0x10, 0x02, 0x1a, 0x43, 0x0a, 0x15, 0x43, 0x41, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x4d, 0x73, 0x67,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0xb1, 0x01, 0x0a,
	0x15, 0x43, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x46, 0x65, 0x65, 0x64, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65,
	0x1a, 0x3e, 0x0a, 0x0f, 0x43, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x1a, 0xfc, 0x01, 0x0a, 0x19, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1f,
	0x0a, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x31, 0x12, 0x20, 0x0a, 0x0c, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x32, 0x12, 0x20, 0x0a, 0x0c, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x33, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x33, 0x12, 0x20, 0x0a, 0x0c, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x34, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x34, 0x12, 0x20, 0x0a,
	0x0c, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x35, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x35, 0x1a,
	0x8f, 0x02, 0x0a, 0x0d, 0x57, 0x61, 0x72, 0x64, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x65, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x65, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x72, 0x6f, 0x73, 0x68, 0x61, 0x6e, 0x5f, 0x61, 0x6c, 0x69, 0x76, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x72, 0x6f, 0x73, 0x68, 0x61, 0x6e, 0x41, 0x6c,
	0x69, 0x76, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x58, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x79,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x59, 0x22, 0xc6, 0x01, 0x0a, 0x14, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x69, 0x67, 0x6e, 0x4f, 0x75,
	0x74, 0x44, 0x72, 0x61, 0x66, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3b, 0x0a, 0x1a, 0x72, 0x61,
	0x64, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x70, 0x74, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17,
	0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x74, 0x61, 0x69, 0x6e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x64, 0x69, 0x72, 0x65, 0x5f,
	0x63, 0x61, 0x70, 0x74, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x64, 0x69, 0x72, 0x65, 0x43, 0x61,
	0x70, 0x74, 0x61, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3a,
	0x0a, 0x0a, 0x70, 0x69, 0x63, 0x6b, 0x73, 0x5f, 0x62, 0x61, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x48, 0x65, 0x72, 0x6f, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x09, 0x70, 0x69, 0x63, 0x6b, 0x73, 0x42, 0x61, 0x6e, 0x73, 0x22, 0xa4, 0x02, 0x0a, 0x12, 0x43,
	0x4d, 0x73, 0x67, 0x53, 0x69, 0x67, 0x6e, 0x4f, 0x75, 0x74, 0x42, 0x6f, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x61, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x68,
	0x65, 0x61, 0x74, 0x73, 0x12, 0x65, 0x0a, 0x16, 0x62, 0x6f, 0x74, 0x5f, 0x64, 0x69, 0x66, 0x66,
	0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x44, 0x4f, 0x54, 0x41,
	0x42, 0x6f, 0x74, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x3a, 0x16, 0x42,
	0x4f, 0x54, 0x5f, 0x44, 0x49, 0x46, 0x46, 0x49, 0x43, 0x55, 0x4c, 0x54, 0x59, 0x5f, 0x50, 0x41,
	0x53, 0x53, 0x49, 0x56, 0x45, 0x52, 0x14, 0x62, 0x6f, 0x74, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63,
	0x75, 0x6c, 0x74, 0x79, 0x52, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x6f, 0x62, 0x62, 0x79,
	0x12, 0x5f, 0x0a, 0x13, 0x62, 0x6f, 0x74, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c,
	0x74, 0x79, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e,
	0x64, 0x6f, 0x74, 0x61, 0x2e, 0x44, 0x4f, 0x54, 0x41, 0x42, 0x6f, 0x74, 0x44, 0x69, 0x66, 0x66,
	0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x3a, 0x16, 0x42, 0x4f, 0x54, 0x5f, 0x44, 0x49, 0x46, 0x46,
	0x49, 0x43, 0x55, 0x4c, 0x54, 0x59, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x49, 0x56, 0x45, 0x52, 0x11,
	0x62, 0x6f, 0x74, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x44, 0x69, 0x72,
	0x65, 0x22, 0xee, 0x01, 0x0a, 0x17, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x69, 0x67, 0x6e, 0x4f, 0x75,
	0x74, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5b, 0x0a,
	0x12, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6d, 0x75, 0x74, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x64, 0x6f, 0x74, 0x61,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x69, 0x67, 0x6e, 0x4f, 0x75, 0x74, 0x54, 0x65, 0x78, 0x74,
	0x4d, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x75, 0x74,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x10, 0x74, 0x65, 0x78, 0x74, 0x4d, 0x75,
	0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x1a, 0x76, 0x0a, 0x0f, 0x54, 0x65,
	0x78, 0x74, 0x4d, 0x75, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x61, 0x75, 0x73, 0x65, 0x64, 0x5f,
	0x74, 0x65, 0x78, 0x74, 0x5f, 0x6d, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x63, 0x61, 0x75, 0x73, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x75, 0x74, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0xd5, 0x07, 0x0a, 0x16, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x69, 0x67, 0x6e, 0x4f,
	0x75, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x17, 0x0a, 0x07, 0x68,
	0x65, 0x72, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65,
	0x72, 0x6f, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x61, 0x6d, 0x70, 0x61, 0x67, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x61, 0x6d, 0x70, 0x61, 0x67, 0x65, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x69, 0x70, 0x6c, 0x65, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x72, 0x69, 0x70, 0x6c, 0x65, 0x4b, 0x69,
	0x6c, 0x6c, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x62, 0x6c, 0x6f,
	0x6f, 0x64, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x11, 0x66, 0x69, 0x72, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x43, 0x6c, 0x61, 0x69,
	0x6d, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x62, 0x6c, 0x6f,
	0x6f, 0x64, 0x5f, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x47, 0x69, 0x76, 0x65, 0x6e, 0x12,
	0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x73, 0x5f, 0x6b, 0x69, 0x6c, 0x6c,
	0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x6f, 0x75, 0x72, 0x69, 0x65,
	0x72, 0x73, 0x4b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x65, 0x67, 0x69,
	0x73, 0x65, 0x73, 0x5f, 0x73, 0x6e, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x61, 0x65, 0x67, 0x69, 0x73, 0x65, 0x73, 0x53, 0x6e, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x65, 0x65, 0x73, 0x65, 0x73, 0x5f, 0x65,
	0x61, 0x74, 0x65, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x68, 0x65, 0x65,
	0x73, 0x65, 0x73, 0x45, 0x61, 0x74, 0x65, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x65,
	0x70, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x63, 0x72, 0x65, 0x65, 0x70, 0x73, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x66, 0x69, 0x67, 0x68, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x61, 0x72, 0x6d, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x66, 0x61, 0x72, 0x6d, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x70, 0x75, 0x73, 0x68, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x61,
	0x74, 0x68, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x65, 0x61, 0x74, 0x68,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x68, 0x69, 0x74, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x6c, 0x61, 0x73, 0x74, 0x48, 0x69, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x6e, 0x69,
	0x65, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x73,
	0x12, 0x10, 0x0a, 0x03, 0x67, 0x70, 0x6d, 0x18, 0x16, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x67,
	0x70, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x78, 0x70, 0x70, 0x6d, 0x18, 0x17, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x04, 0x78, 0x70, 0x70, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x74, 0x5f, 0x77, 0x6f,
	0x72, 0x74, 0x68, 0x18, 0x18, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6e, 0x65, 0x74, 0x57, 0x6f,
	0x72, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x06, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x68,
	0x65, 0x61, 0x6c, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x68, 0x65, 0x61, 0x6c,
	0x73, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x61, 0x70, 0x69, 0x65, 0x72, 0x73, 0x5f, 0x70, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x72, 0x61,
	0x70, 0x69, 0x65, 0x72, 0x73, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x12, 0x32,
	0x0a, 0x15, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x57, 0x61, 0x72, 0x64, 0x73, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x64, 0x65, 0x73, 0x74,
	0x72, 0x6f, 0x79, 0x65, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x77, 0x61, 0x72,
	0x64, 0x73, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6c,
	0x6f, 0x62, 0x62, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x54, 0x79, 0x70, 0x65, 0x22, 0xd3, 0x06, 0x0a, 0x1f, 0x43,
	0x4d, 0x73, 0x67, 0x53, 0x69, 0x67, 0x6e, 0x4f, 0x75, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x53,
	0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x39, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x69, 0x67, 0x6e, 0x4f,
	0x75, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x73, 0x1a, 0xda, 0x05, 0x0a, 0x13, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x33, 0x0a, 0x16, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x70, 0x65,
	0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x13, 0x6d, 0x61, 0x78, 0x50, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x65, 0x72, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x61, 0x74,
	0x65, 0x5f, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74,
	0x65, 0x61, 0x6d, 0x6d, 0x61, 0x74, 0x65, 0x50, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x44, 0x0a, 0x1f,
	0x6d, 0x61, 0x78, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x69, 0x6e,
	0x67, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x6d, 0x61, 0x78, 0x54, 0x65, 0x61, 0x6d, 0x6d, 0x61,
	0x74, 0x65, 0x50, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10,
	0x74, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x12, 0x2a, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x61, 0x6c, 0x6c,
	0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13,
	0x63, 0x68, 0x61, 0x74, 0x5f, 0x77, 0x68, 0x65, 0x65, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x63, 0x68, 0x61, 0x74, 0x57,
	0x68, 0x65, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x61, 0x75, 0x73, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x61,
	0x75, 0x73, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x70, 0x61, 0x75, 0x73, 0x65, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x75, 0x6e, 0x70, 0x61, 0x75, 0x73, 0x65, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x5f, 0x64, 0x72, 0x61, 0x77, 0x6e, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x44, 0x72, 0x61, 0x77,
	0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x6d, 0x75, 0x74, 0x65, 0x73, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x68, 0x61, 0x74, 0x4d, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x75, 0x74, 0x65, 0x73, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4d, 0x75, 0x74, 0x65, 0x73, 0x12,
	0x67, 0x0a, 0x0c, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x53, 0x69, 0x67, 0x6e, 0x4f, 0x75, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x50, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0b, 0x70, 0x69, 0x6e,
	0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x1a, 0x36, 0x0a, 0x0a, 0x50, 0x69, 0x6e, 0x67,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0xdf, 0x07, 0x0a, 0x1c, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x61, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x07, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x61, 0x6c, 0x74, 0x12, 0x50, 0x0a,
	0x14, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x6f,
	0x74, 0x61, 0x2e, 0x43, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x12, 0x74, 0x69, 0x6d,
	0x65, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x44, 0x0a, 0x11, 0x78, 0x70, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x6f, 0x74,
	0x61, 0x2e, 0x43, 0x53, 0x4f, 0x44, 0x4f, 0x54, 0x41, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x0f, 0x78, 0x70, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x69,
	0x64, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x07, 0x52,
	0x12, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x4b, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x0d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x6f, 0x74,
	0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x5c, 0x0a,
	0x10, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x67, 0x6e,
	0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0f, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x29, 0x0a, 0x08, 0x6d,
	0x76, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x76, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x6d,
	0x76, 0x70, 0x44, 0x61, 0x74, 0x61, 0x1a, 0xd9, 0x03, 0x0a, 0x0e, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x65, 0x72,
	0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x72, 0x6f,
	0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x76, 0x67, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x5f,
	0x78, 0x31, 0x36, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x61, 0x76, 0x67, 0x4b, 0x69,
	0x6c, 0x6c, 0x73, 0x58, 0x31, 0x36, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x76, 0x67, 0x5f, 0x64, 0x65,
	0x61, 0x74, 0x68, 0x73, 0x5f, 0x78, 0x31, 0x36, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x61, 0x76, 0x67, 0x44, 0x65, 0x61, 0x74, 0x68, 0x73, 0x58, 0x31, 0x36, 0x12, 0x26, 0x0a, 0x0f,
	0x61, 0x76, 0x67, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x5f, 0x78, 0x31, 0x36, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x61, 0x76, 0x67, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x73, 0x58, 0x31, 0x36, 0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x76, 0x67, 0x5f, 0x67, 0x70, 0x6d, 0x5f,
	0x78, 0x31, 0x36, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x76, 0x67, 0x47, 0x70,
	0x6d, 0x58, 0x31, 0x36, 0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x76, 0x67, 0x5f, 0x78, 0x70, 0x6d, 0x5f,
	0x78, 0x31, 0x36, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x76, 0x67, 0x58, 0x70,
	0x6d, 0x58, 0x31, 0x36, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x6b, 0x69, 0x6c,
	0x6c, 0x73, 0x5f, 0x78, 0x31, 0x36, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x62, 0x65,
	0x73, 0x74, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x58, 0x31, 0x36, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x65,
	0x73, 0x74, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x5f, 0x78, 0x31, 0x36, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x62, 0x65, 0x73, 0x74, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x73, 0x58, 0x31, 0x36, 0x12, 0x20, 0x0a, 0x0c, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x67, 0x70, 0x6d,
	0x5f, 0x78, 0x31, 0x36, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x62, 0x65, 0x73, 0x74,
	0x47, 0x70, 0x6d, 0x58, 0x31, 0x36, 0x12, 0x20, 0x0a, 0x0c, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x78,
	0x70, 0x6d, 0x5f, 0x78, 0x31, 0x36, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x62, 0x65,
	0x73, 0x74, 0x58, 0x70, 0x6d, 0x58, 0x31, 0x36, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x69, 0x6e, 0x5f,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x77, 0x69,
	0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x65, 0x73, 0x74, 0x5f,
	0x77, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x62, 0x65, 0x73, 0x74, 0x57, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x12,
	0x21, 0x0a, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x64, 0x22, 0x6c, 0x0a, 0x18, 0x43, 0x4d, 0x73, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x50,
	0x0a, 0x14, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64,
	0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x12, 0x74, 0x69,
	0x6d, 0x65, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x22, 0xbf, 0x01, 0x0a, 0x25, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x4f, 0x75, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41,
	0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x57, 0x61, 0x69, 0x74,
	0x65, 0x64, 0x22, 0xc1, 0x01, 0x0a, 0x26, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x4f, 0x75, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a,
	0x12, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x61, 0x6e,
	0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65,
	0x52, 0x11, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x61, 0x6e,
	0x74, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x0f, 0x61, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x5f, 0x73,
	0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61,
	0x6c, 0x73, 0x65, 0x52, 0x0e, 0x61, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x53, 0x69, 0x67, 0x6e,
	0x6f, 0x75, 0x74, 0x12, 0x31, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x64, 0x65, 0x6c,
	0x61, 0x79, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x3a, 0x01, 0x30, 0x52, 0x11, 0x72, 0x65, 0x74, 0x72, 0x79, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0xda, 0x01, 0x0a, 0x21, 0x43, 0x4d, 0x73, 0x67, 0x47,
	0x61, 0x6d, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x4f, 0x75, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x08,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x45, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x3a, 0x0d, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x52, 0x07, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0x9c, 0x0e, 0x0a, 0x1c, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41,
	0x4c, 0x69, 0x76, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x6c, 0x74, 0x76, 0x5f, 0x64, 0x65, 0x6c, 0x61,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x68, 0x6c, 0x74, 0x76, 0x44, 0x65, 0x6c,
	0x61, 0x79, 0x12, 0x44, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x44, 0x4f, 0x54, 0x41, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x08,
	0x74, 0x65, 0x61, 0x6d, 0x47, 0x6f, 0x6f, 0x64, 0x12, 0x42, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x62, 0x61, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x64, 0x6f, 0x74,
	0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x54,
	0x65, 0x61, 0x6d, 0x52, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x42, 0x61, 0x64, 0x12, 0x30, 0x0a, 0x14,
	0x72, 0x6f, 0x73, 0x68, 0x61, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x61, 0x77, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x72, 0x6f, 0x73, 0x68,
	0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x61, 0x77, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x1b,
	0x0a, 0x09, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x1a, 0xf9, 0x0a, 0x0a, 0x04, 0x54, 0x65, 0x61, 0x6d, 0x12,
	0x48, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41,
	0x4c, 0x69, 0x76, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x62, 0x61, 0x72, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x62, 0x61, 0x72, 0x72, 0x61, 0x63,
	0x6b, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x65, 0x72, 0x6f, 0x5f,
	0x70, 0x69, 0x63, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x68, 0x65, 0x72,
	0x6f, 0x50, 0x69, 0x63, 0x6b, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x62,
	0x61, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x68, 0x65, 0x72, 0x6f, 0x42,
	0x61, 0x6e, 0x73, 0x1a, 0x8c, 0x09, 0x0a, 0x06, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x1f,
	0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x65, 0x72, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x68, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x64, 0x65, 0x61, 0x74, 0x68, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x65,
	0x61, 0x74, 0x68, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x68, 0x69, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x48, 0x69, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64,
	0x65, 0x6e, 0x69, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x65, 0x6e,
	0x69, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x67, 0x6f, 0x6c, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x20, 0x0a,
	0x0c, 0x67, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0a, 0x67, 0x6f, 0x6c, 0x64, 0x50, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x12,
	0x1c, 0x0a, 0x0a, 0x78, 0x70, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x08, 0x78, 0x70, 0x50, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x12, 0x87, 0x01,
	0x0a, 0x0e, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x44, 0x4f, 0x54, 0x41, 0x55, 0x6c, 0x74, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x1e, 0x6b, 0x5f, 0x45, 0x44, 0x4f, 0x54,
	0x41, 0x55, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4e, 0x6f,
	0x74, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x52, 0x0d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x75, 0x6c, 0x74, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x10, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6f, 0x6c,
	0x64, 0x6f, 0x77, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x30, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x30, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x31, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x31,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x32, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x32, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x33, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x33, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x34, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x34, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x35, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x35, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70,
	0x61, 0x77, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x72, 0x65, 0x73, 0x70, 0x61, 0x77, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x78, 0x18, 0x18, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x09, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x58, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x09, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x59, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65,
	0x74, 0x5f, 0x77, 0x6f, 0x72, 0x74, 0x68, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6e,
	0x65, 0x74, 0x57, 0x6f, 0x72, 0x74, 0x68, 0x12, 0x58, 0x0a, 0x09, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x64, 0x6f, 0x74,
	0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x54,
	0x65, 0x61, 0x6d, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x48, 0x65, 0x72, 0x6f, 0x41,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x09, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x1a, 0x51, 0x0a, 0x0b, 0x48, 0x65, 0x72, 0x6f, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x22, 0x9b, 0x01, 0x0a, 0x11, 0x44, 0x4f, 0x54, 0x41, 0x55, 0x6c, 0x74,
	0x69, 0x6d, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f,
	0x45, 0x44, 0x4f, 0x54, 0x41, 0x55, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x4e, 0x6f, 0x74, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x10, 0x00, 0x12, 0x20,
	0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x44, 0x4f, 0x54, 0x41, 0x55, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x10, 0x01,
	0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x44, 0x4f, 0x54, 0x41, 0x55, 0x6c, 0x74, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x65, 0x64, 0x73, 0x4d, 0x61, 0x6e,
	0x61, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x5f, 0x45, 0x44, 0x4f, 0x54, 0x41, 0x55, 0x6c,
	0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x61, 0x64, 0x79,
	0x10, 0x03, 0x22, 0x58, 0x0a, 0x1e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x22, 0xbd, 0x02, 0x0a,
	0x26, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x65, 0x78, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x78, 0x74, 0x43, 0x68, 0x61, 0x74, 0x12,
	0x2c, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x5f, 0x63, 0x68, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x70, 0x72, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x4e, 0x65, 0x77, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x65,
	0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69,
	0x73, 0x47, 0x75, 0x69, 0x64, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x22, 0x6d, 0x0a, 0x23,
	0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x0a, 0x72, 0x61, 0x6e, 0x6b,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x02, 0x10, 0x01,
	0x52, 0x09, 0x72, 0x61, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0xb1, 0x03, 0x0a, 0x2b,
	0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x07, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x64,
	0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a,
	0xad, 0x02, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x72, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x78,
	0x74, 0x43, 0x68, 0x61, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43,
	0x68, 0x61, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x61, 0x6e, 0x6b, 0x5f,
	0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x72, 0x61, 0x6e, 0x6b, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x4e, 0x65,
	0x77, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x67, 0x75,
	0x69, 0x64, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x69, 0x73, 0x47, 0x75, 0x69, 0x64, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x22,
	0x73, 0x0a, 0x1d, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x54, 0x6f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x12, 0x25, 0x0a, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x06, 0x52, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x4c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x62, 0x61, 0x6e, 0x64,
	0x6f, 0x6e, 0x65, 0x64, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x06, 0x52, 0x10, 0x61, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x65, 0x64, 0x4c, 0x6f, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x22, 0xd7, 0x02, 0x0a, 0x14, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54,
	0x6f, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x31, 0x0a,
	0x15, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x76, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x54, 0x76, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x41, 0x64, 0x64, 0x72,
	0x12, 0x33, 0x0a, 0x16, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x76, 0x5f, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x13, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x76, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x41, 0x64, 0x64, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x74, 0x76, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x76, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x67, 0x61, 0x6d, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x31, 0x0a, 0x15, 0x74, 0x76, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x06, 0x52, 0x12,
	0x74, 0x76, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x76, 0x5f,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x76, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x22, 0x46,
	0x0a, 0x1f, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x47, 0x43, 0x54, 0x6f, 0x4c, 0x41, 0x4e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x22, 0x1e, 0x0a, 0x1c, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43,
	0x54, 0x6f, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x37, 0x0a, 0x16, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43,
	0x42, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22,
	0xaa, 0x01, 0x0a, 0x17, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x42, 0x61, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6c, 0x6f, 0x77, 0x50, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x63,
	0x68, 0x61, 0x74, 0x5f, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x74, 0x65, 0x78, 0x74, 0x43, 0x68, 0x61, 0x74, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64,
	0x12, 0x2a, 0x0a, 0x11, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x62,
	0x61, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x22, 0xff, 0x03, 0x0a,
	0x17, 0x43, 0x4d, 0x73, 0x67, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x6b, 0x69, 0x6c, 0x6c,
	0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x07, 0x52, 0x0f, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6d, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52,
	0x0f, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x4a, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x44, 0x4f, 0x54, 0x41,
	0x5f, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x3a, 0x0e, 0x54, 0x45, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x5f, 0x42, 0x4c, 0x4f, 0x4f,
	0x44, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x74, 0x76, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x74, 0x76, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x74, 0x61, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x6f, 0x74, 0x61,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x61,
	0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x6f, 0x74, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x6f, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x6d,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61,
	0x6d, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x4b, 0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x77,
	0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x6c, 0x6f, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x6f, 0x73, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x3d, 0x0a, 0x0c, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x65, 0x73, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x49, 0x74, 0x65, 0x6d, 0x48, 0x65, 0x72, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x65, 0x52, 0x0b, 0x68, 0x65, 0x72, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x65, 0x73, 0x22, 0x96,
	0x01, 0x0a, 0x1f, 0x43, 0x4d, 0x73, 0x67, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x44, 0x4f,
	0x54, 0x41, 0x5f, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x3a, 0x0e, 0x54, 0x45, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x5f, 0x42, 0x4c,
	0x4f, 0x4f, 0x44, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27,
	0x0a, 0x0f, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x73, 0x5f, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x73,
	0x47, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x22, 0x2c, 0x0a, 0x0f, 0x43, 0x4d, 0x73, 0x67, 0x54,
	0x65, 0x61, 0x6d, 0x46, 0x61, 0x6e, 0x66, 0x61, 0x72, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x49, 0x64, 0x22, 0x6d, 0x0a, 0x17, 0x43, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x46, 0x61, 0x6e, 0x66, 0x61, 0x72, 0x65,
	0x12, 0x29, 0x0a, 0x10, 0x66, 0x61, 0x6e, 0x66, 0x61, 0x72, 0x65, 0x5f, 0x67, 0x6f, 0x6f, 0x64,
	0x67, 0x75, 0x79, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x66, 0x61, 0x6e, 0x66,
	0x61, 0x72, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x67, 0x75, 0x79, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x66,
	0x61, 0x6e, 0x66, 0x61, 0x72, 0x65, 0x5f, 0x62, 0x61, 0x64, 0x67, 0x75, 0x79, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x66, 0x61, 0x6e, 0x66, 0x61, 0x72, 0x65, 0x42, 0x61, 0x64,
	0x67, 0x75, 0x79, 0x73, 0x22, 0xa6, 0x01, 0x0a, 0x1c, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x61, 0x76,
	0x65, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x73, 0x61, 0x76, 0x65,
	0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x62, 0x62,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6c, 0x6f, 0x62, 0x62,
	0x79, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0e, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x73, 0x22, 0xc3, 0x01,
	0x0a, 0x1c, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x53, 0x61, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x51,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29,
	0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x53, 0x61, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a, 0x0e, 0x53, 0x61, 0x76, 0x65, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x50, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x0e, 0x53,
	0x61, 0x76, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x10, 0x00, 0x12,
	0x13, 0x0a, 0x0f, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75,
	0x6e, 0x64, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x6f, 0x6f, 0x42, 0x69,
	0x67, 0x10, 0x03, 0x22, 0x34, 0x0a, 0x19, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x47, 0x61, 0x6d, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x73, 0x61, 0x76, 0x65, 0x49, 0x64, 0x22, 0x47, 0x0a, 0x1f, 0x43, 0x4d, 0x73,
	0x67, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x65, 0x74, 0x4c, 0x6f,
	0x61, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x24, 0x0a, 0x0e,
	0x73, 0x61, 0x76, 0x65, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x73, 0x61, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x22, 0x74, 0x0a, 0x21, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x44, 0x69, 0x72, 0x65, 0x74, 0x69, 0x64, 0x65, 0x50, 0x72,
	0x69, 0x7a, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x7a, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x69,
	0x7a, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73,
	0x74, 0x5f, 0x72, 0x6f, 0x73, 0x68, 0x61, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x52, 0x6f, 0x73,
	0x68, 0x61, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x84, 0x01, 0x0a, 0x29, 0x43, 0x4d, 0x73,
	0x67, 0x44, 0x4f, 0x54, 0x41, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x44, 0x69, 0x72,
	0x65, 0x74, 0x69, 0x64, 0x65, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x64,
	0x65, 0x66, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x44,
	0x65, 0x66, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x06, 0x52, 0x08, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x7a, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x69, 0x7a, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x51, 0x0a, 0x1c, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x44, 0x69, 0x72, 0x65, 0x74, 0x69, 0x64, 0x65, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74,
	0x65, 0x61, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x7a, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x69, 0x7a, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x47, 0x0a, 0x26, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x44, 0x69,
	0x72, 0x65, 0x74, 0x69, 0x64, 0x65, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x73, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x69, 0x7a, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x70, 0x72, 0x69, 0x7a, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xa8, 0x04, 0x0a, 0x18,
	0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x41, 0x77, 0x61, 0x72, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x4d, 0x0a, 0x0c, 0x61, 0x77, 0x61, 0x72,
	0x64, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x41, 0x77,
	0x61, 0x72, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41,
	0x77, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x0b, 0x61, 0x77, 0x61, 0x72,
	0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x64, 0x12, 0x36, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x45, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x3a, 0x0d, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x4e,
	0x45, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xa8, 0x02, 0x0a, 0x0b,
	0x41, 0x77, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x5f, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x6d,
	0x69, 0x75, 0x6d, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x5f, 0x62, 0x61, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x65, 0x42, 0x61, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x4e, 0x0a, 0x20, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x5f,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x5f, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65,
	0x52, 0x1d, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x69, 0x63, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x45, 0x0a, 0x1e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x70, 0x5f, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x1a, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x43, 0x61, 0x70, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x22, 0xc2, 0x02, 0x0a, 0x29, 0x43, 0x4d, 0x73, 0x67, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x43, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74,
	0x41, 0x77, 0x61, 0x72, 0x64, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44,
	0x72, 0x6f, 0x70, 0x73, 0x12, 0x55, 0x0a, 0x05, 0x64, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x43, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74,
	0x41, 0x77, 0x61, 0x72, 0x64, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44,
	0x72, 0x6f, 0x70, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44,
	0x72, 0x6f, 0x70, 0x73, 0x52, 0x05, 0x64, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x1a, 0xa2, 0x01, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f,
	0x6f, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c,
	0x6f, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x10, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6e, 0x6f, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x12, 0x29, 0x0a, 0x10, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x5f, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x72, 0x61, 0x6e, 0x64,
	0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x22, 0xdf, 0x01, 0x0a, 0x1c,
	0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x46, 0x72, 0x6f, 0x73, 0x74, 0x69, 0x76, 0x75,
	0x73, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x3d, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x44, 0x4f, 0x54, 0x41, 0x46, 0x72, 0x6f, 0x73, 0x74, 0x69, 0x76, 0x75, 0x73, 0x54, 0x69,
	0x6d, 0x65, 0x45, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64,
	0x1a, 0x4b, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x53, 0x22, 0x5d, 0x0a,
	0x19, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x78, 0x0a, 0x1a,
	0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x22, 0x47, 0x0a, 0x1c, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43,
	0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c,
	0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x22,
	0x71, 0x0a, 0x18, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x65, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x08, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x64, 0x6f, 0x74, 0x61, 0x2e, 0x45, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x3a, 0x0d, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x22, 0x83, 0x02, 0x0a, 0x20, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x64, 0x6f, 0x74, 0x61,
	0x2e, 0x45, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x3a, 0x0d, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x49,
	0x44, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x45, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x06,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x1a, 0x60, 0x0a, 0x06, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x22, 0xb7, 0x02, 0x0a, 0x1f, 0x43, 0x4d, 0x73,
	0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x53, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x07,
	0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47,
	0x72, 0x61, 0x6e, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x07, 0x73, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x73, 0x1a, 0xcb, 0x01, 0x0a, 0x06, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x4b, 0x65, 0x79, 0x12,
	0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x22,
	0x0a, 0x0d, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x33, 0x32, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61,
	0x33, 0x32, 0x22, 0x41, 0x0a, 0x27, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x47, 0x72, 0x61, 0x6e, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xa8, 0x03, 0x0a, 0x22, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x43, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49,
	0x64, 0x12, 0x49, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x43, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x1a, 0xc2, 0x01, 0x0a, 0x06,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x07, 0x52, 0x02, 0x69, 0x70, 0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x76, 0x67, 0x5f, 0x70, 0x69, 0x6e,
	0x67, 0x5f, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x76, 0x67, 0x50,
	0x69, 0x6e, 0x67, 0x4d, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f,
	0x6c, 0x6f, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x64,
	0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d,
	0x70, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a,
	0x0c, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x66, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x73,
	0x22, 0x4b, 0x0a, 0x20, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x43,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xbe, 0x02,
	0x0a, 0x14, 0x43, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x43, 0x6f, 0x6d,
	0x62, 0x61, 0x74, 0x4c, 0x6f, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x45, 0x0a, 0x0a, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x53, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x4c, 0x6f, 0x67,
	0x2e, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x0a, 0x64, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x36, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x4c, 0x6f,
	0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x1a,
	0x8c, 0x01, 0x0a, 0x0a, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x4a,
	0x0a, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x4c, 0x6f, 0x67, 0x2e, 0x44, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x44, 0x69, 0x63, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0x32, 0x0a, 0x0a, 0x44, 0x69,
	0x63, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x44,
	0x0a, 0x21, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x43,
	0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x71, 0x75,
	0x69, 0x70, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x73, 0x22, 0xe2, 0x01, 0x0a, 0x29, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x71, 0x75, 0x69, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x53, 0x0a, 0x06, 0x65, 0x71, 0x75, 0x69, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x71, 0x75, 0x69, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x43, 0x55, 0x73, 0x65, 0x72, 0x45, 0x71, 0x75, 0x69, 0x70, 0x73, 0x52,
	0x06, 0x65, 0x71, 0x75, 0x69, 0x70, 0x73, 0x1a, 0x60, 0x0a, 0x0b, 0x43, 0x55, 0x73, 0x65, 0x72,
	0x45, 0x71, 0x75, 0x69, 0x70, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x06, 0x65, 0x71, 0x75, 0x69, 0x70, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x41, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x71, 0x75, 0x69, 0x70, 0x53, 0x6c, 0x6f,
	0x74, 0x52, 0x06, 0x65, 0x71, 0x75, 0x69, 0x70, 0x73, 0x22, 0x3f, 0x0a, 0x1c, 0x43, 0x4d, 0x73,
	0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x22, 0x57, 0x0a, 0x24, 0x43, 0x4d,
	0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54,
	0x41, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x61, 0x72, 0x64, 0x52, 0x05, 0x63, 0x61,
	0x72, 0x64, 0x73, 0x22, 0xc8, 0x01, 0x0a, 0x20, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x54, 0x6f, 0x47, 0x43, 0x56, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x47, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x64, 0x6f, 0x74, 0x61,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x43, 0x56,
	0x69, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x1a, 0x5b, 0x0a, 0x06, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x69, 0x74, 0x65,
	0x6d, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x04, 0x52, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x73, 0x22, 0xe7,
	0x01, 0x0a, 0x16, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x75, 0x73, 0x70, 0x69, 0x63, 0x69, 0x6f, 0x75,
	0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x62, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x64, 0x6f, 0x74,
	0x61, 0x2e, 0x45, 0x53, 0x75, 0x73, 0x70, 0x69, 0x63, 0x69, 0x6f, 0x75, 0x73, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x3a, 0x2b, 0x6b, 0x5f, 0x45, 0x53, 0x75, 0x73, 0x70, 0x69, 0x63,
	0x69, 0x6f, 0x75, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x56, 0x41, 0x43,
	0x5f, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x6e, 0x74, 0x64, 0x61, 0x74, 0x61, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08,
	0x69, 0x6e, 0x74, 0x64, 0x61, 0x74, 0x61, 0x31, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x64,
	0x61, 0x74, 0x61, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x64,
	0x61, 0x74, 0x61, 0x32, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x1d, 0x0a, 0x1b, 0x43, 0x4d, 0x73, 0x67,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x42, 0x0a, 0x24, 0x43, 0x4d, 0x73, 0x67, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe8, 0x02, 0x0a, 0x1f,
	0x43, 0x4d, 0x73, 0x67, 0x53, 0x69, 0x67, 0x6e, 0x4f, 0x75, 0x74, 0x41, 0x73, 0x73, 0x61, 0x73,
	0x73, 0x69, 0x6e, 0x4d, 0x69, 0x6e, 0x69, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x27, 0x0a, 0x0f, 0x77, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x06, 0x52, 0x0e, 0x77, 0x69, 0x6e, 0x6e, 0x69, 0x6e,
	0x67, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x6f, 0x73, 0x69,
	0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x06,
	0x52, 0x0d, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x61, 0x72, 0x63, 0x61, 0x6e, 0x61, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x06, 0x52, 0x0c, 0x61, 0x72, 0x63, 0x61, 0x6e, 0x61, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x73, 0x73, 0x61, 0x73, 0x73, 0x69, 0x6e,
	0x5f, 0x77, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x61, 0x73, 0x73, 0x61,
	0x73, 0x73, 0x69, 0x6e, 0x57, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x48, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x12, 0x2d, 0x0a,
	0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x16,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x61, 0x5f, 0x69, 0x73, 0x5f, 0x72, 0x61, 0x64, 0x69,
	0x61, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x70, 0x61, 0x49, 0x73, 0x52,
	0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x22, 0x55, 0x0a, 0x20, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x67, 0x61, 0x6d,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x31, 0x0a, 0x05, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x64, 0x6f, 0x74, 0x61,
	0x2e, 0x45, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x3a, 0x0d, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x49,
	0x44, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x4f, 0x0a,
	0x25, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49,
	0x6e, 0x67, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4f, 0x72,
	0x61, 0x63, 0x6c, 0x65, 0x50, 0x41, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x48, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x73, 0x22, 0x8b,
	0x02, 0x0a, 0x1b, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x47,
	0x43, 0x4b, 0x69, 0x6c, 0x6c, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x12, 0x25,
	0x0a, 0x0e, 0x69, 0x6e, 0x67, 0x61, 0x6d, 0x65, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x69, 0x6e, 0x67, 0x61, 0x6d, 0x65, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x09, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x43, 0x4b, 0x69,
	0x6c, 0x6c, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x4b, 0x69, 0x6c, 0x6c,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x09, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69,
	0x65, 0x73, 0x1a, 0x78, 0x0a, 0x0b, 0x4b, 0x69, 0x6c, 0x6c, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x12, 0x24, 0x0a, 0x0e, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x68, 0x65, 0x72, 0x6f,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6b, 0x69, 0x6c, 0x6c, 0x65,
	0x72, 0x48, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x76, 0x69, 0x63, 0x74, 0x69,
	0x6d, 0x5f, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6d, 0x48, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x82, 0x04, 0x0a,
	0x1e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x72,
	0x72, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x6f, 0x72, 0x72,
	0x65, 0x63, 0x74, 0x12, 0x51, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x50,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xb8, 0x02, 0x0a, 0x0a, 0x50, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x64, 0x65,
	0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x66,
	0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6e, 0x75, 0x6d, 0x46, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x66,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37,
	0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x45, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a, 0x15, 0x6b, 0x5f, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x5f, 0x49, 0x74, 0x65, 0x6d, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65,
	0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x64, 0x65, 0x66, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x0f, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x65,
	0x66, 0x73, 0x22, 0x3d, 0x0a, 0x07, 0x45, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x19, 0x0a,
	0x15, 0x6b, 0x5f, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x49, 0x74, 0x65, 0x6d, 0x47,
	0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x6b, 0x5f, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x65, 0x64, 0x10,
	0x02, 0x22, 0x58, 0x0a, 0x1e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54,
	0x6f, 0x47, 0x43, 0x4c, 0x6f, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x72, 0x6d, 0x54, 0x72, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x22, 0xd6, 0x03, 0x0a, 0x20,
	0x43, 0x4d, 0x73, 0x67, 0x53, 0x69, 0x67, 0x6e, 0x4f, 0x75, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x4e, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x69,
	0x67, 0x6e, 0x4f, 0x75, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12,
	0x4c, 0x0a, 0x08, 0x72, 0x65, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x69, 0x67,
	0x6e, 0x4f, 0x75, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x52, 0x08, 0x72, 0x65, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x65, 0x72, 0x6f,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x72, 0x6f, 0x49,
	0x64, 0x1a, 0xc0, 0x01, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12,
	0x36, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x45, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x3a,
	0x0d, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x52, 0x07,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6c, 0x6f, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a,
	0x0e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x52, 0x61, 0x6e, 0x6b, 0x22, 0x8e, 0x01, 0x0a, 0x23, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x43, 0x52, 0x65, 0x72, 0x6f, 0x6c, 0x6c, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x0a, 0x72,
	0x65, 0x72, 0x6f, 0x6c, 0x6c, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x47, 0x43, 0x52, 0x65, 0x72, 0x6f, 0x6c, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x72, 0x65, 0x72, 0x6f,
	0x6c, 0x6c, 0x4d, 0x73, 0x67, 0x22, 0x85, 0x02, 0x0a, 0x15, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x69,
	0x67, 0x6e, 0x4f, 0x75, 0x74, 0x57, 0x61, 0x67, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12,
	0x3c, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x69, 0x67, 0x6e,
	0x4f, 0x75, 0x74, 0x57, 0x61, 0x67, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x36, 0x0a,
	0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x45, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x3a, 0x0d, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x52, 0x07, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x1a, 0x76, 0x0a, 0x06, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x77, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x77, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61,
	0x78, 0x5f, 0x77, 0x61, 0x67, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d,
	0x61, 0x78, 0x57, 0x61, 0x67, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x61, 0x67, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x77, 0x61, 0x67, 0x65, 0x72, 0x22, 0xce, 0x02,
	0x0a, 0x0e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x57, 0x61, 0x67, 0x65, 0x72,
	0x12, 0x35, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x70, 0x65,
	0x6e, 0x64, 0x57, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x07,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x36, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x64, 0x6f, 0x74, 0x61,
	0x2e, 0x45, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x3a, 0x0d, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x49,
	0x44, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x19, 0x0a,
	0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64,
	0x1a, 0x6c, 0x0a, 0x06, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x61, 0x67,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x77, 0x61, 0x67, 0x65, 0x72, 0x12,
	0x2d, 0x0a, 0x13, 0x77, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x77, 0x61,
	0x67, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x22, 0x99,
	0x03, 0x0a, 0x12, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x69, 0x67, 0x6e, 0x4f, 0x75, 0x74, 0x58, 0x50,
	0x43, 0x6f, 0x69, 0x6e, 0x73, 0x12, 0x39, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x53, 0x69, 0x67, 0x6e, 0x4f, 0x75, 0x74, 0x58, 0x50, 0x43, 0x6f, 0x69, 0x6e, 0x73,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73,
	0x12, 0x36, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x45, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x3a, 0x0d, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x52,
	0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x1a, 0xd6, 0x01, 0x0a, 0x06, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x78,
	0x70, 0x5f, 0x67, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x78, 0x70, 0x47, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x69, 0x6e,
	0x73, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63,
	0x6f, 0x69, 0x6e, 0x73, 0x53, 0x70, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x13, 0x77, 0x61, 0x67,
	0x65, 0x72, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x77, 0x61, 0x67, 0x65, 0x72, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x61, 0x6e, 0x6b,
	0x5f, 0x77, 0x61, 0x67, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x61,
	0x6e, 0x6b, 0x57, 0x61, 0x67, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x67, 0x65, 0x72,
	0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x77,
	0x61, 0x67, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x22, 0xd9, 0x02, 0x0a, 0x13, 0x43,
	0x4d, 0x73, 0x67, 0x53, 0x69, 0x67, 0x6e, 0x4f, 0x75, 0x74, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69,
	0x65, 0x73, 0x12, 0x3c, 0x0a, 0x08, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x53, 0x69, 0x67, 0x6e, 0x4f, 0x75, 0x74, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x2e,
	0x42, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x52, 0x08, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73,
	0x12, 0x36, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x45, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x3a, 0x0d, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x52,
	0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x1a, 0x92, 0x01, 0x0a, 0x06, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x12, 0x2a, 0x0a, 0x11,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xa5, 0x02, 0x0a, 0x20, 0x43, 0x4d, 0x73, 0x67, 0x53,
	0x69, 0x67, 0x6e, 0x4f, 0x75, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x47,
	0x6f, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x36, 0x0a, 0x08, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x64, 0x6f, 0x74, 0x61, 0x2e, 0x45, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x3a, 0x0d, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x64, 0x0a, 0x10, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e,
	0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x69, 0x67, 0x6e, 0x4f, 0x75, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x47, 0x6f, 0x61, 0x6c, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x47, 0x6f, 0x61, 0x6c, 0x49,
	0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x63, 0x0a, 0x12, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x47, 0x6f, 0x61, 0x6c, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x22, 0x0a, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x6f, 0x61, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x47, 0x6f, 0x61,
	0x6c, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x69,
	0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xec,
	0x01, 0x0a, 0x1a, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x47,
	0x43, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x70, 0x12, 0x36, 0x0a,
	0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x45, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x3a, 0x0d, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x52, 0x07, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64,
	0x12, 0x2a, 0x0a, 0x11, 0x74, 0x69, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x69, 0x70,
	0x70, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14,
	0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x72, 0x65, 0x63, 0x69,
	0x70, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x74, 0x69, 0x70, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x70, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x93, 0x02,
	0x0a, 0x22, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x43,
	0x50, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12,
	0x2a, 0x0a, 0x11, 0x74, 0x69, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x69, 0x70, 0x70,
	0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x72,
	0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x72, 0x65, 0x63, 0x69, 0x70,
	0x69, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x50, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e,
	0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54,
	0x6f, 0x47, 0x43, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a, 0x07,
	0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x22, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52,
	0x45, 0x10, 0x01, 0x22, 0x6f, 0x0a, 0x33, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x54, 0x6f, 0x47, 0x43, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e,
	0x64, 0x69, 0x75, 0x6d, 0x49, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x6c, 0x74, 0x76, 0x5f, 0x64, 0x65,
	0x6c, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x68, 0x6c, 0x74, 0x76, 0x44,
	0x65, 0x6c, 0x61, 0x79, 0x22, 0x55, 0x0a, 0x3b, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x54, 0x6f, 0x47, 0x43, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x65,
	0x6e, 0x64, 0x69, 0x75, 0x6d, 0x49, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x8f, 0x03, 0x0a, 0x2f,
	0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x43, 0x43, 0x6f,
	0x6d, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x75, 0x6d, 0x49, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12,
	0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x60, 0x0a, 0x07, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x64, 0x6f,
	0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x47,
	0x43, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x75, 0x6d, 0x49, 0x6e, 0x47, 0x61, 0x6d,
	0x65, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x65, 0x61,
	0x67, 0x75, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x1a,
	0x9b, 0x01, 0x0a, 0x10, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x69, 0x73, 0x5f, 0x6d, 0x61, 0x73, 0x6b,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x73, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x51, 0x0a,
	0x37, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x43, 0x43,
	0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x75, 0x6d, 0x49, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x50,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x7e, 0x0a, 0x2b, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x47, 0x43, 0x43, 0x6f,
	0x6d, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x75, 0x6d, 0x49, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12,
	0x4f, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x35, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x54, 0x6f, 0x47, 0x43, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x75, 0x6d,
	0x49, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x22, 0x8f, 0x05, 0x0a, 0x2c, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54,
	0x6f, 0x47, 0x43, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x74,
	0x65, 0x6d, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x6d, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x6d, 0x72, 0x12, 0x53,
	0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x39, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x54, 0x6f, 0x47, 0x43, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x49, 0x74, 0x65, 0x6d, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x73, 0x1a, 0xc2, 0x01, 0x0a, 0x0c, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x6f, 0x6c, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x67, 0x6f, 0x6c, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x6e, 0x65, 0x74, 0x5f, 0x77, 0x6f, 0x72, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x6e, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x67, 0x61,
	0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x0e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12,
	0x27, 0x0a, 0x0f, 0x74, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x65, 0x64, 0x18, 0x07, 0x20, 0x03, 0x28, 0x08, 0x52, 0x0e, 0x74, 0x61, 0x6c, 0x65, 0x6e, 0x74,
	0x73, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x1a, 0x97, 0x02, 0x0a, 0x06, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x6c,
	0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x53, 0x6c, 0x6f, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f,
	0x61, 0x6c, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x69, 0x65, 0x64, 0x48, 0x65, 0x72,
	0x6f, 0x49, 0x64, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x5f, 0x68, 0x65,
	0x72, 0x6f, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x65, 0x6e,
	0x65, 0x6d, 0x79, 0x48, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x73, 0x12, 0x66, 0x0a, 0x0e, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x43, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x52, 0x0d, 0x69, 0x74, 0x65, 0x6d, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x73, 0x22, 0xf1, 0x08, 0x0a, 0x1f, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x54, 0x6f, 0x47, 0x43, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x77, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x57,
	0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x6d, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x6d, 0x6d, 0x72, 0x12, 0x53, 0x0a, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x64, 0x6f, 0x74,
	0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x43,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x1a, 0x8d, 0x02, 0x0a, 0x0b, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x65, 0x72,
	0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x72, 0x6f,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x74, 0x5f, 0x77, 0x6f, 0x72, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6e, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x74, 0x68, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x61, 0x74, 0x68, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x65, 0x61, 0x74, 0x68, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x72, 0x65, 0x73, 0x70, 0x61, 0x77, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x70, 0x61, 0x77, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x5f, 0x62, 0x75, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x68, 0x61, 0x73, 0x42, 0x75, 0x79, 0x62, 0x61, 0x63,
	0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x61, 0x73, 0x5f, 0x61, 0x65, 0x67, 0x69, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x68, 0x61, 0x73, 0x41, 0x65, 0x67, 0x69, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x68, 0x61, 0x73, 0x5f, 0x72, 0x61, 0x70, 0x69, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x68, 0x61, 0x73, 0x52, 0x61, 0x70, 0x69, 0x65, 0x72, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x1a, 0xc8, 0x03, 0x0a, 0x09, 0x54, 0x65,
	0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x12, 0x56, 0x0a, 0x0d, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x43, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0e, 0x74,
	0x6f, 0x77, 0x65, 0x72, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x50, 0x63, 0x74, 0x12, 0x2e, 0x0a,
	0x13, 0x62, 0x61, 0x72, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x5f, 0x70, 0x63, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x11, 0x62, 0x61, 0x72, 0x72,
	0x61, 0x63, 0x6b, 0x73, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x50, 0x63, 0x74, 0x12, 0x2c, 0x0a,
	0x12, 0x61, 0x6e, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f,
	0x70, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x61, 0x6e, 0x63, 0x69, 0x65,
	0x6e, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x50, 0x63, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x67,
	0x6c, 0x79, 0x70, 0x68, 0x5f, 0x63, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x43, 0x6f, 0x6f, 0x6c, 0x64, 0x6f,
	0x77, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x72, 0x65, 0x65,
	0x70, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x61, 0x66, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x63, 0x72, 0x65, 0x65, 0x70, 0x44, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x53, 0x61, 0x66, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x65,
	0x70, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x69, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x63, 0x72, 0x65, 0x65, 0x70, 0x44, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x4d, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x65, 0x70, 0x5f,
	0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x63, 0x72, 0x65, 0x65, 0x70, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x4f, 0x66, 0x66, 0x1a, 0xcf, 0x01, 0x0a, 0x0a, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x54, 0x0a, 0x0d, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x43, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x54,
	0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4e, 0x0a, 0x0a, 0x64, 0x69, 0x72, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x64, 0x6f, 0x74,
	0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x43,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x09, 0x64, 0x69, 0x72,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0xba, 0x01, 0x0a, 0x25, 0x43, 0x4d, 0x73, 0x67, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x43, 0x43, 0x61, 0x76, 0x65, 0x72, 0x6e, 0x43,
	0x72, 0x61, 0x77, 0x6c, 0x49, 0x73, 0x48, 0x65, 0x72, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61,
	0x70, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x6d, 0x61, 0x70, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x68,
	0x65, 0x72, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65,
	0x72, 0x6f, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x75, 0x72, 0x62, 0x6f, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x74, 0x75, 0x72, 0x62, 0x6f, 0x4d,
	0x6f, 0x64, 0x65, 0x22, 0xfc, 0x02, 0x0a, 0x2d, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x54, 0x6f, 0x47, 0x43, 0x43, 0x61, 0x76, 0x65, 0x72, 0x6e, 0x43, 0x72, 0x61, 0x77,
	0x6c, 0x49, 0x73, 0x48, 0x65, 0x72, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2d, 0x0a,
	0x12, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x77, 0x69, 0x6e, 0x6e, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x70, 0x6f, 0x74, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x57, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x5f, 0x0a, 0x0b,
	0x6d, 0x61, 0x70, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3e, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x43, 0x43, 0x61, 0x76, 0x65, 0x72, 0x6e, 0x43, 0x72, 0x61,
	0x77, 0x6c, 0x49, 0x73, 0x48, 0x65, 0x72, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x52, 0x0a, 0x6d, 0x61, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x41, 0x0a,
	0x1d, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x70, 0x6c, 0x75, 0x73, 0x5f,
	0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x77, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x50,
	0x6c, 0x75, 0x73, 0x53, 0x68, 0x61, 0x72, 0x64, 0x57, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73,
	0x1a, 0x60, 0x0a, 0x0a, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x2a,
	0x0a, 0x11, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x61, 0x74, 0x68, 0x49,
	0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x6f,
	0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x43, 0x6c, 0x61, 0x69, 0x6d,
	0x65, 0x64, 0x22, 0x4b, 0x0a, 0x20, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x74, 0x6f, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22,
	0xe5, 0x0e, 0x0a, 0x15, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x41, 0x0a, 0x07, 0x6d, 0x69, 0x6e,
	0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x64, 0x6f, 0x74,
	0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x47, 0x61,
	0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x0b,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x44, 0x0a, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x64, 0x6f, 0x74, 0x61,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x47, 0x61, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x52, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x1a, 0x8d, 0x0a, 0x0a, 0x0f,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x2a, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x5f,
	0x67, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x45, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x64, 0x70, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x44, 0x70, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x5f, 0x64, 0x70, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x44, 0x70, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x61,
	0x6d, 0x61, 0x67, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x62, 0x61, 0x73, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x1d,
	0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x61, 0x6e, 0x61, 0x12, 0x4a, 0x0a,
	0x22, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x64,
	0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x70, 0x63, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1e, 0x62, 0x61, 0x73, 0x65, 0x50,
	0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x64,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x63, 0x74, 0x12, 0x4c, 0x0a, 0x23, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x63, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x68, 0x79,
	0x73, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x64, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x63, 0x74, 0x12, 0x48, 0x0a, 0x21, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x72,
	0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x1d, 0x62, 0x61, 0x73, 0x65, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x44,
	0x61, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x63,
	0x74, 0x12, 0x4a, 0x0a, 0x22, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1e, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x61, 0x6d, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x63, 0x74, 0x12, 0x30, 0x0a,
	0x14, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12,
	0x32, 0x0a, 0x15, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13,
	0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x6e, 0x61, 0x5f, 0x72, 0x65, 0x67, 0x65,
	0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x52, 0x65, 0x67,
	0x65, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x67,
	0x65, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x52, 0x65, 0x67, 0x65, 0x6e, 0x12, 0x33, 0x0a, 0x16, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61,
	0x6c, 0x5f, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x5f, 0x64, 0x6d, 0x67, 0x5f, 0x70, 0x63, 0x74, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x4d,
	0x61, 0x67, 0x69, 0x63, 0x44, 0x6d, 0x67, 0x50, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x69,
	0x6c, 0x6c, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x61, 0x74, 0x68, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x64, 0x65, 0x61, 0x74, 0x68, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x69,
	0x73, 0x74, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x61, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x67, 0x6f, 0x6c, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x67, 0x6f, 0x6c,
	0x64, 0x46, 0x72, 0x6f, 0x6d, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x6f,
	0x6c, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x72, 0x65, 0x65, 0x70, 0x73, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x67, 0x6f, 0x6c, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x72,
	0x65, 0x65, 0x70, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x6f, 0x6c, 0x64, 0x5f, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x67, 0x6f, 0x6c, 0x64, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x78, 0x70, 0x5f, 0x66, 0x72, 0x6f, 0x6d,
	0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x78, 0x70,
	0x46, 0x72, 0x6f, 0x6d, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x78, 0x70, 0x5f,
	0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x72, 0x65, 0x65, 0x70, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x78, 0x70, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x72, 0x65, 0x65, 0x70, 0x73, 0x12,
	0x19, 0x0a, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x78, 0x70, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x58, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x61, 0x73, 0x74, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x61, 0x73, 0x74, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x61, 0x73, 0x74, 0x73, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x43, 0x61, 0x73, 0x74, 0x73, 0x12, 0x2c,
	0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x75,
	0x6e, 0x6e, 0x65, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x98, 0x01, 0x0a, 0x09,
	0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x74, 0x6f, 0x77,
	0x65, 0x72, 0x5f, 0x64, 0x65, 0x61, 0x74, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x31,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x44, 0x65, 0x61,
	0x74, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x31, 0x12, 0x2d, 0x0a, 0x13, 0x74, 0x6f, 0x77, 0x65,
	0x72, 0x5f, 0x64, 0x65, 0x61, 0x74, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x32, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x44, 0x65, 0x61, 0x74,
	0x68, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x32, 0x12, 0x2d, 0x0a, 0x13, 0x74, 0x6f, 0x77, 0x65, 0x72,
	0x5f, 0x64, 0x65, 0x61, 0x74, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x33, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x44, 0x65, 0x61, 0x74, 0x68,
	0x54, 0x69, 0x6d, 0x65, 0x54, 0x33, 0x1a, 0x68, 0x0a, 0x0b, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x12, 0x41, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x64,
	0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x1a, 0x65, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x68, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x22, 0x80, 0x06, 0x0a, 0x10, 0x43, 0x4d, 0x73, 0x67,
	0x41, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x45, 0x0a, 0x0c,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x41, 0x6c,
	0x6c, 0x53, 0x74, 0x61, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x1a, 0xa4, 0x05, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x0a, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x12,
	0x26, 0x0a, 0x0f, 0x6e, 0x75, 0x6d, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x6b, 0x69, 0x6c,
	0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x6b, 0x69, 0x6c, 0x6c, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6b, 0x5f, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x45, 0x6e, 0x64,
	0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x6f, 0x73, 0x68, 0x61, 0x6e, 0x5f, 0x6b, 0x69, 0x6c,
	0x6c, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x6f, 0x73, 0x68, 0x61, 0x6e,
	0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x62,
	0x6c, 0x6f, 0x6f, 0x64, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x75, 0x72,
	0x69, 0x65, 0x72, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x63, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x74, 0x61, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x54, 0x61, 0x75, 0x6e, 0x74, 0x12,
	0x26, 0x0a, 0x0f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x66, 0x69,
	0x76, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x66, 0x69, 0x72, 0x73, 0x74, 0x48,
	0x69, 0x67, 0x68, 0x46, 0x69, 0x76, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x5f, 0x63, 0x65, 0x62, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x43, 0x65, 0x62, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x74, 0x69,
	0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x66, 0x69, 0x72, 0x73, 0x74, 0x54, 0x69,
	0x70, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x72, 0x61, 0x70, 0x69, 0x65,
	0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x66, 0x69, 0x72, 0x73, 0x74, 0x52, 0x61,
	0x70, 0x69, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x61, 0x65,
	0x67, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x6e, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x41, 0x65, 0x67, 0x69, 0x73, 0x44, 0x65, 0x6e, 0x79, 0x12, 0x1e,
	0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x69, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x6f, 0x44, 0x69, 0x65, 0x12, 0x22,
	0x0a, 0x0d, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x77, 0x69, 0x70, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x66, 0x69, 0x72, 0x73, 0x74, 0x54, 0x6f, 0x57, 0x69,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x61, 0x74,
	0x68, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x65, 0x61, 0x74, 0x68, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x22, 0xd0, 0x02, 0x0a, 0x14, 0x43,
	0x4d, 0x73, 0x67, 0x4e, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x12, 0x4b, 0x0a, 0x0d, 0x6e, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x64, 0x6f, 0x74,
	0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4e, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x49, 0x74, 0x65,
	0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x4e, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x0c, 0x6e, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x73,
	0x1a, 0xea, 0x01, 0x0a, 0x0b, 0x4e, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x74, 0x69, 0x6d, 0x65, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x65, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x65, 0x61, 0x6d,
	0x12, 0x2c, 0x0a, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x71,
	0x75, 0x69, 0x70, 0x70, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x74, 0x69,
	0x6d, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x70, 0x65, 0x64, 0x12, 0x30,
	0x0a, 0x14, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x6e, 0x65, 0x71,
	0x75, 0x69, 0x70, 0x70, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x74, 0x69,
	0x6d, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x6e, 0x65, 0x71, 0x75, 0x69, 0x70, 0x70, 0x65, 0x64,
	0x12, 0x2b, 0x0a, 0x11, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x71, 0x75,
	0x69, 0x70, 0x70, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x70, 0x65, 0x64, 0x22, 0xd5, 0x01,
	0x0a, 0x1f, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x4c, 0x6f, 0x62, 0x62, 0x79, 0x48, 0x65, 0x72, 0x6f, 0x42, 0x61, 0x6e, 0x52, 0x61, 0x74, 0x65,
	0x73, 0x12, 0x4d, 0x0a, 0x08, 0x62, 0x61, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47,
	0x43, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x48, 0x65,
	0x72, 0x6f, 0x42, 0x61, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x48, 0x65, 0x72, 0x6f, 0x42,
	0x61, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x62, 0x61, 0x6e, 0x44, 0x61, 0x74, 0x61,
	0x1a, 0x63, 0x0a, 0x0c, 0x48, 0x65, 0x72, 0x6f, 0x42, 0x61, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x17, 0x0a, 0x07, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x68, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x6e,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x62, 0x61,
	0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x69, 0x63, 0x6b, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x69, 0x63, 0x6b,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa0, 0x03, 0x0a, 0x20, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x69,
	0x67, 0x6e, 0x4f, 0x75, 0x74, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x60, 0x0a, 0x10, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x53, 0x69, 0x67, 0x6e, 0x4f, 0x75, 0x74, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x0f, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x1a, 0x72, 0x0a, 0x1c,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08,
	0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73,
	0x1a, 0xa5, 0x01, 0x0a, 0x0e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x74, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x43, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x69, 0x67, 0x6e, 0x4f,
	0x75, 0x74, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x73, 0x52, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x22, 0xe5, 0x03, 0x0a, 0x21, 0x43, 0x4d, 0x73,
	0x67, 0x53, 0x69, 0x67, 0x6e, 0x4f, 0x75, 0x74, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x79,
	0x0a, 0x1b, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53,
	0x69, 0x67, 0x6e, 0x4f, 0x75, 0x74, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x43, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x19,
	0x67, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x1a, 0xc4, 0x02, 0x0a, 0x11, 0x43, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x19, 0x0a, 0x08, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x1c, 0x63, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x1a, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x36, 0x0a, 0x17, 0x63,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x63, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x2f, 0x0a, 0x13, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x63, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x22, 0xef, 0x08, 0x0a, 0x13, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x69, 0x67, 0x6e, 0x4f, 0x75, 0x74,
	0x4d, 0x56, 0x50, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x77, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x65, 0x61, 0x6d,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x77, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x54,
	0x65, 0x61, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x3a, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x69, 0x67,
	0x6e, 0x4f, 0x75, 0x74, 0x4d, 0x56, 0x50, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x1a, 0xa3, 0x07, 0x0a,
	0x06, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64,
	0x12, 0x2c, 0x0a, 0x12, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x74,
	0x68, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x74, 0x65,
	0x61, 0x6d, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x74, 0x68, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x6c, 0x6f,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x72, 0x6f,
	0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x61, 0x74,
	0x68, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x64, 0x65, 0x61, 0x74, 0x68, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x78, 0x70,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x78, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65,
	0x74, 0x5f, 0x77, 0x6f, 0x72, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6e,
	0x65, 0x74, 0x57, 0x6f, 0x72, 0x74, 0x68, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x10, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x6f, 0x6c, 0x64,
	0x53, 0x70, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x77, 0x61, 0x72,
	0x64, 0x73, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x5f, 0x73, 0x70, 0x6f, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x64, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x53, 0x70, 0x6f, 0x74, 0x74, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x44, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x6d, 0x70, 0x73,
	0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x63, 0x61, 0x6d, 0x70, 0x73, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x68, 0x69, 0x74, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x6c, 0x61, 0x73, 0x74, 0x48, 0x69, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x6e,
	0x69, 0x65, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x64, 0x65, 0x6e, 0x69, 0x65,
	0x73, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61,
	0x6d, 0x61, 0x67, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x74, 0x72, 0x69, 0x70, 0x6c, 0x65, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x72, 0x69, 0x70, 0x6c, 0x65, 0x4b, 0x69, 0x6c, 0x6c, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x61, 0x6d, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x72, 0x61, 0x6d, 0x70, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x12, 0x5b, 0x0a,
	0x11, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x65, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x22, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x53, 0x69, 0x67, 0x6e, 0x4f, 0x75, 0x74, 0x4d, 0x56, 0x50, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x4b, 0x69, 0x6c, 0x6c, 0x45,
	0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0f, 0x6b, 0x69, 0x6c, 0x6c, 0x45,
	0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x68, 0x69,
	0x67, 0x68, 0x65, 0x73, 0x74, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6b,
	0x18, 0x23, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x4b,
	0x69, 0x6c, 0x6c, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x1a, 0x47, 0x0a, 0x0e, 0x4b, 0x69, 0x6c,
	0x6c, 0x45, 0x61, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52,
	0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x3a, 0x0a, 0x20, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x3c,
	0x0a, 0x22, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x43,
	0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x2c, 0x0a, 0x2a,
	0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x43, 0x52, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x42, 0x0a, 0x1f, 0x43, 0x4d,
	0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74, 0x47,
	0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x22, 0xca,
	0x04, 0x0a, 0x27, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x47,
	0x43, 0x47, 0x65, 0x74, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x10, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74, 0x47, 0x75, 0x69,
	0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x0f, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x1a, 0xe3, 0x01, 0x0a, 0x0f,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x32, 0x0a, 0x15, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x13, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x12, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x74, 0x61, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x6c, 0x6f,
	0x74, 0x1a, 0xd7, 0x01, 0x0a, 0x06, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67,
	0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x67,
	0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e,
	0x45, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x3a, 0x0d, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44,
	0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x5b,
	0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3d, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2a, 0xc6, 0x01, 0x0a, 0x1a,
	0x45, 0x50, 0x6f, 0x6f, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f,
	0x45, 0x50, 0x6f, 0x6f, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x24, 0x0a,
	0x20, 0x6b, 0x5f, 0x45, 0x50, 0x6f, 0x6f, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x10, 0x01, 0x12, 0x2b, 0x0a, 0x27, 0x6b, 0x5f, 0x45, 0x50, 0x6f, 0x6f, 0x72, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x4d, 0x61, 0x73, 0x73, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x10, 0x02,
	0x12, 0x32, 0x0a, 0x2e, 0x6b, 0x5f, 0x45, 0x50, 0x6f, 0x6f, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x45, 0x78, 0x63,
	0x65, 0x73, 0x73, 0x42, 0x61, 0x64, 0x51, 0x6f, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x73, 0x10, 0x03, 0x2a, 0xed, 0x02, 0x0a, 0x11, 0x45, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x41, 0x62, 0x75, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x5f,
	0x45, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x62, 0x75, 0x73, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x41,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x62, 0x75, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x49, 0x6f, 0x5f, 0x52, 0x65, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x10, 0x01, 0x12, 0x2a, 0x0a,
	0x26, 0x6b, 0x5f, 0x45, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x62, 0x75, 0x73, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x68, 0x65, 0x6e, 0x5f, 0x54, 0x65, 0x73, 0x74, 0x5f, 0x4f,
	0x66, 0x5f, 0x46, 0x61, 0x69, 0x74, 0x68, 0x10, 0x02, 0x12, 0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x45,
	0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x62, 0x75, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x42, 0x61, 0x6e, 0x65, 0x5f, 0x4e, 0x69, 0x67, 0x68, 0x74, 0x6d, 0x61, 0x72, 0x65, 0x10,
	0x03, 0x12, 0x2d, 0x0a, 0x29, 0x6b, 0x5f, 0x45, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x41,
	0x62, 0x75, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x73, 0x65,
	0x65, 0x6b, 0x65, 0x72, 0x5f, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x72, 0x61, 0x67, 0x65, 0x10, 0x04,
	0x12, 0x34, 0x0a, 0x30, 0x6b, 0x5f, 0x45, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x62,
	0x75, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4f, 0x75, 0x74, 0x77, 0x6f, 0x72, 0x6c, 0x64,
	0x5f, 0x41, 0x73, 0x74, 0x72, 0x61, 0x6c, 0x5f, 0x49, 0x6d, 0x70, 0x72, 0x69, 0x73, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x12, 0x2f, 0x0a, 0x2b, 0x6b, 0x5f, 0x45, 0x41, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x41, 0x62, 0x75, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x68,
	0x61, 0x64, 0x6f, 0x77, 0x5f, 0x44, 0x65, 0x6d, 0x6f, 0x6e, 0x5f, 0x44, 0x69, 0x73, 0x72, 0x75,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x06, 0x12, 0x2b, 0x0a, 0x27, 0x6b, 0x5f, 0x45, 0x41, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x62, 0x75, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x47,
	0x72, 0x69, 0x6d, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x5f, 0x49, 0x6e, 0x6b, 0x53, 0x77, 0x65,
	0x6c, 0x6c, 0x10, 0x07, 0x2a, 0xfe, 0x04, 0x0a, 0x17, 0x45, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x46, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x6f,
	0x6e, 0x65, 0x10, 0x00, 0x12, 0x2d, 0x0a, 0x29, 0x6b, 0x5f, 0x45, 0x49, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x45, 0x78, 0x63, 0x65, 0x73, 0x73, 0x69, 0x76, 0x65, 0x44, 0x65, 0x61, 0x74, 0x68,
	0x73, 0x10, 0x01, 0x12, 0x36, 0x0a, 0x32, 0x6b, 0x5f, 0x45, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x73, 0x10, 0x02, 0x12, 0x33, 0x0a, 0x2f, 0x6b,
	0x5f, 0x45, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x65, 0x65,
	0x64, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x65, 0x43, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x44, 0x65, 0x61, 0x74, 0x68, 0x73, 0x10, 0x04,
	0x12, 0x29, 0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x46, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x6f,
	0x77, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x10, 0x08, 0x12, 0x27, 0x0a, 0x23, 0x6b,
	0x5f, 0x45, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x65, 0x65,
	0x64, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x6f, 0x77, 0x44, 0x61, 0x6d, 0x61,
	0x67, 0x65, 0x10, 0x10, 0x12, 0x2d, 0x0a, 0x29, 0x6b, 0x5f, 0x45, 0x49, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x48, 0x69, 0x67, 0x68, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x47, 0x6f, 0x6c,
	0x64, 0x10, 0x20, 0x12, 0x32, 0x0a, 0x2e, 0x6b, 0x5f, 0x45, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x53, 0x6f, 0x6c, 0x64, 0x54, 0x6f, 0x6f, 0x4d, 0x75, 0x63, 0x68, 0x49, 0x74, 0x65, 0x6d,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x40, 0x12, 0x32, 0x0a, 0x2d, 0x6b, 0x5f, 0x45, 0x49, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x54, 0x6f, 0x6f, 0x4d, 0x61, 0x6e, 0x79, 0x44, 0x72, 0x6f, 0x70,
	0x70, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x10, 0x80, 0x01, 0x12, 0x33, 0x0a, 0x2e, 0x6b,
	0x5f, 0x45, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x65, 0x65,
	0x64, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x78, 0x63, 0x65, 0x73, 0x73, 0x69,
	0x76, 0x65, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x10, 0x80, 0x02,
	0x12, 0x2d, 0x0a, 0x28, 0x6b, 0x5f, 0x45, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x46, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x61,
	0x73, 0x74, 0x48, 0x69, 0x74, 0x73, 0x44, 0x65, 0x6e, 0x69, 0x65, 0x73, 0x10, 0x80, 0x04, 0x12,
	0x23, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x46, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x58, 0x50, 0x50,
	0x4d, 0x10, 0x80, 0x08, 0x12, 0x2f, 0x0a, 0x2a, 0x6b, 0x5f, 0x45, 0x49, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x53, 0x75, 0x73, 0x70, 0x69, 0x63, 0x69, 0x6f, 0x75, 0x73, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x10, 0x80, 0x10, 0x2a, 0xd5, 0x01, 0x0a, 0x13, 0x45, 0x53, 0x75, 0x73, 0x70, 0x69,
	0x63, 0x69, 0x6f, 0x75, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x2f, 0x0a,
	0x2b, 0x6b, 0x5f, 0x45, 0x53, 0x75, 0x73, 0x70, 0x69, 0x63, 0x69, 0x6f, 0x75, 0x73, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x56, 0x41, 0x43, 0x5f, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x10, 0x01, 0x12, 0x2c,
	0x0a, 0x28, 0x6b, 0x5f, 0x45, 0x53, 0x75, 0x73, 0x70, 0x69, 0x63, 0x69, 0x6f, 0x75, 0x73, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x46, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x64, 0x12, 0x2d, 0x0a, 0x29,
	0x6b, 0x5f, 0x45, 0x53, 0x75, 0x73, 0x70, 0x69, 0x63, 0x69, 0x6f, 0x75, 0x73, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x53, 0x75, 0x73, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42,
	0x6f, 0x74, 0x46, 0x61, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x10, 0x65, 0x12, 0x30, 0x0a, 0x2c, 0x6b,
	0x5f, 0x45, 0x53, 0x75, 0x73, 0x70, 0x69, 0x63, 0x69, 0x6f, 0x75, 0x73, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x5f, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x65, 0x64, 0x54, 0x6f,
	0x43, 0x72, 0x61, 0x73, 0x68, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x10, 0x66, 0x2a, 0x80, 0x03,
	0x0a, 0x14, 0x45, 0x53, 0x75, 0x73, 0x70, 0x69, 0x63, 0x69, 0x6f, 0x75, 0x73, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x6b, 0x5f, 0x45, 0x53, 0x75, 0x73,
	0x70, 0x69, 0x63, 0x69, 0x6f, 0x75, 0x73, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x53, 0x75,
	0x73, 0x70, 0x69, 0x63, 0x69, 0x6f, 0x75, 0x73, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x4e, 0x6f, 0x47, 0x6f, 0x6c, 0x64, 0x53, 0x70, 0x65, 0x6e, 0x74, 0x10, 0x01, 0x12,
	0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x53, 0x75, 0x73, 0x70, 0x69, 0x63, 0x69, 0x6f, 0x75, 0x73,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x6f, 0x49, 0x74, 0x65, 0x6d,
	0x73, 0x10, 0x02, 0x12, 0x2d, 0x0a, 0x29, 0x6b, 0x5f, 0x45, 0x53, 0x75, 0x73, 0x70, 0x69, 0x63,
	0x69, 0x6f, 0x75, 0x73, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x6f,
	0x53, 0x69, 0x67, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73,
	0x10, 0x03, 0x12, 0x27, 0x0a, 0x23, 0x6b, 0x5f, 0x45, 0x53, 0x75, 0x73, 0x70, 0x69, 0x63, 0x69,
	0x6f, 0x75, 0x73, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x54, 0x6f, 0x6f,
	0x4d, 0x61, 0x6e, 0x79, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x10, 0x04, 0x12, 0x1f, 0x0a, 0x1b, 0x6b,
	0x5f, 0x45, 0x53, 0x75, 0x73, 0x70, 0x69, 0x63, 0x69, 0x6f, 0x75, 0x73, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x6f, 0x74, 0x31, 0x10, 0x65, 0x12, 0x1f, 0x0a, 0x1b,
	0x6b, 0x5f, 0x45, 0x53, 0x75, 0x73, 0x70, 0x69, 0x63, 0x69, 0x6f, 0x75, 0x73, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x6f, 0x74, 0x32, 0x10, 0x66, 0x12, 0x1f, 0x0a,
	0x1b, 0x6b, 0x5f, 0x45, 0x53, 0x75, 0x73, 0x70, 0x69, 0x63, 0x69, 0x6f, 0x75, 0x73, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x6f, 0x74, 0x33, 0x10, 0x67, 0x12, 0x1f,
	0x0a, 0x1b, 0x6b, 0x5f, 0x45, 0x53, 0x75, 0x73, 0x70, 0x69, 0x63, 0x69, 0x6f, 0x75, 0x73, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x6f, 0x74, 0x34, 0x10, 0x68, 0x12,
	0x1f, 0x0a, 0x1b, 0x6b, 0x5f, 0x45, 0x53, 0x75, 0x73, 0x70, 0x69, 0x63, 0x69, 0x6f, 0x75, 0x73,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x6f, 0x74, 0x35, 0x10, 0x69,
	0x42, 0x05, 0x48, 0x01, 0x80, 0x01, 0x00,
}

var (
	file_dota_gcmessages_server_proto_rawDescOnce sync.Once
	file_dota_gcmessages_server_proto_rawDescData = file_dota_gcmessages_server_proto_rawDesc
)

func file_dota_gcmessages_server_proto_rawDescGZIP() []byte {
	file_dota_gcmessages_server_proto_rawDescOnce.Do(func() {
		file_dota_gcmessages_server_proto_rawDescData = protoimpl.X.CompressGZIP(file_dota_gcmessages_server_proto_rawDescData)
	})
	return file_dota_gcmessages_server_proto_rawDescData
}

var file_dota_gcmessages_server_proto_enumTypes = make([]protoimpl.EnumInfo, 13)
var file_dota_gcmessages_server_proto_msgTypes = make([]protoimpl.MessageInfo, 166)
var file_dota_gcmessages_server_proto_goTypes = []interface{}{
	(EPoorNetworkConditionsType)(0),                                          // 0: dota.EPoorNetworkConditionsType
	(EAbilityAbuseType)(0),                                                   // 1: dota.EAbilityAbuseType
	(EIntentionalFeedingType)(0),                                             // 2: dota.EIntentionalFeedingType
	(ESuspiciousActivity)(0),                                                 // 3: dota.ESuspiciousActivity
	(ESuspiciousBuildType)(0),                                                // 4: dota.ESuspiciousBuildType
	(CMsgConnectedPlayers_SendReason)(0),                                     // 5: dota.CMsgConnectedPlayers.SendReason
	(CMsgGameServerInfo_ServerType)(0),                                       // 6: dota.CMsgGameServerInfo.ServerType
	(CMsgGameServerInfo_CustomGames)(0),                                      // 7: dota.CMsgGameServerInfo.CustomGames
	(CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType)(0),                   // 8: dota.CMsgGameMatchSignOut.CTeam.CPlayer.HeroDamageType
	(CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState)(0),          // 9: dota.CMsgDOTALiveScoreboardUpdate.Team.Player.DOTAUltimateState
	(CMsgGameServerSaveGameResult_Result)(0),                                 // 10: dota.CMsgGameServerSaveGameResult.Result
	(CMsgGCToServerPredictionResult_Prediction_EResult)(0),                   // 11: dota.CMsgGCToServerPredictionResult.Prediction.EResult
	(CMsgServerToGCPostMatchTipResponse_Result)(0),                           // 12: dota.CMsgServerToGCPostMatchTipResponse.Result
	(*CMsgPoorNetworkConditions)(nil),                                        // 13: dota.CMsgPoorNetworkConditions
	(*CMsgGameserverCrash)(nil),                                              // 14: dota.CMsgGameserverCrash
	(*CMsgConnectedPlayers)(nil),                                             // 15: dota.CMsgConnectedPlayers
	(*CMsgGameServerInfo)(nil),                                               // 16: dota.CMsgGameServerInfo
	(*CMsgLeaverDetected)(nil),                                               // 17: dota.CMsgLeaverDetected
	(*CMsgLeaverDetectedResponse)(nil),                                       // 18: dota.CMsgLeaverDetectedResponse
	(*CMsgDOTAFantasyFinalPlayerStats)(nil),                                  // 19: dota.CMsgDOTAFantasyFinalPlayerStats
	(*CMsgDOTAFantasyLivePlayerStats)(nil),                                   // 20: dota.CMsgDOTAFantasyLivePlayerStats
	(*CMsgDOTAFantasyMatch)(nil),                                             // 21: dota.CMsgDOTAFantasyMatch
	(*CMsgDOTAUpdateClippy)(nil),                                             // 22: dota.CMsgDOTAUpdateClippy
	(*CMsgServerToGCRealtimeStats)(nil),                                      // 23: dota.CMsgServerToGCRealtimeStats
	(*CMsgGCToServerRealtimeStatsStartStop)(nil),                             // 24: dota.CMsgGCToServerRealtimeStatsStartStop
	(*CMsgGCToServerUpdateSteamBroadcasting)(nil),                            // 25: dota.CMsgGCToServerUpdateSteamBroadcasting
	(*CMsgSignOutGameplayStats)(nil),                                         // 26: dota.CMsgSignOutGameplayStats
	(*CMsgGameMatchSignOut)(nil),                                             // 27: dota.CMsgGameMatchSignOut
	(*CMsgSignOutDraftInfo)(nil),                                             // 28: dota.CMsgSignOutDraftInfo
	(*CMsgSignOutBotInfo)(nil),                                               // 29: dota.CMsgSignOutBotInfo
	(*CMsgSignOutTextMuteInfo)(nil),                                          // 30: dota.CMsgSignOutTextMuteInfo
	(*CMsgSignOutPlayerStats)(nil),                                           // 31: dota.CMsgSignOutPlayerStats
	(*CMsgSignOutCommunicationSummary)(nil),                                  // 32: dota.CMsgSignOutCommunicationSummary
	(*CMsgGameMatchSignoutResponse)(nil),                                     // 33: dota.CMsgGameMatchSignoutResponse
	(*CMsgTimedRewardContainer)(nil),                                         // 34: dota.CMsgTimedRewardContainer
	(*CMsgGameMatchSignOutPermissionRequest)(nil),                            // 35: dota.CMsgGameMatchSignOutPermissionRequest
	(*CMsgGameMatchSignOutPermissionResponse)(nil),                           // 36: dota.CMsgGameMatchSignOutPermissionResponse
	(*CMsgGameMatchSignOutEventGameData)(nil),                                // 37: dota.CMsgGameMatchSignOutEventGameData
	(*CMsgDOTALiveScoreboardUpdate)(nil),                                     // 38: dota.CMsgDOTALiveScoreboardUpdate
	(*CMsgDOTARequestPlayerResources)(nil),                                   // 39: dota.CMsgDOTARequestPlayerResources
	(*CMsgDOTARequestPlayerResourcesResponse)(nil),                           // 40: dota.CMsgDOTARequestPlayerResourcesResponse
	(*CMsgDOTARequestBatchPlayerResources)(nil),                              // 41: dota.CMsgDOTARequestBatchPlayerResources
	(*CMsgDOTARequestBatchPlayerResourcesResponse)(nil),                      // 42: dota.CMsgDOTARequestBatchPlayerResourcesResponse
	(*CMsgDOTAPlayerFailedToConnect)(nil),                                    // 43: dota.CMsgDOTAPlayerFailedToConnect
	(*CMsgGCToRelayConnect)(nil),                                             // 44: dota.CMsgGCToRelayConnect
	(*CMsgGCGCToLANServerRelayConnect)(nil),                                  // 45: dota.CMsgGCGCToLANServerRelayConnect
	(*CMsgGCToRelayConnectResponse)(nil),                                     // 46: dota.CMsgGCToRelayConnectResponse
	(*CMsgGCBanStatusRequest)(nil),                                           // 47: dota.CMsgGCBanStatusRequest
	(*CMsgGCBanStatusResponse)(nil),                                          // 48: dota.CMsgGCBanStatusResponse
	(*CMsgTournamentItemEvent)(nil),                                          // 49: dota.CMsgTournamentItemEvent
	(*CMsgTournamentItemEventResponse)(nil),                                  // 50: dota.CMsgTournamentItemEventResponse
	(*CMsgTeamFanfare)(nil),                                                  // 51: dota.CMsgTeamFanfare
	(*CMsgResponseTeamFanfare)(nil),                                          // 52: dota.CMsgResponseTeamFanfare
	(*CMsgGameServerUploadSaveGame)(nil),                                     // 53: dota.CMsgGameServerUploadSaveGame
	(*CMsgGameServerSaveGameResult)(nil),                                     // 54: dota.CMsgGameServerSaveGameResult
	(*CMsgGameServerGetLoadGame)(nil),                                        // 55: dota.CMsgGameServerGetLoadGame
	(*CMsgGameServerGetLoadGameResult)(nil),                                  // 56: dota.CMsgGameServerGetLoadGameResult
	(*CMsgDOTAGenerateDiretidePrizeList)(nil),                                // 57: dota.CMsgDOTAGenerateDiretidePrizeList
	(*CMsgDOTAGenerateDiretidePrizeListResponse)(nil),                        // 58: dota.CMsgDOTAGenerateDiretidePrizeListResponse
	(*CMsgDOTARewardDiretidePrizes)(nil),                                     // 59: dota.CMsgDOTARewardDiretidePrizes
	(*CMsgDOTADiretidePrizesRewardedResponse)(nil),                           // 60: dota.CMsgDOTADiretidePrizesRewardedResponse
	(*CMsgDOTAAwardEventPoints)(nil),                                         // 61: dota.CMsgDOTAAwardEventPoints
	(*CMsgServerToGCSignoutAwardAdditionalDrops)(nil),                        // 62: dota.CMsgServerToGCSignoutAwardAdditionalDrops
	(*CMsgDOTAFrostivusTimeElapsed)(nil),                                     // 63: dota.CMsgDOTAFrostivusTimeElapsed
	(*CMsgGCToServerPingRequest)(nil),                                        // 64: dota.CMsgGCToServerPingRequest
	(*CMsgGCToServerPingResponse)(nil),                                       // 65: dota.CMsgGCToServerPingResponse
	(*CMsgGCToServerConsoleCommand)(nil),                                     // 66: dota.CMsgGCToServerConsoleCommand
	(*CMsgServerGetEventPoints)(nil),                                         // 67: dota.CMsgServerGetEventPoints
	(*CMsgServerGetEventPointsResponse)(nil),                                 // 68: dota.CMsgServerGetEventPointsResponse
	(*CMsgServerGrantSurveyPermission)(nil),                                  // 69: dota.CMsgServerGrantSurveyPermission
	(*CMsgServerGrantSurveyPermissionResponse)(nil),                          // 70: dota.CMsgServerGrantSurveyPermissionResponse
	(*CMsgServerToGCMatchConnectionStats)(nil),                               // 71: dota.CMsgServerToGCMatchConnectionStats
	(*CMsgServerGCUpdateSpectatorCount)(nil),                                 // 72: dota.CMsgServerGCUpdateSpectatorCount
	(*CSerializedCombatLog)(nil),                                             // 73: dota.CSerializedCombatLog
	(*CMsgServerToGCGetAdditionalEquips)(nil),                                // 74: dota.CMsgServerToGCGetAdditionalEquips
	(*CMsgServerToGCGetAdditionalEquipsResponse)(nil),                        // 75: dota.CMsgServerToGCGetAdditionalEquipsResponse
	(*CMsgServerToGCGetProfileCard)(nil),                                     // 76: dota.CMsgServerToGCGetProfileCard
	(*CMsgServerToGCGetProfileCardResponse)(nil),                             // 77: dota.CMsgServerToGCGetProfileCardResponse
	(*CMsgServerToGCVictoryPredictions)(nil),                                 // 78: dota.CMsgServerToGCVictoryPredictions
	(*CMsgSuspiciousActivity)(nil),                                           // 79: dota.CMsgSuspiciousActivity
	(*CMsgServerToGCRequestStatus)(nil),                                      // 80: dota.CMsgServerToGCRequestStatus
	(*CMsgServerToGCRequestStatus_Response)(nil),                             // 81: dota.CMsgServerToGCRequestStatus_Response
	(*CMsgSignOutAssassinMiniGameInfo)(nil),                                  // 82: dota.CMsgSignOutAssassinMiniGameInfo
	(*CMsgServerToGCGetIngameEventData)(nil),                                 // 83: dota.CMsgServerToGCGetIngameEventData
	(*CMsgGCToServerIngameEventDataOraclePA)(nil),                            // 84: dota.CMsgGCToServerIngameEventDataOraclePA
	(*CMsgServerToGCKillSummaries)(nil),                                      // 85: dota.CMsgServerToGCKillSummaries
	(*CMsgGCToServerPredictionResult)(nil),                                   // 86: dota.CMsgGCToServerPredictionResult
	(*CMsgServerToGCLockCharmTrading)(nil),                                   // 87: dota.CMsgServerToGCLockCharmTrading
	(*CMsgSignOutUpdatePlayerChallenge)(nil),                                 // 88: dota.CMsgSignOutUpdatePlayerChallenge
	(*CMsgServerToGCRerollPlayerChallenge)(nil),                              // 89: dota.CMsgServerToGCRerollPlayerChallenge
	(*CMsgSignOutWagerStats)(nil),                                            // 90: dota.CMsgSignOutWagerStats
	(*CMsgSpendWager)(nil),                                                   // 91: dota.CMsgSpendWager
	(*CMsgSignOutXPCoins)(nil),                                               // 92: dota.CMsgSignOutXPCoins
	(*CMsgSignOutBounties)(nil),                                              // 93: dota.CMsgSignOutBounties
	(*CMsgSignOutCommunityGoalProgress)(nil),                                 // 94: dota.CMsgSignOutCommunityGoalProgress
	(*CMsgServerToGCPostMatchTip)(nil),                                       // 95: dota.CMsgServerToGCPostMatchTip
	(*CMsgServerToGCPostMatchTipResponse)(nil),                               // 96: dota.CMsgServerToGCPostMatchTipResponse
	(*CMsgServerToGCCloseCompendiumInGamePredictionVoting)(nil),              // 97: dota.CMsgServerToGCCloseCompendiumInGamePredictionVoting
	(*CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse)(nil),      // 98: dota.CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse
	(*CMsgServerToGCCompendiumInGamePredictionResults)(nil),                  // 99: dota.CMsgServerToGCCompendiumInGamePredictionResults
	(*CMsgServerToGCCompendiumInGamePredictionResultsResponse)(nil),          // 100: dota.CMsgServerToGCCompendiumInGamePredictionResultsResponse
	(*CMsgGCToGCCompendiumInGamePredictionResults)(nil),                      // 101: dota.CMsgGCToGCCompendiumInGamePredictionResults
	(*CMsgServerToGCMatchPlayerItemPurchaseHistory)(nil),                     // 102: dota.CMsgServerToGCMatchPlayerItemPurchaseHistory
	(*CMsgServerToGCMatchStateHistory)(nil),                                  // 103: dota.CMsgServerToGCMatchStateHistory
	(*CMsgServerToGCCavernCrawlIsHeroActive)(nil),                            // 104: dota.CMsgServerToGCCavernCrawlIsHeroActive
	(*CMsgServerToGCCavernCrawlIsHeroActiveResponse)(nil),                    // 105: dota.CMsgServerToGCCavernCrawlIsHeroActiveResponse
	(*CMsgGCtoServerTensorflowInstance)(nil),                                 // 106: dota.CMsgGCtoServerTensorflowInstance
	(*CMsgDetailedGameStats)(nil),                                            // 107: dota.CMsgDetailedGameStats
	(*CMsgAllStarStats)(nil),                                                 // 108: dota.CMsgAllStarStats
	(*CMsgNeutralItemStats)(nil),                                             // 109: dota.CMsgNeutralItemStats
	(*CMsgGCToServerLobbyHeroBanRates)(nil),                                  // 110: dota.CMsgGCToServerLobbyHeroBanRates
	(*CMsgSignOutGuildContractProgress)(nil),                                 // 111: dota.CMsgSignOutGuildContractProgress
	(*CMsgSignOutGuildChallengeProgress)(nil),                                // 112: dota.CMsgSignOutGuildChallengeProgress
	(*CMsgSignOutMVPStats)(nil),                                              // 113: dota.CMsgSignOutMVPStats
	(*CMsgGCToServerRecordTrainingData)(nil),                                 // 114: dota.CMsgGCToServerRecordTrainingData
	(*CMsgServerToGCRefreshGuildContract)(nil),                               // 115: dota.CMsgServerToGCRefreshGuildContract
	(*CMsgServerToGCRefreshGuildContractResponse)(nil),                       // 116: dota.CMsgServerToGCRefreshGuildContractResponse
	(*CMsgServerToGCGetGuildContracts)(nil),                                  // 117: dota.CMsgServerToGCGetGuildContracts
	(*CMsgServerToGCGetGuildContractsResponse)(nil),                          // 118: dota.CMsgServerToGCGetGuildContractsResponse
	(*CMsgPoorNetworkConditions_Player)(nil),                                 // 119: dota.CMsgPoorNetworkConditions.Player
	(*CMsgConnectedPlayers_Player)(nil),                                      // 120: dota.CMsgConnectedPlayers.Player
	(*CMsgSignOutGameplayStats_CPlayer)(nil),                                 // 121: dota.CMsgSignOutGameplayStats.CPlayer
	(*CMsgSignOutGameplayStats_CTeam)(nil),                                   // 122: dota.CMsgSignOutGameplayStats.CTeam
	(*CMsgGameMatchSignOut_CTeam)(nil),                                       // 123: dota.CMsgGameMatchSignOut.CTeam
	(*CMsgGameMatchSignOut_CAdditionalSignoutMsg)(nil),                       // 124: dota.CMsgGameMatchSignOut.CAdditionalSignoutMsg
	(*CMsgGameMatchSignOut_CSocialFeedMatchEvent)(nil),                       // 125: dota.CMsgGameMatchSignOut.CSocialFeedMatchEvent
	(*CMsgGameMatchSignOut_CCustomGameData)(nil),                             // 126: dota.CMsgGameMatchSignOut.CCustomGameData
	(*CMsgGameMatchSignOut_EventGameLeaderboardEntry)(nil),                   // 127: dota.CMsgGameMatchSignOut.EventGameLeaderboardEntry
	(*CMsgGameMatchSignOut_WardPlacement)(nil),                               // 128: dota.CMsgGameMatchSignOut.WardPlacement
	(*CMsgGameMatchSignOut_CTeam_CPlayer)(nil),                               // 129: dota.CMsgGameMatchSignOut.CTeam.CPlayer
	(*CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData)(nil),               // 130: dota.CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData
	(*CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived)(nil),            // 131: dota.CMsgGameMatchSignOut.CTeam.CPlayer.HeroDamageReceived
	(*CMsgSignOutTextMuteInfo_TextMuteMessage)(nil),                          // 132: dota.CMsgSignOutTextMuteInfo.TextMuteMessage
	(*CMsgSignOutCommunicationSummary_PlayerCommunication)(nil),              // 133: dota.CMsgSignOutCommunicationSummary.PlayerCommunication
	(*CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail)(nil),   // 134: dota.CMsgSignOutCommunicationSummary.PlayerCommunication.PingDetail
	(*CMsgGameMatchSignoutResponse_PlayerMetadata)(nil),                      // 135: dota.CMsgGameMatchSignoutResponse.PlayerMetadata
	(*CMsgDOTALiveScoreboardUpdate_Team)(nil),                                // 136: dota.CMsgDOTALiveScoreboardUpdate.Team
	(*CMsgDOTALiveScoreboardUpdate_Team_Player)(nil),                         // 137: dota.CMsgDOTALiveScoreboardUpdate.Team.Player
	(*CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility)(nil),             // 138: dota.CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility
	(*CMsgDOTARequestBatchPlayerResourcesResponse_Result)(nil),               // 139: dota.CMsgDOTARequestBatchPlayerResourcesResponse.Result
	(*CMsgDOTAAwardEventPoints_AwardPoints)(nil),                             // 140: dota.CMsgDOTAAwardEventPoints.AwardPoints
	(*CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops)(nil),        // 141: dota.CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops
	(*CMsgDOTAFrostivusTimeElapsed_User)(nil),                                // 142: dota.CMsgDOTAFrostivusTimeElapsed.User
	(*CMsgServerGetEventPointsResponse_Points)(nil),                          // 143: dota.CMsgServerGetEventPointsResponse.Points
	(*CMsgServerGrantSurveyPermission_Survey)(nil),                           // 144: dota.CMsgServerGrantSurveyPermission.Survey
	(*CMsgServerToGCMatchConnectionStats_Player)(nil),                        // 145: dota.CMsgServerToGCMatchConnectionStats.Player
	(*CSerializedCombatLog_Dictionary)(nil),                                  // 146: dota.CSerializedCombatLog.Dictionary
	(*CSerializedCombatLog_Dictionary_DictString)(nil),                       // 147: dota.CSerializedCombatLog.Dictionary.DictString
	(*CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips)(nil),            // 148: dota.CMsgServerToGCGetAdditionalEquipsResponse.CUserEquips
	(*CMsgServerToGCVictoryPredictions_Record)(nil),                          // 149: dota.CMsgServerToGCVictoryPredictions.Record
	(*CMsgServerToGCKillSummaries_KillSummary)(nil),                          // 150: dota.CMsgServerToGCKillSummaries.KillSummary
	(*CMsgGCToServerPredictionResult_Prediction)(nil),                        // 151: dota.CMsgGCToServerPredictionResult.Prediction
	(*CMsgSignOutUpdatePlayerChallenge_Challenge)(nil),                       // 152: dota.CMsgSignOutUpdatePlayerChallenge.Challenge
	(*CMsgSignOutWagerStats_Player)(nil),                                     // 153: dota.CMsgSignOutWagerStats.Player
	(*CMsgSpendWager_Player)(nil),                                            // 154: dota.CMsgSpendWager.Player
	(*CMsgSignOutXPCoins_Player)(nil),                                        // 155: dota.CMsgSignOutXPCoins.Player
	(*CMsgSignOutBounties_Bounty)(nil),                                       // 156: dota.CMsgSignOutBounties.Bounty
	(*CMsgSignOutCommunityGoalProgress_EventGoalIncrement)(nil),              // 157: dota.CMsgSignOutCommunityGoalProgress.EventGoalIncrement
	(*CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult)(nil), // 158: dota.CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult
	(*CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase)(nil),        // 159: dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase
	(*CMsgServerToGCMatchPlayerItemPurchaseHistory_Player)(nil),              // 160: dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.Player
	(*CMsgServerToGCMatchStateHistory_PlayerState)(nil),                      // 161: dota.CMsgServerToGCMatchStateHistory.PlayerState
	(*CMsgServerToGCMatchStateHistory_TeamState)(nil),                        // 162: dota.CMsgServerToGCMatchStateHistory.TeamState
	(*CMsgServerToGCMatchStateHistory_MatchState)(nil),                       // 163: dota.CMsgServerToGCMatchStateHistory.MatchState
	(*CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults)(nil),         // 164: dota.CMsgServerToGCCavernCrawlIsHeroActiveResponse.MapResults
	(*CMsgDetailedGameStats_PlayerStatEntry)(nil),                            // 165: dota.CMsgDetailedGameStats.PlayerStatEntry
	(*CMsgDetailedGameStats_GameStats)(nil),                                  // 166: dota.CMsgDetailedGameStats.GameStats
	(*CMsgDetailedGameStats_MinuteEntry)(nil),                                // 167: dota.CMsgDetailedGameStats.MinuteEntry
	(*CMsgDetailedGameStats_PlayerInfo)(nil),                                 // 168: dota.CMsgDetailedGameStats.PlayerInfo
	(*CMsgAllStarStats_PlayerStats)(nil),                                     // 169: dota.CMsgAllStarStats.PlayerStats
	(*CMsgNeutralItemStats_NeutralItem)(nil),                                 // 170: dota.CMsgNeutralItemStats.NeutralItem
	(*CMsgGCToServerLobbyHeroBanRates_HeroBanEntry)(nil),                     // 171: dota.CMsgGCToServerLobbyHeroBanRates.HeroBanEntry
	(*CMsgSignOutGuildContractProgress_CompletedGuildEventContracts)(nil),    // 172: dota.CMsgSignOutGuildContractProgress.CompletedGuildEventContracts
	(*CMsgSignOutGuildContractProgress_PlayerContract)(nil),                  // 173: dota.CMsgSignOutGuildContractProgress.PlayerContract
	(*CMsgSignOutGuildChallengeProgress_ChallengeProgress)(nil),              // 174: dota.CMsgSignOutGuildChallengeProgress.ChallengeProgress
	(*CMsgSignOutMVPStats_Player)(nil),                                       // 175: dota.CMsgSignOutMVPStats.Player
	(*CMsgSignOutMVPStats_Player_KillEaterEvent)(nil),                        // 176: dota.CMsgSignOutMVPStats.Player.KillEaterEvent
	(*CMsgServerToGCGetGuildContractsResponse_ContractDetails)(nil),          // 177: dota.CMsgServerToGCGetGuildContractsResponse.ContractDetails
	(*CMsgServerToGCGetGuildContractsResponse_Player)(nil),                   // 178: dota.CMsgServerToGCGetGuildContractsResponse.Player
	(DOTA_GameState)(0),                                                      // 179: dota.DOTA_GameState
	(DOTALeaverStatusT)(0),                                                   // 180: dota.DOTALeaverStatus_t
	(*CMsgLeaverState)(nil),                                                  // 181: dota.CMsgLeaverState
	(ENetworkDisconnectionReason)(0),                                         // 182: dota.ENetworkDisconnectionReason
	(*CMsgDOTAFantasyPlayerStats)(nil),                                       // 183: dota.CMsgDOTAFantasyPlayerStats
	(*CMsgDOTARealtimeGameStatsTerse)(nil),                                   // 184: dota.CMsgDOTARealtimeGameStatsTerse
	(*CMatchHeroSelectEvent)(nil),                                            // 185: dota.CMatchHeroSelectEvent
	(*CMsgEconPlayerStrangeCountAdjustment)(nil),                             // 186: dota.CMsgEconPlayerStrangeCountAdjustment
	(*CExtraMsgBlock)(nil),                                                   // 187: dota.CExtraMsgBlock
	(DOTABotDifficulty)(0),                                                   // 188: dota.DOTABotDifficulty
	(*CLobbyTimedRewardDetails)(nil),                                         // 189: dota.CLobbyTimedRewardDetails
	(*CSODOTALobbyMember)(nil),                                               // 190: dota.CSODOTALobbyMember
	(*CMsgDOTAMatch)(nil),                                                    // 191: dota.CMsgDOTAMatch
	(*CMvpData)(nil),                                                         // 192: dota.CMvpData
	(EEvent)(0),                                                              // 193: dota.EEvent
	(DOTA_TournamentEvents)(0),                                               // 194: dota.DOTA_TournamentEvents
	(*CProtoItemHeroStatue)(nil),                                             // 195: dota.CProtoItemHeroStatue
	(*CMsgDOTACombatLogEntry)(nil),                                           // 196: dota.CMsgDOTACombatLogEntry
	(*CMsgDOTAProfileCard)(nil),                                              // 197: dota.CMsgDOTAProfileCard
	(*CMsgClientToGCRerollPlayerChallenge)(nil),                              // 198: dota.CMsgClientToGCRerollPlayerChallenge
	(*CMatchPlayerTimedStats)(nil),                                           // 199: dota.CMatchPlayerTimedStats
	(*CMatchTeamTimedStats)(nil),                                             // 200: dota.CMatchTeamTimedStats
	(*CMatchPlayerAbilityUpgrade)(nil),                                       // 201: dota.CMatchPlayerAbilityUpgrade
	(*CMatchAdditionalUnitInventory)(nil),                                    // 202: dota.CMatchAdditionalUnitInventory
	(*CMatchPlayerPermanentBuff)(nil),                                        // 203: dota.CMatchPlayerPermanentBuff
	(*CAdditionalEquipSlot)(nil),                                             // 204: dota.CAdditionalEquipSlot
}
var file_dota_gcmessages_server_proto_depIdxs = []int32{
	0,   // 0: dota.CMsgPoorNetworkConditions.detection_type:type_name -> dota.EPoorNetworkConditionsType
	119, // 1: dota.CMsgPoorNetworkConditions.players:type_name -> dota.CMsgPoorNetworkConditions.Player
	179, // 2: dota.CMsgGameserverCrash.game_state:type_name -> dota.DOTA_GameState
	120, // 3: dota.CMsgConnectedPlayers.connected_players:type_name -> dota.CMsgConnectedPlayers.Player
	120, // 4: dota.CMsgConnectedPlayers.disconnected_players:type_name -> dota.CMsgConnectedPlayers.Player
	179, // 5: dota.CMsgConnectedPlayers.game_state:type_name -> dota.DOTA_GameState
	13,  // 6: dota.CMsgConnectedPlayers.poor_network_conditions:type_name -> dota.CMsgPoorNetworkConditions
	5,   // 7: dota.CMsgConnectedPlayers.send_reason:type_name -> dota.CMsgConnectedPlayers.SendReason
	6,   // 8: dota.CMsgGameServerInfo.server_type:type_name -> dota.CMsgGameServerInfo.ServerType
	7,   // 9: dota.CMsgGameServerInfo.allow_custom_games:type_name -> dota.CMsgGameServerInfo.CustomGames
	180, // 10: dota.CMsgLeaverDetected.leaver_status:type_name -> dota.DOTALeaverStatus_t
	181, // 11: dota.CMsgLeaverDetected.leaver_state:type_name -> dota.CMsgLeaverState
	182, // 12: dota.CMsgLeaverDetected.disconnect_reason:type_name -> dota.ENetworkDisconnectionReason
	13,  // 13: dota.CMsgLeaverDetected.poor_network_conditions:type_name -> dota.CMsgPoorNetworkConditions
	183, // 14: dota.CMsgDOTAFantasyFinalPlayerStats.stats:type_name -> dota.CMsgDOTAFantasyPlayerStats
	183, // 15: dota.CMsgDOTAFantasyLivePlayerStats.stats:type_name -> dota.CMsgDOTAFantasyPlayerStats
	184, // 16: dota.CMsgServerToGCRealtimeStats.delayed:type_name -> dota.CMsgDOTARealtimeGameStatsTerse
	122, // 17: dota.CMsgSignOutGameplayStats.teams:type_name -> dota.CMsgSignOutGameplayStats.CTeam
	123, // 18: dota.CMsgGameMatchSignOut.teams:type_name -> dota.CMsgGameMatchSignOut.CTeam
	185, // 19: dota.CMsgGameMatchSignOut.picks_bans:type_name -> dota.CMatchHeroSelectEvent
	183, // 20: dota.CMsgGameMatchSignOut.fantasy_stats:type_name -> dota.CMsgDOTAFantasyPlayerStats
	186, // 21: dota.CMsgGameMatchSignOut.player_strange_count_adjustments:type_name -> dota.CMsgEconPlayerStrangeCountAdjustment
	13,  // 22: dota.CMsgGameMatchSignOut.poor_network_conditions:type_name -> dota.CMsgPoorNetworkConditions
	124, // 23: dota.CMsgGameMatchSignOut.additional_msgs:type_name -> dota.CMsgGameMatchSignOut.CAdditionalSignoutMsg
	125, // 24: dota.CMsgGameMatchSignOut.social_feed_events:type_name -> dota.CMsgGameMatchSignOut.CSocialFeedMatchEvent
	126, // 25: dota.CMsgGameMatchSignOut.custom_game_data:type_name -> dota.CMsgGameMatchSignOut.CCustomGameData
	127, // 26: dota.CMsgGameMatchSignOut.event_game_leaderboard_entries:type_name -> dota.CMsgGameMatchSignOut.EventGameLeaderboardEntry
	128, // 27: dota.CMsgGameMatchSignOut.ward_placements:type_name -> dota.CMsgGameMatchSignOut.WardPlacement
	26,  // 28: dota.CMsgGameMatchSignOut.gameplay_stats:type_name -> dota.CMsgSignOutGameplayStats
	187, // 29: dota.CMsgGameMatchSignOut.extra_messages:type_name -> dota.CExtraMsgBlock
	185, // 30: dota.CMsgSignOutDraftInfo.picks_bans:type_name -> dota.CMatchHeroSelectEvent
	188, // 31: dota.CMsgSignOutBotInfo.bot_difficulty_radiant:type_name -> dota.DOTABotDifficulty
	188, // 32: dota.CMsgSignOutBotInfo.bot_difficulty_dire:type_name -> dota.DOTABotDifficulty
	132, // 33: dota.CMsgSignOutTextMuteInfo.text_mute_messages:type_name -> dota.CMsgSignOutTextMuteInfo.TextMuteMessage
	133, // 34: dota.CMsgSignOutCommunicationSummary.players:type_name -> dota.CMsgSignOutCommunicationSummary.PlayerCommunication
	189, // 35: dota.CMsgGameMatchSignoutResponse.timed_reward_details:type_name -> dota.CLobbyTimedRewardDetails
	190, // 36: dota.CMsgGameMatchSignoutResponse.xp_reward_details:type_name -> dota.CSODOTALobbyMember
	191, // 37: dota.CMsgGameMatchSignoutResponse.match_details:type_name -> dota.CMsgDOTAMatch
	135, // 38: dota.CMsgGameMatchSignoutResponse.players_metadata:type_name -> dota.CMsgGameMatchSignoutResponse.PlayerMetadata
	192, // 39: dota.CMsgGameMatchSignoutResponse.mvp_data:type_name -> dota.CMvpData
	189, // 40: dota.CMsgTimedRewardContainer.timed_reward_details:type_name -> dota.CLobbyTimedRewardDetails
	193, // 41: dota.CMsgGameMatchSignOutEventGameData.event_id:type_name -> dota.EEvent
	136, // 42: dota.CMsgDOTALiveScoreboardUpdate.team_good:type_name -> dota.CMsgDOTALiveScoreboardUpdate.Team
	136, // 43: dota.CMsgDOTALiveScoreboardUpdate.team_bad:type_name -> dota.CMsgDOTALiveScoreboardUpdate.Team
	139, // 44: dota.CMsgDOTARequestBatchPlayerResourcesResponse.results:type_name -> dota.CMsgDOTARequestBatchPlayerResourcesResponse.Result
	194, // 45: dota.CMsgTournamentItemEvent.event_type:type_name -> dota.DOTA_TournamentEvents
	195, // 46: dota.CMsgTournamentItemEvent.hero_statues:type_name -> dota.CProtoItemHeroStatue
	194, // 47: dota.CMsgTournamentItemEventResponse.event_type:type_name -> dota.DOTA_TournamentEvents
	10,  // 48: dota.CMsgGameServerSaveGameResult.result:type_name -> dota.CMsgGameServerSaveGameResult.Result
	140, // 49: dota.CMsgDOTAAwardEventPoints.award_points:type_name -> dota.CMsgDOTAAwardEventPoints.AwardPoints
	193, // 50: dota.CMsgDOTAAwardEventPoints.event_id:type_name -> dota.EEvent
	141, // 51: dota.CMsgServerToGCSignoutAwardAdditionalDrops.drops:type_name -> dota.CMsgServerToGCSignoutAwardAdditionalDrops.AdditionalDrops
	142, // 52: dota.CMsgDOTAFrostivusTimeElapsed.users:type_name -> dota.CMsgDOTAFrostivusTimeElapsed.User
	193, // 53: dota.CMsgServerGetEventPoints.event_id:type_name -> dota.EEvent
	193, // 54: dota.CMsgServerGetEventPointsResponse.event_id:type_name -> dota.EEvent
	143, // 55: dota.CMsgServerGetEventPointsResponse.points:type_name -> dota.CMsgServerGetEventPointsResponse.Points
	144, // 56: dota.CMsgServerGrantSurveyPermission.surveys:type_name -> dota.CMsgServerGrantSurveyPermission.Survey
	145, // 57: dota.CMsgServerToGCMatchConnectionStats.players:type_name -> dota.CMsgServerToGCMatchConnectionStats.Player
	146, // 58: dota.CSerializedCombatLog.dictionary:type_name -> dota.CSerializedCombatLog.Dictionary
	196, // 59: dota.CSerializedCombatLog.entries:type_name -> dota.CMsgDOTACombatLogEntry
	148, // 60: dota.CMsgServerToGCGetAdditionalEquipsResponse.equips:type_name -> dota.CMsgServerToGCGetAdditionalEquipsResponse.CUserEquips
	197, // 61: dota.CMsgServerToGCGetProfileCardResponse.cards:type_name -> dota.CMsgDOTAProfileCard
	149, // 62: dota.CMsgServerToGCVictoryPredictions.records:type_name -> dota.CMsgServerToGCVictoryPredictions.Record
	3,   // 63: dota.CMsgSuspiciousActivity.activity:type_name -> dota.ESuspiciousActivity
	193, // 64: dota.CMsgServerToGCGetIngameEventData.event:type_name -> dota.EEvent
	150, // 65: dota.CMsgServerToGCKillSummaries.summaries:type_name -> dota.CMsgServerToGCKillSummaries.KillSummary
	151, // 66: dota.CMsgGCToServerPredictionResult.predictions:type_name -> dota.CMsgGCToServerPredictionResult.Prediction
	152, // 67: dota.CMsgSignOutUpdatePlayerChallenge.completed:type_name -> dota.CMsgSignOutUpdatePlayerChallenge.Challenge
	152, // 68: dota.CMsgSignOutUpdatePlayerChallenge.rerolled:type_name -> dota.CMsgSignOutUpdatePlayerChallenge.Challenge
	198, // 69: dota.CMsgServerToGCRerollPlayerChallenge.reroll_msg:type_name -> dota.CMsgClientToGCRerollPlayerChallenge
	153, // 70: dota.CMsgSignOutWagerStats.players:type_name -> dota.CMsgSignOutWagerStats.Player
	193, // 71: dota.CMsgSignOutWagerStats.event_id:type_name -> dota.EEvent
	154, // 72: dota.CMsgSpendWager.players:type_name -> dota.CMsgSpendWager.Player
	193, // 73: dota.CMsgSpendWager.event_id:type_name -> dota.EEvent
	155, // 74: dota.CMsgSignOutXPCoins.players:type_name -> dota.CMsgSignOutXPCoins.Player
	193, // 75: dota.CMsgSignOutXPCoins.event_id:type_name -> dota.EEvent
	156, // 76: dota.CMsgSignOutBounties.bounties:type_name -> dota.CMsgSignOutBounties.Bounty
	193, // 77: dota.CMsgSignOutBounties.event_id:type_name -> dota.EEvent
	193, // 78: dota.CMsgSignOutCommunityGoalProgress.event_id:type_name -> dota.EEvent
	157, // 79: dota.CMsgSignOutCommunityGoalProgress.event_increments:type_name -> dota.CMsgSignOutCommunityGoalProgress.EventGoalIncrement
	193, // 80: dota.CMsgServerToGCPostMatchTip.event_id:type_name -> dota.EEvent
	12,  // 81: dota.CMsgServerToGCPostMatchTipResponse.result:type_name -> dota.CMsgServerToGCPostMatchTipResponse.Result
	158, // 82: dota.CMsgServerToGCCompendiumInGamePredictionResults.results:type_name -> dota.CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult
	99,  // 83: dota.CMsgGCToGCCompendiumInGamePredictionResults.results:type_name -> dota.CMsgServerToGCCompendiumInGamePredictionResults
	160, // 84: dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.players:type_name -> dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.Player
	163, // 85: dota.CMsgServerToGCMatchStateHistory.match_states:type_name -> dota.CMsgServerToGCMatchStateHistory.MatchState
	164, // 86: dota.CMsgServerToGCCavernCrawlIsHeroActiveResponse.map_results:type_name -> dota.CMsgServerToGCCavernCrawlIsHeroActiveResponse.MapResults
	167, // 87: dota.CMsgDetailedGameStats.minutes:type_name -> dota.CMsgDetailedGameStats.MinuteEntry
	168, // 88: dota.CMsgDetailedGameStats.player_info:type_name -> dota.CMsgDetailedGameStats.PlayerInfo
	166, // 89: dota.CMsgDetailedGameStats.game_stats:type_name -> dota.CMsgDetailedGameStats.GameStats
	169, // 90: dota.CMsgAllStarStats.player_stats:type_name -> dota.CMsgAllStarStats.PlayerStats
	170, // 91: dota.CMsgNeutralItemStats.neutral_items:type_name -> dota.CMsgNeutralItemStats.NeutralItem
	171, // 92: dota.CMsgGCToServerLobbyHeroBanRates.ban_data:type_name -> dota.CMsgGCToServerLobbyHeroBanRates.HeroBanEntry
	173, // 93: dota.CMsgSignOutGuildContractProgress.player_contracts:type_name -> dota.CMsgSignOutGuildContractProgress.PlayerContract
	174, // 94: dota.CMsgSignOutGuildChallengeProgress.guild_challenges_progresses:type_name -> dota.CMsgSignOutGuildChallengeProgress.ChallengeProgress
	175, // 95: dota.CMsgSignOutMVPStats.players:type_name -> dota.CMsgSignOutMVPStats.Player
	178, // 96: dota.CMsgServerToGCGetGuildContractsResponse.player_contracts:type_name -> dota.CMsgServerToGCGetGuildContractsResponse.Player
	182, // 97: dota.CMsgPoorNetworkConditions.Player.disconnect_reason:type_name -> dota.ENetworkDisconnectionReason
	181, // 98: dota.CMsgConnectedPlayers.Player.leaver_state:type_name -> dota.CMsgLeaverState
	182, // 99: dota.CMsgConnectedPlayers.Player.disconnect_reason:type_name -> dota.ENetworkDisconnectionReason
	199, // 100: dota.CMsgSignOutGameplayStats.CPlayer.timed_player_stats:type_name -> dota.CMatchPlayerTimedStats
	200, // 101: dota.CMsgSignOutGameplayStats.CTeam.timed_team_stats:type_name -> dota.CMatchTeamTimedStats
	121, // 102: dota.CMsgSignOutGameplayStats.CTeam.players:type_name -> dota.CMsgSignOutGameplayStats.CPlayer
	129, // 103: dota.CMsgGameMatchSignOut.CTeam.players:type_name -> dota.CMsgGameMatchSignOut.CTeam.CPlayer
	201, // 104: dota.CMsgGameMatchSignOut.CTeam.CPlayer.ability_upgrades:type_name -> dota.CMatchPlayerAbilityUpgrade
	202, // 105: dota.CMsgGameMatchSignOut.CTeam.CPlayer.additional_units_inventory:type_name -> dota.CMatchAdditionalUnitInventory
	203, // 106: dota.CMsgGameMatchSignOut.CTeam.CPlayer.permanent_buffs:type_name -> dota.CMatchPlayerPermanentBuff
	130, // 107: dota.CMsgGameMatchSignOut.CTeam.CPlayer.custom_game_data:type_name -> dota.CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData
	131, // 108: dota.CMsgGameMatchSignOut.CTeam.CPlayer.hero_damage_received:type_name -> dota.CMsgGameMatchSignOut.CTeam.CPlayer.HeroDamageReceived
	8,   // 109: dota.CMsgGameMatchSignOut.CTeam.CPlayer.HeroDamageReceived.damage_type:type_name -> dota.CMsgGameMatchSignOut.CTeam.CPlayer.HeroDamageType
	134, // 110: dota.CMsgSignOutCommunicationSummary.PlayerCommunication.ping_details:type_name -> dota.CMsgSignOutCommunicationSummary.PlayerCommunication.PingDetail
	137, // 111: dota.CMsgDOTALiveScoreboardUpdate.Team.players:type_name -> dota.CMsgDOTALiveScoreboardUpdate.Team.Player
	9,   // 112: dota.CMsgDOTALiveScoreboardUpdate.Team.Player.ultimate_state:type_name -> dota.CMsgDOTALiveScoreboardUpdate.Team.Player.DOTAUltimateState
	138, // 113: dota.CMsgDOTALiveScoreboardUpdate.Team.Player.abilities:type_name -> dota.CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility
	147, // 114: dota.CSerializedCombatLog.Dictionary.strings:type_name -> dota.CSerializedCombatLog.Dictionary.DictString
	204, // 115: dota.CMsgServerToGCGetAdditionalEquipsResponse.CUserEquips.equips:type_name -> dota.CAdditionalEquipSlot
	11,  // 116: dota.CMsgGCToServerPredictionResult.Prediction.result:type_name -> dota.CMsgGCToServerPredictionResult.Prediction.EResult
	193, // 117: dota.CMsgSignOutUpdatePlayerChallenge.Challenge.event_id:type_name -> dota.EEvent
	159, // 118: dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.Player.item_purchases:type_name -> dota.CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase
	161, // 119: dota.CMsgServerToGCMatchStateHistory.TeamState.player_states:type_name -> dota.CMsgServerToGCMatchStateHistory.PlayerState
	162, // 120: dota.CMsgServerToGCMatchStateHistory.MatchState.radiant_state:type_name -> dota.CMsgServerToGCMatchStateHistory.TeamState
	162, // 121: dota.CMsgServerToGCMatchStateHistory.MatchState.dire_state:type_name -> dota.CMsgServerToGCMatchStateHistory.TeamState
	165, // 122: dota.CMsgDetailedGameStats.MinuteEntry.stats:type_name -> dota.CMsgDetailedGameStats.PlayerStatEntry
	172, // 123: dota.CMsgSignOutGuildContractProgress.PlayerContract.completed_contracts:type_name -> dota.CMsgSignOutGuildContractProgress.CompletedGuildEventContracts
	176, // 124: dota.CMsgSignOutMVPStats.Player.kill_eater_events:type_name -> dota.CMsgSignOutMVPStats.Player.KillEaterEvent
	193, // 125: dota.CMsgServerToGCGetGuildContractsResponse.Player.event_id:type_name -> dota.EEvent
	177, // 126: dota.CMsgServerToGCGetGuildContractsResponse.Player.contracts:type_name -> dota.CMsgServerToGCGetGuildContractsResponse.ContractDetails
	127, // [127:127] is the sub-list for method output_type
	127, // [127:127] is the sub-list for method input_type
	127, // [127:127] is the sub-list for extension type_name
	127, // [127:127] is the sub-list for extension extendee
	0,   // [0:127] is the sub-list for field type_name
}

func init() { file_dota_gcmessages_server_proto_init() }
func file_dota_gcmessages_server_proto_init() {
	if File_dota_gcmessages_server_proto != nil {
		return
	}
	file_steammessages_proto_init()
	file_dota_shared_enums_proto_init()
	file_dota_gcmessages_common_proto_init()
	file_econ_gcmessages_proto_init()
	file_network_connection_proto_init()
	file_dota_gcmessages_common_match_management_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_dota_gcmessages_server_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPoorNetworkConditions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGameserverCrash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgConnectedPlayers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGameServerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgLeaverDetected); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgLeaverDetectedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAFantasyFinalPlayerStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAFantasyLivePlayerStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAFantasyMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAUpdateClippy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerToGCRealtimeStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCToServerRealtimeStatsStartStop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCToServerUpdateSteamBroadcasting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSignOutGameplayStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGameMatchSignOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSignOutDraftInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSignOutBotInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSignOutTextMuteInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSignOutPlayerStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSignOutCommunicationSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGameMatchSignoutResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgTimedRewardContainer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGameMatchSignOutPermissionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGameMatchSignOutPermissionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGameMatchSignOutEventGameData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTALiveScoreboardUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTARequestPlayerResources); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTARequestPlayerResourcesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTARequestBatchPlayerResources); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTARequestBatchPlayerResourcesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAPlayerFailedToConnect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCToRelayConnect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCGCToLANServerRelayConnect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCToRelayConnectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCBanStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCBanStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgTournamentItemEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgTournamentItemEventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgTeamFanfare); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgResponseTeamFanfare); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGameServerUploadSaveGame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGameServerSaveGameResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGameServerGetLoadGame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGameServerGetLoadGameResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAGenerateDiretidePrizeList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAGenerateDiretidePrizeListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTARewardDiretidePrizes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTADiretidePrizesRewardedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAAwardEventPoints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerToGCSignoutAwardAdditionalDrops); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAFrostivusTimeElapsed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCToServerPingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCToServerPingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCToServerConsoleCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerGetEventPoints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerGetEventPointsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerGrantSurveyPermission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerGrantSurveyPermissionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerToGCMatchConnectionStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerGCUpdateSpectatorCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSerializedCombatLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerToGCGetAdditionalEquips); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerToGCGetAdditionalEquipsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerToGCGetProfileCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerToGCGetProfileCardResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerToGCVictoryPredictions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSuspiciousActivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerToGCRequestStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerToGCRequestStatus_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSignOutAssassinMiniGameInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerToGCGetIngameEventData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCToServerIngameEventDataOraclePA); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerToGCKillSummaries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCToServerPredictionResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerToGCLockCharmTrading); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSignOutUpdatePlayerChallenge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerToGCRerollPlayerChallenge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSignOutWagerStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSpendWager); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSignOutXPCoins); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSignOutBounties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSignOutCommunityGoalProgress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerToGCPostMatchTip); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerToGCPostMatchTipResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerToGCCloseCompendiumInGamePredictionVoting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerToGCCompendiumInGamePredictionResults); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerToGCCompendiumInGamePredictionResultsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCToGCCompendiumInGamePredictionResults); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerToGCMatchPlayerItemPurchaseHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerToGCMatchStateHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerToGCCavernCrawlIsHeroActive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerToGCCavernCrawlIsHeroActiveResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCtoServerTensorflowInstance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDetailedGameStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgAllStarStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgNeutralItemStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCToServerLobbyHeroBanRates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSignOutGuildContractProgress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSignOutGuildChallengeProgress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSignOutMVPStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCToServerRecordTrainingData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerToGCRefreshGuildContract); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerToGCRefreshGuildContractResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerToGCGetGuildContracts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerToGCGetGuildContractsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPoorNetworkConditions_Player); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgConnectedPlayers_Player); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSignOutGameplayStats_CPlayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSignOutGameplayStats_CTeam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGameMatchSignOut_CTeam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGameMatchSignOut_CAdditionalSignoutMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGameMatchSignOut_CSocialFeedMatchEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGameMatchSignOut_CCustomGameData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGameMatchSignOut_EventGameLeaderboardEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGameMatchSignOut_WardPlacement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGameMatchSignOut_CTeam_CPlayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSignOutTextMuteInfo_TextMuteMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSignOutCommunicationSummary_PlayerCommunication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGameMatchSignoutResponse_PlayerMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTALiveScoreboardUpdate_Team); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTALiveScoreboardUpdate_Team_Player); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTARequestBatchPlayerResourcesResponse_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAAwardEventPoints_AwardPoints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerToGCSignoutAwardAdditionalDrops_AdditionalDrops); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAFrostivusTimeElapsed_User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerGetEventPointsResponse_Points); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerGrantSurveyPermission_Survey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerToGCMatchConnectionStats_Player); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSerializedCombatLog_Dictionary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSerializedCombatLog_Dictionary_DictString); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerToGCGetAdditionalEquipsResponse_CUserEquips); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerToGCVictoryPredictions_Record); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerToGCKillSummaries_KillSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCToServerPredictionResult_Prediction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSignOutUpdatePlayerChallenge_Challenge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSignOutWagerStats_Player); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSpendWager_Player); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSignOutXPCoins_Player); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSignOutBounties_Bounty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSignOutCommunityGoalProgress_EventGoalIncrement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerToGCMatchPlayerItemPurchaseHistory_Player); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerToGCMatchStateHistory_PlayerState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerToGCMatchStateHistory_TeamState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerToGCMatchStateHistory_MatchState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDetailedGameStats_PlayerStatEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDetailedGameStats_GameStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDetailedGameStats_MinuteEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDetailedGameStats_PlayerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgAllStarStats_PlayerStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgNeutralItemStats_NeutralItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCToServerLobbyHeroBanRates_HeroBanEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSignOutGuildContractProgress_CompletedGuildEventContracts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSignOutGuildContractProgress_PlayerContract); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSignOutGuildChallengeProgress_ChallengeProgress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSignOutMVPStats_Player); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSignOutMVPStats_Player_KillEaterEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerToGCGetGuildContractsResponse_ContractDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_server_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerToGCGetGuildContractsResponse_Player); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dota_gcmessages_server_proto_rawDesc,
			NumEnums:      13,
			NumMessages:   166,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_dota_gcmessages_server_proto_goTypes,
		DependencyIndexes: file_dota_gcmessages_server_proto_depIdxs,
		EnumInfos:         file_dota_gcmessages_server_proto_enumTypes,
		MessageInfos:      file_dota_gcmessages_server_proto_msgTypes,
	}.Build()
	File_dota_gcmessages_server_proto = out.File
	file_dota_gcmessages_server_proto_rawDesc = nil
	file_dota_gcmessages_server_proto_goTypes = nil
	file_dota_gcmessages_server_proto_depIdxs = nil
}
