// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.5
// source: dota_gcmessages_webapi.proto

package dota

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ETeamFanContentStatus int32

const (
	ETeamFanContentStatus_TEAM_FAN_CONTENT_STATUS_INVALID   ETeamFanContentStatus = 0
	ETeamFanContentStatus_TEAM_FAN_CONTENT_STATUS_PENDING   ETeamFanContentStatus = 1
	ETeamFanContentStatus_TEAM_FAN_CONTENT_STATUS_EVALUATED ETeamFanContentStatus = 2
)

// Enum value maps for ETeamFanContentStatus.
var (
	ETeamFanContentStatus_name = map[int32]string{
		0: "TEAM_FAN_CONTENT_STATUS_INVALID",
		1: "TEAM_FAN_CONTENT_STATUS_PENDING",
		2: "TEAM_FAN_CONTENT_STATUS_EVALUATED",
	}
	ETeamFanContentStatus_value = map[string]int32{
		"TEAM_FAN_CONTENT_STATUS_INVALID":   0,
		"TEAM_FAN_CONTENT_STATUS_PENDING":   1,
		"TEAM_FAN_CONTENT_STATUS_EVALUATED": 2,
	}
)

func (x ETeamFanContentStatus) Enum() *ETeamFanContentStatus {
	p := new(ETeamFanContentStatus)
	*p = x
	return p
}

func (x ETeamFanContentStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ETeamFanContentStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_webapi_proto_enumTypes[0].Descriptor()
}

func (ETeamFanContentStatus) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_webapi_proto_enumTypes[0]
}

func (x ETeamFanContentStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ETeamFanContentStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ETeamFanContentStatus(num)
	return nil
}

// Deprecated: Use ETeamFanContentStatus.Descriptor instead.
func (ETeamFanContentStatus) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_webapi_proto_rawDescGZIP(), []int{0}
}

type ETeamFanContentAssetType int32

const (
	ETeamFanContentAssetType_k_eFanContentAssetType_LogoPNG      ETeamFanContentAssetType = 1
	ETeamFanContentAssetType_k_eFanContentAssetType_LogoSVG      ETeamFanContentAssetType = 2
	ETeamFanContentAssetType_k_eFanContentAssetType_Logo3D       ETeamFanContentAssetType = 3
	ETeamFanContentAssetType_k_eFanContentAssetType_Players      ETeamFanContentAssetType = 4
	ETeamFanContentAssetType_k_eFanContentAssetType_Sprays       ETeamFanContentAssetType = 5
	ETeamFanContentAssetType_k_eFanContentAssetType_Wallpapers   ETeamFanContentAssetType = 6
	ETeamFanContentAssetType_k_eFanContentAssetType_Emoticons    ETeamFanContentAssetType = 7
	ETeamFanContentAssetType_k_eFanContentAssetType_VoiceLines   ETeamFanContentAssetType = 8
	ETeamFanContentAssetType_k_eFanContentAssetType_Localization ETeamFanContentAssetType = 9
)

// Enum value maps for ETeamFanContentAssetType.
var (
	ETeamFanContentAssetType_name = map[int32]string{
		1: "k_eFanContentAssetType_LogoPNG",
		2: "k_eFanContentAssetType_LogoSVG",
		3: "k_eFanContentAssetType_Logo3D",
		4: "k_eFanContentAssetType_Players",
		5: "k_eFanContentAssetType_Sprays",
		6: "k_eFanContentAssetType_Wallpapers",
		7: "k_eFanContentAssetType_Emoticons",
		8: "k_eFanContentAssetType_VoiceLines",
		9: "k_eFanContentAssetType_Localization",
	}
	ETeamFanContentAssetType_value = map[string]int32{
		"k_eFanContentAssetType_LogoPNG":      1,
		"k_eFanContentAssetType_LogoSVG":      2,
		"k_eFanContentAssetType_Logo3D":       3,
		"k_eFanContentAssetType_Players":      4,
		"k_eFanContentAssetType_Sprays":       5,
		"k_eFanContentAssetType_Wallpapers":   6,
		"k_eFanContentAssetType_Emoticons":    7,
		"k_eFanContentAssetType_VoiceLines":   8,
		"k_eFanContentAssetType_Localization": 9,
	}
)

func (x ETeamFanContentAssetType) Enum() *ETeamFanContentAssetType {
	p := new(ETeamFanContentAssetType)
	*p = x
	return p
}

func (x ETeamFanContentAssetType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ETeamFanContentAssetType) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_webapi_proto_enumTypes[1].Descriptor()
}

func (ETeamFanContentAssetType) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_webapi_proto_enumTypes[1]
}

func (x ETeamFanContentAssetType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ETeamFanContentAssetType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ETeamFanContentAssetType(num)
	return nil
}

// Deprecated: Use ETeamFanContentAssetType.Descriptor instead.
func (ETeamFanContentAssetType) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_webapi_proto_rawDescGZIP(), []int{1}
}

type ETeamFanContentAssetStatus int32

const (
	ETeamFanContentAssetStatus_k_eFanContentAssetStatus_None     ETeamFanContentAssetStatus = 0
	ETeamFanContentAssetStatus_k_eFanContentAssetStatus_Approved ETeamFanContentAssetStatus = 1
	ETeamFanContentAssetStatus_k_eFanContentAssetStatus_Rejected ETeamFanContentAssetStatus = 2
)

// Enum value maps for ETeamFanContentAssetStatus.
var (
	ETeamFanContentAssetStatus_name = map[int32]string{
		0: "k_eFanContentAssetStatus_None",
		1: "k_eFanContentAssetStatus_Approved",
		2: "k_eFanContentAssetStatus_Rejected",
	}
	ETeamFanContentAssetStatus_value = map[string]int32{
		"k_eFanContentAssetStatus_None":     0,
		"k_eFanContentAssetStatus_Approved": 1,
		"k_eFanContentAssetStatus_Rejected": 2,
	}
)

func (x ETeamFanContentAssetStatus) Enum() *ETeamFanContentAssetStatus {
	p := new(ETeamFanContentAssetStatus)
	*p = x
	return p
}

func (x ETeamFanContentAssetStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ETeamFanContentAssetStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_webapi_proto_enumTypes[2].Descriptor()
}

func (ETeamFanContentAssetStatus) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_webapi_proto_enumTypes[2]
}

func (x ETeamFanContentAssetStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ETeamFanContentAssetStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ETeamFanContentAssetStatus(num)
	return nil
}

// Deprecated: Use ETeamFanContentAssetStatus.Descriptor instead.
func (ETeamFanContentAssetStatus) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_webapi_proto_rawDescGZIP(), []int{2}
}

type CMsgArcanaVotes_VotingState int32

const (
	CMsgArcanaVotes_FINISHED    CMsgArcanaVotes_VotingState = 0
	CMsgArcanaVotes_IN_PROGRESS CMsgArcanaVotes_VotingState = 1
	CMsgArcanaVotes_IN_FUTURE   CMsgArcanaVotes_VotingState = 2
)

// Enum value maps for CMsgArcanaVotes_VotingState.
var (
	CMsgArcanaVotes_VotingState_name = map[int32]string{
		0: "FINISHED",
		1: "IN_PROGRESS",
		2: "IN_FUTURE",
	}
	CMsgArcanaVotes_VotingState_value = map[string]int32{
		"FINISHED":    0,
		"IN_PROGRESS": 1,
		"IN_FUTURE":   2,
	}
)

func (x CMsgArcanaVotes_VotingState) Enum() *CMsgArcanaVotes_VotingState {
	p := new(CMsgArcanaVotes_VotingState)
	*p = x
	return p
}

func (x CMsgArcanaVotes_VotingState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgArcanaVotes_VotingState) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_webapi_proto_enumTypes[3].Descriptor()
}

func (CMsgArcanaVotes_VotingState) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_webapi_proto_enumTypes[3]
}

func (x CMsgArcanaVotes_VotingState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgArcanaVotes_VotingState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgArcanaVotes_VotingState(num)
	return nil
}

// Deprecated: Use CMsgArcanaVotes_VotingState.Descriptor instead.
func (CMsgArcanaVotes_VotingState) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_webapi_proto_rawDescGZIP(), []int{0, 0}
}

type CMsgDOTADPCFeed_EFeedElementType int32

const (
	CMsgDOTADPCFeed_FEED_SERIES_RESULT            CMsgDOTADPCFeed_EFeedElementType = 1
	CMsgDOTADPCFeed_FEED_MATCH_POPULAR            CMsgDOTADPCFeed_EFeedElementType = 2
	CMsgDOTADPCFeed_FEED_TEAM_UPCOMING_MATCH      CMsgDOTADPCFeed_EFeedElementType = 3
	CMsgDOTADPCFeed_FEED_TEAM_LEAGUE_RESULT       CMsgDOTADPCFeed_EFeedElementType = 4
	CMsgDOTADPCFeed_FEED_TEAM_ADD_PLAYER          CMsgDOTADPCFeed_EFeedElementType = 5
	CMsgDOTADPCFeed_FEED_TEAM_REMOVE_PLAYER       CMsgDOTADPCFeed_EFeedElementType = 6
	CMsgDOTADPCFeed_FEED_TEAM_DISBAND             CMsgDOTADPCFeed_EFeedElementType = 7
	CMsgDOTADPCFeed_FEED_LEAGUE_UPCOMING          CMsgDOTADPCFeed_EFeedElementType = 8
	CMsgDOTADPCFeed_FEED_LEAGUE_CONCLUDED         CMsgDOTADPCFeed_EFeedElementType = 9
	CMsgDOTADPCFeed_FEED_DPC_STANDINGS            CMsgDOTADPCFeed_EFeedElementType = 10
	CMsgDOTADPCFeed_FEED_ALERT_PREDICTIONS        CMsgDOTADPCFeed_EFeedElementType = 11
	CMsgDOTADPCFeed_FEED_ALERT_FANTASY            CMsgDOTADPCFeed_EFeedElementType = 12
	CMsgDOTADPCFeed_FEED_LEAGUE_LIVE_MATCH        CMsgDOTADPCFeed_EFeedElementType = 13
	CMsgDOTADPCFeed_FEED_LEAGUE_INPROGRESS_SERIES CMsgDOTADPCFeed_EFeedElementType = 14
)

// Enum value maps for CMsgDOTADPCFeed_EFeedElementType.
var (
	CMsgDOTADPCFeed_EFeedElementType_name = map[int32]string{
		1:  "FEED_SERIES_RESULT",
		2:  "FEED_MATCH_POPULAR",
		3:  "FEED_TEAM_UPCOMING_MATCH",
		4:  "FEED_TEAM_LEAGUE_RESULT",
		5:  "FEED_TEAM_ADD_PLAYER",
		6:  "FEED_TEAM_REMOVE_PLAYER",
		7:  "FEED_TEAM_DISBAND",
		8:  "FEED_LEAGUE_UPCOMING",
		9:  "FEED_LEAGUE_CONCLUDED",
		10: "FEED_DPC_STANDINGS",
		11: "FEED_ALERT_PREDICTIONS",
		12: "FEED_ALERT_FANTASY",
		13: "FEED_LEAGUE_LIVE_MATCH",
		14: "FEED_LEAGUE_INPROGRESS_SERIES",
	}
	CMsgDOTADPCFeed_EFeedElementType_value = map[string]int32{
		"FEED_SERIES_RESULT":            1,
		"FEED_MATCH_POPULAR":            2,
		"FEED_TEAM_UPCOMING_MATCH":      3,
		"FEED_TEAM_LEAGUE_RESULT":       4,
		"FEED_TEAM_ADD_PLAYER":          5,
		"FEED_TEAM_REMOVE_PLAYER":       6,
		"FEED_TEAM_DISBAND":             7,
		"FEED_LEAGUE_UPCOMING":          8,
		"FEED_LEAGUE_CONCLUDED":         9,
		"FEED_DPC_STANDINGS":            10,
		"FEED_ALERT_PREDICTIONS":        11,
		"FEED_ALERT_FANTASY":            12,
		"FEED_LEAGUE_LIVE_MATCH":        13,
		"FEED_LEAGUE_INPROGRESS_SERIES": 14,
	}
)

func (x CMsgDOTADPCFeed_EFeedElementType) Enum() *CMsgDOTADPCFeed_EFeedElementType {
	p := new(CMsgDOTADPCFeed_EFeedElementType)
	*p = x
	return p
}

func (x CMsgDOTADPCFeed_EFeedElementType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgDOTADPCFeed_EFeedElementType) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_webapi_proto_enumTypes[4].Descriptor()
}

func (CMsgDOTADPCFeed_EFeedElementType) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_webapi_proto_enumTypes[4]
}

func (x CMsgDOTADPCFeed_EFeedElementType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgDOTADPCFeed_EFeedElementType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgDOTADPCFeed_EFeedElementType(num)
	return nil
}

// Deprecated: Use CMsgDOTADPCFeed_EFeedElementType.Descriptor instead.
func (CMsgDOTADPCFeed_EFeedElementType) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_webapi_proto_rawDescGZIP(), []int{1, 0}
}

type CMsgTeamFanContentAssetStatusResponse_EResult int32

const (
	CMsgTeamFanContentAssetStatusResponse_k_eSuccess       CMsgTeamFanContentAssetStatusResponse_EResult = 0
	CMsgTeamFanContentAssetStatusResponse_k_eInternalError CMsgTeamFanContentAssetStatusResponse_EResult = 1
)

// Enum value maps for CMsgTeamFanContentAssetStatusResponse_EResult.
var (
	CMsgTeamFanContentAssetStatusResponse_EResult_name = map[int32]string{
		0: "k_eSuccess",
		1: "k_eInternalError",
	}
	CMsgTeamFanContentAssetStatusResponse_EResult_value = map[string]int32{
		"k_eSuccess":       0,
		"k_eInternalError": 1,
	}
)

func (x CMsgTeamFanContentAssetStatusResponse_EResult) Enum() *CMsgTeamFanContentAssetStatusResponse_EResult {
	p := new(CMsgTeamFanContentAssetStatusResponse_EResult)
	*p = x
	return p
}

func (x CMsgTeamFanContentAssetStatusResponse_EResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgTeamFanContentAssetStatusResponse_EResult) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_webapi_proto_enumTypes[5].Descriptor()
}

func (CMsgTeamFanContentAssetStatusResponse_EResult) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_webapi_proto_enumTypes[5]
}

func (x CMsgTeamFanContentAssetStatusResponse_EResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgTeamFanContentAssetStatusResponse_EResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgTeamFanContentAssetStatusResponse_EResult(num)
	return nil
}

// Deprecated: Use CMsgTeamFanContentAssetStatusResponse_EResult.Descriptor instead.
func (CMsgTeamFanContentAssetStatusResponse_EResult) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_webapi_proto_rawDescGZIP(), []int{5, 0}
}

type CMsgDPCEvent_ELeagueEvent int32

const (
	CMsgDPCEvent_EVENT_INVALID                             CMsgDPCEvent_ELeagueEvent = 0
	CMsgDPCEvent_SPRING_2021_LEAGUE                        CMsgDPCEvent_ELeagueEvent = 1
	CMsgDPCEvent_SPRING_2021_MAJOR                         CMsgDPCEvent_ELeagueEvent = 2
	CMsgDPCEvent_INTERNATIONAL_2021_QUALIFIERS             CMsgDPCEvent_ELeagueEvent = 3
	CMsgDPCEvent_INTERNATIONAL_2021                        CMsgDPCEvent_ELeagueEvent = 4
	CMsgDPCEvent_WINTER_2021_LEAGUE                        CMsgDPCEvent_ELeagueEvent = 5
	CMsgDPCEvent_WINTER_2021_LEAGUE_FINALS                 CMsgDPCEvent_ELeagueEvent = 6
	CMsgDPCEvent_SPRING_2022_LEAGUE                        CMsgDPCEvent_ELeagueEvent = 7
	CMsgDPCEvent_SPRING_2022_MAJOR                         CMsgDPCEvent_ELeagueEvent = 8
	CMsgDPCEvent_SUMMER_2022_LEAGUE                        CMsgDPCEvent_ELeagueEvent = 9
	CMsgDPCEvent_SUMMER_2022_MAJOR                         CMsgDPCEvent_ELeagueEvent = 10
	CMsgDPCEvent_INTERNATIONAL_2022                        CMsgDPCEvent_ELeagueEvent = 11
	CMsgDPCEvent_CHINA_REGIONAL_FINALS                     CMsgDPCEvent_ELeagueEvent = 12
	CMsgDPCEvent_INTERNATIONAL_2022_REGIONAL_QUALIFIERS    CMsgDPCEvent_ELeagueEvent = 13
	CMsgDPCEvent_INTERNATIONAL_2022_LAST_CHANCE_QUALIFIERS CMsgDPCEvent_ELeagueEvent = 14
	CMsgDPCEvent_WINTER_2023_LEAGUE                        CMsgDPCEvent_ELeagueEvent = 15
	CMsgDPCEvent_WINTER_2023_MAJOR                         CMsgDPCEvent_ELeagueEvent = 16
	CMsgDPCEvent_SPRING_2023_LEAGUE                        CMsgDPCEvent_ELeagueEvent = 17
	CMsgDPCEvent_SPRING_2023_MAJOR                         CMsgDPCEvent_ELeagueEvent = 18
	CMsgDPCEvent_SUMMER_2023_LEAGUE                        CMsgDPCEvent_ELeagueEvent = 19
	CMsgDPCEvent_SUMMER_2023_MAJOR                         CMsgDPCEvent_ELeagueEvent = 20
	CMsgDPCEvent_INTERNATIONAL_2023                        CMsgDPCEvent_ELeagueEvent = 21
)

// Enum value maps for CMsgDPCEvent_ELeagueEvent.
var (
	CMsgDPCEvent_ELeagueEvent_name = map[int32]string{
		0:  "EVENT_INVALID",
		1:  "SPRING_2021_LEAGUE",
		2:  "SPRING_2021_MAJOR",
		3:  "INTERNATIONAL_2021_QUALIFIERS",
		4:  "INTERNATIONAL_2021",
		5:  "WINTER_2021_LEAGUE",
		6:  "WINTER_2021_LEAGUE_FINALS",
		7:  "SPRING_2022_LEAGUE",
		8:  "SPRING_2022_MAJOR",
		9:  "SUMMER_2022_LEAGUE",
		10: "SUMMER_2022_MAJOR",
		11: "INTERNATIONAL_2022",
		12: "CHINA_REGIONAL_FINALS",
		13: "INTERNATIONAL_2022_REGIONAL_QUALIFIERS",
		14: "INTERNATIONAL_2022_LAST_CHANCE_QUALIFIERS",
		15: "WINTER_2023_LEAGUE",
		16: "WINTER_2023_MAJOR",
		17: "SPRING_2023_LEAGUE",
		18: "SPRING_2023_MAJOR",
		19: "SUMMER_2023_LEAGUE",
		20: "SUMMER_2023_MAJOR",
		21: "INTERNATIONAL_2023",
	}
	CMsgDPCEvent_ELeagueEvent_value = map[string]int32{
		"EVENT_INVALID":                             0,
		"SPRING_2021_LEAGUE":                        1,
		"SPRING_2021_MAJOR":                         2,
		"INTERNATIONAL_2021_QUALIFIERS":             3,
		"INTERNATIONAL_2021":                        4,
		"WINTER_2021_LEAGUE":                        5,
		"WINTER_2021_LEAGUE_FINALS":                 6,
		"SPRING_2022_LEAGUE":                        7,
		"SPRING_2022_MAJOR":                         8,
		"SUMMER_2022_LEAGUE":                        9,
		"SUMMER_2022_MAJOR":                         10,
		"INTERNATIONAL_2022":                        11,
		"CHINA_REGIONAL_FINALS":                     12,
		"INTERNATIONAL_2022_REGIONAL_QUALIFIERS":    13,
		"INTERNATIONAL_2022_LAST_CHANCE_QUALIFIERS": 14,
		"WINTER_2023_LEAGUE":                        15,
		"WINTER_2023_MAJOR":                         16,
		"SPRING_2023_LEAGUE":                        17,
		"SPRING_2023_MAJOR":                         18,
		"SUMMER_2023_LEAGUE":                        19,
		"SUMMER_2023_MAJOR":                         20,
		"INTERNATIONAL_2023":                        21,
	}
)

func (x CMsgDPCEvent_ELeagueEvent) Enum() *CMsgDPCEvent_ELeagueEvent {
	p := new(CMsgDPCEvent_ELeagueEvent)
	*p = x
	return p
}

func (x CMsgDPCEvent_ELeagueEvent) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgDPCEvent_ELeagueEvent) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_webapi_proto_enumTypes[6].Descriptor()
}

func (CMsgDPCEvent_ELeagueEvent) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_webapi_proto_enumTypes[6]
}

func (x CMsgDPCEvent_ELeagueEvent) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgDPCEvent_ELeagueEvent) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgDPCEvent_ELeagueEvent(num)
	return nil
}

// Deprecated: Use CMsgDPCEvent_ELeagueEvent.Descriptor instead.
func (CMsgDPCEvent_ELeagueEvent) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_webapi_proto_rawDescGZIP(), []int{8, 0}
}

type CMsgDPCEvent_ELeagueEventPhase int32

const (
	CMsgDPCEvent_PHASE_INVALID       CMsgDPCEvent_ELeagueEventPhase = 0
	CMsgDPCEvent_WILD_CARD           CMsgDPCEvent_ELeagueEventPhase = 1
	CMsgDPCEvent_GROUP_STAGE         CMsgDPCEvent_ELeagueEventPhase = 2
	CMsgDPCEvent_GROUP_A             CMsgDPCEvent_ELeagueEventPhase = 3
	CMsgDPCEvent_GROUP_B             CMsgDPCEvent_ELeagueEventPhase = 4
	CMsgDPCEvent_OVERALL             CMsgDPCEvent_ELeagueEventPhase = 5
	CMsgDPCEvent_PLAYOFF             CMsgDPCEvent_ELeagueEventPhase = 6
	CMsgDPCEvent_RESULTS             CMsgDPCEvent_ELeagueEventPhase = 7
	CMsgDPCEvent_DPC_POINT_STANDINGS CMsgDPCEvent_ELeagueEventPhase = 8
	CMsgDPCEvent_GROUP_C             CMsgDPCEvent_ELeagueEventPhase = 9
	CMsgDPCEvent_GROUP_D             CMsgDPCEvent_ELeagueEventPhase = 10
	CMsgDPCEvent_PLACEMENT           CMsgDPCEvent_ELeagueEventPhase = 11
)

// Enum value maps for CMsgDPCEvent_ELeagueEventPhase.
var (
	CMsgDPCEvent_ELeagueEventPhase_name = map[int32]string{
		0:  "PHASE_INVALID",
		1:  "WILD_CARD",
		2:  "GROUP_STAGE",
		3:  "GROUP_A",
		4:  "GROUP_B",
		5:  "OVERALL",
		6:  "PLAYOFF",
		7:  "RESULTS",
		8:  "DPC_POINT_STANDINGS",
		9:  "GROUP_C",
		10: "GROUP_D",
		11: "PLACEMENT",
	}
	CMsgDPCEvent_ELeagueEventPhase_value = map[string]int32{
		"PHASE_INVALID":       0,
		"WILD_CARD":           1,
		"GROUP_STAGE":         2,
		"GROUP_A":             3,
		"GROUP_B":             4,
		"OVERALL":             5,
		"PLAYOFF":             6,
		"RESULTS":             7,
		"DPC_POINT_STANDINGS": 8,
		"GROUP_C":             9,
		"GROUP_D":             10,
		"PLACEMENT":           11,
	}
)

func (x CMsgDPCEvent_ELeagueEventPhase) Enum() *CMsgDPCEvent_ELeagueEventPhase {
	p := new(CMsgDPCEvent_ELeagueEventPhase)
	*p = x
	return p
}

func (x CMsgDPCEvent_ELeagueEventPhase) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgDPCEvent_ELeagueEventPhase) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_webapi_proto_enumTypes[7].Descriptor()
}

func (CMsgDPCEvent_ELeagueEventPhase) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_webapi_proto_enumTypes[7]
}

func (x CMsgDPCEvent_ELeagueEventPhase) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgDPCEvent_ELeagueEventPhase) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgDPCEvent_ELeagueEventPhase(num)
	return nil
}

// Deprecated: Use CMsgDPCEvent_ELeagueEventPhase.Descriptor instead.
func (CMsgDPCEvent_ELeagueEventPhase) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_webapi_proto_rawDescGZIP(), []int{8, 1}
}

type CMsgDPCEvent_ELeagueEventType int32

const (
	CMsgDPCEvent_UNKNOWN                  CMsgDPCEvent_ELeagueEventType = 0
	CMsgDPCEvent_LEAGUE                   CMsgDPCEvent_ELeagueEventType = 1
	CMsgDPCEvent_MAJOR                    CMsgDPCEvent_ELeagueEventType = 2
	CMsgDPCEvent_INTERNATIONAL_QUALIFIERS CMsgDPCEvent_ELeagueEventType = 3
	CMsgDPCEvent_INTERNATIONAL            CMsgDPCEvent_ELeagueEventType = 4
	CMsgDPCEvent_LEAGUE_FINALS            CMsgDPCEvent_ELeagueEventType = 5
	CMsgDPCEvent_EXTERNAL                 CMsgDPCEvent_ELeagueEventType = 6
)

// Enum value maps for CMsgDPCEvent_ELeagueEventType.
var (
	CMsgDPCEvent_ELeagueEventType_name = map[int32]string{
		0: "UNKNOWN",
		1: "LEAGUE",
		2: "MAJOR",
		3: "INTERNATIONAL_QUALIFIERS",
		4: "INTERNATIONAL",
		5: "LEAGUE_FINALS",
		6: "EXTERNAL",
	}
	CMsgDPCEvent_ELeagueEventType_value = map[string]int32{
		"UNKNOWN":                  0,
		"LEAGUE":                   1,
		"MAJOR":                    2,
		"INTERNATIONAL_QUALIFIERS": 3,
		"INTERNATIONAL":            4,
		"LEAGUE_FINALS":            5,
		"EXTERNAL":                 6,
	}
)

func (x CMsgDPCEvent_ELeagueEventType) Enum() *CMsgDPCEvent_ELeagueEventType {
	p := new(CMsgDPCEvent_ELeagueEventType)
	*p = x
	return p
}

func (x CMsgDPCEvent_ELeagueEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgDPCEvent_ELeagueEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_webapi_proto_enumTypes[8].Descriptor()
}

func (CMsgDPCEvent_ELeagueEventType) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_webapi_proto_enumTypes[8]
}

func (x CMsgDPCEvent_ELeagueEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgDPCEvent_ELeagueEventType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgDPCEvent_ELeagueEventType(num)
	return nil
}

// Deprecated: Use CMsgDPCEvent_ELeagueEventType.Descriptor instead.
func (CMsgDPCEvent_ELeagueEventType) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_webapi_proto_rawDescGZIP(), []int{8, 2}
}

type CMsgDPCEvent_ETour int32

const (
	CMsgDPCEvent_TOUR_NONE CMsgDPCEvent_ETour = 0
	CMsgDPCEvent_TOUR_1    CMsgDPCEvent_ETour = 1
	CMsgDPCEvent_TOUR_2    CMsgDPCEvent_ETour = 2
	CMsgDPCEvent_TOUR_3    CMsgDPCEvent_ETour = 3
)

// Enum value maps for CMsgDPCEvent_ETour.
var (
	CMsgDPCEvent_ETour_name = map[int32]string{
		0: "TOUR_NONE",
		1: "TOUR_1",
		2: "TOUR_2",
		3: "TOUR_3",
	}
	CMsgDPCEvent_ETour_value = map[string]int32{
		"TOUR_NONE": 0,
		"TOUR_1":    1,
		"TOUR_2":    2,
		"TOUR_3":    3,
	}
)

func (x CMsgDPCEvent_ETour) Enum() *CMsgDPCEvent_ETour {
	p := new(CMsgDPCEvent_ETour)
	*p = x
	return p
}

func (x CMsgDPCEvent_ETour) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgDPCEvent_ETour) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_webapi_proto_enumTypes[9].Descriptor()
}

func (CMsgDPCEvent_ETour) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_webapi_proto_enumTypes[9]
}

func (x CMsgDPCEvent_ETour) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgDPCEvent_ETour) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgDPCEvent_ETour(num)
	return nil
}

// Deprecated: Use CMsgDPCEvent_ETour.Descriptor instead.
func (CMsgDPCEvent_ETour) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_webapi_proto_rawDescGZIP(), []int{8, 3}
}

type CMsgArcanaVotes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Matches                   []*CMsgArcanaVotes_Match `protobuf:"bytes,1,rep,name=matches" json:"matches,omitempty"`
	RoundTimeRemaining        *uint32                  `protobuf:"varint,2,opt,name=round_time_remaining,json=roundTimeRemaining" json:"round_time_remaining,omitempty"`
	RoundNumber               *uint32                  `protobuf:"varint,3,opt,name=round_number,json=roundNumber" json:"round_number,omitempty"`
	VotingState               *uint32                  `protobuf:"varint,4,opt,name=voting_state,json=votingState" json:"voting_state,omitempty"`
	IsCurrentRoundCalibrating *bool                    `protobuf:"varint,5,opt,name=is_current_round_calibrating,json=isCurrentRoundCalibrating" json:"is_current_round_calibrating,omitempty"`
	ClosestActiveMatchId      *uint32                  `protobuf:"varint,6,opt,name=closest_active_match_id,json=closestActiveMatchId" json:"closest_active_match_id,omitempty"`
	EventId                   *uint32                  `protobuf:"varint,7,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	VotingStartTime           *uint32                  `protobuf:"varint,8,opt,name=voting_start_time,json=votingStartTime" json:"voting_start_time,omitempty"`
}

func (x *CMsgArcanaVotes) Reset() {
	*x = CMsgArcanaVotes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_webapi_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgArcanaVotes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgArcanaVotes) ProtoMessage() {}

func (x *CMsgArcanaVotes) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_webapi_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgArcanaVotes.ProtoReflect.Descriptor instead.
func (*CMsgArcanaVotes) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_webapi_proto_rawDescGZIP(), []int{0}
}

func (x *CMsgArcanaVotes) GetMatches() []*CMsgArcanaVotes_Match {
	if x != nil {
		return x.Matches
	}
	return nil
}

func (x *CMsgArcanaVotes) GetRoundTimeRemaining() uint32 {
	if x != nil && x.RoundTimeRemaining != nil {
		return *x.RoundTimeRemaining
	}
	return 0
}

func (x *CMsgArcanaVotes) GetRoundNumber() uint32 {
	if x != nil && x.RoundNumber != nil {
		return *x.RoundNumber
	}
	return 0
}

func (x *CMsgArcanaVotes) GetVotingState() uint32 {
	if x != nil && x.VotingState != nil {
		return *x.VotingState
	}
	return 0
}

func (x *CMsgArcanaVotes) GetIsCurrentRoundCalibrating() bool {
	if x != nil && x.IsCurrentRoundCalibrating != nil {
		return *x.IsCurrentRoundCalibrating
	}
	return false
}

func (x *CMsgArcanaVotes) GetClosestActiveMatchId() uint32 {
	if x != nil && x.ClosestActiveMatchId != nil {
		return *x.ClosestActiveMatchId
	}
	return 0
}

func (x *CMsgArcanaVotes) GetEventId() uint32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

func (x *CMsgArcanaVotes) GetVotingStartTime() uint32 {
	if x != nil && x.VotingStartTime != nil {
		return *x.VotingStartTime
	}
	return 0
}

type CMsgDOTADPCFeed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Elements []*CMsgDOTADPCFeed_Element `protobuf:"bytes,1,rep,name=elements" json:"elements,omitempty"`
}

func (x *CMsgDOTADPCFeed) Reset() {
	*x = CMsgDOTADPCFeed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_webapi_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTADPCFeed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTADPCFeed) ProtoMessage() {}

func (x *CMsgDOTADPCFeed) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_webapi_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTADPCFeed.ProtoReflect.Descriptor instead.
func (*CMsgDOTADPCFeed) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_webapi_proto_rawDescGZIP(), []int{1}
}

func (x *CMsgDOTADPCFeed) GetElements() []*CMsgDOTADPCFeed_Element {
	if x != nil {
		return x.Elements
	}
	return nil
}

type CMsgDOTADPCUserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsPlusSubscriber *bool `protobuf:"varint,1,opt,name=is_plus_subscriber,json=isPlusSubscriber" json:"is_plus_subscriber,omitempty"`
}

func (x *CMsgDOTADPCUserInfo) Reset() {
	*x = CMsgDOTADPCUserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_webapi_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTADPCUserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTADPCUserInfo) ProtoMessage() {}

func (x *CMsgDOTADPCUserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_webapi_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTADPCUserInfo.ProtoReflect.Descriptor instead.
func (*CMsgDOTADPCUserInfo) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_webapi_proto_rawDescGZIP(), []int{2}
}

func (x *CMsgDOTADPCUserInfo) GetIsPlusSubscriber() bool {
	if x != nil && x.IsPlusSubscriber != nil {
		return *x.IsPlusSubscriber
	}
	return false
}

type CMsgDraftTrivia struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HasValidMatch            *bool                                 `protobuf:"varint,1,opt,name=has_valid_match,json=hasValidMatch" json:"has_valid_match,omitempty"`
	MatchHeroInfo            *CMsgDraftTrivia_DraftTriviaMatchInfo `protobuf:"bytes,2,opt,name=match_hero_info,json=matchHeroInfo" json:"match_hero_info,omitempty"`
	MatchRankTier            *uint32                               `protobuf:"varint,3,opt,name=match_rank_tier,json=matchRankTier" json:"match_rank_tier,omitempty"`
	EndTime                  *uint32                               `protobuf:"varint,4,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
	EventId                  *uint32                               `protobuf:"varint,5,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	CurrentMatchVotedRadiant *bool                                 `protobuf:"varint,6,opt,name=current_match_voted_radiant,json=currentMatchVotedRadiant" json:"current_match_voted_radiant,omitempty"`
	PreviousResult           *CMsgDraftTrivia_PreviousResult       `protobuf:"bytes,7,opt,name=previous_result,json=previousResult" json:"previous_result,omitempty"`
	CurrentStreak            *uint32                               `protobuf:"varint,8,opt,name=current_streak,json=currentStreak" json:"current_streak,omitempty"`
}

func (x *CMsgDraftTrivia) Reset() {
	*x = CMsgDraftTrivia{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_webapi_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDraftTrivia) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDraftTrivia) ProtoMessage() {}

func (x *CMsgDraftTrivia) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_webapi_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDraftTrivia.ProtoReflect.Descriptor instead.
func (*CMsgDraftTrivia) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_webapi_proto_rawDescGZIP(), []int{3}
}

func (x *CMsgDraftTrivia) GetHasValidMatch() bool {
	if x != nil && x.HasValidMatch != nil {
		return *x.HasValidMatch
	}
	return false
}

func (x *CMsgDraftTrivia) GetMatchHeroInfo() *CMsgDraftTrivia_DraftTriviaMatchInfo {
	if x != nil {
		return x.MatchHeroInfo
	}
	return nil
}

func (x *CMsgDraftTrivia) GetMatchRankTier() uint32 {
	if x != nil && x.MatchRankTier != nil {
		return *x.MatchRankTier
	}
	return 0
}

func (x *CMsgDraftTrivia) GetEndTime() uint32 {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return 0
}

func (x *CMsgDraftTrivia) GetEventId() uint32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

func (x *CMsgDraftTrivia) GetCurrentMatchVotedRadiant() bool {
	if x != nil && x.CurrentMatchVotedRadiant != nil {
		return *x.CurrentMatchVotedRadiant
	}
	return false
}

func (x *CMsgDraftTrivia) GetPreviousResult() *CMsgDraftTrivia_PreviousResult {
	if x != nil {
		return x.PreviousResult
	}
	return nil
}

func (x *CMsgDraftTrivia) GetCurrentStreak() uint32 {
	if x != nil && x.CurrentStreak != nil {
		return *x.CurrentStreak
	}
	return 0
}

type CMsgTeamFanContentAssetStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetType   *ETeamFanContentAssetType   `protobuf:"varint,1,opt,name=asset_type,json=assetType,enum=dota.ETeamFanContentAssetType" json:"asset_type,omitempty"`
	AssetIndex  *uint32                     `protobuf:"varint,2,opt,name=asset_index,json=assetIndex" json:"asset_index,omitempty"`
	AssetStatus *ETeamFanContentAssetStatus `protobuf:"varint,3,opt,name=asset_status,json=assetStatus,enum=dota.ETeamFanContentAssetStatus" json:"asset_status,omitempty"`
	Crc         *uint32                     `protobuf:"varint,4,opt,name=crc" json:"crc,omitempty"`
}

func (x *CMsgTeamFanContentAssetStatus) Reset() {
	*x = CMsgTeamFanContentAssetStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_webapi_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgTeamFanContentAssetStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgTeamFanContentAssetStatus) ProtoMessage() {}

func (x *CMsgTeamFanContentAssetStatus) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_webapi_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgTeamFanContentAssetStatus.ProtoReflect.Descriptor instead.
func (*CMsgTeamFanContentAssetStatus) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_webapi_proto_rawDescGZIP(), []int{4}
}

func (x *CMsgTeamFanContentAssetStatus) GetAssetType() ETeamFanContentAssetType {
	if x != nil && x.AssetType != nil {
		return *x.AssetType
	}
	return ETeamFanContentAssetType_k_eFanContentAssetType_LogoPNG
}

func (x *CMsgTeamFanContentAssetStatus) GetAssetIndex() uint32 {
	if x != nil && x.AssetIndex != nil {
		return *x.AssetIndex
	}
	return 0
}

func (x *CMsgTeamFanContentAssetStatus) GetAssetStatus() ETeamFanContentAssetStatus {
	if x != nil && x.AssetStatus != nil {
		return *x.AssetStatus
	}
	return ETeamFanContentAssetStatus_k_eFanContentAssetStatus_None
}

func (x *CMsgTeamFanContentAssetStatus) GetCrc() uint32 {
	if x != nil && x.Crc != nil {
		return *x.Crc
	}
	return 0
}

type CMsgTeamFanContentAssetStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *CMsgTeamFanContentAssetStatusResponse_EResult `protobuf:"varint,1,opt,name=result,enum=dota.CMsgTeamFanContentAssetStatusResponse_EResult" json:"result,omitempty"`
}

func (x *CMsgTeamFanContentAssetStatusResponse) Reset() {
	*x = CMsgTeamFanContentAssetStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_webapi_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgTeamFanContentAssetStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgTeamFanContentAssetStatusResponse) ProtoMessage() {}

func (x *CMsgTeamFanContentAssetStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_webapi_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgTeamFanContentAssetStatusResponse.ProtoReflect.Descriptor instead.
func (*CMsgTeamFanContentAssetStatusResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_webapi_proto_rawDescGZIP(), []int{5}
}

func (x *CMsgTeamFanContentAssetStatusResponse) GetResult() CMsgTeamFanContentAssetStatusResponse_EResult {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return CMsgTeamFanContentAssetStatusResponse_k_eSuccess
}

type CMsgTeamFanContentStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamStatusList []*CMsgTeamFanContentStatus_TeamStatus `protobuf:"bytes,1,rep,name=team_status_list,json=teamStatusList" json:"team_status_list,omitempty"`
}

func (x *CMsgTeamFanContentStatus) Reset() {
	*x = CMsgTeamFanContentStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_webapi_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgTeamFanContentStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgTeamFanContentStatus) ProtoMessage() {}

func (x *CMsgTeamFanContentStatus) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_webapi_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgTeamFanContentStatus.ProtoReflect.Descriptor instead.
func (*CMsgTeamFanContentStatus) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_webapi_proto_rawDescGZIP(), []int{6}
}

func (x *CMsgTeamFanContentStatus) GetTeamStatusList() []*CMsgTeamFanContentStatus_TeamStatus {
	if x != nil {
		return x.TeamStatusList
	}
	return nil
}

type CMsgTeamFanContentAutographStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamAutographs []*CMsgTeamFanContentAutographStatus_TeamStatus `protobuf:"bytes,1,rep,name=team_autographs,json=teamAutographs" json:"team_autographs,omitempty"`
}

func (x *CMsgTeamFanContentAutographStatus) Reset() {
	*x = CMsgTeamFanContentAutographStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_webapi_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgTeamFanContentAutographStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgTeamFanContentAutographStatus) ProtoMessage() {}

func (x *CMsgTeamFanContentAutographStatus) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_webapi_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgTeamFanContentAutographStatus.ProtoReflect.Descriptor instead.
func (*CMsgTeamFanContentAutographStatus) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_webapi_proto_rawDescGZIP(), []int{7}
}

func (x *CMsgTeamFanContentAutographStatus) GetTeamAutographs() []*CMsgTeamFanContentAutographStatus_TeamStatus {
	if x != nil {
		return x.TeamAutographs
	}
	return nil
}

type CMsgDPCEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Event                          *CMsgDPCEvent_ELeagueEvent     `protobuf:"varint,1,opt,name=event,enum=dota.CMsgDPCEvent_ELeagueEvent" json:"event,omitempty"`
	EventType                      *CMsgDPCEvent_ELeagueEventType `protobuf:"varint,2,opt,name=event_type,json=eventType,enum=dota.CMsgDPCEvent_ELeagueEventType" json:"event_type,omitempty"`
	Leagues                        []*CMsgDPCEvent_League         `protobuf:"bytes,3,rep,name=leagues" json:"leagues,omitempty"`
	RegistrationPeriod             *uint32                        `protobuf:"varint,4,opt,name=registration_period,json=registrationPeriod" json:"registration_period,omitempty"`
	IsEventUpcoming                *bool                          `protobuf:"varint,5,opt,name=is_event_upcoming,json=isEventUpcoming" json:"is_event_upcoming,omitempty"`
	IsEventCompleted               *bool                          `protobuf:"varint,6,opt,name=is_event_completed,json=isEventCompleted" json:"is_event_completed,omitempty"`
	EventName                      *string                        `protobuf:"bytes,7,opt,name=event_name,json=eventName" json:"event_name,omitempty"`
	MulticastLeagueId              *uint32                        `protobuf:"varint,8,opt,name=multicast_league_id,json=multicastLeagueId" json:"multicast_league_id,omitempty"`
	MulticastStreams               []uint32                       `protobuf:"varint,9,rep,name=multicast_streams,json=multicastStreams" json:"multicast_streams,omitempty"`
	Tour                           *CMsgDPCEvent_ETour            `protobuf:"varint,10,opt,name=tour,enum=dota.CMsgDPCEvent_ETour" json:"tour,omitempty"`
	TimestampDropLock              *uint32                        `protobuf:"varint,12,opt,name=timestamp_drop_lock,json=timestampDropLock" json:"timestamp_drop_lock,omitempty"`
	TimestampAddLock               *uint32                        `protobuf:"varint,13,opt,name=timestamp_add_lock,json=timestampAddLock" json:"timestamp_add_lock,omitempty"`
	TimestampContentDeadline       *uint32                        `protobuf:"varint,14,opt,name=timestamp_content_deadline,json=timestampContentDeadline" json:"timestamp_content_deadline,omitempty"`
	IsFantasyEnabled               *bool                          `protobuf:"varint,15,opt,name=is_fantasy_enabled,json=isFantasyEnabled" json:"is_fantasy_enabled,omitempty"`
	TimestampContentReviewDeadline *uint32                        `protobuf:"varint,16,opt,name=timestamp_content_review_deadline,json=timestampContentReviewDeadline" json:"timestamp_content_review_deadline,omitempty"`
}

func (x *CMsgDPCEvent) Reset() {
	*x = CMsgDPCEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_webapi_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDPCEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDPCEvent) ProtoMessage() {}

func (x *CMsgDPCEvent) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_webapi_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDPCEvent.ProtoReflect.Descriptor instead.
func (*CMsgDPCEvent) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_webapi_proto_rawDescGZIP(), []int{8}
}

func (x *CMsgDPCEvent) GetEvent() CMsgDPCEvent_ELeagueEvent {
	if x != nil && x.Event != nil {
		return *x.Event
	}
	return CMsgDPCEvent_EVENT_INVALID
}

func (x *CMsgDPCEvent) GetEventType() CMsgDPCEvent_ELeagueEventType {
	if x != nil && x.EventType != nil {
		return *x.EventType
	}
	return CMsgDPCEvent_UNKNOWN
}

func (x *CMsgDPCEvent) GetLeagues() []*CMsgDPCEvent_League {
	if x != nil {
		return x.Leagues
	}
	return nil
}

func (x *CMsgDPCEvent) GetRegistrationPeriod() uint32 {
	if x != nil && x.RegistrationPeriod != nil {
		return *x.RegistrationPeriod
	}
	return 0
}

func (x *CMsgDPCEvent) GetIsEventUpcoming() bool {
	if x != nil && x.IsEventUpcoming != nil {
		return *x.IsEventUpcoming
	}
	return false
}

func (x *CMsgDPCEvent) GetIsEventCompleted() bool {
	if x != nil && x.IsEventCompleted != nil {
		return *x.IsEventCompleted
	}
	return false
}

func (x *CMsgDPCEvent) GetEventName() string {
	if x != nil && x.EventName != nil {
		return *x.EventName
	}
	return ""
}

func (x *CMsgDPCEvent) GetMulticastLeagueId() uint32 {
	if x != nil && x.MulticastLeagueId != nil {
		return *x.MulticastLeagueId
	}
	return 0
}

func (x *CMsgDPCEvent) GetMulticastStreams() []uint32 {
	if x != nil {
		return x.MulticastStreams
	}
	return nil
}

func (x *CMsgDPCEvent) GetTour() CMsgDPCEvent_ETour {
	if x != nil && x.Tour != nil {
		return *x.Tour
	}
	return CMsgDPCEvent_TOUR_NONE
}

func (x *CMsgDPCEvent) GetTimestampDropLock() uint32 {
	if x != nil && x.TimestampDropLock != nil {
		return *x.TimestampDropLock
	}
	return 0
}

func (x *CMsgDPCEvent) GetTimestampAddLock() uint32 {
	if x != nil && x.TimestampAddLock != nil {
		return *x.TimestampAddLock
	}
	return 0
}

func (x *CMsgDPCEvent) GetTimestampContentDeadline() uint32 {
	if x != nil && x.TimestampContentDeadline != nil {
		return *x.TimestampContentDeadline
	}
	return 0
}

func (x *CMsgDPCEvent) GetIsFantasyEnabled() bool {
	if x != nil && x.IsFantasyEnabled != nil {
		return *x.IsFantasyEnabled
	}
	return false
}

func (x *CMsgDPCEvent) GetTimestampContentReviewDeadline() uint32 {
	if x != nil && x.TimestampContentReviewDeadline != nil {
		return *x.TimestampContentReviewDeadline
	}
	return 0
}

type CMsgDPCEventList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events []*CMsgDPCEvent `protobuf:"bytes,1,rep,name=events" json:"events,omitempty"`
}

func (x *CMsgDPCEventList) Reset() {
	*x = CMsgDPCEventList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_webapi_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDPCEventList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDPCEventList) ProtoMessage() {}

func (x *CMsgDPCEventList) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_webapi_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDPCEventList.ProtoReflect.Descriptor instead.
func (*CMsgDPCEventList) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_webapi_proto_rawDescGZIP(), []int{9}
}

func (x *CMsgDPCEventList) GetEvents() []*CMsgDPCEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

type CMsgDOTAFantasyCardLineup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Periods []*CMsgDOTAFantasyCardLineup_Period `protobuf:"bytes,1,rep,name=periods" json:"periods,omitempty"`
}

func (x *CMsgDOTAFantasyCardLineup) Reset() {
	*x = CMsgDOTAFantasyCardLineup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_webapi_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAFantasyCardLineup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAFantasyCardLineup) ProtoMessage() {}

func (x *CMsgDOTAFantasyCardLineup) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_webapi_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAFantasyCardLineup.ProtoReflect.Descriptor instead.
func (*CMsgDOTAFantasyCardLineup) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_webapi_proto_rawDescGZIP(), []int{10}
}

func (x *CMsgDOTAFantasyCardLineup) GetPeriods() []*CMsgDOTAFantasyCardLineup_Period {
	if x != nil {
		return x.Periods
	}
	return nil
}

type CMsgDOTAFantasyCardList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cards []*CMsgDOTAFantasyCardList_Card `protobuf:"bytes,1,rep,name=cards" json:"cards,omitempty"`
}

func (x *CMsgDOTAFantasyCardList) Reset() {
	*x = CMsgDOTAFantasyCardList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_webapi_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAFantasyCardList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAFantasyCardList) ProtoMessage() {}

func (x *CMsgDOTAFantasyCardList) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_webapi_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAFantasyCardList.ProtoReflect.Descriptor instead.
func (*CMsgDOTAFantasyCardList) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_webapi_proto_rawDescGZIP(), []int{11}
}

func (x *CMsgDOTAFantasyCardList) GetCards() []*CMsgDOTAFantasyCardList_Card {
	if x != nil {
		return x.Cards
	}
	return nil
}

type CMsgChatToxicityToxicPlayerMatchesReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rows []*CMsgChatToxicityToxicPlayerMatchesReport_IndividualRow `protobuf:"bytes,1,rep,name=rows" json:"rows,omitempty"`
}

func (x *CMsgChatToxicityToxicPlayerMatchesReport) Reset() {
	*x = CMsgChatToxicityToxicPlayerMatchesReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_webapi_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgChatToxicityToxicPlayerMatchesReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgChatToxicityToxicPlayerMatchesReport) ProtoMessage() {}

func (x *CMsgChatToxicityToxicPlayerMatchesReport) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_webapi_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgChatToxicityToxicPlayerMatchesReport.ProtoReflect.Descriptor instead.
func (*CMsgChatToxicityToxicPlayerMatchesReport) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_webapi_proto_rawDescGZIP(), []int{12}
}

func (x *CMsgChatToxicityToxicPlayerMatchesReport) GetRows() []*CMsgChatToxicityToxicPlayerMatchesReport_IndividualRow {
	if x != nil {
		return x.Rows
	}
	return nil
}

type CMsgChatToxicityReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumMatchesSeen           *uint32 `protobuf:"varint,1,opt,name=num_matches_seen,json=numMatchesSeen" json:"num_matches_seen,omitempty"`
	NumMessages              *uint32 `protobuf:"varint,2,opt,name=num_messages,json=numMessages" json:"num_messages,omitempty"`
	NumMessagesMlThinksToxic *uint32 `protobuf:"varint,4,opt,name=num_messages_ml_thinks_toxic,json=numMessagesMlThinksToxic" json:"num_messages_ml_thinks_toxic,omitempty"`
	Status                   *string `protobuf:"bytes,5,opt,name=status" json:"status,omitempty"`
	Result                   *uint32 `protobuf:"varint,6,opt,name=result" json:"result,omitempty"`
	Message                  *string `protobuf:"bytes,7,opt,name=message" json:"message,omitempty"`
}

func (x *CMsgChatToxicityReport) Reset() {
	*x = CMsgChatToxicityReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_webapi_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgChatToxicityReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgChatToxicityReport) ProtoMessage() {}

func (x *CMsgChatToxicityReport) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_webapi_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgChatToxicityReport.ProtoReflect.Descriptor instead.
func (*CMsgChatToxicityReport) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_webapi_proto_rawDescGZIP(), []int{13}
}

func (x *CMsgChatToxicityReport) GetNumMatchesSeen() uint32 {
	if x != nil && x.NumMatchesSeen != nil {
		return *x.NumMatchesSeen
	}
	return 0
}

func (x *CMsgChatToxicityReport) GetNumMessages() uint32 {
	if x != nil && x.NumMessages != nil {
		return *x.NumMessages
	}
	return 0
}

func (x *CMsgChatToxicityReport) GetNumMessagesMlThinksToxic() uint32 {
	if x != nil && x.NumMessagesMlThinksToxic != nil {
		return *x.NumMessagesMlThinksToxic
	}
	return 0
}

func (x *CMsgChatToxicityReport) GetStatus() string {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ""
}

func (x *CMsgChatToxicityReport) GetResult() uint32 {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return 0
}

func (x *CMsgChatToxicityReport) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type CMsgGetTeamAuditInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamId      *uint32                               `protobuf:"varint,1,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	TeamName    *string                               `protobuf:"bytes,2,opt,name=team_name,json=teamName" json:"team_name,omitempty"`
	Actions     []*CMsgGetTeamAuditInformation_Action `protobuf:"bytes,3,rep,name=actions" json:"actions,omitempty"`
	LastUpdated *uint32                               `protobuf:"varint,4,opt,name=last_updated,json=lastUpdated" json:"last_updated,omitempty"`
}

func (x *CMsgGetTeamAuditInformation) Reset() {
	*x = CMsgGetTeamAuditInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_webapi_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGetTeamAuditInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGetTeamAuditInformation) ProtoMessage() {}

func (x *CMsgGetTeamAuditInformation) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_webapi_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGetTeamAuditInformation.ProtoReflect.Descriptor instead.
func (*CMsgGetTeamAuditInformation) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_webapi_proto_rawDescGZIP(), []int{14}
}

func (x *CMsgGetTeamAuditInformation) GetTeamId() uint32 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

func (x *CMsgGetTeamAuditInformation) GetTeamName() string {
	if x != nil && x.TeamName != nil {
		return *x.TeamName
	}
	return ""
}

func (x *CMsgGetTeamAuditInformation) GetActions() []*CMsgGetTeamAuditInformation_Action {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *CMsgGetTeamAuditInformation) GetLastUpdated() uint32 {
	if x != nil && x.LastUpdated != nil {
		return *x.LastUpdated
	}
	return 0
}

type CMsgDOTADPCMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Match    *CMsgDOTAMatch      `protobuf:"bytes,1,opt,name=match" json:"match,omitempty"`
	Metadata *CDOTAMatchMetadata `protobuf:"bytes,2,opt,name=metadata" json:"metadata,omitempty"`
}

func (x *CMsgDOTADPCMatch) Reset() {
	*x = CMsgDOTADPCMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_webapi_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTADPCMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTADPCMatch) ProtoMessage() {}

func (x *CMsgDOTADPCMatch) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_webapi_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTADPCMatch.ProtoReflect.Descriptor instead.
func (*CMsgDOTADPCMatch) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_webapi_proto_rawDescGZIP(), []int{15}
}

func (x *CMsgDOTADPCMatch) GetMatch() *CMsgDOTAMatch {
	if x != nil {
		return x.Match
	}
	return nil
}

func (x *CMsgDOTADPCMatch) GetMetadata() *CDOTAMatchMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type CMsgArcanaVotes_Match struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId                  *uint32 `protobuf:"varint,1,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	HeroId_0                 *uint32 `protobuf:"varint,2,opt,name=hero_id_0,json=heroId0" json:"hero_id_0,omitempty"`
	HeroId_1                 *uint32 `protobuf:"varint,3,opt,name=hero_id_1,json=heroId1" json:"hero_id_1,omitempty"`
	HeroSeeding_0            *uint32 `protobuf:"varint,4,opt,name=hero_seeding_0,json=heroSeeding0" json:"hero_seeding_0,omitempty"`
	HeroSeeding_1            *uint32 `protobuf:"varint,5,opt,name=hero_seeding_1,json=heroSeeding1" json:"hero_seeding_1,omitempty"`
	VoteCount_0              *uint32 `protobuf:"varint,6,opt,name=vote_count_0,json=voteCount0" json:"vote_count_0,omitempty"`
	VoteCount_1              *uint32 `protobuf:"varint,7,opt,name=vote_count_1,json=voteCount1" json:"vote_count_1,omitempty"`
	VotingState              *uint32 `protobuf:"varint,8,opt,name=voting_state,json=votingState" json:"voting_state,omitempty"`
	RoundNumber              *uint32 `protobuf:"varint,9,opt,name=round_number,json=roundNumber" json:"round_number,omitempty"`
	IsVotesHidden            *bool   `protobuf:"varint,10,opt,name=is_votes_hidden,json=isVotesHidden" json:"is_votes_hidden,omitempty"`
	CalibrationTimeRemaining *uint32 `protobuf:"varint,11,opt,name=calibration_time_remaining,json=calibrationTimeRemaining" json:"calibration_time_remaining,omitempty"`
}

func (x *CMsgArcanaVotes_Match) Reset() {
	*x = CMsgArcanaVotes_Match{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_webapi_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgArcanaVotes_Match) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgArcanaVotes_Match) ProtoMessage() {}

func (x *CMsgArcanaVotes_Match) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_webapi_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgArcanaVotes_Match.ProtoReflect.Descriptor instead.
func (*CMsgArcanaVotes_Match) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_webapi_proto_rawDescGZIP(), []int{0, 0}
}

func (x *CMsgArcanaVotes_Match) GetMatchId() uint32 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgArcanaVotes_Match) GetHeroId_0() uint32 {
	if x != nil && x.HeroId_0 != nil {
		return *x.HeroId_0
	}
	return 0
}

func (x *CMsgArcanaVotes_Match) GetHeroId_1() uint32 {
	if x != nil && x.HeroId_1 != nil {
		return *x.HeroId_1
	}
	return 0
}

func (x *CMsgArcanaVotes_Match) GetHeroSeeding_0() uint32 {
	if x != nil && x.HeroSeeding_0 != nil {
		return *x.HeroSeeding_0
	}
	return 0
}

func (x *CMsgArcanaVotes_Match) GetHeroSeeding_1() uint32 {
	if x != nil && x.HeroSeeding_1 != nil {
		return *x.HeroSeeding_1
	}
	return 0
}

func (x *CMsgArcanaVotes_Match) GetVoteCount_0() uint32 {
	if x != nil && x.VoteCount_0 != nil {
		return *x.VoteCount_0
	}
	return 0
}

func (x *CMsgArcanaVotes_Match) GetVoteCount_1() uint32 {
	if x != nil && x.VoteCount_1 != nil {
		return *x.VoteCount_1
	}
	return 0
}

func (x *CMsgArcanaVotes_Match) GetVotingState() uint32 {
	if x != nil && x.VotingState != nil {
		return *x.VotingState
	}
	return 0
}

func (x *CMsgArcanaVotes_Match) GetRoundNumber() uint32 {
	if x != nil && x.RoundNumber != nil {
		return *x.RoundNumber
	}
	return 0
}

func (x *CMsgArcanaVotes_Match) GetIsVotesHidden() bool {
	if x != nil && x.IsVotesHidden != nil {
		return *x.IsVotesHidden
	}
	return false
}

func (x *CMsgArcanaVotes_Match) GetCalibrationTimeRemaining() uint32 {
	if x != nil && x.CalibrationTimeRemaining != nil {
		return *x.CalibrationTimeRemaining
	}
	return 0
}

type CMsgDOTADPCFeed_Element struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type          *CMsgDOTADPCFeed_EFeedElementType `protobuf:"varint,1,opt,name=type,enum=dota.CMsgDOTADPCFeed_EFeedElementType" json:"type,omitempty"`
	Timestamp     *uint32                           `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	SeriesId      *uint32                           `protobuf:"varint,3,opt,name=series_id,json=seriesId" json:"series_id,omitempty"`
	MatchId       *uint64                           `protobuf:"varint,4,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	TeamId        *uint32                           `protobuf:"varint,5,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	AccountId     *uint32                           `protobuf:"varint,6,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	LeagueId      *uint32                           `protobuf:"varint,7,opt,name=league_id,json=leagueId" json:"league_id,omitempty"`
	NodeId        *uint32                           `protobuf:"varint,8,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	ServerSteamId *uint64                           `protobuf:"varint,13,opt,name=server_steam_id,json=serverSteamId" json:"server_steam_id,omitempty"`
	Data_1        *uint32                           `protobuf:"varint,9,opt,name=data_1,json=data1" json:"data_1,omitempty"`
	Data_2        *uint32                           `protobuf:"varint,10,opt,name=data_2,json=data2" json:"data_2,omitempty"`
	Data_3        *uint32                           `protobuf:"varint,11,opt,name=data_3,json=data3" json:"data_3,omitempty"`
	Data_4        *uint32                           `protobuf:"varint,12,opt,name=data_4,json=data4" json:"data_4,omitempty"`
}

func (x *CMsgDOTADPCFeed_Element) Reset() {
	*x = CMsgDOTADPCFeed_Element{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_webapi_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTADPCFeed_Element) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTADPCFeed_Element) ProtoMessage() {}

func (x *CMsgDOTADPCFeed_Element) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_webapi_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTADPCFeed_Element.ProtoReflect.Descriptor instead.
func (*CMsgDOTADPCFeed_Element) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_webapi_proto_rawDescGZIP(), []int{1, 0}
}

func (x *CMsgDOTADPCFeed_Element) GetType() CMsgDOTADPCFeed_EFeedElementType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return CMsgDOTADPCFeed_FEED_SERIES_RESULT
}

func (x *CMsgDOTADPCFeed_Element) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *CMsgDOTADPCFeed_Element) GetSeriesId() uint32 {
	if x != nil && x.SeriesId != nil {
		return *x.SeriesId
	}
	return 0
}

func (x *CMsgDOTADPCFeed_Element) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgDOTADPCFeed_Element) GetTeamId() uint32 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

func (x *CMsgDOTADPCFeed_Element) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgDOTADPCFeed_Element) GetLeagueId() uint32 {
	if x != nil && x.LeagueId != nil {
		return *x.LeagueId
	}
	return 0
}

func (x *CMsgDOTADPCFeed_Element) GetNodeId() uint32 {
	if x != nil && x.NodeId != nil {
		return *x.NodeId
	}
	return 0
}

func (x *CMsgDOTADPCFeed_Element) GetServerSteamId() uint64 {
	if x != nil && x.ServerSteamId != nil {
		return *x.ServerSteamId
	}
	return 0
}

func (x *CMsgDOTADPCFeed_Element) GetData_1() uint32 {
	if x != nil && x.Data_1 != nil {
		return *x.Data_1
	}
	return 0
}

func (x *CMsgDOTADPCFeed_Element) GetData_2() uint32 {
	if x != nil && x.Data_2 != nil {
		return *x.Data_2
	}
	return 0
}

func (x *CMsgDOTADPCFeed_Element) GetData_3() uint32 {
	if x != nil && x.Data_3 != nil {
		return *x.Data_3
	}
	return 0
}

func (x *CMsgDOTADPCFeed_Element) GetData_4() uint32 {
	if x != nil && x.Data_4 != nil {
		return *x.Data_4
	}
	return 0
}

type CMsgDraftTrivia_DraftTriviaHeroInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeroId *uint32 `protobuf:"varint,1,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	Role   *uint32 `protobuf:"varint,2,opt,name=role" json:"role,omitempty"`
}

func (x *CMsgDraftTrivia_DraftTriviaHeroInfo) Reset() {
	*x = CMsgDraftTrivia_DraftTriviaHeroInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_webapi_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDraftTrivia_DraftTriviaHeroInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDraftTrivia_DraftTriviaHeroInfo) ProtoMessage() {}

func (x *CMsgDraftTrivia_DraftTriviaHeroInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_webapi_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDraftTrivia_DraftTriviaHeroInfo.ProtoReflect.Descriptor instead.
func (*CMsgDraftTrivia_DraftTriviaHeroInfo) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_webapi_proto_rawDescGZIP(), []int{3, 0}
}

func (x *CMsgDraftTrivia_DraftTriviaHeroInfo) GetHeroId() uint32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CMsgDraftTrivia_DraftTriviaHeroInfo) GetRole() uint32 {
	if x != nil && x.Role != nil {
		return *x.Role
	}
	return 0
}

type CMsgDraftTrivia_DraftTriviaMatchInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RadiantHeroes []*CMsgDraftTrivia_DraftTriviaHeroInfo `protobuf:"bytes,1,rep,name=radiant_heroes,json=radiantHeroes" json:"radiant_heroes,omitempty"`
	DireHeroes    []*CMsgDraftTrivia_DraftTriviaHeroInfo `protobuf:"bytes,2,rep,name=dire_heroes,json=direHeroes" json:"dire_heroes,omitempty"`
}

func (x *CMsgDraftTrivia_DraftTriviaMatchInfo) Reset() {
	*x = CMsgDraftTrivia_DraftTriviaMatchInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_webapi_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDraftTrivia_DraftTriviaMatchInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDraftTrivia_DraftTriviaMatchInfo) ProtoMessage() {}

func (x *CMsgDraftTrivia_DraftTriviaMatchInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_webapi_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDraftTrivia_DraftTriviaMatchInfo.ProtoReflect.Descriptor instead.
func (*CMsgDraftTrivia_DraftTriviaMatchInfo) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_webapi_proto_rawDescGZIP(), []int{3, 1}
}

func (x *CMsgDraftTrivia_DraftTriviaMatchInfo) GetRadiantHeroes() []*CMsgDraftTrivia_DraftTriviaHeroInfo {
	if x != nil {
		return x.RadiantHeroes
	}
	return nil
}

func (x *CMsgDraftTrivia_DraftTriviaMatchInfo) GetDireHeroes() []*CMsgDraftTrivia_DraftTriviaHeroInfo {
	if x != nil {
		return x.DireHeroes
	}
	return nil
}

type CMsgDraftTrivia_PreviousResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VotedCorrectly *bool                                 `protobuf:"varint,1,opt,name=voted_correctly,json=votedCorrectly" json:"voted_correctly,omitempty"`
	VotedRadiant   *bool                                 `protobuf:"varint,2,opt,name=voted_radiant,json=votedRadiant" json:"voted_radiant,omitempty"`
	MatchHeroInfo  *CMsgDraftTrivia_DraftTriviaMatchInfo `protobuf:"bytes,3,opt,name=match_hero_info,json=matchHeroInfo" json:"match_hero_info,omitempty"`
	MatchRankTier  *uint32                               `protobuf:"varint,4,opt,name=match_rank_tier,json=matchRankTier" json:"match_rank_tier,omitempty"`
	EndTime        *uint32                               `protobuf:"varint,5,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
	MatchId        *uint64                               `protobuf:"varint,6,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
}

func (x *CMsgDraftTrivia_PreviousResult) Reset() {
	*x = CMsgDraftTrivia_PreviousResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_webapi_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDraftTrivia_PreviousResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDraftTrivia_PreviousResult) ProtoMessage() {}

func (x *CMsgDraftTrivia_PreviousResult) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_webapi_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDraftTrivia_PreviousResult.ProtoReflect.Descriptor instead.
func (*CMsgDraftTrivia_PreviousResult) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_webapi_proto_rawDescGZIP(), []int{3, 2}
}

func (x *CMsgDraftTrivia_PreviousResult) GetVotedCorrectly() bool {
	if x != nil && x.VotedCorrectly != nil {
		return *x.VotedCorrectly
	}
	return false
}

func (x *CMsgDraftTrivia_PreviousResult) GetVotedRadiant() bool {
	if x != nil && x.VotedRadiant != nil {
		return *x.VotedRadiant
	}
	return false
}

func (x *CMsgDraftTrivia_PreviousResult) GetMatchHeroInfo() *CMsgDraftTrivia_DraftTriviaMatchInfo {
	if x != nil {
		return x.MatchHeroInfo
	}
	return nil
}

func (x *CMsgDraftTrivia_PreviousResult) GetMatchRankTier() uint32 {
	if x != nil && x.MatchRankTier != nil {
		return *x.MatchRankTier
	}
	return 0
}

func (x *CMsgDraftTrivia_PreviousResult) GetEndTime() uint32 {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return 0
}

func (x *CMsgDraftTrivia_PreviousResult) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

type CMsgTeamFanContentStatus_TeamStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              *string                          `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	TeamId            *uint32                          `protobuf:"varint,2,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	LogoUrl           *string                          `protobuf:"bytes,3,opt,name=logo_url,json=logoUrl" json:"logo_url,omitempty"`
	Status            *ETeamFanContentStatus           `protobuf:"varint,4,opt,name=status,enum=dota.ETeamFanContentStatus" json:"status,omitempty"`
	Timestamp         *uint32                          `protobuf:"varint,5,opt,name=timestamp" json:"timestamp,omitempty"`
	UgcLogo           *uint64                          `protobuf:"varint,7,opt,name=ugc_logo,json=ugcLogo" json:"ugc_logo,omitempty"`
	WorkshopAccountId *uint32                          `protobuf:"varint,8,opt,name=workshop_account_id,json=workshopAccountId" json:"workshop_account_id,omitempty"`
	Abbreviation      *string                          `protobuf:"bytes,9,opt,name=abbreviation" json:"abbreviation,omitempty"`
	VoicelineCount    *uint32                          `protobuf:"varint,10,opt,name=voiceline_count,json=voicelineCount" json:"voiceline_count,omitempty"`
	SprayCount        *uint32                          `protobuf:"varint,11,opt,name=spray_count,json=sprayCount" json:"spray_count,omitempty"`
	EmoticonCount     *uint32                          `protobuf:"varint,12,opt,name=emoticon_count,json=emoticonCount" json:"emoticon_count,omitempty"`
	WallpaperCount    *uint32                          `protobuf:"varint,13,opt,name=wallpaper_count,json=wallpaperCount" json:"wallpaper_count,omitempty"`
	Comment           *string                          `protobuf:"bytes,14,opt,name=comment" json:"comment,omitempty"`
	CommentTimestamp  *uint32                          `protobuf:"varint,15,opt,name=comment_timestamp,json=commentTimestamp" json:"comment_timestamp,omitempty"`
	AssetStatus       []*CMsgTeamFanContentAssetStatus `protobuf:"bytes,16,rep,name=asset_status,json=assetStatus" json:"asset_status,omitempty"`
	EmailTimestamp    *uint32                          `protobuf:"varint,17,opt,name=email_timestamp,json=emailTimestamp" json:"email_timestamp,omitempty"`
	EmailTier         *uint32                          `protobuf:"varint,18,opt,name=email_tier,json=emailTier" json:"email_tier,omitempty"`
	Languages         *string                          `protobuf:"bytes,19,opt,name=languages" json:"languages,omitempty"`
}

func (x *CMsgTeamFanContentStatus_TeamStatus) Reset() {
	*x = CMsgTeamFanContentStatus_TeamStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_webapi_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgTeamFanContentStatus_TeamStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgTeamFanContentStatus_TeamStatus) ProtoMessage() {}

func (x *CMsgTeamFanContentStatus_TeamStatus) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_webapi_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgTeamFanContentStatus_TeamStatus.ProtoReflect.Descriptor instead.
func (*CMsgTeamFanContentStatus_TeamStatus) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_webapi_proto_rawDescGZIP(), []int{6, 0}
}

func (x *CMsgTeamFanContentStatus_TeamStatus) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CMsgTeamFanContentStatus_TeamStatus) GetTeamId() uint32 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

func (x *CMsgTeamFanContentStatus_TeamStatus) GetLogoUrl() string {
	if x != nil && x.LogoUrl != nil {
		return *x.LogoUrl
	}
	return ""
}

func (x *CMsgTeamFanContentStatus_TeamStatus) GetStatus() ETeamFanContentStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ETeamFanContentStatus_TEAM_FAN_CONTENT_STATUS_INVALID
}

func (x *CMsgTeamFanContentStatus_TeamStatus) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *CMsgTeamFanContentStatus_TeamStatus) GetUgcLogo() uint64 {
	if x != nil && x.UgcLogo != nil {
		return *x.UgcLogo
	}
	return 0
}

func (x *CMsgTeamFanContentStatus_TeamStatus) GetWorkshopAccountId() uint32 {
	if x != nil && x.WorkshopAccountId != nil {
		return *x.WorkshopAccountId
	}
	return 0
}

func (x *CMsgTeamFanContentStatus_TeamStatus) GetAbbreviation() string {
	if x != nil && x.Abbreviation != nil {
		return *x.Abbreviation
	}
	return ""
}

func (x *CMsgTeamFanContentStatus_TeamStatus) GetVoicelineCount() uint32 {
	if x != nil && x.VoicelineCount != nil {
		return *x.VoicelineCount
	}
	return 0
}

func (x *CMsgTeamFanContentStatus_TeamStatus) GetSprayCount() uint32 {
	if x != nil && x.SprayCount != nil {
		return *x.SprayCount
	}
	return 0
}

func (x *CMsgTeamFanContentStatus_TeamStatus) GetEmoticonCount() uint32 {
	if x != nil && x.EmoticonCount != nil {
		return *x.EmoticonCount
	}
	return 0
}

func (x *CMsgTeamFanContentStatus_TeamStatus) GetWallpaperCount() uint32 {
	if x != nil && x.WallpaperCount != nil {
		return *x.WallpaperCount
	}
	return 0
}

func (x *CMsgTeamFanContentStatus_TeamStatus) GetComment() string {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return ""
}

func (x *CMsgTeamFanContentStatus_TeamStatus) GetCommentTimestamp() uint32 {
	if x != nil && x.CommentTimestamp != nil {
		return *x.CommentTimestamp
	}
	return 0
}

func (x *CMsgTeamFanContentStatus_TeamStatus) GetAssetStatus() []*CMsgTeamFanContentAssetStatus {
	if x != nil {
		return x.AssetStatus
	}
	return nil
}

func (x *CMsgTeamFanContentStatus_TeamStatus) GetEmailTimestamp() uint32 {
	if x != nil && x.EmailTimestamp != nil {
		return *x.EmailTimestamp
	}
	return 0
}

func (x *CMsgTeamFanContentStatus_TeamStatus) GetEmailTier() uint32 {
	if x != nil && x.EmailTier != nil {
		return *x.EmailTier
	}
	return 0
}

func (x *CMsgTeamFanContentStatus_TeamStatus) GetLanguages() string {
	if x != nil && x.Languages != nil {
		return *x.Languages
	}
	return ""
}

type CMsgTeamFanContentAutographStatus_AutographStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProName   *string `protobuf:"bytes,1,opt,name=pro_name,json=proName" json:"pro_name,omitempty"`
	AccountId *uint32 `protobuf:"varint,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Timestamp *uint32 `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	File      *string `protobuf:"bytes,4,opt,name=file" json:"file,omitempty"`
}

func (x *CMsgTeamFanContentAutographStatus_AutographStatus) Reset() {
	*x = CMsgTeamFanContentAutographStatus_AutographStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_webapi_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgTeamFanContentAutographStatus_AutographStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgTeamFanContentAutographStatus_AutographStatus) ProtoMessage() {}

func (x *CMsgTeamFanContentAutographStatus_AutographStatus) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_webapi_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgTeamFanContentAutographStatus_AutographStatus.ProtoReflect.Descriptor instead.
func (*CMsgTeamFanContentAutographStatus_AutographStatus) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_webapi_proto_rawDescGZIP(), []int{7, 0}
}

func (x *CMsgTeamFanContentAutographStatus_AutographStatus) GetProName() string {
	if x != nil && x.ProName != nil {
		return *x.ProName
	}
	return ""
}

func (x *CMsgTeamFanContentAutographStatus_AutographStatus) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgTeamFanContentAutographStatus_AutographStatus) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *CMsgTeamFanContentAutographStatus_AutographStatus) GetFile() string {
	if x != nil && x.File != nil {
		return *x.File
	}
	return ""
}

type CMsgTeamFanContentAutographStatus_TeamStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              *string                                              `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	TeamId            *uint32                                              `protobuf:"varint,2,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	Autographs        []*CMsgTeamFanContentAutographStatus_AutographStatus `protobuf:"bytes,3,rep,name=autographs" json:"autographs,omitempty"`
	WorkshopAccountId *uint32                                              `protobuf:"varint,4,opt,name=workshop_account_id,json=workshopAccountId" json:"workshop_account_id,omitempty"`
}

func (x *CMsgTeamFanContentAutographStatus_TeamStatus) Reset() {
	*x = CMsgTeamFanContentAutographStatus_TeamStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_webapi_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgTeamFanContentAutographStatus_TeamStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgTeamFanContentAutographStatus_TeamStatus) ProtoMessage() {}

func (x *CMsgTeamFanContentAutographStatus_TeamStatus) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_webapi_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgTeamFanContentAutographStatus_TeamStatus.ProtoReflect.Descriptor instead.
func (*CMsgTeamFanContentAutographStatus_TeamStatus) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_webapi_proto_rawDescGZIP(), []int{7, 1}
}

func (x *CMsgTeamFanContentAutographStatus_TeamStatus) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CMsgTeamFanContentAutographStatus_TeamStatus) GetTeamId() uint32 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

func (x *CMsgTeamFanContentAutographStatus_TeamStatus) GetAutographs() []*CMsgTeamFanContentAutographStatus_AutographStatus {
	if x != nil {
		return x.Autographs
	}
	return nil
}

func (x *CMsgTeamFanContentAutographStatus_TeamStatus) GetWorkshopAccountId() uint32 {
	if x != nil && x.WorkshopAccountId != nil {
		return *x.WorkshopAccountId
	}
	return 0
}

type CMsgDPCEvent_PhaseInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phase       *CMsgDPCEvent_ELeagueEventPhase `protobuf:"varint,1,opt,name=phase,enum=dota.CMsgDPCEvent_ELeagueEventPhase" json:"phase,omitempty"`
	NodeGroupId *uint32                         `protobuf:"varint,2,opt,name=node_group_id,json=nodeGroupId" json:"node_group_id,omitempty"`
}

func (x *CMsgDPCEvent_PhaseInfo) Reset() {
	*x = CMsgDPCEvent_PhaseInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_webapi_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDPCEvent_PhaseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDPCEvent_PhaseInfo) ProtoMessage() {}

func (x *CMsgDPCEvent_PhaseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_webapi_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDPCEvent_PhaseInfo.ProtoReflect.Descriptor instead.
func (*CMsgDPCEvent_PhaseInfo) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_webapi_proto_rawDescGZIP(), []int{8, 0}
}

func (x *CMsgDPCEvent_PhaseInfo) GetPhase() CMsgDPCEvent_ELeagueEventPhase {
	if x != nil && x.Phase != nil {
		return *x.Phase
	}
	return CMsgDPCEvent_PHASE_INVALID
}

func (x *CMsgDPCEvent_PhaseInfo) GetNodeGroupId() uint32 {
	if x != nil && x.NodeGroupId != nil {
		return *x.NodeGroupId
	}
	return 0
}

type CMsgDPCEvent_League struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region   *ELeagueRegion            `protobuf:"varint,1,opt,name=region,enum=dota.ELeagueRegion" json:"region,omitempty"`
	Division *ELeagueDivision          `protobuf:"varint,2,opt,name=division,enum=dota.ELeagueDivision" json:"division,omitempty"`
	LeagueId *uint32                   `protobuf:"varint,3,opt,name=league_id,json=leagueId" json:"league_id,omitempty"`
	Phases   []*CMsgDPCEvent_PhaseInfo `protobuf:"bytes,4,rep,name=phases" json:"phases,omitempty"`
}

func (x *CMsgDPCEvent_League) Reset() {
	*x = CMsgDPCEvent_League{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_webapi_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDPCEvent_League) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDPCEvent_League) ProtoMessage() {}

func (x *CMsgDPCEvent_League) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_webapi_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDPCEvent_League.ProtoReflect.Descriptor instead.
func (*CMsgDPCEvent_League) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_webapi_proto_rawDescGZIP(), []int{8, 1}
}

func (x *CMsgDPCEvent_League) GetRegion() ELeagueRegion {
	if x != nil && x.Region != nil {
		return *x.Region
	}
	return ELeagueRegion_LEAGUE_REGION_UNSET
}

func (x *CMsgDPCEvent_League) GetDivision() ELeagueDivision {
	if x != nil && x.Division != nil {
		return *x.Division
	}
	return ELeagueDivision_LEAGUE_DIVISION_UNSET
}

func (x *CMsgDPCEvent_League) GetLeagueId() uint32 {
	if x != nil && x.LeagueId != nil {
		return *x.LeagueId
	}
	return 0
}

func (x *CMsgDPCEvent_League) GetPhases() []*CMsgDPCEvent_PhaseInfo {
	if x != nil {
		return x.Phases
	}
	return nil
}

type CMsgDOTAFantasyCardLineup_CardBonus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BonusStat  *uint32 `protobuf:"varint,1,opt,name=bonus_stat,json=bonusStat" json:"bonus_stat,omitempty"`
	BonusValue *uint32 `protobuf:"varint,2,opt,name=bonus_value,json=bonusValue" json:"bonus_value,omitempty"`
}

func (x *CMsgDOTAFantasyCardLineup_CardBonus) Reset() {
	*x = CMsgDOTAFantasyCardLineup_CardBonus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_webapi_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAFantasyCardLineup_CardBonus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAFantasyCardLineup_CardBonus) ProtoMessage() {}

func (x *CMsgDOTAFantasyCardLineup_CardBonus) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_webapi_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAFantasyCardLineup_CardBonus.ProtoReflect.Descriptor instead.
func (*CMsgDOTAFantasyCardLineup_CardBonus) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_webapi_proto_rawDescGZIP(), []int{10, 0}
}

func (x *CMsgDOTAFantasyCardLineup_CardBonus) GetBonusStat() uint32 {
	if x != nil && x.BonusStat != nil {
		return *x.BonusStat
	}
	return 0
}

func (x *CMsgDOTAFantasyCardLineup_CardBonus) GetBonusValue() uint32 {
	if x != nil && x.BonusValue != nil {
		return *x.BonusValue
	}
	return 0
}

type CMsgDOTAFantasyCardLineup_Card struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerAccountId *uint32                                `protobuf:"varint,1,opt,name=player_account_id,json=playerAccountId" json:"player_account_id,omitempty"`
	PlayerName      *string                                `protobuf:"bytes,2,opt,name=player_name,json=playerName" json:"player_name,omitempty"`
	TeamId          *uint32                                `protobuf:"varint,3,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	TeamName        *string                                `protobuf:"bytes,4,opt,name=team_name,json=teamName" json:"team_name,omitempty"`
	Role            *uint32                                `protobuf:"varint,5,opt,name=role" json:"role,omitempty"`
	Bonuses         []*CMsgDOTAFantasyCardLineup_CardBonus `protobuf:"bytes,6,rep,name=bonuses" json:"bonuses,omitempty"`
	Score           *float32                               `protobuf:"fixed32,7,opt,name=score" json:"score,omitempty"`
	Finalized       *bool                                  `protobuf:"varint,8,opt,name=finalized" json:"finalized,omitempty"`
	ItemId          *uint64                                `protobuf:"varint,9,opt,name=item_id,json=itemId" json:"item_id,omitempty"`
}

func (x *CMsgDOTAFantasyCardLineup_Card) Reset() {
	*x = CMsgDOTAFantasyCardLineup_Card{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_webapi_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAFantasyCardLineup_Card) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAFantasyCardLineup_Card) ProtoMessage() {}

func (x *CMsgDOTAFantasyCardLineup_Card) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_webapi_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAFantasyCardLineup_Card.ProtoReflect.Descriptor instead.
func (*CMsgDOTAFantasyCardLineup_Card) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_webapi_proto_rawDescGZIP(), []int{10, 1}
}

func (x *CMsgDOTAFantasyCardLineup_Card) GetPlayerAccountId() uint32 {
	if x != nil && x.PlayerAccountId != nil {
		return *x.PlayerAccountId
	}
	return 0
}

func (x *CMsgDOTAFantasyCardLineup_Card) GetPlayerName() string {
	if x != nil && x.PlayerName != nil {
		return *x.PlayerName
	}
	return ""
}

func (x *CMsgDOTAFantasyCardLineup_Card) GetTeamId() uint32 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

func (x *CMsgDOTAFantasyCardLineup_Card) GetTeamName() string {
	if x != nil && x.TeamName != nil {
		return *x.TeamName
	}
	return ""
}

func (x *CMsgDOTAFantasyCardLineup_Card) GetRole() uint32 {
	if x != nil && x.Role != nil {
		return *x.Role
	}
	return 0
}

func (x *CMsgDOTAFantasyCardLineup_Card) GetBonuses() []*CMsgDOTAFantasyCardLineup_CardBonus {
	if x != nil {
		return x.Bonuses
	}
	return nil
}

func (x *CMsgDOTAFantasyCardLineup_Card) GetScore() float32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

func (x *CMsgDOTAFantasyCardLineup_Card) GetFinalized() bool {
	if x != nil && x.Finalized != nil {
		return *x.Finalized
	}
	return false
}

func (x *CMsgDOTAFantasyCardLineup_Card) GetItemId() uint64 {
	if x != nil && x.ItemId != nil {
		return *x.ItemId
	}
	return 0
}

type CMsgDOTAFantasyCardLineup_League struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeagueId *uint32                           `protobuf:"varint,1,opt,name=league_id,json=leagueId" json:"league_id,omitempty"`
	Cards    []*CMsgDOTAFantasyCardLineup_Card `protobuf:"bytes,2,rep,name=cards" json:"cards,omitempty"`
	Score    *float32                          `protobuf:"fixed32,3,opt,name=score" json:"score,omitempty"`
}

func (x *CMsgDOTAFantasyCardLineup_League) Reset() {
	*x = CMsgDOTAFantasyCardLineup_League{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_webapi_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAFantasyCardLineup_League) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAFantasyCardLineup_League) ProtoMessage() {}

func (x *CMsgDOTAFantasyCardLineup_League) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_webapi_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAFantasyCardLineup_League.ProtoReflect.Descriptor instead.
func (*CMsgDOTAFantasyCardLineup_League) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_webapi_proto_rawDescGZIP(), []int{10, 2}
}

func (x *CMsgDOTAFantasyCardLineup_League) GetLeagueId() uint32 {
	if x != nil && x.LeagueId != nil {
		return *x.LeagueId
	}
	return 0
}

func (x *CMsgDOTAFantasyCardLineup_League) GetCards() []*CMsgDOTAFantasyCardLineup_Card {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *CMsgDOTAFantasyCardLineup_League) GetScore() float32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

type CMsgDOTAFantasyCardLineup_Period struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FantasyPeriod  *uint32                             `protobuf:"varint,1,opt,name=fantasy_period,json=fantasyPeriod" json:"fantasy_period,omitempty"`
	TimestampStart *uint32                             `protobuf:"varint,2,opt,name=timestamp_start,json=timestampStart" json:"timestamp_start,omitempty"`
	TimestampEnd   *uint32                             `protobuf:"varint,3,opt,name=timestamp_end,json=timestampEnd" json:"timestamp_end,omitempty"`
	Leagues        []*CMsgDOTAFantasyCardLineup_League `protobuf:"bytes,4,rep,name=leagues" json:"leagues,omitempty"`
}

func (x *CMsgDOTAFantasyCardLineup_Period) Reset() {
	*x = CMsgDOTAFantasyCardLineup_Period{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_webapi_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAFantasyCardLineup_Period) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAFantasyCardLineup_Period) ProtoMessage() {}

func (x *CMsgDOTAFantasyCardLineup_Period) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_webapi_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAFantasyCardLineup_Period.ProtoReflect.Descriptor instead.
func (*CMsgDOTAFantasyCardLineup_Period) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_webapi_proto_rawDescGZIP(), []int{10, 3}
}

func (x *CMsgDOTAFantasyCardLineup_Period) GetFantasyPeriod() uint32 {
	if x != nil && x.FantasyPeriod != nil {
		return *x.FantasyPeriod
	}
	return 0
}

func (x *CMsgDOTAFantasyCardLineup_Period) GetTimestampStart() uint32 {
	if x != nil && x.TimestampStart != nil {
		return *x.TimestampStart
	}
	return 0
}

func (x *CMsgDOTAFantasyCardLineup_Period) GetTimestampEnd() uint32 {
	if x != nil && x.TimestampEnd != nil {
		return *x.TimestampEnd
	}
	return 0
}

func (x *CMsgDOTAFantasyCardLineup_Period) GetLeagues() []*CMsgDOTAFantasyCardLineup_League {
	if x != nil {
		return x.Leagues
	}
	return nil
}

type CMsgDOTAFantasyCardList_CardBonus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BonusStat  *uint32 `protobuf:"varint,1,opt,name=bonus_stat,json=bonusStat" json:"bonus_stat,omitempty"`
	BonusValue *uint32 `protobuf:"varint,2,opt,name=bonus_value,json=bonusValue" json:"bonus_value,omitempty"`
}

func (x *CMsgDOTAFantasyCardList_CardBonus) Reset() {
	*x = CMsgDOTAFantasyCardList_CardBonus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_webapi_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAFantasyCardList_CardBonus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAFantasyCardList_CardBonus) ProtoMessage() {}

func (x *CMsgDOTAFantasyCardList_CardBonus) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_webapi_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAFantasyCardList_CardBonus.ProtoReflect.Descriptor instead.
func (*CMsgDOTAFantasyCardList_CardBonus) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_webapi_proto_rawDescGZIP(), []int{11, 0}
}

func (x *CMsgDOTAFantasyCardList_CardBonus) GetBonusStat() uint32 {
	if x != nil && x.BonusStat != nil {
		return *x.BonusStat
	}
	return 0
}

func (x *CMsgDOTAFantasyCardList_CardBonus) GetBonusValue() uint32 {
	if x != nil && x.BonusValue != nil {
		return *x.BonusValue
	}
	return 0
}

type CMsgDOTAFantasyCardList_Card struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerAccountId *uint32                              `protobuf:"varint,1,opt,name=player_account_id,json=playerAccountId" json:"player_account_id,omitempty"`
	PlayerName      *string                              `protobuf:"bytes,2,opt,name=player_name,json=playerName" json:"player_name,omitempty"`
	TeamId          *uint32                              `protobuf:"varint,3,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	TeamName        *string                              `protobuf:"bytes,4,opt,name=team_name,json=teamName" json:"team_name,omitempty"`
	Role            *uint32                              `protobuf:"varint,5,opt,name=role" json:"role,omitempty"`
	Bonuses         []*CMsgDOTAFantasyCardList_CardBonus `protobuf:"bytes,6,rep,name=bonuses" json:"bonuses,omitempty"`
	ItemId          *uint64                              `protobuf:"varint,8,opt,name=item_id,json=itemId" json:"item_id,omitempty"`
}

func (x *CMsgDOTAFantasyCardList_Card) Reset() {
	*x = CMsgDOTAFantasyCardList_Card{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_webapi_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDOTAFantasyCardList_Card) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAFantasyCardList_Card) ProtoMessage() {}

func (x *CMsgDOTAFantasyCardList_Card) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_webapi_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAFantasyCardList_Card.ProtoReflect.Descriptor instead.
func (*CMsgDOTAFantasyCardList_Card) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_webapi_proto_rawDescGZIP(), []int{11, 1}
}

func (x *CMsgDOTAFantasyCardList_Card) GetPlayerAccountId() uint32 {
	if x != nil && x.PlayerAccountId != nil {
		return *x.PlayerAccountId
	}
	return 0
}

func (x *CMsgDOTAFantasyCardList_Card) GetPlayerName() string {
	if x != nil && x.PlayerName != nil {
		return *x.PlayerName
	}
	return ""
}

func (x *CMsgDOTAFantasyCardList_Card) GetTeamId() uint32 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

func (x *CMsgDOTAFantasyCardList_Card) GetTeamName() string {
	if x != nil && x.TeamName != nil {
		return *x.TeamName
	}
	return ""
}

func (x *CMsgDOTAFantasyCardList_Card) GetRole() uint32 {
	if x != nil && x.Role != nil {
		return *x.Role
	}
	return 0
}

func (x *CMsgDOTAFantasyCardList_Card) GetBonuses() []*CMsgDOTAFantasyCardList_CardBonus {
	if x != nil {
		return x.Bonuses
	}
	return nil
}

func (x *CMsgDOTAFantasyCardList_Card) GetItemId() uint64 {
	if x != nil && x.ItemId != nil {
		return *x.ItemId
	}
	return 0
}

type CMsgChatToxicityToxicPlayerMatchesReport_IndividualRow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerAccountId  *uint32 `protobuf:"varint,1,opt,name=player_account_id,json=playerAccountId" json:"player_account_id,omitempty"`
	NumMatchesSeen   *uint32 `protobuf:"varint,2,opt,name=num_matches_seen,json=numMatchesSeen" json:"num_matches_seen,omitempty"`
	NumMessages      *uint32 `protobuf:"varint,3,opt,name=num_messages,json=numMessages" json:"num_messages,omitempty"`
	NumMessagesToxic *uint32 `protobuf:"varint,4,opt,name=num_messages_toxic,json=numMessagesToxic" json:"num_messages_toxic,omitempty"`
	FirstMatchSeen   *uint64 `protobuf:"varint,5,opt,name=first_match_seen,json=firstMatchSeen" json:"first_match_seen,omitempty"`
	LastMatchSeen    *uint64 `protobuf:"varint,6,opt,name=last_match_seen,json=lastMatchSeen" json:"last_match_seen,omitempty"`
}

func (x *CMsgChatToxicityToxicPlayerMatchesReport_IndividualRow) Reset() {
	*x = CMsgChatToxicityToxicPlayerMatchesReport_IndividualRow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_webapi_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgChatToxicityToxicPlayerMatchesReport_IndividualRow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgChatToxicityToxicPlayerMatchesReport_IndividualRow) ProtoMessage() {}

func (x *CMsgChatToxicityToxicPlayerMatchesReport_IndividualRow) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_webapi_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgChatToxicityToxicPlayerMatchesReport_IndividualRow.ProtoReflect.Descriptor instead.
func (*CMsgChatToxicityToxicPlayerMatchesReport_IndividualRow) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_webapi_proto_rawDescGZIP(), []int{12, 0}
}

func (x *CMsgChatToxicityToxicPlayerMatchesReport_IndividualRow) GetPlayerAccountId() uint32 {
	if x != nil && x.PlayerAccountId != nil {
		return *x.PlayerAccountId
	}
	return 0
}

func (x *CMsgChatToxicityToxicPlayerMatchesReport_IndividualRow) GetNumMatchesSeen() uint32 {
	if x != nil && x.NumMatchesSeen != nil {
		return *x.NumMatchesSeen
	}
	return 0
}

func (x *CMsgChatToxicityToxicPlayerMatchesReport_IndividualRow) GetNumMessages() uint32 {
	if x != nil && x.NumMessages != nil {
		return *x.NumMessages
	}
	return 0
}

func (x *CMsgChatToxicityToxicPlayerMatchesReport_IndividualRow) GetNumMessagesToxic() uint32 {
	if x != nil && x.NumMessagesToxic != nil {
		return *x.NumMessagesToxic
	}
	return 0
}

func (x *CMsgChatToxicityToxicPlayerMatchesReport_IndividualRow) GetFirstMatchSeen() uint64 {
	if x != nil && x.FirstMatchSeen != nil {
		return *x.FirstMatchSeen
	}
	return 0
}

func (x *CMsgChatToxicityToxicPlayerMatchesReport_IndividualRow) GetLastMatchSeen() uint64 {
	if x != nil && x.LastMatchSeen != nil {
		return *x.LastMatchSeen
	}
	return 0
}

type CMsgGetTeamAuditInformation_Action struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegistrationPeriod *uint32 `protobuf:"varint,1,opt,name=registration_period,json=registrationPeriod" json:"registration_period,omitempty"`
	AccountId          *uint32 `protobuf:"varint,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Action             *uint32 `protobuf:"varint,3,opt,name=action" json:"action,omitempty"`
	Timestamp          *uint32 `protobuf:"varint,4,opt,name=timestamp" json:"timestamp,omitempty"`
	PlayerName         *string `protobuf:"bytes,5,opt,name=player_name,json=playerName" json:"player_name,omitempty"`
	PlayerRealName     *string `protobuf:"bytes,6,opt,name=player_real_name,json=playerRealName" json:"player_real_name,omitempty"`
}

func (x *CMsgGetTeamAuditInformation_Action) Reset() {
	*x = CMsgGetTeamAuditInformation_Action{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota_gcmessages_webapi_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGetTeamAuditInformation_Action) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGetTeamAuditInformation_Action) ProtoMessage() {}

func (x *CMsgGetTeamAuditInformation_Action) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_webapi_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGetTeamAuditInformation_Action.ProtoReflect.Descriptor instead.
func (*CMsgGetTeamAuditInformation_Action) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_webapi_proto_rawDescGZIP(), []int{14, 0}
}

func (x *CMsgGetTeamAuditInformation_Action) GetRegistrationPeriod() uint32 {
	if x != nil && x.RegistrationPeriod != nil {
		return *x.RegistrationPeriod
	}
	return 0
}

func (x *CMsgGetTeamAuditInformation_Action) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgGetTeamAuditInformation_Action) GetAction() uint32 {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return 0
}

func (x *CMsgGetTeamAuditInformation_Action) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *CMsgGetTeamAuditInformation_Action) GetPlayerName() string {
	if x != nil && x.PlayerName != nil {
		return *x.PlayerName
	}
	return ""
}

func (x *CMsgGetTeamAuditInformation_Action) GetPlayerRealName() string {
	if x != nil && x.PlayerRealName != nil {
		return *x.PlayerRealName
	}
	return ""
}

var File_dota_gcmessages_webapi_proto protoreflect.FileDescriptor

var file_dota_gcmessages_webapi_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x64, 0x6f, 0x74, 0x61, 0x5f, 0x67, 0x63, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x77, 0x65, 0x62, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04,
	0x64, 0x6f, 0x74, 0x61, 0x1a, 0x13, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x67, 0x63, 0x73, 0x64, 0x6b,
	0x5f, 0x67, 0x63, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x17, 0x64, 0x6f, 0x74, 0x61, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x64, 0x6f, 0x74, 0x61,
	0x5f, 0x67, 0x63, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x64, 0x6f, 0x74, 0x61, 0x5f, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xd5, 0x06, 0x0a, 0x0f, 0x43, 0x4d, 0x73, 0x67, 0x41, 0x72, 0x63, 0x61,
	0x6e, 0x61, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x41, 0x72, 0x63, 0x61, 0x6e, 0x61, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x2e,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x30,
	0x0a, 0x14, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x6d,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x12, 0x21, 0x0a, 0x0c, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x76, 0x6f, 0x74, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x1c, 0x69, 0x73, 0x5f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x69, 0x62,
	0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x69, 0x73,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x61, 0x6c, 0x69,
	0x62, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x35, 0x0a, 0x17, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x73, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x73,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x76, 0x6f, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x96, 0x03, 0x0a, 0x05, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12,
	0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x09, 0x68, 0x65,
	0x72, 0x6f, 0x5f, 0x69, 0x64, 0x5f, 0x30, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x68,
	0x65, 0x72, 0x6f, 0x49, 0x64, 0x30, 0x12, 0x1a, 0x0a, 0x09, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x69,
	0x64, 0x5f, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x68, 0x65, 0x72, 0x6f, 0x49,
	0x64, 0x31, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x30, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x68, 0x65, 0x72, 0x6f,
	0x53, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x30, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x65, 0x72, 0x6f,
	0x5f, 0x73, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x68, 0x65, 0x72, 0x6f, 0x53, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x31, 0x12, 0x20,
	0x0a, 0x0c, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x30, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x76, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x30,
	0x12, 0x20, 0x0a, 0x0c, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x31,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x76, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x31, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x76,
	0x6f, 0x74, 0x65, 0x73, 0x5f, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x69, 0x73, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e,
	0x12, 0x3c, 0x0a, 0x1a, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x22, 0x3b,
	0x0a, 0x0b, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0c, 0x0a,
	0x08, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x49,
	0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09,
	0x49, 0x4e, 0x5f, 0x46, 0x55, 0x54, 0x55, 0x52, 0x45, 0x10, 0x02, 0x22, 0xea, 0x06, 0x0a, 0x0f,
	0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x44, 0x50, 0x43, 0x46, 0x65, 0x65, 0x64, 0x12,
	0x39, 0x0a, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54,
	0x41, 0x44, 0x50, 0x43, 0x46, 0x65, 0x65, 0x64, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x8d, 0x03, 0x0a, 0x07, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x44, 0x4f, 0x54, 0x41, 0x44, 0x50, 0x43, 0x46, 0x65, 0x65, 0x64, 0x2e, 0x45, 0x46, 0x65, 0x65,
	0x64, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x15,
	0x0a, 0x06, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x31, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x64, 0x61, 0x74, 0x61, 0x31, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x32, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x32, 0x12, 0x15, 0x0a, 0x06,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x33, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x64, 0x61,
	0x74, 0x61, 0x33, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x34, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x34, 0x22, 0x8b, 0x03, 0x0a, 0x10, 0x45,
	0x46, 0x65, 0x65, 0x64, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x16, 0x0a, 0x12, 0x46, 0x45, 0x45, 0x44, 0x5f, 0x53, 0x45, 0x52, 0x49, 0x45, 0x53, 0x5f, 0x52,
	0x45, 0x53, 0x55, 0x4c, 0x54, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x45, 0x45, 0x44, 0x5f,
	0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x50, 0x4f, 0x50, 0x55, 0x4c, 0x41, 0x52, 0x10, 0x02, 0x12,
	0x1c, 0x0a, 0x18, 0x46, 0x45, 0x45, 0x44, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x55, 0x50, 0x43,
	0x4f, 0x4d, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x03, 0x12, 0x1b, 0x0a,
	0x17, 0x46, 0x45, 0x45, 0x44, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x4c, 0x45, 0x41, 0x47, 0x55,
	0x45, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x46, 0x45,
	0x45, 0x44, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x50, 0x4c, 0x41, 0x59,
	0x45, 0x52, 0x10, 0x05, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x45, 0x45, 0x44, 0x5f, 0x54, 0x45, 0x41,
	0x4d, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x10,
	0x06, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x45, 0x45, 0x44, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x44,
	0x49, 0x53, 0x42, 0x41, 0x4e, 0x44, 0x10, 0x07, 0x12, 0x18, 0x0a, 0x14, 0x46, 0x45, 0x45, 0x44,
	0x5f, 0x4c, 0x45, 0x41, 0x47, 0x55, 0x45, 0x5f, 0x55, 0x50, 0x43, 0x4f, 0x4d, 0x49, 0x4e, 0x47,
	0x10, 0x08, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x45, 0x45, 0x44, 0x5f, 0x4c, 0x45, 0x41, 0x47, 0x55,
	0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x43, 0x4c, 0x55, 0x44, 0x45, 0x44, 0x10, 0x09, 0x12, 0x16, 0x0a,
	0x12, 0x46, 0x45, 0x45, 0x44, 0x5f, 0x44, 0x50, 0x43, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x53, 0x10, 0x0a, 0x12, 0x1a, 0x0a, 0x16, 0x46, 0x45, 0x45, 0x44, 0x5f, 0x41, 0x4c,
	0x45, 0x52, 0x54, 0x5f, 0x50, 0x52, 0x45, 0x44, 0x49, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10,
	0x0b, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x45, 0x45, 0x44, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x5f,
	0x46, 0x41, 0x4e, 0x54, 0x41, 0x53, 0x59, 0x10, 0x0c, 0x12, 0x1a, 0x0a, 0x16, 0x46, 0x45, 0x45,
	0x44, 0x5f, 0x4c, 0x45, 0x41, 0x47, 0x55, 0x45, 0x5f, 0x4c, 0x49, 0x56, 0x45, 0x5f, 0x4d, 0x41,
	0x54, 0x43, 0x48, 0x10, 0x0d, 0x12, 0x21, 0x0a, 0x1d, 0x46, 0x45, 0x45, 0x44, 0x5f, 0x4c, 0x45,
	0x41, 0x47, 0x55, 0x45, 0x5f, 0x49, 0x4e, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5f,
	0x53, 0x45, 0x52, 0x49, 0x45, 0x53, 0x10, 0x0e, 0x22, 0x43, 0x0a, 0x13, 0x43, 0x4d, 0x73, 0x67,
	0x44, 0x4f, 0x54, 0x41, 0x44, 0x50, 0x43, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x70, 0x6c, 0x75, 0x73, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x50,
	0x6c, 0x75, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x22, 0xae, 0x07,
	0x0a, 0x0f, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x72, 0x61, 0x66, 0x74, 0x54, 0x72, 0x69, 0x76, 0x69,
	0x61, 0x12, 0x26, 0x0a, 0x0f, 0x68, 0x61, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x68, 0x61, 0x73, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x52, 0x0a, 0x0f, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x72,
	0x61, 0x66, 0x74, 0x54, 0x72, 0x69, 0x76, 0x69, 0x61, 0x2e, 0x44, 0x72, 0x61, 0x66, 0x74, 0x54,
	0x72, 0x69, 0x76, 0x69, 0x61, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x48, 0x65, 0x72, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a,
	0x0f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x74, 0x69, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x61, 0x6e,
	0x6b, 0x54, 0x69, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x76, 0x6f, 0x74,
	0x65, 0x64, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x18, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x56, 0x6f,
	0x74, 0x65, 0x64, 0x52, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x12, 0x4d, 0x0a, 0x0f, 0x70, 0x72,
	0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44,
	0x72, 0x61, 0x66, 0x74, 0x54, 0x72, 0x69, 0x76, 0x69, 0x61, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x69,
	0x6f, 0x75, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x6f, 0x75, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6b,
	0x1a, 0x42, 0x0a, 0x13, 0x44, 0x72, 0x61, 0x66, 0x74, 0x54, 0x72, 0x69, 0x76, 0x69, 0x61, 0x48,
	0x65, 0x72, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x65, 0x72, 0x6f, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x72, 0x6f, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x72, 0x6f, 0x6c, 0x65, 0x1a, 0xb4, 0x01, 0x0a, 0x14, 0x44, 0x72, 0x61, 0x66, 0x74, 0x54, 0x72,
	0x69, 0x76, 0x69, 0x61, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x50, 0x0a,
	0x0e, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x68, 0x65, 0x72, 0x6f, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x44, 0x72, 0x61, 0x66, 0x74, 0x54, 0x72, 0x69, 0x76, 0x69, 0x61, 0x2e, 0x44, 0x72, 0x61,
	0x66, 0x74, 0x54, 0x72, 0x69, 0x76, 0x69, 0x61, 0x48, 0x65, 0x72, 0x6f, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0d, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x48, 0x65, 0x72, 0x6f, 0x65, 0x73, 0x12,
	0x4a, 0x0a, 0x0b, 0x64, 0x69, 0x72, 0x65, 0x5f, 0x68, 0x65, 0x72, 0x6f, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x44, 0x72, 0x61, 0x66, 0x74, 0x54, 0x72, 0x69, 0x76, 0x69, 0x61, 0x2e, 0x44, 0x72, 0x61, 0x66,
	0x74, 0x54, 0x72, 0x69, 0x76, 0x69, 0x61, 0x48, 0x65, 0x72, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0a, 0x64, 0x69, 0x72, 0x65, 0x48, 0x65, 0x72, 0x6f, 0x65, 0x73, 0x1a, 0x90, 0x02, 0x0a, 0x0e,
	0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x27,
	0x0a, 0x0f, 0x76, 0x6f, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x6c,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x76, 0x6f, 0x74, 0x65, 0x64, 0x43, 0x6f,
	0x72, 0x72, 0x65, 0x63, 0x74, 0x6c, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x6f, 0x74, 0x65, 0x64,
	0x5f, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x76, 0x6f, 0x74, 0x65, 0x64, 0x52, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x12, 0x52, 0x0a, 0x0f,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x44, 0x72, 0x61, 0x66, 0x74, 0x54, 0x72, 0x69, 0x76, 0x69, 0x61, 0x2e, 0x44, 0x72, 0x61,
	0x66, 0x74, 0x54, 0x72, 0x69, 0x76, 0x69, 0x61, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x48, 0x65, 0x72, 0x6f, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x74,
	0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x61, 0x6e, 0x6b, 0x54, 0x69, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x22, 0xd6,
	0x01, 0x0a, 0x1d, 0x43, 0x4d, 0x73, 0x67, 0x54, 0x65, 0x61, 0x6d, 0x46, 0x61, 0x6e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x3d, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x45, 0x54, 0x65, 0x61,
	0x6d, 0x46, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x43, 0x0a, 0x0c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x45, 0x54,
	0x65, 0x61, 0x6d, 0x46, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x72, 0x63, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x63, 0x72, 0x63, 0x22, 0xa5, 0x01, 0x0a, 0x25, 0x43, 0x4d, 0x73, 0x67,
	0x54, 0x65, 0x61, 0x6d, 0x46, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4b, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x33, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x54, 0x65, 0x61,
	0x6d, 0x46, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x2f,
	0x0a, 0x07, 0x45, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x01, 0x22,
	0x97, 0x06, 0x0a, 0x18, 0x43, 0x4d, 0x73, 0x67, 0x54, 0x65, 0x61, 0x6d, 0x46, 0x61, 0x6e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x53, 0x0a, 0x10,
	0x74, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x54, 0x65, 0x61, 0x6d, 0x46, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x0e, 0x74, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x1a, 0xa5, 0x05, 0x0a, 0x0a, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e,
	0x45, 0x54, 0x65, 0x61, 0x6d, 0x46, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x75,
	0x67, 0x63, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x75,
	0x67, 0x63, 0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x2e, 0x0a, 0x13, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x68,
	0x6f, 0x70, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x62, 0x62, 0x72, 0x65, 0x76,
	0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x62,
	0x62, 0x72, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x70, 0x72, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x70, 0x72, 0x61, 0x79, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x63, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x65, 0x6d,
	0x6f, 0x74, 0x69, 0x63, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x77,
	0x61, 0x6c, 0x6c, 0x70, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x70, 0x61, 0x70, 0x65, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2b,
	0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x46, 0x0a, 0x0c, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x54, 0x65, 0x61,
	0x6d, 0x46, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1d, 0x0a, 0x0a,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x54, 0x69, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x22, 0xc4, 0x03, 0x0a, 0x21, 0x43, 0x4d,
	0x73, 0x67, 0x54, 0x65, 0x61, 0x6d, 0x46, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x41, 0x75, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x5b, 0x0a, 0x0f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x54, 0x65, 0x61, 0x6d, 0x46, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0e, 0x74, 0x65,
	0x61, 0x6d, 0x41, 0x75, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x1a, 0x7d, 0x0a, 0x0f,
	0x41, 0x75, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x19, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x1a, 0xc2, 0x01, 0x0a, 0x0a,
	0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x57, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x6f, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x64, 0x6f,
	0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x54, 0x65, 0x61, 0x6d, 0x46, 0x61, 0x6e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73,
	0x12, 0x2e, 0x0a, 0x13, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x22, 0x9c, 0x10, 0x0a, 0x0c, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x50, 0x43, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1f, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x50, 0x43, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x64,
	0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x50, 0x43, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x45, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x07,
	0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x50, 0x43, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x52, 0x07, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65,
	0x73, 0x12, 0x2f, 0x0a, 0x13, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x75,
	0x70, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69,
	0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x2c,
	0x0a, 0x12, 0x69, 0x73, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x10, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x6f, 0x75, 0x72,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x44, 0x50, 0x43, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x54, 0x6f, 0x75, 0x72,
	0x52, 0x04, 0x74, 0x6f, 0x75, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x11, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x44, 0x72,
	0x6f, 0x70, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x41, 0x64, 0x64,
	0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x3c, 0x0a, 0x1a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69,
	0x6e, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69,
	0x6e, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x69, 0x73, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x49, 0x0a, 0x21, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x64, 0x65, 0x61,
	0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1e, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x1a, 0x6b, 0x0a, 0x09, 0x50,
	0x68, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3a, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x44, 0x50, 0x43, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x4c, 0x65, 0x61,
	0x67, 0x75, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x05, 0x70,
	0x68, 0x61, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6e, 0x6f, 0x64,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x1a, 0xbb, 0x01, 0x0a, 0x06, 0x4c, 0x65, 0x61,
	0x67, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x45, 0x4c, 0x65, 0x61, 0x67,
	0x75, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x12, 0x31, 0x0a, 0x08, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x15, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x45, 0x4c, 0x65, 0x61, 0x67, 0x75,
	0x65, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x69, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x64,
	0x12, 0x34, 0x0a, 0x06, 0x70, 0x68, 0x61, 0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x50, 0x43, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06,
	0x70, 0x68, 0x61, 0x73, 0x65, 0x73, 0x22, 0xd3, 0x04, 0x0a, 0x0c, 0x45, 0x4c, 0x65, 0x61, 0x67,
	0x75, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x50,
	0x52, 0x49, 0x4e, 0x47, 0x5f, 0x32, 0x30, 0x32, 0x31, 0x5f, 0x4c, 0x45, 0x41, 0x47, 0x55, 0x45,
	0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x50, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x32, 0x30, 0x32,
	0x31, 0x5f, 0x4d, 0x41, 0x4a, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x32, 0x30, 0x32, 0x31, 0x5f,
	0x51, 0x55, 0x41, 0x4c, 0x49, 0x46, 0x49, 0x45, 0x52, 0x53, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x32, 0x30,
	0x32, 0x31, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x57, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x32,
	0x30, 0x32, 0x31, 0x5f, 0x4c, 0x45, 0x41, 0x47, 0x55, 0x45, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19,
	0x57, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x32, 0x30, 0x32, 0x31, 0x5f, 0x4c, 0x45, 0x41, 0x47,
	0x55, 0x45, 0x5f, 0x46, 0x49, 0x4e, 0x41, 0x4c, 0x53, 0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x53,
	0x50, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x32, 0x30, 0x32, 0x32, 0x5f, 0x4c, 0x45, 0x41, 0x47, 0x55,
	0x45, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x50, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x32, 0x30,
	0x32, 0x32, 0x5f, 0x4d, 0x41, 0x4a, 0x4f, 0x52, 0x10, 0x08, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x55,
	0x4d, 0x4d, 0x45, 0x52, 0x5f, 0x32, 0x30, 0x32, 0x32, 0x5f, 0x4c, 0x45, 0x41, 0x47, 0x55, 0x45,
	0x10, 0x09, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x55, 0x4d, 0x4d, 0x45, 0x52, 0x5f, 0x32, 0x30, 0x32,
	0x32, 0x5f, 0x4d, 0x41, 0x4a, 0x4f, 0x52, 0x10, 0x0a, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x32, 0x30, 0x32, 0x32, 0x10,
	0x0b, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x48, 0x49, 0x4e, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x4f,
	0x4e, 0x41, 0x4c, 0x5f, 0x46, 0x49, 0x4e, 0x41, 0x4c, 0x53, 0x10, 0x0c, 0x12, 0x2a, 0x0a, 0x26,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x32, 0x30,
	0x32, 0x32, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x51, 0x55, 0x41, 0x4c,
	0x49, 0x46, 0x49, 0x45, 0x52, 0x53, 0x10, 0x0d, 0x12, 0x2d, 0x0a, 0x29, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x32, 0x30, 0x32, 0x32, 0x5f, 0x4c,
	0x41, 0x53, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x49,
	0x46, 0x49, 0x45, 0x52, 0x53, 0x10, 0x0e, 0x12, 0x16, 0x0a, 0x12, 0x57, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x5f, 0x32, 0x30, 0x32, 0x33, 0x5f, 0x4c, 0x45, 0x41, 0x47, 0x55, 0x45, 0x10, 0x0f, 0x12,
	0x15, 0x0a, 0x11, 0x57, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x32, 0x30, 0x32, 0x33, 0x5f, 0x4d,
	0x41, 0x4a, 0x4f, 0x52, 0x10, 0x10, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x50, 0x52, 0x49, 0x4e, 0x47,
	0x5f, 0x32, 0x30, 0x32, 0x33, 0x5f, 0x4c, 0x45, 0x41, 0x47, 0x55, 0x45, 0x10, 0x11, 0x12, 0x15,
	0x0a, 0x11, 0x53, 0x50, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x32, 0x30, 0x32, 0x33, 0x5f, 0x4d, 0x41,
	0x4a, 0x4f, 0x52, 0x10, 0x12, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x55, 0x4d, 0x4d, 0x45, 0x52, 0x5f,
	0x32, 0x30, 0x32, 0x33, 0x5f, 0x4c, 0x45, 0x41, 0x47, 0x55, 0x45, 0x10, 0x13, 0x12, 0x15, 0x0a,
	0x11, 0x53, 0x55, 0x4d, 0x4d, 0x45, 0x52, 0x5f, 0x32, 0x30, 0x32, 0x33, 0x5f, 0x4d, 0x41, 0x4a,
	0x4f, 0x52, 0x10, 0x14, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x32, 0x30, 0x32, 0x33, 0x10, 0x15, 0x22, 0xc9, 0x01, 0x0a,
	0x11, 0x45, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x68, 0x61,
	0x73, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x57, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x41,
	0x52, 0x44, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x53, 0x54,
	0x41, 0x47, 0x45, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x41,
	0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x42, 0x10, 0x04, 0x12,
	0x0b, 0x0a, 0x07, 0x4f, 0x56, 0x45, 0x52, 0x41, 0x4c, 0x4c, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07,
	0x50, 0x4c, 0x41, 0x59, 0x4f, 0x46, 0x46, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x53,
	0x55, 0x4c, 0x54, 0x53, 0x10, 0x07, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x50, 0x43, 0x5f, 0x50, 0x4f,
	0x49, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x53, 0x10, 0x08, 0x12,
	0x0b, 0x0a, 0x07, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x43, 0x10, 0x09, 0x12, 0x0b, 0x0a, 0x07,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x44, 0x10, 0x0a, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x4c, 0x41,
	0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x0b, 0x22, 0x88, 0x01, 0x0a, 0x10, 0x45, 0x4c, 0x65,
	0x61, 0x67, 0x75, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a,
	0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x45,
	0x41, 0x47, 0x55, 0x45, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x41, 0x4a, 0x4f, 0x52, 0x10,
	0x02, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x41, 0x4c, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x46, 0x49, 0x45, 0x52, 0x53, 0x10, 0x03, 0x12,
	0x11, 0x0a, 0x0d, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c,
	0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x45, 0x41, 0x47, 0x55, 0x45, 0x5f, 0x46, 0x49, 0x4e,
	0x41, 0x4c, 0x53, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41,
	0x4c, 0x10, 0x06, 0x22, 0x3a, 0x0a, 0x05, 0x45, 0x54, 0x6f, 0x75, 0x72, 0x12, 0x0d, 0x0a, 0x09,
	0x54, 0x4f, 0x55, 0x52, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x54,
	0x4f, 0x55, 0x52, 0x5f, 0x31, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x4f, 0x55, 0x52, 0x5f,
	0x32, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x4f, 0x55, 0x52, 0x5f, 0x33, 0x10, 0x03, 0x22,
	0x3e, 0x0a, 0x10, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x50, 0x43, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44,
	0x50, 0x43, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22,
	0x97, 0x06, 0x0a, 0x19, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x46, 0x61, 0x6e, 0x74,
	0x61, 0x73, 0x79, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x12, 0x40, 0x0a,
	0x07, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x46, 0x61,
	0x6e, 0x74, 0x61, 0x73, 0x79, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x2e,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x07, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x73, 0x1a,
	0x4b, 0x0a, 0x09, 0x43, 0x61, 0x72, 0x64, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x53, 0x74, 0x61, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x62,
	0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xaf, 0x02, 0x0a,
	0x04, 0x43, 0x61, 0x72, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x43, 0x0a, 0x07,
	0x62, 0x6f, 0x6e, 0x75, 0x73, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x46, 0x61, 0x6e,
	0x74, 0x61, 0x73, 0x79, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x2e, 0x43,
	0x61, 0x72, 0x64, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x52, 0x07, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x65,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x6e, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x66, 0x69, 0x6e, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x1a, 0x77,
	0x0a, 0x06, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x61, 0x67,
	0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x65, 0x61,
	0x67, 0x75, 0x65, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x44, 0x4f, 0x54, 0x41, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x43, 0x61, 0x72, 0x64, 0x4c,
	0x69, 0x6e, 0x65, 0x75, 0x70, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x05, 0x63, 0x61, 0x72, 0x64,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x1a, 0xbf, 0x01, 0x0a, 0x06, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x5f, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x66, 0x61, 0x6e, 0x74,
	0x61, 0x73, 0x79, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f,
	0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x45, 0x6e, 0x64, 0x12, 0x40, 0x0a, 0x07, 0x6c, 0x65, 0x61, 0x67, 0x75,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x43,
	0x61, 0x72, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x2e, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65,
	0x52, 0x07, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x73, 0x22, 0x9c, 0x03, 0x0a, 0x17, 0x43, 0x4d,
	0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x43, 0x61, 0x72,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x44, 0x4f, 0x54, 0x41, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x43, 0x61, 0x72, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x1a,
	0x4b, 0x0a, 0x09, 0x43, 0x61, 0x72, 0x64, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x53, 0x74, 0x61, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x62,
	0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xf9, 0x01, 0x0a,
	0x04, 0x43, 0x61, 0x72, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x41, 0x0a, 0x07,
	0x62, 0x6f, 0x6e, 0x75, 0x73, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x46, 0x61, 0x6e,
	0x74, 0x61, 0x73, 0x79, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x43, 0x61, 0x72,
	0x64, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x52, 0x07, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x65, 0x73, 0x12,
	0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x22, 0x87, 0x03, 0x0a, 0x28, 0x43, 0x4d, 0x73,
	0x67, 0x43, 0x68, 0x61, 0x74, 0x54, 0x6f, 0x78, 0x69, 0x63, 0x69, 0x74, 0x79, 0x54, 0x6f, 0x78,
	0x69, 0x63, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x50, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43,
	0x68, 0x61, 0x74, 0x54, 0x6f, 0x78, 0x69, 0x63, 0x69, 0x74, 0x79, 0x54, 0x6f, 0x78, 0x69, 0x63,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x52, 0x6f,
	0x77, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x1a, 0x88, 0x02, 0x0a, 0x0d, 0x49, 0x6e, 0x64, 0x69,
	0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x52, 0x6f, 0x77, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x75, 0x6d, 0x5f, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x6e, 0x75, 0x6d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x53, 0x65, 0x65, 0x6e, 0x12,
	0x21, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x75, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x5f, 0x74, 0x6f, 0x78, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10,
	0x6e, 0x75, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x54, 0x6f, 0x78, 0x69, 0x63,
	0x12, 0x28, 0x0a, 0x10, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x73, 0x65, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x65, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65,
	0x65, 0x6e, 0x22, 0xef, 0x01, 0x0a, 0x16, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x68, 0x61, 0x74, 0x54,
	0x6f, 0x78, 0x69, 0x63, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x28, 0x0a,
	0x10, 0x6e, 0x75, 0x6d, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6e, 0x75, 0x6d, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x73, 0x53, 0x65, 0x65, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6e,
	0x75, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x1c, 0x6e, 0x75,
	0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x6d, 0x6c, 0x5f, 0x74, 0x68,
	0x69, 0x6e, 0x6b, 0x73, 0x5f, 0x74, 0x6f, 0x78, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x18, 0x6e, 0x75, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x4d, 0x6c, 0x54,
	0x68, 0x69, 0x6e, 0x6b, 0x73, 0x54, 0x6f, 0x78, 0x69, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x96, 0x03, 0x0a, 0x1b, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x65, 0x74,
	0x54, 0x65, 0x61, 0x6d, 0x41, 0x75, 0x64, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x07, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x64, 0x6f,
	0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x41, 0x75,
	0x64, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x1a, 0xd9, 0x01, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x13,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x72, 0x65,
	0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x73, 0x0a,
	0x10, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x44, 0x50, 0x43, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x12, 0x29, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x34, 0x0a, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x44, 0x4f, 0x54, 0x41, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2a, 0x88, 0x01, 0x0a, 0x15, 0x45, 0x54, 0x65, 0x61, 0x6d, 0x46, 0x61, 0x6e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x1f,
	0x54, 0x45, 0x41, 0x4d, 0x5f, 0x46, 0x41, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10,
	0x00, 0x12, 0x23, 0x0a, 0x1f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x46, 0x41, 0x4e, 0x5f, 0x43, 0x4f,
	0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x45, 0x4e,
	0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x46,
	0x41, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x45, 0x56, 0x41, 0x4c, 0x55, 0x41, 0x54, 0x45, 0x44, 0x10, 0x02, 0x2a, 0xe9, 0x02,
	0x0a, 0x18, 0x45, 0x54, 0x65, 0x61, 0x6d, 0x46, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f,
	0x65, 0x46, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x6f, 0x67, 0x6f, 0x50, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x22,
	0x0a, 0x1e, 0x6b, 0x5f, 0x65, 0x46, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x6f, 0x67, 0x6f, 0x53, 0x56, 0x47,
	0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x65, 0x46, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x6f, 0x67,
	0x6f, 0x33, 0x44, 0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x65, 0x46, 0x61, 0x6e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x10, 0x04, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x65,
	0x46, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x53, 0x70, 0x72, 0x61, 0x79, 0x73, 0x10, 0x05, 0x12, 0x25, 0x0a, 0x21,
	0x6b, 0x5f, 0x65, 0x46, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x57, 0x61, 0x6c, 0x6c, 0x70, 0x61, 0x70, 0x65, 0x72,
	0x73, 0x10, 0x06, 0x12, 0x24, 0x0a, 0x20, 0x6b, 0x5f, 0x65, 0x46, 0x61, 0x6e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x6d,
	0x6f, 0x74, 0x69, 0x63, 0x6f, 0x6e, 0x73, 0x10, 0x07, 0x12, 0x25, 0x0a, 0x21, 0x6b, 0x5f, 0x65,
	0x46, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x10, 0x08,
	0x12, 0x27, 0x0a, 0x23, 0x6b, 0x5f, 0x65, 0x46, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x09, 0x2a, 0x8d, 0x01, 0x0a, 0x1a, 0x45, 0x54,
	0x65, 0x61, 0x6d, 0x46, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x65, 0x46,
	0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x6b,
	0x5f, 0x65, 0x46, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64,
	0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x6b, 0x5f, 0x65, 0x46, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x52,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x02, 0x42, 0x25, 0x5a, 0x23, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x74, 0x61, 0x62, 0x75, 0x66, 0x66,
	0x2f, 0x6d, 0x61, 0x6e, 0x74, 0x61, 0x2f, 0x64, 0x6f, 0x74, 0x61, 0x3b, 0x64, 0x6f, 0x74, 0x61,
}

var (
	file_dota_gcmessages_webapi_proto_rawDescOnce sync.Once
	file_dota_gcmessages_webapi_proto_rawDescData = file_dota_gcmessages_webapi_proto_rawDesc
)

func file_dota_gcmessages_webapi_proto_rawDescGZIP() []byte {
	file_dota_gcmessages_webapi_proto_rawDescOnce.Do(func() {
		file_dota_gcmessages_webapi_proto_rawDescData = protoimpl.X.CompressGZIP(file_dota_gcmessages_webapi_proto_rawDescData)
	})
	return file_dota_gcmessages_webapi_proto_rawDescData
}

var file_dota_gcmessages_webapi_proto_enumTypes = make([]protoimpl.EnumInfo, 10)
var file_dota_gcmessages_webapi_proto_msgTypes = make([]protoimpl.MessageInfo, 34)
var file_dota_gcmessages_webapi_proto_goTypes = []interface{}{
	(ETeamFanContentStatus)(0),                                     // 0: dota.ETeamFanContentStatus
	(ETeamFanContentAssetType)(0),                                  // 1: dota.ETeamFanContentAssetType
	(ETeamFanContentAssetStatus)(0),                                // 2: dota.ETeamFanContentAssetStatus
	(CMsgArcanaVotes_VotingState)(0),                               // 3: dota.CMsgArcanaVotes.VotingState
	(CMsgDOTADPCFeed_EFeedElementType)(0),                          // 4: dota.CMsgDOTADPCFeed.EFeedElementType
	(CMsgTeamFanContentAssetStatusResponse_EResult)(0),             // 5: dota.CMsgTeamFanContentAssetStatusResponse.EResult
	(CMsgDPCEvent_ELeagueEvent)(0),                                 // 6: dota.CMsgDPCEvent.ELeagueEvent
	(CMsgDPCEvent_ELeagueEventPhase)(0),                            // 7: dota.CMsgDPCEvent.ELeagueEventPhase
	(CMsgDPCEvent_ELeagueEventType)(0),                             // 8: dota.CMsgDPCEvent.ELeagueEventType
	(CMsgDPCEvent_ETour)(0),                                        // 9: dota.CMsgDPCEvent.ETour
	(*CMsgArcanaVotes)(nil),                                        // 10: dota.CMsgArcanaVotes
	(*CMsgDOTADPCFeed)(nil),                                        // 11: dota.CMsgDOTADPCFeed
	(*CMsgDOTADPCUserInfo)(nil),                                    // 12: dota.CMsgDOTADPCUserInfo
	(*CMsgDraftTrivia)(nil),                                        // 13: dota.CMsgDraftTrivia
	(*CMsgTeamFanContentAssetStatus)(nil),                          // 14: dota.CMsgTeamFanContentAssetStatus
	(*CMsgTeamFanContentAssetStatusResponse)(nil),                  // 15: dota.CMsgTeamFanContentAssetStatusResponse
	(*CMsgTeamFanContentStatus)(nil),                               // 16: dota.CMsgTeamFanContentStatus
	(*CMsgTeamFanContentAutographStatus)(nil),                      // 17: dota.CMsgTeamFanContentAutographStatus
	(*CMsgDPCEvent)(nil),                                           // 18: dota.CMsgDPCEvent
	(*CMsgDPCEventList)(nil),                                       // 19: dota.CMsgDPCEventList
	(*CMsgDOTAFantasyCardLineup)(nil),                              // 20: dota.CMsgDOTAFantasyCardLineup
	(*CMsgDOTAFantasyCardList)(nil),                                // 21: dota.CMsgDOTAFantasyCardList
	(*CMsgChatToxicityToxicPlayerMatchesReport)(nil),               // 22: dota.CMsgChatToxicityToxicPlayerMatchesReport
	(*CMsgChatToxicityReport)(nil),                                 // 23: dota.CMsgChatToxicityReport
	(*CMsgGetTeamAuditInformation)(nil),                            // 24: dota.CMsgGetTeamAuditInformation
	(*CMsgDOTADPCMatch)(nil),                                       // 25: dota.CMsgDOTADPCMatch
	(*CMsgArcanaVotes_Match)(nil),                                  // 26: dota.CMsgArcanaVotes.Match
	(*CMsgDOTADPCFeed_Element)(nil),                                // 27: dota.CMsgDOTADPCFeed.Element
	(*CMsgDraftTrivia_DraftTriviaHeroInfo)(nil),                    // 28: dota.CMsgDraftTrivia.DraftTriviaHeroInfo
	(*CMsgDraftTrivia_DraftTriviaMatchInfo)(nil),                   // 29: dota.CMsgDraftTrivia.DraftTriviaMatchInfo
	(*CMsgDraftTrivia_PreviousResult)(nil),                         // 30: dota.CMsgDraftTrivia.PreviousResult
	(*CMsgTeamFanContentStatus_TeamStatus)(nil),                    // 31: dota.CMsgTeamFanContentStatus.TeamStatus
	(*CMsgTeamFanContentAutographStatus_AutographStatus)(nil),      // 32: dota.CMsgTeamFanContentAutographStatus.AutographStatus
	(*CMsgTeamFanContentAutographStatus_TeamStatus)(nil),           // 33: dota.CMsgTeamFanContentAutographStatus.TeamStatus
	(*CMsgDPCEvent_PhaseInfo)(nil),                                 // 34: dota.CMsgDPCEvent.PhaseInfo
	(*CMsgDPCEvent_League)(nil),                                    // 35: dota.CMsgDPCEvent.League
	(*CMsgDOTAFantasyCardLineup_CardBonus)(nil),                    // 36: dota.CMsgDOTAFantasyCardLineup.CardBonus
	(*CMsgDOTAFantasyCardLineup_Card)(nil),                         // 37: dota.CMsgDOTAFantasyCardLineup.Card
	(*CMsgDOTAFantasyCardLineup_League)(nil),                       // 38: dota.CMsgDOTAFantasyCardLineup.League
	(*CMsgDOTAFantasyCardLineup_Period)(nil),                       // 39: dota.CMsgDOTAFantasyCardLineup.Period
	(*CMsgDOTAFantasyCardList_CardBonus)(nil),                      // 40: dota.CMsgDOTAFantasyCardList.CardBonus
	(*CMsgDOTAFantasyCardList_Card)(nil),                           // 41: dota.CMsgDOTAFantasyCardList.Card
	(*CMsgChatToxicityToxicPlayerMatchesReport_IndividualRow)(nil), // 42: dota.CMsgChatToxicityToxicPlayerMatchesReport.IndividualRow
	(*CMsgGetTeamAuditInformation_Action)(nil),                     // 43: dota.CMsgGetTeamAuditInformation.Action
	(*CMsgDOTAMatch)(nil),                                          // 44: dota.CMsgDOTAMatch
	(*CDOTAMatchMetadata)(nil),                                     // 45: dota.CDOTAMatchMetadata
	(ELeagueRegion)(0),                                             // 46: dota.ELeagueRegion
	(ELeagueDivision)(0),                                           // 47: dota.ELeagueDivision
}
var file_dota_gcmessages_webapi_proto_depIdxs = []int32{
	26, // 0: dota.CMsgArcanaVotes.matches:type_name -> dota.CMsgArcanaVotes.Match
	27, // 1: dota.CMsgDOTADPCFeed.elements:type_name -> dota.CMsgDOTADPCFeed.Element
	29, // 2: dota.CMsgDraftTrivia.match_hero_info:type_name -> dota.CMsgDraftTrivia.DraftTriviaMatchInfo
	30, // 3: dota.CMsgDraftTrivia.previous_result:type_name -> dota.CMsgDraftTrivia.PreviousResult
	1,  // 4: dota.CMsgTeamFanContentAssetStatus.asset_type:type_name -> dota.ETeamFanContentAssetType
	2,  // 5: dota.CMsgTeamFanContentAssetStatus.asset_status:type_name -> dota.ETeamFanContentAssetStatus
	5,  // 6: dota.CMsgTeamFanContentAssetStatusResponse.result:type_name -> dota.CMsgTeamFanContentAssetStatusResponse.EResult
	31, // 7: dota.CMsgTeamFanContentStatus.team_status_list:type_name -> dota.CMsgTeamFanContentStatus.TeamStatus
	33, // 8: dota.CMsgTeamFanContentAutographStatus.team_autographs:type_name -> dota.CMsgTeamFanContentAutographStatus.TeamStatus
	6,  // 9: dota.CMsgDPCEvent.event:type_name -> dota.CMsgDPCEvent.ELeagueEvent
	8,  // 10: dota.CMsgDPCEvent.event_type:type_name -> dota.CMsgDPCEvent.ELeagueEventType
	35, // 11: dota.CMsgDPCEvent.leagues:type_name -> dota.CMsgDPCEvent.League
	9,  // 12: dota.CMsgDPCEvent.tour:type_name -> dota.CMsgDPCEvent.ETour
	18, // 13: dota.CMsgDPCEventList.events:type_name -> dota.CMsgDPCEvent
	39, // 14: dota.CMsgDOTAFantasyCardLineup.periods:type_name -> dota.CMsgDOTAFantasyCardLineup.Period
	41, // 15: dota.CMsgDOTAFantasyCardList.cards:type_name -> dota.CMsgDOTAFantasyCardList.Card
	42, // 16: dota.CMsgChatToxicityToxicPlayerMatchesReport.rows:type_name -> dota.CMsgChatToxicityToxicPlayerMatchesReport.IndividualRow
	43, // 17: dota.CMsgGetTeamAuditInformation.actions:type_name -> dota.CMsgGetTeamAuditInformation.Action
	44, // 18: dota.CMsgDOTADPCMatch.match:type_name -> dota.CMsgDOTAMatch
	45, // 19: dota.CMsgDOTADPCMatch.metadata:type_name -> dota.CDOTAMatchMetadata
	4,  // 20: dota.CMsgDOTADPCFeed.Element.type:type_name -> dota.CMsgDOTADPCFeed.EFeedElementType
	28, // 21: dota.CMsgDraftTrivia.DraftTriviaMatchInfo.radiant_heroes:type_name -> dota.CMsgDraftTrivia.DraftTriviaHeroInfo
	28, // 22: dota.CMsgDraftTrivia.DraftTriviaMatchInfo.dire_heroes:type_name -> dota.CMsgDraftTrivia.DraftTriviaHeroInfo
	29, // 23: dota.CMsgDraftTrivia.PreviousResult.match_hero_info:type_name -> dota.CMsgDraftTrivia.DraftTriviaMatchInfo
	0,  // 24: dota.CMsgTeamFanContentStatus.TeamStatus.status:type_name -> dota.ETeamFanContentStatus
	14, // 25: dota.CMsgTeamFanContentStatus.TeamStatus.asset_status:type_name -> dota.CMsgTeamFanContentAssetStatus
	32, // 26: dota.CMsgTeamFanContentAutographStatus.TeamStatus.autographs:type_name -> dota.CMsgTeamFanContentAutographStatus.AutographStatus
	7,  // 27: dota.CMsgDPCEvent.PhaseInfo.phase:type_name -> dota.CMsgDPCEvent.ELeagueEventPhase
	46, // 28: dota.CMsgDPCEvent.League.region:type_name -> dota.ELeagueRegion
	47, // 29: dota.CMsgDPCEvent.League.division:type_name -> dota.ELeagueDivision
	34, // 30: dota.CMsgDPCEvent.League.phases:type_name -> dota.CMsgDPCEvent.PhaseInfo
	36, // 31: dota.CMsgDOTAFantasyCardLineup.Card.bonuses:type_name -> dota.CMsgDOTAFantasyCardLineup.CardBonus
	37, // 32: dota.CMsgDOTAFantasyCardLineup.League.cards:type_name -> dota.CMsgDOTAFantasyCardLineup.Card
	38, // 33: dota.CMsgDOTAFantasyCardLineup.Period.leagues:type_name -> dota.CMsgDOTAFantasyCardLineup.League
	40, // 34: dota.CMsgDOTAFantasyCardList.Card.bonuses:type_name -> dota.CMsgDOTAFantasyCardList.CardBonus
	35, // [35:35] is the sub-list for method output_type
	35, // [35:35] is the sub-list for method input_type
	35, // [35:35] is the sub-list for extension type_name
	35, // [35:35] is the sub-list for extension extendee
	0,  // [0:35] is the sub-list for field type_name
}

func init() { file_dota_gcmessages_webapi_proto_init() }
func file_dota_gcmessages_webapi_proto_init() {
	if File_dota_gcmessages_webapi_proto != nil {
		return
	}
	file_steammessages_proto_init()
	file_gcsdk_gcmessages_proto_init()
	file_dota_shared_enums_proto_init()
	file_dota_gcmessages_common_proto_init()
	file_dota_match_metadata_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_dota_gcmessages_webapi_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgArcanaVotes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_webapi_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTADPCFeed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_webapi_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTADPCUserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_webapi_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDraftTrivia); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_webapi_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgTeamFanContentAssetStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_webapi_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgTeamFanContentAssetStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_webapi_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgTeamFanContentStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_webapi_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgTeamFanContentAutographStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_webapi_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDPCEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_webapi_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDPCEventList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_webapi_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAFantasyCardLineup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_webapi_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAFantasyCardList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_webapi_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgChatToxicityToxicPlayerMatchesReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_webapi_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgChatToxicityReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_webapi_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGetTeamAuditInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_webapi_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTADPCMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_webapi_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgArcanaVotes_Match); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_webapi_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTADPCFeed_Element); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_webapi_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDraftTrivia_DraftTriviaHeroInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_webapi_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDraftTrivia_DraftTriviaMatchInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_webapi_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDraftTrivia_PreviousResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_webapi_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgTeamFanContentStatus_TeamStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_webapi_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgTeamFanContentAutographStatus_AutographStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_webapi_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgTeamFanContentAutographStatus_TeamStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_webapi_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDPCEvent_PhaseInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_webapi_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDPCEvent_League); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_webapi_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAFantasyCardLineup_CardBonus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_webapi_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAFantasyCardLineup_Card); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_webapi_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAFantasyCardLineup_League); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_webapi_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAFantasyCardLineup_Period); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_webapi_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAFantasyCardList_CardBonus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_webapi_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDOTAFantasyCardList_Card); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_webapi_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgChatToxicityToxicPlayerMatchesReport_IndividualRow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota_gcmessages_webapi_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGetTeamAuditInformation_Action); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dota_gcmessages_webapi_proto_rawDesc,
			NumEnums:      10,
			NumMessages:   34,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_dota_gcmessages_webapi_proto_goTypes,
		DependencyIndexes: file_dota_gcmessages_webapi_proto_depIdxs,
		EnumInfos:         file_dota_gcmessages_webapi_proto_enumTypes,
		MessageInfos:      file_dota_gcmessages_webapi_proto_msgTypes,
	}.Build()
	File_dota_gcmessages_webapi_proto = out.File
	file_dota_gcmessages_webapi_proto_rawDesc = nil
	file_dota_gcmessages_webapi_proto_goTypes = nil
	file_dota_gcmessages_webapi_proto_depIdxs = nil
}
